Implementation smell,Namespace,Class,File,Method,Description
Long Method,DotNetNuke.Entities.Modules,ModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleInfo.cs,GetProperty,The method has 303 lines of code.
Long Method,DotNetNuke.Entities.Portals,PortalSettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalSettings.cs,GetProperty,The method has 197 lines of code.
Long Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortalInternal,The method has 174 lines of code.
Long Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,EnsureRequiredEventLogTypesExist,The method has 107 lines of code.
Long Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTemplateInternal,The method has 119 lines of code.
Long Method,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserSettings,The method has 129 lines of code.
Long Method,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,BuildCrossTabDataSet,The method has 106 lines of code.
Long Method,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTab,The method has 105 lines of code.
Long Method,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,SerializeTab,The method has 180 lines of code.
Long Method,DotNetNuke.Entities.Tabs,TabInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabInfo.cs,GetProperty,The method has 154 lines of code.
Long Method,DotNetNuke.Security.Roles,RoleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleInfo.cs,ReadXml,The method has 120 lines of code.
Long Method,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyAlias,The method has 102 lines of code.
Long Method,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The method has 109 lines of code.
Long Method,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The method has 220 lines of code.
Long Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The method has 421 lines of code.
Long Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The method has 329 lines of code.
Long Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForTabExternalForwardOrRedirect,The method has 136 lines of code.
Long Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IdentifyPortalAlias,The method has 219 lines of code.
Long Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The method has 234 lines of code.
Long Method,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The method has 107 lines of code.
Long Method,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The method has 196 lines of code.
Long Method,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckIfPortalAlias,The method has 141 lines of code.
Long Method,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The method has 271 lines of code.
Long Method,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParameters,The method has 136 lines of code.
Long Method,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The method has 114 lines of code.
Long Method,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The method has 147 lines of code.
Long Method,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddToTabDict,The method has 115 lines of code.
Long Method,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,The method has 169 lines of code.
Long Method,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,GetTabPath,The method has 100 lines of code.
Long Method,DotNetNuke.Services.Exceptions,BasePortalException,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\BasePortalException.cs,InitializePrivateVariables,The method has 104 lines of code.
Long Method,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,AddFile,The method has 127 lines of code.
Long Method,DotNetNuke.Services.FileSystem,FileServerHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileServerHandler.cs,ProcessRequest,The method has 142 lines of code.
Long Method,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The method has 249 lines of code.
Long Method,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The method has 137 lines of code.
Long Method,DotNetNuke.Services.Installer.Installers,PackageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\PackageInstaller.cs,ReadManifest,The method has 146 lines of code.
Long Method,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,ParsePackage,The method has 110 lines of code.
Long Method,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The method has 114 lines of code.
Long Method,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The method has 120 lines of code.
Long Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion500,The method has 105 lines of code.
Long Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The method has 132 lines of code.
Long Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The method has 114 lines of code.
Long Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion710,The method has 102 lines of code.
Long Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The method has 176 lines of code.
Long Method,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,SetInstallConfig,The method has 115 lines of code.
Long Method,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,GetInstallConfig,The method has 124 lines of code.
Long Method,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ReadLegacyManifest,The method has 329 lines of code.
Long Method,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,The method has 103 lines of code.
Long Method,DotNetNuke.Services.Upgrade.InternalController.Steps,InstallDatabaseStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InstallDatabaseStep.cs,Execute,The method has 107 lines of code.
Long Method,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The method has 104 lines of code.
Long Method,DotNetNuke.UI.Skins,NavObjectBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\NavObjectBase.cs,AssignControlProperties,The method has 251 lines of code.
Long Method,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The method has 120 lines of code.
Long Method,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The method has 113 lines of code.
Long Method,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoRenderTypeControls,The method has 180 lines of code.
Long Method,DotNetNuke.UI.WebControls,CollectionEditorInfoAdapter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Adapters\CollectionEditorInfoAdapter.cs,GetEditorInfo,The method has 100 lines of code.
Long Method,DotNetNuke.UI.WebControls,PropertyEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\PropertyEditorControl.cs,CreateEditor,The method has 100 lines of code.
Complex Method,DotNetNuke.Common.Utilities,CBO,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\CBO.cs,HydrateObject,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Common.Utilities,CBO,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\CBO.cs,CloneObject,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetFriendlyUrlProvider,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,ItemRemovedCallback,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,GetCachedDataFromDictionary,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,AddFolder,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,DeleteFiles,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Common.Utilities,HtmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\HtmlUtils.cs,WriteHeader,Cyclomatic complexity of the method is 30
Complex Method,DotNetNuke.Common.Utilities,ImageUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\ImageUtils.cs,CreateImage,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Common.Utilities,ImageUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\ImageUtils.cs,CreateImage,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Common.Utilities,Null,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Null.cs,SetNull,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Common.Utilities,Null,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Null.cs,SetNull,Cyclomatic complexity of the method is 37
Complex Method,DotNetNuke.Common.Utilities,Null,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Null.cs,GetNull,Cyclomatic complexity of the method is 23
Complex Method,DotNetNuke.Common.Utilities,Null,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Null.cs,IsNull,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,GetQSParamsForNavigateURL,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,ValidReturnUrl,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Common.Utilities,XmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\XmlUtils.cs,XPathLiteral,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Common.Utilities,SqlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\SqlUtils.cs,TranslateSQLException,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,ExecuteScriptInternal,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Data.PetaPoco,PetaPocoHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\PetaPoco\PetaPocoHelper.cs,BulkInsert,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Data.PetaPoco,PetaPocoHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\PetaPoco\PetaPocoHelper.cs,BulkInsert,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,AddContent,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeserializeModule,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeserializeModulePermissions,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,LocalizeModuleInternal,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,CopyModule,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,InitialModulePermission,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,LocalizeModule,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModule,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeserializeModule,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,SerializeModule,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Modules,ControlInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ControlInfo.cs,ReadXmlInternal,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,SaveDesktopModule,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Modules,DesktopModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleInfo.cs,ReadXml,Cyclomatic complexity of the method is 42
Complex Method,DotNetNuke.Entities.Modules,DesktopModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleInfo.cs,WriteXml,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Entities.Modules,DesktopModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleInfo.cs,ReadSupportedFeatures,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Entities.Modules,DesktopModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleInfo.cs,ReadModuleSharing,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Entities.Modules,EventMessageProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\EventMessageProcessor.cs,ProcessMessage,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Entities.Modules,ModuleControlInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleControlInfo.cs,ReadXml,Cyclomatic complexity of the method is 27
Complex Method,DotNetNuke.Entities.Modules,ModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleInfo.cs,Fill,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Entities.Modules,ModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleInfo.cs,GetProperty,Cyclomatic complexity of the method is 286
Complex Method,DotNetNuke.Entities.Modules,UserModuleBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\UserModuleBase.cs,CompleteUserCreation,Cyclomatic complexity of the method is 18
Complex Method,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,DeserializeProperty,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Entities.Portals,PortalSettingsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalSettingsController.cs,GetPortalAliasMappingMode,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Entities.Portals,PortalSettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalSettings.cs,GetProperty,Cyclomatic complexity of the method is 177
Complex Method,DotNetNuke.Entities.Portals,PortalAliasController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalAliasController.cs,GetPortalAliasInternal,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Portals,PortalAliasController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalAliasController.cs,GetPortalAliasByTab,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortalInternal,Cyclomatic complexity of the method is 26
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseFolderPermissions,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseProfileDefinitions,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalDesktopModules,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalSettings,Cyclomatic complexity of the method is 26
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseRoleGroups,Cyclomatic complexity of the method is 18
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseRoles,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTab,Cyclomatic complexity of the method is 34
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTabs,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTemplateInternal,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetPortal,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,MapLocalizedSpecialPages,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,DeletePortal,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetActivePortalLanguage,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Portals,PortalAliasExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasExtensions.cs,GetAliasByPortalIdAndSettings,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Portals,PortalAliasInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasInfo.cs,ReadXml,Cyclomatic complexity of the method is 31
Complex Method,DotNetNuke.Entities.Users,MembershipPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPropertyAccess.cs,GetProperty,Cyclomatic complexity of the method is 19
Complex Method,DotNetNuke.Entities.Users,ProfilePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Profile\ProfilePropertyAccess.cs,CheckAccessLevel,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Entities.Users,ProfilePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Profile\ProfilePropertyAccess.cs,GetRichValue,Cyclomatic complexity of the method is 33
Complex Method,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserSettings,Cyclomatic complexity of the method is 39
Complex Method,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserById,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserCreateStatus,Cyclomatic complexity of the method is 22
Complex Method,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserSettings,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,FillUserInfo,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Users,UserInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserInfo.cs,GetProperty,Cyclomatic complexity of the method is 40
Complex Method,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,BuildCrossTabDataSet,Cyclomatic complexity of the method is 32
Complex Method,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetFileList,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,FormatAddress,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,FormatVersion,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CreateRSS,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CreateValidClass,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CreateValidID,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,ImportUrl,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,NavigateURL,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,LinkClick,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,CheckVersion,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,LogEnd,Cyclomatic complexity of the method is 48
Complex Method,DotNetNuke.Entities,EventManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\EventManager.cs,EventManager,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Common.Internal,GlobalsImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Internal\GlobalsImpl.cs,GetDomainName,Cyclomatic complexity of the method is 24
Complex Method,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,GetAddress,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,GetPreviousWorkflowStateID,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Host,IPFilterController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\IPFilter\IPFilterController.cs,CanIPStillAccess,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,UpdateUserProfile,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,MoveTab,Cyclomatic complexity of the method is 18
Complex Method,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,CreateLocalizedCopyInternal,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTabPermissions,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,AddMissingLanguages,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializePanes,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTab,Cyclomatic complexity of the method is 18
Complex Method,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetPortalTabs,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,SerializeTab,Cyclomatic complexity of the method is 40
Complex Method,DotNetNuke.Entities.Tabs,TabInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabInfo.cs,GetProperty,Cyclomatic complexity of the method is 136
Complex Method,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,ForceDeleteVersion,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,GetSnapShot,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Security.Permissions,PermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionController.cs,RemapPermission,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,SaveFolderPermissions,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,HasModuleAccess,Cyclomatic complexity of the method is 25
Complex Method,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,WriteLog,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,AddLog,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,AddLogType,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Log.EventLog,EventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\EventLogController.cs,AddLog,Cyclomatic complexity of the method is 72
Complex Method,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,ReadXml,Cyclomatic complexity of the method is 44
Complex Method,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,IsSystemType,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,SendNotification,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,Cyclomatic complexity of the method is 27
Complex Method,DotNetNuke.Security.Roles,RoleGroupInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleGroupInfo.cs,ReadXml,Cyclomatic complexity of the method is 20
Complex Method,DotNetNuke.Security.Roles,RoleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleInfo.cs,Fill,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Security.Roles,RoleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleInfo.cs,GetProperty,Cyclomatic complexity of the method is 28
Complex Method,DotNetNuke.Security.Roles,RoleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleInfo.cs,ReadXml,Cyclomatic complexity of the method is 67
Complex Method,DotNetNuke.Security.Roles,RoleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleInfo.cs,WriteXml,Cyclomatic complexity of the method is 31
Complex Method,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,DeterminePageNameAndExtension,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyAlias,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,Cyclomatic complexity of the method is 24
Complex Method,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,Cyclomatic complexity of the method is 44
Complex Method,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,OutputFriendlyUrlMessages,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,TransformStandardPath,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,Cyclomatic complexity of the method is 74
Complex Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ShowDebugData,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,Cyclomatic complexity of the method is 57
Complex Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForTabExternalForwardOrRedirect,Cyclomatic complexity of the method is 41
Complex Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForSecureRedirect,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IsPortalAliasIncorrect,Cyclomatic complexity of the method is 18
Complex Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ConfigurePortalAliasRedirect,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IdentifyPortalAlias,Cyclomatic complexity of the method is 40
Complex Method,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,Cyclomatic complexity of the method is 39
Complex Method,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,GetFriendlyAlias,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,GetFriendlyQueryString,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,FriendlyUrl,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,FindFriendlyUrlParmsConfigFilePath,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,GetProvidersForTabAndPortal,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,StoreListOfTabsWithProviders,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,StoreModuleProvidersForPortal,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,GetPortal,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,RemovedPageIndexCallBack,Cyclomatic complexity of the method is 24
Complex Method,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Entities.Urls,CustomUrlDictController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CustomUrlDictController.cs,BuildUrlDictionary,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Entities.Urls,CustomUrlDictController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CustomUrlDictController.cs,AddEntryToDictionary,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,CheckForAlwaysCallProviders,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,Cyclomatic complexity of the method is 27
Complex Method,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,LogModuleProviderExceptionInRequest,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,SplitUserIdFromFriendlyUrlPath,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,CheckParameterRegexReplacement,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,CheckUserProfileReplacement,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Entities.Urls,FriendlyUrlProviderBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlProviderBase.cs,FriendlyUrlProviderBase,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Entities.Urls,FriendlyUrlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlController.cs,CleanNameForUrl,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Entities.Urls,FriendlyUrlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlController.cs,GetBrowserType,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Urls,FriendlyUrlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlController.cs,ValidateUrl,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,Cyclomatic complexity of the method is 42
Complex Method,DotNetNuke.Entities.Urls,RedirectTokens,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectTokens.cs,GetRedirectActionTokenAndValue,Cyclomatic complexity of the method is 20
Complex Method,DotNetNuke.Entities.Urls,RedirectTokens,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectTokens.cs,GetRedirectReasonRewriteToken,Cyclomatic complexity of the method is 24
Complex Method,DotNetNuke.Entities.Urls,RedirectTokens,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectTokens.cs,AddRedirectReasonToRewritePath,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Urls,RedirectTokens,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectTokens.cs,DetermineRedirectReasonAndAction,Cyclomatic complexity of the method is 35
Complex Method,DotNetNuke.Entities.Urls,RedirectTokens,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectTokens.cs,GetActionFromRewritePath,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,AddQueryStringToRewritePath,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckIfPortalAlias,Cyclomatic complexity of the method is 24
Complex Method,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckTabPath,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,SetRewriteParameters,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,Cyclomatic complexity of the method is 44
Complex Method,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,IdentifyByPhysicalResource,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,IdentifyByRegEx,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParameters,Cyclomatic complexity of the method is 24
Complex Method,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParameters,Cyclomatic complexity of the method is 19
Complex Method,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,Cyclomatic complexity of the method is 26
Complex Method,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,Cyclomatic complexity of the method is 24
Complex Method,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddToTabDict,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildPortalAliasesRegexDictionary,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,Cyclomatic complexity of the method is 27
Complex Method,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,FetchTabDictionary,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,GetPortalAliasByPortal,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,GetTabPath,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,IsTabHomePage,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Urls,XmlHelpers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\XmlHelpers.cs,TabIdsFromAttributes,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,ManageUserRelationshipStatus,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RequestRegistration,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RegisterScript,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,HandlePreInstallorLegacyItemRequests,Cyclomatic complexity of the method is 36
Complex Method,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RegisterClientReference,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Framework.JavaScriptLibraries,JavaScriptLibrary,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScriptLibrary.cs,ReadXml,Cyclomatic complexity of the method is 25
Complex Method,DotNetNuke.Framework,AJAX,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\AJAX.cs,AddScriptManager,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,LocalizeControl,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,ProcessControl,Cyclomatic complexity of the method is 19
Complex Method,DotNetNuke.Framework,SecurityPolicy,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\SecurityPolicy.cs,HasPermissions,Cyclomatic complexity of the method is 19
Complex Method,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,ProcessRole,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,InputFilter,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Replace,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Remove,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,SignOut,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,IsDenied,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateMemberhipUser,Cyclomatic complexity of the method is 34
Complex Method,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,FillUserAndProfile,Cyclomatic complexity of the method is 29
Complex Method,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,FillUserInfo,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateUser,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,UserLogin,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Security.Profile,DNNProfileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Profile\DNNProfileProvider.cs,GetUserProfile,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Services.Authentication,AuthenticationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\AuthenticationController.cs,SetAuthenticationType,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,AuthorizeV1,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,ExecuteWebRequest,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,AuthenticateUser,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,DecryptParameter,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.Exceptions,BasePortalException,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\BasePortalException.cs,InitializePrivateVariables,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Services.Exceptions,ExceptionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\ExceptionInfo.cs,ReadXml,Cyclomatic complexity of the method is 52
Complex Method,DotNetNuke.Services.Exceptions,Exceptions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\Exceptions.cs,ProcessModuleLoadException,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,OrientationToFlipType,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,AddFile,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,CopyFile,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,MoveFile,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,ExtractFiles,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,WriteFileToHttpContext,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Services.FileSystem,FileServerHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileServerHandler.cs,ProcessRequest,Cyclomatic complexity of the method is 40
Complex Method,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,DeleteFolderRecursive,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AddUserFolder,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,CreateFolderInDatabase,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,SynchronizeFiles,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,Cyclomatic complexity of the method is 108
Complex Method,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,ReadSettings,Cyclomatic complexity of the method is 35
Complex Method,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,Cyclomatic complexity of the method is 27
Complex Method,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageResizeTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageResizeTransform.cs,ProcessImage,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Services.GeneratedImage.ImageQuantization,PaletteQuantizer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageQuantization\PaletteQuantizer.cs,QuantizePixel,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.ImprovementsProgram,BeaconService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ImprovementsProgram\BeaconService.cs,GetBeaconQuery,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Services.Installer.Dependencies,DependencyFactory,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Dependencies\DependencyFactory.cs,GetDependency,Cyclomatic complexity of the method is 22
Complex Method,DotNetNuke.Services.Installer.Installers,AssemblyInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AssemblyInstaller.cs,InstallFile,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Services.Installer.Installers,ComponentInstallerBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ComponentInstallerBase.cs,ReadEventMessageNode,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Services.Installer.Installers,FileInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\FileInstaller.cs,ReadManifestItem,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Installer.Installers,InstallerFactory,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\InstallerFactory.cs,GetInstaller,Cyclomatic complexity of the method is 61
Complex Method,DotNetNuke.Services.Installer.Installers,ModuleInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ModuleInstaller.cs,DeleteModule,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Installer.Installers,ModuleInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ModuleInstaller.cs,Commit,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Installer.Installers,PackageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\PackageInstaller.cs,Install,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Installer.Installers,PackageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\PackageInstaller.cs,ReadManifest,Cyclomatic complexity of the method is 47
Complex Method,DotNetNuke.Services.Installer.Installers,ScriptInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ScriptInstaller.cs,Install,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Services.Installer.Installers,SkinInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\SkinInstaller.cs,Install,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,DeleteExtensionPackage,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,CanDeletePackage,Cyclomatic complexity of the method is 22
Complex Method,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,ParsePackage,Cyclomatic complexity of the method is 44
Complex Method,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,SaveString,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileCallBack,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileName,Cyclomatic complexity of the method is 26
Complex Method,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetStringInternal,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetFromResourceFile,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,LocalizeDataControlField,Cyclomatic complexity of the method is 20
Complex Method,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,Cyclomatic complexity of the method is 104
Complex Method,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetLocaleName,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,LocalizeDataGrid,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,LocalizeRole,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,RemoveLanguageFromPortal,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetTimeZones,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Localization,LocalizationExpressionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationExpressionBuilder.cs,GetLocalizedResource,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,GetCacheFolder,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Search.Controllers,ModuleResultController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\ModuleResultController.cs,HasViewPermission,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Search.Controllers,UserResultController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\UserResultController.cs,HasSocialReplationship,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetSort,Cyclomatic complexity of the method is 25
Complex Method,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,ApplySearchTypeIdFilter,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,FillTagsValues,Cyclomatic complexity of the method is 71
Complex Method,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetSnippet,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,RephraseSearchText,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,CleanSearchPhrase,Cyclomatic complexity of the method is 27
Complex Method,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,SynonymTermsCallBack,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Search.Internals,SearchQueryStringParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchQueryStringParser.cs,GetLastModifiedDate,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Services.Search.Internals,SearchSecurityTrimmer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchSecurityTrimmer.cs,PrepareScoreDocs,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,SearchContentSourceCallback,Cyclomatic complexity of the method is 19
Complex Method,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentInternal,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,DeleteSearchDocumentInternal,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,Cyclomatic complexity of the method is 34
Complex Method,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,StripTagsRetainAttributes,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,IndexSearchDocuments,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,FindModifiedUsers,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,IndexSearchDocuments,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Search,SearchDataStore,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchDataStore.cs,GetSearchResults,Cyclomatic complexity of the method is 24
Complex Method,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,Cyclomatic complexity of the method is 29
Complex Method,DotNetNuke.Services.Tokens,JavaScriptPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\JavaScriptPropertyAccess.cs,ProcessToken,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Services.Tokens,ArrayListPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\ArrayListPropertyAccesss.cs,GetProperty,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Services.Tokens,CulturePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\CulturePropertyAccess.cs,GetProperty,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Services.Tokens,DataRowPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\DataRowPropertyAccess.cs,GetProperty,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.Tokens,DateTimePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\DateTimePropertyAccess.cs,GetProperty,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Services.Tokens,DictionaryPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\DictionaryPropertyAccess.cs,GetProperty,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.Tokens,PropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\PropertyAccess.cs,GetObjectProperty,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.Tokens,TokenReplace,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\TokenReplace.cs,TokenReplace,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddDefaultModuleIcons,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleCategories,Cyclomatic complexity of the method is 35
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,EnableModalPopUps,Cyclomatic complexity of the method is 36
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ExecuteScript,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,RemoveCoreModule,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion500,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion550,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion600,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion612,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion710,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion720,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion722,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddMissingNotificationTypes,Cyclomatic complexity of the method is 24
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateChildPortalsDefaultPage,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddPortal,Cyclomatic complexity of the method is 18
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,CheckUpgrade,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InitialiseHostSettings,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallPackage,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ParsePackagesFromApplicationPath,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,IsNETFrameworkCurrent,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,TryUpgradeNETFramework,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,Cyclomatic complexity of the method is 141
Complex Method,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,GetConnectionFromWebConfig,Cyclomatic complexity of the method is 28
Complex Method,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,SetInstallConfig,Cyclomatic complexity of the method is 20
Complex Method,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,GetInstallConfig,Cyclomatic complexity of the method is 22
Complex Method,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,ClearCacheInternal,Cyclomatic complexity of the method is 27
Complex Method,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,UpdateGroupStats,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,PrepareSecuritySet,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,SaveJournalItem,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,UpdateJournalItem,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Services.Journal,JournalItem,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalItem.cs,GetProperty,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.Localization.Internal,LocalizationImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Internal\LocalizationImpl.cs,BestCultureCodeBasedOnBrowserLanguages,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,GetCacheFolder,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetPageUrl,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Sitemap,SitemapBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\SitemapBuilder.cs,BuildSiteMap,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,ReplyMessage,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,SendNotification,Cyclomatic complexity of the method is 19
Complex Method,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,GetInBoxView,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Entities.Modules.Definitions,ModuleDefinitionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Definitions\ModuleDefinitionController.cs,SaveModuleDefinition,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Entities.Modules.Definitions,ModuleDefinitionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Definitions\ModuleDefinitionInfo.cs,ReadXml,Cyclomatic complexity of the method is 24
Complex Method,DotNetNuke.Entities.Modules.Definitions,ModuleDefinitionValidator,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Definitions\ModuleDefinitionValidator.cs,GetDnnSchemaPath,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Entities.Modules.Definitions,ModuleDefinitionValidator,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Definitions\ModuleDefinitionValidator.cs,GetModuleDefinitionVersion,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Framework.Providers,ProviderConfiguration,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\Providers\ProviderConfiguration.cs,GetProviders,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,BindUsersGrid,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Analytics,GoogleAnalyticsEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Analytics\GoogleAnalyticsEngine.cs,RenderScript,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Services.Analytics.Config,AnalyticsConfiguration,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Analytics\Config\AnalyticsConfiguration.cs,GetConfig,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,IsRedirectAllowedForTheSession,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetRedirectUrl,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetFullSiteUrl,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetMobileSiteUrl,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetRedirectUrlFromRule,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,DoesCapabilityMatchWithRule,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Installer,Installer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installer.cs,ReadManifest,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Services.Installer,Installer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installer.cs,ConvertLegacyNavigator,Cyclomatic complexity of the method is 20
Complex Method,DotNetNuke.Services.Installer,InstallerInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\InstallerInfo.cs,ReadZipStream,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Services.Installer,InstallFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\InstallFile.cs,ParseFileName,Cyclomatic complexity of the method is 28
Complex Method,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,CreateSkinManifest,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ParsePackageName,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacyLanguages,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,GetExternalRequest,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,InsertNode,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,ProcessNode,Cyclomatic complexity of the method is 25
Complex Method,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,ProcessNodes,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,UpdateNode,Cyclomatic complexity of the method is 20
Complex Method,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,UpdateConfigs,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Installer.Log,Logger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Log\Logger.cs,GetLogsTable,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ReadLegacyManifest,Cyclomatic complexity of the method is 28
Complex Method,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ParseFiles,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Installer.Writers,ModulePackageWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\ModulePackageWriter.cs,ReadLegacyManifest,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Services.Installer.Writers,PackageWriterBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\PackageWriterBase.cs,ParseProjectFile,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Services.Installer.Writers,PackageWriterBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\PackageWriterBase.cs,AddFile,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Services.Installer.Writers,PackageWriterBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\PackageWriterBase.cs,WriteManifest,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Services.Installer.Writers,PackageWriterFactory,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\PackageWriterFactory.cs,GetWriter,Cyclomatic complexity of the method is 34
Complex Method,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMailInternal,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,Cyclomatic complexity of the method is 50
Complex Method,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,Cyclomatic complexity of the method is 26
Complex Method,DotNetNuke.Services.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Messaging\MessagingController.cs,UpdateMessage,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.Syndication,RssHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Syndication\RssHandler.cs,PopulateChannel,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Services.Upgrade.InternalController.Steps,InitializeHostSettingsStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InitializeHostSettingsStep.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Services.Upgrade.InternalController.Steps,SynchConnectionStringStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\SynchConnectionStringStep.cs,Execute,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Services.Upgrade.InternalController.Steps,InstallDatabaseStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InstallDatabaseStep.cs,Execute,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Services.Upgrade.InternalController.Steps,InstallSiteStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InstallSiteStep.cs,CreateSite,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,ProcessRequest,Cyclomatic complexity of the method is 26
Complex Method,DotNetNuke.Services.UserProfile,UserProfilePageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePageHandler.cs,ProcessRequest,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,MoveUpDown,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,ProcessAction,Cyclomatic complexity of the method is 44
Complex Method,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,Cyclomatic complexity of the method is 22
Complex Method,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,AddChildActions,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,AddNode,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,ProcessTab,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.UI.Modules,ModuleControlFactory,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleControlFactory.cs,GetModuleControlFactory,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,DisplayContent,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,Cyclomatic complexity of the method is 31
Complex Method,DotNetNuke.UI.Modules.Html5,ModuleActionsPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\Html5\ModuleActionsPropertyAccess.cs,ProcessToken,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.UI.Modules.Html5,ModuleContextPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\Html5\ModuleContextPropertyAccess.cs,GetProperty,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.UI.Skins.Controls,LanguagePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\LanguageTokenReplace.cs,GetProperty,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.UI.Skins.Controls,LanguagePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\LanguageTokenReplace.cs,GetQsParams,Cyclomatic complexity of the method is 25
Complex Method,DotNetNuke.UI.Skins.Controls,LanguagePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\LanguageTokenReplace.cs,NewUrl,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.UI.Skins.Controls,ModuleMessage,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\ModuleMessage.cs,OnLoad,Cyclomatic complexity of the method is 19
Complex Method,DotNetNuke.UI.Skins.Controls,SkinsEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\SkinsEditControl.cs,RaisePostBackEvent,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.UI.Skins.Controls,SkinsEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\SkinsEditControl.cs,RenderEditMode,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.UI.Skins,NavObjectBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\NavObjectBase.cs,GetNavigationNodes,Cyclomatic complexity of the method is 28
Complex Method,DotNetNuke.UI.Skins,NavObjectBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\NavObjectBase.cs,AssignControlProperties,Cyclomatic complexity of the method is 96
Complex Method,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,LoadModuleContainer,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,InjectModule,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,ProcessPane,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,LoadPanes,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,ProcessMasterModules,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,ProcessSlaveModule,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,GetSkin,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.UI.Skins,SkinControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinControl.cs,OnLoad,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,FormatMessage,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,FormatSkinSrc,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,GetSkins,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,SetSkin,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,Cyclomatic complexity of the method is 23
Complex Method,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,ProcessFile,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,ShowRequiredFields,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.UI.UserControls,Help,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Help.cs,OnLoad,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.UI.UserControls,LabelControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\LabelControl.cs,OnPreRender,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.UI.UserControls,TextEditor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\TextEditor.cs,OptViewSelectedIndexChanged,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoChangeURL,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoRenderTypes,Cyclomatic complexity of the method is 23
Complex Method,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoRenderTypeControls,Cyclomatic complexity of the method is 107
Complex Method,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,cmdSave_Click,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.UI.UserControls,URLTrackingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLTrackingControl.cs,OnLoad,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,Cyclomatic complexity of the method is 29
Complex Method,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,MinMaxContentVisibile,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,MinMaxContentVisibile,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,Render,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.UI.WebControls,ImageCommandColumnTemplate,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\ImageCommandColumnTemplate.cs,InstantiateIn,Cyclomatic complexity of the method is 18
Complex Method,DotNetNuke.UI.WebControls,TextColumnTemplate,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\TextColumnTemplate.cs,InstantiateIn,Cyclomatic complexity of the method is 18
Complex Method,DotNetNuke.UI.WebControls,TextColumnTemplate,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\TextColumnTemplate.cs,Item_DataBinding,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.UI.WebControls,DualListBox,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DualListBox.cs,RaisePostBackEvent,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.UI.WebControls,DualListBox,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DualListBox.cs,RenderButton,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,BindPageNumbers,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.UI.WebControls,CollectionEditorInfoAdapter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Adapters\CollectionEditorInfoAdapter.cs,GetEditorInfo,Cyclomatic complexity of the method is 19
Complex Method,DotNetNuke.UI.WebControls,StandardEditorInfoAdapter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Adapters\StandardEditorInfoAdapter.cs,GetEditorInfo,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,LoadDateControls,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.UI.WebControls,DNNListEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNListEditControl.cs,RenderViewMode,Cyclomatic complexity of the method is 18
Complex Method,DotNetNuke.UI.WebControls,DNNListEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNListEditControl.cs,RenderEditMode,Cyclomatic complexity of the method is 22
Complex Method,DotNetNuke.UI.WebControls,DNNLocaleEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNLocaleEditControl.cs,RenderEditMode,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.UI.WebControls,EditControlFactory,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\EditControlFactory.cs,CreateEditControlInternal,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildDiv,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildLabel,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildTable,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,CreateEditor,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.UI.WebControls,ProfileEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\ProfileEditorControl.cs,CreateEditor,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.UI.WebControls,PropertyEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\PropertyEditorControl.cs,GetProperties,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.UI.WebControls,PropertyEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\PropertyEditorControl.cs,CreateEditor,Cyclomatic complexity of the method is 22
Complex Method,DotNetNuke.UI.WebControls.Internal,PermissionTriState,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\PermissionTriState.cs,Render,Cyclomatic complexity of the method is 17
Long Parameter List,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The method has 7 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The method has 8 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The method has 7 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,CreateFile,The method has 7 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,AddFile,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,AddFolder,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,CreateFileFromString,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,SetFolderPermission,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,SetFolderPermission,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,SynchronizeFolder,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,SynchronizeFolder,The method has 7 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,SynchronizeFolder,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,GetFoldersByUser,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,SynchronizeFolder,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,UrlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlController.cs,UpdateUrl,The method has 7 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,UrlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlController.cs,UpdateUrl,The method has 10 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,UrlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlController.cs,GetUrlLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,PopUpUrl,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,PopUpUrl,The method has 7 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,PopUpUrl,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,PopUpUrl,The method has 9 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,XmlExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\XmlExtensions.cs,AddElement,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,XmlExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\XmlExtensions.cs,AddAttribute,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,XmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\XmlUtils.cs,AppendElement,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,XmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\XmlUtils.cs,AppendElement,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common.Utilities,XmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\XmlUtils.cs,SerializeHashtable,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,BulkInsert,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,BulkInsert,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateDatabaseVersionIncrement,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateServer,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateServerActivity,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,CreatePortal,The method has 10 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,CreatePortal,The method has 11 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdatePortalInfo,The method has 33 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdatePortalSetting,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdatePortalSetup,The method has 14 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,SaveTabUrl,The method has 10 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,SaveTabVersion,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,SaveTabVersionDetail,The method has 9 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateTab,The method has 29 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddModule,The method has 11 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddTabModule,The method has 28 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,MoveTabModule,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateModule,The method has 11 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateTabModule,The method has 28 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddDesktopModule,The method has 18 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateDesktopModule,The method has 19 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddModuleDefinition,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateModuleDefinition,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddModuleControl,The method has 11 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateModuleControl,The method has 12 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddFolder,The method has 14 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateFolder,The method has 14 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddFile,The method has 20 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateFile,The method has 18 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddPermission,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdatePermission,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddModulePermission,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateModulePermission,The method has 8 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddTabPermission,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateTabPermission,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddFolderPermission,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateFolderPermission,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddDesktopModulePermission,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateDesktopModulePermission,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddRole,The method has 18 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateRole,The method has 18 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddUser,The method has 11 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetAllUsers,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetUsersAdvancedSearch,The method has 12 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetUsersBasicSearch,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetUsersByEmail,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetUsersByProfileProperty,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetUsersByUsername,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetUsersByDisplayname,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateUser,The method has 16 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddUserRole,The method has 8 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateUserRole,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddPropertyDefinition,The method has 14 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateProfileProperty,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdatePropertyDefinition,The method has 13 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddSkinControl,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateSkinControl,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddSkinPackage,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateSkinPackage,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddUrlTracking,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateUrlTracking,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddListEntry,The method has 11 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateListEntry,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddPortalAlias,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdatePortalAliasInfo,The method has 8 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddEventMessage,The method has 12 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddAuthentication,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateAuthentication,The method has 8 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddPackage,The method has 17 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdatePackage,The method has 17 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateLanguage,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateLanguagePack,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,SavePreviewProfile,The method has 8 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,SaveRedirection,The method has 11 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddLog,The method has 12 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddLogType,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddLogTypeConfigInfo,The method has 10 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateLogType,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateLogTypeConfigInfo,The method has 11 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddSchedule,The method has 14 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateSchedule,The method has 15 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateScheduleHistory,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddExtensionUrlProvider,The method has 9 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateIPFilter,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddFileVersion,The method has 21 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddContentWorkflow,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateContentWorkflow,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddContentWorkflowState,The method has 11 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateContentWorkflowState,The method has 11 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddContentWorkflowLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddContentWorkflowStatePermission,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateContentWorkflowStatePermission,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data.PetaPoco,FluentMapperExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\PetaPoco\FluentMapperExtensions.cs,Property,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data.PetaPoco,FluentMapperExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\PetaPoco\FluentMapperExtensions.cs,Property,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data.PetaPoco,FluentMapperExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\PetaPoco\FluentMapperExtensions.cs,Property,The method has 7 parameters.
Long Parameter List,DotNetNuke.Data.PetaPoco,PetaPocoHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\PetaPoco\PetaPocoHelper.cs,ExecuteNonQuery,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data.PetaPoco,PetaPocoHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\PetaPoco\PetaPocoHelper.cs,BulkInsert,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data.PetaPoco,PetaPocoHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\PetaPoco\PetaPocoHelper.cs,BulkInsert,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data.PetaPoco,PetaPocoHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\PetaPoco\PetaPocoHelper.cs,BulkInsert,The method has 6 parameters.
Long Parameter List,DotNetNuke.Data.PetaPoco,PetaPocoHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\PetaPoco\PetaPocoHelper.cs,ExecuteReader,The method has 5 parameters.
Long Parameter List,DotNetNuke.Data.PetaPoco,PetaPocoHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\PetaPoco\PetaPocoHelper.cs,ExecuteScalar,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,AddModulePermission,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,AddModulePermission,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeserializeModule,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeleteAllModules,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeserializeModule,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,CopyModule,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeleteAllModules,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeleteAllModules,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Modules,IModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\IModuleController.cs,DeleteAllModules,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,AddDesktopModulePageToPortal,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Modules,ModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleInfo.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalSettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalSettings.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The method has 15 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The method has 11 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePanes,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTemplate,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTemplate,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,UpdatePortalInfo,The method has 28 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,UpdatePortalInfo,The method has 29 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreateDefaultPortalRoles,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortalInternal,The method has 12 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreateRole,The method has 11 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTab,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTabs,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTemplateInternal,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTemplateInternal,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,UpdatePortalSettingInternal,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,UpdatePortalSetup,The method has 14 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The method has 10 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The method has 10 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTemplate,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,UpdatePortalSetting,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,UpdatePortalSetting,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalAliasExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasExtensions.cs,GetAliasByPortalIdAndSettings,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalAliasExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasExtensions.cs,GetAliasByPortalIdAndSettings,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalAliasExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasExtensions.cs,GetAliasByPortalIdAndSettings,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalAliasExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasExtensions.cs,GetSettingsByPortalIdAndAlias,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,IPortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\IPortalController.cs,CreatePortal,The method has 10 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,IPortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\IPortalController.cs,CreatePortal,The method has 10 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,IPortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\IPortalController.cs,ParseTemplate,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,IPortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\IPortalController.cs,UpdatePortalSetting,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Portals,PortalGroupController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalGroupController.cs,OnUserAddedToSiteGroup,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Users,IUserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\IUserController.cs,GetUsersAdvancedSearch,The method has 12 parameters.
Long Parameter List,DotNetNuke.Entities.Users,IUserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\IUserController.cs,GetUsersBasicSearch,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Users,MembershipPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Users,ProfilePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Profile\ProfilePropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,AddEventLog,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersAdvancedSearch,The method has 12 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersBasicSearch,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,ChangePasswordByToken,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsers,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByEmail,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByEmail,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByProfileProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByProfileProperty,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByUserName,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByUserName,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByDisplayName,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,UpdateUser,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,UserLogin,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,UserLogin,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,ValidateUser,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,ValidateUser,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsers,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByEmail,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByUserName,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByProfileProperty,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,ChangePasswordByToken,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Users,UserInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserInfo.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,BuildCrossTabDataSet,The method has 9 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,BuildCrossTabDataSet,The method has 10 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetFileList,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,FormatAddress,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CreateRSS,The method has 7 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,NavigateURL,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,NavigateURL,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,NavigateURL,The method has 7 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,LinkClick,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,LinkClick,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,LinkClick,The method has 8 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,AddFile,The method has 7 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The method has 7 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Modules.Actions,ModuleAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Actions\ModuleAction.cs,ModuleAction,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Modules.Actions,ModuleAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Actions\ModuleAction.cs,ModuleAction,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Modules.Actions,ModuleAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Actions\ModuleAction.cs,ModuleAction,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Modules.Actions,ModuleAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Actions\ModuleAction.cs,ModuleAction,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Modules.Actions,ModuleAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Actions\ModuleAction.cs,ModuleAction,The method has 9 parameters.
Long Parameter List,DotNetNuke.Entities.Modules.Actions,ModuleAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Actions\ModuleAction.cs,ModuleAction,The method has 10 parameters.
Long Parameter List,DotNetNuke.Entities.Modules.Actions,ModuleAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Actions\ModuleAction.cs,ModuleAction,The method has 11 parameters.
Long Parameter List,DotNetNuke.Entities.Modules.Actions,ModuleActionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Actions\ModuleActionCollection.cs,Add,The method has 10 parameters.
Long Parameter List,DotNetNuke.Entities.Modules.Actions,ModuleActionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Actions\ModuleActionCollection.cs,Add,The method has 11 parameters.
Long Parameter List,DotNetNuke.Common.Internal,GlobalsImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Internal\GlobalsImpl.cs,LinkClick,The method has 8 parameters.
Long Parameter List,DotNetNuke.Common.Internal,GlobalsImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Internal\GlobalsImpl.cs,NavigateURL,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common.Internal,GlobalsImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Internal\GlobalsImpl.cs,NavigateURL,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common.Internal,GlobalsImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Internal\GlobalsImpl.cs,NavigateURL,The method has 7 parameters.
Long Parameter List,DotNetNuke.Common.Internal,IGlobals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Internal\IGlobals.cs,LinkClick,The method has 8 parameters.
Long Parameter List,DotNetNuke.Common.Internal,IGlobals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Internal\IGlobals.cs,NavigateURL,The method has 5 parameters.
Long Parameter List,DotNetNuke.Common.Internal,IGlobals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Internal\IGlobals.cs,NavigateURL,The method has 6 parameters.
Long Parameter List,DotNetNuke.Common.Internal,IGlobals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Internal\IGlobals.cs,NavigateURL,The method has 7 parameters.
Long Parameter List,DotNetNuke.Common.Utilities.Internal,RetryableAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RetryableAction.cs,RetryableAction,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,ReplaceNotificationTokens,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,CompleteState,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,CompleteState,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,DiscardState,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,SendWorkflowNotification,The method has 9 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,SendNotification,The method has 11 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,SendNotification,The method has 11 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,SendMessageNotifications,The method has 9 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,SendEmailNotifications,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,AddWorkflowLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,IContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\IContentWorkflowController.cs,CompleteState,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,IContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\IContentWorkflowController.cs,CompleteState,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,IContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\IContentWorkflowController.cs,DiscardState,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,IContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\IContentWorkflowController.cs,SendWorkflowNotification,The method has 9 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,IContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\IContentWorkflowController.cs,ReplaceNotificationTokens,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,IWorkflowLogger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\IWorkflowLogger.cs,AddWorkflowLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,IWorkflowLogger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\IWorkflowLogger.cs,AddWorkflowLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,SendNotificationToAuthor,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,SendNotificationToWorkflowStarter,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,SendNotificationsToReviewers,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,AddWorkflowLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,TryAddWorkflowLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,ReplaceNotificationTokens,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,WorkflowLogger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowLogger.cs,AddWorkflowLog,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,WorkflowLogger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowLogger.cs,AddWorkflowLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Content.Workflow,WorkflowLogger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowLogger.cs,AddWorkflowLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Host,HostPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\HostPropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinition,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinition,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTab,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,UpdateTabOrder,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializePanes,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTab,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetPortalTabs,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetPortalTabs,The method has 9 parameters.
Long Parameter List,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetPortalTabs,The method has 9 parameters.
Long Parameter List,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,SerializeTab,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Tabs,TabInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabInfo.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Tabs.TabVersions,TabVersionTracker,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionTracker.cs,CreateNewTabVersionDetailObjectFromModule,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Users.Internal,IUserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\IUserController.cs,GetUsersAdvancedSearch,The method has 12 parameters.
Long Parameter List,DotNetNuke.Entities.Users.Internal,IUserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\IUserController.cs,GetUsersBasicSearch,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Users.Internal,TestableUserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TestableUserController.cs,GetUsersAdvancedSearch,The method has 12 parameters.
Long Parameter List,DotNetNuke.Entities.Users.Internal,TestableUserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TestableUserController.cs,GetUsersBasicSearch,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,GetLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,GetLogs,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,ILogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\ILogController.cs,GetLogs,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,AddLogType,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,AddLogTypeConfigInfo,The method has 12 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,GetLogs,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,UpdateLogType,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,UpdateLogTypeConfigInfo,The method has 12 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,GetLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,IEventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\IEventLogController.cs,AddLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,IEventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\IEventLogController.cs,AddLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,IEventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\IEventLogController.cs,AddLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,IEventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\IEventLogController.cs,AddLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,IEventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\IEventLogController.cs,AddLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,EventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\EventLogController.cs,AddLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,EventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\EventLogController.cs,AddLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,EventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\EventLogController.cs,AddLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,EventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\EventLogController.cs,AddLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,EventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\EventLogController.cs,AddLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,EventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\EventLogController.cs,GetLogs,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,EventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\EventLogController.cs,AddSettingLog,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,LoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LoggingProvider.cs,AddLogType,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,LoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LoggingProvider.cs,AddLogTypeConfigInfo,The method has 12 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,LoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LoggingProvider.cs,GetLogs,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,LoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LoggingProvider.cs,UpdateLogType,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,LoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LoggingProvider.cs,UpdateLogTypeConfigInfo,The method has 12 parameters.
Long Parameter List,DotNetNuke.Services.Log.EventLog,LoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LoggingProvider.cs,GetLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,AddUserRole,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,AddUserRole,The method has 5 parameters.
Long Parameter List,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,AddUserRole,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,AddUserRole,The method has 8 parameters.
Long Parameter List,DotNetNuke.Security.Roles,IRoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\IRoleController.cs,AddUserRole,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Roles,IRoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\IRoleController.cs,UpdateUserRole,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Roles,RoleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleInfo.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,BaseFriendlyUrl,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImprovedFriendlyUrl,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImprovedFriendlyUrlWithMessages,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,CreateFriendlyUrl,The method has 12 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,FriendlyUrlInternal,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyAlias,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrl,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The method has 9 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,OutputFriendlyUrlMessages,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessTestRequestWithContext,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,GetPortalAlias,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForTabExternalForwardOrRedirect,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForSecureRedirect,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IsPortalAliasIncorrect,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ConfigurePortalAliasRedirect,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ConfigurePortalAliasRedirect,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IdentifyPortalAlias,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRewrite,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckFor301RedirectExclusion,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,SetPageCache,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,GetProvidersForTabAndPortal,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,StoreFriendlyUrlIndexInCache,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,CustomUrlDictController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CustomUrlDictController.cs,AddEntryToDictionary,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,CustomUrlDictController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CustomUrlDictController.cs,FetchCustomUrlDictionary,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,CheckForRedirect,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,GetUrlFromExtensionUrlProviders,The method has 10 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The method has 10 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,LogModuleProviderExceptionInRequest,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,SplitUserIdFromFriendlyUrlPath,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,CheckParameterRegexReplacement,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,CheckUserProfileReplacement,The method has 10 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,ExtensionUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProvider.cs,ChangeFriendlyUrl,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,ExtensionUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProvider.cs,CheckForRedirect,The method has 8 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,ExtensionUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProvider.cs,TransformFriendlyUrlToQueryString,The method has 9 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForModuleProviderRedirect,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,GetTabRedirectUrl,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,RedirectTokens,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectTokens.cs,DetermineRedirectReasonAndAction,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckIfPortalAlias,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckTabPath,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParametersFromModuleProvider,The method has 10 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,AddSkinToRewritePath,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,IdentifyByPhysicalResource,The method has 9 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,IdentifyByRegEx,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,IdentifyByTabPathEx,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParameters,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParameters,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The method has 11 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddPermanentRedirectToDictionary,The method has 9 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddSiteRootRedirects,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddStandardPagesToDict,The method has 5 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The method has 14 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddToTabDict,The method has 10 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,The method has 7 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,ManageCustomAliases,The method has 6 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,FetchTabDictionary,The method has 9 parameters.
Long Parameter List,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,GetTabPath,The method has 13 parameters.
Long Parameter List,DotNetNuke.Framework,Reflection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\Reflection.cs,CreateObject,The method has 5 parameters.
Long Parameter List,DotNetNuke.Framework,Reflection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\Reflection.cs,CreateObject,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,UserLogin,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,ValidateLogin,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsers,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersAdvancedSearch,The method has 12 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersBasicSearch,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByEmail,The method has 5 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByEmail,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByUserName,The method has 5 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByUserName,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByDisplayName,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByProfileProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByProfileProperty,The method has 8 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,UserLogin,The method has 5 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,UserLogin,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsers,The method has 5 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByEmail,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByUserName,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByProfileProperty,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,UserLogin,The method has 5 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,UserLogin,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsersByEmail,The method has 5 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsersByUserName,The method has 5 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsersByProfileProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsers,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsersByEmail,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsersByUserName,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsersByDisplayName,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsersByProfileProperty,The method has 8 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsersAdvancedSearch,The method has 12 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsersBasicSearch,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsers,The method has 5 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsersByEmail,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsersByUserName,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Membership,MembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\MembershipProvider.cs,GetUsersByProfileProperty,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,GetFolderContent,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,SearchFolderContent,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Assets,IAssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\IAssetManager.cs,GetFolderContent,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Assets,IAssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\IAssetManager.cs,SearchFolderContent,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,GenerateSignatureBase,The method has 9 parameters.
Long Parameter List,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,AuthenticateUser,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,GenerateSignature,The method has 10 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileVersionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileVersionController.cs,AddFileVersion,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,IFileVersionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\IFileVersionController.cs,AddFileVersion,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,IFileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\IFileManager.cs,AddFile,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,IFileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\IFileManager.cs,AddFile,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,IFileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\IFileManager.cs,AddFile,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileController.cs,AddFile,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileController.cs,AddFile,The method has 9 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileController.cs,UpdateFile,The method has 10 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileController.cs,UpdateFile,The method has 11 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileController.cs,UpdateFile,The method has 12 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileController.cs,AddFile,The method has 10 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileController.cs,UpdateFile,The method has 9 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileInfo.cs,FileInfo,The method has 11 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileInfo.cs,FileInfo,The method has 12 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileInfo.cs,FileInfo,The method has 14 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,AddFile,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,AddFile,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,AddFile,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,NotifyFileAddingEvents,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,UpdateWhileApproving,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FolderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderController.cs,AddFolder,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FolderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderController.cs,AddFolder,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FolderInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderInfo.cs,FolderInfo,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.FileSystem,FolderInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderInfo.cs,FolderInfo,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.GeneratedImage.ImageQuantization,Quantizer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageQuantization\Quantizer.cs,SecondPass,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Installer.Installers,AssemblyInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AssemblyInstaller.cs,GetXmlMergeDoc,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Installer.Installers,AssemblyInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AssemblyInstaller.cs,ReplaceInAttributeValue,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Localization,ILocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\ILocalizationProvider.cs,GetString,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Localization,ILocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\ILocalizationProvider.cs,SaveString,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetString,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,SaveString,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetFromResourceFile,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetStringInternal,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetFromResourceFile,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetString,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetSystemMessage,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetSystemMessage,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetSystemMessage,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetSystemMessage,The method has 9 parameters.
Long Parameter List,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,LoadCultureDropDownList,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.OutputCache.Providers,DatabaseProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\DatabaseProvider.cs,GetResponseFilter,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.OutputCache.Providers,DatabaseResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\DatabaseResponseFilter.cs,DatabaseResponseFilter,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,GetResponseFilter,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,FileResponseFilter,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.OutputCache.Providers,MemoryProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\MemoryProvider.cs,GetResponseFilter,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.OutputCache.Providers,MemoryResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\MemoryResponseFilter.cs,MemoryResponseFilter,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Search.Internals,ISearchHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\ISearchHelper.cs,UpdateSynonymsGroup,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,UpdateSynonymsGroup,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Search.Internals,LuceneControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneControllerImpl.cs,GetHighlightedText,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,FindModifiedUsers,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Search,SearchItemInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchItemInfo.cs,SearchItemInfo,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Search,SearchItemInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchItemInfo.cs,SearchItemInfo,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.Search,SearchItemInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchItemInfo.cs,SearchItemInfo,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.Search,SearchItemInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchItemInfo.cs,SearchItemInfo,The method has 9 parameters.
Long Parameter List,DotNetNuke.Services.Search,SearchItemInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchItemInfo.cs,SearchItemInfo,The method has 10 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging,IMessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\IMessagingController.cs,SendMessage,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Social.Subscriptions.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\Data\DataService.cs,AddSubscription,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.Social.Subscriptions.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\Data\DataService.cs,IsSubscribed,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Social.Subscriptions.Data,IDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\Data\IDataService.cs,AddSubscription,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.Social.Subscriptions.Data,IDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\Data\IDataService.cs,IsSubscribed,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Tokens,AntiForgeryTokenPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\AntiForgeryTokenPropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Tokens,JsonPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\JsonPropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Tokens,ArrayListPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\ArrayListPropertyAccesss.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Tokens,CulturePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\CulturePropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Tokens,DataRowPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\DataRowPropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Tokens,DateTimePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\DateTimePropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Tokens,DictionaryPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\DictionaryPropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Tokens,EmptyPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\EmptyPropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Tokens,IPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\IPropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Tokens,PropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\PropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Tokens,PropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\PropertyAccess.cs,GetObjectProperty,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Tokens,TicksPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\TicksPropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Tokens,TokenReplace,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\TokenReplace.cs,TokenReplace,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddAdminPages,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleControl,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleControl,The method has 9 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleDefinition,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleDefinition,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddPage,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddPage,The method has 9 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddAdminPages,The method has 9 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddAdminPage,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddHostPage,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleControl,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleToPage,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleToPage,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleToPage,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleToPages,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,CreateUserInfo,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Cache,FBCachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\FBCachingProvider.cs,Insert,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Add,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The method has 8 parameters.
Long Parameter List,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Journal,CommentInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\CommentInfo.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal,IJournalDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\IJournalDataService.cs,Journal_ListForSummary,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Journal,IJournalDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\IJournalDataService.cs,Journal_ListForProfile,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal,IJournalDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\IJournalDataService.cs,Journal_ListForGroup,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal,IJournalDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\IJournalDataService.cs,Journal_Get,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal,IJournalDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\IJournalDataService.cs,Journal_Save,The method has 14 parameters.
Long Parameter List,DotNetNuke.Services.Journal,IJournalDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\IJournalDataService.cs,Journal_Save,The method has 16 parameters.
Long Parameter List,DotNetNuke.Services.Journal,IJournalDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\IJournalDataService.cs,Journal_Update,The method has 14 parameters.
Long Parameter List,DotNetNuke.Services.Journal,IJournalDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\IJournalDataService.cs,Journal_Update,The method has 16 parameters.
Long Parameter List,DotNetNuke.Services.Journal,IJournalDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\IJournalDataService.cs,Journal_Comment_Save,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal,IJournalDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\IJournalDataService.cs,Journal_Types_Save,The method has 10 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_ListForSummary,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_ListForProfile,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_ListForGroup,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Get,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Save,The method has 14 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Save,The method has 16 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Update,The method has 14 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Update,The method has 16 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Comment_Save,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Types_Save,The method has 10 parameters.
Long Parameter List,DotNetNuke.Services.Journal,IJournalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\IJournalController.cs,GetJournalItem,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Journal,IJournalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\IJournalController.cs,GetJournalItem,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal,ItemData,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\ItemData.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,GetJournalItem,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,GetJournalItem,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalEntity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalEntity.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal,JournalItem,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalItem.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal.Internal,IInternalJournalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Internal\IInternalJournalController.cs,GetJournalItemsByProfile,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal.Internal,IInternalJournalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Internal\IInternalJournalController.cs,GetJournalItemsByGroup,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal.Internal,IInternalJournalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Internal\IInternalJournalController.cs,GetJournalItems,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Journal.Internal,InternalJournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Internal\InternalJournalControllerImpl.cs,GetJournalItemsByProfile,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal.Internal,InternalJournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Internal\InternalJournalControllerImpl.cs,GetJournalItemsByGroup,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Journal.Internal,InternalJournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Internal\InternalJournalControllerImpl.cs,GetJournalItems,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,AddSchedule,The method has 11 parameters.
Long Parameter List,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,AddSchedule,The method has 12 parameters.
Long Parameter List,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,AddSchedule,The method has 13 parameters.
Long Parameter List,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,UpdateSchedule,The method has 13 parameters.
Long Parameter List,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,UpdateSchedule,The method has 14 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Internal,IInternalMessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\IInternalMessagingController.cs,GetInbox,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Internal,IInternalMessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\IInternalMessagingController.cs,GetInbox,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Internal,IInternalMessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\IInternalMessagingController.cs,GetSentbox,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Internal,IInternalMessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\IInternalMessagingController.cs,GetSentbox,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Internal,IInternalMessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\IInternalMessagingController.cs,GetMessageThread,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Internal,IInternalMessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\IInternalMessagingController.cs,GetMessageThread,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetInbox,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetInbox,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetMessageThread,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetMessageThread,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetSentbox,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetSentbox,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,HandleFrequencyDigest,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,CreateMessageReply,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,GetInBoxView,The method has 9 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,GetSentBoxView,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,GetArchiveBoxView,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,GetMessageThread,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Data,IDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\IDataService.cs,GetInBoxView,The method has 9 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Data,IDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\IDataService.cs,GetSentBoxView,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Data,IDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\IDataService.cs,GetArchiveBoxView,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Data,IDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\IDataService.cs,GetMessageThread,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Social.Messaging.Data,IDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\IDataService.cs,CreateMessageReply,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Permissions.Controls,DesktopModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\DesktopModulePermissionsGrid.cs,AddPermission,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Permissions.Controls,FolderPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\FolderPermissionsGrid.cs,AddPermission,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,AddPermission,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,AddPermission,The method has 6 parameters.
Long Parameter List,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,BuildKey,The method has 5 parameters.
Long Parameter List,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,BuildKey,The method has 7 parameters.
Long Parameter List,DotNetNuke.Security.Permissions.Controls,TabPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\TabPermissionsGrid.cs,AddPermission,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Social.Notifications.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\Data\DataService.cs,CreateNotificationType,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Social.Notifications.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\Data\DataService.cs,AddNotificationTypeAction,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Social.Notifications.Data,IDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\Data\IDataService.cs,CreateNotificationType,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Social.Notifications.Data,IDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\Data\IDataService.cs,AddNotificationTypeAction,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,CreateSkinManifest,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,ValidateNode,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,ReadAttribute,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,ReadElement,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,GetExternalRequest,The method has 11 parameters.
Long Parameter List,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,GetExternalRequest,The method has 12 parameters.
Long Parameter List,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,GetExternalRequest,The method has 13 parameters.
Long Parameter List,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,GetExternalRequest,The method has 14 parameters.
Long Parameter List,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMailInternal,The method has 12 parameters.
Long Parameter List,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendEmail,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendEmail,The method has 6 parameters.
Long Parameter List,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The method has 11 parameters.
Long Parameter List,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The method has 14 parameters.
Long Parameter List,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The method has 15 parameters.
Long Parameter List,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The method has 15 parameters.
Long Parameter List,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The method has 16 parameters.
Long Parameter List,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The method has 16 parameters.
Long Parameter List,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The method has 17 parameters.
Long Parameter List,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendTokenizedBulkEmail,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendConfirmationMail,The method has 7 parameters.
Long Parameter List,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SetSMTPServer,The method has 5 parameters.
Long Parameter List,DotNetNuke.Services.OutputCache,OutputCachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\OutputCachingProvider.cs,GetResponseFilter,The method has 5 parameters.
Long Parameter List,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddModulePermission,The method has 5 parameters.
Long Parameter List,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddExistingModule,The method has 5 parameters.
Long Parameter List,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,The method has 6 parameters.
Long Parameter List,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,AddChildActions,The method has 5 parameters.
Long Parameter List,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,AddNode,The method has 5 parameters.
Long Parameter List,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,IsTabPending,The method has 7 parameters.
Long Parameter List,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,ProcessTab,The method has 9 parameters.
Long Parameter List,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,GetNavigationNodes,The method has 5 parameters.
Long Parameter List,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,GetNavigationNodes,The method has 5 parameters.
Long Parameter List,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,NavigateUrl,The method has 5 parameters.
Long Parameter List,DotNetNuke.UI.Modules.Html5,ModuleContextPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\Html5\ModuleContextPropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.UI.Modules.Html5,RequestPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\Html5\RequestPropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.UI.Skins.Controls,LanguagePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\LanguageTokenReplace.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,AddModuleMessage,The method has 5 parameters.
Long Parameter List,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,AddPageMessage,The method has 5 parameters.
Long Parameter List,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The method has 5 parameters.
Long Parameter List,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The method has 6 parameters.
Long Parameter List,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The method has 7 parameters.
Long Parameter List,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The method has 8 parameters.
Long Parameter List,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The method has 8 parameters.
Long Parameter List,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The method has 10 parameters.
Long Parameter List,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,MinMaxContentVisibile,The method has 5 parameters.
Long Parameter List,DotNetNuke.UI.WebControls,VisibilityControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\VisibilityControl.cs,RenderCheckboxItem,The method has 5 parameters.
Long Parameter List,DotNetNuke.UI.WebControls.Internal,PermissionTriState,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\PermissionTriState.cs,LookupScriptValues,The method has 8 parameters.
Long Identifier,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetMaxUploadSize,The length of the parameter DefaultMaxAllowedContentLength is 30.
Long Identifier,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,ProcessHttpModule,The length of the parameter checkOmitFromRewriteProcessing is 30.
Long Identifier,DotNetNuke.Security.Permissions,DesktopModulePermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\DesktopModulePermissionCollection.cs,CompareTo,The length of the parameter objDesktopModulePermissionCollection is 36.
Long Identifier,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the parameter wrongAliasRedirectedRewritePath is 31.
Long Identifier,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AreThereFolderMappingsRequiringNetworkConnectivity,The length of the parameter folderMappingsRequiringNetworkConnectivity is 42.
Long Identifier,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,GetNotificationTypeAction,The length of the parameter notificationTypeActionCacheKey is 30.
Long Identifier,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,GetNotificationTypeAction,The length of the parameter notificationTypeActionCacheKey is 30.
Long Identifier,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,The length of the parameter arrSystemModuleViewPermissions is 30.
Long Statement,DotNetNuke.Common.Utilities,RegexUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RegexUtils.cs,GetCachedRegex,The length of the statement  "		cache.Insert (key' regex' (DNNCacheDependency)null' Cache.NoAbsoluteExpiration' TimeSpan.FromMinutes (10)' CacheItemPriority.BelowNormal' null); " is 144.
Long Statement,DotNetNuke.Common.Utilities,Calendar,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Calendar.cs,InvokePopupCal,The length of the statement  "		ScriptManager.RegisterClientScriptInclude (Field.Page' Field.Page.GetType ()' "PopupCalendar.js"' ClientAPI.ScriptPath + "PopupCalendar.js"); " is 141.
Long Statement,DotNetNuke.Common.Utilities,Calendar,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Calendar.cs,InvokePopupCal,The length of the statement  "	return string.Concat ("javascript:popupCal('Cal'''"' Field.ClientID' "'''"' FormatString' "'''"' MonthNameString' "'''"' DayNameString' "'''"' strToday' "'''"' strClose' "'''"' strCalendar' "''"' (int)DateTimeFormatInfo.CurrentInfo.FirstDayOfWeek' ");"); " is 254.
Long Statement,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,BackupConfig,The length of the statement  "			File.Copy (Globals.ApplicationMapPath + "\\web.config"' Globals.ApplicationMapPath + backupFolder + "web_old.config"' true); " is 124.
Long Statement,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetDecryptionkey,The length of the statement  "	MachineKeySection key = System.Configuration.ConfigurationManager.GetSection ("system.web/machineKey") as MachineKeySection; " is 124.
Long Statement,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetMaxUploadSize,The length of the statement  "	var httpNode = configNav.SelectSingleNode ("configuration//system.web//httpRuntime") ?? configNav.SelectSingleNode ("configuration//location//system.web//httpRuntime"); " is 168.
Long Statement,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetMaxUploadSize,The length of the statement  "	httpNode = configNav.SelectSingleNode ("configuration//system.webServer//security//requestFiltering//requestLimits") ?? configNav.SelectSingleNode ("configuration//location//system.webServer//security//requestFiltering//requestLimits"); " is 236.
Long Statement,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetMaxUploadSize,The length of the statement  "		var maxAllowedContentLength = XmlUtils.GetAttributeValueAsLong (httpNode.CreateNavigator ()' "maxAllowedContentLength"' 30000000); " is 130.
Long Statement,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetRequestFilterSize,The length of the statement  "	var httpNode = configNav.SelectSingleNode ("configuration//system.webServer//security//requestFiltering//requestLimits") ?? configNav.SelectSingleNode ("configuration//location//system.webServer//security//requestFiltering//requestLimits"); " is 240.
Long Statement,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetRequestFilterSize,The length of the statement  "		var maxAllowedContentLength = XmlUtils.GetAttributeValueAsLong (httpNode.CreateNavigator ()' "maxAllowedContentLength"' 30000000); " is 130.
Long Statement,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,SetMaxUploadSize,The length of the statement  "	var httpNode = configNav.SelectSingleNode ("configuration//system.web//httpRuntime") ?? configNav.SelectSingleNode ("configuration//location//system.web//httpRuntime"); " is 168.
Long Statement,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,SetMaxUploadSize,The length of the statement  "	httpNode = configNav.SelectSingleNode ("configuration//system.webServer//security//requestFiltering//requestLimits") ?? configNav.SelectSingleNode ("configuration//location//system.webServer//security//requestFiltering//requestLimits"); " is 236.
Long Statement,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetCustomErrorMode,The length of the statement  "	var customErrorsNav = configNav.SelectSingleNode ("//configuration/system.web/customErrors|//configuration/location/system.web/customErrors"); " is 142.
Long Statement,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,Touch,The length of the statement  "		RetryableAction.Retry5TimesWith2SecondsDelay (() => File.SetLastWriteTime (Globals.ApplicationMapPath + "\\web.config"' DateTime.Now)' "Touching config file"); " is 159.
Long Statement,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,AddFCNMode,The length of the statement  "			var xmlhttpRunTimeKey = xmlConfig.SelectSingleNode ("configuration/system.web/httpRuntime") ?? xmlConfig.SelectSingleNode ("configuration/location/system.web/httpRuntime"); " is 172.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,ClearFolderPermissionsCache,The length of the statement  "	PermissionProvider.ResetCacheDependency (PortalId' () => RemoveCache (String.Format (FolderPermissionCacheKey' PortalId))); " is 123.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,GetCachedDataFromRuntimeCache,The length of the statement  "					SetCache (cacheItemArgs.CacheKey' objObject' cacheItemArgs.CacheDependency' Cache.NoAbsoluteExpiration' TimeSpan.FromMinutes (timeOut)' cacheItemArgs.CachePriority' cacheItemArgs.CacheCallback); " is 194.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,GetCachedData,The length of the statement  "	object objObject = storeInDictionary ? GetCachedDataFromDictionary (cacheItemArgs' cacheItemExpired) : GetCachedDataFromRuntimeCache (cacheItemArgs' cacheItemExpired); " is 167.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "	SetCache (CacheKey' objObject' (DNNCacheDependency)null' Cache.NoAbsoluteExpiration' Cache.NoSlidingExpiration' CacheItemPriority.Normal' null); " is 144.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "	SetCache (CacheKey' objObject' objDependency' Cache.NoAbsoluteExpiration' Cache.NoSlidingExpiration' CacheItemPriority.Normal' null); " is 133.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "	SetCache (CacheKey' objObject' (DNNCacheDependency)null' AbsoluteExpiration' Cache.NoSlidingExpiration' CacheItemPriority.Normal' null); " is 136.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "	SetCache (CacheKey' objObject' (DNNCacheDependency)null' Cache.NoAbsoluteExpiration' SlidingExpiration' CacheItemPriority.Normal' null); " is 136.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "		CachingProvider.Instance ().Insert (GetDnnCacheKey (CacheKey)' objObject' objDependency' AbsoluteExpiration' SlidingExpiration' Priority' OnRemoveCallback); " is 156.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "	SetCache (CacheKey' objObject' (DNNCacheDependency)null' Cache.NoAbsoluteExpiration' Cache.NoSlidingExpiration' CacheItemPriority.Normal' null); " is 144.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "	SetCache (CacheKey' objObject' new DNNCacheDependency (objDependency)' Cache.NoAbsoluteExpiration' Cache.NoSlidingExpiration' CacheItemPriority.Normal' null); " is 158.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "	SetCache (CacheKey' objObject' (DNNCacheDependency)null' AbsoluteExpiration' Cache.NoSlidingExpiration' CacheItemPriority.Normal' null); " is 136.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "	SetCache (CacheKey' objObject' (DNNCacheDependency)null' Cache.NoAbsoluteExpiration' SlidingExpiration' CacheItemPriority.Normal' null); " is 136.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "	SetCache (CacheKey' objObject' new DNNCacheDependency (objDependency)' AbsoluteExpiration' SlidingExpiration' CacheItemPriority.Normal' null); " is 142.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "	SetCache (CacheKey' objObject' new DNNCacheDependency (objDependency)' AbsoluteExpiration' SlidingExpiration' Priority' OnRemoveCallback); " is 138.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "	SetCache (CacheKey' objObject' new DNNCacheDependency (objDependency)' Cache.NoAbsoluteExpiration' Cache.NoSlidingExpiration' CacheItemPriority.Normal' null); " is 158.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "	SetCache (CacheKey' objObject' new DNNCacheDependency (objDependency)' AbsoluteExpiration' SlidingExpiration' CacheItemPriority.Normal' null); " is 142.
Long Statement,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,SetCache,The length of the statement  "	SetCache (CacheKey' objObject' new DNNCacheDependency (objDependency)' AbsoluteExpiration' SlidingExpiration' Priority' OnRemoveCallback); " is 138.
Long Statement,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseUtcTime,The length of the statement  "		if (DateTime.UtcNow >= _lastUpdateUtc + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftUtc && _driftUtc <= TimeSpan.FromHours (26)) || _driftUtc == TimeSpan.MinValue) { " is 186.
Long Statement,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseLocalTime,The length of the statement  "		if (DateTime.UtcNow >= _lastUpdateLocal + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftLocal && _driftLocal <= TimeSpan.FromHours (26)) || _driftLocal == TimeSpan.MinValue) { " is 194.
Long Statement,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,CreateFile,The length of the statement  "		strMessage += "<br />" + string.Format (Localization.GetString ("RestrictedFileType")' fileName' Host.AllowedExtensionWhitelist.ToDisplayString ()); " is 148.
Long Statement,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,RemoveOrphanedFiles,The length of the statement  "	if (folder.FolderMappingID != FolderMappingController.Instance.GetFolderMapping (PortalId' "Database").FolderMappingID) { " is 121.
Long Statement,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,CheckValidFileName,The length of the statement  "			return "<br />" + string.Format (Localization.GetString ("RestrictedFileType")' fileName' whiteList.ToDisplayString ()); " is 120.
Long Statement,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,CreateFileFromString,The length of the statement  "		returnValue = CreateFile (folder' fileName' ((FileManager)fileManager).GetContentType (Path.GetExtension (fileName))' memStream' unzip' true' true); " is 148.
Long Statement,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,GetFoldersByUser,The length of the statement  "	var userFolders = (!includeSecure && !includeDatabase) ? FolderManager.Instance.GetFileSystemFolders (user' permissions) : FolderManager.Instance.GetFolders (user' permissions); " is 177.
Long Statement,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,UploadFile,The length of the statement  "	return CreateFile (folder' fileName' ((FileManager)fileManager).GetContentType (Path.GetExtension (fileName))' objHtmlInputFile.InputStream' Unzip' true' true); " is 160.
Long Statement,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,DeleteFilesRecursive,The length of the statement  "			foreach (string strFile in Directory.EnumerateFilePaths (new DirectoryInfo (strRoot)).Where (f => f.Contains (filter))) { " is 121.
Long Statement,DotNetNuke.Common.Utilities,HtmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\HtmlUtils.cs,FormatWebsite,The length of the statement  "				formatWebsite = string.Format ("<a href=\"{1}{0}\">{0}</a>"' Website' (Website.ToString ().IndexOf ("://"' StringComparison.Ordinal) > -1 ? "" : "http://")); " is 157.
Long Statement,DotNetNuke.Common.Utilities,HtmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\HtmlUtils.cs,WriteFeedback,The length of the statement  "			strMessage += timeElapsed.ToString ().Substring (0' timeElapsed.ToString ().LastIndexOf ("."' StringComparison.Ordinal) + 4) + " -"; " is 132.
Long Statement,DotNetNuke.Common.Utilities,HtmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\HtmlUtils.cs,WriteHeader,The length of the statement  "			File.Copy (HttpContext.Current.Server.MapPath ("~/Install/Install.template.htm")' HttpContext.Current.Server.MapPath ("~/Install/Install.htm")); " is 144.
Long Statement,DotNetNuke.Common.Utilities,HtmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\HtmlUtils.cs,WriteSuccessError,The length of the statement  "	WriteFeedback (response' 0' bSuccess ? "<font color='green'>Success</font><br>" : "<font color='red'>Error!</font><br>"' false); " is 128.
Long Statement,DotNetNuke.Common.Utilities,HtmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\HtmlUtils.cs,WriteScriptSuccessError,The length of the statement  "		WriteFeedback (response' 0' "<font color='red'>Error!</font> (see " + strLogFile + " for more information)<br>"' false); " is 120.
Long Statement,DotNetNuke.Common.Utilities,HtmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\HtmlUtils.cs,AbsoluteToRelativeUrls,The length of the statement  "			html = exp.Replace (html' "$1" + portalAlias.Substring (portalAlias.IndexOf ("/"' StringComparison.InvariantCultureIgnoreCase)) + "/$2"); " is 137.
Long Statement,DotNetNuke.Common.Utilities,ImageUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\ImageUtils.cs,NewImageSize,The length of the statement  "	decimal decScale = ((decimal)currentWidth / (decimal)newWidth) > ((decimal)currentHeight / (decimal)newHeight) ? Convert.ToDecimal ((decimal)currentWidth / (decimal)newWidth) : Convert.ToDecimal ((decimal)currentHeight / (decimal)newHeight); " is 241.
Long Statement,DotNetNuke.Common.Utilities,PathUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\PathUtils.cs,GetUserFolderPathInternal,The length of the statement  "	var fullPath = Path.Combine (Path.Combine (rootFolder' subFolder)' user.UserID.ToString (CultureInfo.InvariantCulture)); " is 120.
Long Statement,DotNetNuke.Common.Utilities,PathUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\PathUtils.cs,IsDefaultProtectedPath,The length of the statement  "	return String.IsNullOrEmpty (folderPath) || folderPath.ToLower () == "skins" || folderPath.ToLower () == "containers" || folderPath.ToLower ().StartsWith ("skins/") || folderPath.ToLower ().StartsWith ("containers/"); " is 217.
Long Statement,DotNetNuke.Common.Utilities,PathUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\PathUtils.cs,MapPath,The length of the statement  "		convertedPath = convertedPath.Length > 1 ? string.Concat (AddTrailingSlash (applicationMapPath)' convertedPath.Substring (1)) : applicationMapPath; " is 147.
Long Statement,DotNetNuke.Common.Utilities,SizeExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\SizeExtensions.cs,Orientation,The length of the statement  "	return size.Width > size.Height ? System.Web.UI.WebControls.Orientation.Horizontal : System.Web.UI.WebControls.Orientation.Vertical; " is 132.
Long Statement,DotNetNuke.Common.Utilities,StringExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\StringExtensions.cs,NormalizeString,The length of the statement  "	return string.IsNullOrEmpty (input) ? input : Iso8859Encoding.GetString (Encoding.Convert (Encoding.UTF8' Iso8859Encoding' Encoding.UTF8.GetBytes (input))).ToLower (); " is 167.
Long Statement,DotNetNuke.Common.Utilities,UrlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlController.cs,GetUrlLog,The length of the statement  "		arrUrlLog = CBO.FillCollection (DataProvider.Instance ().GetUrlLog (objUrlTracking.UrlTrackingID' StartDate' EndDate)' typeof(UrlLogInfo)); " is 139.
Long Statement,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,DecryptParameter,The length of the statement  "	//[DNN-8257] - Can't do URLEncode/URLDecode as it introduces issues on decryption (with / = %2f)' so we use a modifed Base64 " is 124.
Long Statement,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,EncryptParameter,The length of the statement  "	//[DNN-8257] - Can't do URLEncode/URLDecode as it introduces issues on decryption (with / = %2f)' so we use a modifed Base64 " is 124.
Long Statement,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,OpenNewWindow,The length of the statement  "	page.ClientScript.RegisterStartupScript (type' "DotNetNuke.NewWindow"' string.Format ("<script>window.open('{0}'''new')</script>"' url)); " is 137.
Long Statement,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,PopUpUrl,The length of the statement  "	return PopUpUrl (url' control' portalSettings' onClickEvent' responseRedirect' windowHeight' windowWidth' true' string.Empty); " is 126.
Long Statement,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,PopUpUrl,The length of the statement  "	return PopUpUrl (url' null' portalSettings' onClickEvent' responseRedirect' windowHeight' windowWidth' true' string.Empty); " is 123.
Long Statement,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,PopUpUrl,The length of the statement  "			popUpUrl = "javascript:" + String.Format (popUpScriptFormat' popUpUrl' delimiter' onClickEvent.ToString ().ToLower ()' windowHeight' windowWidth' refresh.ToString ().ToLower ()' closingUrl); " is 190.
Long Statement,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,ReplaceQSParam,The length of the statement  "		return Regex.Replace (url' "(.*)(&|\\?)(" + param + "=)([^&\\?]+)(.*)"' "$1$2$3" + newValue + "$5"' RegexOptions.IgnoreCase); " is 125.
Long Statement,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,StripQSParam,The length of the statement  "		return Regex.Replace (url' "(.*)(&|\\?)(" + param + "=)([^&\\?]+)([&\\?])?(.*)"' "$1$2$6"' RegexOptions.IgnoreCase).Replace ("(.*)([&\\?]$)"' "$1"); " is 148.
Long Statement,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,ValidReturnUrl,The length of the statement  "		urlWithNoQuery = urlWithNoQuery.Substring (0' urlWithNoQuery.IndexOf ("?"' StringComparison.InvariantCultureIgnoreCase)); " is 121.
Long Statement,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,ValidReturnUrl,The length of the statement  "		if (portalSettings == null || !url.StartsWith (Globals.AddHTTP (portalSettings.PortalAlias.HTTPAlias)' StringComparison.InvariantCultureIgnoreCase)) { " is 150.
Long Statement,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,ValidReturnUrl,The length of the statement  "		if (portalSettings == null || !urlWithNoProtocol.StartsWith (portalSettings.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase)) { " is 146.
Long Statement,DotNetNuke.Common.Utilities,SqlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\SqlUtils.cs,TranslateSQLException,The length of the statement  "		errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Procedure:</b> " + sqlError.Procedure + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/>"); " is 301.
Long Statement,DotNetNuke.Data,DataUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataUtil.cs,ReplaceTokens,The length of the statement  "	return sql.Replace ("{databaseOwner}"' (isSqlCe) ? String.Empty : DataProvider.Instance ().DatabaseOwner).Replace ("{objectQualifier}"' DataProvider.Instance ().ObjectQualifier); " is 178.
Long Statement,DotNetNuke.Data,RepositoryBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\RepositoryBase.cs,Get,The length of the statement  "	return IsCacheable && !IsScoped ? DataCache.GetCachedData<IEnumerable<T>> (CacheArgs' c => GetInternal ()) : GetInternal (); " is 124.
Long Statement,DotNetNuke.Data,RepositoryBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\RepositoryBase.cs,Get,The length of the statement  "	return IsCacheable ? DataCache.GetCachedData<IEnumerable<T>> (CacheArgs' c => GetByScopeInternal (scopeValue)) : GetByScopeInternal (scopeValue); " is 145.
Long Statement,DotNetNuke.Data,RepositoryBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\RepositoryBase.cs,GetById,The length of the statement  "	return IsCacheable && !IsScoped ? Get ().SingleOrDefault (t => CompareTo (GetPrimaryKey<TProperty> (t)' id) == 0) : GetByIdInternal (id); " is 137.
Long Statement,DotNetNuke.Data,RepositoryBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\RepositoryBase.cs,GetPage,The length of the statement  "	return IsCacheable && !IsScoped ? Get ().InPagesOf (pageSize).GetPage (pageIndex) : GetPageInternal (pageIndex' pageSize); " is 122.
Long Statement,DotNetNuke.Data,RepositoryBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\RepositoryBase.cs,GetPage,The length of the statement  "	return IsCacheable ? Get (scopeValue).InPagesOf (pageSize).GetPage (pageIndex) : GetPageByScopeInternal (scopeValue' pageIndex' pageSize); " is 138.
Long Statement,DotNetNuke.Data,RepositoryBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\RepositoryBase.cs,ClearCache,The length of the statement  "		DataCache.RemoveCache (IsScoped ? String.Format (CacheArgs.CacheKey' GetScopeValue<object> (item)) : CacheArgs.CacheKey); " is 121.
Long Statement,DotNetNuke.Data,RepositoryBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\RepositoryBase.cs,InitializeInternal,The length of the statement  "		var cacheKey = !String.IsNullOrEmpty (cacheableAttribute.CacheKey) ? cacheableAttribute.CacheKey : String.Format ("OR_{0}"' type.Name); " is 135.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,ExecuteScriptInternal,The length of the statement  "				EventLogController.Instance.AddLog (props' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.HOST_ALERT.ToString ()' true); " is 214.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,ExecuteScriptInternal,The length of the statement  "				exceptions += objException + Environment.NewLine + Environment.NewLine + query + Environment.NewLine + Environment.NewLine; " is 123.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,GetConnectionStringUserID,The length of the statement  "	if (ConnectionString.ToUpper ().Contains ("USER ID") || ConnectionString.ToUpper ().Contains ("UID") || ConnectionString.ToUpper ().Contains ("USER")) { " is 152.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,GrantStoredProceduresPermission,The length of the statement  "		SQL += "    where ( OBJECTPROPERTY(o.id' N'IsProcedure') = 1 or OBJECTPROPERTY(o.id' N'IsExtendedProc') = 1 or OBJECTPROPERTY(o.id' N'IsReplProc') = 1 ) "; " is 155.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,GrantStoredProceduresPermission,The length of the statement  "		SQL += "    and (left(o.name'len('" + ObjectQualifier + "')) = '" + ObjectQualifier + "' or left(o.name'7) = 'aspnet_') "; " is 122.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,GrantStoredProceduresPermission,The length of the statement  "		Exceptions += objException + Environment.NewLine + Environment.NewLine + SQL + Environment.NewLine + Environment.NewLine; " is 121.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,GrantUserDefinedFunctionsPermission,The length of the statement  "		SQL += "    declare sp_cursor cursor for select o.name as name' OBJECTPROPERTY(o.id' N'IsScalarFunction') as IsScalarFunction "; " is 128.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,GrantUserDefinedFunctionsPermission,The length of the statement  "		SQL += "      and (left(o.name'len('" + ObjectQualifier + "')) = '" + ObjectQualifier + "' or left(o.name'7) = 'aspnet_') "; " is 124.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,GrantUserDefinedFunctionsPermission,The length of the statement  "		Exceptions += objException + Environment.NewLine + Environment.NewLine + SQL + Environment.NewLine + Environment.NewLine; " is 121.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,ExecuteNonQuery,The length of the statement  "	PetaPocoHelper.ExecuteNonQuery (ConnectionString' CommandType.StoredProcedure' DatabaseOwner + ObjectQualifier + procedureName' commandParameters); " is 147.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,ExecuteNonQuery,The length of the statement  "	PetaPocoHelper.ExecuteNonQuery (ConnectionString' CommandType.StoredProcedure' timeoutSec' DatabaseOwner + ObjectQualifier + procedureName' commandParameters); " is 159.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,BulkInsert,The length of the statement  "	PetaPocoHelper.BulkInsert (ConnectionString' DatabaseOwner + ObjectQualifier + procedureName' tableParameterName' dataTable); " is 125.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,BulkInsert,The length of the statement  "	PetaPocoHelper.BulkInsert (ConnectionString' timeoutSec' DatabaseOwner + ObjectQualifier + procedureName' tableParameterName' dataTable); " is 137.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,BulkInsert,The length of the statement  "	PetaPocoHelper.BulkInsert (ConnectionString' DatabaseOwner + ObjectQualifier + procedureName' tableParameterName' dataTable' commandParameters); " is 144.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,BulkInsert,The length of the statement  "	PetaPocoHelper.BulkInsert (ConnectionString' DatabaseOwner + ObjectQualifier + procedureName' tableParameterName' dataTable' timeoutSec' commandParameters); " is 156.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,ExecuteReader,The length of the statement  "	return PetaPocoHelper.ExecuteReader (ConnectionString' CommandType.StoredProcedure' DatabaseOwner + ObjectQualifier + procedureName' commandParameters); " is 152.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,ExecuteReader,The length of the statement  "	return PetaPocoHelper.ExecuteReader (ConnectionString' CommandType.StoredProcedure' timeoutSec' DatabaseOwner + ObjectQualifier + procedureName' commandParameters); " is 164.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,ExecuteScalar,The length of the statement  "	return PetaPocoHelper.ExecuteScalar<T> (ConnectionString' CommandType.StoredProcedure' DatabaseOwner + ObjectQualifier + procedureName' commandParameters); " is 155.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,ExecuteScalar,The length of the statement  "	return PetaPocoHelper.ExecuteScalar<T> (ConnectionString' CommandType.StoredProcedure' timeoutSec' DatabaseOwner + ObjectQualifier + procedureName' commandParameters); " is 167.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,ExecuteScript,The length of the statement  "			exceptions += objException + Environment.NewLine + Environment.NewLine + script + Environment.NewLine + Environment.NewLine; " is 124.
Long Statement,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,ExecuteScript,The length of the statement  "			exceptions += objException + Environment.NewLine + Environment.NewLine + script + Environment.NewLine + Environment.NewLine; " is 124.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The length of the statement  "			dr = PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' Owner + Qualifier + "GetDatabaseVersion"); " is 124.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The length of the statement  "				errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>"); " is 252.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateServerActivity,The length of the statement  "	return ExecuteScalar<int> ("UpdateServerActivity"' serverName' iisAppName' createdDate' lastActivityDate' pingFailureCount' enabled); " is 133.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,CreatePortal,The length of the statement  "	return CreatePortal (portalname' currency' ExpiryDate' HostFee' HostSpace' PageQuota' UserQuota' SiteLogHistory' HomeDirectory' "en-US"' CreatedByUserID); " is 154.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,CreatePortal,The length of the statement  "	return ExecuteScalar<int> ("AddPortalInfo"' portalname' currency' GetNull (ExpiryDate)' HostFee' HostSpace' PageQuota' UserQuota' GetNull (SiteLogHistory)' HomeDirectory' CultureCode' CreatedByUserID); " is 201.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdatePortalInfo,The length of the statement  "	ExecuteNonQuery ("UpdatePortalInfo"' portalId' portalGroupId' portalName' GetNull (logoFile)' GetNull (footerText)' GetNull (expiryDate)' userRegistration' bannerAdvertising' currency' GetNull (administratorId)' hostFee' hostSpace' pageQuota' userQuota' GetNull (paymentProcessor)' GetNull (processorUserId)' GetNull (processorPassword)' GetNull (description)' GetNull (keyWords)' GetNull (backgroundFile)' GetNull (siteLogHistory)' GetNull (splashTabId)' GetNull (homeTabId)' GetNull (loginTabId)' GetNull (registerTabId)' GetNull (userTabId)' GetNull (searchTabId)' GetNull (custom404TabId)' GetNull (custom500TabId)' GetNull (defaultLanguage)' homeDirectory' lastModifiedByUserID' cultureCode); " is 697.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdatePortalSetup,The length of the statement  "	ExecuteNonQuery ("UpdatePortalSetup"' portalId' administratorId' administratorRoleId' registeredRoleId' splashTabId' homeTabId' loginTabId' registerTabId' userTabId' searchTabId' custom404TabId' custom500TabId' adminTabId' cultureCode); " is 236.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddTabAfter,The length of the statement  "	return ExecuteScalar<int> ("AddTabAfter"' afterTabId' tab.ContentItemId' GetNull (tab.PortalID)' tab.UniqueId' tab.VersionGuid' GetNull (tab.DefaultLanguageGuid)' tab.LocalizedVersionGuid' tab.TabName' tab.IsVisible' tab.DisableLink' GetNull (tab.ParentId)' tab.IconFile' tab.IconFileLarge' tab.Title' tab.Description' tab.KeyWords' tab.Url' GetNull (tab.SkinSrc)' GetNull (tab.ContainerSrc)' GetNull (tab.StartDate)' GetNull (tab.EndDate)' GetNull (tab.RefreshInterval)' GetNull (tab.PageHeadText)' tab.IsSecure' tab.PermanentRedirect' tab.SiteMapPriority' createdByUserID' GetNull (tab.CultureCode)' tab.IsSystem); " is 616.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddTabBefore,The length of the statement  "	return ExecuteScalar<int> ("AddTabBefore"' beforeTabId' tab.ContentItemId' GetNull (tab.PortalID)' tab.UniqueId' tab.VersionGuid' GetNull (tab.DefaultLanguageGuid)' tab.LocalizedVersionGuid' tab.TabName' tab.IsVisible' tab.DisableLink' GetNull (tab.ParentId)' tab.IconFile' tab.IconFileLarge' tab.Title' tab.Description' tab.KeyWords' tab.Url' GetNull (tab.SkinSrc)' GetNull (tab.ContainerSrc)' GetNull (tab.StartDate)' GetNull (tab.EndDate)' GetNull (tab.RefreshInterval)' GetNull (tab.PageHeadText)' tab.IsSecure' tab.PermanentRedirect' tab.SiteMapPriority' createdByUserID' GetNull (tab.CultureCode)' tab.IsSystem); " is 618.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddTabToEnd,The length of the statement  "	return ExecuteScalar<int> ("AddTabToEnd"' tab.ContentItemId' GetNull (tab.PortalID)' tab.UniqueId' tab.VersionGuid' GetNull (tab.DefaultLanguageGuid)' tab.LocalizedVersionGuid' tab.TabName' tab.IsVisible' tab.DisableLink' GetNull (tab.ParentId)' tab.IconFile' tab.IconFileLarge' tab.Title' tab.Description' tab.KeyWords' tab.Url' GetNull (tab.SkinSrc)' GetNull (tab.ContainerSrc)' GetNull (tab.StartDate)' GetNull (tab.EndDate)' GetNull (tab.RefreshInterval)' GetNull (tab.PageHeadText)' tab.IsSecure' tab.PermanentRedirect' tab.SiteMapPriority' createdByUserID' GetNull (tab.CultureCode)' tab.IsSystem); " is 604.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,SaveTabUrl,The length of the statement  "	ExecuteNonQuery ("SaveTabUrl"' tabId' seqNum' GetNull (portalAliasId)' portalAliasUsage' url' queryString' cultureCode' httpStatus' isSystem' modifiedByUserID); " is 160.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,SaveTabVersion,The length of the statement  "	return ExecuteScalar<int> ("SaveTabVersion"' tabVersionId' tabId' timeStamp' version' isPublished' createdByUserID' modifiedByUserID); " is 134.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,SaveTabVersionDetail,The length of the statement  "	return ExecuteScalar<int> ("SaveTabVersionDetail"' tabVersionDetailId' tabVersionId' moduleId' moduleVersion' paneName' moduleOrder' action' createdByUserID' modifiedByUserID); " is 176.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateTab,The length of the statement  "	ExecuteNonQuery ("UpdateTab"' tabId' contentItemId' GetNull (portalId)' versionGuid' GetNull (defaultLanguageGuid)' localizedVersionGuid' tabName' isVisible' disableLink' GetNull (parentId)' iconFile' iconFileLarge' title' description' keyWords' isDeleted' url' GetNull (skinSrc)' GetNull (containerSrc)' GetNull (startDate)' GetNull (endDate)' GetNull (refreshInterval)' GetNull (pageHeadText)' isSecure' permanentRedirect' siteMapPriority' lastModifiedByuserID' GetNull (cultureCode)' IsSystem); " is 497.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddModule,The length of the statement  "	return ExecuteScalar<int> ("AddModule"' contentItemId' GetNull (portalId)' moduleDefId' allTabs' GetNull (startDate)' GetNull (endDate)' inheritViewPermissions' isShareable' isShareableViewOnly' isDeleted' createdByUserID); " is 223.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddTabModule,The length of the statement  "	ExecuteNonQuery ("AddTabModule"' TabId' ModuleId' ModuleTitle' GetNull (Header)' GetNull (Footer)' ModuleOrder' PaneName' CacheTime' GetNull (CacheMethod)' GetNull (Alignment)' GetNull (Color)' GetNull (Border)' GetNull (IconFile)' Visibility' GetNull (ContainerSrc)' DisplayTitle' DisplayPrint' DisplaySyndicate' IsWebSlice' WebSliceTitle' GetNull (WebSliceExpiryDate)' WebSliceTTL' UniqueId' VersionGuid' GetNull (DefaultLanguageGuid)' LocalizedVersionGuid' CultureCode' createdByUserID); " is 490.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateModule,The length of the statement  "	ExecuteNonQuery ("UpdateModule"' moduleId' moduleDefId' contentItemId' allTabs' GetNull (startDate)' GetNull (endDate)' inheritViewPermissions' isShareable' isShareableViewOnly' isDeleted' lastModifiedByUserID); " is 211.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateTabModule,The length of the statement  "	ExecuteNonQuery ("UpdateTabModule"' TabModuleId' TabId' ModuleId' ModuleTitle' GetNull (Header)' GetNull (Footer)' ModuleOrder' PaneName' CacheTime' GetNull (CacheMethod)' GetNull (Alignment)' GetNull (Color)' GetNull (Border)' GetNull (IconFile)' Visibility' GetNull (ContainerSrc)' DisplayTitle' DisplayPrint' DisplaySyndicate' IsWebSlice' WebSliceTitle' GetNull (WebSliceExpiryDate)' WebSliceTTL' VersionGuid' GetNull (DefaultLanguageGuid)' LocalizedVersionGuid' CultureCode' lastModifiedByUserID); " is 501.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddDesktopModule,The length of the statement  "	return ExecuteScalar<int> ("AddDesktopModule"' packageID' moduleName' folderName' friendlyName' GetNull (description)' GetNull (version)' isPremium' isAdmin' businessControllerClass' supportedFeatures' shareable' GetNull (compatibleVersions)' GetNull (dependencies)' GetNull (permissions)' contentItemId' createdByUserID' adminPage' hostPage); " is 343.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateDesktopModule,The length of the statement  "	ExecuteNonQuery ("UpdateDesktopModule"' desktopModuleId' packageID' moduleName' folderName' friendlyName' GetNull (description)' GetNull (version)' isPremium' isAdmin' businessControllerClass' supportedFeatures' shareable' GetNull (compatibleVersions)' GetNull (dependencies)' GetNull (permissions)' contentItemId' lastModifiedByUserID' adminpage' hostpage); " is 358.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddModuleDefinition,The length of the statement  "	return ExecuteScalar<int> ("AddModuleDefinition"' desktopModuleId' friendlyName' definitionName' defaultCacheTime' createdByUserID); " is 132.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateModuleDefinition,The length of the statement  "	ExecuteNonQuery ("UpdateModuleDefinition"' moduleDefId' friendlyName' definitionName' defaultCacheTime' lastModifiedByUserID); " is 126.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddModuleControl,The length of the statement  "	return ExecuteScalar<int> ("AddModuleControl"' GetNull (moduleDefId)' GetNull (controlKey)' GetNull (controlTitle)' controlSrc' GetNull (iconFile)' controlType' GetNull (viewOrder)' GetNull (helpUrl)' supportsPartialRendering' supportsPopUps' createdByUserID); " is 260.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateModuleControl,The length of the statement  "	ExecuteNonQuery ("UpdateModuleControl"' moduleControlId' GetNull (moduleDefId)' GetNull (controlKey)' GetNull (controlTitle)' controlSrc' GetNull (iconFile)' controlType' GetNull (viewOrder)' GetNull (helpUrl)' supportsPartialRendering' supportsPopUps' lastModifiedByUserID); " is 275.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddFolder,The length of the statement  "	return ExecuteScalar<int> ("AddFolder"' GetNull (portalId)' uniqueId' versionGuid' folderPath' mappedPath' storageLocation' isProtected' isCached' GetNull (lastUpdated)' createdByUserId' folderMappingId' isVersioned' GetNull (workflowId)' GetNull (parentId)); " is 259.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateFolder,The length of the statement  "	ExecuteNonQuery ("UpdateFolder"' GetNull (portalId)' versionGuid' folderId' folderPath' mappedPath' storageLocation' isProtected' isCached' GetNull (lastUpdated)' lastModifiedByUserID' folderMappingID' isVersioned' GetNull (workflowID)' GetNull (parentID)); " is 257.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddFile,The length of the statement  "	return ExecuteScalar<int> ("AddFile"' GetNull (portalId)' uniqueId' versionGuid' fileName' extension' size' GetNull (width)' GetNull (height)' contentType' folder' folderId' createdByUserID' hash' lastModificationTime' title' description' enablePublishPeriod' startDate' GetNull (endDate)' GetNull (contentItemId)); " is 315.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateFile,The length of the statement  "	ExecuteNonQuery ("UpdateFile"' fileId' versionGuid' fileName' extension' size' GetNull (width)' GetNull (height)' contentType' folderId' lastModifiedByUserID' hash' lastModificationTime' title' description' enablePublishPeriod' startDate' GetNull (endDate)' GetNull (contentItemId)); " is 283.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddPermission,The length of the statement  "	return ExecuteScalar<int> ("AddPermission"' moduleDefID' permissionCode' permissionKey' permissionName' createdByUserID); " is 121.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdatePermission,The length of the statement  "	ExecuteNonQuery ("UpdatePermission"' permissionID' permissionCode' moduleDefID' permissionKey' permissionName' lastModifiedByUserID); " is 133.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddModulePermission,The length of the statement  "	return ExecuteScalar<int> ("AddModulePermission"' moduleId' portalId' permissionId' GetRoleNull (roleId)' allowAccess' GetNull (userId)' createdByUserId); " is 154.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateModulePermission,The length of the statement  "	ExecuteNonQuery ("UpdateModulePermission"' modulePermissionId' moduleId' portalId' permissionId' GetRoleNull (roleId)' allowAccess' GetNull (userId)' lastModifiedByUserId); " is 172.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddTabPermission,The length of the statement  "	return ExecuteScalar<int> ("AddTabPermission"' tabId' permissionId' GetRoleNull (roleID)' allowAccess' GetNull (userId)' createdByUserID); " is 138.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateTabPermission,The length of the statement  "	ExecuteNonQuery ("UpdateTabPermission"' tabPermissionId' tabId' permissionId' GetRoleNull (roleID)' allowAccess' GetNull (userId)' lastModifiedByUserID); " is 153.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddFolderPermission,The length of the statement  "	return ExecuteScalar<int> ("AddFolderPermission"' folderId' permissionId' GetRoleNull (roleID)' allowAccess' GetNull (userId)' createdByUserID); " is 144.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateFolderPermission,The length of the statement  "	ExecuteNonQuery ("UpdateFolderPermission"' FolderPermissionID' FolderID' PermissionID' GetRoleNull (roleID)' AllowAccess' GetNull (UserID)' lastModifiedByUserID); " is 162.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddDesktopModulePermission,The length of the statement  "	return ExecuteScalar<int> ("AddDesktopModulePermission"' portalDesktopModuleID' permissionID' GetRoleNull (roleID)' allowAccess' GetNull (userID)' createdByUserID); " is 164.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateDesktopModulePermission,The length of the statement  "	ExecuteNonQuery ("UpdateDesktopModulePermission"' desktopModulePermissionID' portalDesktopModuleID' permissionID' GetRoleNull (roleID)' allowAccess' GetNull (userID)' lastModifiedByUserID); " is 189.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddRole,The length of the statement  "	return ExecuteScalar<int> ("AddRole"' portalId' GetNull (roleGroupId)' roleName' description' serviceFee' billingPeriod' GetNull (billingFrequency)' trialFee' trialPeriod' GetNull (trialFrequency)' isPublic' autoAssignment' rsvpCode' iconFile' createdByUserID' status' securityMode' isSystemRole); " is 297.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateRole,The length of the statement  "	ExecuteNonQuery ("UpdateRole"' roleId' GetNull (roleGroupId)' roleName' description' serviceFee' billingPeriod' GetNull (billingFrequency)' trialFee' trialPeriod' GetNull (trialFrequency)' isPublic' autoAssignment' rsvpCode' iconFile' lastModifiedByUserID' status' securityMode' isSystemRole); " is 293.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddUser,The length of the statement  "	return ExecuteScalar<int> ("AddUser"' portalID' username' firstName' lastName' GetNull (affiliateId)' isSuperUser' email' displayName' updatePassword' isApproved' createdByUserID); " is 180.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetUsersAdvancedSearch,The length of the statement  "	return ExecuteReader ("GetUsersAdvancedSearch"' portalId' userId' filterUserId' fitlerRoleId' relationTypeId' isAdmin' pageSize' pageIndex' filterSort' sortAscending' filterName' filterValue); " is 192.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetUsersBasicSearch,The length of the statement  "	return ExecuteReader ("GetUsersBasicSearch"' portalId' pageSize' pageIndex' filterSort' sortAscending' filterName' filterValue); " is 128.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetUsersByEmail,The length of the statement  "	return ExecuteReader ("GetUsersByEmail"' GetNull (portalID)' email' pageIndex' pageSize' includeDeleted' superUsersOnly); " is 121.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetUsersByProfileProperty,The length of the statement  "	return ExecuteReader ("GetUsersByProfileProperty"' GetNull (portalID)' propertyName' propertyValue' pageIndex' pageSize' includeDeleted' superUsersOnly); " is 153.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetUsersByUsername,The length of the statement  "	return ExecuteReader ("GetUsersByUsername"' GetNull (portalID)' username' pageIndex' pageSize' includeDeleted' superUsersOnly); " is 127.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetUsersByDisplayname,The length of the statement  "	return ExecuteReader ("GetUsersByDisplayname"' GetNull (portalId)' name' pageIndex' pageSize' includeDeleted' superUsersOnly); " is 126.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateUser,The length of the statement  "	ExecuteNonQuery ("UpdateUser"' userId' GetNull (portalID)' firstName' lastName' isSuperUser' email' displayName' vanityUrl' updatePassword' isApproved' refreshRoles' lastIpAddress' passwordResetToken' GetNull (passwordResetExpiration)' isDeleted' lastModifiedByUserID); " is 269.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddUserRole,The length of the statement  "	return ExecuteScalar<int> ("AddUserRole"' portalId' userId' roleId' status' isOwner' GetNull (effectiveDate)' GetNull (expiryDate)' createdByUserID); " is 149.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateUserRole,The length of the statement  "	ExecuteNonQuery ("UpdateUserRole"' userRoleId' status' isOwner' GetNull (effectiveDate)' GetNull (expiryDate)' lastModifiedByUserID); " is 133.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddPropertyDefinition,The length of the statement  "		retValue = ExecuteScalar<int> ("AddPropertyDefinition"' GetNull (portalId)' moduleDefId' dataType' defaultValue' propertyCategory' propertyName' readOnly' required' validationExpression' viewOrder' visible' length' defaultVisibility' createdByUserId); " is 251.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateProfileProperty,The length of the statement  "	ExecuteNonQuery ("UpdateUserProfileProperty"' GetNull (profileId)' userId' propertyDefinitionID' propertyValue' visibility' extendedVisibility' lastUpdatedDate); " is 161.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdatePropertyDefinition,The length of the statement  "	ExecuteNonQuery ("UpdatePropertyDefinition"' propertyDefinitionId' dataType' defaultValue' propertyCategory' propertyName' readOnly' required' validation' viewOrder' visible' length' defaultVisibility' lastModifiedByUserId); " is 224.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddSkinControl,The length of the statement  "	return ExecuteScalar<int> ("AddSkinControl"' GetNull (packageID)' GetNull (ControlKey)' ControlSrc' SupportsPartialRendering' CreatedByUserID); " is 143.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateSkinControl,The length of the statement  "	ExecuteNonQuery ("UpdateSkinControl"' skinControlID' GetNull (packageID)' GetNull (ControlKey)' ControlSrc' SupportsPartialRendering' LastModifiedByUserID); " is 156.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateSkinPackage,The length of the statement  "	ExecuteNonQuery ("UpdateSkinPackage"' skinPackageID' packageID' GetNull (portalID)' skinName' skinType' LastModifiedByUserID); " is 126.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddListEntry,The length of the statement  "		return ExecuteScalar<int> ("AddListEntry"' ListName' Value' Text' ParentID' Level' EnableSortOrder' DefinitionID' Description' PortalID' SystemList' CreatedByUserID); " is 166.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddPortalAlias,The length of the statement  "	return ExecuteScalar<int> ("AddPortalAlias"' PortalID' HTTPAlias' GetNull (cultureCode)' GetNull (skin)' GetNull (browserType)' isPrimary' createdByUserID); " is 156.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdatePortalAliasInfo,The length of the statement  "	ExecuteNonQuery ("UpdatePortalAlias"' PortalAliasID' PortalID' HTTPAlias' GetNull (cultureCode)' GetNull (skin)' GetNull (browserType)' isPrimary' lastModifiedByUserID); " is 169.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddEventMessage,The length of the statement  "	return ExecuteScalar<int> ("AddEventMessage"' eventName' priority' processorType' processorCommand' body' sender' subscriberId' authorizedRoles' exceptionMessage' sentDate' expirationDate' attributes); " is 201.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddAuthentication,The length of the statement  "	return ExecuteScalar<int> ("AddAuthentication"' packageID' authenticationType' isEnabled' settingsControlSrc' loginControlSrc' logoffControlSrc' CreatedByUserID); " is 162.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateAuthentication,The length of the statement  "	ExecuteNonQuery ("UpdateAuthentication"' authenticationID' packageID' authenticationType' isEnabled' settingsControlSrc' loginControlSrc' logoffControlSrc' LastModifiedByUserID); " is 178.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddPackage,The length of the statement  "	return ExecuteScalar<int> ("AddPackage"' GetNull (portalID)' name' friendlyName' description' type' version' license' manifest' owner' organization' url' email' releaseNotes' isSystemPackage' createdByUserID' folderName' iconFile); " is 231.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdatePackage,The length of the statement  "	ExecuteNonQuery ("UpdatePackage"' packageID' GetNull (portalID)' friendlyName' description' type' version' license' manifest' owner' organization' url' email' releaseNotes' isSystemPackage' lastModifiedByUserID' folderName' iconFile); " is 234.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateLanguagePack,The length of the statement  "	return ExecuteScalar<int> ("UpdateLanguagePack"' languagePackID' packageID' languageID' dependentPackageID' LastModifiedByUserID); " is 130.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,SavePreviewProfile,The length of the statement  "	return ExecuteScalar<int> ("Mobile_SavePreviewProfile"' id' portalId' name' width' height' userAgent' sortOrder' userId); " is 121.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,SaveRedirection,The length of the statement  "	return ExecuteScalar<int> ("Mobile_SaveRedirection"' id' portalId' name' type' sortOrder' sourceTabId' includeChildTabs' targetType' targetValue' enabled' userId); " is 163.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddLog,The length of the statement  "			ExecuteNonQuery ("AddException"' exception.ExceptionHash' exception.Message' exception.StackTrace' exception.InnerMessage' exception.InnerStackTrace' exception.Source); " is 168.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddLog,The length of the statement  "			logEventID = ExecuteScalar<int> ("AddEventLog"' logGUID' logTypeKey' GetNull (logUserID)' GetNull (logUserName)' GetNull (logPortalID)' GetNull (logPortalName)' logCreateDate' logServerName' logProperties' logConfigID' GetNull (exception.ExceptionHash)' notificationActive); " is 274.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddLog,The length of the statement  "			var s = ExecuteScalar<string> ("AddEventLog"' logGUID' logTypeKey' GetNull (logUserID)' GetNull (logUserName)' GetNull (logPortalID)' GetNull (logPortalName)' logCreateDate' logServerName' logProperties' logConfigID); " is 217.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddLog,The length of the statement  "			ExecuteNonQuery ("AddExceptionEvent"' logEventID' exception.AssemblyVersion' exception.PortalId' exception.UserId' exception.TabId' exception.RawUrl' exception.Referrer' exception.UserAgent); " is 191.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddLog,The length of the statement  "		ExecuteScalar<int> ("AddEventLog"' logGUID' logTypeKey' GetNull (logUserID)' GetNull (logUserName)' GetNull (logPortalID)' GetNull (logPortalName)' logCreateDate' logServerName' logProperties' logConfigID' DBNull.Value' notificationActive); " is 240.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddLogType,The length of the statement  "	ExecuteNonQuery ("AddEventLogType"' logTypeKey' logTypeFriendlyName' logTypeDescription' logTypeOwner' logTypeCSSClass); " is 120.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddLogTypeConfigInfo,The length of the statement  "	ExecuteNonQuery ("AddEventLogConfig"' GetNull (logTypeKey)' GetNull (portalID)' loggingIsActive' keepMostRecent' emailNotificationIsActive' GetNull (threshold)' GetNull (notificationThresholdTime)' GetNull (notificationThresholdTimeType)' mailFromAddress' mailToAddress); " is 271.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,PurgeLog,The length of the statement  "	string sql = "IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id(N'" + DatabaseOwner + ObjectQualifier + "PurgeEventLog') AND OBJECTPROPERTY(id' N'IsProcedure') = 1) " + " BEGIN " + "    EXEC " + DatabaseOwner + ObjectQualifier + "PurgeEventLog" + " END "; " is 262.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateLogType,The length of the statement  "	ExecuteNonQuery ("UpdateEventLogType"' logTypeKey' logTypeFriendlyName' logTypeDescription' logTypeOwner' logTypeCSSClass); " is 123.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateLogTypeConfigInfo,The length of the statement  "	ExecuteNonQuery ("UpdateEventLogConfig"' id' GetNull (logTypeKey)' GetNull (portalID)' loggingIsActive' keepMostRecent' emailNotificationIsActive' GetNull (threshold)' GetNull (notificationThresholdTime)' GetNull (notificationThresholdTimeType)' mailFromAddress' mailToAddress); " is 278.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddSchedule,The length of the statement  "	return ExecuteScalar<int> ("AddSchedule"' TypeFullName' TimeLapse' TimeLapseMeasurement' RetryTimeLapse' RetryTimeLapseMeasurement' RetainHistoryNum' AttachToEvent' CatchUpEnabled' Enabled' ObjectDependencies' GetNull (Servers)' CreatedByUserID' FriendlyName' GetNull (ScheduleStartDate)); " is 289.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateSchedule,The length of the statement  "	ExecuteNonQuery ("UpdateSchedule"' ScheduleID' TypeFullName' TimeLapse' TimeLapseMeasurement' RetryTimeLapse' RetryTimeLapseMeasurement' RetainHistoryNum' AttachToEvent' CatchUpEnabled' Enabled' ObjectDependencies' GetNull (Servers)' LastModifiedByUserID' FriendlyName' GetNull (ScheduleStartDate)); " is 299.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateScheduleHistory,The length of the statement  "	ExecuteNonQuery ("UpdateScheduleHistory"' ScheduleHistoryID' FixDate (EndDate)' GetNull (Succeeded)' LogNotes' FixDate (NextStart)); " is 132.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddExtensionUrlProvider,The length of the statement  "	return ExecuteScalar<int> ("AddExtensionUrlProvider"' providerId' desktopModuleId' providerName' providerType' settingsControlSrc' isActive' rewriteAllUrls' redirectAllUrls' replaceAllUrls); " is 190.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddFileVersion,The length of the statement  "		return ExecuteScalar<int> ("AddFileVersion"' fileId' uniqueId' versionGuid' fileName' extension' size' GetNull (width)' GetNull (height)' contentType' folder' folderId' userId' hash' lastModificationTime' title' enablePublishPeriod' startDate' GetNull (endDate)' GetNull (contentItemID)' published); " is 299.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddFileVersion,The length of the statement  "	return ExecuteScalar<int> ("AddFileVersion"' fileId' uniqueId' versionGuid' fileName' extension' size' GetNull (width)' GetNull (height)' contentType' folder' folderId' userId' hash' lastModificationTime' title' enablePublishPeriod' startDate' GetNull (endDate)' GetNull (contentItemID)' published' GetNull (content)); " is 318.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddContentWorkflow,The length of the statement  "	return ExecuteScalar<int> ("AddContentWorkflow"' GetNull (portalId)' workflowName' description' isDeleted' startAfterCreating' startAfterEditing' dispositionEnabled); " is 166.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateContentWorkflow,The length of the statement  "	ExecuteNonQuery ("UpdateContentWorkflow"' workflowId' workflowName' description' isDeleted' startAfterCreating' startAfterEditing' dispositionEnabled); " is 151.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddContentWorkflowState,The length of the statement  "	return ExecuteScalar<int> ("AddContentWorkflowState"' workflowId' stateName' order' isActive' sendEmail' sendMessage' isDisposalState' onCompleteMessageSubject' onCompleteMessageBody' onDiscardMessageSubject' onDiscardMessageBody); " is 231.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateContentWorkflowState,The length of the statement  "	ExecuteNonQuery ("UpdateContentWorkflowState"' stateId' stateName' order' isActive' sendEmail' sendMessage' isDisposalState' onCompleteMessageSubject' onCompleteMessageBody' onDiscardMessageSubject' onDiscardMessageBody); " is 221.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,AddContentWorkflowStatePermission,The length of the statement  "	return ExecuteScalar<int> ("AddContentWorkflowStatePermission"' stateId' permissionId' GetNull (roleId)' allowAccess' GetNull (userId)' GetNull (createdByUserId)); " is 163.
Long Statement,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateContentWorkflowStatePermission,The length of the statement  "	ExecuteNonQuery ("UpdateContentWorkflowStatePermission"' workflowStatePermissionId' stateId' permissionId' GetNull (roleId)' allowAccess' GetNull (userId)' GetNull (lastModifiedByUserId)); " is 188.
Long Statement,DotNetNuke.Data.PetaPoco,PetaPocoMapper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\PetaPoco\PetaPocoMapper.cs,GetColumnInfo,The length of the statement  "	bool declareColumns = pocoProperty.DeclaringType != null && pocoProperty.DeclaringType.GetCustomAttributes (typeof(DeclareColumnsAttribute)' true).Length > 0; " is 158.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,AddContent,The length of the statement  "			object businessController = Reflection.CreateObject (module.DesktopModule.BusinessControllerClass' module.DesktopModule.BusinessControllerClass); " is 145.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,AddModuleInternal,The length of the statement  "		module.ModuleID = dataProvider.AddModule (module.ContentItemId' module.PortalID' module.ModuleDefID' module.AllTabs' module.StartDate' module.EndDate' module.InheritViewPermissions' module.IsShareable' module.IsShareableViewOnly' module.IsDeleted' currentUser.UserID); " is 268.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,AddModuleInternal,The length of the statement  "		EventLogController.Instance.AddLog (module' PortalController.Instance.GetCurrentPortalSettings ()' currentUser.UserID' ""' EventLogController.EventLogType.MODULE_CREATED); " is 171.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,AddModulePermission,The length of the statement  "	var perm = module.ModulePermissions.Where (tp => tp.RoleName == roleName && tp.PermissionKey == permissionKey).SingleOrDefault (); " is 130.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeserializeModulePermissions,The length of the statement  "				bool canAdd = !module.ModulePermissions.Cast<ModulePermissionInfo> ().Any (mp => mp.ModuleID == modulePermission.ModuleID && mp.PermissionID == modulePermission.PermissionID && mp.RoleID == modulePermission.RoleID && mp.UserID == modulePermission.UserID); " is 255.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleContent,The length of the statement  "						object businessController = Reflection.CreateObject (module.DesktopModule.BusinessControllerClass' module.DesktopModule.BusinessControllerClass); " is 145.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleDefinition,The length of the statement  "	var desktopModule = DesktopModuleController.GetDesktopModuleByModuleName (XmlUtils.GetNodeValue (nodeModule.CreateNavigator ()' "definition")' Null.NullInteger); " is 161.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleDefinition,The length of the statement  "			foreach (ModuleDefinitionInfo md in ModuleDefinitionController.GetModuleDefinitionsByDesktopModuleID (desktopModule.DesktopModuleID).Values) { " is 142.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleDefinition,The length of the statement  "			moduleDefinition = ModuleDefinitionController.GetModuleDefinitionByFriendlyName (friendlyName' desktopModule.DesktopModuleID); " is 126.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleSettings,The length of the statement  "	var moduleSettings = CBO.GetCachedObject<Dictionary<int' Hashtable>> (new CacheItemArgs (cacheKey' DataCache.ModuleCacheTimeOut' DataCache.ModuleCachePriority)' c => { " is 167.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetTabModuleSettings,The length of the statement  "	var tabModuleSettings = CBO.GetCachedObject<Dictionary<int' Hashtable>> (new CacheItemArgs (cacheKey' DataCache.TabModuleCacheTimeOut' DataCache.TabModuleCachePriority)' c => { " is 176.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,LocalizeModuleInternal,The length of the statement  "		string translatorRoles = PortalController.GetPortalSetting (string.Format ("DefaultTranslatorRoles-{0}"' sourceModule.CultureCode)' sourceModule.PortalID' "").TrimEnd (';'); " is 173.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,LocalizeModuleInternal,The length of the statement  "		dataProvider.UpdateTabModule (newModule.TabModuleID' newModule.TabID' newModule.ModuleID' newModule.ModuleTitle' newModule.Header' newModule.Footer' newModule.ModuleOrder' newModule.PaneName' newModule.CacheTime' newModule.CacheMethod' newModule.Alignment' newModule.Color' newModule.Border' newModule.IconFile' (int)newModule.Visibility' newModule.ContainerSrc' newModule.DisplayTitle' newModule.DisplayPrint' newModule.DisplaySyndicate' newModule.IsWebSlice' newModule.WebSliceTitle' newModule.WebSliceExpiryDate' newModule.WebSliceTTL' newModule.VersionGuid' newModule.DefaultLanguageGuid' newModule.LocalizedVersionGuid' newModule.CultureCode' currentUser.UserID); " is 668.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,LocalizeModuleInternal,The length of the statement  "				object businessController = Reflection.CreateObject (newModule.DesktopModule.BusinessControllerClass' newModule.DesktopModule.BusinessControllerClass); " is 151.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModuleSettingInternal,The length of the statement  "			EventLogController.AddSettingLog (EventLogController.EventLogType.MODULE_SETTING_UPDATED' "ModuleId"' moduleId' settingName' settingValue' currentUser.UserID); " is 159.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModuleSettingInternal,The length of the statement  "			EventLogController.AddSettingLog (EventLogController.EventLogType.MODULE_SETTING_CREATED' "ModuleId"' moduleId' settingName' settingValue' currentUser.UserID); " is 159.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModuleSettings,The length of the statement  "		UpdateModuleSettingInternal (updatedModule.ModuleID' sKey' Convert.ToString (updatedModule.ModuleSettings [sKey])' false); " is 122.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateTabModuleSettings,The length of the statement  "		UpdateTabModuleSetting (updatedTabModule.TabModuleID' sKey' Convert.ToString (updatedTabModule.TabModuleSettings [sKey])); " is 122.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,HasModuleOrderOrPaneChanged,The length of the statement  "	return storedModuleInfo == null || storedModuleInfo.ModuleOrder != module.ModuleOrder || storedModuleInfo.PaneName != module.PaneName; " is 134.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,AddModule,The length of the statement  "		dataProvider.AddTabModule (module.TabID' module.ModuleID' module.ModuleTitle' module.Header' module.Footer' module.ModuleOrder' module.PaneName' module.CacheTime' module.CacheMethod' module.Alignment' module.Color' module.Border' module.IconFile' (int)module.Visibility' module.ContainerSrc' module.DisplayTitle' module.DisplayPrint' module.DisplaySyndicate' module.IsWebSlice' module.WebSliceTitle' module.WebSliceExpiryDate' module.WebSliceTTL' module.UniqueId' module.VersionGuid' module.DefaultLanguageGuid' module.LocalizedVersionGuid' module.CultureCode' currentUser.UserID); " is 581.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,CopyModule,The length of the statement  "	if (!String.IsNullOrEmpty (sourceModule.CultureCode) && sourceModule.CultureCode == portal.DefaultLanguage && destinationModule.CultureCode != sourceModule.CultureCode && !String.IsNullOrEmpty (destinationModule.CultureCode)) { " is 227.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,CopyModule,The length of the statement  "	} else if (!String.IsNullOrEmpty (sourceModule.CultureCode) && sourceModule.CultureCode != portal.DefaultLanguage && destinationModule.CultureCode != sourceModule.CultureCode && !String.IsNullOrEmpty (destinationModule.CultureCode)) { " is 234.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,CopyModule,The length of the statement  "			ModuleInfo defaultLanguageModule = GetModule (sourceModule.DefaultLanguageModule.ModuleID' destinationTab.DefaultLanguageTab.TabID' false); " is 139.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,CopyModule,The length of the statement  "		dataProvider.AddTabModule (destinationModule.TabID' destinationModule.ModuleID' destinationModule.ModuleTitle' destinationModule.Header' destinationModule.Footer' destinationModule.ModuleOrder' destinationModule.PaneName' destinationModule.CacheTime' destinationModule.CacheMethod' destinationModule.Alignment' destinationModule.Color' destinationModule.Border' destinationModule.IconFile' (int)destinationModule.Visibility' destinationModule.ContainerSrc' destinationModule.DisplayTitle' destinationModule.DisplayPrint' destinationModule.DisplaySyndicate' destinationModule.IsWebSlice' destinationModule.WebSliceTitle' destinationModule.WebSliceExpiryDate' destinationModule.WebSliceTTL' destinationModule.UniqueId' destinationModule.VersionGuid' destinationModule.DefaultLanguageGuid' destinationModule.LocalizedVersionGuid' destinationModule.CultureCode' userId); " is 866.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeleteModule,The length of the statement  "	EventLogController.Instance.AddLog ("ModuleId"' moduleId.ToString (CultureInfo.InvariantCulture)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.MODULE_DELETED); " is 255.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeLocalizeModule,The length of the statement  "			dataProvider.UpdateTabModule (newModule.TabModuleID' newModule.TabID' newModule.ModuleID' newModule.ModuleTitle' newModule.Header' newModule.Footer' newModule.ModuleOrder' newModule.PaneName' newModule.CacheTime' newModule.CacheMethod' newModule.Alignment' newModule.Color' newModule.Border' newModule.IconFile' (int)newModule.Visibility' newModule.ContainerSrc' newModule.DisplayTitle' newModule.DisplayPrint' newModule.DisplaySyndicate' newModule.IsWebSlice' newModule.WebSliceTitle' newModule.WebSliceExpiryDate' newModule.WebSliceTTL' newModule.VersionGuid' newModule.DefaultLanguageGuid' newModule.LocalizedVersionGuid' newModule.CultureCode' UserController.Instance.GetCurrentUserInfo ().UserID); " is 702.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModulesByDefinition,The length of the statement  "	return CBO.FillCollection (DataProvider.Instance ().GetModuleByDefinition (portalID' definitionName)' typeof(ModuleInfo)); " is 122.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetTabModule,The length of the statement  "	return CBO.GetCachedObject<ModuleInfo> (new CacheItemArgs (cacheKey' DataCache.TabModuleCacheTimeOut' DataCache.TabModuleCachePriority)' c => CBO.FillObject<ModuleInfo> (dataProvider.GetTabModule (tabModuleID))); " is 212.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetTabModules,The length of the statement  "	return CBO.GetCachedObject<Dictionary<int' ModuleInfo>> (new CacheItemArgs (cacheKey' DataCache.TabModuleCacheTimeOut' DataCache.TabModuleCachePriority)' c => GetModulesCurrentPage (tabId)); " is 190.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,InitialModulePermission,The length of the statement  "	ArrayList systemModuleViewPermissions = permissionController.GetPermissionByCodeAndKey ("SYSTEM_MODULE_DEFINITION"' "VIEW"); " is 124.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,InitialModulePermission,The length of the statement  "		ArrayList systemModulePermissions = permissionController.GetPermissionByCodeAndKey ("SYSTEM_MODULE_DEFINITION"' tabPermission.PermissionKey); " is 141.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,InitialModulePermission,The length of the statement  "			ModulePermissionInfo modulePermission = AddModulePermission (module' systemModulePermission' tabPermission.RoleID' tabPermission.UserID' tabPermission.AllowAccess); " is 164.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,InitialModulePermission,The length of the statement  "				AddModulePermission (module' (PermissionInfo)systemModuleViewPermissions [0]' modulePermission.RoleID' modulePermission.UserID' true); " is 134.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,InitialModulePermission,The length of the statement  "				AddModulePermission (module' customModulePermission' tabPermission.RoleID' tabPermission.UserID' tabPermission.AllowAccess); " is 124.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,LocalizeModule,The length of the statement  "			var alreadyLocalized = defaultModule.LocalizedModules.TryGetValue (locale.Code' out localizedModule) && localizedModule.ModuleID != defaultModule.ModuleID; " is 155.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,MoveModule,The length of the statement  "	dataProvider.MoveTabModule (fromTabId' moduleId' toTabId' toPaneName' UserController.Instance.GetCurrentUserInfo ().UserID); " is 124.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModule,The length of the statement  "	dataProvider.UpdateModule (module.ModuleID' module.ModuleDefID' module.ContentItemId' module.AllTabs' module.StartDate' module.EndDate' module.InheritViewPermissions' module.IsShareable' module.IsShareableViewOnly' module.IsDeleted' currentUser.UserID); " is 253.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModule,The length of the statement  "	EventLogController.Instance.AddLog (module' PortalController.Instance.GetCurrentPortalSettings ()' currentUser.UserID' ""' EventLogController.EventLogType.MODULE_UPDATED); " is 171.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModule,The length of the statement  "		dataProvider.UpdateTabModule (module.TabModuleID' module.TabID' module.ModuleID' module.ModuleTitle' module.Header' module.Footer' module.ModuleOrder' module.PaneName' module.CacheTime' module.CacheMethod' module.Alignment' module.Color' module.Border' module.IconFile' (int)module.Visibility' module.ContainerSrc' module.DisplayTitle' module.DisplayPrint' module.DisplaySyndicate' module.IsWebSlice' module.WebSliceTitle' module.WebSliceExpiryDate' module.WebSliceTTL' module.VersionGuid' module.DefaultLanguageGuid' module.LocalizedVersionGuid' module.CultureCode' currentUser.UserID); " is 587.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModule,The length of the statement  "		EventLogController.Instance.AddLog (module' PortalController.Instance.GetCurrentPortalSettings ()' currentUser.UserID' ""' EventLogController.EventLogType.TABMODULE_UPDATED); " is 174.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModule,The length of the statement  "					PortalController.UpdatePortalSetting (module.PortalID' "defaultmoduleid"' module.ModuleID.ToString (CultureInfo.InvariantCulture)); " is 131.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModule,The length of the statement  "					PortalController.UpdatePortalSetting (module.PortalID' "defaulttabid"' module.TabID.ToString (CultureInfo.InvariantCulture)); " is 125.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModule,The length of the statement  "					dataProvider.UpdateTabModule (targetModule.TabModuleID' targetModule.TabID' targetModule.ModuleID' targetModule.ModuleTitle' targetModule.Header' targetModule.Footer' targetModule.ModuleOrder' targetModule.PaneName' targetModule.CacheTime' targetModule.CacheMethod' module.Alignment' module.Color' module.Border' module.IconFile' (int)module.Visibility' module.ContainerSrc' module.DisplayTitle' module.DisplayPrint' module.DisplaySyndicate' module.IsWebSlice' module.WebSliceTitle' module.WebSliceExpiryDate' module.WebSliceTTL' targetModule.VersionGuid' targetModule.DefaultLanguageGuid' targetModule.LocalizedVersionGuid' targetModule.CultureCode' currentUser.UserID); " is 671.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModuleOrder,The length of the statement  "		TabChangeTracker.Instance.TrackModuleModification (GetModule (moduleId' tabId' true)' Null.NullInteger' UserController.Instance.GetCurrentUserInfo ().UserID); " is 158.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateTabModuleSetting,The length of the statement  "				EventLogController.AddSettingLog (EventLogController.EventLogType.MODULE_SETTING_UPDATED' "TabModuleId"' tabModuleId' settingName' settingValue' currentUser.UserID); " is 165.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateTabModuleSetting,The length of the statement  "			EventLogController.AddSettingLog (EventLogController.EventLogType.TABMODULE_SETTING_CREATED' "TabModuleId"' tabModuleId' settingName' settingValue' currentUser.UserID); " is 168.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateTranslationStatus,The length of the statement  "	DataProvider.Instance ().UpdateTabModuleTranslationStatus (localizedModule.TabModuleID' localizedModule.LocalizedVersionGuid' UserController.Instance.GetCurrentUserInfo ().UserID); " is 180.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeserializeModule,The length of the statement  "	ModuleInfo sourceModule = DeserializeModule (nodeModule' docPane.DocumentElement' portalId' tabId' moduleDefinition.ModuleDefID); " is 129.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,SerializeModule,The length of the statement  "		XmlUtils.SerializeHashtable (module.ModuleSettings' xmlModule' moduleNode' "modulesetting"' "settingname"' "settingvalue"); " is 123.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,SerializeModule,The length of the statement  "		XmlUtils.SerializeHashtable (module.TabModuleSettings' xmlModule' moduleNode' "tabmodulesetting"' "settingname"' "settingvalue"); " is 129.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,SerializeModule,The length of the statement  "	newNode.InnerText = DesktopModuleController.GetDesktopModule (objModuleDef.DesktopModuleID' module.PortalID).ModuleName; " is 120.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,CacheFileName,The length of the statement  "	return PortalController.Instance.GetCurrentPortalSettings ().HomeDirectoryMapPath + "Cache" + "\\" + Globals.CleanFileName (strCacheKey) + ".resources"; " is 152.
Long Statement,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeleteTabModuleSettings,The length of the statement  "	EventLogController.Instance.AddLog ("TabModuleID"' tabModuleId.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.TABMODULE_SETTING_DELETED); " is 244.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,GetDesktopModulesInternal,The length of the statement  "	var args = new CacheItemArgs (cacheKey' DataCache.DesktopModuleCacheTimeOut' DataCache.DesktopModuleCachePriority' portalID); " is 125.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,GetDesktopModulesInternal,The length of the statement  "	Dictionary<int' DesktopModuleInfo> desktopModules = (portalID == Null.NullInteger) ? CBO.GetCachedObject<Dictionary<int' DesktopModuleInfo>> (args' GetDesktopModulesCallBack) : CBO.GetCachedObject<Dictionary<int' DesktopModuleInfo>> (args' GetDesktopModulesByPortalCallBack); " is 275.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,GetDesktopModulesCallBack,The length of the statement  "	return CBO.FillDictionary ("DesktopModuleID"' DataProvider.GetDesktopModules ()' new Dictionary<int' DesktopModuleInfo> ()); " is 124.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,GetDesktopModulesByPortalCallBack,The length of the statement  "	return CBO.FillDictionary ("DesktopModuleID"' DataProvider.GetDesktopModulesByPortal (portalId)' new Dictionary<int' DesktopModuleInfo> ()); " is 140.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,GetPortalDesktopModulesByPortalIDCallBack,The length of the statement  "	return CBO.FillDictionary ("PortalDesktopModuleID"' DataProvider.Instance ().GetPortalDesktopModules (portalId' Null.NullInteger)' new Dictionary<int' PortalDesktopModuleInfo> ()); " is 180.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,DeleteDesktopModule,The length of the statement  "	EventLogController.Instance.AddLog ("DesktopModuleID"' desktopModuleID.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.DESKTOPMODULE_DELETED); " is 248.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,DeleteDesktopModule,The length of the statement  "		PackageController.Instance.DeleteExtensionPackage (PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.PackageID == desktopModule.PackageID)); " is 163.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,SaveDesktopModule,The length of the statement  "		desktopModuleID = DataProvider.AddDesktopModule (desktopModule.PackageID' desktopModule.ModuleName' desktopModule.FolderName' desktopModule.FriendlyName' desktopModule.Description' desktopModule.Version' desktopModule.IsPremium' desktopModule.IsAdmin' desktopModule.BusinessControllerClass' desktopModule.SupportedFeatures' (int)desktopModule.Shareable' desktopModule.CompatibleVersions' desktopModule.Dependencies' desktopModule.Permissions' desktopModule.ContentItemId' UserController.Instance.GetCurrentUserInfo ().UserID' desktopModule.AdminPage' desktopModule.HostPage); " is 575.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,SaveDesktopModule,The length of the statement  "		EventLogController.Instance.AddLog (desktopModule' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.DESKTOPMODULE_CREATED); " is 219.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,SaveDesktopModule,The length of the statement  "		DataProvider.UpdateDesktopModule (desktopModule.DesktopModuleID' desktopModule.PackageID' desktopModule.ModuleName' desktopModule.FolderName' desktopModule.FriendlyName' desktopModule.Description' desktopModule.Version' desktopModule.IsPremium' desktopModule.IsAdmin' desktopModule.BusinessControllerClass' desktopModule.SupportedFeatures' (int)desktopModule.Shareable' desktopModule.CompatibleVersions' desktopModule.Dependencies' desktopModule.Permissions' desktopModule.ContentItemId' UserController.Instance.GetCurrentUserInfo ().UserID' desktopModule.AdminPage' desktopModule.HostPage); " is 591.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,SaveDesktopModule,The length of the statement  "		EventLogController.Instance.AddLog (desktopModule' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.DESKTOPMODULE_UPDATED); " is 219.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,SaveDesktopModule,The length of the statement  "			var moduleDefinition = ModuleDefinitionController.GetModuleDefinitionByDefinitionName (definition.DefinitionName' desktopModuleID); " is 131.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,UpdateModuleInterfaces,The length of the statement  "	UpdateModuleInterfaces (ref desktopModuleInfo' (UserController.Instance.GetCurrentUserInfo () == null) ? "" : UserController.Instance.GetCurrentUserInfo ().Username' true); " is 172.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,CheckInterfacesImplementation,The length of the statement  "	var controller = Reflection.CreateObject (desktopModuleInfo.BusinessControllerClass' desktopModuleInfo.BusinessControllerClass); " is 128.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,CheckInterfacesImplementation,The length of the statement  "	desktopModuleInfo.IsSearchable = (controller is ModuleSearchBase) || businessController.GetInterfaces ().Contains (typeof(ISearchable)); " is 136.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,AddDesktopModuleToPortal,The length of the statement  "		portalDesktopModuleID = DataProvider.Instance ().AddPortalDesktopModule (portalId' desktopModuleId' UserController.Instance.GetCurrentUserInfo ().UserID); " is 154.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,AddDesktopModuleToPortal,The length of the statement  "		EventLogController.Instance.AddLog ("PortalDesktopModuleID"' portalDesktopModuleID.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTALDESKTOPMODULE_CREATED); " is 266.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,AddDesktopModulesToPortal,The length of the statement  "				AddDesktopModulePageToPortal (desktopModule' desktopModule.AdminPage' portalId' ref createdNewPage' ref addedNewModule); " is 120.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,GetPortalDesktopModule,The length of the statement  "	return CBO.FillObject<PortalDesktopModuleInfo> (DataProvider.Instance ().GetPortalDesktopModules (portalId' desktopModuleId)); " is 126.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,GetPortalDesktopModulesByDesktopModuleID,The length of the statement  "	return CBO.FillDictionary<int' PortalDesktopModuleInfo> ("PortalDesktopModuleID"' DataProvider.Instance ().GetPortalDesktopModules (Null.NullInteger' desktopModuleId)); " is 168.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,GetPortalDesktopModulesByPortalID,The length of the statement  "	return CBO.GetCachedObject<Dictionary<int' PortalDesktopModuleInfo>> (new CacheItemArgs (cacheKey' DataCache.PortalDesktopModuleCacheTimeOut' DataCache.PortalDesktopModuleCachePriority' portalId)' GetPortalDesktopModulesByPortalIDCallBack); " is 240.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,RemoveDesktopModuleFromPortal,The length of the statement  "	EventLogController.Instance.AddLog ("DesktopModuleID"' desktopModuleId.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTALDESKTOPMODULE_DELETED); " is 254.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,RemoveDesktopModuleFromPortals,The length of the statement  "	EventLogController.Instance.AddLog ("DesktopModuleID"' desktopModuleId.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTALDESKTOPMODULE_DELETED); " is 254.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,RemoveDesktopModulesFromPortal,The length of the statement  "	EventLogController.Instance.AddLog ("PortalID"' portalId.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTALDESKTOPMODULE_DELETED); " is 240.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,AddDesktopModulePageToPortal,The length of the statement  "			existTab = Upgrade.AddHostPage (pageName' desktopModule.Page.Description' desktopModule.Page.Icon' desktopModule.Page.LargeIcon' true); " is 135.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,AddDesktopModulePageToPortal,The length of the statement  "			existTab = Upgrade.AddAdminPage (PortalController.Instance.GetPortal (portalId)' pageName' desktopModule.Page.Description' desktopModule.Page.Icon' desktopModule.Page.LargeIcon' true); " is 184.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,AddDesktopModuleToPage,The length of the statement  "	var moduleDefinitions = ModuleDefinitionController.GetModuleDefinitionsByDesktopModuleID (desktopModule.DesktopModuleID).Values; " is 128.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,AddDesktopModuleToPage,The length of the statement  "			Upgrade.AddModuleToPage (tab' moduleDefinition.ModuleDefID' desktopModule.Page.Description' desktopModule.Page.Icon' true); " is 123.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,AddPortalDesktopModule,The length of the statement  "	DataProvider.Instance ().AddPortalDesktopModule (portalID' desktopModuleID' UserController.Instance.GetCurrentUserInfo ().UserID); " is 130.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,AddPortalDesktopModule,The length of the statement  "	EventLogController.Instance.AddLog ("DesktopModuleID"' desktopModuleID.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTALDESKTOPMODULE_CREATED); " is 254.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,DeletePortalDesktopModules,The length of the statement  "	EventLogController.Instance.AddLog ("DesktopModuleID"' desktopModuleID.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTALDESKTOPMODULE_DELETED); " is 254.
Long Statement,DotNetNuke.Entities.Modules,DesktopModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleController.cs,GetPortalDesktopModules,The length of the statement  "	return CBO.FillCollection (DataProvider.Instance ().GetPortalDesktopModules (portalID' desktopModuleID)' typeof(PortalDesktopModuleInfo)); " is 138.
Long Statement,DotNetNuke.Entities.Modules,ModuleControlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleControlController.cs,GetModuleControls,The length of the statement  "	return CBO.GetCachedObject<Dictionary<int' ModuleControlInfo>> (new CacheItemArgs (DataCache.ModuleControlsCacheKey' DataCache.ModuleControlsCacheTimeOut' DataCache.ModuleControlsCachePriority)' GetModuleControlsCallBack); " is 222.
Long Statement,DotNetNuke.Entities.Modules,ModuleControlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleControlController.cs,GetModuleControlsByModuleDefinitionID,The length of the statement  "	return GetModuleControls ().Where (kvp => kvp.Value.ModuleDefID == moduleDefID).ToDictionary (kvp => kvp.Value.ControlKey' kvp => kvp.Value); " is 141.
Long Statement,DotNetNuke.Entities.Modules,ModuleControlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleControlController.cs,GetModuleControlByControlKey,The length of the statement  "	where kvp.Value.ControlKey.ToLowerInvariant () == controlKey.ToLowerInvariant () && kvp.Value.ModuleDefID == moduleDefID " is 120.
Long Statement,DotNetNuke.Entities.Modules,ModuleControlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleControlController.cs,SaveModuleControl,The length of the statement  "		moduleControlID = dataProvider.AddModuleControl (moduleControl.ModuleDefID' moduleControl.ControlKey' moduleControl.ControlTitle' moduleControl.ControlSrc' moduleControl.IconFile' Convert.ToInt32 (moduleControl.ControlType)' moduleControl.ViewOrder' moduleControl.HelpURL' moduleControl.SupportsPartialRendering' moduleControl.SupportsPopUps' UserController.Instance.GetCurrentUserInfo ().UserID); " is 397.
Long Statement,DotNetNuke.Entities.Modules,ModuleControlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleControlController.cs,SaveModuleControl,The length of the statement  "		dataProvider.UpdateModuleControl (moduleControl.ModuleControlID' moduleControl.ModuleDefID' moduleControl.ControlKey' moduleControl.ControlTitle' moduleControl.ControlSrc' moduleControl.IconFile' Convert.ToInt32 (moduleControl.ControlType)' moduleControl.ViewOrder' moduleControl.HelpURL' moduleControl.SupportsPartialRendering' moduleControl.SupportsPopUps' UserController.Instance.GetCurrentUserInfo ().UserID); " is 413.
Long Statement,DotNetNuke.Entities.Modules,ModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleInfo.cs,Initialize,The length of the statement  "	if (PortalSettings.Current.DefaultModuleId > Null.NullInteger && PortalSettings.Current.DefaultTabId > Null.NullInteger) { " is 122.
Long Statement,DotNetNuke.Entities.Modules,ModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleInfo.cs,Initialize,The length of the statement  "		ModuleInfo objModule = ModuleController.Instance.GetModule (PortalSettings.Current.DefaultModuleId' PortalSettings.Current.DefaultTabId' true); " is 143.
Long Statement,DotNetNuke.Entities.Modules,PortalModuleBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\PortalModuleBase.cs,GetCacheFileName,The length of the statement  "	return PortalController.Instance.GetCurrentPortalSettings ().HomeDirectoryMapPath + "Cache" + "\\" + Globals.CleanFileName (strCacheKey) + ".resources"; " is 152.
Long Statement,DotNetNuke.Entities.Modules,SkinControlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\SkinControlController.cs,DeleteSkinControl,The length of the statement  "	EventLogController.Instance.AddLog (skinControl' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.SKINCONTROL_DELETED); " is 215.
Long Statement,DotNetNuke.Entities.Modules,SkinControlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\SkinControlController.cs,SaveSkinControl,The length of the statement  "		skinControlID = dataProvider.AddSkinControl (skinControl.PackageID' skinControl.ControlKey' skinControl.ControlSrc' skinControl.SupportsPartialRendering' UserController.Instance.GetCurrentUserInfo ().UserID); " is 208.
Long Statement,DotNetNuke.Entities.Modules,SkinControlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\SkinControlController.cs,SaveSkinControl,The length of the statement  "		EventLogController.Instance.AddLog (skinControl' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.SKINCONTROL_CREATED); " is 215.
Long Statement,DotNetNuke.Entities.Modules,SkinControlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\SkinControlController.cs,SaveSkinControl,The length of the statement  "		dataProvider.UpdateSkinControl (skinControl.SkinControlID' skinControl.PackageID' skinControl.ControlKey' skinControl.ControlSrc' skinControl.SupportsPartialRendering' UserController.Instance.GetCurrentUserInfo ().UserID); " is 222.
Long Statement,DotNetNuke.Entities.Modules,SkinControlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\SkinControlController.cs,SaveSkinControl,The length of the statement  "		EventLogController.Instance.AddLog (skinControl' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.SKINCONTROL_UPDATED); " is 215.
Long Statement,DotNetNuke.Entities.Modules,UserModuleBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\UserModuleBase.cs,LookupCountry,The length of the statement  "		Context.Cache.Insert ("GeoIPData"' CountryLookup.FileToMemory (Context.Server.MapPath (_GeoIPFile))' new CacheDependency (Context.Server.MapPath (_GeoIPFile))); " is 160.
Long Statement,DotNetNuke.Entities.Modules,UserModuleBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\UserModuleBase.cs,CompleteUserCreation,The length of the statement  "		//check the receive notification setting first' but if register type is Private' we will always send the notification email. " is 124.
Long Statement,DotNetNuke.Entities.Modules,UserModuleBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\UserModuleBase.cs,CompleteUserCreation,The length of the statement  "		if (PortalSettings.EnableRegisterNotification || PortalSettings.UserRegistration == (int)Globals.PortalRegistrationType.PrivateRegistration) { " is 142.
Long Statement,DotNetNuke.Entities.Modules,UserModuleBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\UserModuleBase.cs,CompleteUserCreation,The length of the statement  "			UserController.UserLogin (PortalSettings.PortalId' newUser.Username' newUser.Membership.Password' ""' PortalSettings.PortalName' ""' ref loginStatus' false); " is 157.
Long Statement,DotNetNuke.Entities.Modules,UserModuleBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\UserModuleBase.cs,CompleteUserCreation,The length of the statement  "			UserController.UserLogin (PortalSettings.PortalId' newUser.Username' newUser.Membership.Password' ""' PortalSettings.PortalName' ""' ref loginStatus' false); " is 157.
Long Statement,DotNetNuke.Entities.Modules,UserModuleBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\UserModuleBase.cs,CompleteUserCreation,The length of the statement  "			AddLocalizedModuleMessage (string.Format (Localization.GetString ("SendMail.Error"' Localization.SharedResourceFile)' strMessage)' message' (!String.IsNullOrEmpty (strMessage))); " is 178.
Long Statement,DotNetNuke.Entities.Modules,UserModuleBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\UserModuleBase.cs,SendAdminNotification,The length of the statement  "	NotificationsController.Instance.SendNotification (notification' portalSettings.PortalId' roles' new List<UserInfo> ()); " is 120.
Long Statement,DotNetNuke.Entities.Modules,UserModuleBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\UserModuleBase.cs,LocalizeNotificationText,The length of the statement  "	return Localization.GetSystemMessage (locale' portalSettings' text' user' Localization.GlobalResourceFile' null' ""' portalSettings.AdministratorId); " is 149.
Long Statement,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,GetSettings,The length of the statement  "	return CBO.GetCachedObject<T> (new CacheItemArgs (CacheKey (moduleContext.TabModuleID)' 20' CacheItemPriority.AboveNormal' moduleContext)' Load' false); " is 152.
Long Statement,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,SaveSettings,The length of the statement  "				settingValueAsString = (string)CallSerializerMethod (attribute.Serializer' property.PropertyType' settingValue' nameof (ISettingsSerializer<T>.Serialize)); " is 155.
Long Statement,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,LoadMapping,The length of the statement  "		// Note that "caching" can also be accomplished with a static dictionary since the Attribute/Property mapping does not change unless the module is updated. " is 155.
Long Statement,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,LoadMapping,The length of the statement  "		CachingProvider.Instance ().Insert (cacheKey' mapping' (DNNCacheDependency)null' DateTime.Now.AddHours (2)' Cache.NoSlidingExpiration); " is 135.
Long Statement,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,CreateMapping,The length of the statement  "	var properties = type.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.GetProperty | BindingFlags.SetProperty); " is 136.
Long Statement,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,Load,The length of the statement  "		if (attribute is PortalSettingAttribute && PortalController.Instance.GetPortalSettings (ctlModule.PortalID).ContainsKey (mapping.FullParameterName)) { " is 150.
Long Statement,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,Load,The length of the statement  "		} else if (attribute is TabModuleSettingAttribute && ctlModule.TabModuleSettings.ContainsKey (mapping.FullParameterName)) { " is 123.
Long Statement,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,DeserializeProperty,The length of the statement  "			var deserializedValue = CallSerializerMethod (attribute.Serializer' property.PropertyType' propertyValue' nameof (ISettingsSerializer<T>.Deserialize)); " is 151.
Long Statement,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,DeserializeProperty,The length of the statement  "				property.SetValue (settings' Enum.ToObject (propertyType' Convert.ToInt32 (propertyValue' CultureInfo.InvariantCulture))' null); " is 128.
Long Statement,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,DeserializeProperty,The length of the statement  "		if (propertyType.IsAssignableFrom (typeof(TimeSpan)) && TimeSpan.TryParse (propertyValue' CultureInfo.InvariantCulture' out timeSpanValue)) { " is 141.
Long Statement,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,DeserializeProperty,The length of the statement  "		if (propertyType.IsAssignableFrom (typeof(DateTime)) && DateTime.TryParse (propertyValue' CultureInfo.InvariantCulture' DateTimeStyles.RoundtripKind' out dateTimeValue)) { " is 171.
Long Statement,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,DeserializeProperty,The length of the statement  "		throw new InvalidCastException (string.Format (CultureInfo.CurrentUICulture' "Could not cast {0} to property {1} of type {2}"' propertyValue' property.Name' property.PropertyType)' exception); " is 192.
Long Statement,DotNetNuke.Entities.Portals,PortalSettingsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalSettingsController.cs,LoadPortal,The length of the statement  "	portalSettings.DefaultLanguage = Null.IsNull (portal.DefaultLanguage) ? Localization.SystemLocale : portal.DefaultLanguage; " is 123.
Long Statement,DotNetNuke.Entities.Portals,PortalSettingsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalSettingsController.cs,LoadPortalSettings,The length of the statement  "	portalSettings.DefaultAdminContainer = settings.GetValueOrDefault ("DefaultAdminContainer"' Host.Host.DefaultAdminContainer); " is 125.
Long Statement,DotNetNuke.Entities.Portals,PortalSettingsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalSettingsController.cs,LoadPortalSettings,The length of the statement  "	portalSettings.DefaultPortalContainer = settings.GetValueOrDefault ("DefaultPortalContainer"' Host.Host.DefaultPortalContainer); " is 128.
Long Statement,DotNetNuke.Entities.Portals,PortalSettingsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalSettingsController.cs,LoadPortalSettings,The length of the statement  "	portalSettings.EnableBrowserLanguage = settings.GetValueOrDefault ("EnableBrowserLanguage"' Host.Host.EnableBrowserLanguage); " is 125.
Long Statement,DotNetNuke.Entities.Portals,PortalSettingsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalSettingsController.cs,LoadPortalSettings,The length of the statement  "	portalSettings.SearchIncludeNumeric = settings.GetValueOrDefault ("SearchIncludeNumeric"' Host.Host.SearchIncludeNumeric); " is 122.
Long Statement,DotNetNuke.Entities.Portals,PortalSettingsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalSettingsController.cs,LoadPortalSettings,The length of the statement  "	portalSettings.SearchIncludedTagInfoFilter = settings.GetValueOrDefault ("SearchIncludedTagInfoFilter"' Host.Host.SearchIncludedTagInfoFilter); " is 143.
Long Statement,DotNetNuke.Entities.Portals,PortalSettingsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalSettingsController.cs,LoadPortalSettings,The length of the statement  "	portalSettings.SearchMaxWordlLength = settings.GetValueOrDefault ("MaxSearchWordLength"' Host.Host.SearchMaxWordlLength); " is 121.
Long Statement,DotNetNuke.Entities.Portals,PortalSettingsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalSettingsController.cs,LoadPortalSettings,The length of the statement  "	portalSettings.SearchMinWordlLength = settings.GetValueOrDefault ("MinSearchWordLength"' Host.Host.SearchMinWordlLength); " is 121.
Long Statement,DotNetNuke.Entities.Portals,PortalSettingsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalSettingsController.cs,UpdateSkinSettings,The length of the statement  "		activeTab.SkinSrc = String.IsNullOrEmpty (PortalController.GetPortalSetting ("DefaultAdminSkin"' portalSettings.PortalId' Host.Host.DefaultAdminSkin' portalSettings.CultureCode)) ? portalSettings.DefaultAdminSkin : PortalController.GetPortalSetting ("DefaultAdminSkin"' portalSettings.PortalId' Host.Host.DefaultAdminSkin' portalSettings.CultureCode); " is 351.
Long Statement,DotNetNuke.Entities.Portals,PortalSettingsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalSettingsController.cs,UpdateSkinSettings,The length of the statement  "		activeTab.SkinSrc = String.IsNullOrEmpty (PortalController.GetPortalSetting ("DefaultPortalSkin"' portalSettings.PortalId' Host.Host.DefaultPortalSkin' portalSettings.CultureCode)) ? portalSettings.DefaultPortalSkin : PortalController.GetPortalSetting ("DefaultPortalSkin"' portalSettings.PortalId' Host.Host.DefaultPortalSkin' portalSettings.CultureCode); " is 356.
Long Statement,DotNetNuke.Entities.Portals,PortalSettingsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalSettingsController.cs,UpdateSkinSettings,The length of the statement  "		activeTab.ContainerSrc = String.IsNullOrEmpty (PortalController.GetPortalSetting ("DefaultAdminContainer"' portalSettings.PortalId' Host.Host.DefaultAdminContainer' portalSettings.CultureCode)) ? portalSettings.DefaultAdminContainer : PortalController.GetPortalSetting ("DefaultAdminContainer"' portalSettings.PortalId' Host.Host.DefaultAdminContainer' portalSettings.CultureCode); " is 381.
Long Statement,DotNetNuke.Entities.Portals,PortalSettingsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalSettingsController.cs,UpdateSkinSettings,The length of the statement  "		activeTab.ContainerSrc = String.IsNullOrEmpty (PortalController.GetPortalSetting ("DefaultPortalContainer"' portalSettings.PortalId' Host.Host.DefaultPortalContainer' portalSettings.CultureCode)) ? portalSettings.DefaultPortalContainer : PortalController.GetPortalSetting ("DefaultPortalContainer"' portalSettings.PortalId' Host.Host.DefaultPortalContainer' portalSettings.CultureCode); " is 386.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalAliasController.cs,DeletePortalAlias,The length of the statement  "	EventLogController.Instance.AddLog ("PortalAliasID"' portalAliasId.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTALALIAS_DELETED); " is 242.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalAliasController.cs,GetPortalAliasByPortalID,The length of the statement  "	foreach (PortalAliasInfo alias in GetPortalAliasLookup ().Values.Cast<PortalAliasInfo> ().Where (alias => alias.PortalID == PortalID)) { " is 136.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalAliasController.cs,GetPortalAliasInternal,The length of the statement  "		portalAlias = GetPortalAliasLookupInternal ("*." + strPortalAlias.ToLower ()) ?? GetPortalAliasLookupInternal (strPortalAlias.ToLower ()); " is 138.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalAliasController.cs,GetPortalAliasInternal,The length of the statement  "			DataProvider.Instance ().UpdatePortalAlias (httpAlias.ToLower ().Trim ('/')' UserController.Instance.GetCurrentUserInfo ().UserID); " is 131.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalAliasController.cs,GetPortalAliasInternal,The length of the statement  "			EventLogController.Instance.AddLog ("PortalAlias"' httpAlias' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTALALIAS_UPDATED); " is 224.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalAliasController.cs,LogEvent,The length of the statement  "	EventLogController.Instance.AddLog (portalAlias' PortalController.Instance.GetCurrentPortalSettings ()' userId' ""' logType); " is 125.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalAliasController.cs,AddPortalAlias,The length of the statement  "	int Id = dataProvider.AddPortalAlias (portalAlias.PortalID' portalAlias.HTTPAlias.ToLower ().Trim ('/')' portalAlias.CultureCode' portalAlias.Skin' portalAlias.BrowserType.ToString ()' portalAlias.IsPrimary' UserController.Instance.GetCurrentUserInfo ().UserID); " is 262.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalAliasController.cs,GetPortalAlias,The length of the statement  "	return GetPortalAliasesInternal ().SingleOrDefault (pa => pa.Key.Equals (alias' StringComparison.InvariantCultureIgnoreCase) && pa.Value.PortalID == portalId).Value; " is 165.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalAliasController.cs,GetPortalAliasesInternal,The length of the statement  "	return CBO.GetCachedObject<Dictionary<string' PortalAliasInfo>> (new CacheItemArgs (DataCache.PortalAliasCacheKey' DataCache.PortalAliasCacheTimeOut' DataCache.PortalAliasCachePriority)' c => { " is 193.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalAliasController.cs,UpdatePortalAlias,The length of the statement  "	DataProvider.Instance ().UpdatePortalAliasInfo (portalAlias.PortalAliasID' portalAlias.PortalID' portalAlias.HTTPAlias.ToLower ().Trim ('/')' portalAlias.CultureCode' portalAlias.Skin' portalAlias.BrowserType.ToString ()' portalAlias.IsPrimary' UserController.Instance.GetCurrentUserInfo ().UserID); " is 299.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The length of the statement  "	return CreatePortal (portalName' adminUser' description' keyWords' templatePath' templateFile' homeDirectory' portalAlias' serverPath' childPath' isChildPortal); " is 161.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The length of the statement  "	return CreatePortal (portalName' adminUser' description' keyWords' template' homeDirectory' portalAlias' serverPath' childPath' isChildPortal); " is 143.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,DeletePortalInfo,The length of the statement  "	EventLogController.Instance.AddLog ("PortalId"' portalId.ToString ()' GetCurrentPortalSettingsInternal ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTALINFO_DELETED); " is 213.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTemplate,The length of the statement  "	ParseTemplateInternal (portalId' templatePath' templateFile' administratorId' mergeTabs' isNewPortal' out localeCollection); " is 124.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreateDefaultPortalRoles,The length of the statement  "		administratorRoleId = CreateRole (portalId' "Administrators"' "Administrators of this Website"' 0' 0' "M"' 0' 0' "N"' false' false); " is 132.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreateDefaultPortalRoles,The length of the statement  "		subscriberRoleId = CreateRole (portalId' "Subscribers"' "A public role for site subscriptions"' 0' 0' "M"' 0' 0' "N"' true' true); " is 130.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreateDefaultPortalRoles,The length of the statement  "	RoleController.Instance.AddUserRole (portalId' administratorId' administratorRoleId' RoleStatus.Approved' false' Null.NullDate' Null.NullDate); " is 143.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreateDefaultPortalRoles,The length of the statement  "	RoleController.Instance.AddUserRole (portalId' administratorId' registeredRoleId' RoleStatus.Approved' false' Null.NullDate' Null.NullDate); " is 140.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreateDefaultPortalRoles,The length of the statement  "	RoleController.Instance.AddUserRole (portalId' administratorId' subscriberRoleId' RoleStatus.Approved' false' Null.NullDate' Null.NullDate); " is 140.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortalInternal,The length of the statement  "	string mappedHomeDirectory = String.Format (Globals.ApplicationMapPath + "\\" + homeDirectory + "\\").Replace ("/"' "\\"); " is 122.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortalInternal,The length of the statement  "				ParseTemplateInternal (portalId' templatePath' templateFile' adminUser.UserID' PortalTemplateModuleAction.Replace' true' out newPortalLocales); " is 143.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The length of the statement  "		datExpiryDate = Host.Host.DemoPeriod > Null.NullInteger ? Convert.ToDateTime (Globals.GetMediumDate (DateTime.Now.AddDays (Host.Host.DemoPeriod).ToString ())) : Null.NullDate; " is 175.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The length of the statement  "		PortalId = DataProvider.Instance ().CreatePortal (portalName' Host.Host.HostCurrency' datExpiryDate' Host.Host.HostFee' Host.Host.HostSpace' Host.Host.PageQuota' Host.Host.UserQuota' 0' //site log history function has been removed. " is 231.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The length of the statement  "		EventLogController.Instance.AddLog ("PortalName"' portalName' GetCurrentPortalSettingsInternal ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTAL_CREATED); " is 201.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,DeletePortalInternal,The length of the statement  "	EventLogController.Instance.AddLog ("PortalId"' portalId.ToString ()' GetCurrentPortalSettingsInternal ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTALINFO_DELETED); " is 213.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetPortalDictionaryCallback,The length of the statement  "				portalDic [Convert.ToInt32 (Null.SetNull (dr ["TabID"]' intField))] = Convert.ToInt32 (Null.SetNull (dr ["PortalID"]' intField)); " is 129.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseFiles,The length of the statement  "			//Initially' install files are on local system' then we need the Standard folder provider to read the content regardless the target folderprovider					 " is 146.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseFiles,The length of the statement  "		} catch (InvalidFileExtensionException ex)//when the file is not allowed' we should not break parse process' but just log the error. " is 132.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseFolderPermissions,The length of the statement  "			bool canAdd = !folder.FolderPermissions.Cast<FolderPermissionInfo> ().Any (fp => fp.FolderID == folderPermission.FolderID && fp.PermissionID == folderPermission.PermissionID && fp.RoleID == folderPermission.RoleID && fp.UserID == folderPermission.UserID); " is 255.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,EnsureRequiredProvidersForFolderTypes,The length of the statement  "		ComponentFactory.InstallComponents (new ProviderInstaller ("cryptography"' typeof(CryptographyProvider)' typeof(CoreCryptographyProvider))); " is 140.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,EnsureFolderProviderRegistration,The length of the statement  "	var providerBusinessClassNode = webConfig.SelectSingleNode ("configuration/dotnetnuke/folder/providers/add[@name='" + folderTypeConfig.Provider + "']"); " is 152.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,EnsureFolderProviderRegistration,The length of the statement  "		ComponentFactory.RegisterComponentInstance<TAbstract> (folderTypeConfig.Provider' Activator.CreateInstance (typeClass)); " is 120.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseExtensionUrlProviders,The length of the statement  "		var provider = providers.SingleOrDefault (p => p.ProviderName.Equals (providerName' StringComparison.OrdinalIgnoreCase)); " is 121.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,EnableBrowserLanguageInDefault,The length of the statement  "			retValue = (setting.StartsWith ("Y"' StringComparison.InvariantCultureIgnoreCase) || setting.ToUpperInvariant () == "TRUE"); " is 124.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,EnsureSettingValue,The length of the statement  "	var ensuredSettingValue = settingNode.Value.Replace ("{PortalId}"' (portalId != -1) ? portalId.ToString (CultureInfo.InvariantCulture) : "_default").Replace ("{HostId}"' Host.Host.GUID); " is 186.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetPortalSettingsDictionary,The length of the statement  "		dictionary = CBO.GetCachedObject<Dictionary<string' string>> (new CacheItemArgs (cacheKey' DataCache.PortalSettingsCacheTimeOut' DataCache.PortalSettingsCachePriority' portalId' cultureCode)' GetPortalSettingsDictionaryCallback' true); " is 235.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseFolders,The length of the statement  "					folderMapping = FolderMappingsConfigController.Instance.GetFolderMapping (portalId' folderPath) ?? GetFolderMappingFromStorageLocation (portalId' node); " is 152.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseProfileDefinitions,The length of the statement  "		if (!colDataTypes.TryGetValue ("DataType:" + XmlUtils.GetNodeValue (node.CreateNavigator ()' "datatype")' out typeInfo)) { " is 122.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalDesktopModules,The length of the statement  "				foreach (XPathNavigator permissionNav in desktopModuleNav.Select ("portalDesktopModulePermissions/portalDesktopModulePermission")) { " is 132.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalSettings,The length of the statement  "	objPortal.LogoFile = Globals.ImportFile (portalId' XmlUtils.GetNodeValue (nodeSettings.CreateNavigator ()' "logofile")); " is 120.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalSettings,The length of the statement  "		UpdatePortalSetting (portalId' "DefaultPortalSkin"' XmlUtils.GetNodeValue (nodeSettings' "skinsrc"' "")' currentCulture); " is 121.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalSettings,The length of the statement  "		UpdatePortalSetting (portalId' "DefaultAdminSkin"' XmlUtils.GetNodeValue (nodeSettings' "skinsrcadmin"' "")' currentCulture); " is 125.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalSettings,The length of the statement  "		UpdatePortalSetting (portalId' "DefaultPortalContainer"' XmlUtils.GetNodeValue (nodeSettings' "containersrc"' "")' currentCulture); " is 131.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalSettings,The length of the statement  "		UpdatePortalSetting (portalId' "DefaultAdminContainer"' XmlUtils.GetNodeValue (nodeSettings' "containersrcadmin"' "")' currentCulture); " is 135.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalSettings,The length of the statement  "		UpdatePortalSetting (portalId' "PortalAliasMapping"' XmlUtils.GetNodeValue (nodeSettings' "portalaliasmapping"' "CANONICALURL").ToUpperInvariant ()); " is 149.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalSettings,The length of the statement  "		UpdatePortalSetting (portalId' "TimeZone"' XmlUtils.GetNodeValue (nodeSettings' "timezone"' Localization.SystemTimeZone)); " is 122.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalSettings,The length of the statement  "		UpdatePortalSetting (portalId' "ContentLocalizationEnabled"' XmlUtils.GetNodeValue (nodeSettings' "contentlocalizationenabled")); " is 129.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalSettings,The length of the statement  "		UpdatePortalSetting (portalId' "ControlPanelVisibility"' XmlUtils.GetNodeValue (nodeSettings' "controlpanelvisibility")); " is 121.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalSettings,The length of the statement  "		UpdatePortalSetting (portalId' "InjectModuleHyperLink"' XmlUtils.GetNodeValue (nodeSettings' "injectmodulehyperlink"' "")); " is 123.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParsePortalSettings,The length of the statement  "		UpdatePortalSetting (portalId' "AddCompatibleHttpHeader"' XmlUtils.GetNodeValue (nodeSettings' "addcompatiblehttpheader"' "")); " is 127.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseRoleGroups,The length of the statement  "	CreateDefaultPortalRoles (portalID' administratorId' ref administratorRoleId' ref registeredRoleId' ref subscriberRoleId' unverifiedRoleId); " is 140.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseRoleGroups,The length of the statement  "	UpdatePortalSetup (portalID' administratorId' administratorRoleId' registeredRoleId' portal.SplashTabId' portal.HomeTabId' portal.LoginTabId' portal.RegisterTabId' portal.UserTabId' portal.SearchTabId' portal.Custom404TabId' portal.Custom500TabId' portal.AdminTabId' GetActivePortalLanguage (portalID)); " is 303.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseRoles,The length of the statement  "	CreateDefaultPortalRoles (portalID' administratorId' ref administratorRoleId' ref registeredRoleId' ref subscriberRoleId' unverifiedRoleId); " is 140.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseRoles,The length of the statement  "	UpdatePortalSetup (portalID' administratorId' administratorRoleId' registeredRoleId' portal.SplashTabId' portal.HomeTabId' portal.LoginTabId' portal.RegisterTabId' portal.UserTabId' portal.SearchTabId' portal.Custom404TabId' portal.Custom500TabId' portal.AdminTabId' GetActivePortalLanguage (portalID)); " is 303.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTab,The length of the statement  "		UpdatePortalSetup (portalId' portal.AdministratorId' portal.AdministratorRoleId' portal.RegisteredRoleId' portal.SplashTabId' portal.HomeTabId' portal.LoginTabId' portal.RegisterTabId' portal.UserTabId' portal.SearchTabId' portal.Custom404TabId' portal.Custom500TabId' portal.AdminTabId' GetActivePortalLanguage (portalId)); " is 324.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTab,The length of the statement  "		EventLogController.Instance.AddLog (logType' tab.TabID.ToString ()' GetCurrentPortalSettingsInternal ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTAL_SETTING_UPDATED); " is 215.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTemplateInternal,The length of the statement  "	ParseTemplateInternal (portalId' templatePath' templateFile' administratorId' mergeTabs' isNewPortal' out localeCollection); " is 124.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTemplateInternal,The length of the statement  "		var folderMapping = FolderMappingsConfigController.Instance.GetFolderMapping (portalId' "Templates/") ?? defaultFolderMapping; " is 126.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTemplateInternal,The length of the statement  "		var folderMapping = FolderMappingsConfigController.Instance.GetFolderMapping (portalId' "Users/") ?? defaultFolderMapping; " is 122.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,UpdatePortalInternal,The length of the statement  "	DataProvider.Instance ().UpdatePortalInfo (portal.PortalID' portal.PortalGroupID' portal.PortalName' portal.LogoFile' portal.FooterText' portal.ExpiryDate' portal.UserRegistration' portal.BannerAdvertising' portal.Currency' portal.AdministratorId' portal.HostFee' portal.HostSpace' portal.PageQuota' portal.UserQuota' portal.PaymentProcessor' portal.ProcessorUserId' portal.ProcessorPassword' portal.Description' portal.KeyWords' portal.BackgroundFile' 0' //site log history function has been removed. " is 501.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,UpdatePortalInternal,The length of the statement  "	portal.SplashTabId' portal.HomeTabId' portal.LoginTabId' portal.RegisterTabId' portal.UserTabId' portal.SearchTabId' portal.Custom404TabId' portal.Custom500TabId' portal.DefaultLanguage' portal.HomeDirectory' UserController.Instance.GetCurrentUserInfo ().UserID' portal.CultureCode); " is 283.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,UpdatePortalInternal,The length of the statement  "	EventLogController.Instance.AddLog ("PortalId"' portal.PortalID.ToString ()' GetCurrentPortalSettingsInternal ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTALINFO_UPDATED); " is 220.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,UpdatePortalSettingInternal,The length of the statement  "		DataProvider.Instance ().UpdatePortalSetting (portalID' settingName' settingValue' UserController.Instance.GetCurrentUserInfo ().UserID' cultureCode); " is 150.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,UpdatePortalSettingInternal,The length of the statement  "		EventLogController.Instance.AddLog (settingName + ((cultureCode == Null.NullString) ? String.Empty : " (" + cultureCode + ")")' settingValue' GetCurrentPortalSettingsInternal ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTAL_SETTING_UPDATED); " is 289.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,UpdatePortalSetup,The length of the statement  "	DataProvider.Instance ().UpdatePortalSetup (portalId' administratorId' administratorRoleId' registeredRoleId' splashTabId' homeTabId' loginTabId' registerTabId' userTabId' searchTabId' custom404TabId' custom500TabId' adminTabId' cultureCode); " is 242.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,UpdatePortalSetup,The length of the statement  "	EventLogController.Instance.AddLog ("PortalId"' portalId.ToString ()' GetCurrentPortalSettingsInternal ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTALINFO_UPDATED); " is 213.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The length of the statement  "	//Log the portal if into http context' if exception occurred in next step' we can remove the portal which is not really created. " is 128.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The length of the statement  "			CreatePortalInternal (portalId' portalName' adminUser' description' keyWords' template' homeDirectory' portalAlias' serverPath' childPath' isChildPortal' ref message); " is 167.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The length of the statement  "	//Log the portal if into http context' if exception occurred in next step' we can remove the portal which is not really created. " is 128.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The length of the statement  "			CreatePortalInternal (portalId' portalName' adminUser' description' keyWords' template' homeDirectory' portalAlias' serverPath' childPath' isChildPortal' ref message); " is 167.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetAvailablePortalTemplates,The length of the statement  "	var languageFileNames = PortalTemplateIO.Instance.EnumerateLanguageFiles ().Select (x => Path.GetFileName (x)).ToList (); " is 121.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetAvailablePortalTemplates,The length of the statement  "		var langs = languageFileNames.Where (x => GetTemplateName (x).Equals (currentFileName' StringComparison.InvariantCultureIgnoreCase)).Select (x => GetCultureCode (x)).Distinct ().ToList (); " is 188.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetAvailablePortalTemplates,The length of the statement  "			//DNN-6544 portal creation requires valid culture' if template has no culture defined' then use portal's default language. " is 122.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetAvailablePortalTemplates,The length of the statement  "			var cultureCode = portalSettings != null ? GetPortalDefaultLanguage (portalSettings.PortalId) : Localization.SystemLocale; " is 122.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetPortalList,The length of the statement  "	return CBO.GetCachedObject<List<PortalInfo>> (new CacheItemArgs (cacheKey' DataCache.PortalCacheTimeOut' DataCache.PortalCachePriority' cultureCode)' c => CBO.FillCollection<PortalInfo> (DataProvider.Instance ().GetPortals (cultureCode))); " is 239.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ProcessResourceFileExplicit,The length of the statement  "		FileSystemUtils.UnzipResources (new ZipInputStream (new FileStream (resoureceFile' FileMode.Open' FileAccess.Read))' portalPath); " is 129.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetPortalFolder,The length of the statement  "	if (string.IsNullOrEmpty (Globals.ApplicationPath) || alias.IndexOf (appPath' StringComparison.InvariantCultureIgnoreCase) == Null.NullInteger) { " is 145.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetPortalFolder,The length of the statement  "		return alias.Contains ("/") ? alias.Substring (alias.IndexOf ("/"' StringComparison.InvariantCultureIgnoreCase) + 1) : string.Empty; " is 132.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,DeletePortalFolder,The length of the statement  "	while (parentFolder != null && !parentFolder.FullName.Equals (serverPath.TrimEnd ('\\')' StringComparison.InvariantCultureIgnoreCase)) { " is 136.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetPortalDictionary,The length of the statement  "	return CBO.GetCachedObject<Dictionary<int' int>> (new CacheItemArgs (cacheKey' DataCache.PortalDictionaryTimeOut' DataCache.PortalDictionaryCachePriority)' GetPortalDictionaryCallback); " is 185.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetPortalsByName,The length of the statement  "	return CBO.FillCollection (DataProvider.Instance ().GetPortalsByName (nameToMatch' pageIndex' pageSize)' ref type' ref totalRecords); " is 133.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,DeletePortalSetting,The length of the statement  "	EventLogController.Instance.AddLog ("SettingName"' settingName + ((cultureCode == Null.NullString) ? String.Empty : " (" + cultureCode + ")")' GetCurrentPortalSettingsInternal ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTAL_SETTING_DELETED); " is 290.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,DeletePortalSettings,The length of the statement  "	EventLogController.Instance.AddLog ("PortalID"' portalID.ToString () + ((cultureCode == Null.NullString) ? String.Empty : " (" + cultureCode + ")")' GetCurrentPortalSettingsInternal ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PORTAL_SETTING_DELETED); " is 296.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetPortalSettingAsBoolean,The length of the statement  "			retValue = (setting.StartsWith ("Y"' StringComparison.InvariantCultureIgnoreCase) || setting.ToUpperInvariant () == "TRUE"); " is 124.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetPortalSettingAsBoolean,The length of the statement  "			retValue = (setting.StartsWith ("Y"' StringComparison.InvariantCultureIgnoreCase) || setting.ToUpperInvariant () == "TRUE"); " is 124.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetActivePortalLanguage,The length of the statement  "	if (portalID > Null.NullInteger && Globals.Status == Globals.UpgradeStatus.None && Localization.ActiveLanguagesByPortalID (portalID) == 1) { " is 140.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetActivePortalLanguage,The length of the statement  "			if (_PortalSettings != null && _PortalSettings.ActiveTab != null && !String.IsNullOrEmpty (_PortalSettings.ActiveTab.CultureCode)) { " is 132.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,GetPortalDefaultLanguage,The length of the statement  "	return CBO.GetCachedObject<string> (new CacheItemArgs (cacheKey' DataCache.PortalCacheTimeOut' DataCache.PortalCachePriority' portalID)' GetPortalDefaultLanguageCallBack); " is 171.
Long Statement,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,IncrementCrmVersion,The length of the statement  "		UpdatePortalSetting (portalID' ClientResourceSettings.VersionKey' newVersion.ToString (CultureInfo.InvariantCulture)' true); " is 124.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasExtensions.cs,ContainsAlias,The length of the statement  "	return aliases.Where (alias => alias.PortalID == portalId || portalId == -1).Any (alias => String.Compare (alias.HTTPAlias' httpAlias' StringComparison.OrdinalIgnoreCase) == 0); " is 177.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasExtensions.cs,GetAliasByPortalIdAndSettings,The length of the statement  "	var defaultAlias = aliasList.ToList ().Where (a => a.PortalID == portalId).OrderByDescending (a => a.IsPrimary).FirstOrDefault (); " is 130.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasExtensions.cs,GetAliasByPortalIdAndSettings,The length of the statement  "		foundAlias = aliasList.FirstOrDefault (a => a.BrowserType == browserType && (String.Compare (a.CultureCode' cultureCode' StringComparison.OrdinalIgnoreCase) == 0) && a.IsPrimary && a.PortalID == portalId && a.HTTPAlias == result.HttpAlias); " is 240.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasExtensions.cs,GetAliasByPortalIdAndSettings,The length of the statement  "			foundAlias = aliasList.FirstOrDefault (a => a.BrowserType == browserType && (String.Compare (a.CultureCode' cultureCode' StringComparison.OrdinalIgnoreCase) == 0) && a.IsPrimary && a.PortalID == portalId && a.HTTPAlias.StartsWith (result.HttpAlias.Split ('/') [0])); " is 266.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasExtensions.cs,GetAliasByPortalIdAndSettings,The length of the statement  "	//27138 : Redirect loop caused by duplicate primary aliases.  Changed to only check by browserType/Culture code which makes a primary alias " is 139.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasExtensions.cs,GetAliasByPortalIdAndSettings,The length of the statement  "		foundAlias = aliasList.Where (a => a.BrowserType == browserType && (String.Compare (a.CultureCode' cultureCode' StringComparison.OrdinalIgnoreCase) == 0 || String.IsNullOrEmpty (a.CultureCode)) && a.PortalID == portalId).OrderByDescending (a => a.IsPrimary).ThenByDescending (a => a.CultureCode).FirstOrDefault (); " is 314.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasExtensions.cs,GetAliasByPortalIdAndSettings,The length of the statement  "		foundAlias = aliasList.Where (a => (String.Compare (a.CultureCode' cultureCode' StringComparison.OrdinalIgnoreCase) == 0 || String.IsNullOrEmpty (a.CultureCode)) && a.PortalID == portalId).OrderByDescending (a => a.IsPrimary).ThenByDescending (a => a.CultureCode).FirstOrDefault (); " is 282.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasExtensions.cs,GetAliasByPortalIdAndSettings,The length of the statement  "				result.Reason = foundAlias.CultureCode != result.PortalAlias.CultureCode ? RedirectReason.Wrong_Portal_Alias_For_Culture_And_Browser : RedirectReason.Wrong_Portal_Alias_For_Browser_Type; " is 186.
Long Statement,DotNetNuke.Entities.Portals,PortalAliasInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalAliasInfo.cs,Fill,The length of the statement  "	BrowserType = String.IsNullOrEmpty (browserType) || browserType.ToLowerInvariant () == "normal" ? BrowserTypes.Normal : BrowserTypes.Mobile; " is 140.
Long Statement,DotNetNuke.Entities.Portals,PortalGroupController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalGroupController.cs,AddPortalToGroup,The length of the statement  "		var autoAssignRoles = RoleController.Instance.GetRoles (portal.PortalID' role => role.AutoAssignment && role.Status == RoleStatus.Approved); " is 140.
Long Statement,DotNetNuke.Entities.Portals,PortalGroupController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalGroupController.cs,AddPortalToGroup,The length of the statement  "				RoleController.Instance.AddUserRole (portalGroup.MasterPortalId' user.UserID' autoAssignRole.RoleID' RoleStatus.Approved' false' Null.NullDate' Null.NullDate); " is 159.
Long Statement,DotNetNuke.Entities.Portals,PortalGroupController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalGroupController.cs,GetSharedModulesWithPortal,The length of the statement  "	return CBO.GetCachedObject<IEnumerable<ModuleInfo>> (new CacheItemArgs (DataCache.SharedModulesWithPortalCacheKey' DataCache.SharedModulesWithPortalCacheTimeOut' DataCache.SharedModulesWithPortalCachePriority' portal)' p => CBO.FillCollection<ModuleInfo> (_dataService.GetSharedModulesWithPortal (portal))); " is 307.
Long Statement,DotNetNuke.Entities.Portals,PortalGroupController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalGroupController.cs,GetSharedModulesByPortal,The length of the statement  "	return CBO.GetCachedObject<IEnumerable<ModuleInfo>> (new CacheItemArgs (DataCache.SharedModulesByPortalCacheKey' DataCache.SharedModulesByPortalCacheTimeOut' DataCache.SharedModulesByPortalCachePriority' portal)' p => CBO.FillCollection<ModuleInfo> (_dataService.GetSharedModulesByPortal (portal))); " is 299.
Long Statement,DotNetNuke.Entities.Portals,PortalGroupController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalGroupController.cs,AddPortalGroup,The length of the statement  "	portalGroup.PortalGroupId = _dataService.AddPortalGroup (portalGroup' UserController.Instance.GetCurrentUserInfo ().UserID); " is 124.
Long Statement,DotNetNuke.Entities.Portals,PortalGroupController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalGroupController.cs,GetPortalGroups,The length of the statement  "	return CBO.GetCachedObject<IEnumerable<PortalGroupInfo>> (new CacheItemArgs (DataCache.PortalGroupsCacheKey' DataCache.PortalGroupsCacheTimeOut' DataCache.PortalGroupsCachePriority)' GetPortalGroupsCallback); " is 208.
Long Statement,DotNetNuke.Entities.Portals,PortalGroupController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalGroupController.cs,RemovePortalFromGroup,The length of the statement  "		var adminUsers = RoleController.Instance.GetUsersByRole (Null.NullInteger' portal.AdministratorRoleName).Where (u => RoleController.Instance.GetUserRole (portal.PortalID' u.UserID' portal.AdministratorRoleId) != null); " is 218.
Long Statement,DotNetNuke.Entities.Portals,PortalGroupController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\PortalGroupController.cs,IsModuleShared,The length of the statement  "	return GetSharedModulesWithPortal (portal).Any (x => x.ModuleID == moduleId && !x.IsDeleted) || GetSharedModulesByPortal (portal).Any (x => x.ModuleID == moduleId && !x.IsDeleted); " is 180.
Long Statement,DotNetNuke.Entities.Users,UserEventHandlers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserEventHandlers.cs,DeleteAllNewUnauthorizedUserRegistrationNotifications,The length of the statement  "	var notifications = NotificationsController.Instance.GetNotificationByContext (nt.NotificationTypeId' userId.ToString (CultureInfo.InvariantCulture)); " is 150.
Long Statement,DotNetNuke.Entities.Users,MembershipPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPropertyAccess.cs,GetProperty,The length of the statement  "	if (CurrentScope < Scope.DefaultSettings || (CurrentScope == Scope.DefaultSettings && !UserQueriesHimself) || ((CurrentScope != Scope.SystemMessages || objUser.IsSuperUser) && (propertyName.ToLower () == "password" || propertyName.ToLower () == "passwordanswer" || propertyName.ToLower () == "passwordquestion"))) { " is 315.
Long Statement,DotNetNuke.Entities.Users,ProfilePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Profile\ProfilePropertyAccess.cs,CheckAccessLevel,The length of the statement  "					if (targetUser.Social.UserRelationships.Any (userRelationship => (userRelationship.RelationshipId == relationship.RelationshipId && userRelationship.Status == RelationshipStatus.Accepted && ((userRelationship.RelatedUserId == accessingUser.UserID && userRelationship.UserId == targetUser.UserID) || (userRelationship.RelatedUserId == targetUser.UserID && userRelationship.UserId == accessingUser.UserID))))) { " is 409.
Long Statement,DotNetNuke.Entities.Users,ProfilePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Profile\ProfilePropertyAccess.cs,IsAdminUser,The length of the statement  "			var administratorRoleName = portalSettings != null ? portalSettings.AdministratorRoleName : PortalController.Instance.GetPortal (targetUser.PortalID).AdministratorRoleName; " is 172.
Long Statement,DotNetNuke.Entities.Users,ProfilePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Profile\ProfilePropertyAccess.cs,GetProperty,The length of the statement  "		var property = profile.ProfileProperties.Cast<ProfilePropertyDefinition> ().SingleOrDefault (p => p.PropertyName.ToLower () == propertyName.ToLower ()); " is 152.
Long Statement,DotNetNuke.Entities.Users,ProfilePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Profile\ProfilePropertyAccess.cs,GetProperty,The length of the statement  "		return property != null && property.PropertyName.Equals ("photo"' StringComparison.InvariantCultureIgnoreCase) ? Globals.ApplicationPath + "/images/no_avatar.gif" : PropertyAccess.ContentLocked; " is 194.
Long Statement,DotNetNuke.Entities.Users,ProfilePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Profile\ProfilePropertyAccess.cs,GetRichValue,The length of the statement  "			result = PropertyAccess.FormatString (objSecurity.InputFilter (HttpUtility.HtmlDecode (property.PropertyValue)' PortalSecurity.FilterFlag.NoScripting)' formatString); " is 166.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,AddEventLog,The length of the statement  "		LogUserName = objSecurity.InputFilter (username' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup)' " is 169.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,AutoAssignUsersToPortalRoles,The length of the statement  "	foreach (var role in RoleController.Instance.GetRoles (portalId' role => role.AutoAssignment && role.Status == RoleStatus.Approved)) { " is 134.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,AutoAssignUsersToPortalRoles,The length of the statement  "		RoleController.Instance.AddUserRole (portalId' user.UserID' role.RoleID' RoleStatus.Approved' false' Null.NullDate' Null.NullDate); " is 131.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,AutoAssignUsersToRoles,The length of the statement  "				RoleController.Instance.AddUserRole (portal.PortalID' user.UserID' role.RoleID' RoleStatus.Approved' false' Null.NullDate' Null.NullDate); " is 138.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,AutoAssignUsersToRoles,The length of the statement  "		if (!user.Membership.Approved && thisPortal.UserRegistration == (int)Globals.PortalRegistrationType.VerifiedRegistration) { " is 123.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,AutoAssignUsersToRoles,The length of the statement  "			RoleController.Instance.AddUserRole (portalId' user.UserID' role.RoleID' RoleStatus.Approved' false' Null.NullDate' Null.NullDate); " is 131.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,RestoreUserPermissions,The length of the statement  "			if (permission.PermissionKey.ToUpper () == "READ" || permission.PermissionKey.ToUpper () == "WRITE" || permission.PermissionKey.ToUpper () == "BROWSE") { " is 153.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserLookupDictionary,The length of the statement  "	return CBO.GetCachedObject<SharedDictionary<int' string>> (new CacheItemArgs (cacheKey' DataCache.UserLookupCacheTimeOut' DataCache.UserLookupCachePriority)' c => new SharedDictionary<int' string> ()' true); " is 207.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,SendDeleteEmailNotifications,The length of the statement  "	message.Subject = Localization.GetSystemMessage (user.Profile.PreferredLocale' portalSettings' "EMAIL_USER_UNREGISTER_SUBJECT"' user' Localization.GlobalResourceFile' null' ""' portalSettings.AdministratorId); " is 209.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,SendDeleteEmailNotifications,The length of the statement  "	message.Body = Localization.GetSystemMessage (user.Profile.PreferredLocale' portalSettings' "EMAIL_USER_UNREGISTER_BODY"' user' Localization.GlobalResourceFile' null' ""' portalSettings.AdministratorId); " is 203.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserByDisplayname,The length of the statement  "	return MembershipProvider.Instance ().GetUserByDisplayName (PortalController.GetEffectivePortalId (portalId)' displayName); " is 123.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersAdvancedSearch,The length of the statement  "	return MembershipProvider.Instance ().GetUsersAdvancedSearch (PortalController.GetEffectivePortalId (portalId)' userId' filterUserId' filterRoleId' relationTypeId' isAdmin' pageIndex' pageSize' sortColumn' sortAscending' propertyNames' propertyValues); " is 252.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersBasicSearch,The length of the statement  "	return MembershipProvider.Instance ().GetUsersBasicSearch (PortalController.GetEffectivePortalId (portalId)' pageIndex' pageSize' sortColumn' sortAscending' propertyName' propertyValue); " is 186.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserProfilePictureUrl,The length of the statement  "	return childPortalAlias.StartsWith (Globals.ApplicationPath) ? childPortalAlias + url + cdv : Globals.ApplicationPath + childPortalAlias + url + cdv; " is 149.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,ChangePasswordQuestionAndAnswer,The length of the statement  "	EventLogController.Instance.AddLog (user' PortalController.Instance.GetCurrentPortalSettings ()' GetCurrentUserInternal ().UserID' ""' EventLogController.EventLogType.USER_UPDATED); " is 181.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,ChangePasswordQuestionAndAnswer,The length of the statement  "	return MembershipProvider.Instance ().ChangePasswordQuestionAndAnswer (user' password' passwordQuestion' passwordAnswer); " is 121.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,CreateUser,The length of the statement  "	//ensure valid GUID exists (covers case where password is randomly generated - has 24 hr validity as per other Admin user steps " is 127.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,CreateUser,The length of the statement  "		EventLogController.Instance.AddLog (user' PortalController.Instance.GetCurrentPortalSettings ()' GetCurrentUserInternal ().UserID' ""' EventLogController.EventLogType.USER_CREATED); " is 181.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,DeleteUser,The length of the statement  "	// If the HTTP Current Context is unavailable (e.g. when called from within a SchedulerClient) GetCurrentPortalSettings() returns null and the  " is 142.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,DeleteUser,The length of the statement  "		//Obtain PortalSettings from Current Context or from the users (original) portal if the HTTP Current Context is unavailable. " is 124.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,DeleteUser,The length of the statement  "		EventLogController.Instance.AddLog ("Username"' user.Username' portalSettings' user.UserID' EventLogController.EventLogType.USER_DELETED); " is 138.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUnAuthorizedUsers,The length of the statement  "	return MembershipProvider.Instance ().GetUnAuthorizedUsers (GetEffectivePortalId (portalId)' includeDeleted' superUsersOnly); " is 125.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserCountByPortal,The length of the statement  "	return CBO.GetCachedObject<int> (new CacheItemArgs (cacheKey' DataCache.PortalUserCountCacheTimeOut' DataCache.PortalUserCountCachePriority' portalId)' GetUserCountByPortalCallBack); " is 182.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserCreateStatus,The length of the statement  "		strInvalidPassword = strInvalidPassword.Replace ("[PasswordLength]"' MembershipProviderConfig.MinPasswordLength.ToString ()); " is 125.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserCreateStatus,The length of the statement  "		strInvalidPassword = strInvalidPassword.Replace ("[NoneAlphabet]"' MembershipProviderConfig.MinNonAlphanumericCharacters.ToString ()); " is 134.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserSettings,The length of the statement  "	Dictionary<string' string> settingsDictionary = (portalId == Null.NullInteger) ? HostController.Instance.GetSettingsDictionary () : PortalController.Instance.GetPortalSettings (masterPortalId); " is 193.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsers,The length of the statement  "	return MembershipProvider.Instance ().GetUsers (GetEffectivePortalId (portalId)' pageIndex' pageSize' ref totalRecords' includeDeleted' superUsersOnly); " is 152.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByEmail,The length of the statement  "	return MembershipProvider.Instance ().GetUsersByEmail (GetEffectivePortalId (portalId)' emailToMatch' pageIndex' pageSize' ref totalRecords' includeDeleted' superUsersOnly); " is 173.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByProfileProperty,The length of the statement  "	return GetUsersByProfileProperty (portalId' propertyName' propertyValue' pageIndex' pageSize' ref totalRecords' false' false); " is 126.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByProfileProperty,The length of the statement  "	return MembershipProvider.Instance ().GetUsersByProfileProperty (GetEffectivePortalId (portalId)' propertyName' propertyValue' pageIndex' pageSize' ref totalRecords' includeDeleted' superUsersOnly); " is 198.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByUserName,The length of the statement  "	return MembershipProvider.Instance ().GetUsersByUserName (GetEffectivePortalId (portalId)' userNameToMatch' pageIndex' pageSize' ref totalRecords' includeDeleted' superUsersOnly); " is 179.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUsersByDisplayName,The length of the statement  "	return MembershipProvider.Instance ().GetUsersByDisplayName (GetEffectivePortalId (portalId)' nameToMatch' pageIndex' pageSize' ref totalRecords' includeDeleted' superUsersOnly); " is 178.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,RemoveUser,The length of the statement  "		EventLogController.Instance.AddLog ("Username"' user.Username' portalSettings' user.UserID' EventLogController.EventLogType.USER_REMOVED); " is 138.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,RestoreUser,The length of the statement  "		EventLogController.Instance.AddLog ("Username"' user.Username' portalSettings' user.UserID' EventLogController.EventLogType.USER_RESTORED); " is 139.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,UpdateUser,The length of the statement  "		EventLogController.Instance.AddLog (user' portalSettings' GetCurrentUserInternal ().UserID' ""' EventLogController.EventLogType.USER_UPDATED); " is 142.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,UserLogin,The length of the statement  "	AddEventLog (portalId' user.Username' user.UserID' portalName' ip' user.IsSuperUser ? UserLoginStatus.LOGIN_SUPERUSER : UserLoginStatus.LOGIN_SUCCESS); " is 151.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,ValidateUser,The length of the statement  "	var user = MembershipProvider.Instance ().UserLogin (GetEffectivePortalId (portalId)' username' password' authType' verificationCode' ref loginStatus); " is 151.
Long Statement,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,ValidateUser,The length of the statement  "	if (loginStatus == UserLoginStatus.LOGIN_USERLOCKEDOUT || loginStatus == UserLoginStatus.LOGIN_FAILURE || loginStatus == UserLoginStatus.LOGIN_USERNOTAPPROVED) { " is 161.
Long Statement,DotNetNuke.Entities.Users,UserInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserInfo.cs,GetProperty,The length of the statement  "	} else if (UserID != accessingUser.UserID && !isAdminUser (ref accessingUser) && currentScope > Scope.DefaultSettings) { " is 120.
Long Statement,DotNetNuke.Entities.Users,UserInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserInfo.cs,LocalTime,The length of the statement  "	return TimeZoneInfo.ConvertTime (utcTime' TimeZoneInfo.Utc' PortalController.Instance.GetCurrentPortalSettings ().TimeZone); " is 124.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,Redirect,The length of the statement  "		//we are ignoreing this error simply because there is no graceful way to redirect the user' wihtout the threadabort exception. " is 126.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,IncrementalVersionExists,The length of the statement  "			var incrementalcount = Directory.GetFiles (providerpath' Upgrade.GetStringVersion (version) + ".*." + Upgrade.DefaultProvider).Length; " is 134.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,IsInstalled,The length of the statement  "	bool isInstalled = (!IsInstallationURL ()) && ((installationdatefactor + dataproviderfactor + htmlmodulefactor + portaldirectoryfactor + localexecutionfactor) >= c_PassingScore); " is 178.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,BuildCrossTabDataSet,The length of the statement  "	return BuildCrossTabDataSet (DataSetName' result' FixedColumns' VariableColumns' KeyColumn' FieldColumn' FieldTypeColumn' StringValueColumn' NumericValueColumn' CultureInfo.CurrentCulture); " is 189.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetApplicationName,The length of the statement  "	if (HttpContext.Current.Items ["ApplicationName"] == null || String.IsNullOrEmpty (HttpContext.Current.Items ["ApplicationName"].ToString ())) { " is 144.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,UpdateDataBaseVersion,The length of the statement  "	DataProvider.Instance ().UpdateDatabaseVersion (version.Major' version.Minor' version.Build' DotNetNukeContext.Current.Application.Name); " is 137.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,UpdateDataBaseVersionIncrement,The length of the statement  "	DataProvider.Instance ().UpdateDatabaseVersionIncrement (version.Major' version.Minor' version.Build' increment' DotNetNukeContext.Current.Application.Name); " is 157.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,FormatVersion,The length of the statement  "	string strVersion = version.Major.ToString ("00") + "." + version.Minor.ToString ("00") + "." + version.Build.ToString ("00"); " is 126.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,IsAdminControl,The length of the statement  "	return (!string.IsNullOrEmpty (HttpContext.Current.Request.QueryString ["mid"])) || (!string.IsNullOrEmpty (HttpContext.Current.Request.QueryString ["ctl"])); " is 158.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,IsAdminSkin,The length of the statement  "		_IsAdminSkin = (!String.IsNullOrEmpty (ControlKey) && ControlKey != "view" && ModuleID != -1) || (!String.IsNullOrEmpty (ControlKey) && AdminKeys.IndexOf (ControlKey) != -1 && ModuleID == -1); " is 192.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,IsLayoutMode,The length of the statement  "	return (TabPermissionController.CanAddContentToPage () && PortalController.Instance.GetCurrentPortalSettings ().UserMode == PortalSettings.Mode.Layout); " is 152.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CreateRSS,The length of the statement  "	var strRelativePath = DomainName + FileName.Substring (FileName.IndexOf ("\\Portals"' StringComparison.InvariantCultureIgnoreCase)).Replace ("\\"' "/"); " is 152.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CreateRSS,The length of the statement  "				strRSS.AppendLine ("  <description>" + _portalSettings.PortalName + " " + GetMediumDate (dr [CreatedDateField].ToString ()) + "</description>"); " is 144.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CreateRSS,The length of the statement  "		strRSS.Append ("<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>" + Environment.NewLine + "<rss version=\"0.91\">" + Environment.NewLine + "  <channel>" + Environment.NewLine + "  <title>" + _portalSettings.PortalName + "</title>" + Environment.NewLine + "  <link>" + DomainName + "</link>" + Environment.NewLine + "  <description>" + _portalSettings.PortalName + "</description>" + Environment.NewLine + "  <language>en-us</language>" + Environment.NewLine + "  <copyright>" + (!string.IsNullOrEmpty (_portalSettings.FooterText) ? _portalSettings.FooterText.Replace ("[year]"' DateTime.Now.Year.ToString ()) : string.Empty) + "</copyright>" + Environment.NewLine + "  <webMaster>" + _portalSettings.Email + "</webMaster>" + Environment.NewLine + strRSS + "   </channel>" + Environment.NewLine + "</rss>"); " is 805.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CreateValidClass,The length of the statement  "	var validClassLookupDictionary = CBO.GetCachedObject<SharedDictionary<string' string>> (new CacheItemArgs ("ValidClassLookup"' 200' CacheItemPriority.NotRemovable)' (CacheItemArgs cacheItemArgs) => new SharedDictionary<string' string> ()); " is 239.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CreateValidID,The length of the statement  "	var validIDLookupDictionary = CBO.GetCachedObject<SharedDictionary<string' string>> (new CacheItemArgs ("ValidIDLookup"' 200' CacheItemPriority.NotRemovable)' (CacheItemArgs cacheItemArgs) => new SharedDictionary<string' string> ()); " is 233.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CreateValidID,The length of the statement  "				// '... letters' digits ([0-9])' hyphens ("-")' underscores ("_")' colons (":")' and periods (".")' are valid identifiers " is 121.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,AccessDeniedURL,The length of the statement  "			var messageGuid = DataProvider.Instance ().AddRedirectMessage (_portalSettings.UserId' _portalSettings.ActiveTab.TabID' Message).ToString ("N"); " is 144.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,AddHTTP,The length of the statement  "		if (strURL.IndexOf ("mailto:") == -1 && strURL.IndexOf ("://") == -1 && strURL.IndexOf ("~") == -1 && strURL.IndexOf ("\\\\") == -1) { " is 134.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,AddHTTP,The length of the statement  "			strURL = ((HttpContext.Current != null && UrlUtils.IsSecureConnectionOrSslOffload (HttpContext.Current.Request)) ? "https://" : "http://") + strURL; " is 148.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetURLType,The length of the statement  "	if (URL.ToLower ().StartsWith ("mailto:") == false && URL.IndexOf ("://") == -1 && URL.StartsWith ("~") == false && URL.StartsWith ("\\\\") == false && URL.StartsWith ("/") == false) { " is 184.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,LoginURL,The length of the statement  "			loginUrl = string.IsNullOrEmpty (returnUrl) ? NavigateURL (portalSettings.LoginTabId' ""' popUpParameter) : NavigateURL (portalSettings.LoginTabId' ""' returnUrl' popUpParameter); " is 179.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,LoginURL,The length of the statement  "			string strMessage = string.Format ("error={0}"' Localization.GetString ("NoLoginControl"' Localization.GlobalResourceFile)); " is 124.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,LoginURL,The length of the statement  "			loginUrl = string.IsNullOrEmpty (returnUrl) ? NavigateURL (portalSettings.ActiveTab.TabID' "Login"' strMessage' popUpParameter) : NavigateURL (portalSettings.ActiveTab.TabID' "Login"' returnUrl' strMessage' popUpParameter); " is 223.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,LoginURL,The length of the statement  "		loginUrl = string.IsNullOrEmpty (returnUrl) ? NavigateURL (portalSettings.ActiveTab.TabID' "Login"' popUpParameter) : NavigateURL (portalSettings.ActiveTab.TabID' "Login"' returnUrl' popUpParameter); " is 199.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,NavigateURL,The length of the statement  "		url = additionalParameters.Where (parameter => !string.IsNullOrEmpty (parameter)).Aggregate (url' (current' parameter) => current + ("&" + parameter)); " is 151.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,LinkClick,The length of the statement  "	return LinkClick (Link' TabID' ModuleID' TrackClicks' ForceDownload' _portalSettings.PortalId' _portalSettings.EnableUrlLanguage' _portalSettings.GUID.ToString ()); " is 164.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,LinkClick,The length of the statement  "			strLink = ApplicationPath + "/LinkClick.aspx?fileticket=" + UrlUtils.EncryptParameter (UrlUtils.GetParameterValue (Link)' portalGuid); " is 134.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GenerateTabPath,The length of the statement  "			objTab = Null.IsNull (objTab.ParentId) ? null : TabController.Instance.GetTab (objTab.ParentId' objTab.PortalID' false); " is 120.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetHelpText,The length of the statement  "		string LocalResourceFile = objModuleControl.ControlSrc.Replace (FileName' Localization.LocalResourceDirectory + "/" + FileName); " is 128.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,UserProfilePicFormattedUrl,The length of the statement  "	avatarUrl = string.Format ("{0}://{1}{2}"' UrlUtils.IsSecureConnectionOrSslOffload (HttpContext.Current.Request) ? "https" : "http"' avatarUrl' !HttpContext.Current.Request.Url.IsDefaultPort && !avatarUrl.Contains (":") ? ":" + HttpContext.Current.Request.Url.Port : string.Empty); " is 281.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,AddFile,The length of the statement  "		var objFile = new FileInfo (portalId' strFileName' strExtension' Length' imageWidth' imageHeight' strContentType' FolderPath' objFolder.FolderID' objFolder.StorageLocation' true); " is 179.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetDatabaseVersion,The length of the statement  "		strDatabaseVersion = databaseVersion.Major.ToString ("00") + databaseVersion.Minor.ToString ("00") + databaseVersion.Build.ToString ("00"); " is 139.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetDatabaseVersion,The length of the statement  "		strDatabaseVersion = databaseVersion.Major.ToString ("00") + separator + databaseVersion.Minor.ToString ("00") + separator + databaseVersion.Build.ToString ("00"); " is 163.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The length of the statement  "	List<TabInfo> listTabs = TabController.GetPortalTabs (intPortalId' Null.NullInteger' blnNoneSpecified' Null.NullString' blnHidden' blnDeleted' blnURL' false' bCheckAuthorised); " is 176.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The length of the statement  "	List<TabInfo> listTabs = TabController.GetPortalTabs (intPortalId' excludeTabId' blnNoneSpecified' Null.NullString' blnHidden' blnDeleted' blnURL' false' bCheckAuthorised); " is 172.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The length of the statement  "			if ((tab.IsVisible || blnHidden) && (tab.IsDeleted == false || blnDeleted) && (tab.TabType == TabType.Normal || blnURL)) { " is 122.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The length of the statement  "			if ((tab.IsVisible || blnHidden) && (tab.IsDeleted == false || blnDeleted) && (tab.TabType == TabType.Normal || blnURL)) { " is 122.
Long Statement,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,IsAdminSkin,The length of the statement  "	return IsAdminTab || (!string.IsNullOrEmpty (ControlKey) && ControlKey != "view" && ModuleID != -1) || (!string.IsNullOrEmpty (ControlKey) && AdminKeys.IndexOf (ControlKey) != -1 && ModuleID == -1); " is 198.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,CheckVersion,The length of the statement  "			Logger.Info ("UnderConstruction page was shown because application needs to be installed' and both the AutoUpgrade and UseWizard AppSettings in web.config are false. Use /install/install.aspx?mode=install to install application. "); " is 232.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,CheckVersion,The length of the statement  "			Logger.Info ("UnderConstruction page was shown because application needs to be upgraded' and both the AutoUpgrade and UseInstallWizard AppSettings in web.config are false. Use /install/install.aspx?mode=upgrade to upgrade application. "); " is 238.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,CheckVersion,The length of the statement  "			Logger.Error ("UnderConstruction page was shown because we cannot ascertain the application was ever installed' and there is no working database connection. Check database connectivity before continuing. "); " is 207.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,CheckVersion,The length of the statement  "					Logger.Error ("The connection to the database has failed' the application is not installed yet' and both AutoUpgrade and UseInstallWizard are not set in web.config' a 500 error page will be shown to visitors"); " is 210.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,CheckVersion,The length of the statement  "					Logger.Error ("The connection to the database has failed' however' the application is already completely installed' a 500 error page will be shown to visitors"); " is 161.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,CreateUnderConstructionPage,The length of the statement  "			File.Copy (server.MapPath ("~/Install/UnderConstruction.template.htm")' server.MapPath ("~/Install/UnderConstruction.htm")); " is 124.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The length of the statement  "			AppDomain.CurrentDomain.Load ("System.Runtime.Serialization' Version=3.0.0.0' Culture=neutral' PublicKeyToken=B77A5C561934E089"); " is 129.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetReleaseFromRegistry,The length of the statement  "		using (var ndpKey = RegistryKey.OpenBaseKey (RegistryHive.LocalMachine' RegistryView.Registry32).OpenSubKey (@"SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\")) { " is 167.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,LogEnd,The length of the statement  "			shutdownDetail = "The AppDomain shut down because of a change to the App_GlobalResources folder or files contained in it."; " is 123.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,LogEnd,The length of the statement  "		var runtime = typeof(HttpRuntime).InvokeMember ("_theRuntime"' BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.GetField' null' null' null) as HttpRuntime; " is 166.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,LogEnd,The length of the statement  "			var shutDownMessage = runtime.GetType ().InvokeMember ("_shutDownMessage"' BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.GetField' null' runtime' null) as string; " is 178.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,LogEnd,The length of the statement  "			var shutDownStack = runtime.GetType ().InvokeMember ("_shutDownStack"' BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.GetField' null' runtime' null) as string; " is 174.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,LogEnd,The length of the statement  "			Logger.Info ("Application shutting down. Reason: " + shutdownDetail + Environment.NewLine + "ASP.NET Shutdown Info: " + shutDownMessage + Environment.NewLine + shutDownStack); " is 175.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,ProcessHttpModule,The length of the statement  "	if (toLowerLocalPath.EndsWith ("webresource.axd") || toLowerLocalPath.EndsWith ("scriptresource.axd") || toLowerLocalPath.EndsWith ("captcha.aspx") || toLowerLocalPath.Contains ("upgradewizard.aspx") || toLowerLocalPath.Contains ("installwizard.aspx") || toLowerLocalPath.EndsWith ("install.aspx")) { " is 300.
Long Statement,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,ProcessHttpModule,The length of the statement  "	if (allowUnknownExtensions == false && toLowerLocalPath.EndsWith (".aspx") == false && toLowerLocalPath.EndsWith (".asmx") == false && toLowerLocalPath.EndsWith (".ashx") == false && toLowerLocalPath.EndsWith (".svc") == false) { " is 229.
Long Statement,DotNetNuke.Common,Requires,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Requires.cs,IsTypeOf,The length of the statement  "		throw new ArgumentException (Localization.GetExceptionMessage ("ValueMustBeOfType"' "The argument '{0}' must be of type '{1}'."' argName' typeof(T).FullName)); " is 159.
Long Statement,DotNetNuke.Common,Requires,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Requires.cs,NotNegative,The length of the statement  "		throw new ArgumentOutOfRangeException (argName' Localization.GetExceptionMessage ("ValueCannotBeNegative"' "The argument '{0}' cannot be negative."' argName)); " is 159.
Long Statement,DotNetNuke.Common,Requires,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Requires.cs,NotNullOrEmpty,The length of the statement  "		throw new ArgumentException (Localization.GetExceptionMessage ("ArgumentCannotBeNullOrEmpty"' "The argument '{0}' cannot be null or empty."' argName)' argName); " is 160.
Long Statement,DotNetNuke.Common,Requires,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Requires.cs,PropertyNotNegative,The length of the statement  "		throw new ArgumentOutOfRangeException (propertyName' Localization.GetExceptionMessage ("PropertyCannotBeNegative"' "The property '{1}' in object '{0}' cannot be negative."' typeof(T).Name' propertyName)); " is 204.
Long Statement,DotNetNuke.Common,Requires,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Requires.cs,PropertyNotNegative,The length of the statement  "		throw new ArgumentOutOfRangeException (argName' Localization.GetExceptionMessage ("PropertyCannotBeNegative"' "The property '{1}' in object '{0}' cannot be negative."' argName' argProperty)); " is 191.
Long Statement,DotNetNuke.Common,Requires,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Requires.cs,PropertyNotNullOrEmpty,The length of the statement  "		throw new ArgumentException (propertyName' Localization.GetExceptionMessage ("PropertyCannotBeNullOrEmpty"' "The property '{1}' in object '{0}' cannot be null or empty."' typeof(T).Name' propertyName)); " is 202.
Long Statement,DotNetNuke.Common,Requires,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Requires.cs,PropertyNotNullOrEmpty,The length of the statement  "		throw new ArgumentException (argName' Localization.GetExceptionMessage ("PropertyCannotBeNullOrEmpty"' "The property '{1}' in object '{0}' cannot be null or empty."' argName' argProperty)); " is 189.
Long Statement,DotNetNuke.Common,Requires,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Requires.cs,PropertyNotEqualTo,The length of the statement  "		throw new ArgumentException (argName' Localization.GetExceptionMessage ("PropertyNotEqualTo"' "The property '{1}' in object '{0}' is invalid."' argName' argProperty)); " is 167.
Long Statement,DotNetNuke.Entities.Content,AttachmentController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\AttachmentController.cs,GetFilesByContent,The length of the statement  "		throw new ApplicationException (string.Format ("ContentItem metadata has become corrupt (ID {0}): invalid file ID"' contentItemId)' ex); " is 136.
Long Statement,DotNetNuke.Entities.Content,ContentController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\ContentController.cs,GetContentItem,The length of the statement  "	return CBO.GetCachedObject<ContentItem> (new CacheItemArgs (GetContentItemCacheKey (contentItemId)' DataCache.ContentItemsCacheTimeOut' DataCache.ContentItemsCachePriority)' c => CBO.FillObject<ContentItem> (_dataService.GetContentItem (contentItemId))); " is 254.
Long Statement,DotNetNuke.Entities.Content,ContentController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\ContentController.cs,GetContentItemsByTerms,The length of the statement  "	union = terms.Aggregate (union' (current' term) => !current.Any () ? GetContentItemsByTerm (term).ToList () : current.Intersect (GetContentItemsByTerm (term)' new ContentItemEqualityComparer ()).ToList ()); " is 206.
Long Statement,DotNetNuke.Entities.Content,ContentController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\ContentController.cs,UpdateContentItemsCache,The length of the statement  "		CBO.GetCachedObject<ContentItem> (new CacheItemArgs (GetContentItemCacheKey (contentItem.ContentItemId)' DataCache.ContentItemsCacheTimeOut' DataCache.ContentItemsCachePriority)' c => contentItem); " is 197.
Long Statement,DotNetNuke.Entities.Content,ContentTypeController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\ContentTypeController.cs,GetContentTypes,The length of the statement  "	return CBO.GetCachedObject<List<ContentType>> (new CacheItemArgs (DataCache.ContentTypesCacheKey' DataCache.ContentTypesCacheTimeOut' DataCache.ContentTypesCachePriority)' c => CBO.FillQueryable<ContentType> (_DataService.GetContentTypes ()).ToList ()).AsQueryable (); " is 268.
Long Statement,DotNetNuke.Collections,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Collections\CollectionExtensions.cs,GetValueOrDefault,The length of the statement  "		Logger.ErrorFormat ("Error loading portal setting: {0} Default value {1} was used instead"' key + ":" + dictionary [key]' defaultValue.ToString ()); " is 148.
Long Statement,DotNetNuke.Collections,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Collections\CollectionExtensions.cs,ToLookup,The length of the statement  "	return collection.AllKeys.SelectMany (key => ParseValues (key' collection.GetValues (key)' splitValues)).ToLookup (pair => pair.Key' pair => pair.Value); " is 153.
Long Statement,DotNetNuke.Collections,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Collections\CollectionExtensions.cs,ConvertValue,The length of the statement  "	return converter (value == null ? null : formattable == null ? value.ToString () : formattable.ToString (null' CultureInfo.InvariantCulture)); " is 142.
Long Statement,DotNetNuke.Collections,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Collections\CollectionExtensions.cs,ParseValues,The length of the statement  "	return (splitSingleValue && values.Length == 1 ? values [0].Split (''') : values).Select (value => new KeyValuePair<string' string> (key' value)); " is 146.
Long Statement,DotNetNuke.Collections,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Collections\CollectionExtensions.cs,ToDictionary,The length of the statement  "	return node.CreateNavigator ().SelectChildren (XPathNodeType.Element).Cast<XPathNavigator> ().ToDictionary (n => n.Name' n => n.Value); " is 135.
Long Statement,DotNetNuke.Entities.Modules.Actions,ModuleActionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Actions\ModuleActionCollection.cs,Add,The length of the statement  "	return Add (ID' Title' CmdName' string.Empty' string.Empty' string.Empty' false' SecurityAccessLevel.Anonymous' true' false); " is 125.
Long Statement,DotNetNuke.Entities.Modules.Actions,ModuleActionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Actions\ModuleActionCollection.cs,Add,The length of the statement  "	var ModAction = new ModuleAction (ID' Title' CmdName' CmdArg' Icon' Url' ClientScript' UseActionEvent' Secure' Visible' NewWindow); " is 131.
Long Statement,DotNetNuke.Common.Internal,GlobalsImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Internal\GlobalsImpl.cs,GetDomainName,The length of the statement  "				if (url [queryIndex].ToLower ().LastIndexOf (".aspx"' StringComparison.Ordinal) == (url [queryIndex].Length - (".aspx".Length)) || url [queryIndex].ToLower ().LastIndexOf (".axd"' StringComparison.Ordinal) == (url [queryIndex].Length - (".axd".Length)) || url [queryIndex].ToLower ().LastIndexOf (".ashx"' StringComparison.Ordinal) == (url [queryIndex].Length - (".ashx".Length))) { " is 382.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,GetListInfoDictionary,The length of the statement  "	return CBO.GetCachedObject<Dictionary<string' ListInfo>> (new CacheItemArgs (cacheKey' DataCache.ListsCacheTimeOut' DataCache.ListsCachePriority)' c => FillListInfoDictionary (DataProvider.Instance ().GetLists (portalId))); " is 223.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,GetListEntries,The length of the statement  "	return CBO.GetCachedObject<IEnumerable<ListEntryInfo>> (new CacheItemArgs (cacheKey' DataCache.ListsCacheTimeOut' DataCache.ListsCachePriority)' c => CBO.FillCollection<ListEntryInfo> (DataProvider.Instance ().GetListEntriesByListName (listName' String.Empty' portalId))); " is 272.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,AddListEntry,The length of the statement  "	int entryId = DataProvider.Instance ().AddListEntry (listEntry.ListName' listEntry.Value' listEntry.TextNonLocalized' listEntry.ParentID' listEntry.Level' enableSortOrder' listEntry.DefinitionID' listEntry.Description' listEntry.PortalID' listEntry.SystemList' UserController.Instance.GetCurrentUserInfo ().UserID); " is 315.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,AddListEntry,The length of the statement  "		EventLogController.Instance.AddLog (listEntry' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.LISTENTRY_CREATED); " is 211.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,AddListEntry,The length of the statement  "	if (Thread.CurrentThread.CurrentCulture.Name != Localization.SystemLocale && !NonLocalizedLists.Contains (listEntry.ListName)) { " is 128.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,AddListEntry,The length of the statement  "			LocalizationProvider.Instance.SaveString (listEntry.Value + ".Text"' listEntry.TextNonLocalized' listEntry.ResourceFileRoot' Thread.CurrentThread.CurrentCulture.Name' PortalController.Instance.GetCurrentPortalSettings ()' LocalizationProvider.CustomizedLocale.None' true' true); " is 278.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,AddListEntry,The length of the statement  "			LocalizationProvider.Instance.SaveString (listEntry.ParentKey + "." + listEntry.Value + ".Text"' listEntry.TextNonLocalized' listEntry.ResourceFileRoot' Thread.CurrentThread.CurrentCulture.Name' PortalController.Instance.GetCurrentPortalSettings ()' LocalizationProvider.CustomizedLocale.None' true' true); " is 306.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,DeleteList,The length of the statement  "	EventLogController.Instance.AddLog ("ListName"' listName' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.LISTENTRY_DELETED); " is 218.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,GetListInfoCollection,The length of the statement  "	foreach (KeyValuePair<string' ListInfo> listPair in GetListInfoDictionary (portalId).OrderBy (l => l.Value.DisplayName)) { " is 122.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,GetListInfoCollection,The length of the statement  "		if ((list.Name == listName || string.IsNullOrEmpty (listName)) && (list.ParentKey == parentKey || string.IsNullOrEmpty (parentKey)) && (list.PortalID == portalId || portalId == Null.NullInteger)) { " is 197.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,UpdateListEntry,The length of the statement  "	if (Thread.CurrentThread.CurrentCulture.Name == Localization.SystemLocale || NonLocalizedLists.Contains (listEntry.ListName)) { " is 127.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,UpdateListEntry,The length of the statement  "		DataProvider.Instance ().UpdateListEntry (listEntry.EntryID' listEntry.Value' listEntry.TextNonLocalized' listEntry.Description' UserController.Instance.GetCurrentUserInfo ().UserID); " is 183.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,UpdateListEntry,The length of the statement  "		DataProvider.Instance ().UpdateListEntry (listEntry.EntryID' listEntry.Value' oldItem.TextNonLocalized' listEntry.Description' UserController.Instance.GetCurrentUserInfo ().UserID); " is 181.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,UpdateListEntry,The length of the statement  "		var key = string.IsNullOrEmpty (listEntry.ParentKey) ? listEntry.Value + ".Text" : listEntry.ParentKey + "." + listEntry.Value + ".Text"; " is 137.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,UpdateListEntry,The length of the statement  "		LocalizationProvider.Instance.SaveString (key' listEntry.TextNonLocalized' listEntry.ResourceFileRoot' Thread.CurrentThread.CurrentCulture.Name' PortalController.Instance.GetCurrentPortalSettings ()' LocalizationProvider.CustomizedLocale.None' true' true); " is 256.
Long Statement,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,UpdateListEntry,The length of the statement  "	EventLogController.Instance.AddLog (listEntry' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.LISTENTRY_UPDATED); " is 211.
Long Statement,DotNetNuke.Entities.Content.Taxonomy,ScopeTypeController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Taxonomy\ScopeTypeController.cs,GetScopeTypes,The length of the statement  "	return CBO.GetCachedObject<List<ScopeType>> (new CacheItemArgs (DataCache.ScopeTypesCacheKey' _CacheTimeOut)' GetScopeTypesCallBack).AsQueryable (); " is 148.
Long Statement,DotNetNuke.Entities.Content.Taxonomy,TermController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Taxonomy\TermController.cs,GetTermsByVocabulary,The length of the statement  "	return CBO.GetCachedObject<List<Term>> (new CacheItemArgs (string.Format (DataCache.TermCacheKey' vocabularyId)' _CacheTimeOut' _CachePriority' vocabularyId)' GetTermsCallBack).AsQueryable (); " is 192.
Long Statement,DotNetNuke.Entities.Content.Taxonomy,TermController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Taxonomy\TermController.cs,GetTermsByVocabulary,The length of the statement  "	Vocabulary vocabulary = (vocabularyController.GetVocabularies ().Cast<Vocabulary> ().Where (v => v.Name == vocabularyName)).SingleOrDefault (); " is 143.
Long Statement,DotNetNuke.Entities.Content.Taxonomy,VocabularyController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Taxonomy\VocabularyController.cs,AddVocabulary,The length of the statement  "	vocabulary.VocabularyId = _DataService.AddVocabulary (vocabulary' UserController.Instance.GetCurrentUserInfo ().UserID); " is 120.
Long Statement,DotNetNuke.Entities.Content.Taxonomy,VocabularyController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Taxonomy\VocabularyController.cs,GetVocabularies,The length of the statement  "	return CBO.GetCachedObject<List<Vocabulary>> (new CacheItemArgs (DataCache.VocabularyCacheKey' _CacheTimeOut)' GetVocabulariesCallBack).AsQueryable (); " is 151.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,CompleteState,The length of the statement  "		AddWorkflowLog (item' currentState.StateID == GetFirstWorkflowStateID (workflow) ? ContentWorkflowLogType.DraftCompleted : ContentWorkflowLogType.StateCompleted' userID); " is 170.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,CompleteState,The length of the statement  "		SendNotification (new PortalSettings (portalID)' workflow' item' currentState' subject' body' comment' endStateID' userID' source' parameters); " is 143.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,DiscardState,The length of the statement  "	if ((GetFirstWorkflowStateID (workflow) != currentState.StateID) && (GetLastWorkflowStateID (workflow) != currentState.StateID)) { " is 130.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,DiscardState,The length of the statement  "		SendNotification (new PortalSettings (portalID)' workflow' item' currentState' subject' body' comment' previousStateID' userID' null' null); " is 140.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,GetWorkflowLogs,The length of the statement  "	return CBO.FillCollection<ContentWorkflowLog> (DataProvider.Instance ().GetContentWorkflowLogs (contentItemId' workflowId)); " is 124.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,GetWorkflowStatePermissionByState,The length of the statement  "	return CBO.FillCollection<ContentWorkflowStatePermission> (DataProvider.Instance ().GetContentWorkflowStatePermissionsByStateID (stateID)); " is 139.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,AddWorkflowStatePermission,The length of the statement  "	DataProvider.Instance ().AddContentWorkflowStatePermission (permission.StateID' permission.PermissionID' permission.RoleID' permission.AllowAccess' permission.UserID' lastModifiedByUserID); " is 189.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,UpdateWorkflowStatePermission,The length of the statement  "	DataProvider.Instance ().UpdateContentWorkflowStatePermission (permission.WorkflowStatePermissionID' permission.StateID' permission.PermissionID' permission.RoleID' permission.AllowAccess' permission.UserID' lastModifiedByUserID); " is 230.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,AddWorkflowState,The length of the statement  "	var id = DataProvider.Instance ().AddContentWorkflowState (state.WorkflowID' state.StateName' state.Order' state.IsActive' state.SendEmail' state.SendMessage' state.IsDisposalState' state.OnCompleteMessageSubject' state.OnCompleteMessageBody' state.OnDiscardMessageSubject' state.OnDiscardMessageBody); " is 302.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,UpdateWorkflowState,The length of the statement  "	DataProvider.Instance ().UpdateContentWorkflowState (state.StateID' state.StateName' state.Order' state.IsActive' state.SendEmail' state.SendMessage' state.IsDisposalState' state.OnCompleteMessageSubject' state.OnCompleteMessageBody' state.OnDiscardMessageSubject' state.OnDiscardMessageBody); " is 293.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,AddWorkflow,The length of the statement  "	var id = DataProvider.Instance ().AddContentWorkflow (workflow.PortalID' workflow.WorkflowName' workflow.Description' workflow.IsDeleted' workflow.StartAfterCreating' workflow.StartAfterEditing' workflow.DispositionEnabled); " is 224.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,UpdateWorkflow,The length of the statement  "	DataProvider.Instance ().UpdateContentWorkflow (workflow.WorkflowID' workflow.WorkflowName' workflow.Description' workflow.IsDeleted' workflow.StartAfterCreating' workflow.StartAfterEditing' workflow.DispositionEnabled); " is 220.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,GetWorkflowSource,The length of the statement  "	return CBO.FillObject<ContentWorkflowSource> (DataProvider.Instance ().GetContentWorkflowSource (workflowId' sourceName)); " is 122.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,SendWorkflowNotification,The length of the statement  "	SendNotification (sendEmail' sendMessage' settings' roles' users' replacedSubject' replacedBody' comment' userID' null' null); " is 126.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,AddWorkflowCommentLog,The length of the statement  "	var logComment = ReplaceNotificationTokens (GetWorkflowActionComment (ContentWorkflowLogType.CommentProvided)' workflow' item' workflow.States.FirstOrDefault (s => s.StateID == item.StateID)' workflow.PortalID' userID' userComment); " is 232.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,AddWorkflowCommentLog,The length of the statement  "	AddWorkflowLog (workflow.WorkflowID' item' GetWorkflowActionText (ContentWorkflowLogType.CommentProvided)' logComment' userID); " is 127.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,SendNotification,The length of the statement  "	var replacedSubject = ReplaceNotificationTokens (subject' workflow' item' GetWorkflowStateByID (destinationStateID)' settings.PortalId' actionUserID); " is 150.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,SendNotification,The length of the statement  "	var replacedBody = ReplaceNotificationTokens (body' workflow' item' GetWorkflowStateByID (destinationStateID)' settings.PortalId' actionUserID); " is 144.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,SendNotification,The length of the statement  "	SendNotification (state.SendEmail' state.SendMessage' settings' roles' users' replacedSubject' replacedBody' comment' actionUserID' source' parameters); " is 152.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,SendMessageNotifications,The length of the statement  "		NotificationTypeID = NotificationsController.Instance.GetNotificationType (ContentWorkflowNotificationType).NotificationTypeId' " is 127.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,IsReviewer,The length of the statement  "	return user.IsSuperUser || PortalSecurity.IsInRoles (user' settings' administratorRoleName) || PortalSecurity.IsInRoles (user' settings' PermissionController.BuildPermissions (permissions.ToList ()' "REVIEW")); " is 210.
Long Statement,DotNetNuke.Entities.Content.Workflow,ContentWorkflowController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Obsolete\ContentWorkflowController.cs,AddWorkflowLog,The length of the statement  "	var comment = ReplaceNotificationTokens (GetWorkflowActionComment (logType)' workflow' item' workflow.States.FirstOrDefault (s => s.StateID == item.StateID)' workflow.PortalID' userID); " is 185.
Long Statement,DotNetNuke.Entities.Content.Workflow,SystemWorkflowManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\SystemWorkflowManager.cs,GetDirectPublishWorkflow,The length of the statement  "	return _workflowRepository.GetSystemWorkflows (portalId).SingleOrDefault (sw => sw.WorkflowKey == DirectPublishWorkflowKey); " is 124.
Long Statement,DotNetNuke.Entities.Content.Workflow,SystemWorkflowManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\SystemWorkflowManager.cs,GetSaveDraftWorkflow,The length of the statement  "	return _workflowRepository.GetSystemWorkflows (portalId).SingleOrDefault (sw => sw.WorkflowKey == SaveDraftWorkflowKey); " is 120.
Long Statement,DotNetNuke.Entities.Content.Workflow,SystemWorkflowManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\SystemWorkflowManager.cs,GetContentApprovalWorkflow,The length of the statement  "	return _workflowRepository.GetSystemWorkflows (portalId).SingleOrDefault (sw => sw.WorkflowKey == ContentAprovalWorkflowKey); " is 125.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,DeleteWorkflowNotifications,The length of the statement  "	var notificationTypeId = _notificationsController.GetNotificationType (ContentWorkflowNotificationType).NotificationTypeId; " is 123.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,DeleteWorkflowNotifications,The length of the statement  "	notificationTypeId = _notificationsController.GetNotificationType (ContentWorkflowNotificatioStartWorkflowType).NotificationTypeId; " is 131.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,SendNotificationToAuthor,The length of the statement  "			//Services.Exceptions.Exceptions.LogException(new WorkflowException(Localization.GetExceptionMessage("WorkflowAuthorNotFound"' "Author cannot be found. Notification won't be sent"))); " is 183.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,SendNotificationToAuthor,The length of the statement  "		var notification = GetNotification (GetWorkflowNotificationContext (contentItem' state)' stateTransaction' message' ContentWorkflowNotificationNoActionType); " is 157.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,SendNotificationToWorkflowStarter,The length of the statement  "		var notification = GetNotification (GetWorkflowNotificationContext (contentItem' workflow.FirstState)' stateTransaction' message' ContentWorkflowNotificatioStartWorkflowType); " is 175.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,SendNotificationsToReviewers,The length of the statement  "		var notification = GetNotification (GetWorkflowNotificationContext (contentItem' state)' stateTransaction' message' ContentWorkflowNotificationType); " is 149.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,SendNotificationsToReviewers,The length of the statement  "		_notificationsController.SendNotification (notification' portalSettings.PortalId' reviewers.Roles.ToList ()' reviewers.Users.ToList ()); " is 136.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,StartWorkflow,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetExceptionMessage ("WorkflowAlreadyStarted"' "Workflow cannot get started for this Content Item. It already has a started workflow.")); " is 195.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,StartWorkflow,The length of the statement  "	if (workflow.WorkflowID != _systemWorkflowManager.GetDirectPublishWorkflow (workflow.PortalID).WorkflowID)//This notification is not sent in Direct Publish WF " is 158.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,StartWorkflow,The length of the statement  "		SendNotificationToWorkflowStarter (initialTransaction' workflow' contentItem' userId' WorkflowActionTypes.StartWorkflow); " is 121.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,CompleteState,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetExceptionMessage ("WorkflowSystemWorkflowStateCannotComplete"' "System workflow state cannot be completed.")); " is 171.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,CompleteState,The length of the statement  "	if (!isFirstState && !_workflowSecurity.HasStateReviewerPermission (workflow.PortalID' stateTransaction.UserId' contentItem.StateID)) { " is 135.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,CompleteState,The length of the statement  "		throw new WorkflowSecurityException (Localization.GetExceptionMessage ("UserCannotReviewWorkflowState"' "User cannot review the workflow state")); " is 146.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,CompleteState,The length of the statement  "	AddWorkflowLog (contentItem' currentState' currentState.StateID == workflow.FirstState.StateID ? WorkflowLogType.DraftCompleted : WorkflowLogType.StateCompleted' stateTransaction.UserId); " is 187.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,CompleteState,The length of the statement  "	AddWorkflowLog (contentItem' nextState.StateID == workflow.LastState.StateID ? WorkflowLogType.WorkflowApproved : WorkflowLogType.StateInitiated' stateTransaction.UserId); " is 171.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,CompleteState,The length of the statement  "	SendNotificationsToReviewers (contentItem' nextState' stateTransaction' WorkflowActionTypes.CompleteState' new PortalSettings (workflow.PortalID)); " is 147.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,DiscardState,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetExceptionMessage ("WorkflowCannotDiscard"' "Cannot discard on last workflow state")); " is 146.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,DiscardState,The length of the statement  "	if (!isFirstState && !_workflowSecurity.HasStateReviewerPermission (workflow.PortalID' stateTransaction.UserId' contentItem.StateID)) { " is 135.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,DiscardState,The length of the statement  "		throw new WorkflowSecurityException (Localization.GetExceptionMessage ("UserCannotReviewWorkflowState"' "User cannot review the workflow state")); " is 146.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,DiscardState,The length of the statement  "		SendNotificationsToReviewers (contentItem' previousState' stateTransaction' WorkflowActionTypes.DiscardState' new PortalSettings (workflow.PortalID)); " is 150.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,DiscardWorkflow,The length of the statement  "	SendNotificationToAuthor (stateTransaction' workflow.LastState' workflow' contentItem' WorkflowActionTypes.DiscardWorkflow); " is 124.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowEngine.cs,CompleteWorkflow,The length of the statement  "	SendNotificationToAuthor (stateTransaction' workflow.LastState' workflow' contentItem' WorkflowActionTypes.CompleteWorkflow); " is 125.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,AddWorkflowState,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowNewStateCannotBeAddedToSystemWorkflows"' Localization.ExceptionsResourceFile)); " is 157.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,DeleteWorkflowState,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowSystemWorkflowStateCannotBeDeleted"' Localization.ExceptionsResourceFile)); " is 153.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,DeleteWorkflowState,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateInUsageException"' Localization.ExceptionsResourceFile)); " is 140.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,DeleteWorkflowState,The length of the statement  "		rep.Update ("SET [Order] = [Order] - 1 WHERE WorkflowID = @0 AND [Order] > @1"' stateToDelete.WorkflowID' stateToDelete.Order); " is 127.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,MoveWorkflowStateDown,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateCannotBeMoved"' Localization.ExceptionsResourceFile)); " is 137.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,MoveWorkflowStateDown,The length of the statement  "			throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateCannotBeMoved"' Localization.ExceptionsResourceFile)); " is 137.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,MoveWorkflowStateDown,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateCannotBeMoved"' Localization.ExceptionsResourceFile)); " is 137.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,MoveWorkflowStateUp,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateCannotBeMoved"' Localization.ExceptionsResourceFile)); " is 137.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,MoveWorkflowStateUp,The length of the statement  "			throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateCannotBeMoved"' Localization.ExceptionsResourceFile)); " is 137.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,MoveWorkflowStateUp,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateCannotBeMoved"' Localization.ExceptionsResourceFile)); " is 137.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,MoveState,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateCannotBeMoved"' Localization.ExceptionsResourceFile)); " is 137.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,MoveState,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateCannotBeMoved"' Localization.ExceptionsResourceFile)); " is 137.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowManager.cs,DeleteWorkflow,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetString ("SystemWorkflowDeletionException"' Localization.ExceptionsResourceFile)); " is 142.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowManager.cs,DeleteWorkflow,The length of the statement  "		throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowInUsageException"' Localization.ExceptionsResourceFile)); " is 135.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowSecurity.cs,HasStateReviewerPermission,The length of the statement  "	return user.IsSuperUser || PortalSecurity.IsInRoles (user' settings' settings.AdministratorRoleName) || PortalSecurity.IsInRoles (user' settings' PermissionController.BuildPermissions (permissions.ToList ()' ReviewPermissionKey)); " is 230.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowSecurity.cs,IsWorkflowReviewer,The length of the statement  "	return workflow.States.Any (contentWorkflowState => HasStateReviewerPermission (workflow.PortalID' userId' contentWorkflowState.StateID)); " is 138.
Long Statement,DotNetNuke.Entities.Content.Workflow,WorkflowSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowSecurity.cs,GetStateReviewPermission,The length of the statement  "	return (PermissionInfo)new PermissionController ().GetPermissionByCodeAndKey (ReviewPermissionCode' ReviewPermissionKey) [0]; " is 125.
Long Statement,DotNetNuke.Entities.Content.Workflow.Repositories,WorkflowRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Repositories\WorkflowRepository.cs,GetWorkflow,The length of the statement  "	return CBO.GetCachedObject<Entities.Workflow> (new CacheItemArgs (GetWorkflowItemKey (workflowId)' DataCache.WorkflowsCacheTimeout' DataCache.WorkflowsCachePriority)' _ => { " is 173.
Long Statement,DotNetNuke.Entities.Content.Workflow.Repositories,WorkflowRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Repositories\WorkflowRepository.cs,DoesExistWorkflow,The length of the statement  "	return rep.Find ("WHERE IsDeleted = 0 AND (PortalId = @0 OR PortalId IS NULL) AND WorkflowName = @1 AND WorkflowID != @2"' workflow.PortalID' workflow.WorkflowName' workflow.WorkflowID).SingleOrDefault () != null; " is 213.
Long Statement,DotNetNuke.Entities.Content.Workflow.Repositories,WorkflowRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Repositories\WorkflowRepository.cs,CacheWorkflow,The length of the statement  "		CBO.GetCachedObject<Entities.Workflow> (new CacheItemArgs (GetWorkflowItemKey (workflow.WorkflowID)' DataCache.WorkflowsCacheTimeout' DataCache.WorkflowsCachePriority)' _ => workflow); " is 184.
Long Statement,DotNetNuke.Entities.Content.Workflow.Repositories,WorkflowStatePermissionsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Repositories\WorkflowStatePermissionsRepository.cs,GetWorkflowStatePermissionByState,The length of the statement  "	return CBO.FillCollection<WorkflowStatePermission> (DataProvider.Instance ().GetContentWorkflowStatePermissionsByStateID (stateId)); " is 132.
Long Statement,DotNetNuke.Entities.Content.Workflow.Repositories,WorkflowStatePermissionsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Repositories\WorkflowStatePermissionsRepository.cs,AddWorkflowStatePermission,The length of the statement  "	DataProvider.Instance ().AddContentWorkflowStatePermission (permission.StateID' permission.PermissionID' permission.RoleID' permission.AllowAccess' permission.UserID' lastModifiedByUserId); " is 189.
Long Statement,DotNetNuke.Entities.Content.Workflow.Repositories,WorkflowStateRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Repositories\WorkflowStateRepository.cs,GetWorkflowStateByID,The length of the statement  "	return CBO.GetCachedObject<WorkflowState> (new CacheItemArgs (GetWorkflowStateKey (stateId)' DataCache.WorkflowsCacheTimeout' DataCache.WorkflowsCachePriority)' _ => { " is 167.
Long Statement,DotNetNuke.Entities.Content.Workflow.Repositories,WorkflowStateRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Repositories\WorkflowStateRepository.cs,DoesExistWorkflowState,The length of the statement  "	return rep.Find ("WHERE StateName = @0 AND WorkflowID = @1 AND StateId != @2"' state.StateName' state.WorkflowID' state.StateID).SingleOrDefault () != null; " is 156.
Long Statement,DotNetNuke.Entities.Content.Workflow.Repositories,WorkflowStateRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\Repositories\WorkflowStateRepository.cs,CacheWorkflowState,The length of the statement  "		CBO.GetCachedObject<WorkflowState> (new CacheItemArgs (GetWorkflowStateKey (state.StateID)' DataCache.WorkflowsCacheTimeout' DataCache.WorkflowsCachePriority)' _ => state); " is 172.
Long Statement,DotNetNuke.Entities.Host,IPFilterController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\IPFilter\IPFilterController.cs,AddIPFilter,The length of the statement  "	int id = DataProvider.Instance ().AddIPFilter (ipFilter.IPAddress' ipFilter.SubnetMask' ipFilter.RuleType' UserController.Instance.GetCurrentUserInfo ().UserID); " is 161.
Long Statement,DotNetNuke.Entities.Host,IPFilterController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\IPFilter\IPFilterController.cs,UpdateIPFilter,The length of the statement  "	DataProvider.Instance ().UpdateIPFilter (ipFilter.IPFilterID' ipFilter.IPAddress' ipFilter.SubnetMask' ipFilter.RuleType' UserController.Instance.GetCurrentUserInfo ().UserID); " is 176.
Long Statement,DotNetNuke.Entities.Host,IPFilterController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\IPFilter\IPFilterController.cs,CheckIfBannedIPAddress,The length of the statement  "			if (ipFilterInfo.IPAddress == "*" || NetworkUtils.IsIPInRange (ipAddress' ipFilterInfo.IPAddress' ipFilterInfo.SubnetMask)) { " is 125.
Long Statement,DotNetNuke.Entities.Host,Host,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\Host.cs,GetHostSettingsDictionary,The length of the statement  "		DataCache.SetCache (DataCache.UnSecureHostSettingsCacheKey' dicSettings' objDependency' Cache.NoAbsoluteExpiration' TimeSpan.FromMinutes (DataCache.HostSettingsCacheTimeOut)' DataCache.HostSettingsCachePriority' null); " is 218.
Long Statement,DotNetNuke.Entities.Host,Host,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\Host.cs,GetSecureHostSettingsDictionary,The length of the statement  "		DataCache.SetCache (DataCache.SecureHostSettingsCacheKey' dicSettings' objDependency' Cache.NoAbsoluteExpiration' TimeSpan.FromMinutes (DataCache.HostSettingsCacheTimeOut)' DataCache.HostSettingsCachePriority' null); " is 216.
Long Statement,DotNetNuke.Entities.Host,ServerController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\ServerController.cs,GetServers,The length of the statement  "	var servers = CBO.GetCachedObject<List<ServerInfo>> (new CacheItemArgs (cacheKey' cacheTimeout' cachePriority)' GetServersCallBack); " is 132.
Long Statement,DotNetNuke.Entities.Host,ServerController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\ServerController.cs,UpdateServer,The length of the statement  "	DataProvider.Instance ().UpdateServer (server.ServerID' server.Url' server.UniqueId' server.Enabled' server.ServerGroup); " is 121.
Long Statement,DotNetNuke.Entities.Host,ServerController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\ServerController.cs,UpdateServerActivity,The length of the statement  "	var existServer = GetServers ().FirstOrDefault (s => s.ServerName == server.ServerName && s.IISAppName == server.IISAppName); " is 125.
Long Statement,DotNetNuke.Entities.Host,ServerController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\ServerController.cs,UpdateServerActivity,The length of the statement  "	var serverId = DataProvider.Instance ().UpdateServerActivity (server.ServerName' server.IISAppName' server.CreatedDate' server.LastActivityDate' server.PingFailureCount' server.Enabled); " is 186.
Long Statement,DotNetNuke.Entities.Host,ServerController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\ServerController.cs,UpdateServerActivity,The length of the statement  "	if (existServer == null || string.IsNullOrEmpty (existServer.Url) || (string.IsNullOrEmpty (existServer.UniqueId) && !string.IsNullOrEmpty (GetServerUniqueId ()))) { " is 165.
Long Statement,DotNetNuke.Entities.Host,ServerController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\ServerController.cs,UpdateServerActivity,The length of the statement  "		server.UniqueId = existServer == null || string.IsNullOrEmpty (existServer.UniqueId) ? GetServerUniqueId () : existServer.UniqueId; " is 131.
Long Statement,DotNetNuke.Entities.Host,ServerController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\ServerController.cs,UpdateServerActivity,The length of the statement  "	log.LogTypeKey = existServer != null ? EventLogController.EventLogType.WEBSERVER_UPDATED.ToString () : EventLogController.EventLogType.WEBSERVER_CREATED.ToString (); " is 165.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,FillPropertyDefinitionInfo,The length of the statement  "		definition.PropertyDefinitionId = Convert.ToInt32 (Null.SetNull (dr ["PropertyDefinitionId"]' definition.PropertyDefinitionId)); " is 128.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,FillPropertyDefinitionInfo,The length of the statement  "		definition.ValidationExpression = Convert.ToString (Null.SetNull (dr ["ValidationExpression"]' definition.ValidationExpression)); " is 129.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,FillPropertyDefinitionInfo,The length of the statement  "		definition.DefaultVisibility = (UserVisibilityMode)Convert.ToInt32 (Null.SetNull (dr ["DefaultVisibility"]' definition.DefaultVisibility)); " is 139.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The length of the statement  "	AddDefaultDefinition (portalId' "Preferences"' "Biography"' "Multi-line Text"' 0' UserVisibilityMode.AdminOnly' dataTypes); " is 123.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The length of the statement  "	AddDefaultDefinition (portalId' "Preferences"' "PreferredTimeZone"' "TimeZoneInfo"' 0' UserVisibilityMode.AdminOnly' dataTypes); " is 128.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The length of the statement  "	AddDefaultDefinition (portalId' "Preferences"' "PreferredLocale"' "Locale"' 0' UserVisibilityMode.AdminOnly' dataTypes); " is 120.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddPropertyDefinition,The length of the statement  "	int intDefinition = _dataProvider.AddPropertyDefinition (portalId' definition.ModuleDefId' definition.DataType' definition.DefaultValue' definition.PropertyCategory' definition.PropertyName' definition.ReadOnly' definition.Required' definition.ValidationExpression' definition.ViewOrder' definition.Visible' definition.Length' (int)definition.DefaultVisibility' UserController.Instance.GetCurrentUserInfo ().UserID); " is 416.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddPropertyDefinition,The length of the statement  "	EventLogController.Instance.AddLog (definition' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.PROFILEPROPERTY_CREATED); " is 218.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,DeletePropertyDefinition,The length of the statement  "	EventLogController.Instance.AddLog (definition' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.PROFILEPROPERTY_DELETED); " is 218.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,UpdatePropertyDefinition,The length of the statement  "	_dataProvider.UpdatePropertyDefinition (definition.PropertyDefinitionId' definition.DataType' definition.DefaultValue' definition.PropertyCategory' definition.PropertyName' definition.ReadOnly' definition.Required' definition.ValidationExpression' definition.ViewOrder' definition.Visible' definition.Length' (int)definition.DefaultVisibility' UserController.Instance.GetCurrentUserInfo ().UserID); " is 398.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,UpdatePropertyDefinition,The length of the statement  "	EventLogController.Instance.AddLog (definition' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.PROFILEPROPERTY_UPDATED); " is 218.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,RemoveUnsafeAttributes,The length of the statement  "	var tagMatches = Regex.Matches (cleanContent' @"(<[^>]*?) on.*?\=(['""]?)[\s\S]*?(\2 )([^>]*?>)"' RegexOptions.IgnoreCase); " is 123.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,RemoveUnsafeAttributes,The length of the statement  "		var cleanTagContent = Regex.Replace (tagContent' @"on.*?\=(['""]?)[\s\S]*?(\1 )"' string.Empty' RegexOptions.IgnoreCase); " is 121.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,ValidateProfile,The length of the statement  "		if (propertyDefinition.Required && string.IsNullOrEmpty (propertyDefinition.PropertyValue) && propertyDefinition.DataType != imageType.EntryID) { " is 145.
Long Statement,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,SearchProfilePropertyValues,The length of the statement  "	using (IDataReader ir = Data.DataProvider.Instance ().SearchProfilePropertyValues (portalId' propertyName' searchString)) { " is 123.
Long Statement,DotNetNuke.Entities.Tabs,TabChangeTracker,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabChangeTracker.cs,TrackModuleModification,The length of the statement  "		throw new InvalidOperationException (Localization.GetExceptionMessage ("ModuleDoesNotBelongToPage"' "This module does not belong to the page. Please' move to its master page to change the module")); " is 198.
Long Statement,DotNetNuke.Entities.Tabs,TabModulesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabModulesController.cs,GetTabModuleSettingsByName,The length of the statement  "	var cachedItems = CBO.GetCachedObject<Dictionary<int' string>> (new CacheItemArgs (cacheKey' DataCache.TabModuleCacheTimeOut' DataCache.TabModuleCachePriority)' c => { " is 167.
Long Statement,DotNetNuke.Entities.Tabs,TabModulesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabModulesController.cs,GetTabModuleIdsBySetting,The length of the statement  "	using (var dr = dataProvider.GetTabModuleIdsBySettingNameAndValue (PortalSettings.Current.PortalId' settingName' expectedValue)) { " is 130.
Long Statement,DotNetNuke.Entities.Tabs,TabWorkflowSettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabWorkflowSettings.cs,GetDefaultTabWorkflowId,The length of the statement  "			PortalController.UpdatePortalSetting (portalId' DefaultTabWorkflowKey' workflowId.ToString (CultureInfo.InvariantCulture)' true); " is 129.
Long Statement,DotNetNuke.Entities.Tabs,TabWorkflowSettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabWorkflowSettings.cs,SetDefaultTabWorkflowId,The length of the statement  "	PortalController.UpdatePortalSetting (portalId' DefaultTabWorkflowKey' workflowId.ToString (CultureInfo.InvariantCulture)' true); " is 129.
Long Statement,DotNetNuke.Entities.Tabs,TabWorkflowSettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabWorkflowSettings.cs,SetWorkflowEnabled,The length of the statement  "	PortalController.UpdatePortalSetting (portalId' TabWorkflowEnableKey' enabled.ToString (CultureInfo.InvariantCulture)' true); " is 125.
Long Statement,DotNetNuke.Entities.Tabs,TabWorkflowSettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabWorkflowSettings.cs,IsWorkflowEnabled,The length of the statement  "	return !_tabController.IsHostOrAdminPage (tabInfo) && (settings [TabWorkflowEnableKey] == null || Convert.ToBoolean (settings [TabWorkflowEnableKey])); " is 151.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,CopyDesignToChildren,The length of the statement  "		_dataProvider.UpdateTab (tab.TabID' tab.ContentItemId' tab.PortalID' tab.VersionGuid' tab.DefaultLanguageGuid' tab.LocalizedVersionGuid' tab.TabName' tab.IsVisible' tab.DisableLink' tab.ParentId' tab.IconFileRaw' tab.IconFileLargeRaw' tab.Title' tab.Description' tab.KeyWords' tab.IsDeleted' tab.Url' skinSrc' containerSrc' tab.StartDate' tab.EndDate' tab.RefreshInterval' tab.PageHeadText' tab.IsSecure' tab.PermanentRedirect' tab.SiteMapPriority' UserController.Instance.GetCurrentUserInfo ().UserID' tab.CultureCode' tab.IsSystem); " is 534.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,CopyDesignToChildren,The length of the statement  "		EventLogController.Instance.AddLog (tab' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.TAB_UPDATED); " is 199.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTab,The length of the statement  "	return DeserializeTab (nodeTab' null' new Hashtable ()' portalId' false' PortalTemplateModuleAction.Ignore' new Hashtable ()); " is 126.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTab,The length of the statement  "	return DeserializeTab (tabNode' tab' new Hashtable ()' portalId' false' PortalTemplateModuleAction.Ignore' new Hashtable ()); " is 125.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetCultureTabList,The length of the statement  "	where !kvp.Value.TabPath.StartsWith ("//Admin") && kvp.Value.CultureCode == PortalController.Instance.GetCurrentPortalSettings ().DefaultLanguage && !kvp.Value.IsDeleted " is 169.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,UpdateTabOrder,The length of the statement  "	_dataProvider.UpdateTabOrder (objTab.TabID' objTab.TabOrder' objTab.ParentId' UserController.Instance.GetCurrentUserInfo ().UserID); " is 132.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,UpdateTabOrder,The length of the statement  "	EventLogController.Instance.AddLog (objTab' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.TAB_ORDER_UPDATED); " is 208.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,AddAllTabsModules,The length of the statement  "		var canAdd = (from ModuleInfo allTabsInstance in ModuleController.Instance.GetTabModulesByModule (allTabsModule.ModuleID) " is 121.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,AddAllTabsModules,The length of the statement  "		select Instance.GetTab (allTabsInstance.TabID' tab.PortalID' false)).Any (t => !t.IsDeleted) && (!portalSettings.ContentLocalizationEnabled || allTabsModule.CultureCode == tab.CultureCode); " is 189.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,AddTabInternal,The length of the statement  "		tab.TabID = beforeTabId > 0 ? _dataProvider.AddTabBefore (tab' beforeTabId' UserController.Instance.GetCurrentUserInfo ().UserID) : _dataProvider.AddTabToEnd (tab' UserController.Instance.GetCurrentUserInfo ().UserID); " is 218.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,AddTabInternal,The length of the statement  "	EventLogController.Instance.AddLog (tab' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.TAB_CREATED); " is 199.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,CreateLocalizedCopyInternal,The length of the statement  "		Logger.TraceFormat ("Localizing TabId: {0}' TabPath: {1}' Locale: {2}"' originalTab.TabID' originalTab.TabPath' locale.Code); " is 125.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTabPermissions,The length of the statement  "			bool canAdd = !tab.TabPermissions.Cast<TabPermissionInfo> ().Any (tp => tp.TabID == tabPermission.TabID && tp.PermissionID == tabPermission.PermissionID && tp.RoleID == tabPermission.RoleID && tp.UserID == tabPermission.UserID); " is 228.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTabUrls,The length of the statement  "	objTabUrl.Url = String.IsNullOrEmpty (XmlUtils.GetAttributeValue (nodeTabUrl.CreateNavigator ()' "Url")) ? "/" : XmlUtils.GetAttributeValue (nodeTabUrl.CreateNavigator ()' "Url"); " is 179.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTabUrls,The length of the statement  "	objTabUrl.HttpStatus = String.IsNullOrEmpty (XmlUtils.GetAttributeValue (nodeTabUrl.CreateNavigator ()' "HttpStatus")) ? "200" : XmlUtils.GetAttributeValue (nodeTabUrl.CreateNavigator ()' "HttpStatus"); " is 202.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetAliasSkins,The length of the statement  "	return CBO.GetCachedObject<Dictionary<int' List<TabAliasSkinInfo>>> (new CacheItemArgs (cacheKey' DataCache.TabAliasSkinCacheTimeOut' DataCache.TabAliasSkinCachePriority' portalId)' GetAliasSkinsCallback); " is 205.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetCustomAliases,The length of the statement  "	return CBO.GetCachedObject<Dictionary<int' Dictionary<string' string>>> (new CacheItemArgs (cacheKey' DataCache.TabCustomAliasCacheTimeOut' DataCache.TabCustomAliasCachePriority' portalId)' GetCustomAliasesCallback); " is 216.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTabSettingsByPortal,The length of the statement  "	return CBO.GetCachedObject<Dictionary<int' Hashtable>> (new CacheItemArgs (cacheKey' DataCache.TabCacheTimeOut' DataCache.TabCachePriority)' c => { " is 147.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTabUrls,The length of the statement  "	return CBO.GetCachedObject<Dictionary<int' List<TabUrlInfo>>> (new CacheItemArgs (cacheKey' DataCache.TabUrlCacheTimeOut' DataCache.TabUrlCachePriority' portalId)' GetTabUrlsCallback); " is 184.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,HardDeleteTabInternal,The length of the statement  "	EventLogController.Instance.AddLog ("TabID"' tabId.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.TAB_DELETED); " is 218.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,SoftDeleteTabInternal,The length of the statement  "			EventLogController.Instance.AddLog (tabToDelete' portalSettings' portalSettings.UserId' ""' EventLogController.EventLogType.TAB_SENT_TO_RECYCLE_BIN); " is 149.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,SoftDeleteTabInternal,The length of the statement  "		TabVersionSettings.Instance.SetEnabledVersioningForTab (tabToDelete.TabID' changeControlStateForTab.IsVersioningEnabledForTab); " is 127.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,SoftDeleteTabInternal,The length of the statement  "		TabWorkflowSettings.Instance.SetWorkflowEnabled (tabToDelete.PortalID' tabToDelete.TabID' changeControlStateForTab.IsWorkflowEnabledForTab); " is 140.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,UpdateTabSettingInternal,The length of the statement  "				_dataProvider.UpdateTabSetting (tabId' settingName' settingValue' UserController.Instance.GetCurrentUserInfo ().UserID); " is 120.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,UpdateTabSettingInternal,The length of the statement  "				EventLogController.AddSettingLog (EventLogController.EventLogType.TAB_SETTING_UPDATED' "TabId"' tabId' settingName' settingValue' UserController.Instance.GetCurrentUserInfo ().UserID); " is 184.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,UpdateTabSettingInternal,The length of the statement  "			_dataProvider.UpdateTabSetting (tabId' settingName' settingValue' UserController.Instance.GetCurrentUserInfo ().UserID); " is 120.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,UpdateTabSettingInternal,The length of the statement  "			EventLogController.AddSettingLog (EventLogController.EventLogType.TAB_SETTING_CREATED' "TabId"' tabId' settingName' settingValue' UserController.Instance.GetCurrentUserInfo ().UserID); " is 184.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,ValidateTabPath,The length of the statement  "		throw new TabExistsException (tabId' string.Format ("Page Exists in portal: {0}' path: {1}' culture: {2}"' tab.PortalID' tab.TabPath' tab.CultureCode)); " is 152.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,AddMissingLanguages,The length of the statement  "				foreach (var localizedTab in workingTab.LocalizedTabs.Values.Where (localizedTab => localizedTab.CultureCode == locale.Code)) { " is 127.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeleteTabUrl,The length of the statement  "	EventLogController.Instance.AddLog ("tabUrl.TabId"' tabUrl.TabId.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.TABURL_DELETED); " is 235.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTab,The length of the statement  "		tab = GetTabsByPortal (portalId).WithTabId (tabId) ?? GetTabsByPortal (GetPortalId (tabId' Null.NullInteger)).WithTabId (tabId); " is 128.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTabsByPortal,The length of the statement  "	return CBO.GetCachedObject<TabCollection> (new CacheItemArgs (cacheKey' DataCache.TabCacheTimeOut' DataCache.TabCachePriority)' c => { " is 134.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GiveTranslatorRoleEditRights,The length of the statement  "	string translatorRoles = PortalController.GetPortalSetting (string.Format ("DefaultTranslatorRoles-{0}"' localizedTab.CultureCode)' localizedTab.PortalID' ""); " is 159.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GiveTranslatorRoleEditRights,The length of the statement  "				TabPermissionInfo perm = localizedTab.TabPermissions.Where (tp => tp.RoleID == role.RoleID && tp.PermissionKey == "EDIT").SingleOrDefault (); " is 141.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,HasMissingLanguages,The length of the statement  "	var localizedCount = 1 + locales.Values.Where (locale => !LocaleController.Instance.IsDefaultLanguage (locale.Code)).Count (locale => workingTab.LocalizedTabs.Values.Any (localizedTab => localizedTab.CultureCode == locale.Code)); " is 229.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,IsTabPublished,The length of the statement  "		foreach (TabPermissionInfo perm in publishTab.DefaultLanguageTab.TabPermissions.Where (p => p.PermissionKey == "VIEW")) { " is 121.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,IsTabPublished,The length of the statement  "			TabPermissionInfo targetPerm = publishTab.TabPermissions.Where (p => p.PermissionKey == sourcePerm.PermissionKey && p.RoleID == sourcePerm.RoleID && p.UserID == sourcePerm.UserID).SingleOrDefault (); " is 199.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,PublishTab,The length of the statement  "		foreach (TabPermissionInfo perm in publishTab.DefaultLanguageTab.TabPermissions.Where (p => p.PermissionKey == "VIEW")) { " is 121.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,PublishTab,The length of the statement  "			TabPermissionInfo targetPerm = publishTab.TabPermissions.Where (p => p.PermissionKey == sourcePerm.PermissionKey && p.RoleID == sourcePerm.RoleID && p.UserID == sourcePerm.UserID).SingleOrDefault (); " is 199.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,RestoreTab,The length of the statement  "	EventLogController.Instance.AddLog (tab' portalSettings' portalSettings.UserId' ""' EventLogController.EventLogType.TAB_RESTORED); " is 130.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,SaveTabUrl,The length of the statement  "	var portalAliasId = (tabUrl.PortalAliasUsage == PortalAliasUsageType.Default) ? Null.NullInteger : tabUrl.PortalAliasId; " is 120.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,SaveTabUrl,The length of the statement  "	DataProvider.Instance ().SaveTabUrl (tabUrl.TabId' tabUrl.SeqNum' portalAliasId' (int)tabUrl.PortalAliasUsage' tabUrl.Url' tabUrl.QueryString' tabUrl.CultureCode' tabUrl.HttpStatus' tabUrl.IsSystem' UserController.Instance.GetCurrentUserInfo ().UserID); " is 253.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,SaveTabUrl,The length of the statement  "	EventLogController.Instance.AddLog ("tabUrl"' tabUrl.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' saveLog); " is 184.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,SoftDeleteTab,The length of the statement  "		if (tab.DefaultLanguageTab != null && LocaleController.Instance.GetLocales (portalSettings.PortalId).ContainsKey (tab.CultureCode)) { " is 133.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,UpdateTab,The length of the statement  "	_dataProvider.UpdateTab (updatedTab.TabID' updatedTab.ContentItemId' updatedTab.PortalID' updatedTab.VersionGuid' updatedTab.DefaultLanguageGuid' updatedTab.LocalizedVersionGuid' updatedTab.TabName' updatedTab.IsVisible' updatedTab.DisableLink' updatedTab.ParentId' updatedTab.IconFileRaw' updatedTab.IconFileLargeRaw' updatedTab.Title' updatedTab.Description' updatedTab.KeyWords' updatedTab.IsDeleted' updatedTab.Url' updatedTab.SkinSrc' updatedTab.ContainerSrc' updatedTab.StartDate' updatedTab.EndDate' updatedTab.RefreshInterval' updatedTab.PageHeadText' updatedTab.IsSecure' updatedTab.PermanentRedirect' updatedTab.SiteMapPriority' UserController.Instance.GetCurrentUserInfo ().UserID' updatedTab.CultureCode' updatedTab.IsSystem); " is 738.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,UpdateTab,The length of the statement  "	EventLogController.Instance.AddLog (updatedTab' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.TAB_UPDATED); " is 206.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,UpdateTranslationStatus,The length of the statement  "	DataProvider.Instance ().UpdateTabTranslationStatus (localizedTab.TabID' localizedTab.LocalizedVersionGuid' UserController.Instance.GetCurrentUserInfo ().UserID); " is 162.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,CopyDesignToChildren,The length of the statement  "			DataProvider.Instance ().UpdateTab (tab.TabID' tab.ContentItemId' tab.PortalID' tab.VersionGuid' tab.DefaultLanguageGuid' tab.LocalizedVersionGuid' tab.TabName' tab.IsVisible' tab.DisableLink' tab.ParentId' tab.IconFileRaw' tab.IconFileLargeRaw' tab.Title' tab.Description' tab.KeyWords' tab.IsDeleted' tab.Url' skinSrc' containerSrc' tab.StartDate' tab.EndDate' tab.RefreshInterval' tab.PageHeadText' tab.IsSecure' tab.PermanentRedirect' tab.SiteMapPriority' UserController.Instance.GetCurrentUserInfo ().UserID' tab.CultureCode' tab.IsSystem); " is 545.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,CopyDesignToChildren,The length of the statement  "			EventLogController.Instance.AddLog (tab' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.TAB_UPDATED); " is 199.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTab,The length of the statement  "				int defaultLanguageTabId = Convert.ToInt32 (tabs [XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "defaultLanguageTab")]); " is 125.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTab,The length of the statement  "				TabInfo defaultLanguageTab = Instance.GetTabByName (XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "defaultLanguageTab")' portalId); " is 136.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTab,The length of the statement  "			DataProvider.Instance ().SaveTabUrl (tab.TabID' tabUrl.SeqNum' tabUrl.PortalAliasId' (int)tabUrl.PortalAliasUsage' tabUrl.Url' tabUrl.QueryString' tabUrl.CultureCode' tabUrl.HttpStatus' tabUrl.IsSystem' UserController.Instance.GetCurrentUserInfo ().UserID); " is 257.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetPortalTabs,The length of the statement  "	return GetPortalTabs (GetTabsBySortOrder (portalId' PortalController.GetActivePortalLanguage (portalId)' true)' excludeTabId' includeNoneSpecified' "<" + Localization.GetString ("None_Specified") + ">"' includeHidden' false' false' false' false); " is 246.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetPortalTabs,The length of the statement  "	return GetPortalTabs (GetTabsBySortOrder (portalId' PortalController.GetActivePortalLanguage (portalId)' true)' excludeTabId' includeNoneSpecified' "<" + Localization.GetString ("None_Specified") + ">"' includeHidden' includeDeleted' includeURL' false' false); " is 260.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetPortalTabs,The length of the statement  "	return GetPortalTabs (GetTabsBySortOrder (portalId' PortalController.GetActivePortalLanguage (portalId)' true)' excludeTabId' includeNoneSpecified' noneSpecifiedText' includeHidden' includeDeleted' includeURL' checkViewPermisison' checkEditPermission); " is 252.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetPortalTabs,The length of the statement  "			if ((tab.IsVisible || includeHidden) && tab.HasAVisibleVersion && (tab.IsDeleted == false || includeDeleted) && (tab.TabType == TabType.Normal || includeURL)) { " is 160.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTabPathDictionary,The length of the statement  "	return CBO.GetCachedObject<Dictionary<string' int>> (new CacheItemArgs (cacheKey' DataCache.TabPathCacheTimeOut' DataCache.TabPathCachePriority' cultureCode' portalId)' GetTabPathDictionaryCallback); " is 199.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,IsSpecialTab,The length of the statement  "	return tabId == portalSettings.SplashTabId || tabId == portalSettings.HomeTabId || tabId == portalSettings.LoginTabId || tabId == portalSettings.UserTabId || tabId == portalSettings.AdminTabId || tabId == portalSettings.SuperTabId; " is 231.
Long Statement,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,IsValidTabName,The length of the statement  "		if (!string.IsNullOrEmpty (doNotRewriteRegex) && (Regex.IsMatch (cleanTabName' doNotRewriteRegex' RegexOptions.IgnoreCase) || Regex.IsMatch ("/" + cleanTabName' doNotRewriteRegex' RegexOptions.IgnoreCase) || Regex.IsMatch ("/" + cleanTabName + "/"' doNotRewriteRegex' RegexOptions.IgnoreCase))) { " is 296.
Long Statement,DotNetNuke.Entities.Tabs,TabExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabExtensions.cs,ContainsAlias,The length of the statement  "	return aliases.Any (tas => System.String.Compare (httpAlias' tas.HttpAlias' System.StringComparison.OrdinalIgnoreCase) == 0); " is 125.
Long Statement,DotNetNuke.Entities.Tabs,TabExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabExtensions.cs,FindByHttpAlias,The length of the statement  "	return aliases.FirstOrDefault (tas => System.String.Compare (httpAlias' tas.HttpAlias' System.StringComparison.OrdinalIgnoreCase) == 0); " is 136.
Long Statement,DotNetNuke.Entities.Tabs,TabPublishingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabPublishingController.cs,SetTabPublishing,The length of the statement  "		var errorMessage = Localization.GetExceptionMessage ("PublishPagePermissionsNotMet"' "Permissions are not met. The page has not been published."); " is 146.
Long Statement,DotNetNuke.Entities.Tabs,TabPublishingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabPublishingController.cs,UnpublishTabInternal,The length of the statement  "	permissionsToRemove.AddRange (tab.TabPermissions.Where (p => p.RoleID != administratorsRoleID).Select (p => p.TabPermissionID)); " is 128.
Long Statement,DotNetNuke.Entities.Tabs,TabPublishingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabPublishingController.cs,UnpublishTabInternal,The length of the statement  "		tab.TabPermissions.Remove (tab.TabPermissions.Cast<TabPermissionInfo> ().SingleOrDefault (p => p.TabPermissionID == tabPermissionId)); " is 134.
Long Statement,DotNetNuke.Entities.Tabs,TabPublishingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabPublishingController.cs,GetAlreadyPermission,The length of the statement  "	var permission = PermissionController.GetPermissionsByTab ().Cast<PermissionInfo> ().SingleOrDefault<PermissionInfo> (p => p.PermissionKey == permissionKey); " is 157.
Long Statement,DotNetNuke.Entities.Tabs,TabPublishingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabPublishingController.cs,GetAlreadyPermission,The length of the statement  "	return tab.TabPermissions.Cast<TabPermissionInfo> ().FirstOrDefault (tp => tp.RoleID == roleId && tp.PermissionID == permission.PermissionID); " is 142.
Long Statement,DotNetNuke.Entities.Tabs,TabPublishingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabPublishingController.cs,GetTabPermissionByRole,The length of the statement  "	var permission = PermissionController.GetPermissionsByTab ().Cast<PermissionInfo> ().SingleOrDefault<PermissionInfo> (p => p.PermissionKey == permissionKey); " is 157.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionController.cs,GetTabVersions,The length of the statement  "	return CBO.GetCachedObject<List<TabVersion>> (new CacheItemArgs (tabCacheKey' DataCache.TabVersionsCacheTimeOut' DataCache.TabVersionsCachePriority)' c => CBO.FillCollection<TabVersion> (Provider.GetTabVersions (tabId))); " is 221.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionController.cs,SaveTabVersion,The length of the statement  "	tabVersion.TabVersionId = Provider.SaveTabVersion (tabVersion.TabVersionId' tabVersion.TabId' tabVersion.TimeStamp' tabVersion.Version' tabVersion.IsPublished' createdByUserID' modifiedByUserID); " is 195.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionController.cs,CreateTabVersion,The length of the statement  "			throw new InvalidOperationException (String.Format (Localization.GetString ("TabVersionCannotBeCreated_UnpublishedVersionAlreadyExists"' Localization.ExceptionsResourceFile))); " is 176.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionController.cs,CreateTabVersion,The length of the statement  "	var tabVersionId = Provider.SaveTabVersion (0' tabId' DateTime.UtcNow' newVersion' isPublished' createdByUserID' createdByUserID); " is 130.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionDetailController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionDetailController.cs,GetTabVersionDetail,The length of the statement  "	return GetTabVersionDetails (tabVersionId' ignoreCache).SingleOrDefault (tvd => tvd.TabVersionDetailId == tabVersionDetailId); " is 126.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionDetailController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionDetailController.cs,GetTabVersionDetails,The length of the statement  "	return CBO.GetCachedObject<List<TabVersionDetail>> (new CacheItemArgs (GetTabVersionDetailCacheKey (tabVersionId)' DataCache.TabVersionDetailsCacheTimeOut' DataCache.TabVersionDetailsCachePriority)' c => CBO.FillCollection<TabVersionDetail> (Provider.GetTabVersionDetails (tabVersionId))); " is 289.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionDetailController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionDetailController.cs,SaveTabVersionDetail,The length of the statement  "	tabVersionDetail.TabVersionDetailId = Provider.SaveTabVersionDetail (tabVersionDetail.TabVersionDetailId' tabVersionDetail.TabVersionId' tabVersionDetail.ModuleId' tabVersionDetail.ModuleVersion' tabVersionDetail.PaneName' tabVersionDetail.ModuleOrder' (int)tabVersionDetail.Action' createdByUserID' modifiedByUserID); " is 318.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,SetupFirstVersionForExistingTab,The length of the statement  "	var modules = _moduleController.GetTabModules (tabId).Where (m => m.Value.IsDeleted == false).Select (m => m.Value).ToArray (); " is 127.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,Publish,The length of the statement  "		throw new InvalidOperationException (String.Format (Localization.GetString ("TabHasNotAnUnpublishedVersion"' Localization.ExceptionsResourceFile)' tabId)); " is 155.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,Publish,The length of the statement  "		throw new InvalidOperationException (String.Format (Localization.GetString ("TabVersionAlreadyPublished"' Localization.ExceptionsResourceFile)' tabId' tabVersion.Version)); " is 172.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,Discard,The length of the statement  "		throw new InvalidOperationException (String.Format (Localization.GetString ("TabHasNotAnUnpublishedVersion"' Localization.ExceptionsResourceFile)' tabId)); " is 155.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,Discard,The length of the statement  "		throw new InvalidOperationException (String.Format (Localization.GetString ("TabVersionAlreadyPublished"' Localization.ExceptionsResourceFile)' tabId' tabVersion.Version)); " is 172.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,RollBackVesion,The length of the statement  "		throw new InvalidOperationException (String.Format (Localization.GetString ("TabVersionCannotBeRolledBack_UnpublishedVersionExists"' Localization.ExceptionsResourceFile)' tabId' version)); " is 188.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,RollBackVesion,The length of the statement  "	var lastTabVersion = _tabVersionController.GetTabVersions (tabId).OrderByDescending (tv => tv.Version).FirstOrDefault (); " is 121.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,RollBackVesion,The length of the statement  "		throw new InvalidOperationException (String.Format (Localization.GetString ("TabVersionCannotBeRolledBack_LastVersion"' Localization.ExceptionsResourceFile)' tabId' version)); " is 175.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,RollBackVesion,The length of the statement  "			Logger.Error (string.Format ("There was a problem making rollbak of the module {0}. Message: {1}."' rollbackDetail.ModuleId' e.Message)); " is 137.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,RollBackVesion,The length of the statement  "	foreach (var publishedDetail in publishedDetails.Where (publishedDetail => rollbackDetails.All (tvd => tvd.ModuleId != publishedDetail.ModuleId))) { " is 148.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,CreateNewVersion,The length of the statement  "		throw new InvalidOperationException (Localization.GetString ("TabVersioningNotEnabled"' Localization.ExceptionsResourceFile)); " is 126.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,CreateNewVersion,The length of the statement  "		throw new InvalidOperationException (String.Format (Localization.GetString ("TabVersionCannotBeCreated_UnpublishedVersionAlreadyExistsConcurrencyProblem"' Localization.ExceptionsResourceFile)' tabId)' e); " is 204.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,CreateNewVersion,The length of the statement  "		throw new InvalidOperationException (String.Format (Localization.GetString ("TabVersionCannotBeCreated_UnpublishedVersionAlreadyExistsConcurrencyProblem"' Localization.ExceptionsResourceFile)' tabId)); " is 201.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,GetCurrentVersion,The length of the statement  "	return _tabVersionController.GetTabVersions (tabId' ignoreCache).Where (tv => tv.IsPublished).OrderByDescending (tv => tv.CreatedOnDate).FirstOrDefault (); " is 155.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,GetCurrentModules,The length of the statement  "	return CBO.GetCachedObject<IEnumerable<ModuleInfo>> (new CacheItemArgs (cacheKey' DataCache.PublishedTabModuleCacheTimeOut' DataCache.PublishedTabModuleCachePriority)' c => GetCurrentModulesInternal (tabId)); " is 208.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,GetCurrentModulesInternal,The length of the statement  "	var versioningEnabled = _portalSettings != null && _tabVersionSettings.IsVersioningEnabled (_portalSettings.PortalId' tabId); " is 125.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,DiscardDetailWithPublishedTabVersions,The length of the statement  "		if (publishDetail.PaneName != unPublishedDetail.PaneName || publishDetail.ModuleOrder != unPublishedDetail.ModuleOrder) { " is 121.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,ForceDeleteVersion,The length of the statement  "		throw new InvalidOperationException (String.Format (Localization.GetString ("TabVersionCannotBeDeleted_UnpublishedVersion"' Localization.ExceptionsResourceFile)' tabId' version)); " is 179.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,ForceDeleteVersion,The length of the statement  "		throw new InvalidOperationException (String.Format (Localization.GetString ("TabVersionCannotBeDiscarded_OnlyOneVersion"' Localization.ExceptionsResourceFile)' tabId' version)); " is 177.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,ForceDeleteVersion,The length of the statement  "					var peviousVersionDetail = previousVersionDetails.SingleOrDefault (tv => tv.ModuleId == versionToDeleteDetail.ModuleId); " is 120.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,ForceDeleteVersion,The length of the statement  "					if (peviousVersionDetail != null && (peviousVersionDetail.PaneName != versionToDeleteDetail.PaneName || peviousVersionDetail.ModuleOrder != versionToDeleteDetail.ModuleOrder)) { " is 177.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,ForceDeleteVersion,The length of the statement  "						_moduleController.UpdateModuleOrder (tabId' peviousVersionDetail.ModuleId' peviousVersionDetail.ModuleOrder' peviousVersionDetail.PaneName); " is 140.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,CheckVersioningEnabled,The length of the statement  "		throw new InvalidOperationException (Localization.GetString ("TabVersioningNotEnabled"' Localization.ExceptionsResourceFile)); " is 126.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,CreateSnapshotOverVersion,The length of the statement  "	var existingTabVersionDetails = _tabVersionDetailController.GetTabVersionDetails (snapshotTabVersion.TabVersionId).ToArray (); " is 126.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,CreateSnapshotOverVersion,The length of the statement  "			IEnumerable<TabVersionDetail> deletedTabVersionDetails = _tabVersionDetailController.GetTabVersionDetails (deletedTabVersion.TabVersionId); " is 139.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,CreateSnapshotOverVersion,The length of the statement  "			var moduleAddedAndDeleted = deletedTabVersionDetails.Any (deleteDetail => deleteDetail.ModuleId == existingDetail.ModuleId && deleteDetail.Action == TabVersionDetailAction.Added); " is 179.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,UpdateDeletedTabDetails,The length of the statement  "	var tabVersionDetailsToBeUpdated = deletedTabVersion != null ? _tabVersionDetailController.GetTabVersionDetails (deletedTabVersion.TabVersionId).ToArray () : snapShotTabVersionDetails; " is 184.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,UpdateDeletedTabDetails,The length of the statement  "		var detailInSnapshot = snapShotTabVersionDetails.Any (snapshotDetail => snapshotDetail.TabVersionDetailId == tabVersionDetail.TabVersionDetailId); " is 146.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,UpdateDeletedTabDetails,The length of the statement  "		var deleteOrResetAction = tabVersionDetail.Action == TabVersionDetailAction.Deleted || tabVersionDetail.Action == TabVersionDetailAction.Reset; " is 143.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,DeleteOldVersions,The length of the statement  "			_tabVersionDetailController.DeleteTabVersionDetail (oldVersionDetail.TabVersionId' oldVersionDetail.TabVersionDetailId); " is 120.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,GetSnapShot,The length of the statement  "				versionModules [tabVersionDetail.ModuleId] = JoinVersionDetails (versionModules [tabVersionDetail.ModuleId]' tabVersionDetail); " is 127.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionSettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionSettings.cs,GetMaxNumberOfVersions,The length of the statement  "	return portalId == Null.NullInteger ? TabVersionsMaxNumber : PortalController.GetPortalSettingAsInteger ("TabVersionsMaxNumber"' portalId' TabVersionsMaxNumber); " is 161.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionSettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionSettings.cs,SetMaxNumberOfVersions,The length of the statement  "	PortalController.UpdatePortalSetting (portalId' "TabVersionsMaxNumber"' maxNumberOfVersions.ToString (CultureInfo.InvariantCulture)); " is 133.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionSettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionSettings.cs,SetEnabledVersioningForTab,The length of the statement  "	TabController.Instance.UpdateTabSetting (tabId' TabVersioningSettingKey' enabled.ToString (CultureInfo.InvariantCulture)); " is 122.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionSettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionSettings.cs,IsVersioningEnabled,The length of the statement  "	var isVersioningEnableForTab = settings [TabVersioningSettingKey] == null || Convert.ToBoolean (settings [TabVersioningSettingKey]); " is 132.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionTracker,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionTracker.cs,TrackModuleModification,The length of the statement  "		var tabVersionDetail = CreateNewTabVersionDetailObjectFromModule (unPublishedVersion.TabVersionId' module.ModuleID' module.PaneName' module.ModuleOrder' moduleVersion' TabVersionDetailAction.Modified); " is 201.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionTracker,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionTracker.cs,TrackModuleModification,The length of the statement  "		var existingTabVersionDetail = TabVersionDetailController.Instance.GetTabVersionDetails (unPublishedVersion.TabVersionId).SingleOrDefault (tvd => tvd.ModuleId == module.ModuleID); " is 179.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionTracker,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionTracker.cs,TrackModuleCopy,The length of the statement  "		var targetVersion = TabVersionBuilder.Instance.GetUnPublishedVersion (module.TabID) ?? TabVersionBuilder.Instance.GetCurrentVersion (module.TabID); " is 147.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionTracker,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionTracker.cs,TrackModuleUncopy,The length of the statement  "		var targetVersion = TabVersionBuilder.Instance.GetUnPublishedVersion (module.TabID) ?? TabVersionBuilder.Instance.GetCurrentVersion (module.TabID); " is 147.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionTracker,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionTracker.cs,ProcessAdditionDetail,The length of the statement  "	var existingTabDetails = TabVersionDetailController.Instance.GetTabVersionDetails (targetVersion.TabVersionId).Where (tvd => tvd.ModuleId == module.ModuleID); " is 158.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionTracker,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionTracker.cs,ProcessAdditionDetail,The length of the statement  "		TabVersionDetailController.Instance.DeleteTabVersionDetail (existingTabDetail.TabVersionId' existingTabDetail.TabVersionDetailId); " is 130.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionTracker,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionTracker.cs,ProcessAdditionDetail,The length of the statement  "	var tabVersionDetail = CreateNewTabVersionDetailObjectFromModule (targetVersion.TabVersionId' module' moduleVersion' TabVersionDetailAction.Added); " is 147.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionTracker,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionTracker.cs,ProcessDeletionDetail,The length of the statement  "	var existingTabDetail = TabVersionDetailController.Instance.GetTabVersionDetails (targetVersion.TabVersionId).SingleOrDefault (tvd => tvd.ModuleId == module.ModuleID); " is 167.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionTracker,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionTracker.cs,ProcessDeletionDetail,The length of the statement  "		TabVersionDetailController.Instance.DeleteTabVersionDetail (existingTabDetail.TabVersionId' existingTabDetail.TabVersionDetailId); " is 130.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionTracker,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionTracker.cs,ProcessDeletionDetail,The length of the statement  "		var tabVersionDetail = CreateNewTabVersionDetailObjectFromModule (targetVersion.TabVersionId' module' moduleVersion' TabVersionDetailAction.Deleted); " is 149.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionTracker,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionTracker.cs,GetOrCreateUnPublishedTabVersion,The length of the statement  "	return unPublishedVersion == null ? TabVersionBuilder.Instance.CreateNewVersion (portalId' tabId' createdByUserId) : TabVersionController.Instance.GetTabVersions (tabId).SingleOrDefault (tv => !tv.IsPublished); " is 210.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionUtils.cs,CanSeeVersionedPages,The length of the statement  "	var isAdminUser = currentPortalSettings.UserInfo.IsSuperUser || PortalSecurity.IsInRole (currentPortalSettings.AdministratorRoleName); " is 134.
Long Statement,DotNetNuke.Entities.Tabs.TabVersions,TabVersionUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionUtils.cs,GetTabVersionQueryStringValue,The length of the statement  "	return currentPortal == null ? string.Empty : HttpContext.Current.Request.QueryString [TabVersionSettings.Instance.GetTabVersionQueryStringParameter (currentPortal.PortalId)]; " is 175.
Long Statement,DotNetNuke.Entities.Portals.Internal,PortalTemplateIO,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\Internal\PortalTemplateIO.cs,OpenTextReader,The length of the statement  "	var retryable = new RetryableAction (() => reader = new StreamReader (File.Open (filePath' FileMode.Open))' filePath' 10' TimeSpan.FromMilliseconds (50)' 2); " is 157.
Long Statement,DotNetNuke.Entities.Users.Internal,TestableUserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TestableUserController.cs,GetUsersAdvancedSearch,The length of the statement  "	return UserController.Instance.GetUsersAdvancedSearch (portalId' userId' filterUserId' filterRoleId' relationTypeId' isAdmin' pageIndex' pageSize' sortColumn' sortAscending' propertyNames' propertyValues); " is 205.
Long Statement,DotNetNuke.Entities.Users.Internal,TestableUserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TestableUserController.cs,GetUsersBasicSearch,The length of the statement  "	return UserController.Instance.GetUsersBasicSearch (portalId' pageIndex' pageSize' sortColumn' sortAscending' propertyName' propertyValue); " is 139.
Long Statement,DotNetNuke.Security.Permissions,FolderPermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\FolderPermissionController.cs,AddFolderPermission,The length of the statement  "	return DataProvider.Instance ().AddFolderPermission (objFolderPermission.FolderID' objFolderPermission.PermissionID' objFolderPermission.RoleID' objFolderPermission.AllowAccess' objFolderPermission.UserID' UserController.Instance.GetCurrentUserInfo ().UserID); " is 260.
Long Statement,DotNetNuke.Security.Permissions,FolderPermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\FolderPermissionController.cs,GetFolderPermissionsByFolder,The length of the statement  "	return CBO.FillCollection (DataProvider.Instance ().GetFolderPermissionsByFolderPath (PortalID' Folder' -1)' typeof(FolderPermissionInfo)); " is 139.
Long Statement,DotNetNuke.Security.Permissions,FolderPermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\FolderPermissionController.cs,UpdateFolderPermission,The length of the statement  "	DataProvider.Instance ().UpdateFolderPermission (objFolderPermission.FolderPermissionID' objFolderPermission.FolderID' objFolderPermission.PermissionID' objFolderPermission.RoleID' objFolderPermission.AllowAccess' objFolderPermission.UserID' UserController.Instance.GetCurrentUserInfo ().UserID); " is 296.
Long Statement,DotNetNuke.Security.Permissions,CompareDesktopModulePermissions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\CompareDesktopModulePermissions.cs,Compare,The length of the statement  "	return ((DesktopModulePermissionInfo)x).DesktopModulePermissionID.CompareTo (((DesktopModulePermissionInfo)y).DesktopModulePermissionID); " is 137.
Long Statement,DotNetNuke.Security.Permissions,DesktopModulePermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\DesktopModulePermissionCollection.cs,Add,The length of the statement  "			if (permission.PermissionID == value.PermissionID && permission.UserID == value.UserID && permission.RoleID == value.RoleID) { " is 126.
Long Statement,DotNetNuke.Security.Permissions,DesktopModulePermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\DesktopModulePermissionCollection.cs,CompareTo,The length of the statement  "		if (objDesktopModulePermissionCollection [i].DesktopModulePermissionID != this [i].DesktopModulePermissionID || objDesktopModulePermissionCollection [i].AllowAccess != this [i].AllowAccess) { " is 191.
Long Statement,DotNetNuke.Security.Permissions,DesktopModulePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\DesktopModulePermissionController.cs,AddDesktopModulePermission,The length of the statement  "	int Id = DataProvider.Instance ().AddDesktopModulePermission (objDesktopModulePermission.PortalDesktopModuleID' objDesktopModulePermission.PermissionID' objDesktopModulePermission.RoleID' objDesktopModulePermission.AllowAccess' objDesktopModulePermission.UserID' UserController.Instance.GetCurrentUserInfo ().UserID); " is 317.
Long Statement,DotNetNuke.Security.Permissions,DesktopModulePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\DesktopModulePermissionController.cs,AddDesktopModulePermission,The length of the statement  "	EventLogController.Instance.AddLog (objDesktopModulePermission' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.DESKTOPMODULEPERMISSION_CREATED); " is 242.
Long Statement,DotNetNuke.Security.Permissions,DesktopModulePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\DesktopModulePermissionController.cs,DeleteDesktopModulePermission,The length of the statement  "	EventLogController.Instance.AddLog ("DesktopModulePermissionID"' DesktopModulePermissionID.ToString (CultureInfo.InvariantCulture)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.DESKTOPMODULEPERMISSION_DELETED); " is 306.
Long Statement,DotNetNuke.Security.Permissions,DesktopModulePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\DesktopModulePermissionController.cs,DeleteDesktopModulePermissionsByPortalDesktopModuleID,The length of the statement  "	EventLogController.Instance.AddLog ("PortalDesktopModuleID"' portalDesktopModuleID.ToString (CultureInfo.InvariantCulture)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.DESKTOPMODULE_DELETED); " is 288.
Long Statement,DotNetNuke.Security.Permissions,DesktopModulePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\DesktopModulePermissionController.cs,DeleteDesktopModulePermissionsByUserID,The length of the statement  "	EventLogController.Instance.AddLog ("UserID"' objUser.UserID.ToString (CultureInfo.InvariantCulture)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.DESKTOPMODULE_DELETED); " is 266.
Long Statement,DotNetNuke.Security.Permissions,DesktopModulePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\DesktopModulePermissionController.cs,UpdateDesktopModulePermission,The length of the statement  "	DataProvider.Instance ().UpdateDesktopModulePermission (objDesktopModulePermission.DesktopModulePermissionID' objDesktopModulePermission.PortalDesktopModuleID' objDesktopModulePermission.PermissionID' objDesktopModulePermission.RoleID' objDesktopModulePermission.AllowAccess' objDesktopModulePermission.UserID' UserController.Instance.GetCurrentUserInfo ().UserID); " is 365.
Long Statement,DotNetNuke.Security.Permissions,DesktopModulePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\DesktopModulePermissionController.cs,UpdateDesktopModulePermission,The length of the statement  "	EventLogController.Instance.AddLog (objDesktopModulePermission' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.DESKTOPMODULEPERMISSION_UPDATED); " is 242.
Long Statement,DotNetNuke.Security.Permissions,DesktopModulePermissionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\DesktopModulePermissionInfo.cs,Equals,The length of the statement  "	return (AllowAccess == other.AllowAccess) && (PortalDesktopModuleID == other.PortalDesktopModuleID) && (RoleID == other.RoleID) && (PermissionID == other.PermissionID); " is 168.
Long Statement,DotNetNuke.Security.Permissions,FolderPermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\FolderPermissionCollection.cs,Add,The length of the statement  "			if (permission.PermissionID == value.PermissionID && permission.UserID == value.UserID && permission.RoleID == value.RoleID) { " is 126.
Long Statement,DotNetNuke.Security.Permissions,FolderPermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\FolderPermissionCollection.cs,Contains,The length of the statement  "		if (permission.PermissionKey == key && permission.FolderID == folderId && permission.RoleID == roleId && permission.UserID == userId) { " is 135.
Long Statement,DotNetNuke.Security.Permissions,FolderPermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\FolderPermissionCollection.cs,CompareTo,The length of the statement  "		if (objFolderPermissionCollection [i].FolderPermissionID != this [i].FolderPermissionID || objFolderPermissionCollection [i].AllowAccess != this [i].AllowAccess) { " is 163.
Long Statement,DotNetNuke.Security.Permissions,ModulePermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\ModulePermissionCollection.cs,Add,The length of the statement  "			if (permission.PermissionID == value.PermissionID && permission.UserID == value.UserID && permission.RoleID == value.RoleID) { " is 126.
Long Statement,DotNetNuke.Security.Permissions,ModulePermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\ModulePermissionCollection.cs,CompareTo,The length of the statement  "		if (objModulePermissionCollection [i].ModulePermissionID != this [i].ModulePermissionID || objModulePermissionCollection [i].AllowAccess != this [i].AllowAccess) { " is 163.
Long Statement,DotNetNuke.Security.Permissions,ModulePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\ModulePermissionController.cs,AddModulePermission,The length of the statement  "	int id = DataProvider.Instance ().AddModulePermission (modulePermission.ModuleID' portal.PortalId' modulePermission.PermissionID' modulePermission.RoleID' modulePermission.AllowAccess' modulePermission.UserID' UserController.Instance.GetCurrentUserInfo ().UserID); " is 264.
Long Statement,DotNetNuke.Security.Permissions,ModulePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\ModulePermissionController.cs,AddModulePermission,The length of the statement  "	int id = DataProvider.Instance ().AddModulePermission (modulePermission.ModuleID' portal.PortalId' modulePermission.PermissionID' modulePermission.RoleID' modulePermission.AllowAccess' modulePermission.UserID' UserController.Instance.GetCurrentUserInfo ().UserID); " is 264.
Long Statement,DotNetNuke.Security.Permissions,ModulePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\ModulePermissionController.cs,GetModulePermissionsByPortal,The length of the statement  "	return CBO.FillCollection (DataProvider.Instance ().GetModulePermissionsByPortal (portalID)' typeof(ModulePermissionInfo)); " is 123.
Long Statement,DotNetNuke.Security.Permissions,ModulePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\ModulePermissionController.cs,GetModulePermissionsCollectionByModuleID,The length of the statement  "	return new ModulePermissionCollection (CBO.FillCollection (DataProvider.Instance ().GetModulePermissionsByModuleID (moduleID' -1)' typeof(ModulePermissionInfo))); " is 162.
Long Statement,DotNetNuke.Security.Permissions,ModulePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\ModulePermissionController.cs,HasModulePermission,The length of the statement  "	var objModulePermissions = new ModulePermissionCollection (CBO.FillCollection (DataProvider.Instance ().GetModulePermissionsByModuleID (moduleID' -1)' typeof(ModulePermissionInfo))); " is 182.
Long Statement,DotNetNuke.Security.Permissions,ModulePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\ModulePermissionController.cs,UpdateModulePermission,The length of the statement  "	DataProvider.Instance ().UpdateModulePermission (modulePermission.ModulePermissionID' portal.PortalId' modulePermission.ModuleID' modulePermission.PermissionID' modulePermission.RoleID' modulePermission.AllowAccess' modulePermission.UserID' UserController.Instance.GetCurrentUserInfo ().UserID); " is 295.
Long Statement,DotNetNuke.Security.Permissions,ModulePermissionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\ModulePermissionInfo.cs,Equals,The length of the statement  "	return (AllowAccess == other.AllowAccess) && (ModuleID == other.ModuleID) && (RoleID == other.RoleID) && (PermissionID == other.PermissionID); " is 142.
Long Statement,DotNetNuke.Security.Permissions,PermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionController.cs,GetPermissions,The length of the statement  "	return CBO.GetCachedObject<IEnumerable<PermissionInfo>> (new CacheItemArgs (DataCache.PermissionsCacheKey' DataCache.PermissionsCacheTimeout' DataCache.PermissionsCachePriority)' c => CBO.FillCollection<PermissionInfo> (provider.ExecuteReader ("GetPermissions"))); " is 264.
Long Statement,DotNetNuke.Security.Permissions,PermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionController.cs,AddPermission,The length of the statement  "	EventLogController.Instance.AddLog (permission' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.PERMISSION_CREATED); " is 213.
Long Statement,DotNetNuke.Security.Permissions,PermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionController.cs,AddPermission,The length of the statement  "	var permissionId = Convert.ToInt32 (provider.AddPermission (permission.PermissionCode' permission.ModuleDefID' permission.PermissionKey' permission.PermissionName' UserController.Instance.GetCurrentUserInfo ().UserID)); " is 219.
Long Statement,DotNetNuke.Security.Permissions,PermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionController.cs,DeletePermission,The length of the statement  "	EventLogController.Instance.AddLog ("PermissionID"' permissionID.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.PERMISSION_DELETED); " is 239.
Long Statement,DotNetNuke.Security.Permissions,PermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionController.cs,GetPermissionByCodeAndKey,The length of the statement  "	return new ArrayList (GetPermissions ().Where (p => p.PermissionCode.Equals (permissionCode' StringComparison.InvariantCultureIgnoreCase) && p.PermissionKey.Equals (permissionKey' StringComparison.InvariantCultureIgnoreCase)).ToArray ()); " is 238.
Long Statement,DotNetNuke.Security.Permissions,PermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionController.cs,GetPermissionsByModule,The length of the statement  "	return new ArrayList (GetPermissions ().Where (p => p.ModuleDefID == module.ModuleDefID || p.PermissionCode == "SYSTEM_MODULE_DEFINITION").ToArray ()); " is 151.
Long Statement,DotNetNuke.Security.Permissions,PermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionController.cs,UpdatePermission,The length of the statement  "	EventLogController.Instance.AddLog (permission' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.PERMISSION_UPDATED); " is 213.
Long Statement,DotNetNuke.Security.Permissions,PermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionController.cs,UpdatePermission,The length of the statement  "	provider.UpdatePermission (permission.PermissionID' permission.PermissionCode' permission.ModuleDefID' permission.PermissionKey' permission.PermissionName' UserController.Instance.GetCurrentUserInfo ().UserID); " is 210.
Long Statement,DotNetNuke.Security.Permissions,PermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionController.cs,BuildPermissions,The length of the statement  "			//build permissions string ensuring that Deny permissions are inserted at the beginning and Grant permissions at the end " is 120.
Long Statement,DotNetNuke.Security.Permissions,PermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionController.cs,RemapPermission,The length of the statement  "	PermissionInfo permissionInfo = GetPermissionByCodeAndKey (permission.PermissionCode' permission.PermissionKey).ToArray ().Cast<PermissionInfo> ().FirstOrDefault (); " is 165.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,GetModulePermissions,The length of the statement  "	return CBO.GetCachedObject<Dictionary<int' ModulePermissionCollection>> (new CacheItemArgs (cacheKey' DataCache.ModulePermissionCacheTimeOut' DataCache.ModulePermissionCachePriority' tabID)' GetModulePermissionsCallBack); " is 221.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,GetTabPermissions,The length of the statement  "	return CBO.GetCachedObject<Dictionary<int' TabPermissionCollection>> (new CacheItemArgs (cacheKey' DataCache.TabPermissionCacheTimeOut' DataCache.TabPermissionCachePriority' portalID)' GetTabPermissionsCallBack); " is 212.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,HasFolderPermission,The length of the statement  "	return (PortalSecurity.IsInRoles (folder.FolderPermissions.ToString (permissionKey)) || PortalSecurity.IsInRoles (folder.FolderPermissions.ToString (AdminFolderPermissionKey))) && !PortalSecurity.IsDenied (folder.FolderPermissions.ToString (permissionKey)); " is 257.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,HasPagePermission,The length of the statement  "	return (PortalSecurity.IsInRoles (tab.TabPermissions.ToString (permissionKey)) || PortalSecurity.IsInRoles (tab.TabPermissions.ToString (AdminPagePermissionKey))) && !PortalSecurity.IsDenied (tab.TabPermissions.ToString (permissionKey)); " is 237.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,GetDesktopModulePermissions,The length of the statement  "	return CBO.GetCachedObject<Dictionary<int' DesktopModulePermissionCollection>> (new CacheItemArgs (DataCache.DesktopModulePermissionCacheKey' DataCache.DesktopModulePermissionCachePriority)' GetDesktopModulePermissionsCallBack); " is 228.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,HasModulePermission,The length of the statement  "	return CanViewModule (moduleConfiguration) && (HasModulePermission (moduleConfiguration.ModulePermissions' permissionKey) || HasModulePermission (moduleConfiguration.ModulePermissions' "EDIT")); " is 194.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,IsDeniedModulePermission,The length of the statement  "	return IsDeniedModulePermission (moduleConfiguration.ModulePermissions' "VIEW") || IsDeniedModulePermission (moduleConfiguration.ModulePermissions' permissionKey) || IsDeniedModulePermission (moduleConfiguration.ModulePermissions' "EDIT"); " is 239.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,IsDeniedTabPermission,The length of the statement  "	return IsDeniedTabPermission (tab.TabPermissions' "VIEW") || IsDeniedTabPermission (tab.TabPermissions' permissionKey) || IsDeniedTabPermission (tab.TabPermissions' "EDIT"); " is 173.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,CanBrowseFolder,The length of the statement  "	return (PortalSecurity.IsInRoles (folder.FolderPermissions.ToString (BrowseFolderPermissionKey)) || PortalSecurity.IsInRoles (folder.FolderPermissions.ToString (ViewFolderPermissionKey))) && !PortalSecurity.IsDenied (folder.FolderPermissions.ToString (BrowseFolderPermissionKey)); " is 280.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,GetFolderPermissionsCollectionByFolder,The length of the statement  "	return CBO.GetCachedObject<FolderPermissionCollection> (new CacheItemArgs (cacheKey' DataCache.FolderPermissionCacheTimeOut' DataCache.FolderPermissionCachePriority) { " is 167.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,SaveFolderPermissions,The length of the statement  "			if (folderPermission.PermissionKey != "BROWSE" && folderPermission.PermissionKey != "READ" && folderPermission.AllowAccess) { " is 125.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,SaveFolderPermissions,The length of the statement  "			dataProvider.AddFolderPermission (folder.FolderID' folderPermission.PermissionID' folderPermission.RoleID' folderPermission.AllowAccess' folderPermission.UserID' UserController.Instance.GetCurrentUserInfo ().UserID); " is 216.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,HasModuleAccess,The length of the statement  "			if (!((moduleConfiguration.IsShared && moduleConfiguration.IsShareableViewOnly) && TabPermissionController.CanAddContentToPage (tab))) { " is 136.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,HasModuleAccess,The length of the statement  "			if (!((moduleConfiguration.IsShared && moduleConfiguration.IsShareableViewOnly) && TabPermissionController.CanAddContentToPage (tab))) { " is 136.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,SaveModulePermissions,The length of the statement  "		ModulePermissionCollection modulePermissions = ModulePermissionController.GetModulePermissions (module.ModuleID' module.TabID); " is 127.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,SaveModulePermissions,The length of the statement  "					dataProvider.AddModulePermission (module.ModuleID' module.PortalID' modulePermission.PermissionID' modulePermission.RoleID' modulePermission.AllowAccess' modulePermission.UserID' UserController.Instance.GetCurrentUserInfo ().UserID); " is 233.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,SaveTabPermissions,The length of the statement  "			EventLogController.Instance.AddLog (tab' portalSettings' userId' ""' EventLogController.EventLogType.TABPERMISSION_DELETED); " is 124.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,SaveTabPermissions,The length of the statement  "				objTabPermission.TabPermissionID = dataProvider.AddTabPermission (tab.TabID' objTabPermission.PermissionID' objTabPermission.RoleID' objTabPermission.AllowAccess' objTabPermission.UserID' userId); " is 196.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,SaveTabPermissions,The length of the statement  "			EventLogController.Instance.AddLog (tab' portalSettings' userId' ""' EventLogController.EventLogType.TABPERMISSION_CREATED); " is 124.
Long Statement,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,GetDesktopModulePermission,The length of the statement  "	return CBO.FillObject<DesktopModulePermissionInfo> (DataProvider.Instance ().GetDesktopModulePermission (desktopModulePermissionId)); " is 133.
Long Statement,DotNetNuke.Security.Permissions,TabPermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\TabPermissionCollection.cs,Add,The length of the statement  "			if (permission.PermissionID == value.PermissionID && permission.UserID == value.UserID && permission.RoleID == value.RoleID) { " is 126.
Long Statement,DotNetNuke.Security.Permissions,TabPermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\TabPermissionCollection.cs,CompareTo,The length of the statement  "		if (objTabPermissionCollection [i].TabPermissionID != this [i].TabPermissionID || objTabPermissionCollection [i].AllowAccess != this [i].AllowAccess) { " is 151.
Long Statement,DotNetNuke.Security.Permissions,TabPermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\TabPermissionController.cs,DeleteTabPermissionsByUser,The length of the statement  "	EventLogController.Instance.AddLog (user' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.TABPERMISSION_DELETED); " is 210.
Long Statement,DotNetNuke.Security.Permissions,TabPermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\TabPermissionController.cs,HasTabPermission,The length of the statement  "	return HasTabPermission (PortalController.Instance.GetCurrentPortalSettings ().ActiveTab.TabPermissions' permissionKey); " is 120.
Long Statement,DotNetNuke.Security.Permissions,TabPermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\TabPermissionController.cs,SaveTabPermissions,The length of the statement  "	EventLogController.Instance.AddLog (tab' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.TABPERMISSION_UPDATED); " is 209.
Long Statement,DotNetNuke.Security.Permissions,TabPermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\TabPermissionController.cs,AddTabPermission,The length of the statement  "	int id = Convert.ToInt32 (DataProvider.Instance ().AddTabPermission (objTabPermission.TabID' objTabPermission.PermissionID' objTabPermission.RoleID' objTabPermission.AllowAccess' objTabPermission.UserID' UserController.Instance.GetCurrentUserInfo ().UserID)); " is 259.
Long Statement,DotNetNuke.Security.Permissions,TabPermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\TabPermissionController.cs,GetTabPermissionsCollectionByTabID,The length of the statement  "	return new TabPermissionCollection (CBO.FillCollection (DataProvider.Instance ().GetTabPermissionsByTabID (TabID' -1)' typeof(TabPermissionInfo))); " is 147.
Long Statement,DotNetNuke.Security.Permissions,TabPermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\TabPermissionController.cs,UpdateTabPermission,The length of the statement  "	DataProvider.Instance ().UpdateTabPermission (objTabPermission.TabPermissionID' objTabPermission.TabID' objTabPermission.PermissionID' objTabPermission.RoleID' objTabPermission.AllowAccess' objTabPermission.UserID' UserController.Instance.GetCurrentUserInfo ().UserID); " is 269.
Long Statement,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,WriteLog,The length of the statement  "		RaiseError (filePath' "Unauthorized Access Error"' "The Windows User Account listed below must have Read/Write Privileges for the website path."); " is 146.
Long Statement,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,AddLog,The length of the statement  "					if (Globals.Status != Globals.UpgradeStatus.Upgrade)//this may caught exception during upgrade because old logging provider has problem in it. " is 142.
Long Statement,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,AddLogType,The length of the statement  "					NotificationThresholdTimeType = (LogTypeConfigInfo.NotificationThresholdTimeTypes)Enum.Parse (typeof(LogTypeConfigInfo.NotificationThresholdTimeTypes)' typeConfigInfo.Attributes ["NotificationThresholdTimeType"].Value) " is 218.
Long Statement,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,AddLogType,The length of the statement  "	LoggingProvider.Instance ().AddLogType (logType.LogTypeKey' logType.LogTypeFriendlyName' logType.LogTypeDescription' logType.LogTypeCSSClass' logType.LogTypeOwner); " is 164.
Long Statement,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,AddLogTypeConfigInfo,The length of the statement  "	LoggingProvider.Instance ().AddLogTypeConfigInfo (logTypeConfig.ID' logTypeConfig.LoggingIsActive' logTypeConfig.LogTypeKey' logTypeConfig.LogTypePortalID' logTypeConfig.KeepMostRecent' logTypeConfig.LogFileName' logTypeConfig.EmailNotificationIsActive' Convert.ToString (logTypeConfig.NotificationThreshold)' Convert.ToString (logTypeConfig.NotificationThresholdTime)' Convert.ToString ((int)logTypeConfig.NotificationThresholdTimeType)' logTypeConfig.MailFromAddress' logTypeConfig.MailToAddress); " is 499.
Long Statement,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,GetLogTypeInfoDictionary,The length of the statement  "	return LoggingProvider.Instance ().GetLogTypeInfo ().Cast<LogTypeInfo> ().ToDictionary (logTypeInfo => logTypeInfo.LogTypeKey); " is 127.
Long Statement,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,UpdateLogTypeConfigInfo,The length of the statement  "	LoggingProvider.Instance ().UpdateLogTypeConfigInfo (logTypeConfig.ID' logTypeConfig.LoggingIsActive' logTypeConfig.LogTypeKey' logTypeConfig.LogTypePortalID' logTypeConfig.KeepMostRecent' logTypeConfig.LogFileName' logTypeConfig.EmailNotificationIsActive' Convert.ToString (logTypeConfig.NotificationThreshold)' Convert.ToString (logTypeConfig.NotificationThresholdTime)' Convert.ToString ((int)logTypeConfig.NotificationThresholdTimeType)' logTypeConfig.MailFromAddress' logTypeConfig.MailToAddress); " is 502.
Long Statement,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,UpdateLogType,The length of the statement  "	LoggingProvider.Instance ().UpdateLogType (logType.LogTypeKey' logType.LogTypeFriendlyName' logType.LogTypeDescription' logType.LogTypeCSSClass' logType.LogTypeOwner); " is 167.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,GetLogTypeConfigInfoByKey,The length of the statement  "	var configInfoByKey = (Hashtable)DataCache.GetCache (LogTypeInfoByKeyCacheKey) ?? FillLogTypeConfigInfoByKey (GetLogTypeConfigInfo ()); " is 135.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,FillLogInfo,The length of the statement  "		obj.Exception.AssemblyVersion = Convert.ToString (Null.SetNull (dr ["AssemblyVersion"]' obj.Exception.AssemblyVersion)); " is 120.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,FillLogInfo,The length of the statement  "		obj.Exception.InnerStackTrace = Convert.ToString (Null.SetNull (dr ["InnerStackTrace"]' obj.Exception.InnerStackTrace)); " is 120.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,WriteLog,The length of the statement  "			DataProvider.Instance ().AddLog (objLogInfo.LogGUID' objLogInfo.LogTypeKey' objLogInfo.LogUserID' objLogInfo.LogUserName' objLogInfo.LogPortalID' objLogInfo.LogPortalName' objLogInfo.LogCreateDate' objLogInfo.LogServerName' logProperties' Convert.ToInt32 (objLogInfo.LogConfigID)' objLogInfo.Exception' logTypeConfigInfo.EmailNotificationIsActive); " is 348.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,WriteLog,The length of the statement  "							Mail.Mail.SendEmail (logTypeConfigInfo.MailFromAddress' logTypeConfigInfo.MailToAddress' "Event Notification"' string.Format ("<pre>{0}</pre>"' HttpUtility.HtmlEncode (str))); " is 175.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,AddLog,The length of the statement  "	if (scheduler == null || logInfo.BypassBuffering || SchedulingProvider.Enabled == false || scheduler.GetScheduleStatus () == ScheduleStatus.STOPPED || !Host.EventLogBuffer) { " is 174.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,AddLogType,The length of the statement  "	DataProvider.Instance ().AddLogType (logTypeKey' logTypeFriendlyName' logTypeDescription' logTypeCSSClass' logTypeOwner); " is 121.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,AddLogTypeConfigInfo,The length of the statement  "	DataProvider.Instance ().AddLogTypeConfigInfo (loggingIsActive' logTypeKey' logTypePortalID' intKeepMostRecent' emailNotificationIsActive' intThreshold' intThresholdTime' intThresholdTimeType' mailFromAddress' mailToAddress); " is 225.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,GetLogTypeInfo,The length of the statement  "	return CBO.GetCachedObject<ArrayList> (new CacheItemArgs (LogTypeCacheKey' 20' CacheItemPriority.Normal)' c => CBO.FillCollection (DataProvider.Instance ().GetLogTypeInfo ()' typeof(LogTypeInfo))); " is 197.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,SendLogNotifications,The length of the statement  "	List<LogTypeConfigInfo> configInfos = CBO.FillCollection<LogTypeConfigInfo> (DataProvider.Instance ().GetEventLogPendingNotifConfig ()); " is 136.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,SendLogNotifications,The length of the statement  "		Mail.Mail.SendEmail (typeConfigInfo.MailFromAddress' typeConfigInfo.MailToAddress' "Event Notification"' string.Format ("<pre>{0}</pre>"' HttpUtility.HtmlEncode (log))); " is 169.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,UpdateLogType,The length of the statement  "	DataProvider.Instance ().UpdateLogType (logTypeKey' logTypeFriendlyName' logTypeDescription' logTypeCSSClass' logTypeOwner); " is 124.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,UpdateLogTypeConfigInfo,The length of the statement  "	DataProvider.Instance ().UpdateLogTypeConfigInfo (id' loggingIsActive' logTypeKey' logTypePortalID' intKeepMostRecent' emailNotificationIsActive' intThreshold' intThresholdTime' intThresholdTimeType' mailFromAddress' mailToAddress); " is 232.
Long Statement,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,GetLog,The length of the statement  "	FillLogs (DataProvider.Instance ().GetLogs (Null.NullInteger' Null.NullString' pageSize' pageIndex)' logs' ref totalRecords); " is 125.
Long Statement,DotNetNuke.Services.Log.EventLog,EventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\EventLogController.cs,AddLog,The length of the statement  "	AddLog (propertyName' propertyValue' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' logType); " is 155.
Long Statement,DotNetNuke.Services.Log.EventLog,EventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\EventLogController.cs,AddLog,The length of the statement  "		log.LogProperties.Add (new LogDetailInfo ("DesktopModuleID"' desktopModule.DesktopModuleID.ToString (CultureInfo.InvariantCulture))); " is 133.
Long Statement,DotNetNuke.Services.Log.EventLog,EventLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\EventLogController.cs,AddLog,The length of the statement  "		log.LogProperties.Add (new LogDetailInfo ("FolderMappingID"' folderInfo.FolderMappingID.ToString (CultureInfo.InvariantCulture))); " is 130.
Long Statement,DotNetNuke.Services.Log.EventLog,ExceptionLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\ExceptionLogController.cs,AddLog,The length of the statement  "	if (logType == ExceptionLogType.PAGE_LOAD_EXCEPTION && HttpContext.Current != null && UserController.Instance.GetCurrentUserInfo ().IsSuperUser) { " is 146.
Long Statement,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,ReadXml,The length of the statement  "		if (reader.ReadState != ReadState.EndOfFile && reader.NodeType != XmlNodeType.None && !String.IsNullOrEmpty (reader.LocalName)) { " is 129.
Long Statement,DotNetNuke.Services.Log.EventLog,LogProperties,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogProperties.cs,Deserialize,The length of the statement  "		if (reader.ReadState != ReadState.EndOfFile && reader.NodeType != XmlNodeType.None && !String.IsNullOrEmpty (reader.LocalName)) { " is 129.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,GetPortalRoles,The length of the statement  "	return new ArrayList (Instance.GetRoles (portalId' r => r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved).ToArray ()); " is 147.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,GetPortalRoles,The length of the statement  "	return new ArrayList (Instance.GetRoles (portalId' r => r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved).ToArray ()); " is 147.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,GetRoleNames,The length of the statement  "	var roleList = RoleController.Instance.GetRoles (portalId' role => role.SecurityMode != SecurityMode.SocialGroup && role.Status == RoleStatus.Approved); " is 152.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,GetRoles,The length of the statement  "	return new ArrayList (Instance.GetRoles (Null.NullInteger' r => r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved).ToArray ()); " is 155.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,GetRolesByGroup,The length of the statement  "	return new ArrayList (Instance.GetRoles (portalId' r => r.RoleGroupID == roleGroupId && r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved).ToArray ()); " is 179.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,AddMessage,The length of the statement  "	EventLogController.Instance.AddLog (roleInfo' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' logType); " is 168.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,DeleteUserRoleInternal,The length of the statement  "			EventLogController.Instance.AddLog (userRole' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.ROLE_UPDATED); " is 205.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,SendNotification,The length of the statement  "		UserRoleInfo objUserRole = RoleController.Instance.GetUserRole (PortalSettings.PortalId' objUser.UserID' objRole.RoleID); " is 121.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,SendNotification,The length of the statement  "		Custom.Add (Null.IsNull (objUserRole.EffectiveDate) ? DateTime.Today.ToString ("g"' ci) : objUserRole.EffectiveDate.ToString ("g"' ci)); " is 136.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,SendNotification,The length of the statement  "		Subject = Localization.GetSystemMessage (objUser.Profile.PreferredLocale' PortalSettings' "EMAIL_ROLE_" + UserRoleActionsCaption [(int)Action] + "_SUBJECT"' objUser)' " is 166.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,SendNotification,The length of the statement  "		Body = Localization.GetSystemMessage (objUser.Profile.PreferredLocale' PortalSettings' "EMAIL_ROLE_" + UserRoleActionsCaption [(int)Action] + "_BODY"' objUser' Localization.GlobalResourceFile' Custom)' " is 201.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,AddUserRole,The length of the statement  "		EventLogController.Instance.AddLog (userRole' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_CREATED); " is 210.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,AddUserRole,The length of the statement  "		EventLogController.Instance.AddLog (userRole' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_UPDATED); " is 210.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,GetRoleByName,The length of the statement  "	return GetRoles (portalId).SingleOrDefault (r => roleName.Equals (r.RoleName.Trim ()' StringComparison.InvariantCultureIgnoreCase) && r.PortalID == portalId); " is 158.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,GetRoles,The length of the statement  "	return CBO.GetCachedObject<IList<RoleInfo>> (new CacheItemArgs (cacheKey' DataCache.RolesCacheTimeOut' DataCache.RolesCachePriority)' c => provider.GetRoles (portalId).Cast<RoleInfo> ().ToList ()); " is 197.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The length of the statement  "			EventLogController.Instance.AddLog (userRole' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_UPDATED); " is 210.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The length of the statement  "			EventLogController.Instance.AddLog ("UserId"' userId.ToString (CultureInfo.InvariantCulture)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.USER_ROLE_DELETED); " is 254.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The length of the statement  "			EventLogController.Instance.AddLog (userRole' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_UPDATED); " is 210.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,AddRoleGroup,The length of the statement  "	EventLogController.Instance.AddLog (objRoleGroupInfo' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_CREATED); " is 218.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,AddUserRole,The length of the statement  "		EventLogController.Instance.AddLog ("Role"' role.RoleName' portalSettings' user.UserID' EventLogController.EventLogType.USER_ROLE_CREATED); " is 139.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,AddUserRole,The length of the statement  "		EventLogController.Instance.AddLog ("Role"' role.RoleName' portalSettings' user.UserID' EventLogController.EventLogType.USER_ROLE_UPDATED); " is 139.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,CanRemoveUserFromRole,The length of the statement  "	return !((PortalSettings.AdministratorId == UserId && PortalSettings.AdministratorRoleId == RoleId) || PortalSettings.RegisteredRoleId == RoleId); " is 146.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,CanRemoveUserFromRole,The length of the statement  "	return !((PortalInfo.AdministratorId == UserId && PortalInfo.AdministratorRoleId == RoleId) || PortalInfo.RegisteredRoleId == RoleId); " is 134.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,DeleteRoleGroup,The length of the statement  "	EventLogController.Instance.AddLog (objRoleGroupInfo' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_DELETED); " is 218.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateRoleGroup,The length of the statement  "	EventLogController.Instance.AddLog (roleGroup' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_UPDATED); " is 211.
Long Statement,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateRoleGroup,The length of the statement  "			EventLogController.Instance.AddLog (role' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.ROLE_UPDATED); " is 201.
Long Statement,DotNetNuke.Security.Roles,DNNRoleProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\DNNRoleProvider.cs,AddDNNUserRole,The length of the statement  "	userRole.UserRoleID = Convert.ToInt32 (dataProvider.AddUserRole (userRole.PortalID' userRole.UserID' userRole.RoleID' (int)userRole.Status' userRole.IsOwner' userRole.EffectiveDate' userRole.ExpiryDate' UserController.Instance.GetCurrentUserInfo ().UserID)); " is 258.
Long Statement,DotNetNuke.Security.Roles,DNNRoleProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\DNNRoleProvider.cs,CreateRole,The length of the statement  "		role.RoleID = Convert.ToInt32 (dataProvider.AddRole (role.PortalID' role.RoleGroupID' role.RoleName.Trim ()' (role.Description ?? "").Trim ()' role.ServiceFee' role.BillingPeriod.ToString (CultureInfo.InvariantCulture)' role.BillingFrequency' role.TrialFee' role.TrialPeriod' role.TrialFrequency' role.IsPublic' role.AutoAssignment' role.RSVPCode' role.IconFile' UserController.Instance.GetCurrentUserInfo ().UserID' (int)role.Status' (int)role.SecurityMode' role.IsSystemRole)); " is 479.
Long Statement,DotNetNuke.Security.Roles,DNNRoleProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\DNNRoleProvider.cs,GetRoles,The length of the statement  "	var arrRoles = CBO.FillCollection (portalId == Null.NullInteger ? dataProvider.GetRoles () : dataProvider.GetPortalRoles (portalId)' typeof(RoleInfo)); " is 151.
Long Statement,DotNetNuke.Security.Roles,DNNRoleProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\DNNRoleProvider.cs,UpdateRole,The length of the statement  "	dataProvider.UpdateRole (role.RoleID' role.RoleGroupID' role.RoleName.Trim ()' (role.Description ?? "").Trim ()' role.ServiceFee' role.BillingPeriod.ToString (CultureInfo.InvariantCulture)' role.BillingFrequency' role.TrialFee' role.TrialPeriod' role.TrialFrequency' role.IsPublic' role.AutoAssignment' role.RSVPCode' role.IconFile' UserController.Instance.GetCurrentUserInfo ().UserID' (int)role.Status' (int)role.SecurityMode' role.IsSystemRole); " is 448.
Long Statement,DotNetNuke.Security.Roles,DNNRoleProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\DNNRoleProvider.cs,UpdateRoleSettings,The length of the statement  "			dataProvider.UpdateRoleSetting (role.RoleID' setting.Key' setting.Value' UserController.Instance.GetCurrentUserInfo ().UserID); " is 127.
Long Statement,DotNetNuke.Security.Roles,DNNRoleProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\DNNRoleProvider.cs,GetUserRoles,The length of the statement  "	return CBO.FillCollection<UserRoleInfo> (includePrivate ? dataProvider.GetUserRoles (user.PortalID' user.UserID) : dataProvider.GetServices (user.PortalID' user.UserID)); " is 170.
Long Statement,DotNetNuke.Security.Roles,DNNRoleProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\DNNRoleProvider.cs,UpdateUserRole,The length of the statement  "	dataProvider.UpdateUserRole (userRole.UserRoleID' (int)userRole.Status' userRole.IsOwner' userRole.EffectiveDate' userRole.ExpiryDate' UserController.Instance.GetCurrentUserInfo ().UserID); " is 189.
Long Statement,DotNetNuke.Security.Roles,DNNRoleProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\DNNRoleProvider.cs,CreateRoleGroup,The length of the statement  "	var roleGroupId = dataProvider.AddRoleGroup (roleGroup.PortalID' roleGroup.RoleGroupName.Trim ()' (roleGroup.Description ?? "").Trim ()' UserController.Instance.GetCurrentUserInfo ().UserID); " is 191.
Long Statement,DotNetNuke.Security.Roles,DNNRoleProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\DNNRoleProvider.cs,GetRoleGroupByName,The length of the statement  "	return GetRoleGroupsInternal (portalId).SingleOrDefault (r => roleGroupName.Equals (r.RoleGroupName.Trim ()' StringComparison.InvariantCultureIgnoreCase)); " is 155.
Long Statement,DotNetNuke.Security.Roles,DNNRoleProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\DNNRoleProvider.cs,GetRoleGroupsInternal,The length of the statement  "	var cacheArgs = new CacheItemArgs (GetRoleGroupsCacheKey (portalId)' DataCache.RoleGroupsCacheTimeOut' DataCache.RoleGroupsCachePriority); " is 138.
Long Statement,DotNetNuke.Security.Roles,DNNRoleProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\DNNRoleProvider.cs,GetRoleGroupsInternal,The length of the statement  "	return CBO.GetCachedObject<IEnumerable<RoleGroupInfo>> (cacheArgs' c => CBO.FillCollection<RoleGroupInfo> (dataProvider.GetRoleGroups (portalId))); " is 147.
Long Statement,DotNetNuke.Security.Roles,DNNRoleProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\DNNRoleProvider.cs,UpdateRoleGroup,The length of the statement  "	dataProvider.UpdateRoleGroup (roleGroup.RoleGroupID' roleGroup.RoleGroupName.Trim ()' (roleGroup.Description ?? "").Trim ()' UserController.Instance.GetCurrentUserInfo ().UserID); " is 179.
Long Statement,DotNetNuke.Security.Roles,RoleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleInfo.cs,WriteXml,The length of the statement  "	writer.WriteElementString ("autoassignment"' AutoAssignment.ToString (CultureInfo.InvariantCulture).ToLowerInvariant ()); " is 121.
Long Statement,DotNetNuke.Security.Roles,RoleProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleProvider.cs,GetRoleNames,The length of the statement  "	var roleList = RoleController.Instance.GetRoles (portalId' r => r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved); " is 143.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImprovedFriendlyUrl,The length of the statement  "	return ImprovedFriendlyUrlWithMessages (tab' path' pageName' httpAlias' ignoreCustomRedirects' settings' out messages' parentTraceId); " is 134.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImprovedFriendlyUrlWithMessages,The length of the statement  "	string friendlyPath = GetFriendlyAlias (path' ref httpAlias' tab.PortalID' settings' new PortalSettings (tab.PortalID)' out cultureSpecificAlias); " is 146.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImprovedFriendlyUrlWithMessages,The length of the statement  "		friendlyPath = ImproveFriendlyUrlWithMessages (tab' friendlyPath' pageName' portalSettings' ignoreCustomRedirects' settings' ref messages' cultureSpecificAlias' parentTraceId); " is 176.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,CreateFriendlyUrl,The length of the statement  "		finalPathBuilder.Append (dropLangParms == false ? Globals.AddHTTP (portalAlias + langParms + "/") : Globals.AddHTTP (portalAlias + "/")); " is 137.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,CreateFriendlyUrl,The length of the statement  "		// It's true this could be solved by taking the items from the path earlier in the chain (in the original routine that takes them " is 129.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,CreateFriendlyUrl,The length of the statement  "		// from the querystring and includes them in the path)' but the intention is to leave the primary friendly url generation similar " is 129.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,CreateFriendlyUrl,The length of the statement  "			//Url is home page' and there's no friendly path to add' so we don't need the home page path (ie' /home is unneeded' just use the site root) " is 140.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,DetermineExtension,The length of the statement  "		if (settings.PageExtensionUsageType == PageExtensionUsageType.AlwaysUse || settings.PageExtensionUsageType == PageExtensionUsageType.PageOnly) { " is 144.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,DeterminePageNameAndExtension,The length of the statement  "	if (settings.PageExtensionUsageType == PageExtensionUsageType.Never || settings.PageExtensionUsageType == PageExtensionUsageType.PageOnly) { " is 140.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,FriendlyUrlInternal,The length of the statement  "	string friendlyPath = GetFriendlyAlias (path' ref portalAlias' portalId' localSettings' portalSettings' out cultureSpecificAlias); " is 130.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,FriendlyUrlInternal,The length of the statement  "	if (tab == null && path == "~/" && String.Compare (pageName' Globals.glbDefaultPage' StringComparison.OrdinalIgnoreCase) == 0) { " is 128.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,FriendlyUrlInternal,The length of the statement  "		friendlyPath = ImproveFriendlyUrl (tab' friendlyPath' pageName' portalSettings' false' cultureSpecificAlias' localSettings' parentTraceId); " is 139.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,FriendlyUrlInternal,The length of the statement  "	if (tab != null && portalSettings.SSLEnabled && tab.IsSecure && friendlyPath.StartsWith ("http://"' StringComparison.InvariantCultureIgnoreCase)) { " is 147.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetAliasForPortal,The length of the statement  "	//if no match found' then call database to find (don't rely on cache for this one' because it is an exception event' not an expected event) " is 139.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetAliasForPortal,The length of the statement  "			messages.Add ("Portal Id " + portalId.ToString () + " does not match http alias " + httpAlias + " - " + alias.HTTPAlias + " was used instead"); " is 143.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetCultureOfSettings,The length of the statement  "	//note! should be replaced with compiled call to portalSettings.CultureCode property when base supported version is increased. " is 126.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyAlias,The length of the statement  "	var portalMatchRegex = RegexUtils.GetCachedRegex ("^https?://" + httpAlias' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 133.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyAlias,The length of the statement  "			PortalSettings.PortalAliasMapping aliasMapping = PortalSettingsController.Instance ().GetPortalAliasMappingMode (portalId); " is 123.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyAlias,The length of the statement  "			//essentially we are ignoring the portal alias of the portal settings object and driving the alias from the supplied portal settings culture code " is 145.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyAlias,The length of the statement  "			//this is because the calling module cannot be guaranteed to be supplying the right culture Code / portal alias combination. " is 124.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyAlias,The length of the statement  "				redirectAlias = primaryAliases.Where (e => e.IsPrimary).GetAliasByPortalIdAndSettings (portalId' httpAlias' cultureCode' settings); " is 131.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyAlias,The length of the statement  "				if (!String.IsNullOrEmpty (redirectAlias.CultureCode) && String.Compare (redirectAlias.HTTPAlias' httpAlias' StringComparison.OrdinalIgnoreCase) != 0) { " is 152.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyAlias,The length of the statement  "					if (String.Compare (redirectAlias.HTTPAlias' httpAlias' StringComparison.OrdinalIgnoreCase) == 0 && !string.IsNullOrEmpty (redirectAlias.CultureCode)) { " is 152.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyAlias,The length of the statement  "				//852 : check to see if the skinSrc is explicityl specified' which we don't want to duplicate if the alias also specifies this " is 126.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyAlias,The length of the statement  "				var fullALiasRx = RegexUtils.GetCachedRegex ("^" + httpAliasFull' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 123.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyAlias,The length of the statement  "					var httpAliasRx = RegexUtils.GetCachedRegex ("^?alias=" + httpAlias' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 126.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The length of the statement  "		if (String.Compare (pageName' Globals.glbDefaultPage' StringComparison.OrdinalIgnoreCase) != 0)//take out the end page name' it will get re-added " is 145.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The length of the statement  "			if (!illegalPageNames.Contains (pair [0].ToLowerInvariant ()) && (pair.Length == 1 || !illegalPageNames.Contains (pair [1].ToLowerInvariant ()))) { " is 147.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The length of the statement  "							//if the querystring has been decoded and has a '=' in it' the value will get split more times.  Put those back together with a loop. " is 133.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrl,The length of the statement  "	string url = ImproveFriendlyUrlWithMessages (tab' friendlyPath' pageName' portalSettings' ignoreCustomRedirects' settings' ref messages' cultureSpecificAlias' parentTraceId); " is 174.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "	if ((tab.IsSuperTab || RewriteController.IsAdminTab (tab.PortalID' tab.TabPath' settings)) && settings.FriendlyAdminHostUrls == false)//811 : allow for friendly admin/host urls " is 176.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "		var rx = RegexUtils.GetCachedRegex (settings.NoFriendlyUrlRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 122.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "	//821 : new 'CustomOnly' setting which allows keeping base Urls but also using Custom Urls.  Basically keeps search friendly  " is 124.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "	if ((settings.UrlFormat.ToLower () == "advanced" || customOnly) && !RewriteController.IsExcludedFromFriendlyUrls (tab' settings' false)) { " is 138.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "		var tabOnlyRegex = RegexUtils.GetCachedRegex ("[^?]*/tabId/(?<tabid>\\d+)/" + pageName + "($|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 167.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "			newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' true' isHomePage' cultureCode' isDefaultLanguage' false' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId); " is 215.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "			//it is a straight page.aspx reference' with just the tabid to specify parameters' so get the extension that should be used (no pagename is used by design) " is 155.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "			string extension = customHttpAlias != null && newTabPath == "" ? "" : DetermineExtension (isHomePage' pageName' settings); " is 122.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "			//When the home page is requested with a querystring value' the path for the home page is included.  This is because path items without the home page  " is 149.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "			//qualifier are incorrectly checked for as dnn pages' and will result in a 404.  Ie domain.com/key/value will fail looking for a DNN path called 'key/value'. " is 157.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "			//This gets around the problem because it places the path aas /home/key/value - which correctly identifies the tab as '/Home' and the key/value parameters as " is 157.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "			//this regex splits the incoming friendly path pagename/tabid/56/default.aspx into the non-tabid path' and individual parms for each /parm/ in the friendly path  " is 160.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "			var rgx = RegexUtils.GetCachedRegex ("[^?]*(?<tabs>/tabId/(?<tabid>\\d+))(?<path>(?<parms>(?:(?:/[^/?]+){1})+))(?:/" + pageName + ")(?:$|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 211.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "				//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items " is 165.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "				newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId); " is 229.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "							//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root " is 144.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "							newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId); " is 229.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "					if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) { " is 204.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "					//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases) " is 121.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "					//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases. " is 121.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "							customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId); " is 226.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "							if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) { " is 181.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "					string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings); " is 132.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "						//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code " is 129.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "					string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage); " is 187.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The length of the statement  "				var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 151.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,OutputFriendlyUrlMessages,The length of the statement  "				response.AppendHeader ("X-Friendly-Url-" + msgId + ".00"' "Messages for Tab " + tabId.ToString () + "' " + tabName + "' " + path + " calltype:" + method); " is 154.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,RemoveExcludedPartsOfPath,The length of the statement  "	var notInPath = RegexUtils.GetCachedRegex (settings.DoNotIncludeInPathRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 134.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,RemoveExcludedPartsOfPath,The length of the statement  "	qs = string.IsNullOrWhiteSpace (qs) ? queryStringBuilder.ToString () : string.Format ("{0}&{1}"' qs' queryStringBuilder); " is 121.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,TransformStandardPath,The length of the statement  "	if (newPath != "/" && newPath != "" && "/ctl/privacy|/ctl/login|/ctl/register|/ctl/terms".Contains (newPath.ToLower ())) { " is 122.
Long Statement,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ForceLowerCaseIfAllowed,The length of the statement  "					var rx = RegexUtils.GetCachedRegex (settings.ForceLowerCaseRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 123.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,RewriteUrl,The length of the statement  "		//if made it through there and not installing' go to next call.  Not in exception catch because it implements it's own top-level exception handling " is 147.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,RewriteUrl,The length of the statement  "		ProcessRequest (app.Context' app.Context.Request.Url' Host.Host.UseFriendlyUrls' result' _settings' true' parentTraceId); " is 121.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "				//if requested alias wasn't the primary' we have a replacement' redirects are allowed and the portal alias mapping mode is redirect " is 131.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "				if ((redirectAlias && wrongAlias != null) && result.RedirectAllowed && result.PortalAliasMapping != PortalSettings.PortalAliasMapping.Redirect) { " is 145.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "					redirectAlias = ConfigurePortalAliasRedirect (ref result' wrongAlias' requestedAlias.HTTPAlias' false' settings.InternalAliasList' settings); " is 141.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "			if (!redirectAlias && IsPortalAliasIncorrect (context' request' requestUri' result' queryStringCol' settings' parentTraceId' out primaryHttpAlias)) { " is 149.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "					CheckForRewrite (fullUrl' querystring' result' useFriendlyUrls' queryStringCol' settings' out isPhysicalResource' parentTraceId); " is 129.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "					primaryAliases.GetSettingsByPortalIdAndAlias (result.PortalId' result.HttpAlias' out culture' out browserType' out skin); " is 121.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "			//check for a parameter redirect (we had to do all the previous processing to know we are on the right portal and identify the tabid) " is 133.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "			//if the CustomParmRewrite flag is set' it means we already rewrote these parameters' so they have to be correct' and aren't subject to  " is 135.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "			if (!finished && !postRequest /* either request is null' or it's not a post - 551 */&& result.HttpAlias != null /* must have a http alias */&& !result.CustomParmRewrite && /* not custom rewritten parms */((settings.EnableCustomProviders && RedirectController.CheckForModuleProviderRedirect (requestUri' ref result' queryStringCol' settings' parentTraceId)) //894 : allow disable of all custom providers " is 402.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "				if (result.OriginalPath.Equals (result.HttpAlias' StringComparison.InvariantCultureIgnoreCase) && result.PortalAlias != null && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) { " is 224.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "						if (result.CultureCode != null && fullUrl.Contains (result.CultureCode) && portalSettings.DefaultLanguage == result.CultureCode) { " is 130.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "							//when the request culture code is the same as the portal default' check for a 301 redirect' because we try and remove the language from the url where possible " is 159.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "                                                    response.AppendHeader("X-" + prodName + "-Debug"' string.Format(debugMsg' requestUri.AbsoluteUri' result.FinalUrl' result.RewritePath' result.Action' productVer));" is 163.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "                                                        response.AppendHeader("X-" + prodName + "-Debug"' string.Format(debugMsg' requestUri.AbsoluteUri' result.FinalUrl' result.RewritePath' result.Action' productVer));" is 163.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "				if (result.DoRewrite == false && result.CanRewrite != StateBoolean.False && !finished && result.Action == ActionType.Continue) { " is 128.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "						if ((request != null && Directory.Exists (result.PhysicalPath)) || Regex.IsMatch (pathWithNoQs' settings.ValidExtensionlessUrlsRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) { " is 193.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The length of the statement  "		//do nothing' a threadAbortException will have occured from using a server.transfer or response.redirect within the code block.  This is the highest " is 148.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ShowDebugData,The length of the statement  "		response.AppendHeader ("X-" + _productName + "-Debug"' string.Format (debugMsg' requestUri' finalUrl' rewritePath' action' productVer' portalSettings' browser)); " is 161.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The length of the statement  "					if (result.DomainName.ToLowerInvariant ().IndexOf (alias.HTTPAlias' StringComparison.Ordinal) == 0 && result.DomainName.Length >= alias.HTTPAlias.Length) { " is 155.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The length of the statement  "				if (!String.IsNullOrEmpty (settings.Regex404))//with 404 errors' there's an option to catch certain urls and use an external url for extra processing. " is 150.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The length of the statement  "					//ok' valid tabid.  what we're going to do is to load up this tab via a rewrite of the url' and then change the output status " is 125.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The length of the statement  "					response.AppendHeader (errRH' string.Format (errRV' "DNN Tab"' errTab.TabName + "(Tabid:" + errTabId.ToString () + ")"' reason)); " is 129.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The length of the statement  "					errorPageHtml.Write ("<div>Change this message by configuring a specific 404 Error Page or Url for this website.</div>"); " is 121.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The length of the statement  "				errorPageHtml.Write ("500 Server Error<br><div style='font-weight:bolder'>An error occured during processing : if possible' check the event log of the server</div>"); " is 166.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The length of the statement  "				errorPageHtml.Write ("<div>You can see this exception because the customErrors attribute in the web.config is set to 'off'.  Change this value to 'on' or 'RemoteOnly' to show Error Handling</div>"); " is 198.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The length of the statement  "						errorPageHtml.Write ("<div>The error handling would have shown this page : <a href='" + errUrl + "'>" + errUrl + "</a></div>"); " is 127.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForTabExternalForwardOrRedirect,The length of the statement  "		if (result.TabId > -1 && result.PortalId > -1 && (settings.ForwardExternalUrlsType != DNNPageForwardType.NoForward || result.Reason == RedirectReason.Tab_Permanent_Redirect)) { " is 176.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForTabExternalForwardOrRedirect,The length of the statement  "							redirectUrl = RedirectController.GetTabRedirectUrl (tab' settings' cleanPath' result' out permanentRedirect' parentTraceId); " is 124.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForTabExternalForwardOrRedirect,The length of the statement  "							string message = "Permanent Redirect chosen for Tab " + tab.TabPath.Replace ("//"' "/") + " but forwarding Url was not valid"; " is 126.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForTabExternalForwardOrRedirect,The length of the statement  "								string message = "Permanent Redirect chosen for Tab " + tab.TabPath.Replace ("//"' "/") + " but no forwarding Url Supplied"; " is 124.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForTabExternalForwardOrRedirect,The length of the statement  "		//do nothing' a threadAbortException will have occured from using a server.transfer or response.redirect within the code block.  This is the highest " is 148.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForSecureRedirect,The length of the statement  "	if (result.IsPhysicalResource == false && result.TabId >= 0)// no secure redirection for physical resources' only tab-specific requests can be redirected for ssl connections " is 173.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForSecureRedirect,The length of the statement  "			result.DebugMessages.Add ("ActiveTab: " + portalSettings.ActiveTab.TabID.ToString () + "/" + portalSettings.ActiveTab.TabName + " IsSecure: " + portalSettings.ActiveTab.IsSecure.ToString ()); " is 191.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForSecureRedirect,The length of the statement  "				exclude = (Regex.IsMatch (result.RawUrl' doNotRedirectSecureRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)); " is 125.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForSecureRedirect,The length of the statement  "				homePageTabId = TabPathHelper.GetHomePageTabIdForCulture (portalSettings.DefaultLanguage' portalSettings.PortalId' result.CultureCode' homePageTabId); " is 150.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IsPortalAliasIncorrect,The length of the statement  "							var cpa = portalAliases.GetAliasByPortalIdAndSettings (result.PortalId' result' result.CultureCode' result.BrowserType); " is 120.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IsPortalAliasIncorrect,The length of the statement  "			} else if (httpAlias != null && String.Compare (httpAlias' result.HttpAlias' StringComparison.OrdinalIgnoreCase) != 0) { " is 120.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,RedirectPortalAlias,The length of the statement  "		if (result.Reason == RedirectReason.Wrong_Portal_Alias_For_Browser_Type || result.Reason == RedirectReason.Wrong_Portal_Alias_For_Culture || result.Reason == RedirectReason.Wrong_Portal_Alias_For_Culture_And_Browser) { " is 218.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,RedirectPortalAlias,The length of the statement  "			redirected = ConfigurePortalAliasRedirect (ref result' result.HttpAlias' httpAlias' false' result.Reason' settings.InternalAliasList' settings); " is 144.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,RedirectPortalAlias,The length of the statement  "			redirected = ConfigurePortalAliasRedirect (ref result' result.HttpAlias' httpAlias' false' settings.InternalAliasList' settings); " is 129.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ConfigurePortalAliasRedirect,The length of the statement  "	return ConfigurePortalAliasRedirect (ref result' wrongAlias' rightAlias' ignoreCustomAliasTabs' RedirectReason.Wrong_Portal_Alias' internalAliases' settings); " is 158.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ConfigurePortalAliasRedirect,The length of the statement  "		if (redirectReason == RedirectReason.Wrong_Portal_Alias_For_Culture || redirectReason == RedirectReason.Wrong_Portal_Alias_For_Culture_And_Browser) { " is 149.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IdentifyPortalAlias,The length of the statement  "					var ex = new Exception ("Illegal request exception : Two TabId parameters provided in a single request: " + requestUri); " is 120.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IdentifyPortalAlias,The length of the statement  "					var ex = new Exception ("Illegal request exception : TabId parameters in query string' but invalid TabId requested : " + requestUri); " is 133.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IdentifyPortalAlias,The length of the statement  "			if (result.PortalAlias != null && String.Compare (result.PortalAlias.HTTPAlias' httpAliasFromTab' StringComparison.OrdinalIgnoreCase) != 0 || result.PortalAlias == null) { " is 171.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IdentifyPortalAlias,The length of the statement  "	//double check to make sure we still have the correct alias now that all other information is known (ie tab' portal' culture) " is 125.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IdentifyPortalAlias,The length of the statement  "	if (result.TabId == -1 && result.Action == ActionType.CheckFor301 && result.Reason == RedirectReason.Custom_Tab_Alias) { " is 120.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IdentifyPortalAlias,The length of the statement  "		//here because the portal alias matched' but no tab was found' and because there are custom tab aliases used for this portal " is 124.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IdentifyPortalAlias,The length of the statement  "			bool incorrectAlias = IsPortalAliasIncorrect (context' request' requestUri' result' queryStringCol' settings' parentTraceId' out primaryAlias); " is 143.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IdentifyPortalAlias,The length of the statement  "	if (result.DoRewrite == false && (result.Action == ActionType.Continue || (result.Action == ActionType.CheckFor301 && result.Reason == RedirectReason.Custom_Tab_Alias))) { " is 171.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,RewriteAsChildAliasRoot,The length of the statement  "	if (string.IsNullOrEmpty (culture))//732 : when no culture returned can be "" as well as null : no culture causes no rewrite' which results in redirect to parent alias " is 167.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForChildPortalRootUrl,The length of the statement  "	//what we are going to test for here is that if this is a child portal request' for the /default.aspx of the child portal " is 121.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForChildPortalRootUrl,The length of the statement  "	//then we are going to avoid the core 302 redirect to ?alias=portalALias by rewriting to the /default.aspx of the site root " is 123.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,MakeUrlWithAlias,The length of the statement  "	return requestUri.AbsoluteUri.ToLower ().StartsWith ("https://") ? "https://" + httpAlias.Replace ("*."' "") + "/" : "http://" + httpAlias.Replace ("*."' "") + "/"; " is 164.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IgnoreRequestForInstall,The length of the statement  "	if (physicalPath.EndsWith ("install.aspx"' true' CultureInfo.InvariantCulture) || physicalPath.EndsWith ("installwizard.aspx"' true' CultureInfo.InvariantCulture) || physicalPath.EndsWith ("upgradewizard.aspx"' true' CultureInfo.InvariantCulture) || Globals.Status == Globals.UpgradeStatus.Install || Globals.Status == Globals.UpgradeStatus.Upgrade) { " is 351.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IgnoreRequestForInstall,The length of the statement  "	if (physicalPath.EndsWith (Globals.glbDefaultPage' true' CultureInfo.InvariantCulture) == false && refererPath != null && String.Compare (requestedDomain' refererDomain' StringComparison.OrdinalIgnoreCase) == 0 && (refererPath.EndsWith ("install.aspx"' true' CultureInfo.InvariantCulture) || refererPath.EndsWith ("installwizard.aspx"' true' CultureInfo.InvariantCulture) || refererPath.EndsWith ("upgradewizard.aspx"' true' CultureInfo.InvariantCulture))) { " is 458.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IgnoreRequestForWebServer,The length of the statement  "	if (requestedPath.ToLowerInvariant ().IndexOf ("synchronizecache.aspx"' StringComparison.Ordinal) > 1 || requestedPath.EndsWith ("keepalive.aspx"' true' CultureInfo.InvariantCulture)) { " is 185.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRewrite,The length of the statement  "	RewriteController.IdentifyByPhysicalResource (result.PhysicalPath' fullUrl' queryStringCol' ref result' useFriendlyUrls' settings' out isPhysicalResource' out checkForRewrites' parentTraceId); " is 192.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRewrite,The length of the statement  "			doSiteUrlProcessing = Regex.IsMatch (fullUrl' settings.UseSiteUrlsRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 130.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRewrite,The length of the statement  "		if (!doSiteUrlProcessing)//if a virtual request' and not starting with the siteUrls.config file' go on to find the rewritten path " is 129.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRewrite,The length of the statement  "			bool doRewrite = RewriteController.IdentifyByTabPathEx (fullUrl' querystring' result' queryStringCol' settings' parentTraceId); " is 127.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRewrite,The length of the statement  "			//728 : compare requests against the siteurls.config file' either if no other match was found' or if we want to skip the rest of the processing " is 143.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "			if (requestUri.AbsolutePath.EndsWith ("/") && result.Action != ActionType.Redirect301 && result.Reason != RedirectReason.Requested_SplashPage) { " is 144.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "					if ((result.Reason == RedirectReason.Deleted_Page || result.Reason == RedirectReason.Disabled_Page) && portalHomeTabId > 0 && settings.DeletedTabHandlingType == DeletedTabHandlingType.Do301RedirectToPortalHome) { " is 212.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "							string homePageUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (homeTab' pathOnly' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty); " is 160.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "						string bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty); " is 161.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "					int requestedUrlAliasEnd = requestedUrl.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase) + (result.PortalAlias.HTTPAlias + "/").Length; " is 170.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "						if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") { " is 135.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "					//what happens here is that the request is reverse-engineered to see if it matches what the friendly Url shoudl have been  " is 121.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "						bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' pageName + settings.PageExtension' result.HttpAlias' false' settings' Guid.Empty); " is 165.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "						bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty); " is 154.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "					//if the incomign request doesn't match the 'most friendly' url' a 301 Moved Permanently status is returned' along with the friendly url  " is 136.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "						//string rawUrlWithHost = StripDebugParameter(System.Web.HttpUtility.UrlDecode(scheme + requestUri.Host + requestUri.PathAndQuery).ToLower()); " is 142.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "						if (!(bestFriendlyNoScheme == requestedPathNoScheme || bestFriendlyNoScheme == rawUrlWithHost || bestFriendlyNoScheme == rawUrlWithHostNoScheme || bestFriendlyNoScheme == HttpUtility.UrlDecode (requestedPathNoScheme) || bestFriendlyNoScheme == rawUrlLowerCase)) { " is 263.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "							if (result.Reason != RedirectReason.Custom_Tab_Alias && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) { " is 152.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "							result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + requestedPathNoScheme + " [requested with no scheme]"); " is 140.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "							result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHost + " [requested with host and scheme]"); " is 139.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "							result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHostNoScheme + " [requested with host' no scheme]"); " is 147.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "							result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + HttpUtility.UrlDecode (requestedPathNoScheme) + " [requested and decoded]"); " is 161.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "							result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlLowerCase + " [requested raw Url]"); " is 127.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "			if (urlDecodedRedirectPath != null && (settings.RedirectWrongCase && String.CompareOrdinal (urlDecodedRedirectPath' urlDecodedRedirectPath.ToLower ()) != 0)) { " is 159.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "					allowRedirect = !Regex.IsMatch (redirectPath' settings.ForceLowerCaseRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 133.
Long Statement,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The length of the statement  "					if (settings.RedirectDefaultPage == false && redirectPathOnly.EndsWith (Globals.glbDefaultPage' StringComparison.InvariantCultureIgnoreCase)) { " is 143.
Long Statement,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,FriendlyUrl,The length of the statement  "			} else if ((queryStringDic.Count == 2 && queryStringDic.ContainsKey ("tabid") && queryStringDic.ContainsKey ("language"))) { " is 124.
Long Statement,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,FriendlyUrl,The length of the statement  "					friendlyPath = GetFriendlyAlias ("~/" + tab.CultureCode + "/" + tab.TabPath.Replace ("//"' "/").TrimStart ('/') + ".aspx"' portalAlias' true).ToLower (); " is 153.
Long Statement,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,FriendlyUrl,The length of the statement  "					friendlyPath = GetFriendlyAlias ("~/" + queryStringDic ["language"] + "/" + tab.TabPath.Replace ("//"' "/").TrimStart ('/') + ".aspx"' portalAlias' true).ToLower (); " is 165.
Long Statement,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,FriendlyUrl,The length of the statement  "						friendlyPath = (queryStringDic.ContainsKey ("returnurl")) ? GetFriendlyAlias ("~/login.aspx?ReturnUrl=" + queryStringDic ["returnurl"]' portalAlias' true) : GetFriendlyAlias ("~/login.aspx"' portalAlias' true); " is 210.
Long Statement,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,FriendlyUrl,The length of the statement  "						friendlyPath = (queryStringDic.ContainsKey ("returnurl")) ? GetFriendlyAlias ("~/register.aspx?returnurl=" + queryStringDic ["returnurl"]' portalAlias' true) : GetFriendlyAlias ("~/register.aspx"' portalAlias' true); " is 216.
Long Statement,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,FriendlyUrl,The length of the statement  "	if (tab != null && portalSettings.SSLEnabled && tab.IsSecure && friendlyPath.StartsWith ("http://"' StringComparison.InvariantCultureIgnoreCase)) { " is 147.
Long Statement,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,SetPageCache,The length of the statement  "	DataCache.SetCache (key' value' dependency' absoluteExpiration' Cache.NoSlidingExpiration' CacheItemPriority.AboveNormal' callback); " is 132.
Long Statement,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,SetPortalCache,The length of the statement  "		DataCache.SetCache (key' value' new DNNCacheDependency (GetPortalsCacheDependency ())' absoluteExpiration' Cache.NoSlidingExpiration); " is 134.
Long Statement,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,GetParameterRedirects,The length of the statement  "				DataCache.SetCache (redirectActionKey' redirectActions' new DNNCacheDependency (fileDependency)' absoluteExpiration' Cache.NoSlidingExpiration); " is 144.
Long Statement,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,GetParameterReplacements,The length of the statement  "			DataCache.SetCache (replaceActionKey' replaceActions' new DNNCacheDependency (cacheDependency)' expiration' settings.CacheTime); " is 128.
Long Statement,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,StoreFriendlyUrlIndexInCache,The length of the statement  "	SetPageCache (UrlDictKey' urlDict' new DNNCacheDependency (GetTabsCacheDependency (urlPortals))' settings' onRemovePageIndex); " is 126.
Long Statement,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,StoreFriendlyUrlIndexInCache,The length of the statement  "		log.AddProperty ("Item added to cache"' "Url Portals object added to cache.  Key:" + UrlPortalsKey + "  Items: " + urlPortals.Count.ToString ()); " is 145.
Long Statement,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,StoreFriendlyUrlIndexInCache,The length of the statement  "			log.AddProperty ("Item added to cache"' "Custom Alias Tabs added to cache.  Key:" + CustomAliasTabsKey + " Items: " + customAliasTabs.Count.ToString ()); " is 153.
Long Statement,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,StorePageIndexInCache,The length of the statement  "	SetPageCache (PageIndexKey' tabDictionary' new DNNCacheDependency (GetTabsCacheDependency (portalIds))' settings' onRemovePageIndex); " is 133.
Long Statement,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,StoreTabPathsInCache,The length of the statement  "	SetPageCache (string.Format (TabPathsKey' portalId)' tabPathDictionary' new DNNCacheDependency (GetTabsCacheDependency (new List<int> { " is 135.
Long Statement,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,GetPortal,The length of the statement  "	SharedDictionary<int' PortalInfo> portals = (SharedDictionary<int' PortalInfo>)DataCache.GetCache (PortalsKey) ?? new SharedDictionary<int' PortalInfo> (); " is 155.
Long Statement,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The length of the statement  "					if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal " is 136.
Long Statement,DotNetNuke.Entities.Urls,CustomUrlDictController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CustomUrlDictController.cs,FetchCustomUrlDictionary,The length of the statement  "			cc.StoreFriendlyUrlIndexInCache (urlDict' urlPortals' customAliasForTabs' settings' "Portal Id " + portalId.ToString () + " added to index."); " is 142.
Long Statement,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,GetProvidersToCall,The length of the statement  "		var providersToCall = CacheController.GetProvidersForTabAndPortal (tabId' portalId' settings' out definitelyNoProvider' parentTraceId); " is 135.
Long Statement,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,GetProvidersToCall,The length of the statement  "		if (definitelyNoProvider == false && providersToCall == null)//nothing in the cache' and we don't have a definitive 'no' that there isn't a provider " is 148.
Long Statement,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,CheckForRedirect,The length of the statement  "		List<ExtensionUrlProvider> providersToCall = GetProvidersToCall (result.TabId' result.PortalId' settings' parentTraceId); " is 121.
Long Statement,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,CheckForRedirect,The length of the statement  "				redirected = provider.CheckForRedirect (result.TabId' result.PortalId' result.HttpAlias' requestUri' queryStringCol' options' out location' ref messages); " is 154.
Long Statement,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,CheckForSiteRootRewrite,The length of the statement  "	//list should have returned all providers with site root rewrite' but double check here in case of faulty third-party logic " is 123.
Long Statement,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,GetUrlFromExtensionUrlProviders,The length of the statement  "			string customPath = provider.ChangeFriendlyUrl (tab' friendlyUrlPath' options' cultureCode' ref endingPageName' out useDnnPagePath' ref messages); " is 146.
Long Statement,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,GetUrlFromExtensionUrlProviders,The length of the statement  "					messages.Add (string.Format (format' provider.ProviderConfig.ProviderName' customPath' endingPageName' useDnnPagePath)); " is 120.
Long Statement,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The length of the statement  "				string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location); " is 192.
Long Statement,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The length of the statement  "								qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value); " is 138.
Long Statement,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,GetModuleProviders,The length of the statement  "	var moduleProviders = CBO.GetCachedObject<List<ExtensionUrlProvider>> (new CacheItemArgs (cacheKey' 60' CacheItemPriority.High' portalId)' c => { " is 145.
Long Statement,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,GetOptionsFromSettings,The length of the statement  "		PunctuationReplacement = (settings.ReplaceSpaceWith != FriendlyUrlSettings.ReplaceSpaceWithNothing) ? settings.ReplaceSpaceWith : String.Empty' " is 143.
Long Statement,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,SaveProvider,The length of the statement  "	provider.ExtensionUrlProviderId = DataProvider.Instance ().AddExtensionUrlProvider (provider.ExtensionUrlProviderId' provider.DesktopModuleId' provider.ProviderName' provider.ProviderType' provider.SettingsControlSrc' provider.IsActive' provider.RewriteAllUrls' provider.RedirectAllUrls' provider.ReplaceAllUrls); " is 313.
Long Statement,DotNetNuke.Entities.Urls,FriendlyUrlOptions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlOptions.cs,GetRegex,The length of the statement  "		return _regexLookup [regexText] = RegexUtils.GetCachedRegex (regexText' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 129.
Long Statement,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,SplitUserIdFromFriendlyUrlPath,The length of the statement  "		//remove the trailing slash from otherParamtersPath if it exists' because the other parameters may be anywhere in the path " is 122.
Long Statement,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,SplitUserIdFromFriendlyUrlPath,The length of the statement  "		const string patternFormatWithParameters = @"/?(?<rem1>.*)(?=_parm_)(?<parm1>(?<=/|^)(?:_parm_)/(?<p1v>[\d\w]+)){0'1}/?(?<op>_otherparm_){0'1}/?(?<parm2>(?<=/)(?:_parm_)/(?<p2v>[\d\w]+)){0'1}(?<rem2>.*)"; " is 204.
Long Statement,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,SplitUserIdFromFriendlyUrlPath,The length of the statement  "			remainingPath = Regex.Replace (remainingPath' Regex.Escape (otherParametersPath)' ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 143.
Long Statement,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,CheckParameterRegexReplacement,The length of the statement  "					var parmRegex = RegexUtils.GetCachedRegex (parmReplace.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 121.
Long Statement,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,CheckUserProfileReplacement,The length of the statement  "	if (portalSettings != null && tab.PortalID == portalSettings.PortalId && (tab.TabID == portalSettings.UserTabId || portalSettings.UserTabId == -1 || tab.ParentId == portalSettings.UserTabId))//-1 == all tabs in portal " is 217.
Long Statement,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,CheckUserProfileReplacement,The length of the statement  "				urlName = (!String.IsNullOrEmpty (settings.VanityUrlPrefix)) ? String.Format ("{0}/{1}"' settings.VanityUrlPrefix' user.VanityUrl) : user.VanityUrl; " is 148.
Long Statement,DotNetNuke.Entities.Urls,ExtensionUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProvider.cs,CleanNameForUrl,The length of the statement  "	string result = options != null ? FriendlyUrlController.CleanNameForUrl (urlValue' options' out changed) : FriendlyUrlController.CleanNameForUrl (urlValue' null' out changed); " is 175.
Long Statement,DotNetNuke.Entities.Urls,FriendlyUrlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlController.cs,IsMobileClient,The length of the statement  "	return (HttpContext.Current.Request.Browser != null) && (ClientCapabilityProvider.Instance () != null) && ClientCapabilityProvider.CurrentClientCapability.IsMobile; " is 164.
Long Statement,DotNetNuke.Entities.Urls,FriendlyUrlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlController.cs,CanUseMobileDevice,The length of the statement  "			if (request.Cookies [DisableMobileRedirectCookieName] != null && request.Cookies [DisableRedirectPresistCookieName] != null)//check for cookie " is 142.
Long Statement,DotNetNuke.Entities.Urls,FriendlyUrlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlController.cs,ValidateUrl,The length of the statement  "				var path = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' baseUrl' Globals.glbDefaultPage' settings.PortalAlias.HTTPAlias' false' friendlyUrlSettings' Guid.Empty); " is 170.
Long Statement,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CancelRedirect,The length of the statement  "	//redo the rewrite to fix up the problem.  The user has ticked 'permanent redirect' but hasn't supplied a forwarding Url " is 120.
Long Statement,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CancelRedirect,The length of the statement  "	if (context != null)//if no context supplied' means no rewrite was required because querystring didn't contain do301 action " is 123.
Long Statement,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForModuleProviderRedirect,The length of the statement  "	bool redirected = ExtensionUrlProviderController.CheckForRedirect (requestUri' result' queryStringCol' settings' out location' ref messages' parentTraceId); " is 156.
Long Statement,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The length of the statement  "	Dictionary<int' List<ParameterRedirectAction>> redirectActions = CacheController.GetParameterRedirects (settings' result.PortalId' ref messages); " is 145.
Long Statement,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The length of the statement  "			//OK what we have now is a list of redirects for the currently requested tab (either because it was specified by tab id' " is 120.
Long Statement,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The length of the statement  "					var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 126.
Long Statement,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The length of the statement  "							result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")"); " is 120.
Long Statement,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The length of the statement  "							result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms); " is 145.
Long Statement,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The length of the statement  "									string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty); " is 159.
Long Statement,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The length of the statement  "									result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found"); " is 173.
Long Statement,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The length of the statement  "									result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName); " is 182.
Long Statement,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,GetTabRedirectUrl,The length of the statement  "			bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (redirectTab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' parentTraceId); " is 165.
Long Statement,DotNetNuke.Entities.Urls,RedirectTokens,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectTokens.cs,AddRedirectReasonToRewritePath,The length of the statement  "	Dictionary<string' string> tokensAndValues = GetRedirectTokensAndValuesFromRewritePath (existingRewritePath' out hasDupes); " is 123.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckIfPortalAlias,The length of the statement  "						if (portal.SplashTabId > Null.NullInteger && HttpContext.Current != null && !HttpContext.Current.Request.Cookies.AllKeys.Contains ("SplashPageView")) { " is 151.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckIfPortalAlias,The length of the statement  "			RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' true' settings' out resultingUrl' out reason' out action); " is 123.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckSpecialCase,The length of the statement  "		if (defaultStart > 0 && defaultStart > lastPath)//there is a default in the path' and it's not the entire path (ie pagnamedefault and not default) " is 146.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetUser,The length of the statement  "	var vanityUrlLookupDictionary = CBO.GetCachedObject<Dictionary<string' UserInfo>> (new CacheItemArgs (cacheKey' 20' CacheItemPriority.High' portalId)' c => new Dictionary<string' UserInfo> ()); " is 193.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckTabPath,The length of the statement  "	//split off the default.aspx part and try again - compensating for gemini issue http://support.dotnetnuke.com/issue/ViewIssue.aspx?id=8651&PROJID=39 " is 148.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckTabPath,The length of the statement  "					tabLookUpKey = tabLookUpKey.Replace ("::" + String.Format ("{0}/{1}"' settings.VanityUrlPrefix' vanityUrl)' "::" + profilePagePath.TrimStart ('/').ToLowerInvariant ()); " is 168.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParametersFromModuleProvider,The length of the statement  "	rewriteParms = ExtensionUrlProviderController.TransformFriendlyUrlPath (newUrl' tabKeyVal' urlParms' isSiteRootMatch' ref result' settings' out rewrittenUrl' out newAction' ref messages' parentTraceId); " is 202.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,AddSkinToRewritePath,The length of the statement  "			rewritePath += rewritePath.Contains ("?") ? "&SkinSrc=" + skin.Replace (".ascx"' "") : "?SkinSrc=" + skin.Replace (".ascx"' ""); " is 128.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CanRewriteRequest,The length of the statement  "		if (String.IsNullOrEmpty (settings.DoNotRewriteRegex) || (!Regex.IsMatch (requestedPath' settings.DoNotRewriteRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant))) { " is 177.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetRewriteOrRequestedPath,The length of the statement  "		//if no rewrite' then the path should have been a non-friendly path' and therefore can be passed in to get the friendly Url " is 123.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetRewriteOrRequestedPath,The length of the statement  "		int aliasEnd = pathOnly.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase) + result.PortalAlias.HTTPAlias.Length; " is 146.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The length of the statement  "	var tabDict = TabIndexController.FetchTabDictionary (result.PortalId' out minTabPathDepth' out maxTabPathDepth' out minAliasPathDepth' out maxAliasPathDepth' settings' false' result.BypassCachedDictionary' parentTraceId); " is 221.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The length of the statement  "						found = CheckTabPath (tabKeyVal.Replace (" "' settings.SpaceEncodingValue) + "?" + querystringCol.ToString ().Split ('&') [0].ToLowerInvariant ()' result' settings' tabDict' ref newUrl); " is 186.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The length of the statement  "								RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' true' settings' out resultingUrl' out reason' out action); " is 123.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The length of the statement  "									newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId); " is 172.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The length of the statement  "									if ((settings.PageExtensionUsageType == PageExtensionUsageType.Never || settings.PageExtensionUsageType == PageExtensionUsageType.PageOnly) & hadExtension) { " is 157.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The length of the statement  "								RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' false' settings' out resultUrl' out reason' out action); " is 121.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The length of the statement  "								if (settings.EnableCustomProviders && ExtensionUrlProviderController.CheckForAlwaysCallProviders (result.PortalId' result.TabId' settings' parentTraceId)) { " is 156.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The length of the statement  "									newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId); " is 172.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The length of the statement  "						result.Action = (settings.DeletedTabHandlingType == DeletedTabHandlingType.Do404Error) ? ActionType.Output404 : ActionType.Redirect301; " is 135.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,IdentifyByRegEx,The length of the statement  "				//a match by regex means it's probably not a 'friendly' Url' so assume at this stage that this request will end up a 301 " is 120.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,IdentifyByTabPathEx,The length of the statement  "	if (result.DoRewrite && settings.ForcePortalDefaultLanguage && result.PortalId >= 0 && rewritePath.Contains ("language=") == false) { " is 133.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,IdentifyByTabQueryString,The length of the statement  "		if (result.RedirectAllowed && requestedPath.EndsWith (Globals.glbDefaultPage' StringComparison.OrdinalIgnoreCase) && (queryStringCol ["tabId"] != null)) { " is 154.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,IsAdminTab,The length of the statement  "	if (tabPath.StartsWith ("//" + adminPageName + "//"' StringComparison.CurrentCultureIgnoreCase) || String.Compare (tabPath' "//" + adminPageName' StringComparison.OrdinalIgnoreCase) == 0) { " is 189.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParameters,The length of the statement  "					//656 : don't allow forced lower case of the culture identifier - always convert the case to aa-AA to match the standard " is 120.
Long Statement,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParameters,The length of the statement  "	Dictionary<int' SharedList<ParameterRewriteAction>> rewriteActions = CacheController.GetParameterRewrites (urlAction.PortalId' ref messages' parentTraceId); " is 156.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "			redirectedRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (rewritePath' ActionType.Redirect301' RedirectReason.Custom_Redirect); " is 140.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "			redirectedRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (rewritePath' ActionType.Redirect302' RedirectReason.Custom_Redirect); " is 140.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "			redirectedRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (rewritePath' ActionType.Output404' RedirectReason.Custom_Redirect); " is 138.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "			newRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (newRewritePath' ActionType.CheckFor301' RedirectReason.Custom_Redirect); " is 136.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "				redirectedRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (redirectedRewritePath' ActionType.CheckFor301' RedirectReason.Custom_Redirect); " is 150.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "				newRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (newRewritePath' ActionType.CheckFor301' RedirectReason.Custom_Redirect); " is 136.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "			AddToTabDict (tabIndex' dupCheck' httpAlias' redirectTabPath' redirectedRewritePath' tab.TabID' duplicateHandlingPreference' ref tabPathDepth' checkForDupUrls' isDeleted); " is 171.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "			string wrongAliasRedirectedRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (redirectedRewritePath' ActionType.Redirect301' RedirectReason.Custom_Tab_Alias); " is 168.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "				//when adding a blank custom Url' also add in a standard tab path url' because any url that also includes querystring data will use the standard tab path " is 153.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "				string stdDictRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (rewritePath' ActionType.CheckFor301' RedirectReason.Custom_Tab_Alias); " is 145.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "				AddToTabDict (tabIndex' dupCheck' redirectAlias' tabPath' stdDictRewritePath' tab.TabID' UrlEnums.TabKeyPreference.TabOK' ref tabPathDepth' checkForDupUrls' isDeleted); " is 168.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "				AddToTabDict (tabIndex' dupCheck' redirectAlias' redirectTabPath' redirectedRewritePath' tab.TabID' duplicateHandlingPreference' ref tabPathDepth' checkForDupUrls' isDeleted); " is 175.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "				if (tab.DisableLink || !string.IsNullOrEmpty (tab.Url) || (tab.EndDate < DateTime.Now && tab.EndDate > DateTime.MinValue) || (tab.StartDate > DateTime.Now && tab.StartDate > DateTime.MinValue)) { " is 195.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "					AddToTabDict (tabIndex' dupCheck' redirectAlias' settingsUrl' settingsRewritePath' tab.TabID' UrlEnums.TabKeyPreference.TabRedirected' ref tabPathDepth' settings.CheckForDuplicateUrls' isDeleted); " is 196.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "				AddToTabDict (tabIndex' dupCheck' redirectAlias' redirectTabPath' redirectedRewritePath' tab.TabID' duplicateHandlingPreference' ref tabPathDepth' checkForDupUrls' isDeleted); " is 175.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The length of the statement  "				AddToTabDict (tabIndex' dupCheck' httpAlias' redirectTabPath' wrongAliasRedirectedRewritePath' tab.TabID' duplicateHandlingPreference' ref tabPathDepth' checkForDupUrls' isDeleted); " is 181.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddPermanentRedirectToDictionary,The length of the statement  "	AddToTabDict (tabIndex' dupCheck' httpAlias' tab.TabPath + "/tabid/" + tab.TabID + "/default"' rewritePath' tab.TabID' UrlEnums.TabKeyPreference.TabRedirected' ref tabPathDepth' checkForDupUrls' isDeleted); " is 206.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddPermanentRedirectToDictionary,The length of the statement  "	//and put in the name-less one as well' just in case a prior version of the site was runnign without the tabnames (urlformat=sefriendly) " is 136.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddPermanentRedirectToDictionary,The length of the statement  "	AddToTabDict (tabIndex' dupCheck' httpAlias' "/tabid/" + tab.TabID + "/default"' rewritePath' tab.TabID' UrlEnums.TabKeyPreference.TabRedirected' ref tabPathDepth' checkForDupUrls' isDeleted); " is 192.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddPermanentRedirectToDictionary,The length of the statement  "	AddToTabDict (tabIndex' dupCheck' httpAlias' tabPath.Replace ("//"' "/") + "/ctl/Tab"' CreateRewritePath (tab.TabID' ""' "ctl=Tab")' tab.TabID' UrlEnums.TabKeyPreference.TabRedirected' ref tabPathDepth' checkForDupUrls' isDeleted); " is 231.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddSiteRootRedirects,The length of the statement  "			AddToTabDict (tabIndex' dupCheck' httpAlias' "*"' ""' -1' UrlEnums.TabKeyPreference.TabOK' ref tempPathDepth' false' false); " is 124.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddStandardPagesToDict,The length of the statement  "	//hard coded page paths - using 'tabDeleted' in case there is a clash with an existing page (ie' someone has created a page that takes place of the standard page' created page has preference) " is 191.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddStandardPagesToDict,The length of the statement  "	AddToTabDict (tabIndex' dupCheck' httpAlias' "login"' loginRewritePath' loginTabId' loginPreference' ref tabDepth' false' false); " is 129.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddStandardPagesToDict,The length of the statement  "	AddToTabDict (tabIndex' dupCheck' httpAlias' "register"' registerRewritePath' registerTabId' registerPreference' ref tabDepth' false' false); " is 141.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddStandardPagesToDict,The length of the statement  "	AddToTabDict (tabIndex' dupCheck' httpAlias' "logoff"' portalRewritePath + "&ctl=Logoff" + cultureRewritePath' -1' UrlEnums.TabKeyPreference.TabDeleted' ref tabDepth' false' false); " is 181.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddStandardPagesToDict,The length of the statement  "	AddToTabDict (tabIndex' dupCheck' httpAlias' "terms"' portalRewritePath + "&ctl=Terms" + cultureRewritePath' -1' UrlEnums.TabKeyPreference.TabDeleted' ref tabDepth' false' false); " is 179.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddStandardPagesToDict,The length of the statement  "	AddToTabDict (tabIndex' dupCheck' httpAlias' "privacy"' portalRewritePath + "&ctl=Privacy" + cultureRewritePath' -1' UrlEnums.TabKeyPreference.TabDeleted' ref tabDepth' false' false); " is 183.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "	if (isDeleted)// don't care what setting is' redirect code will decide whether to redirect or 404 - just mark as page deleted &&  " is 128.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "		ActionType action = settings.DeletedTabHandlingType == DeletedTabHandlingType.Do404Error ? ActionType.Output404 : ActionType.Redirect301; " is 137.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "		rewritePath = tab.DisableLink ? CreateRewritePath (homeTabId' cultureCode' action' RedirectReason.Disabled_Page) : CreateRewritePath (homeTabId' cultureCode' action' RedirectReason.Deleted_Page); " is 195.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "			rewritePath = CreateRewritePath (tab.TabID' cultureCode' ActionType.Redirect301' RedirectReason.Tab_Permanent_Redirect); " is 120.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "		if (thisPortal != null && (thisPortal.UserTabId == tab.TabID || thisPortal.UserTabId == tab.ParentId || thisPortal.UserTabId == -1)) { " is 134.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "			rewritePath = RedirectTokens.AddRedirectReasonToRewritePath (rewritePath' ActionType.CheckFor301' RedirectReason.User_Profile_Url); " is 131.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "		//this entry is going to have space substitution in it' so it is added into the dictionary with a delete notification and a 301 replaced  " is 136.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "		if (!isDeleted)//if it is deleted' we don't care if the spaces were replaced' or anything else' just take care in deleted handling " is 130.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "			substituteRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (substituteRewritePath' ActionType.Redirect301' tabPath.Contains (replaceSpaceWith) ? RedirectReason.Spaces_Replaced : RedirectReason.Custom_Redirect); " is 221.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "		AddToTabDict (tabIndex' dupCheck' httpAlias' tab.TabPath' substituteRewritePath' tab.TabID' preference' ref tabPathDepth' settings.CheckForDuplicateUrls' isDeleted); " is 165.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "		AddPermanentRedirectToDictionary (tabIndex' dupCheck' httpAlias' tab' tabPath' ref rewritePath' ref tabPathDepth' settings.CheckForDuplicateUrls' isDeleted); " is 157.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "	if (tab.DisableLink || !string.IsNullOrEmpty (tab.Url) || (tab.EndDate < DateTime.Now && tab.EndDate > DateTime.MinValue) || (tab.StartDate > DateTime.Now && tab.StartDate > DateTime.MinValue)) { " is 195.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "		AddToTabDict (tabIndex' dupCheck' httpAlias' settingsUrl' settingsRewritePath' tab.TabID' UrlEnums.TabKeyPreference.TabRedirected' ref tabPathDepth' settings.CheckForDuplicateUrls' isDeleted); " is 192.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "	//inspect the optional tab redirects and add them as well' keeping track if any are '200' status' meaning the standard Url will be 301' if replaced unfriendly is switched on " is 173.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "	AddCustomRedirectsToDictionary (tabIndex' dupCheck' httpAlias' tab' settings' options' ref rewritePath' out tabPathDepth' ref customAliasesUsed' isDeleted' parentTraceId); " is 171.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "				string diacriticRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (rewritePath' ActionType.Redirect301' RedirectReason.Diacritic_Characters); " is 151.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "				AddToTabDict (tabIndex' dupCheck' httpAlias' tabPath' diacriticRewritePath' tab.TabID' UrlEnums.TabKeyPreference.TabOK' ref tabPathDepth' settings.CheckForDuplicateUrls' isDeleted); " is 181.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "				AddToTabDict (tabIndex' dupCheck' httpAlias' tabPath' rewritePath' tab.TabID' UrlEnums.TabKeyPreference.TabOK' ref tabPathDepth' settings.CheckForDuplicateUrls' isDeleted); " is 172.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "		rewritePath = RedirectTokens.AddRedirectReasonToRewritePath (rewritePath' ActionType.CheckFor301' RedirectReason.Site_Root_Home); " is 129.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "		AddToTabDict (tabIndex' dupCheck' httpAlias' tabPath' rewritePath' tab.TabID' UrlEnums.TabKeyPreference.TabOK' ref tabPathDepth' settings.CheckForDuplicateUrls' isDeleted); " is 172.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "			rewritePath = RedirectTokens.AddRedirectReasonToRewritePath (rewritePath' ActionType.Redirect301' RedirectReason.Custom_Tab_Alias); " is 131.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "			AddToTabDict (tabIndex' dupCheck' httpAlias' tabPath' rewritePath' tab.TabID' UrlEnums.TabKeyPreference.TabRedirected' ref tabPathDepth' settings.CheckForDuplicateUrls' isDeleted); " is 180.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "				rewritePath = RedirectTokens.AddRedirectReasonToRewritePath (rewritePath' ActionType.Redirect301' RedirectReason.Custom_Tab_Alias); " is 131.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "				AddToTabDict (tabIndex' dupCheck' httpAlias' tabPath' rewritePath' tab.TabID' UrlEnums.TabKeyPreference.TabRedirected' ref tabPathDepth' settings.CheckForDuplicateUrls' isDeleted); " is 180.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The length of the statement  "				AddToTabDict (tabIndex' dupCheck' httpAlias' tabPath' rewritePath' tab.TabID' dupCheckPreference' ref tabPathDepth' settings.CheckForDuplicateUrls' isDeleted); " is 159.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddToTabDict,The length of the statement  "		&& keyDupAction == UrlEnums.TabKeyPreference.TabOK && foundTAb.TabIdOriginal != "-1")//-1 tabs are login' register' privacy etc " is 127.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddToTabDict,The length of the statement  "			if (checkForDupUrls && foundTAb.TabIdOriginal != tabId.ToString ())//dont' show message for where same tab is being added twice) " is 128.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddToTabDict,The length of the statement  "						dupInSameCulture = !PortalController.GetPortalSettingAsBoolean ("ContentLocalizationEnabled"' portalId' false) || tab1.CultureCode == tab2.CultureCode; " is 151.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddToTabDict,The length of the statement  "					string msg = "Page naming conflict. Url of (" + foundTAb.TabPath + ") resolves to two separate pages (" + tab1Name + " [tabid = " + foundTAb.TabIdOriginal + "]' " + tab2Name + " [tabid = " + tabId.ToString () + "]). Only the second page will be shown for the url."; " is 265.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddToTabDict,The length of the statement  "					const string msg2 = "PLEASE NOTE : this is an information message only' this message does not affect site operations in any way."; " is 130.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddToTabDict,The length of the statement  "					log.AddProperty ("Hide this message"' "To stop this message from appearing in the log' uncheck the option for 'Produce an Exception in the Site Log if two pages have the same name/path?' in the Advanced Url Rewriting settings."); " is 229.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,The length of the statement  "		/* for the requested build portal' add in the standard urls and special rules *///735 : switch to custom method for getting portal " is 130.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,The length of the statement  "		foreach (string culture in chosenAliasesCultures.Values.Where (culture => aliasSpecificCultures.Contains (culture) == false)) { " is 127.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,The length of the statement  "				var customHttpAlias = ManageCustomAliases (tabCulture' thisPortal' tab' usingHttpAliases' customHttpAliasesUsed' out customAliasUsed); " is 134.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,The length of the statement  "							tabPathDepth = AddTabToTabDict (tabIndex' dupCheck' httpAlias' aliasCulture' customHttpAlias' thisPortal' tabPath' ref customHttpAliasesUsed' tab' settings' options' homeTabId' ref homePageSkins' parentTraceId); " is 211.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,The length of the statement  "								AddCustomRedirectsToDictionary (tabIndex' dupCheck' httpAlias' tab' settings' options' ref rewritePath' out tabPathDepth' ref customHttpAliasesUsed' tab.IsDeleted' parentTraceId); " is 179.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,The length of the statement  "							AddToTabDict (tabIndex' dupCheck' httpAlias' tab.TabPath' rewritePath' tab.TabID' UrlEnums.TabKeyPreference.TabRedirected' ref tabPathDepth' true' false); " is 154.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,The length of the statement  "						//however' we need to add it to the dictionary in case there's an old link (pre-translation/pre-friendly url/pre-alias&culture linked)  " is 134.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,The length of the statement  "						AddToTabDict (tabIndex' dupCheck' httpAlias' tab.TabPath' rewritePath' tab.TabID' UrlEnums.TabKeyPreference.TabRedirected' ref tabPathDepth' true' tab.IsDeleted); " is 162.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,The length of the statement  "				AddToTabDict (tabIndex' dupCheck' httpAlias' "*"' ""' -1' UrlEnums.TabKeyPreference.TabOK' ref tempPathDepth' false' false); " is 124.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,FetchTabDictionary,The length of the statement  "				dict = BuildTabDictionary (out depthInfo' settings' portalId' dict' out homePageSkins' out portalTabPathDictionary' parentTraceId); " is 131.
Long Statement,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,FetchTabDictionary,The length of the statement  "		dict = BuildTabDictionary (out depthInfo' settings' portalId' null' out homePageSkins' out portalTabPathDictionary' parentTraceId); " is 131.
Long Statement,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,AppendToTabPath,The length of the statement  "	if (!modified && string.IsNullOrEmpty (options.PunctuationReplacement) == false && tab.TabName.Contains (" ") && tabName.Contains (" ") == false) { " is 147.
Long Statement,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,GetTabPath,The length of the statement  "	if (homePageSiteRoot && isHomeTab && !hasPath)// && !isDefaultCultureCode - not working for non-language specifc custom root urls " is 129.
Long Statement,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,GetTabPath,The length of the statement  "			urlDict = CustomUrlDictController.FetchCustomUrlDictionary (tab.PortalID' false' false' settings' out customAliasForTabs' parentTraceId); " is 137.
Long Statement,DotNetNuke.Entities.Urls,UrlAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\UrlAction.cs,SetActionWithNoDowngrade,The length of the statement  "		if (Action != ActionType.Redirect301 && Action != ActionType.Redirect302 && Action != ActionType.Redirect302Now && Action != ActionType.Output404) { " is 148.
Long Statement,DotNetNuke.Entities.Urls,UrlRewriterUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\UrlRewriterUtils.cs,GetOptionsFromSettings,The length of the statement  "		PunctuationReplacement = (settings.ReplaceSpaceWith != FriendlyUrlSettings.ReplaceSpaceWithNothing) ? settings.ReplaceSpaceWith : String.Empty' " is 143.
Long Statement,DotNetNuke.Entities.Urls,UrlRewriterUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\UrlRewriterUtils.cs,Log404,The length of the statement  "	log.LogProperties.Add (new LogDetailInfo ("PortalAlias"' (result.PortalAlias != null) ? result.PortalAlias.HTTPAlias : String.Empty)); " is 134.
Long Statement,DotNetNuke.Entities.Urls.Config,RewriterRule,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\Config\RewriterRule.cs,GetRuleRegex,The length of the statement  "	return _matchRx ?? (_matchRx = RegexUtils.GetCachedRegex ("^" + RewriterUtils.ResolveUrl (applicationPath' LookFor) + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)); " is 181.
Long Statement,DotNetNuke.Entities.Users.Membership,MembershipPasswordController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPasswordController.cs,IsValidToken,The length of the statement  "	if (UserController.Instance.GetCurrentUserInfo ().PasswordResetToken == resetToken && UserController.Instance.GetCurrentUserInfo ().PasswordResetExpiration <= DateTime.Now) { " is 174.
Long Statement,DotNetNuke.Entities.Users.Membership,MembershipPasswordController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPasswordController.cs,FoundBannedPassword,The length of the statement  "	IEnumerable<ListEntryInfo> listEntryPortalInfos = listController.GetListEntryInfoItems (listName + "-" + settings.PortalId' ""' settings.PortalId); " is 147.
Long Statement,DotNetNuke.Entities.Users.Social.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\Data\DataService.cs,SaveRelationshipType,The length of the statement  "	return _provider.ExecuteScalar<int> ("SaveRelationshipType"' relationshipType.RelationshipTypeId' relationshipType.Direction' relationshipType.Name' relationshipType.Description' createUpdateUserId); " is 199.
Long Statement,DotNetNuke.Entities.Users.Social.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\Data\DataService.cs,SaveRelationship,The length of the statement  "	return _provider.ExecuteScalar<int> ("SaveRelationship"' relationship.RelationshipId' relationship.RelationshipTypeId' relationship.Name' relationship.Description' _provider.GetNull (relationship.UserId)' _provider.GetNull (relationship.PortalId)' relationship.DefaultResponse' createUpdateUserId); " is 298.
Long Statement,DotNetNuke.Entities.Users.Social.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\Data\DataService.cs,GetUserRelationship,The length of the statement  "	return _provider.ExecuteReader ("GetUserRelationshipsByMultipleIDs"' userId' relatedUserId' relationshipId' relationshipDirection); " is 131.
Long Statement,DotNetNuke.Entities.Users.Social.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\Data\DataService.cs,SaveUserRelationship,The length of the statement  "	return _provider.ExecuteScalar<int> ("SaveUserRelationship"' userRelationship.UserRelationshipId' userRelationship.UserId' userRelationship.RelatedUserId' userRelationship.RelationshipId' userRelationship.Status' createUpdateUserId); " is 233.
Long Statement,DotNetNuke.Entities.Users.Social.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\Data\DataService.cs,SaveUserRelationshipPreference,The length of the statement  "	return _provider.ExecuteScalar<int> ("SaveUserRelationshipPreference"' userRelationshipPreference.PreferenceId' userRelationshipPreference.UserId' userRelationshipPreference.RelationshipId' userRelationshipPreference.DefaultResponse' createUpdateUserId); " is 254.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,DeleteRelationshipType,The length of the statement  "	string logContent = string.Format (Localization.GetString ("RelationshipType_Deleted"' Localization.GlobalResourceFile)' relationshipType.Name' relationshipType.RelationshipTypeId); " is 181.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,GetAllRelationshipTypes,The length of the statement  "	var cacheArgs = new CacheItemArgs (DataCache.RelationshipTypesCacheKey' DataCache.RelationshipTypesCacheTimeOut' DataCache.RelationshipTypesCachePriority); " is 155.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,GetAllRelationshipTypes,The length of the statement  "	return CBO.GetCachedObject<IList<RelationshipType>> (cacheArgs' c => CBO.FillCollection<RelationshipType> (_dataService.GetAllRelationshipTypes ())); " is 149.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,SaveRelationshipType,The length of the statement  "	string localizationKey = (relationshipType.RelationshipTypeId == Null.NullInteger) ? "RelationshipType_Added" : "RelationshipType_Updated"; " is 139.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,SaveRelationshipType,The length of the statement  "	relationshipType.RelationshipTypeId = _dataService.SaveRelationshipType (relationshipType' UserController.Instance.GetCurrentUserInfo ().UserID); " is 145.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,SaveRelationshipType,The length of the statement  "	string logContent = string.Format (Localization.GetString (localizationKey' Localization.GlobalResourceFile)' relationshipType.Name); " is 133.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,DeleteRelationship,The length of the statement  "	string logContent = string.Format (Localization.GetString ("Relationship_Deleted"' Localization.GlobalResourceFile)' relationship.Name' relationship.RelationshipId); " is 165.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,GetRelationshipsByPortalId,The length of the statement  "	var cacheArgs = new CacheItemArgs (string.Format (DataCache.RelationshipByPortalIDCacheKey' pid)' DataCache.RelationshipByPortalIDCacheTimeOut' DataCache.RelationshipByPortalIDCachePriority' pid); " is 196.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,GetRelationshipsByPortalId,The length of the statement  "	return CBO.GetCachedObject<IList<Relationship>> (cacheArgs' c => CBO.FillCollection<Relationship> (_dataService.GetRelationshipsByPortalId ((int)c.ParamList [0]))); " is 164.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,SaveRelationship,The length of the statement  "	string localizationKey = (relationship.RelationshipId == Null.NullInteger) ? "Relationship_Added" : "Relationship_Updated"; " is 123.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,SaveRelationship,The length of the statement  "	relationship.RelationshipId = _dataService.SaveRelationship (relationship' UserController.Instance.GetCurrentUserInfo ().UserID); " is 129.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,SaveRelationship,The length of the statement  "	string logContent = string.Format (Localization.GetString (localizationKey' Localization.GlobalResourceFile)' relationship.Name); " is 129.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,DeleteUserRelationship,The length of the statement  "	string logContent = string.Format (Localization.GetString ("UserRelationship_Deleted"' Localization.GlobalResourceFile)' userRelationship.UserRelationshipId' userRelationship.UserId' userRelationship.RelatedUserId); " is 215.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,GetUserRelationship,The length of the statement  "		userRelationship = CBO.FillObject<UserRelationship> (_dataService.GetUserRelationship (user.UserID' relatedUser.UserID' relationship.RelationshipId' GetRelationshipType (relationship.RelationshipTypeId).Direction)); " is 215.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,SaveUserRelationship,The length of the statement  "	string localizationKey = (userRelationship.UserRelationshipId == Null.NullInteger) ? "UserRelationship_Added" : "UserRelationship_Updated"; " is 139.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,SaveUserRelationship,The length of the statement  "	userRelationship.UserRelationshipId = _dataService.SaveUserRelationship (userRelationship' UserController.Instance.GetCurrentUserInfo ().UserID); " is 145.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,SaveUserRelationship,The length of the statement  "	string logContent = string.Format (Localization.GetString (localizationKey' Localization.GlobalResourceFile)' userRelationship.UserRelationshipId' userRelationship.UserId' userRelationship.RelatedUserId); " is 204.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,DeleteUserRelationshipPreference,The length of the statement  "	string logContent = string.Format (Localization.GetString ("UserRelationshipPreference_Deleted"' Localization.GlobalResourceFile)' userRelationshipPreference.PreferenceId' userRelationshipPreference.UserId' userRelationshipPreference.RelationshipId); " is 250.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,GetUserRelationshipPreference,The length of the statement  "	return CBO.FillObject<UserRelationshipPreference> (_dataService.GetUserRelationshipPreference (userId' relationshipId)); " is 120.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,SaveUserRelationshipPreference,The length of the statement  "	string localizationKey = (userRelationshipPreference.PreferenceId == Null.NullInteger) ? "UserRelationshipPreference_Added" : "UserRelationshipPreference_Updated"; " is 163.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,SaveUserRelationshipPreference,The length of the statement  "	userRelationshipPreference.PreferenceId = _dataService.SaveUserRelationshipPreference (userRelationshipPreference' UserController.Instance.GetCurrentUserInfo ().UserID); " is 169.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,SaveUserRelationshipPreference,The length of the statement  "	string logContent = string.Format (Localization.GetString (localizationKey' Localization.GlobalResourceFile)' userRelationshipPreference.PreferenceId' userRelationshipPreference.UserId' userRelationshipPreference.RelationshipId); " is 229.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,InitiateUserRelationship,The length of the statement  "		throw new UserRelationshipForSameUsersException (Localization.GetExceptionMessage ("UserRelationshipForSameUsersError"' "Initiating and Target Users cannot have same UserID '{0}'."' initiatingUser.UserID)); " is 206.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,InitiateUserRelationship,The length of the statement  "		throw new UserRelationshipForDifferentPortalException (Localization.GetExceptionMessage ("UserRelationshipForDifferentPortalError"' "Portal ID '{0}' of Initiating User is different from Portal ID '{1}' of Target  User."' initiatingUser.PortalID' targetUser.PortalID)); " is 268.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,InitiateUserRelationship,The length of the statement  "		throw new UserRelationshipExistsException (Localization.GetExceptionMessage ("UserRelationshipExistsError"' "Relationship already exists for Initiating User '{0}' Target User '{1}' RelationshipID '{2}'."' initiatingUser.UserID' targetUser.UserID' relationship.RelationshipId)); " is 277.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,GetFriendsRelationshipByPortal,The length of the statement  "	return GetRelationshipsByPortalId (portalId).FirstOrDefault (re => re.RelationshipTypeId == (int)DefaultRelationshipTypes.Friends); " is 131.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,GetFollowersRelationshipByPortal,The length of the statement  "	return GetRelationshipsByPortalId (portalId).FirstOrDefault (re => re.RelationshipTypeId == (int)DefaultRelationshipTypes.Followers); " is 133.
Long Statement,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,VerifyUserRelationshipExist,The length of the statement  "		throw new UserRelationshipDoesNotExistException (Localization.GetExceptionMessage ("UserRelationshipDoesNotExistError"' "UserRelationshipID '{0}' does not exist."' userRelationshipId)); " is 185.
Long Statement,DotNetNuke.Entities.Users.Social.Internal,FollowersControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\FollowersControllerImpl.cs,FollowUser,The length of the statement  "	var relationship = RelationshipController.Instance.InitiateUserRelationship (initiatingUser' targetUser' RelationshipController.Instance.GetFollowersRelationshipByPortal (initiatingUser.PortalID)); " is 197.
Long Statement,DotNetNuke.Entities.Users.Social.Internal,FollowersControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\FollowersControllerImpl.cs,AddFollowerRequestNotification,The length of the statement  "	var notificationType = NotificationsController.Instance.GetNotificationType (IsFollowing (targetUser' initiatingUser) ? FollowerRequest : FollowBackRequest); " is 157.
Long Statement,DotNetNuke.Entities.Users.Social.Internal,FollowersControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\FollowersControllerImpl.cs,AddFollowerRequestNotification,The length of the statement  "	var subject = string.Format (Localization.GetString ("AddFollowerRequestSubject"' Localization.GlobalResourceFile)' initiatingUser.DisplayName); " is 144.
Long Statement,DotNetNuke.Entities.Users.Social.Internal,FollowersControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\FollowersControllerImpl.cs,AddFollowerRequestNotification,The length of the statement  "	var body = string.Format (Localization.GetString ("AddFollowerRequestBody"' Localization.GlobalResourceFile)' initiatingUser.DisplayName); " is 138.
Long Statement,DotNetNuke.Entities.Users.Social.Internal,FriendsControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\FriendsControllerImpl.cs,AcceptFriend,The length of the statement  "	NotificationsController.Instance.DeleteNotificationRecipient (NotificationsController.Instance.GetNotificationType (FriendRequest).NotificationTypeId' friendRelationship.UserRelationshipId.ToString (CultureInfo.InvariantCulture)' initiatingUser.UserID); " is 253.
Long Statement,DotNetNuke.Entities.Users.Social.Internal,FriendsControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\FriendsControllerImpl.cs,AddFriend,The length of the statement  "	var userRelationship = RelationshipController.Instance.InitiateUserRelationship (initiatingUser' targetUser' RelationshipController.Instance.GetFriendsRelationshipByPortal (initiatingUser.PortalID)); " is 199.
Long Statement,DotNetNuke.Entities.Users.Social.Internal,FriendsControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\FriendsControllerImpl.cs,DeleteFriend,The length of the statement  "	var friend = RelationshipController.Instance.GetUserRelationship (initiatingUser' targetUser' RelationshipController.Instance.GetFriendsRelationshipByPortal (initiatingUser.PortalID)); " is 184.
Long Statement,DotNetNuke.Entities.Users.Social.Internal,FriendsControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\FriendsControllerImpl.cs,AddFriendRequestNotification,The length of the statement  "	var subject = string.Format (Localization.GetString ("AddFriendRequestSubject"' Localization.GlobalResourceFile)' initiatingUser.DisplayName); " is 142.
Long Statement,DotNetNuke.Entities.Users.Social.Internal,FriendsControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\FriendsControllerImpl.cs,AddFriendRequestNotification,The length of the statement  "	var body = string.Format (Localization.GetString ("AddFriendRequestBody"' Localization.GlobalResourceFile)' initiatingUser.DisplayName); " is 136.
Long Statement,DotNetNuke.ExtensionPoints,ContextMenuItemExtensionControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\ExtensionPoints\ContextMenuItemExtensionControl.cs,OnInit,The length of the statement  "        <img id=""" + extension.CtxMenuItemId + @"_icon"" alt=""" + extension.AltText + @""" src=""" + icon + @""" title=""" + extension.AltText + @""">" is 144.
Long Statement,DotNetNuke.ExtensionPoints,ToolBarButtonExtensionControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\ExtensionPoints\ToolBarButtonExtensionControl.cs,RenderContents,The length of the statement  "	var filter = new CompositeFilter ().And (new FilterByHostMenu (this.IsHost)).And (new FilterByUnauthenticated (HttpContext.Current.Request.IsAuthenticated)); " is 157.
Long Statement,DotNetNuke.ExtensionPoints,ToolBarButtonRenderer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\ExtensionPoints\ToolBarButtonRenderer.cs,GetOutput,The length of the statement  "	str.AppendFormat ("<button id=\"{0}\" class=\"{1}\" onclick={4}{2}; return false;{4} title=\"{3}\">"' extension.ButtonId' cssClass' action' extension.Text' quote); " is 163.
Long Statement,DotNetNuke.ExtensionPoints,ToolBarButtonRenderer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\ExtensionPoints\ToolBarButtonRenderer.cs,GetOutput,The length of the statement  "	str.AppendFormat ("<span id='{0}_text' style='{1} background-image: url(\"{2}\");'>{3}</span>"' extension.ButtonId' !extension.ShowText ? "text-indent: -10000000px;" : ""' extension.ShowIcon ? icon : ""' extension.Text); " is 220.
Long Statement,DotNetNuke.ExtensionPoints,ToolBarMenuButtonRenderer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\ExtensionPoints\ToolBarMenuButtonRenderer.cs,GetOutput,The length of the statement  "	str.AppendFormat ("<button id='{0}' class='{1} {2}' onclick='{3}; return false;' title='{4}'>"' extension.ButtonId' cssClass' extension.MenuCssClass' action' extension.Text); " is 174.
Long Statement,DotNetNuke.ExtensionPoints,ToolBarMenuButtonRenderer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\ExtensionPoints\ToolBarMenuButtonRenderer.cs,GetOutput,The length of the statement  "	str.AppendFormat ("<span id='{0}_text' style='{1} background-image: url(\"{2}\");'>{3}</span>"' extension.ButtonId' !extension.ShowText ? "text-indent: -10000000px;" : ""' extension.ShowIcon ? icon : ""' extension.Text); " is 220.
Long Statement,DotNetNuke.ExtensionPoints,ToolBarMenuButtonRenderer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\ExtensionPoints\ToolBarMenuButtonRenderer.cs,GetItemOutput,The length of the statement  "		return string.Format ("<li class='{0}' id='{1}' ><a href='#' onclick='{2}; return false;'><span {3}>{4}</span></a></li>"' item.CssClass' item.ItemId' item.Action' item.Attributes' item.Text); " is 191.
Long Statement,DotNetNuke.ExtensionPoints,ToolBarMenuButtonRenderer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\ExtensionPoints\ToolBarMenuButtonRenderer.cs,GetItemOutput,The length of the statement  "	return string.Format ("<li><input type='{0}' name='{1}' id='{2}' value='{3}' {4} onclick='{5}; return false;'/>{6}</li>"' item.Type' item.ItemId' item.ItemId' item.Text' item.Attributes' item.Action' item.Text); " is 211.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,IsInstalled,The length of the statement  "	JavaScriptLibrary library = JavaScriptLibraryController.Instance.GetLibrary (l => l.LibraryName.Equals (jsname' StringComparison.OrdinalIgnoreCase)); " is 149.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,Version,The length of the statement  "	JavaScriptLibrary library = JavaScriptLibraryController.Instance.GetLibrary (l => l.LibraryName.Equals (jsname' StringComparison.OrdinalIgnoreCase)); " is 149.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RequestLooseVersionLibraryRegistration,The length of the statement  "	Func<JavaScriptLibrary' bool> isValidLibrary = specific == SpecificVersion.LatestMajor ? (Func<JavaScriptLibrary' bool>)(l => l.Version.Major == version.Major && l.Version.Minor >= version.Minor) : l => l.Version.Major == version.Major && l.Version.Minor == version.Minor && l.Version.Build >= version.Build; " is 308.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RequestLooseVersionLibraryRegistration,The length of the statement  "	var library = JavaScriptLibraryController.Instance.GetLibraries (l => l.LibraryName.Equals (jsname' StringComparison.OrdinalIgnoreCase)).OrderByDescending (l => l.Version).FirstOrDefault (isValidLibrary); " is 204.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RequestSpecificVersionLibraryRegistration,The length of the statement  "	JavaScriptLibrary library = JavaScriptLibraryController.Instance.GetLibrary (l => l.LibraryName.Equals (jsname' StringComparison.OrdinalIgnoreCase) && l.Version == version); " is 173.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,ResolveVersionConflicts,The length of the statement  "		var processingLibrary = JavaScriptLibraryController.Instance.GetLibrary (l => l.JavaScriptLibraryID.ToString (CultureInfo.InvariantCulture) == libraryId); " is 154.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,ResolveVersionConflicts,The length of the statement  "		var existingLatestLibrary = finalScripts.FindAll (lib => lib.LibraryName.Equals (processingLibrary.LibraryName' StringComparison.OrdinalIgnoreCase)).OrderByDescending (l => l.Version).SingleOrDefault (); " is 203.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,ResolveVersionConflicts,The length of the statement  "				var collisionText = string.Format (CultureInfo.CurrentCulture' "{0}-{1} -> {2}-{3}"' existingLatestLibrary.LibraryName' existingLatestLibrary.Version' processingLibrary.LibraryName' processingLibrary.Version); " is 209.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,GetHighestVersionLibrary,The length of the statement  "	if (Globals.Status == Globals.UpgradeStatus.Install)//if in install process' then do not use JSL but all use the legacy versions. " is 129.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,GetHighestVersionLibrary,The length of the statement  "		return JavaScriptLibraryController.Instance.GetLibraries (l => l.LibraryName.Equals (jsname' StringComparison.OrdinalIgnoreCase)).OrderByDescending (l => l.Version).FirstOrDefault (); " is 183.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,GetScriptPath,The length of the statement  "	return ("~/Resources/libraries/" + js.LibraryName + "/" + Globals.FormatVersion (js.Version' "00"' 3' "_") + "/" + js.FileName); " is 128.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,LogCollision,The length of the statement  "	EventLogController.Instance.AddLog ("Javascript Libraries"' collisionText' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.SCRIPT_COLLISION); " is 234.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RegisterScript,The length of the statement  "		var fallback = new DnnJsIncludeFallback (jsl.ObjectName' VirtualPathUtility.ToAbsolute ("~/Resources/libraries/" + jsl.LibraryName + "/" + Globals.FormatVersion (jsl.Version' "00"' 3' "_") + "/" + jsl.FileName)); " is 212.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,HandlePreInstallorLegacyItemRequests,The length of the statement  "				ClientResourceManager.RegisterScript (page' jQuery.GetJQueryScriptReference ()' FileOrder.Js.jQuery' "DnnPageHeaderProvider"); " is 126.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,HandlePreInstallorLegacyItemRequests,The length of the statement  "				ClientResourceManager.RegisterScript (page' jQuery.GetJQueryMigrateScriptReference ()' FileOrder.Js.jQueryMigrate' "DnnPageHeaderProvider"); " is 140.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,HandlePreInstallorLegacyItemRequests,The length of the statement  "				ClientResourceManager.RegisterScript (page' jQuery.GetJQueryScriptReference ()' FileOrder.Js.jQuery' "DnnPageHeaderProvider"); " is 126.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,HandlePreInstallorLegacyItemRequests,The length of the statement  "				ClientResourceManager.RegisterScript (page' jQuery.GetJQueryMigrateScriptReference ()' FileOrder.Js.jQueryMigrate' "DnnPageHeaderProvider"); " is 140.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,HandlePreInstallorLegacyItemRequests,The length of the statement  "				ClientResourceManager.RegisterScript (page' jQuery.GetJQueryUIScriptReference ()' FileOrder.Js.jQueryUI' "DnnPageHeaderProvider"); " is 130.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,HandlePreInstallorLegacyItemRequests,The length of the statement  "			//This method maybe called when Page.Form hasn't initialized yet' in that situation if needed should reference dnn js manually. " is 127.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,HandlePreInstallorLegacyItemRequests,The length of the statement  "				ClientResourceManager.RegisterScript (page' jQuery.GetJQueryScriptReference ()' FileOrder.Js.jQuery' "DnnPageHeaderProvider"); " is 126.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,HandlePreInstallorLegacyItemRequests,The length of the statement  "				ClientResourceManager.RegisterScript (page' jQuery.GetJQueryMigrateScriptReference ()' FileOrder.Js.jQueryMigrate' "DnnPageHeaderProvider"); " is 140.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,HandlePreInstallorLegacyItemRequests,The length of the statement  "				ClientResourceManager.RegisterScript (page' jQuery.GetJQueryUIScriptReference ()' FileOrder.Js.jQueryUI' "DnnPageHeaderProvider"); " is 130.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,HandlePreInstallorLegacyItemRequests,The length of the statement  "				ClientResourceManager.RegisterScript (page' "~/Resources/Shared/Scripts/jquery/jquery.hoverIntent.min.js"' FileOrder.Js.HoverIntent); " is 133.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,HandlePreInstallorLegacyItemRequests,The length of the statement  "				ClientResourceManager.RegisterScript (page' "~/Resources/Shared/Scripts/jquery/jquery.hoverIntent.min.js"' FileOrder.Js.HoverIntent); " is 133.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScriptLibraryController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScriptLibraryController.cs,GetLibraries,The length of the statement  "	return CBO.GetCachedObject<IEnumerable<JavaScriptLibrary>> (new CacheItemArgs (DataCache.JavaScriptLibrariesCacheKey' DataCache.JavaScriptLibrariesCacheTimeout' DataCache.JavaScriptLibrariesCachePriority)' c => CBO.FillCollection<JavaScriptLibrary> (DataProvider.Instance ().ExecuteReader ("GetJavaScriptLibraries"))); " is 318.
Long Statement,DotNetNuke.Framework.JavaScriptLibraries,JavaScriptLibraryController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScriptLibraryController.cs,SaveLibrary,The length of the statement  "	library.JavaScriptLibraryID = DataProvider.Instance ().ExecuteScalar<int> ("SaveJavaScriptLibrary"' library.JavaScriptLibraryID' library.PackageID' library.LibraryName' library.Version.ToString (3)' library.FileName' library.ObjectName' library.PreferredScriptLocation' library.CDNPath); " is 287.
Long Statement,DotNetNuke.Framework.Reflections,TypeLocator,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\Reflections\TypeLocator.cs,CanScan,The length of the statement  "	bool canScan = !(assemblyName.StartsWith ("clientdependency.core") || assemblyName.StartsWith ("countrylistbox") || assemblyName.StartsWith ("icsharpcode") || assemblyName.StartsWith ("fiftyone") || assemblyName.StartsWith ("lucene") || assemblyName.StartsWith ("microsoft") || assemblyName.StartsWith ("newtonsoft") || assemblyName.StartsWith ("petapoco") || assemblyName.StartsWith ("sharpziplib") || assemblyName.StartsWith ("system") || assemblyName.StartsWith ("telerik") || assemblyName.StartsWith ("webformsmvp") || assemblyName.StartsWith ("webmatrix") || assemblyName.StartsWith ("solpart")); " is 601.
Long Statement,DotNetNuke.Framework,ServicesFrameworkImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\ServicesFrameworkImpl.cs,RegisterAjaxScript,The length of the statement  "	ClientAPI.RegisterClientVariable (page' "sf_tabId"' PortalSettings.Current.ActiveTab.TabID.ToString (CultureInfo.InvariantCulture)' /*overwrite*/true); " is 151.
Long Statement,DotNetNuke.Framework,AJAX,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\AJAX.cs,AddScriptManager,The length of the statement  "				//suppress error adding script manager to support edge-case of module developers custom aspx pages that inherit from basepage and use code blocks " is 145.
Long Statement,DotNetNuke.Framework,AJAX,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\AJAX.cs,AddScriptManager,The length of the statement  "				//		stylesheetManager.CdnSettings.TelerikCdn = Host.EnableTelerikCdn ? TelerikCdnMode.Enabled : TelerikCdnMode.Disabled; " is 120.
Long Statement,DotNetNuke.Framework,AJAX,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\AJAX.cs,AddScriptManager,The length of the statement  "				//		if (stylesheetManager.CdnSettings.TelerikCdn != TelerikCdnMode.Disabled && !string.IsNullOrEmpty(Host.TelerikCdnBasicUrl)) " is 126.
Long Statement,DotNetNuke.Framework,AJAX,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\AJAX.cs,AddScriptManager,The length of the statement  "				//		if (stylesheetManager.CdnSettings.TelerikCdn != TelerikCdnMode.Disabled && !string.IsNullOrEmpty(Host.TelerikCdnSecureUrl)) " is 127.
Long Statement,DotNetNuke.Framework,AJAX,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\AJAX.cs,AddScriptManager,The length of the statement  "				//suppress error adding script manager to support edge-case of module developers custom aspx pages that inherit from basepage and use code blocks " is 145.
Long Statement,DotNetNuke.Framework,CachePageStatePersister,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\CachePageStatePersister.cs,Save,The length of the statement  "	DataCache.SetCache (key.ToString ()' state' objDependency' DateTime.Now.AddMinutes (Page.Session.Timeout)' Cache.NoSlidingExpiration' CacheItemPriority.NotRemovable' null); " is 172.
Long Statement,DotNetNuke.Framework,jQuery,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\jQuery.cs,KeepAlive,The length of the statement  "	var scriptBlock = string.Format ("(function($){{setInterval(function(){{$.get(location.href)}}' {1});}}(jQuery));"' Globals.ApplicationPath' seconds); " is 150.
Long Statement,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,GetErrorUrl,The length of the statement  "		url += string.Concat ((url.IndexOf ("?"' StringComparison.Ordinal) == -1 ? "?" : "&")' "error="' (exc == null || UserController.Instance.GetCurrentUserInfo () == null || !UserController.Instance.GetCurrentUserInfo ().IsSuperUser ? "An unexpected error has occurred" : Server.UrlEncode (exc.Message))); " is 301.
Long Statement,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,OnError,The length of the statement  "			var errorMessage = HttpUtility.UrlEncode (Localization.GetString ("NoSitesForThisInstallation.Error"' Localization.GlobalResourceFile)); " is 136.
Long Statement,DotNetNuke.Framework,Reflection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\Reflection.cs,CreateObject,The length of the statement  "		//if both the Namespace and AssemblyName are provided then we will construct an "assembly qualified typename" - ie. "NameSpace.ClassName' AssemblyName"  " is 151.
Long Statement,DotNetNuke.Framework,Reflection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\Reflection.cs,CreateObject,The length of the statement  "			//dynamically create the typename from the constants ( this enables private assemblies to share the same configuration as the base provider )  " is 141.
Long Statement,DotNetNuke.Framework,Reflection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\Reflection.cs,CreateObject,The length of the statement  "			TypeName = ObjectNamespace + "." + objProviderConfiguration.DefaultProvider + "' " + ObjectAssemblyName + (fixAssemblyName ? "." + objProviderConfiguration.DefaultProvider : string.Empty); " is 188.
Long Statement,DotNetNuke.Framework,Reflection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\Reflection.cs,CreateObject,The length of the statement  "			//dynamically create the typename from the constants ( this enables private assemblies to share the same configuration as the base provider )  " is 141.
Long Statement,DotNetNuke.Framework,Reflection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\Reflection.cs,CreateObject,The length of the statement  "			TypeName = ObjectNamespace + "." + ObjectProviderName + "' " + ObjectAssemblyName + (fixAssemblyName ? "." + ObjectProviderName : string.Empty); " is 144.
Long Statement,DotNetNuke.Framework,Reflection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\Reflection.cs,CreateObject,The length of the statement  "				//dynamically create the typename from the constants ( this enables private assemblies to share the same configuration as the base provider )  " is 141.
Long Statement,DotNetNuke.Framework,Reflection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\Reflection.cs,CreateObject,The length of the statement  "				//dynamically create the typename from the constants ( this enables private assemblies to share the same configuration as the base provider )  " is 141.
Long Statement,DotNetNuke.Entities.Icons,IconController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Icons\IconController.cs,GetFileIconUrl,The length of the statement  "	if (!string.IsNullOrEmpty (extension) && File.Exists (HostingEnvironment.MapPath (IconURL ("Ext" + extension' "32x32"' "Standard")))) { " is 135.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,ProcessSecurityRole,The length of the statement  "	//permissions strings are encoded with Deny permissions at the beginning and Grant permissions at the end for optimal performance " is 129.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,InputFilter,The length of the statement  "		var removeAngleBrackets = Config.GetSetting ("RemoveAngleBrackets") != null && Boolean.Parse (Config.GetSetting ("RemoveAngleBrackets")); " is 137.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Replace,The length of the statement  "			inputString = listEntryHostInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' removeItem.Value' options)); " is 182.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Replace,The length of the statement  "			listEntryPortalInfos = listController.GetListEntryInfoItems (listName + "-" + settings.PortalId' ""' settings.PortalId); " is 120.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Replace,The length of the statement  "			inputString = listEntryHostInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' removeItem.Value' options)); " is 182.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Replace,The length of the statement  "			inputString = listEntryPortalInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' removeItem.Value' options)); " is 184.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Replace,The length of the statement  "			listEntryPortalInfos = listController.GetListEntryInfoItems (listName + "-" + settings.PortalId' ""' settings.PortalId); " is 120.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Replace,The length of the statement  "			inputString = listEntryPortalInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' removeItem.Value' options)); " is 184.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Remove,The length of the statement  "			inputString = listEntryHostInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' string.Empty' options)); " is 178.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Remove,The length of the statement  "			listEntryPortalInfos = listController.GetListEntryInfoItems (listName + "-" + settings.PortalId' ""' settings.PortalId); " is 120.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Remove,The length of the statement  "			inputString = listEntryHostInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' string.Empty' options)); " is 178.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Remove,The length of the statement  "			inputString = listEntryPortalInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' string.Empty' options)); " is 180.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Remove,The length of the statement  "			listEntryPortalInfos = listController.GetListEntryInfoItems (listName + "-" + settings.PortalId' ""' settings.PortalId); " is 120.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Remove,The length of the statement  "			inputString = listEntryPortalInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' string.Empty' options)); " is 180.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,SignIn,The length of the statement  "		var authenticationTicket = createPersistentCookie ? new FormsAuthenticationTicket (user.Username' true' Config.GetPersistentCookieTimeout ()) : new FormsAuthenticationTicket (user.Username' false' Config.GetAuthCookieTimeout ()); " is 229.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,SignOut,The length of the statement  "	//clear any authentication provider tokens that match *UserToken convention e.g FacebookUserToken 'TwitterUserToken' LiveUserToken and GoogleUserToken " is 150.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,GetCookieDomain,The length of the statement  "		var group = groupController.GetPortalGroups ().SingleOrDefault (p => p.MasterPortalId == PortalController.GetEffectivePortalId (portalId)); " is 139.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,GetCookieDomain,The length of the statement  "		if (@group != null && !string.IsNullOrEmpty (@group.AuthenticationDomain) && PortalSettings.Current.PortalAlias.HTTPAlias.Contains (@group.AuthenticationDomain)) { " is 163.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,IsDenied,The length of the statement  "		//permissions strings are encoded with Deny permissions at the beginning and Grant permissions at the end for optimal performance " is 129.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,IsDenied,The length of the statement  "					if (settings != null && !(settings.PortalId == objUserInfo.PortalID && objUserInfo.IsInRole (settings.AdministratorRoleName))) { " is 128.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,IsInRole,The length of the statement  "	if (!string.IsNullOrEmpty (role) && role == Globals.glbRoleUnauthUserName && !HttpContext.Current.Request.IsAuthenticated) { " is 124.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,IsInRole,The length of the statement  "	return IsInRoles (UserController.Instance.GetCurrentUserInfo ()' PortalController.Instance.GetCurrentPortalSettings ()' role); " is 126.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,HasEditPermissions,The length of the statement  "	return ModulePermissionController.HasModulePermission (new ModulePermissionCollection (CBO.FillCollection (DataProvider.Instance ().GetModulePermissionsByModuleID (ModuleId' -1)' typeof(ModulePermissionInfo)))' "EDIT"); " is 219.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,HasEditPermissions,The length of the statement  "	return ModulePermissionController.HasModulePermission (ModulePermissionController.GetModulePermissions (ModuleId' Tabid)' "EDIT"); " is 130.
Long Statement,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,UserLogin,The length of the statement  "	UserInfo objUser = UserController.UserLogin (PortalID' Username' Password' ""' PortalName' IP' ref loginStatus' CreatePersistentCookie); " is 136.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateDNNUser,The length of the statement  "	string userName = objSecurity.InputFilter (user.Username' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 178.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateDNNUser,The length of the statement  "	string email = objSecurity.InputFilter (user.Email' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 172.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateDNNUser,The length of the statement  "	string lastName = objSecurity.InputFilter (user.LastName' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 178.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateDNNUser,The length of the statement  "	string firstName = objSecurity.InputFilter (user.FirstName' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 180.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateDNNUser,The length of the statement  "	string displayName = objSecurity.InputFilter (user.DisplayName' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 184.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateDNNUser,The length of the statement  "		user.UserID = Convert.ToInt32 (_dataProvider.AddUser (user.PortalID' userName' firstName' lastName' user.AffiliateID' user.IsSuperUser' email' displayName' updatePassword' isApproved' UserController.Instance.GetCurrentUserInfo ().UserID)); " is 239.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateMemberhipUser,The length of the statement  "	string userName = portalSecurity.InputFilter (user.Username' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 181.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateMemberhipUser,The length of the statement  "	string email = portalSecurity.InputFilter (user.Email' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 175.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateMemberhipUser,The length of the statement  "		System.Web.Security.Membership.CreateUser (userName' user.Membership.Password' email' user.Membership.PasswordQuestion' user.Membership.PasswordAnswer' true' out status); " is 170.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetMembershipUser,The length of the statement  "	return CBO.GetCachedObject<MembershipUser> (new CacheItemArgs (GetCacheKey (userName)' DataCache.UserCacheTimeOut' DataCache.UserCachePriority' userName)' GetMembershipUserCallBack); " is 182.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,UpdateUserMembership,The length of the statement  "	string email = portalSecurity.InputFilter (user.Email' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 175.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,UpdateUserMembership,The length of the statement  "		throw new Exception (Localization.GetExceptionMessage ("UpdateUserMembershipFailed"' "Asp.net membership update user failed.")' ex); " is 132.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,ValidateLogin,The length of the statement  "	if (loginStatus != UserLoginStatus.LOGIN_USERLOCKEDOUT && (loginStatus != UserLoginStatus.LOGIN_USERNOTAPPROVED || user.IsInRole ("Unverified Users"))) { " is 153.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,ChangeUsername,The length of the statement  "	EventLogController.Instance.AddLog ("userId"' userId.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.USERNAME_UPDATED); " is 225.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateUser,The length of the statement  "			// Check that the OAuth service currently being used for login is the same as was previously used (this should always be true if user authenticated to userid) " is 158.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateUser,The length of the statement  "				//DNN-4133 Change username to email address to ensure multiple users with the same email prefix' but different email domains can authenticate " is 141.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateUser,The length of the statement  "			EventLogController.Instance.AddLog ("CreateUser"' "Exception checking oauth authentication in CreateUser for userid : " + user.UserID + " " + ex.InnerException.Message' EventLogController.EventLogType.ADMIN_ALERT); " is 214.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUserByUserName,The length of the statement  "	var objUserInfo = CBO.GetCachedObject<UserInfo> (new CacheItemArgs (string.Format (DataCache.UserCacheKey' portalId' username)' DataCache.UserCacheTimeOut' DataCache.UserCachePriority)' _ => { " is 192.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsers,The length of the statement  "	return FillUserCollection (portalId' _dataProvider.GetAllUsers (portalId' pageIndex' pageSize' includeDeleted' superUsersOnly)' ref totalRecords); " is 146.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersAdvancedSearch,The length of the statement  "	return FillUserList (portalId' _dataProvider.GetUsersAdvancedSearch (portalId' userId' filterUserId' filterRoleId' relationshipTypeId' isAdmin' pageIndex' pageSize' sortColumn' sortAscending' propertyNames' propertyValues)); " is 224.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersBasicSearch,The length of the statement  "	return FillUserList (portalId' _dataProvider.GetUsersBasicSearch (portalId' pageIndex' pageSize' sortColumn' sortAscending' propertyName' propertyValue)); " is 154.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByEmail,The length of the statement  "	return FillUserCollection (portalId' _dataProvider.GetUsersByEmail (portalId' emailToMatch' pageIndex' pageSize' includeDeleted' superUsersOnly)' ref totalRecords); " is 164.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByUserName,The length of the statement  "	return FillUserCollection (portalId' _dataProvider.GetUsersByUsername (portalId' userNameToMatch' pageIndex' pageSize' includeDeleted' superUsersOnly)' ref totalRecords); " is 170.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByDisplayName,The length of the statement  "	return FillUserCollection (portalId' _dataProvider.GetUsersByDisplayname (portalId' nameToMatch' pageIndex' pageSize' includeDeleted' superUsersOnly)' ref totalRecords); " is 169.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByProfileProperty,The length of the statement  "	return GetUsersByProfileProperty (portalId' propertyName' propertyValue' pageIndex' pageSize' ref totalRecords' false' false); " is 126.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GetUsersByProfileProperty,The length of the statement  "	return FillUserCollection (portalId' _dataProvider.GetUsersByProfileProperty (portalId' propertyName' propertyValue' pageIndex' pageSize' includeDeleted' superUsersOnly)' ref totalRecords); " is 189.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,UpdateUser,The length of the statement  "	string firstName = objSecurity.InputFilter (user.FirstName' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 180.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,UpdateUser,The length of the statement  "	string lastName = objSecurity.InputFilter (user.LastName' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 178.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,UpdateUser,The length of the statement  "	string email = objSecurity.InputFilter (user.Email' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 172.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,UpdateUser,The length of the statement  "	string displayName = objSecurity.InputFilter (user.DisplayName' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 184.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,UpdateUser,The length of the statement  "	_dataProvider.UpdateUser (user.UserID' user.PortalID' firstName' lastName' user.IsSuperUser' email' displayName' user.VanityUrl' updatePassword' isApproved' false' user.LastIPAddress' user.PasswordResetToken' user.PasswordResetExpiration' user.IsDeleted' UserController.Instance.GetCurrentUserInfo ().UserID); " is 309.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,UserLogin,The length of the statement  "	UserInfo user = (authType == "DNN") ? GetUserByUserName (portalId' username) : GetUserByAuthToken (portalId' username' authType); " is 129.
Long Statement,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,UserLogin,The length of the statement  "				if (PortalController.Instance.GetCurrentPortalSettings ().UserRegistration == (int)Globals.PortalRegistrationType.PublicRegistration) { " is 135.
Long Statement,DotNetNuke.Security.Profile,DNNProfileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Profile\DNNProfileProvider.cs,UpdateUserProfile,The length of the statement  "			_dataProvider.UpdateProfileProperty (Null.NullInteger' user.UserID' profProperty.PropertyDefinitionId' propertyValue' (int)profProperty.ProfileVisibility.VisibilityMode' profProperty.ProfileVisibility.ExtendedVisibilityString ()' DateTime.Now); " is 244.
Long Statement,DotNetNuke.Security.Profile,DNNProfileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Profile\DNNProfileProvider.cs,UpdateUserProfile,The length of the statement  "			EventLogController.Instance.AddLog (user' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' "USERPROFILE_UPDATED"); " is 178.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,GetFolderContent,The length of the statement  "		throw new AssetManagerException (Localization.Localization.GetExceptionMessage ("UserHasNoPermissionToBrowseFolder"' UserHasNoPermissionToBrowseFolderDefaultMessage)); " is 167.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,GetFolderContent,The length of the statement  "		folders = GetFolders (folder' sortProperties.Column == "ItemName" ? "FolderName" : sortProperties.Column' sortProperties.Ascending).ToList (); " is 142.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,GetFolders,The length of the statement  "	var folders = FolderManager.Instance.GetFolders (parentFolder).Where (f => HasPermission (f' "BROWSE") || HasPermission (f' "READ")); " is 133.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,ApplyOrder,The length of the statement  "	var result = typeof(Queryable).GetMethods ().Single (method => method.Name == methodName && method.IsGenericMethodDefinition && method.GetGenericArguments ().Length == 2 && method.GetParameters ().Length == 2).MakeGenericMethod (typeof(T)' property.PropertyType).Invoke (null' new object[] { " is 291.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,RenameFile,The length of the statement  "		throw new AssetManagerException (Localization.Localization.GetExceptionMessage ("FileNameInvalid"' FileNameInvalidDefaultMessage' newFileName)); " is 144.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,RenameFile,The length of the statement  "		throw new AssetManagerException (Localization.Localization.GetExceptionMessage ("FolderFileNameIsReserved"' FolderFileNameIsReservedDefaultMessage)); " is 149.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,RenameFile,The length of the statement  "		throw new AssetManagerException (Localization.Localization.GetExceptionMessage ("UserHasNoPermissionToEditFile"' UserHasNoPermissionToEditFileDefaultMessage)); " is 159.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,RenameFolder,The length of the statement  "		throw new AssetManagerException (Localization.Localization.GetExceptionMessage ("FolderFileNameIsReserved"' FolderFileNameIsReservedDefaultMessage)); " is 149.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,RenameFolder,The length of the statement  "		throw new AssetManagerException (Localization.Localization.GetExceptionMessage ("UserHasNoPermissionToEditFolder"' UserHasNoPermissionToEditFolderDefaultMessage)); " is 163.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,RenameFolder,The length of the statement  "		throw new AssetManagerException (Localization.Localization.GetExceptionMessage ("FolderAlreadyExists"' FolderAlreadyExistsDefultMessage' newFolderName)); " is 153.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,CreateFolder,The length of the statement  "		throw new AssetManagerException (Localization.Localization.GetExceptionMessage ("FolderFileNameIsReserved"' FolderFileNameIsReservedDefaultMessage)); " is 149.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,CreateFolder,The length of the statement  "		throw new AssetManagerException (Localization.Localization.GetExceptionMessage ("UserHasNoPermissionToAdd"' UserHasNoPermissionToAddDefaultMessage)); " is 149.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,CreateFolder,The length of the statement  "	var folderPath = PathUtils.Instance.FormatFolderPath (PathUtils.Instance.FormatFolderPath (PathUtils.Instance.StripFolderPath (parentFolder.FolderPath).Replace ("\\"' "/")) + filterFolderName); " is 193.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,CreateFolder,The length of the statement  "		throw new AssetManagerException (Localization.Localization.GetExceptionMessage ("InvalidMappedPath"' InvalidMappedPathDefaultMessage)); " is 135.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,CreateFolder,The length of the statement  "		throw new AssetManagerException (Localization.Localization.GetExceptionMessage ("FolderAlreadyExists"' FolderAlreadyExistsDefaultMessage' filterFolderName)); " is 157.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,GetInvalidCharsErrorText,The length of the statement  "	throw new AssetManagerException (Localization.Localization.GetExceptionMessage ("FolderFileNameHasInvalidcharacters"' FolderFileNameHasInvalidcharactersDefaultMessage' "\\:/*?\"<>|")); " is 184.
Long Statement,DotNetNuke.Services.Assets,AssetManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\AssetManager.cs,GetFolderInfo,The length of the statement  "		throw new AssetManagerException (Localization.Localization.GetExceptionMessage ("FolderDoesNotExists"' DefaultMessageDefaultMessage)); " is 134.
Long Statement,DotNetNuke.Services.Authentication,AuthenticationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\AuthenticationController.cs,AddAuthentication,The length of the statement  "	EventLogController.Instance.AddLog (authSystem' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.AUTHENTICATION_CREATED); " is 217.
Long Statement,DotNetNuke.Services.Authentication,AuthenticationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\AuthenticationController.cs,AddAuthentication,The length of the statement  "	return provider.AddAuthentication (authSystem.PackageID' authSystem.AuthenticationType' authSystem.IsEnabled' authSystem.SettingsControlSrc' authSystem.LoginControlSrc' authSystem.LogoffControlSrc' UserController.Instance.GetCurrentUserInfo ().UserID); " is 252.
Long Statement,DotNetNuke.Services.Authentication,AuthenticationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\AuthenticationController.cs,AddUserAuthentication,The length of the statement  "		EventLogController.Instance.AddLog ("userID/authenticationType"' userID + "/" + authenticationType' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.AUTHENTICATION_USER_CREATED); " is 270.
Long Statement,DotNetNuke.Services.Authentication,AuthenticationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\AuthenticationController.cs,AddUserAuthentication,The length of the statement  "		return provider.AddUserAuthentication (userID' authenticationType' authenticationToken' UserController.Instance.GetCurrentUserInfo ().UserID); " is 142.
Long Statement,DotNetNuke.Services.Authentication,AuthenticationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\AuthenticationController.cs,AddUserAuthentication,The length of the statement  "		EventLogController.Instance.AddLog ("userID/authenticationType already exists"' userID + "/" + authenticationType' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.AUTHENTICATION_USER_UPDATED); " is 285.
Long Statement,DotNetNuke.Services.Authentication,AuthenticationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\AuthenticationController.cs,DeleteAuthentication,The length of the statement  "	EventLogController.Instance.AddLog (authSystem' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.AUTHENTICATION_DELETED); " is 217.
Long Statement,DotNetNuke.Services.Authentication,AuthenticationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\AuthenticationController.cs,GetAuthenticationServices,The length of the statement  "	return CBO.GetCachedObject<List<AuthenticationInfo>> (new CacheItemArgs (DataCache.AuthenticationServicesCacheKey' DataCache.AuthenticationServicesCacheTimeOut' DataCache.AuthenticationServicesCachePriority)' GetAuthenticationServicesCallBack); " is 244.
Long Statement,DotNetNuke.Services.Authentication,AuthenticationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\AuthenticationController.cs,GetLogoffRedirectURL,The length of the statement  "				_RedirectURL = (request != null && request.UrlReferrer != null) ? request.UrlReferrer.PathAndQuery : TestableGlobals.Instance.NavigateURL (settings.ActiveTab.TabID); " is 165.
Long Statement,DotNetNuke.Services.Authentication,AuthenticationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\AuthenticationController.cs,GetLogoffRedirectURL,The length of the statement  "			_RedirectURL = TestableGlobals.Instance.GetPortalDomainName (settings.PortalAlias.HTTPAlias' request' true) + "/" + Globals.glbDefaultPage; " is 139.
Long Statement,DotNetNuke.Services.Authentication,AuthenticationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\AuthenticationController.cs,UpdateAuthentication,The length of the statement  "	provider.UpdateAuthentication (authSystem.AuthenticationID' authSystem.PackageID' authSystem.AuthenticationType' authSystem.IsEnabled' authSystem.SettingsControlSrc' authSystem.LoginControlSrc' authSystem.LogoffControlSrc' UserController.Instance.GetCurrentUserInfo ().UserID); " is 277.
Long Statement,DotNetNuke.Services.Authentication,AuthenticationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\AuthenticationController.cs,UpdateAuthentication,The length of the statement  "	EventLogController.Instance.AddLog (authSystem' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.AUTHENTICATION_UPDATED); " is 217.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,ExchangeCodeForToken,The length of the statement  "	parameters.Add (new QueryParameter (OAuthRedirectUriKey' HttpContext.Current.Server.UrlEncode (CallbackUri.ToString ()))); " is 122.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,ExchangeCodeForToken,The length of the statement  "	parameters.Add (new QueryParameter (OAuthClientSecretKey' HttpContext.Current.Server.UrlEncode (APISecret.ToString ()))); " is 121.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,ExecuteAuthorizedRequest,The length of the statement  "	string sig = GenerateSignature (uri' AuthToken' TokenSecret' String.Empty' verifier' method.ToString ()' timeStamp' nonce' out outUrl' out requestParameters); " is 158.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,ExecuteWebRequest,The length of the statement  "			//Authentication providers needing an "Authorization: Basic/bearer base64(clientID:clientSecret)" header. OAuthHeaderCode might be: Basic/Bearer/empty. " is 151.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,RequestToken,The length of the statement  "	string sig = GenerateSignature (RequestTokenEndpoint' String.Empty' String.Empty' CallbackUri.OriginalString' String.Empty' RequestTokenMethod.ToString ()' timeStamp' nonce' out outUrl' out requestParameters); " is 209.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,RequestToken,The length of the statement  "	string ret = ExecuteWebRequest (RequestTokenMethod' new Uri (outUrl)' String.Empty' headerParameters.ToAuthorizationString ()); " is 127.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,AuthenticateUser,The length of the statement  "	var objUserInfo = UserController.ValidateUser (settings.PortalId' userName' ""' Service' ""' settings.PortalName' IPAddress' ref loginStatus); " is 142.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,AuthenticateUser,The length of the statement  "	if (objUserInfo == null || (string.IsNullOrEmpty (objUserInfo.DisplayName) && !string.IsNullOrEmpty (user.DisplayName))) { " is 122.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,AuthenticateUser,The length of the statement  "	if (objUserInfo == null || (string.IsNullOrEmpty (objUserInfo.Profile.GetPropertyValue ("ProfileImage")) && !string.IsNullOrEmpty (user.ProfileImage))) { " is 153.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,AuthenticateUser,The length of the statement  "	if (objUserInfo == null || (string.IsNullOrEmpty (objUserInfo.Profile.GetPropertyValue ("Website")) && !string.IsNullOrEmpty (user.Website))) { " is 143.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,AuthenticateUser,The length of the statement  "	if ((objUserInfo == null || (string.IsNullOrEmpty (objUserInfo.Profile.GetPropertyValue ("PreferredLocale")))) && !string.IsNullOrEmpty (user.Locale)) { " is 152.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,GenerateSignature,The length of the statement  "	string signatureBase = GenerateSignatureBase (url' token' callbackurl' oauthVerifier' httpMethod' timeStamp' nonce' out normalizedUrl' out requestParameters); " is 158.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,GenerateSignature,The length of the statement  "		Key = Encoding.ASCII.GetBytes (string.Format ("{0}&{1}"' UrlEncode (APISecret)' string.IsNullOrEmpty (tokenSecret) ? "" : UrlEncode (tokenSecret))) " is 147.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,GetCurrentUser,The length of the statement  "	string responseText = (OAuthVersion == "1.0") ? ExecuteAuthorizedRequest (HttpMethod.GET' MeGraphEndpoint) : ExecuteWebRequest (HttpMethod.GET' GenerateRequestUri (MeGraphEndpoint.ToString ()' accessToken)' null' String.Empty); " is 227.
Long Statement,DotNetNuke.Services.Authentication.OAuth,OAuthConfigBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthConfigBase.cs,UpdateConfig,The length of the statement  "	PortalController.UpdatePortalSetting (config.PortalID' config.Service + "_Enabled"' config.Enabled.ToString (CultureInfo.InvariantCulture)); " is 140.
Long Statement,DotNetNuke.Services.ClientDependency,PurgeClientDependencyFiles,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ClientDependency\PurgeClientDependencyFiles.cs,DoWork,The length of the statement  "		string[] filePaths = Directory.GetFiles (string.Format ("{0}/App_Data/ClientDependency"' Common.Globals.ApplicationMapPath)); " is 125.
Long Statement,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,EncryptParameter,The length of the statement  "				using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateEncryptor (byteKey' byteVector)' CryptoStreamMode.Write)) { " is 136.
Long Statement,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,DecryptParameter,The length of the statement  "						using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateDecryptor (byteKey' byteVector)' CryptoStreamMode.Write)) { " is 136.
Long Statement,DotNetNuke.Services.Exceptions,ErrorContainer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\ErrorContainer.cs,FormatException,The length of the statement  "	m = UI.Skins.Skin.GetModuleMessageControl (Localization.Localization.GetString ("ErrorOccurred")' strError' ModuleMessage.ModuleMessageType.RedError); " is 150.
Long Statement,DotNetNuke.Services.Exceptions,ErrorContainer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\ErrorContainer.cs,FormatException,The length of the statement  "		m = UI.Skins.Skin.GetModuleMessageControl (strError' HttpUtility.HtmlEncode (exc.ToString ())' ModuleMessage.ModuleMessageType.RedError); " is 137.
Long Statement,DotNetNuke.Services.Exceptions,ErrorContainer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\ErrorContainer.cs,FormatException,The length of the statement  "		m = UI.Skins.Skin.GetModuleMessageControl (Localization.Localization.GetString ("ErrorOccurred")' strError' ModuleMessage.ModuleMessageType.RedError); " is 150.
Long Statement,DotNetNuke.Services.Exceptions,ExceptionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\ExceptionInfo.cs,ReadXml,The length of the statement  "	} while (reader.ReadState != ReadState.EndOfFile && reader.NodeType != XmlNodeType.None && !String.IsNullOrEmpty (reader.LocalName)); " is 133.
Long Statement,DotNetNuke.Services.Exceptions,ExceptionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\ExceptionInfo.cs,ToString,The length of the statement  "	str.Append ("<p><strong>InnerStackTrace:</strong><pre>" + InnerStackTrace.Replace (") at "' ")<br/>at ") + "</pre></p>"); " is 121.
Long Statement,DotNetNuke.Services.Exceptions,Exceptions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\Exceptions.cs,ProcessHttpException,The length of the statement  "	var notFoundErrorString = Localization.Localization.GetString ("ResourceNotFound"' Localization.Localization.SharedResourceFile); " is 129.
Long Statement,DotNetNuke.Services.Exceptions,Exceptions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\Exceptions.cs,ProcessHttpException,The length of the statement  "	var notFoundErrorString = Localization.Localization.GetString ("ResourceNotFound"' Localization.Localization.SharedResourceFile); " is 129.
Long Statement,DotNetNuke.Services.Exceptions,Exceptions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\Exceptions.cs,ProcessHttpException,The length of the statement  "	var notFoundErrorString = Localization.Localization.GetString ("ResourceNotFound"' Localization.Localization.SharedResourceFile); " is 129.
Long Statement,DotNetNuke.Services.Exceptions,Exceptions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\Exceptions.cs,ProcessHttpException,The length of the statement  "	var notFoundErrorString = Localization.Localization.GetString ("ResourceNotFound"' Localization.Localization.SharedResourceFile); " is 129.
Long Statement,DotNetNuke.Services.Exceptions,Exceptions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\Exceptions.cs,ProcessModuleLoadException,The length of the statement  "				friendlyMessageOverride = string.Concat (exc.Message' " in "' httpParseError.VirtualPath' ":line "' httpParseError.Line); " is 121.
Long Statement,DotNetNuke.Services.FileSystem,FileLinkClickController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileLinkClickController.cs,GetFileLinkClick,The length of the statement  "	return TestableGlobals.Instance.LinkClick (String.Format ("fileid={0}"' file.FileId)' Null.NullInteger' Null.NullInteger' true' false' portalId' linkClickPortalSettigns.EnableUrlLanguage' linkClickPortalSettigns.PortalGUID); " is 224.
Long Statement,DotNetNuke.Services.FileSystem,FileUrlHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileUrlHelper.cs,IsLinkClickURLFormat,The length of the statement  "	if (requestPath.EndsWith (@"/LinkClick.aspx"' StringComparison.OrdinalIgnoreCase) && requestQueryString ["fileticket"] != null) { " is 129.
Long Statement,DotNetNuke.Services.FileSystem,FileVersionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileVersionController.cs,AddFileVersion,The length of the statement  "	var newVersion = DataProvider.Instance ().AddFileVersion (file.FileId' file.UniqueId' file.VersionGuid' file.FileName' file.Extension' file.Size' file.Width' file.Height' file.ContentType' file.Folder' file.FolderId' userId' file.SHA1Hash' file.LastModificationTime' file.Title' file.EnablePublishPeriod' file.StartDate' file.EndDate' file.ContentItemID' published' fileContent); " is 379.
Long Statement,DotNetNuke.Services.FileSystem,FolderMappingsConfigController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderMappings\FolderMappingsConfigController.cs,FillFolderMappings,The length of the statement  "		FolderMappings.Add (XmlUtils.GetNodeValue (folderMappingNode' "folderPath")' XmlUtils.GetNodeValue (folderMappingNode' "folderTypeName")); " is 138.
Long Statement,DotNetNuke.Services.FileSystem,DatabaseFolderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Providers\DatabaseFolderProvider.cs,GetFileStream,The length of the statement  "	return file != null ? GetFileStreamInternal (DataProvider.Instance ().GetFileVersionContent (file.FileId' version)) : null; " is 123.
Long Statement,DotNetNuke.Services.FileSystem,FileInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileInfo.cs,LoadHashProperty,The length of the statement  "	var currentHashCode = FolderProvider.Instance (FolderMappingController.Instance.GetFolderMapping (FolderMappingID).FolderProviderType).GetHashCode (this); " is 154.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,AddFileToFolderProvider,The length of the statement  "		throw new FolderProviderException (Localization.Localization.GetExceptionMessage ("UnderlyingSystemError"' "The underlying system threw an exception.")' ex); " is 157.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,DeleteFileFromFolderProvider,The length of the statement  "		throw new FolderProviderException (Localization.Localization.GetExceptionMessage ("UnderlyingSystemError"' "The underlying system threw an exception.")' ex); " is 157.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,AddFile,The length of the statement  "	return AddFile (folder' fileName' fileContent' true' false' false' GetContentType (Path.GetExtension (fileName))' GetCurrentUserID ()); " is 135.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,AddFile,The length of the statement  "	return AddFile (folder' fileName' fileContent' overwrite' false' false' GetContentType (Path.GetExtension (fileName))' GetCurrentUserID ()); " is 140.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,AddFile,The length of the statement  "		log.LogProperties.Add (new LogDetailInfo ("Following file was imported/uploaded' but is not an authorized filetype: "' fileName)); " is 130.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,AddFile,The length of the statement  "				if (folderWorkflow.WorkflowID == SystemWorkflowManager.Instance.GetDirectPublishWorkflow (folderWorkflow.PortalID).WorkflowID) { " is 128.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,AddFile,The length of the statement  "			//add file into database after file saved into folder provider for remote folder providers to avoid multiple thread issue. " is 122.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,AddFile,The length of the statement  "			throw new FolderProviderException (Localization.Localization.GetExceptionMessage ("AddFileUnderlyingSystemError"' "The underlying system threw an exception. The file has not been added.")' ex); " is 193.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,CheckFileAddingRestrictions,The length of the statement  "		throw new PermissionsNotMetException (Localization.Localization.GetExceptionMessage ("AddFilePermissionsNotMet"' "Permissions are not met. The file has not been added.")); " is 171.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,CheckFileAddingRestrictions,The length of the statement  "	if (!IsAllowedExtension (fileName) && !(UserController.Instance.GetCurrentUserInfo ().IsSuperUser && ignoreWhiteList)) { " is 120.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,CheckFileAddingRestrictions,The length of the statement  "		throw new InvalidFileExtensionException (string.Format (Localization.Localization.GetExceptionMessage ("AddFileExtensionNotAllowed"' "The extension '{0}' is not allowed. The file has not been added.")' Path.GetExtension (fileName))); " is 233.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,NotifyFileAddingEvents,The length of the statement  "	if (fileExists && (folderWorkflow == null || folderWorkflow.WorkflowID == SystemWorkflowManager.Instance.GetDirectPublishWorkflow (folderWorkflow.PortalID).WorkflowID)) { " is 170.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,CheckFileWritingRestrictions,The length of the statement  "		throw new NoSpaceAvailableException (Localization.Localization.GetExceptionMessage ("AddFileNoSpaceAvailable"' "The portal has no space available to store the specified file. The file has not been added.")); " is 207.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,CheckFileWritingRestrictions,The length of the statement  "	if (oldFile != null && FileLockingController.Instance.IsFileOutOfPublishPeriod (oldFile' folder.PortalID' createdByUserId)) { " is 125.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,CheckFileWritingRestrictions,The length of the statement  "		throw new FileLockedException (Localization.Localization.GetExceptionMessage ("FileLockedOutOfPublishPeriodError"' "File locked. The file cannot be updated because it is out of Publish Period")); " is 195.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,AddFile,The length of the statement  "	file.FileId = DataProvider.Instance ().AddFile (file.PortalId' file.UniqueId' file.VersionGuid' file.FileName' file.Extension' file.Size' file.Width' file.Height' file.ContentType' file.Folder' file.FolderId' createdByUserID' file.SHA1Hash' file.LastModificationTime' file.Title' file.Description' file.StartDate' file.EndDate' file.EnablePublishPeriod' file.ContentItemID); " is 374.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,ProcessVersioning,The length of the statement  "	if (oldFile != null && FileVersionController.Instance.IsFolderVersioned (folder) && oldFile.SHA1Hash != file.SHA1Hash) { " is 120.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,CopyFile,The length of the statement  "			throw new PermissionsNotMetException (Localization.Localization.GetExceptionMessage ("CopyFilePermissionsNotMet"' "Permissions are not met. The file has not been copied.")); " is 173.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,CopyFile,The length of the statement  "			throw new NoSpaceAvailableException (Localization.Localization.GetExceptionMessage ("CopyFileNoSpaceAvailable"' "The portal has no space available to store the specified file. The file has not been copied.")); " is 209.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,CopyFile,The length of the statement  "			FolderProvider.Instance (folderMapping.FolderProviderType).CopyFile (folder.MappedPath' file.FileName' destinationFolder.MappedPath' folderMapping); " is 148.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,CopyFile,The length of the statement  "			throw new FolderProviderException (Localization.Localization.GetExceptionMessage ("CopyFileUnderlyingSystemError"' "The underlying system throw an exception. The file has not been copied.")' ex); " is 195.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,CopyFile,The length of the statement  "		var fileId = DataProvider.Instance ().AddFile (file.PortalId' Guid.NewGuid ()' Guid.NewGuid ()' file.FileName' file.Extension' file.Size' file.Width' file.Height' file.ContentType' destinationFolder.FolderPath' destinationFolder.FolderID' GetCurrentUserID ()' file.SHA1Hash' DateTime.Now' file.Title' file.Description' file.StartDate' file.EndDate' file.EnablePublishPeriod' contentItemID); " is 390.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,FileExists,The length of the statement  "		throw new FolderProviderException (Localization.Localization.GetExceptionMessage ("UnderlyingSystemError"' "The underlying system threw an exception.")' ex); " is 157.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,GetFile,The length of the statement  "	return CBO.Instance.FillObject<FileInfo> (DataProvider.Instance ().GetFile (fileName' folder.FolderID' retrieveUnpublishedFiles)); " is 130.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,GetFileContent,The length of the statement  "			throw new FolderProviderException (Localization.Localization.GetExceptionMessage ("UnderlyingSystemError"' "The underlying system threw an exception")' ex); " is 156.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,GetUrl,The length of the statement  "		throw new FolderProviderException (Localization.Localization.GetExceptionMessage ("UnderlyingSystemError"' "The underlying system threw an exception.")' ex); " is 157.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,MoveFile,The length of the statement  "		throw new FileLockedException (Localization.Localization.GetExceptionMessage (lockReason' "File locked. The file cannot be updated. Reason: " + lockReason)); " is 157.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,MoveFile,The length of the statement  "	var destinationFolderMapping = FolderMappingController.Instance.GetFolderMapping (destinationFolder.PortalID' destinationFolder.FolderMappingID); " is 145.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,MoveFile,The length of the statement  "	if (destinationFolderMapping.FolderMappingID == sourceFolderMapping.FolderMappingID && destinationFolderProvider.SupportsMoveFile) { " is 132.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,RenameFile,The length of the statement  "		throw new InvalidFileExtensionException (string.Format (Localization.Localization.GetExceptionMessage ("AddFileExtensionNotAllowed"' "The extension '{0}' is not allowed. The file has not been added.")' Path.GetExtension (newFileName))); " is 236.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,RenameFile,The length of the statement  "		throw new FileAlreadyExistsException (Localization.Localization.GetExceptionMessage ("RenameFileAlreadyExists"' "This folder already contains a file with the same name. The file has not been renamed.")); " is 203.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,RenameFile,The length of the statement  "		throw new FolderProviderException (Localization.Localization.GetExceptionMessage ("RenameFileUnderlyingSystemError"' "The underlying system threw an exception. The file has not been renamed.")' ex); " is 198.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,SetAttributes,The length of the statement  "		throw new FolderProviderException (Localization.Localization.GetExceptionMessage ("UnderlyingSystemError"' "The underlying system threw an exception.")' ex); " is 157.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,UnzipFile,The length of the statement  "		throw new ArgumentException (Localization.Localization.GetExceptionMessage ("InvalidZipFile"' "The file specified is not a zip compressed file.")); " is 147.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,UpdateFile,The length of the statement  "		file.SHA1Hash = FolderProvider.Instance (FolderMappingController.Instance.GetFolderMapping (file.FolderMappingID).FolderProviderType).GetHashCode (file' fileContent); " is 166.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,WriteFileToResponse,The length of the statement  "		throw new PermissionsNotMetException (Localization.Localization.GetExceptionMessage ("WriteFileToResponsePermissionsNotMet"' "Permissions are not met. The file cannot be downloaded.")); " is 185.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,UpdateWhileApproving,The length of the statement  "	var isDatabaseMapping = FolderMappingController.Instance.GetFolderMapping (folder.PortalID' folder.FolderMappingID).MappingName == "Database"; " is 142.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,UpdateWhileApproving,The length of the statement  "		return isDatabaseMapping ? FileVersionController.Instance.AddFileVersion (file' createdByUserID' false' false' content) : FileVersionController.Instance.AddFileVersion (file' createdByUserID' false); " is 199.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,UpdateWhileApproving,The length of the statement  "			FileVersionController.Instance.DeleteFileVersion (file' versions.OrderByDescending (f => f.Version).FirstOrDefault ().Version); " is 127.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,UpdateWhileApproving,The length of the statement  "		return isDatabaseMapping ? FileVersionController.Instance.AddFileVersion (file' createdByUserID' false' false' content) : FileVersionController.Instance.AddFileVersion (file' createdByUserID' false); " is 199.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,UpdateWhileApproving,The length of the statement  "	throw new FileLockedException (Localization.Localization.GetExceptionMessage ("FileLockedRunningWorkflowError"' "File locked. The file cannot be updated because it has a running workflow")); " is 190.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,EnsureZipFolder,The length of the statement  "	var folderMapping = folderMappingController.GetFolderMapping (destinationFolder.PortalID' destinationFolder.FolderMappingID); " is 125.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,EnsureZipFolder,The length of the statement  "				folderManager.AddFolder (folderMappingController.GetFolderMapping (parentFolder.PortalID' parentFolder.FolderMappingID)' newFolderPath); " is 136.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,GetAutoDeleteFileStream,The length of the statement  "	return new FileStream (filePath' FileMode.Create' FileAccess.ReadWrite' FileShare.Read' BufferSize' FileOptions.DeleteOnClose); " is 127.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,GetHash,The length of the statement  "	return FolderProvider.Instance (FolderMappingController.Instance.GetFolderMapping (fileInfo.FolderMappingID).FolderProviderType).GetHashCode (fileInfo); " is 152.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,IsAllowedExtension,The length of the statement  "	return !string.IsNullOrEmpty (extension) && Host.AllowedExtensionWhitelist.IsAllowedExtension (extension) && !Globals.FileExtensionRegex.IsMatch (fileName); " is 156.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,UpdateFile,The length of the statement  "	DataProvider.Instance ().UpdateFile (file.FileId' file.VersionGuid' file.FileName' file.Extension' file.Size' updateLazyload ? file.Width : Null.NullInteger' updateLazyload ? file.Height : Null.NullInteger' file.ContentType' file.FolderId' GetCurrentUserID ()' updateLazyload ? file.SHA1Hash : Null.NullString' file.LastModificationTime' file.Title' file.Description' file.StartDate' file.EndDate' file.EnablePublishPeriod' file.ContentItemID); " is 444.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,ValidMetadata,The length of the statement  "		exceptionMessage = Localization.Localization.GetExceptionMessage ("MaxLengthExceeded"' "The maximum length of the field {0} has been exceeded"' DefaultMetadataNames.Title); " is 172.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,ValidMetadata,The length of the statement  "		exceptionMessage = Localization.Localization.GetExceptionMessage ("StartDateMustNotBeInThePast"' "The Start Date must not be in the past"); " is 139.
Long Statement,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,ValidMetadata,The length of the statement  "		exceptionMessage = Localization.Localization.GetExceptionMessage ("InvalidPublishPeriod"' "The End Date must be after the Start Date"); " is 135.
Long Statement,DotNetNuke.Services.FileSystem,FileServerHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileServerHandler.cs,ProcessRequest,The length of the statement  "						if (directUrl.Contains ("LinkClick") || (blnForceDownload && folderMapping.FolderProviderType == "StandardFolderProvider")) { " is 125.
Long Statement,DotNetNuke.Services.FileSystem,FileServerHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileServerHandler.cs,ProcessRequest,The length of the statement  "					} catch (ThreadAbortException)//if call fileManager.WriteFileToResponse ThreadAbortException will shown' should catch it and do nothing. " is 136.
Long Statement,DotNetNuke.Services.FileSystem,FolderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderController.cs,AddFolder,The length of the statement  "		folder = (FolderInfo)FolderManager.Instance.AddFolder (FolderMappingController.Instance.GetFolderMapping (folder.PortalID' folder.FolderMappingID)' folder.FolderPath); " is 167.
Long Statement,DotNetNuke.Services.FileSystem,FolderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderController.cs,SetMappedDirectory,The length of the statement  "		// The logic here was updated to use the new FileSystemUtils.MapPath so that we have consistent behavior with other Overloads " is 125.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AddFolderInternal,The length of the statement  "		folder.FolderID = DataProvider.Instance ().AddFolder (folder.PortalID' folder.UniqueId' folder.VersionGuid' folder.FolderPath' folder.MappedPath' folder.StorageLocation' folder.IsProtected' folder.IsCached' folder.LastUpdated' GetCurrentUserId ()' folder.FolderMappingID' isVersioned' workflowId' parentId); " is 307.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetOnlyUnmap,The length of the statement  "	return (FolderProvider.Instance (FolderMappingController.Instance.GetFolderMapping (folder.FolderMappingID).FolderProviderType).SupportsMappedPaths && GetFolder (folder.ParentID).FolderMappingID != folder.FolderMappingID); " is 222.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,DeleteFolderInternal,The length of the statement  "		throw new FolderProviderException (Localization.Localization.GetExceptionMessage ("DeleteFolderUnderlyingSystemError"' "The underlying system threw an exception. The folder has not been deleted.")' ex); " is 202.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetParentFolder,The length of the statement  "		var parentFolderPath = folderPath.Substring (0' folderPath.Substring (0' folderPath.Length - 1).LastIndexOf ("/"' StringComparison.Ordinal) + 1); " is 145.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,UpdateFolderInternal,The length of the statement  "	DataProvider.Instance ().UpdateFolder (folder.PortalID' folder.VersionGuid' folder.FolderID' PathUtils.Instance.FormatFolderPath (folder.FolderPath)' folder.StorageLocation' folder.MappedPath' folder.IsProtected' folder.IsCached' folder.LastUpdated' GetCurrentUserId ()' folder.FolderMappingID' folder.IsVersioned' folder.WorkflowID' folder.ParentID); " is 351.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFolders,The length of the statement  "		var subFolders = GetFolders (parentFolder.PortalID).Where (f => f.FolderPath.StartsWith (parentFolder.FolderPath' StringComparison.InvariantCultureIgnoreCase)); " is 160.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AddFolder,The length of the statement  "		throw new FolderAlreadyExistsException (Localization.Localization.GetExceptionMessage ("AddFolderAlreadyExists"' "The provided folder path already exists. The folder has not been added.")); " is 189.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AddFolder,The length of the statement  "		var parentFolderMapping = FolderMappingController.Instance.GetFolderMapping (parentFolder.PortalID' parentFolder.FolderMappingID); " is 130.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AddFolder,The length of the statement  "			mappedPath = String.IsNullOrEmpty (parentFolder.FolderPath) ? PathUtils.Instance.FormatFolderPath (parentFolder.MappedPath + folderPath) : PathUtils.Instance.FormatFolderPath (parentFolder.MappedPath + folderPath.Replace (parentFolder.FolderPath' string.Empty)); " is 262.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AddFolder,The length of the statement  "		throw new FolderProviderException (Localization.Localization.GetExceptionMessage ("AddFolderUnderlyingSystemError"' "The underlying system threw an exception. The folder has not been added.")' ex); " is 197.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AddFolder,The length of the statement  "	var parentFolderPath = folderPath.Substring (0' folderPath.Substring (0' folderPath.Length - 1).LastIndexOf ("/"' StringComparison.Ordinal) + 1); " is 145.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFiles,The length of the statement  "	var fileCollection = CBO.Instance.FillCollection<FileInfo> (DataProvider.Instance ().GetFiles (folder.FolderID' retrieveUnpublishedFiles)); " is 139.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFileSystemFolders,The length of the statement  "	var folders = GetFolders (portalId' permissions' user.UserID).Where (f => f.FolderPath != null && f.FolderMappingID == defaultFolderMaping.FolderMappingID); " is 156.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFileSystemFolders,The length of the statement  "			} else if (!folder.FolderPath.StartsWith (userFolder.FolderPath' StringComparison.InvariantCultureIgnoreCase))//Allow UserFolder children " is 137.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFolder,The length of the statement  "		folder = folders.SingleOrDefault (f => f.FolderID == folderId) ?? CBO.Instance.FillObject<FolderInfo> (DataProvider.Instance ().GetFolder (folderId)); " is 150.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFolder,The length of the statement  "	return folders.SingleOrDefault (f => f.FolderPath == folderPath) ?? CBO.Instance.FillObject<FolderInfo> (DataProvider.Instance ().GetFolder (portalId' folderPath)); " is 164.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFolders,The length of the statement  "	CBO.Instance.GetCachedObject<List<FolderInfo>> (new CacheItemArgs (cacheKey' DataCache.FolderCacheTimeOut' DataCache.FolderCachePriority' portalId)' GetFoldersSortedCallBack' false).ForEach (folders.Add); " is 204.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFolders,The length of the statement  "	var cacheItemArgs = new CacheItemArgs (cacheKey' DataCache.FolderUserCacheTimeOut' DataCache.FolderUserCachePriority' portalId' permissions' userId); " is 149.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFolders,The length of the statement  "	CBO.Instance.GetCachedObject<List<FolderInfo>> (cacheItemArgs' GetFoldersByPermissionSortedCallBack' false).ForEach (folders.Add); " is 130.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFolders,The length of the statement  "			} else if (!folder.FolderPath.StartsWith (userFolder.FolderPath' StringComparison.InvariantCultureIgnoreCase))//Allow UserFolder children " is 137.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,MoveFolder,The length of the statement  "		throw new InvalidOperationException (string.Format (Localization.Localization.GetExceptionMessage ("CannotMoveFolderAlreadyExists"' "The folder with name '{0}' cannot be moved. A folder with that name already exists under the folder '{1}'."' folder.FolderName' destinationFolder.FolderName))); " is 293.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,MoveFolder,The length of the statement  "	var destinationFolderMapping = FolderMappingController.Instance.GetFolderMapping (destinationFolder.PortalID' destinationFolder.FolderMappingID); " is 145.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,MoveFolder,The length of the statement  "		throw new InvalidOperationException (string.Format (Localization.Localization.GetExceptionMessage ("CannotMoveFolderBetweenFolderType"' "The folder with name '{0}' cannot be moved. Move Folder operation between this two folder types is not allowed"' folder.FolderName))); " is 271.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,MoveFolder,The length of the statement  "		throw new InvalidOperationException (Localization.Localization.GetExceptionMessage ("MoveFolderCannotComplete"' "The operation cannot be completed.")); " is 151.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,MoveFolder,The length of the statement  "	if ((folder.FolderMappingID == destinationFolder.FolderMappingID && FolderProvider.Instance (folderMapping.FolderProviderType).SupportsMoveFolder) || (IsStandardFolderProviderType (folderMapping) && IsStandardFolderProviderType (destinationFolderMapping))) { " is 258.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,MoveFolder,The length of the statement  "	log.AddProperty ("Home Directory"' folder.PortalID == Null.NullInteger ? Globals.HostPath : PortalSettings.Current.HomeDirectory); " is 130.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,RenameFolder,The length of the statement  "	var newFolderPath = folder.FolderPath.Substring (0' folder.FolderPath.LastIndexOf (folder.FolderName' StringComparison.Ordinal)) + PathUtils.Instance.FormatFolderPath (newFolderName); " is 183.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,RenameFolder,The length of the statement  "		throw new FolderAlreadyExistsException (Localization.Localization.GetExceptionMessage ("RenameFolderAlreadyExists"' "The destination folder already exists. The folder has not been renamed.")); " is 192.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,Synchronize,The length of the statement  "	if (AreThereFolderMappingsRequiringNetworkConnectivity (portalId' relativePath' isRecursive) && !IsNetworkAvailable ()) { " is 121.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,Synchronize,The length of the statement  "		throw new NoNetworkAvailableException (Localization.Localization.GetExceptionMessage ("NoNetworkAvailableError"' "Network connectivity is needed but there is no network available.")); " is 183.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,Synchronize,The length of the statement  "			// Synchronization could be a time-consuming process. To not get a time-out' we need to modify the request time-out value " is 121.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,CopyParentFolderPermissions,The length of the statement  "	var parentFolderPath = folder.FolderPath.Substring (0' folder.FolderPath.Substring (0' folder.FolderPath.Length - 1).LastIndexOf ("/"' StringComparison.Ordinal) + 1); " is 166.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,SetFolderPermission,The length of the statement  "	if (folder.FolderPermissions.Cast<FolderPermissionInfo> ().Any (fpi => fpi.FolderID == folder.FolderID && fpi.PermissionID == permissionId && fpi.RoleID == roleId && fpi.UserID == userId && fpi.AllowAccess)) { " is 209.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AddLogEntry,The length of the statement  "	EventLogController.Instance.AddLog (folder' PortalController.Instance.GetCurrentPortalSettings ()' GetCurrentUserId ()' ""' eventLogType); " is 138.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AddLogEntry,The length of the statement  "	EventLogController.Instance.AddLog (propertyName' propertyValue' PortalController.Instance.GetCurrentPortalSettings ()' GetCurrentUserId ()' eventLogType); " is 155.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AddUserFolder,The length of the statement  "	var folderMapping = FolderMappingsConfigController.Instance.GetFolderMapping (portalId' DefaultUsersFoldersPath) ?? FolderMappingController.Instance.GetDefaultFolderMapping (portalId); " is 184.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AddUserFolder,The length of the statement  "	folderPath = PathUtils.Instance.FormatFolderPath (String.Concat (folderPath' PathUtils.Instance.GetUserFolderPathElement (user.UserID' PathUtils.UserFolderElement.SubFolder))); " is 176.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AddUserFolder,The length of the statement  "	folderPath = PathUtils.Instance.FormatFolderPath (String.Concat (folderPath' user.UserID.ToString (CultureInfo.InvariantCulture))); " is 131.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AddUserFolder,The length of the statement  "			if (permission.PermissionKey.ToUpper () == "READ" || permission.PermissionKey.ToUpper () == "WRITE" || permission.PermissionKey.ToUpper () == "BROWSE") { " is 153.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,AreThereFolderMappingsRequiringNetworkConnectivity,The length of the statement  "		var folderMappingsRequiringNetworkConnectivity = from fm in FolderMappingController.Instance.GetFolderMappings (portalId) " is 121.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,ClearFolderProviderCachedLists,The length of the statement  "		if (folderMapping.MappingName != "Standard" && folderMapping.MappingName != "Secure" && folderMapping.MappingName != "Database") { " is 130.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFileSystemFolders,The length of the statement  "		if (((FileWrapper.Instance.GetAttributes (physicalPath) & FileAttributes.Hidden) == FileAttributes.Hidden || physicalPath.StartsWith ("_")) && hideFoldersEnabled) { " is 164.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFileSystemFoldersRecursive,The length of the statement  "				if (((FileWrapper.Instance.GetAttributes (dn) & FileAttributes.Hidden) == FileAttributes.Hidden || dn.StartsWith ("_")) && hideFoldersEnabled) { " is 144.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFolderMappingFoldersRecursive,The length of the statement  "		var relativePath = (String.IsNullOrEmpty (mappedPath)) ? String.Empty : (String.IsNullOrEmpty (baseMappedPath)) ? mappedPath : RegexUtils.GetCachedRegex (Regex.Escape (baseMappedPath)).Replace (mappedPath' string.Empty' 1); " is 223.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetFoldersByPermissionSortedCallBack,The length of the statement  "	return CBO.Instance.FillCollection<FolderInfo> (DataProvider.Instance ().GetFoldersByPortalAndPermissions (portalId' permissions' userId)); " is 139.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetMergedTree,The length of the statement  "		if (folderMapping.MappingName != "Standard" && folderMapping.MappingName != "Secure" && folderMapping.MappingName != "Database") { " is 130.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetMergedTree,The length of the statement  "			mergedItem.ExistsInFolderMapping = folderMapping.MappingName == "Database" ? mergedItem.ExistsInDatabase : mergedItem.ExistsInFileSystem; " is 137.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,GetMergedTree,The length of the statement  "	foreach (var mergedItem in margedTreeItems.Where (m => m.ExistsInFolderMapping && margedTreeItems.Any (mt2 => !mt2.ExistsInFolderMapping && m.FolderPath.StartsWith (mt2.FolderPath)))) { " is 185.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,IsMoveOperationValid,The length of the statement  "	var folderMapping = FolderMappingController.Instance.GetFolderMapping (folderToMove.PortalID' folderToMove.FolderMappingID); " is 124.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,IsMoveOperationValid,The length of the statement  "	if (folderToMove.FolderMappingID == destinationFolder.FolderMappingID && FolderProvider.Instance (folderMapping.FolderProviderType).SupportsMappedPaths) { " is 154.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,MoveFolderBetweenProviders,The length of the statement  "	var folderInfos = GetFolders (folder.PortalID).Where (f => f.FolderPath != string.Empty && f.FolderPath.StartsWith (folder.FolderPath)).ToArray (); " is 147.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,SynchronizeFiles,The length of the statement  "			files = files.Except (FileVersionController.Instance.GetFileVersionsInFolder (folder.FolderID).Select (f => f.FileName)).ToArray (); " is 132.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,UpdateParentFolder,The length of the statement  "		var parentFolderPath = folderPath.Substring (0' folderPath.Substring (0' folderPath.Length - 1).LastIndexOf ("/"' StringComparison.Ordinal) + 1); " is 145.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,UpdateChildFolders,The length of the statement  "	var folderInfos = GetFolders (folder.PortalID).Where (f => f.FolderPath != string.Empty && f.FolderPath.StartsWith (originalFolderPath)).ToArray (); " is 148.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,UpdateChildFolders,The length of the statement  "		var folderPath = newFolderPath + (newFolderPath.EndsWith ("/") ? "" : "/") + folderInfo.FolderPath.Substring (originalFolderPath.Length); " is 137.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,UpdateChildFolders,The length of the statement  "		var parentProvider = FolderProvider.Instance (FolderMappingController.Instance.GetFolderMapping (parentFolder.PortalID' parentFolder.FolderMappingID).FolderProviderType); " is 170.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,UpdateChildFolders,The length of the statement  "				var newMappedPath = PathUtils.Instance.FormatFolderPath (folderInfo.MappedPath.Substring (0' folderInfo.MappedPath.LastIndexOf ("/" + originalFolderPath' StringComparison.Ordinal)) + "/" + folderPath); " is 201.
Long Statement,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,MoveFolder,The length of the statement  "	var nameCharIndex = newFolderPath.Substring (0' newFolderPath.Length - 1).LastIndexOf ("/"' StringComparison.Ordinal) + 1; " is 122.
Long Statement,DotNetNuke.Services.FileSystem,FolderMappingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderMappings\FolderMappingController.cs,GetDefaultFolderMapping,The length of the statement  "	var defaultFolderMapping = Config.GetSection ("dotnetnuke/folder") != null ? GetFolderMappings (portalId).Find (fm => fm.FolderProviderType == Config.GetDefaultProvider ("folder").Name) : GetFolderMapping (portalId' "Standard"); " is 228.
Long Statement,DotNetNuke.Services.FileSystem,FolderMappingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderMappings\FolderMappingController.cs,AddFolderMapping,The length of the statement  "	objFolderMapping.FolderMappingID = dataProvider.AddFolderMapping (objFolderMapping.PortalID' objFolderMapping.MappingName' objFolderMapping.FolderProviderType' UserController.Instance.GetCurrentUserInfo ().UserID); " is 214.
Long Statement,DotNetNuke.Services.FileSystem,FolderMappingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderMappings\FolderMappingController.cs,DeleteFolderMapping,The length of the statement  "		foreach (var file in folderMappingFolders.Select<IFolderInfo' IEnumerable<IFileInfo>> (folderManager.GetFiles).SelectMany (files => files)) { " is 141.
Long Statement,DotNetNuke.Services.FileSystem,FolderMappingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderMappings\FolderMappingController.cs,DeleteFolderMapping,The length of the statement  "		// Remove the folders with the provided mapping that doesn't have child folders with other mapping (only in the database and filesystem) " is 136.
Long Statement,DotNetNuke.Services.FileSystem,FolderMappingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderMappings\FolderMappingController.cs,DeleteFolderMapping,The length of the statement  "		var removableFolders = folders.Where (f => f.FolderMappingID == folderMappingID && !folders1.Any (f2 => f2.FolderID != f.FolderID && f2.FolderPath.StartsWith (f.FolderPath) && f2.FolderMappingID != folderMappingID)); " is 216.
Long Statement,DotNetNuke.Services.FileSystem,FolderMappingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderMappings\FolderMappingController.cs,UpdateFolderMapping,The length of the statement  "	dataProvider.UpdateFolderMapping (objFolderMapping.FolderMappingID' objFolderMapping.MappingName' objFolderMapping.Priority' UserController.Instance.GetCurrentUserInfo ().UserID); " is 179.
Long Statement,DotNetNuke.Services.FileSystem,FolderMappingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderMappings\FolderMappingController.cs,GetFolderMappings,The length of the statement  "	return CBO.GetCachedObject<List<FolderMappingInfo>> (new CacheItemArgs (cacheKey' DataCache.FolderMappingCacheTimeOut' DataCache.FolderMappingCachePriority)' c => CBO.FillCollection<FolderMappingInfo> (dataProvider.GetFolderMappings (portalId))); " is 246.
Long Statement,DotNetNuke.Services.FileSystem,FolderMappingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderMappings\FolderMappingController.cs,UpdateFolderMappingSettings,The length of the statement  "		UpdateFolderMappingSetting (objFolderMapping.FolderMappingID' sKey' Convert.ToString (objFolderMapping.FolderMappingSettings [sKey])); " is 134.
Long Statement,DotNetNuke.Services.FileSystem,FolderMappingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderMappings\FolderMappingController.cs,UpdateFolderMappingSetting,The length of the statement  "			dataProvider.UpdateFolderMappingSetting (folderMappingID' settingName' settingValue' UserController.Instance.GetCurrentUserInfo ().UserID); " is 139.
Long Statement,DotNetNuke.Services.FileSystem,FolderMappingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderMappings\FolderMappingController.cs,UpdateFolderMappingSetting,The length of the statement  "			dataProvider.AddFolderMappingSetting (folderMappingID' settingName' settingValue' UserController.Instance.GetCurrentUserInfo ().UserID); " is 136.
Long Statement,DotNetNuke.Services.FileSystem,SecureFolderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Providers\SecureFolderProvider.cs,GetFiles,The length of the statement  "			fileName = fileName.Substring (0' fileName.LastIndexOf (ProtectedExtension' StringComparison.InvariantCultureIgnoreCase)); " is 122.
Long Statement,DotNetNuke.Services.FileSystem,StandardFolderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Providers\StandardFolderProvider.cs,GetFileUrl,The length of the statement  "		return TestableGlobals.Instance.ResolveUrl (fullPath + "?ver=" + file.LastModificationTime.ToString ("yyyy-MM-dd-HHmmss-fff")); " is 127.
Long Statement,DotNetNuke.Services.FileSystem,StandardFolderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Providers\StandardFolderProvider.cs,GetSubFolders,The length of the statement  "	return DirectoryWrapper.Instance.GetDirectories (GetActualPath (folderMapping' folderPath)).Select (directory => GetRelativePath (folderMapping' directory)); " is 157.
Long Statement,DotNetNuke.Services.FileSystem.Internal,FileDeletionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Internal\FileDeletionController.cs,DeleteFile,The length of the statement  "		throw new FileLockedException (Localization.Localization.GetExceptionMessage (lockReason' "File locked. The file cannot be updated. Reason: " + lockReason)); " is 157.
Long Statement,DotNetNuke.Services.FileSystem.Internal,FileDeletionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Internal\FileDeletionController.cs,DeleteFile,The length of the statement  "		throw new FolderProviderException (Localization.Localization.GetExceptionMessage ("DeleteFileUnderlyingSystemError"' "The underlying system threw an exception. The file has not been deleted.")' ex); " is 198.
Long Statement,DotNetNuke.Services.FileSystem.Internal,FileDeletionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Internal\FileDeletionController.cs,UnlinkFile,The length of the statement  "		throw new FileLockedException (Localization.Localization.GetExceptionMessage (lockReason' "File locked. The file cannot be updated. Reason: " + lockReason)); " is 157.
Long Statement,DotNetNuke.Services.FileSystem.Internal,FileLockingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Internal\FileLockingController.cs,IsFileOutOfPublishPeriod,The length of the statement  "	return (file.EnablePublishPeriod && (file.StartDate > DateTime.Today || (file.EndDate < DateTime.Today && file.EndDate != Null.NullDate))); " is 139.
Long Statement,DotNetNuke.Services.FileSystem.Internal,UserSecurityController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Internal\UserSecurityController.cs,IsHostAdminUser,The length of the statement  "	return user.IsSuperUser || portalId > Null.NullInteger && user.IsInRole (PortalController.Instance.GetPortal (portalId).AdministratorRoleName); " is 143.
Long Statement,DotNetNuke.Services.FileSystem.Internal,UserSecurityController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Internal\UserSecurityController.cs,HasFolderPermission,The length of the statement  "	return UserController.Instance.GetCurrentUserInfo ().IsSuperUser || FolderPermissionController.HasFolderPermission (folder.FolderPermissions' permissionKey); " is 157.
Long Statement,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The length of the statement  "	Color color = string.IsNullOrEmpty (parameters ["color"]) ? Color.White : (parameters ["color"].StartsWith ("#") ? ColorTranslator.FromHtml (parameters ["color"]) : Color.FromName (parameters ["color"])); " is 204.
Long Statement,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The length of the statement  "	Color backColor = string.IsNullOrEmpty (parameters ["backcolor"]) ? Color.White : (parameters ["backcolor"].StartsWith ("#") ? ColorTranslator.FromHtml (parameters ["backcolor"]) : Color.FromName (parameters ["backcolor"])); " is 224.
Long Statement,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The length of the statement  "	var resizeMode = string.IsNullOrEmpty (parameters ["resizemode"]) ? ImageResizeMode.Fit : (ImageResizeMode)Enum.Parse (typeof(ImageResizeMode)' parameters ["ResizeMode"]' true); " is 177.
Long Statement,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The length of the statement  "			ContentType = !uppTrans.TryGetPhotoFile (out photoFile) ? ImageFormat.Gif : GetImageFormat (photoFile.Extension ?? "jpg"); " is 122.
Long Statement,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The length of the statement  "		if (double.TryParse (parameters ["Gamma"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out gamma) && gamma >= 0.2 && gamma <= 5) { " is 148.
Long Statement,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The length of the statement  "		if (double.TryParse (parameters ["Contrast"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out contrast) && (contrast >= -100 && contrast <= 100)) { " is 165.
Long Statement,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The length of the statement  "	if (!string.IsNullOrEmpty (AllowedDomains [0]) && context.Request.UrlReferrer != null && context.Request.UrlReferrer.Host.ToLower () != context.Request.Url.Host.ToLower ()) { " is 174.
Long Statement,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The length of the statement  "		if (!string.IsNullOrEmpty (context.Request.Headers ["If-Modified-Since"]) && !string.IsNullOrEmpty (context.Request.Headers ["If-None-Match"])) { " is 145.
Long Statement,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageResizeTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageResizeTransform.cs,FitImage,The length of the statement  "	graphics.FillRectangle (new SolidBrush (BackColor)' new Rectangle (0' 0' resizeWidth + 2 * _border' resizeHeight + 2 * _border)); " is 129.
Long Statement,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageResizeTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageResizeTransform.cs,FitSquareImage,The length of the statement  "	graphics.DrawImage (img' (newDim - resizeWidth) / 2 + _border' (newDim - resizeHeight) / 2 + _border' resizeWidth' resizeHeight); " is 129.
Long Statement,DotNetNuke.Services.GeneratedImage.StartTransform,SecureFileTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\SecureFileTransform.cs,GetSecureFileExtensionIconImage,The length of the statement  "	var extensionImageAbsolutePath = Globals.ApplicationMapPath + "\\" + PortalSettings.Current.DefaultIconLocation.Replace ("/"' "\\") + "\\" + "Ext" + SecureFile.Extension + "_32x32_Standard.png"; " is 194.
Long Statement,DotNetNuke.Services.ImprovementsProgram,BeaconService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ImprovementsProgram\BeaconService.cs,IsBeaconEnabledForControlBar,The length of the statement  "		enabled = (roles & (RolesEnum.Host | RolesEnum.Admin)) != 0 && (tabPath.StartsWith ("//Admin") || tabPath.StartsWith ("//Host")); " is 129.
Long Statement,DotNetNuke.Services.Installer.Installers,JavaScriptFileInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\JavaScriptFileInstaller.cs,ReadCustomManifest,The length of the statement  "		BasePath = String.Format ("Resources\\Libraries\\{0}\\{1}"' libraryNav.Value' Globals.FormatVersion (Package.Version' "00"' 3' "_")); " is 133.
Long Statement,DotNetNuke.Services.Installer.Installers,JavaScriptLibraryInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\JavaScriptLibraryInstaller.cs,Install,The length of the statement  "		_installedLibrary = JavaScriptLibraryController.Instance.GetLibrary (l => l.LibraryName == _library.LibraryName && l.Version == _library.Version); " is 146.
Long Statement,DotNetNuke.Services.Installer.Installers,UrlProviderInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\UrlProviderInstaller.cs,DeleteProvider,The length of the statement  "		ExtensionUrlProviderInfo tempUrlProvider = ExtensionUrlProviderController.GetProviders (Null.NullInteger).Where (p => p.ProviderName == _extensionUrlProvider.ProviderName && p.ProviderType == _extensionUrlProvider.ProviderType).FirstOrDefault (); " is 246.
Long Statement,DotNetNuke.Services.Installer.Installers,UrlProviderInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\UrlProviderInstaller.cs,Install,The length of the statement  "		_installedExtensionUrlProvider = ExtensionUrlProviderController.GetProviders (Null.NullInteger).SingleOrDefault (p => p.ProviderType == _extensionUrlProvider.ProviderType); " is 172.
Long Statement,DotNetNuke.Services.Installer.Installers,AuthenticationInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AuthenticationInstaller.cs,ReadManifest,The length of the statement  "	AuthSystem.AuthenticationType = Util.ReadElement (manifestNav' "authenticationService/type"' Log' Util.AUTHENTICATION_TypeMissing); " is 131.
Long Statement,DotNetNuke.Services.Installer.Installers,AuthenticationInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AuthenticationInstaller.cs,ReadManifest,The length of the statement  "	AuthSystem.SettingsControlSrc = Util.ReadElement (manifestNav' "authenticationService/settingsControlSrc"' Log' Util.AUTHENTICATION_SettingsSrcMissing); " is 152.
Long Statement,DotNetNuke.Services.Installer.Installers,AuthenticationInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AuthenticationInstaller.cs,ReadManifest,The length of the statement  "	AuthSystem.LoginControlSrc = Util.ReadElement (manifestNav' "authenticationService/loginControlSrc"' Log' Util.AUTHENTICATION_LoginSrcMissing); " is 143.
Long Statement,DotNetNuke.Services.Installer.Installers,ComponentInstallerBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ComponentInstallerBase.cs,ReadEventMessageNode,The length of the statement  "							if (upgradeVersion != null && (Globals.Status == Globals.UpgradeStatus.Install))//To allow when fresh installing or installresources " is 132.
Long Statement,DotNetNuke.Services.Installer.Installers,FileInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\FileInstaller.cs,ReadManifestItem,The length of the statement  "	if ((!string.IsNullOrEmpty (BasePath)) && (BasePath.ToLowerInvariant ().StartsWith ("app_code") && file.Type == InstallFileType.Other)) { " is 137.
Long Statement,DotNetNuke.Services.Installer.Installers,ModuleInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ModuleInstaller.cs,Commit,The length of the statement  "			DesktopModuleController.AddDesktopModulePageToPortal (_desktopModule' _desktopModule.AdminPage' portal.PortalID' ref createdNewPage' ref addedNewModule); " is 153.
Long Statement,DotNetNuke.Services.Installer.Installers,ModuleInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ModuleInstaller.cs,Commit,The length of the statement  "		DesktopModuleController.AddDesktopModulePageToPortal (_desktopModule' _desktopModule.HostPage' Null.NullInteger' ref createdNewPage' ref addedNewModule); " is 153.
Long Statement,DotNetNuke.Services.Installer.Installers,ModuleInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ModuleInstaller.cs,Install,The length of the statement  "		_installedDesktopModule = DesktopModuleController.GetDesktopModuleByModuleName (_desktopModule.ModuleName' Package.InstallerInfo.PortalID); " is 139.
Long Statement,DotNetNuke.Services.Installer.Installers,ModuleInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ModuleInstaller.cs,ReadManifest,The length of the statement  "	foreach (XPathNavigator moduleDefinitionNav in manifestNav.Select ("desktopModule/moduleDefinitions/moduleDefinition")) { " is 121.
Long Statement,DotNetNuke.Services.Installer.Installers,PackageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\PackageInstaller.cs,Install,The length of the statement  "			if ((_installedPackage == null) || (compInstaller.Version > Package.InstalledVersion) || (Package.InstallerInfo.RepairInstall)) { " is 129.
Long Statement,DotNetNuke.Services.Installer.Installers,PackageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\PackageInstaller.cs,ReadManifest,The length of the statement  "		_installedPackage = PackageController.Instance.GetExtensionPackage (Package.PortalID' p => p.Name == Package.Name && p.PackageType == Package.PackageType && p.Version == Package.Version); " is 187.
Long Statement,DotNetNuke.Services.Installer.Installers,PackageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\PackageInstaller.cs,ReadManifest,The length of the statement  "		_installedPackage = PackageController.Instance.GetExtensionPackage (Package.PortalID' p => p.Name == Package.Name && p.PackageType == Package.PackageType); " is 155.
Long Statement,DotNetNuke.Services.Installer.Installers,PackageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\PackageInstaller.cs,ReadManifest,The length of the statement  "		//In Dynamics moduels' a component:type=File can have a basePath pointing to the App_Conde folder. This is not a correct FolderName " is 131.
Long Statement,DotNetNuke.Services.Installer.Installers,PackageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\PackageInstaller.cs,ReadManifest,The length of the statement  "		var folderNameValue = PackageController.GetSpecificFolderName (manifestNav' "components/component/files|components/component/resourceFiles"' "basePath"' "DesktopModules"); " is 171.
Long Statement,DotNetNuke.Services.Installer.Installers,PackageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\PackageInstaller.cs,ReadManifest,The length of the statement  "		folderNameValue = PackageController.GetSpecificFolderName (manifestNav' "components/component/resourceFiles"' "basePath"' "DesktopModules"); " is 140.
Long Statement,DotNetNuke.Services.Installer.Installers,ResourceFileInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ResourceFileInstaller.cs,RollbackFile,The length of the statement  "	using (var unzip = new ZipInputStream (new FileStream (insFile.InstallerInfo.TempInstallFolder + insFile.FullName' FileMode.Open))) { " is 133.
Long Statement,DotNetNuke.Services.Installer.Installers,ScriptInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ScriptInstaller.cs,ExecuteSql,The length of the statement  "	//This check needs to be included because the unicode Byte Order mark results in an extra character at the start of the file " is 124.
Long Statement,DotNetNuke.Services.Installer.Installers,ScriptInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ScriptInstaller.cs,IsValidScript,The length of the statement  "	return ProviderConfiguration.DefaultProvider.ToLower () == fileExtension.ToLower () || fileExtension.ToLower () == "sql"; " is 121.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,AddLog,The length of the statement  "	EventLogController.Instance.AddLog (package' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' logType); " is 167.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,AddPackageInternal,The length of the statement  "	package.PackageID = provider.AddPackage (package.PortalID' package.Name' package.FriendlyName' package.Description' package.PackageType' package.Version.ToString (3)' package.License' package.Manifest' package.Owner' package.Organization' package.Url' package.Email' package.ReleaseNotes' package.IsSystemPackage' UserController.Instance.GetCurrentUserInfo ().UserID' package.FolderName' package.IconFile); " is 406.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,GetPackageDependencies,The length of the statement  "	return CBO.GetCachedObject<List<PackageDependencyInfo>> (new CacheItemArgs (DataCache.PackageDependenciesCacheKey' DataCache.PackagesCacheTimeout' DataCache.PackagesCachePriority)' c => CBO.FillCollection<PackageDependencyInfo> (provider.GetPackageDependencies ())); " is 266.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,UpdatePackageInternal,The length of the statement  "	provider.UpdatePackage (package.PackageID' package.PortalID' package.FriendlyName' package.Description' package.PackageType' package.Version.ToString (3)' package.License' package.Manifest' package.Owner' package.Organization' package.Url' package.Email' package.ReleaseNotes' package.IsSystemPackage' UserController.Instance.GetCurrentUserInfo ().UserID' package.FolderName' package.IconFile); " is 394.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,SavePackageDependency,The length of the statement  "	dependency.PackageDependencyId = provider.SavePackageDependency (dependency.PackageDependencyId' dependency.PackageId' dependency.PackageName' dependency.Version.ToString ()); " is 175.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,GetExtensionPackages,The length of the statement  "	var cacheItemArgs = new CacheItemArgs (cacheKey' DataCache.PackagesCacheTimeout' DataCache.PackagesCachePriority' portalId); " is 124.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,GetExtensionPackages,The length of the statement  "	return CBO.GetCachedObject<List<PackageInfo>> (cacheItemArgs' c => CBO.FillCollection<PackageInfo> (provider.GetPackages (portalId))); " is 134.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,GetExtensionPackageTypes,The length of the statement  "	return CBO.GetCachedObject<List<PackageType>> (new CacheItemArgs (DataCache.PackageTypesCacheKey' DataCache.PackageTypesCacheTimeout' DataCache.PackageTypesCachePriority)' c => CBO.FillCollection<PackageType> (provider.GetPackageTypes ())); " is 240.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,CanDeletePackage,The length of the statement  "	var dependencies = Instance.GetPackageDependencies (d => d.PackageName == package.Name && d.Version <= package.Version); " is 120.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,CanDeletePackage,The length of the statement  "			var packages = Instance.GetExtensionPackages (package.PortalID' p => p.Name == dep.PackageName && p.Version >= dep.Version && p.PackageID != package.PackageID); " is 160.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,CanDeletePackage,The length of the statement  "			string strFolderPath = Path.Combine (_SkinPackageInfo.PortalID == Null.NullInteger ? Path.Combine (Globals.HostMapPath' strRootSkin) : Path.Combine (portalSettings.HomeSystemDirectoryMapPath' strRootSkin)' _SkinPackageInfo.SkinName); " is 233.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,CanDeletePackage,The length of the statement  "				strFolderPath = Path.Combine (Path.Combine (portalSettings.HomeDirectoryMapPath' strRootSkin)' _SkinPackageInfo.SkinName); " is 122.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,CanDeletePackage,The length of the statement  "			XPathNavigator providerNavigator = configDoc.CreateNavigator ().SelectSingleNode ("/configuration/dotnetnuke/*[@defaultProvider='" + providerName + "']"); " is 154.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,ParsePackage,The length of the statement  "								//In Dynamics moduels' a component:type=File can have a basePath pointing to the App_Conde folder. This is not a correct FolderName " is 131.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,ParsePackage,The length of the statement  "								var folderNameValue = GetSpecificFolderName (nav' "components/component/files|components/component/resourceFiles"' "basePath"' "DesktopModules"); " is 145.
Long Statement,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,ParsePackage,The length of the statement  "								if ((iconFileNav.Value != string.Empty) && (package.PackageType == "Module" || package.PackageType == "Auth_System" || package.PackageType == "Container" || package.PackageType == "Skin")) { " is 190.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetString,The length of the statement  "		Logger.WarnFormat ("Missing localization key. key:{0} resFileRoot:{1} threadCulture:{2} userlan:{3}"' key' resourceFileRoot' Thread.CurrentThread.CurrentUICulture' language); " is 174.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,SaveString,The length of the statement  "				AddResourceFileNode (ref root' "resheader"' "reader"' "System.Resources.ResXResourceReader' System.Windows.Forms' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089"); " is 182.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,SaveString,The length of the statement  "				AddResourceFileNode (ref root' "resheader"' "writer"' "System.Resources.ResXResourceWriter' System.Windows.Forms' Version=2.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089"); " is 182.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetCompiledResourceFile,The length of the statement  "	return CBO.GetCachedObject<Dictionary<string' string>> (new CacheItemArgs ("Compiled-" + resourceFile + "-" + locale + "-" + portalSettings.PortalId' DataCache.ResourceFilesCacheTimeOut' DataCache.ResourceFilesCachePriority' resourceFile' locale' portalSettings)' GetCompiledResourceFileCallBack' true); " is 303.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileLookupDictionary,The length of the statement  "	return CBO.GetCachedObject<SharedDictionary<string' bool>> (new CacheItemArgs (DataCache.ResourceFileLookupDictionaryCacheKey' DataCache.ResourceFileLookupDictionaryTimeOut' DataCache.ResourceFileLookupDictionaryCachePriority)' c => new SharedDictionary<string' bool> ()' true); " is 278.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFile,The length of the statement  "	return CBO.GetCachedObject<Dictionary<string' string>> (new CacheItemArgs (resourceFile' DataCache.ResourceFilesCacheTimeOut' DataCache.ResourceFilesCachePriority)' GetResourceFileCallBack' true); " is 196.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetFromResourceFile,The length of the statement  "	bool bFound = TryGetFromResourceFile (key' GetResourceFileName (resourceFile' userLanguage)' portalID' ref resourceValue); " is 122.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetFromResourceFile,The length of the statement  "		bFound = TryGetFromResourceFile (key' GetResourceFileName (resourceFile' fallbackLanguage)' portalID' ref resourceValue); " is 121.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetFromResourceFile,The length of the statement  "		bFound = TryGetFromResourceFile (key' GetResourceFileName (resourceFile' defaultLanguage)' portalID' ref resourceValue); " is 120.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetStringInternal,The length of the statement  "	bool bFound = TryGetFromResourceFile (key' resourceFile' userLanguage' fallbackLanguage' defaultLanguage' portalId' ref resourceValue); " is 135.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetStringInternal,The length of the statement  "			string localSharedFile = resourceFile.Substring (0' resourceFile.LastIndexOf ("/"' StringComparison.Ordinal) + 1) + Localization.LocalSharedResourceFile; " is 153.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetStringInternal,The length of the statement  "				bFound = TryGetFromResourceFile (key' localSharedFile' userLanguage' fallbackLanguage' defaultLanguage' portalId' ref resourceValue); " is 133.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetStringInternal,The length of the statement  "			bFound = TryGetFromResourceFile (key' Localization.SharedResourceFile' userLanguage' fallbackLanguage' defaultLanguage' portalId' ref resourceValue); " is 149.
Long Statement,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetFromResourceFile,The length of the statement  "	if (resourceFileName.StartsWith ("desktopmodules"' StringComparison.InvariantCultureIgnoreCase) || resourceFileName.StartsWith ("admin"' StringComparison.InvariantCultureIgnoreCase) || resourceFileName.StartsWith ("controls"' StringComparison.InvariantCultureIgnoreCase)) { " is 273.
Long Statement,DotNetNuke.Services.Localization,LanguagePackController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LanguagePackController.cs,DeleteLanguagePack,The length of the statement  "	EventLogController.Instance.AddLog (languagePack' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.LANGUAGEPACK_DELETED); " is 217.
Long Statement,DotNetNuke.Services.Localization,LanguagePackController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LanguagePackController.cs,SaveLanguagePack,The length of the statement  "		languagePack.LanguagePackID = DataProvider.Instance ().AddLanguagePack (languagePack.PackageID' languagePack.LanguageID' languagePack.DependentPackageID' UserController.Instance.GetCurrentUserInfo ().UserID); " is 208.
Long Statement,DotNetNuke.Services.Localization,LanguagePackController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LanguagePackController.cs,SaveLanguagePack,The length of the statement  "		EventLogController.Instance.AddLog (languagePack' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.LANGUAGEPACK_CREATED); " is 217.
Long Statement,DotNetNuke.Services.Localization,LanguagePackController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LanguagePackController.cs,SaveLanguagePack,The length of the statement  "		DataProvider.Instance ().UpdateLanguagePack (languagePack.LanguagePackID' languagePack.PackageID' languagePack.LanguageID' languagePack.DependentPackageID' UserController.Instance.GetCurrentUserInfo ().UserID); " is 210.
Long Statement,DotNetNuke.Services.Localization,LanguagePackController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LanguagePackController.cs,SaveLanguagePack,The length of the statement  "		EventLogController.Instance.AddLog (languagePack' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.LANGUAGEPACK_UPDATED); " is 217.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,AddLanguageToPortal,The length of the statement  "			bool contentLocalizationEnabled = PortalController.GetPortalSettingAsBoolean ("ContentLocalizationEnabled"' portalID' false); " is 125.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,AddLanguageToPortal,The length of the statement  "			DataProvider.Instance ().AddPortalLanguage (portalID' languageID' false' UserController.Instance.GetCurrentUserInfo ().UserID); " is 127.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,AddLanguageToPortal,The length of the statement  "			EventLogController.Instance.AddLog ("portalID/languageID"' portalID + "/" + languageID' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.LANGUAGETOPORTAL_CREATED); " is 255.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,DeleteLanguage,The length of the statement  "	EventLogController.Instance.AddLog (language' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.LANGUAGE_DELETED); " is 209.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetExceptionMessage,The length of the statement  "	return string.Format (String.IsNullOrEmpty (content) ? defaultValue : GetString (key' ExceptionsResourceFile)' @params); " is 120.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetLanguageDisplayMode,The length of the statement  "	string viewType = Convert.ToString (Personalization.Personalization.GetProfile ("LanguageDisplayMode"' viewTypePersonalizationKey)); " is 132.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetBrowserCulture,The length of the statement  "	if (HttpContext.Current == null || HttpContext.Current.Request == null || HttpContext.Current.Request.UserLanguages == null) " is 124.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetString,The length of the statement  "	return GetString (key' resourceFileRoot' PortalController.Instance.GetCurrentPortalSettings ()' null' disableShowMissingKeys); " is 126.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetString,The length of the statement  "	return LocalizationProvider.Instance.GetString (key' resourceFileRoot' language' portalSettings' disableShowMissingKeys); " is 121.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetSystemMessage,The length of the statement  "	return GetSystemMessage (strLanguage' portalSettings' messageName' userInfo' resourceFile' custom' null' customCaption' accessingUserID); " is 137.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,LocalizeControlTitle,The length of the statement  "		string reskey = "ControlTitle_" + moduleControl.ModuleContext.Configuration.ModuleControl.ControlKey.ToLower () + ".Text"; " is 122.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,LocalizeControlTitle,The length of the statement  "		if (PortalSettings.Current.ActiveTab.TabPath.StartsWith ("//Admin//"' StringComparison.CurrentCultureIgnoreCase) || String.Compare (PortalSettings.Current.ActiveTab.TabPath' "//Admin"' StringComparison.OrdinalIgnoreCase) == 0 || PortalSettings.Current.ActiveTab.TabPath.StartsWith ("//Host//"' StringComparison.CurrentCultureIgnoreCase) || String.Compare (PortalSettings.Current.ActiveTab.TabPath' "//Host"' StringComparison.OrdinalIgnoreCase) == 0) { " is 451.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,RemoveLanguageFromPortal,The length of the statement  "		EventLogController.Instance.AddLog ("portalID/languageID"' portalID + "/" + languageID' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.LANGUAGETOPORTAL_DELETED); " is 255.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,SaveLanguage,The length of the statement  "		locale.LanguageId = DataProvider.Instance ().AddLanguage (locale.Code' locale.Text' locale.Fallback' UserController.Instance.GetCurrentUserInfo ().UserID); " is 155.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,SaveLanguage,The length of the statement  "		EventLogController.Instance.AddLog (locale' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.LANGUAGE_CREATED); " is 207.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,SaveLanguage,The length of the statement  "		DataProvider.Instance ().UpdateLanguage (locale.LanguageId' locale.Code' locale.Text' locale.Fallback' UserController.Instance.GetCurrentUserInfo ().UserID); " is 157.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,SaveLanguage,The length of the statement  "		EventLogController.Instance.AddLog (locale' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.LANGUAGE_UPDATED); " is 207.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,SetThreadCultures,The length of the statement  "	if (portalSettings != null && portalSettings.ContentLocalizationEnabled && HttpContext.Current.Request.IsAuthenticated && portalSettings.AllowUserUICulture) { " is 158.
Long Statement,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,LocalizeControlTitle,The length of the statement  "	string resFile = controlSrc.Substring (0' controlSrc.LastIndexOf ("/") + 1) + LocalResourceDirectory + controlSrc.Substring (controlSrc.LastIndexOf ("/")' controlSrc.LastIndexOf (".") - controlSrc.LastIndexOf ("/")); " is 216.
Long Statement,DotNetNuke.Services.Localization,LocalizationExpressionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationExpressionBuilder.cs,GetCodeExpression,The length of the statement  "	return new CodeMethodInvokeExpression (new CodeTypeReferenceExpression (GetType ())' "GetLocalizedResource"' inputParams); " is 122.
Long Statement,DotNetNuke.Services.Localization,LocalizationExpressionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationExpressionBuilder.cs,GetLocalizedResource,The length of the statement  "					throw new InvalidOperationException (string.Format ("Localized value '{0}' cannot be converted to type {1}."' key' propDesc.PropertyType)); " is 139.
Long Statement,DotNetNuke.Services.Localization,LocaleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocaleController.cs,GetLocalesCallBack,The length of the statement  "	Dictionary<string' Locale> locales = CBO.FillDictionary ("CultureCode"' portalID > Null.NullInteger ? DataProvider.Instance ().GetLanguagesByPortal (portalID) : DataProvider.Instance ().GetLanguages ()' new Dictionary<string' Locale> (StringComparer.OrdinalIgnoreCase)); " is 270.
Long Statement,DotNetNuke.Services.Localization,LocaleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocaleController.cs,CanDeleteLanguage,The length of the statement  "	return PackageController.Instance.GetExtensionPackages (Null.NullInteger' p => p.PackageType == "CoreLanguagePack").Select (package => LanguagePackController.GetLanguagePackByPackage (package.PackageID)).All (languagePack => languagePack.LanguageID != languageId); " is 264.
Long Statement,DotNetNuke.Services.Localization,LocaleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocaleController.cs,GetCurrentLocale,The length of the statement  "	return locale ?? ((PortalId == Null.NullInteger) ? GetLocale (Localization.SystemLocale) : GetDefaultLocale (PortalId)); " is 120.
Long Statement,DotNetNuke.Services.Localization,LocaleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocaleController.cs,GetLocales,The length of the statement  "			locales = CBO.GetCachedObject<Dictionary<string' Locale>> (new CacheItemArgs (cacheKey' DataCache.LocalesCacheTimeOut' DataCache.LocalesCachePriority' portalID)' GetLocalesCallBack' true); " is 188.
Long Statement,DotNetNuke.Services.Localization,LocaleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocaleController.cs,GetLocales,The length of the statement  "			locales = CBO.FillDictionary ("CultureCode"' DataProvider.Instance ().GetLanguages ()' new Dictionary<string' Locale> (StringComparer.OrdinalIgnoreCase)); " is 154.
Long Statement,DotNetNuke.Services.Localization,LocaleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocaleController.cs,UpdatePortalLocale,The length of the statement  "	DataProvider.Instance ().UpdatePortalLanguage (locale.PortalId' locale.LanguageId' locale.IsPublished' UserController.Instance.GetCurrentUserInfo ().UserID); " is 157.
Long Statement,DotNetNuke.Services.Localization.Persian,PersianController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Persian\PersianController.cs,GetPersianCultureInfo,The length of the statement  "	FieldInfo fieldInfo = persianCultureInfo.GetType ().GetField ("calendar"' BindingFlags.NonPublic | BindingFlags.Instance); " is 122.
Long Statement,DotNetNuke.Services.Localization.Persian,PersianController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Persian\PersianController.cs,GetPersianCultureInfo,The length of the statement  "	FieldInfo info = persianCultureInfo.DateTimeFormat.GetType ().GetField ("calendar"' BindingFlags.NonPublic | BindingFlags.Instance); " is 132.
Long Statement,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeCache,The length of the statement  "		throw new IOException ("Deleted " + i + " files' however' some files are locked.  Could not delete the following files: " + filesNotDeleted); " is 141.
Long Statement,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeExpiredItems,The length of the statement  "			throw new IOException ("Deleted " + i + " files' however' some files are locked.  Could not delete the following files: " + filesNotDeleted); " is 141.
Long Statement,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,Remove,The length of the statement  "					PropertyValue = string.Format ("Deleted {0} files' however' some files are locked.  Could not delete the following files: {1}"' i' filesNotDeleted) " is 147.
Long Statement,DotNetNuke.Services.OutputCache.Providers,MemoryProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\MemoryProvider.cs,SetOutput,The length of the statement  "	Cache.Insert (cacheKey' output' null' DateTime.UtcNow.Add (duration)' System.Web.Caching.Cache.NoSlidingExpiration' CacheItemPriority.Default' null); " is 149.
Long Statement,DotNetNuke.Services.OutputCache.Providers,MemoryResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\MemoryResponseFilter.cs,AddItemToCache,The length of the statement  "	Cache.Insert (CacheKey' output' null' DateTime.UtcNow.Add (CacheDuration)' System.Web.Caching.Cache.NoSlidingExpiration' CacheItemPriority.Default' null); " is 154.
Long Statement,DotNetNuke.Services.Search.Controllers,TabResultController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\TabResultController.cs,GetDocUrl,The length of the statement  "			var alias = PortalAliasController.Instance.GetPortalAliasesByPortalId (searchResult.PortalId).OrderByDescending (a => a.IsPrimary).FirstOrDefault (); " is 149.
Long Statement,DotNetNuke.Services.Search.Controllers,TabResultController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\TabResultController.cs,GetDocUrl,The length of the statement  "				url = TestableGlobals.Instance.NavigateURL (searchResult.TabId' portalSettings' string.Empty' searchResult.QueryString); " is 120.
Long Statement,DotNetNuke.Services.Search.Controllers,ModuleResultController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\ModuleResultController.cs,HasViewPermission,The length of the statement  "		var tabModules = TabController.Instance.GetTabsByPortal (searchResult.PortalId).Values.SelectMany (tabinfo => tabinfo.ChildModules.Where (kv => kv.Key == moduleId)).Select (m => m.Value); " is 187.
Long Statement,DotNetNuke.Services.Search.Controllers,ModuleResultController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\ModuleResultController.cs,GetModuleTabs,The length of the statement  "	return CBO.GetCachedObject<ArrayList> (new CacheItemArgs (cacheKey' ModuleByIdCacheTimeOut' ModuleByIdCachePriority' moduleID)' args => CBO.FillCollection (DataProvider.Instance ().GetModule (moduleID' Null.NullInteger)' typeof(ModuleInfo))); " is 242.
Long Statement,DotNetNuke.Services.Search.Controllers,ModuleResultController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\ModuleResultController.cs,GetModuleSearchController,The length of the statement  "	var controller = Reflection.CreateObject (module.DesktopModule.BusinessControllerClass' module.DesktopModule.BusinessControllerClass) as IModuleSearchResultController; " is 167.
Long Statement,DotNetNuke.Services.Search.Controllers,UserResultController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\UserResultController.cs,HasViewPermission,The length of the statement  "		var extendedVisibility = searchResult.UniqueKey.IndexOf ("_") != searchResult.UniqueKey.LastIndexOf ("_") ? searchResult.UniqueKey.Split ('_') [2] : string.Empty; " is 162.
Long Statement,DotNetNuke.Services.Search.Controllers,UserResultController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\UserResultController.cs,GetDocUrl,The length of the statement  "	var url = TestableGlobals.Instance.NavigateURL (PortalSettings.UserTabId' string.Empty' "userid=" + GetUserId (searchResult)); " is 126.
Long Statement,DotNetNuke.Services.Search.Controllers,UserResultController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\UserResultController.cs,HasSocialReplationship,The length of the statement  "				isVisible = targetUser.Social.UserRelationships.Any (userRelationship => (userRelationship.RelationshipId == relationship.RelationshipId && accessingUser.UserID == userRelationship.RelatedUserId && userRelationship.Status == RelationshipStatus.Accepted)); " is 255.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "	if ((searchQuery.ModuleId > 0) && (searchQuery.SearchTypeIds.Count () > 1 || !searchQuery.SearchTypeIds.Contains (_moduleSearchTypeId))) " is 136.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "		throw new ArgumentException (Localization.Localization.GetExceptionMessage ("ModuleIdMustHaveSearchTypeIdForModule"' "ModuleId based search must have SearchTypeId for a module only")); " is 184.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "	if (searchQuery.SortField == SortFields.CustomStringField || searchQuery.SortField == SortFields.CustomNumericField || searchQuery.SortField == SortFields.NumericKey || searchQuery.SortField == SortFields.Keyword) " is 213.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "			var allowLeadingWildcard = HostController.Instance.GetString ("Search_AllowLeadingWildcard"' "N") == "Y" || searchQuery.AllowLeadingWildcard; " is 141.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "			var keywords = SearchHelper.Instance.RephraseSearchText (searchQuery.KeyWords' searchQuery.WildCardSearch' allowLeadingWildcard); " is 129.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "				var parserContent = new QueryParser (Constants.LuceneVersion' fieldToSearch' fieldToSearch == Constants.Tag ? nonStemmerAnalyzer : analyzer); " is 141.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "		portalIdQuery.Add (NumericRangeQuery.NewIntRange (Constants.PortalIdTag' portalId' portalId' true' true)' Occur.SHOULD); " is 120.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "	if (searchQuery.BeginModifiedTimeUtc > DateTime.MinValue && searchQuery.EndModifiedTimeUtc >= searchQuery.BeginModifiedTimeUtc) { " is 129.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "		query.Add (NumericRangeQuery.NewLongRange (Constants.ModifiedTimeTag' long.Parse (searchQuery.BeginModifiedTimeUtc.ToString (Constants.DateTimeFormat))' long.Parse (searchQuery.EndModifiedTimeUtc.ToString (Constants.DateTimeFormat))' true' true)' Occur.MUST); " is 259.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "		query.Add (NumericRangeQuery.NewIntRange (Constants.RoleIdTag' searchQuery.RoleId' searchQuery.RoleId' true' true)' Occur.MUST); " is 128.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "		query.Add (new TermQuery (new Term (SearchHelper.Instance.StripTagsNoAttributes (Constants.KeywordsPrefixTag + kvp.Key' true)' kvp.Value))' Occur.MUST); " is 152.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "		query.Add (NumericRangeQuery.NewIntRange (Constants.NumericKeyPrefixTag + kvp.Key' kvp.Value' kvp.Value' true' true)' Occur.MUST); " is 130.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "		localeQuery.Add (NumericRangeQuery.NewIntRange (Constants.LocaleTag' languageId' languageId' true' true)' Occur.SHOULD); " is 120.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The length of the statement  "		localeQuery.Add (NumericRangeQuery.NewIntRange (Constants.LocaleTag' Null.NullInteger' Null.NullInteger' true' true)' Occur.SHOULD); " is 132.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,ApplySearchTypeIdFilter,The length of the statement  "			//this is the main hook for module based search. Occur.MUST is a requirement for this condition or else results from other modules will be found " is 144.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,ApplySearchTypeIdFilter,The length of the statement  "			query.Add (NumericRangeQuery.NewIntRange (Constants.ModuleIdTag' searchQuery.ModuleId' searchQuery.ModuleId' true' true)' Occur.MUST); " is 134.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,ApplySearchTypeIdFilter,The length of the statement  "				modDefQuery.Add (NumericRangeQuery.NewIntRange (Constants.ModuleDefIdTag' moduleDefId' moduleDefId' true' true)' Occur.SHOULD); " is 127.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,ApplySearchTypeIdFilter,The length of the statement  "		query.Add (NumericRangeQuery.NewIntRange (Constants.SearchTypeTag' _moduleSearchTypeId' _moduleSearchTypeId' true' true)' Occur.MUST); " is 134.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,ApplySearchTypeIdFilter,The length of the statement  "					searchTypeIdQuery.Add (NumericRangeQuery.NewIntRange (Constants.ModuleDefIdTag' moduleDefId' moduleDefId' true' true)' Occur.SHOULD); " is 133.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,ApplySearchTypeIdFilter,The length of the statement  "					searchTypeIdQuery.Add (NumericRangeQuery.NewIntRange (Constants.SearchTypeTag' searchTypeId' searchTypeId' true' true)' Occur.SHOULD); " is 134.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,ApplySearchTypeIdFilter,The length of the statement  "				searchTypeIdQuery.Add (NumericRangeQuery.NewIntRange (Constants.SearchTypeTag' searchTypeId' searchTypeId' true' true)' Occur.SHOULD); " is 134.
Long Statement,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetPartialSearchResult,The length of the statement  "		result.CultureCode = int.TryParse (localeField.StringValue' out id) && id >= 0 ? LocaleController.Instance.GetLocale (id).Code : Null.NullString; " is 145.
Long Statement,DotNetNuke.Services.Search.Internals,SearchQueryAnalyzer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchQueryAnalyzer.cs,TokenStream,The length of the statement  "	new LowerCaseFilter (new LengthFilter (new StandardFilter (new StandardTokenizer (Constants.LuceneVersion' reader))' wordLengthMinMax.Item1' wordLengthMinMax.Item2))); " is 167.
Long Statement,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,GetSearchReindexRequestTime,The length of the statement  "	var reindexRequest = portalId < 0 ? HostController.Instance.GetString (Constants.SearchReindexSettingName' Null.NullString) // host level setting " is 145.
Long Statement,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,GetPortalsToReindex,The length of the statement  "	var portals2Reindex = PortalController.Instance.GetPortals ().Cast<PortalInfo> ().Where (portal => IsReindexRequested (portal.PortalID' startDate)).Select (portal => portal.PortalID); " is 183.
Long Statement,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,GetLastSuccessfulIndexingDateTime,The length of the statement  "	if (!string.IsNullOrEmpty (lastValue) && DateTime.TryParseExact (lastValue' Constants.ReindexDateTimeFormat' null' DateTimeStyles.None' out lastTime)) { " is 152.
Long Statement,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,SetLastSuccessfulIndexingDateTime,The length of the statement  "	SchedulingProvider.Instance ().AddScheduleItemSetting (scheduleId' Constants.SearchLastSuccessIndexName' startDateLocal.ToUniversalTime ().ToString (Constants.ReindexDateTimeFormat)); " is 183.
Long Statement,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,GetIndexerCheckpointUtcTime,The length of the statement  "	if (!string.IsNullOrEmpty (lastValue) && DateTime.TryParseExact (lastValue' Constants.ReindexDateTimeFormat' null' DateTimeStyles.None' out lastUtcTime)) { " is 155.
Long Statement,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,SetIndexerCheckpointUtcTime,The length of the statement  "	SchedulingProvider.Instance ().AddScheduleItemSetting (scheduleId' indexerKey' lastUtcTime.ToString (Constants.ReindexDateTimeFormat)); " is 135.
Long Statement,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,GetSearchMinMaxLength,The length of the statement  "		var exceptionMessage = Localization.Localization.GetExceptionMessage ("SearchAnalyzerMinWordLength"' "Search Analyzer: min word length ({0}) is greater than max word length ({1}) value"); " is 187.
Long Statement,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,FixLastWord,The length of the statement  "			lastWord = (beginIsGroup && endIsGroup) ? string.Format ("{0} OR {1}{0}*"' lastWord' allowLeadingWildcard ? "*" : string.Empty) : string.Format ("({0} OR {1}{0}*)"' lastWord' allowLeadingWildcard ? "*" : string.Empty); " is 218.
Long Statement,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,EnsurePortalDefaultsAreSet,The length of the statement  "		var currentStopWords = CBO.FillCollection<SearchStopWords> (DataProvider.Instance ().GetSearchStopWords (portalId' locale.Code)); " is 129.
Long Statement,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,EnsurePortalDefaultsAreSet,The length of the statement  "		var currentSynonymGroups = CBO.FillCollection<SynonymsGroup> (DataProvider.Instance ().GetAllSynonymsGroups (portalId' locale.Code)); " is 133.
Long Statement,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,GetResourceFile,The length of the statement  "	return File.Exists (Path.Combine (Globals.ApplicationMapPath' ResourceFileRelativePathWithoutExt + "." + cultureCode + ".resx")) ? cultureRelativePath : regularRelativePath; " is 173.
Long Statement,DotNetNuke.Services.Search.Internals,SearchSecurityTrimmer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchSecurityTrimmer.cs,PrepareScoreDocs,The length of the statement  "					}).OrderByDescending (rec => GetLongFromField (rec.Document' field)).ThenByDescending (rec => rec.Document.Boost).Select (rec => rec.SDoc); " is 139.
Long Statement,DotNetNuke.Services.Search.Internals,SearchSecurityTrimmer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchSecurityTrimmer.cs,PrepareScoreDocs,The length of the statement  "					}).OrderBy (rec => GetLongFromField (rec.Document' field)).ThenByDescending (rec => rec.Document.Boost).Select (rec => rec.SDoc); " is 129.
Long Statement,DotNetNuke.Services.Search.Internals,SearchSecurityTrimmer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchSecurityTrimmer.cs,PrepareScoreDocs,The length of the statement  "					}).OrderByDescending (rec => GetStringFromField (rec.Document' field)).ThenByDescending (rec => rec.Document.Boost).Select (rec => rec.SDoc); " is 141.
Long Statement,DotNetNuke.Services.Search.Internals,SearchSecurityTrimmer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchSecurityTrimmer.cs,PrepareScoreDocs,The length of the statement  "					}).OrderBy (rec => GetStringFromField (rec.Document' field)).ThenByDescending (rec => rec.Document.Boost).Select (rec => rec.SDoc); " is 131.
Long Statement,DotNetNuke.Services.Search.Internals,SynonymAnalyzer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SynonymAnalyzer.cs,TokenStream,The length of the statement  "	new SynonymFilter (new StopFilter (true' new LowerCaseFilter (new LengthFilter (new StandardFilter (new StandardTokenizer (Constants.LuceneVersion' reader))' wordLengthMinMax.Item1' wordLengthMinMax.Item2))' stops)))); " is 218.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,GetSearchContentSourceList,The length of the statement  "	var searchableModuleDefsCacheArgs = new CacheItemArgs (string.Format (SearchableModuleDefsKey' SearchableModuleDefsCacheKey' portalId)' 120' CacheItemPriority.Default); " is 168.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,GetSearchContentSourceList,The length of the statement  "	var list = CBO.GetCachedObject<IList<SearchContentSource>> (searchableModuleDefsCacheArgs' SearchContentSourceCallback); " is 120.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,GetSearchDocumentTypeDisplayName,The length of the statement  "	var keys = CBO.Instance.GetCachedObject<IDictionary<string' string>> (new CacheItemArgs (key' 120' CacheItemPriority.Default)' SearchDocumentTypeDisplayNameCallBack' false); " is 173.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentInternal,The length of the statement  "	Requires.PropertyNotEqualTo ("searchDocument"' "ModifiedTimeUtc"' searchDocument.ModifiedTimeUtc.ToString (CultureInfo.InvariantCulture)' DateTime.MinValue.ToString (CultureInfo.InvariantCulture)); " is 197.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentInternal,The length of the statement  "			throw new ArgumentException (Localization.Localization.GetExceptionMessage ("ModuleDefIdMustBeGreaterThanZero"' "ModuleDefId must be greater than zero when SearchTypeId is for a module")); " is 188.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentInternal,The length of the statement  "			throw new ArgumentException (Localization.Localization.GetExceptionMessage ("ModuleIdMustBeGreaterThanZero"' "ModuleId must be greater than zero when SearchTypeId is for a module")); " is 182.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentInternal,The length of the statement  "			throw new ArgumentException (Localization.Localization.GetExceptionMessage ("ModuleDefIdWhenSearchTypeForModule"' "ModuleDefId is needed only when SearchTypeId is for a module")); " is 179.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentInternal,The length of the statement  "			throw new ArgumentException (Localization.Localization.GetExceptionMessage ("ModuleIdWhenSearchTypeForModule"' "ModuleId is needed only when SearchTypeId is for a module")); " is 173.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentInternal,The length of the statement  "	//Field.Store.YES    | Stores the value. When the value is stored' the original String in its entirety is recorded in the index " is 127.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentInternal,The length of the statement  "	//Field.Store.NO     | Doesn’t store the value. This option is often used along with Index.ANALYZED to index a large text field that doesn’t need to be retrieved " is 161.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentInternal,The length of the statement  "	//Index.ANALYZED     | Use the analyzer to break the field’s value into a stream of separate tokens and make each token searchable " is 130.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentInternal,The length of the statement  "	//Index.NOT_ANALYZED | Do index the field' but don’t analyze the String value.Instead' treat the Field’s entire value as a single token and make that token searchable. " is 167.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,DeleteSearchDocumentInternal,The length of the statement  "		query.Add (NumericValueQuery (Constants.LocaleTag' Localization.Localization.GetCultureLanguageID (searchDocument.CultureCode))' Occur.MUST); " is 141.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The length of the statement  "	doc.Add (new Field (Constants.UniqueKeyTag' SearchHelper.Instance.StripTagsNoAttributes (searchDocument.UniqueKey' true)' Field.Store.YES' Field.Index.NOT_ANALYZED)); " is 166.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The length of the statement  "	doc.Add (!string.IsNullOrEmpty (searchDocument.CultureCode) ? new NumericField (Constants.LocaleTag' Field.Store.YES' true).SetIntValue (Localization.Localization.GetCultureLanguageID (searchDocument.CultureCode)) : new NumericField (Constants.LocaleTag' Field.Store.YES' true).SetIntValue (-1)); " is 296.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The length of the statement  "		var field = new Field (Constants.TitleTag' StripTagsRetainAttributes (searchDocument.Title' HtmlAttributesToRetain' false' true)' Field.Store.YES' Field.Index.ANALYZED' Field.TermVector.WITH_POSITIONS_OFFSETS); " is 210.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The length of the statement  "		var field = new Field (Constants.DescriptionTag' StripTagsRetainAttributes (searchDocument.Description' HtmlAttributesToRetain' false' true)' Field.Store.YES' Field.Index.ANALYZED' Field.TermVector.WITH_POSITIONS_OFFSETS); " is 222.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The length of the statement  "		doc.Add (new Field (Constants.BodyTag' StripTagsRetainAttributes (searchDocument.Body' HtmlAttributesToRetain' false' true)' Field.Store.YES' Field.Index.ANALYZED' Field.TermVector.WITH_POSITIONS_OFFSETS)); " is 206.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The length of the statement  "		doc.Add (new Field (Constants.UrlTag' SearchHelper.Instance.StripTagsNoAttributes (searchDocument.Url' true)' Field.Store.YES' Field.Index.NOT_ANALYZED)); " is 154.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The length of the statement  "		var field = new Field (SearchHelper.Instance.StripTagsNoAttributes (Constants.KeywordsPrefixTag + kvp.Key' true)' SearchHelper.Instance.StripTagsNoAttributes (kvp.Value' true)' Field.Store.YES' needAnalyzed ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED); " is 258.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The length of the statement  "		doc.Add (new NumericField (SearchHelper.Instance.StripTagsNoAttributes (Constants.NumericKeyPrefixTag + kvp.Key' true)' Field.Store.YES' true).SetIntValue (kvp.Value)); " is 168.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The length of the statement  "		var field = new Field (Constants.Tag' SearchHelper.Instance.StripTagsNoAttributes (tag.ToLower ()' true)' Field.Store.YES' Field.Index.NOT_ANALYZED' Field.TermVector.WITH_POSITIONS_OFFSETS); " is 190.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The length of the statement  "			var field = new Field (Constants.AuthorNameTag' user.DisplayName' Field.Store.YES' Field.Index.ANALYZED' Field.TermVector.WITH_POSITIONS_OFFSETS); " is 146.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The length of the statement  "		doc.Add (new Field (Constants.PermissionsTag' SearchHelper.Instance.StripTagsNoAttributes (searchDocument.Permissions' true)' Field.Store.YES' Field.Index.NOT_ANALYZED)); " is 170.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The length of the statement  "	doc.Add (new NumericField (Constants.ModifiedTimeTag' Field.Store.YES' true).SetLongValue (long.Parse (searchDocument.ModifiedTimeUtc.ToString (Constants.DateTimeFormat)))); " is 173.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The length of the statement  "		var field = new Field (Constants.ContentTag' SearchHelper.Instance.StripTagsNoAttributes (sb.ToString ()' true)' Field.Store.YES' Field.Index.ANALYZED' Field.TermVector.WITH_POSITIONS_OFFSETS); " is 193.
Long Statement,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,StripTagsRetainAttributes,The length of the statement  "		strippedString = StripTagsRetainAttributes (HttpUtility.HtmlDecode (strippedString)' attributesList' true' retainSpace); " is 120.
Long Statement,DotNetNuke.Services.Search.Internals,LuceneControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneControllerImpl.cs,CheckDisposed,The length of the statement  "		throw new ObjectDisposedException (Localization.Localization.GetExceptionMessage ("LuceneControlerIsDisposed"' "LuceneController is disposed and cannot be used anymore")); " is 171.
Long Statement,DotNetNuke.Services.Search.Internals,LuceneControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneControllerImpl.cs,CheckValidIndexFolder,The length of the statement  "		throw new SearchIndexEmptyException (Localization.Localization.GetExceptionMessage ("SearchIndexingDirectoryNoValid"' "Search indexing directory is either empty or does not exist")); " is 182.
Long Statement,DotNetNuke.Services.Search.Internals,LuceneControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneControllerImpl.cs,Search,The length of the statement  "		TitleSnippet = GetHighlightedText (highlighter' fieldQuery' searcher' match' Constants.TitleTag' searchContext.LuceneQuery.TitleSnippetLength)' " is 143.
Long Statement,DotNetNuke.Services.Search.Internals,LuceneControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneControllerImpl.cs,Search,The length of the statement  "		BodySnippet = GetHighlightedText (highlighter' fieldQuery' searcher' match' Constants.BodyTag' searchContext.LuceneQuery.BodySnippetLength)' " is 140.
Long Statement,DotNetNuke.Services.Search.Internals,LuceneControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneControllerImpl.cs,Search,The length of the statement  "		DescriptionSnippet = GetHighlightedText (highlighter' fieldQuery' searcher' match' Constants.DescriptionTag' searchContext.LuceneQuery.TitleSnippetLength)' " is 155.
Long Statement,DotNetNuke.Services.Search.Internals,LuceneControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneControllerImpl.cs,Search,The length of the statement  "		TagSnippet = GetHighlightedText (highlighter' fieldQuery' searcher' match' Constants.Tag' searchContext.LuceneQuery.TitleSnippetLength)' " is 136.
Long Statement,DotNetNuke.Services.Search.Internals,LuceneControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneControllerImpl.cs,Search,The length of the statement  "		AuthorSnippet = GetHighlightedText (highlighter' fieldQuery' searcher' match' Constants.AuthorNameTag' searchContext.LuceneQuery.TitleSnippetLength)' " is 149.
Long Statement,DotNetNuke.Services.Search.Internals,LuceneControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneControllerImpl.cs,Search,The length of the statement  "		ContentSnippet = GetHighlightedText (highlighter' fieldQuery' searcher' match' Constants.ContentTag' searchContext.LuceneQuery.TitleSnippetLength) " is 146.
Long Statement,DotNetNuke.Services.Search.Internals,LuceneControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneControllerImpl.cs,GetCustomAnalyzer,The length of the statement  "					throw new ArgumentException (String.Format (Localization.Localization.GetExceptionMessage ("InvalidAnalyzerClass"' "The class '{0}' cannot be created because it's invalid or is not an analyzer' will use default analyzer.")' customAnalyzerType)); " is 245.
Long Statement,DotNetNuke.Services.Search,TabIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\TabIndexer.cs,IndexSearchDocuments,The length of the statement  "	where t.LastModifiedOnDate > startDateLocal && (t.TabSettings ["AllowIndex"] == null || "true".Equals (t.TabSettings ["AllowIndex"].ToString ()' StringComparison.CurrentCultureIgnoreCase)) " is 188.
Long Statement,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,IndexSearchDocuments,The length of the statement  "	var profileDefinitions = ProfileController.GetPropertyDefinitionsByPortal (portalId' false' false).Cast<ProfilePropertyDefinition> ().Where (d => (textDataType != null && d.DataType == textDataType.EntryID) || (richTextDataType != null && d.DataType == richTextDataType.EntryID)).ToList (); " is 290.
Long Statement,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,IndexSearchDocuments,The length of the statement  "			rowsAffected = FindModifiedUsers (portalId' startDateLocal' searchDocuments' profileDefinitions' out indexedUsers' ref startUserId); " is 132.
Long Statement,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,IndexCollectedDocs,The length of the statement  "	var total = searchDocuments.Select (d => d.UniqueKey.Substring (0' d.UniqueKey.IndexOf ("_"' StringComparison.Ordinal))).Distinct ().Count (); " is 142.
Long Statement,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,FindModifiedUsers,The length of the statement  "	using (var reader = DataProvider.Instance ().GetAvailableUsersForIndex (portalId' startDateLocal' startUserId' BatchSize)) { " is 124.
Long Statement,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,AddBasicInformation,The length of the statement  "	if (!searchDocuments.ContainsKey (string.Format ("{0}_{1}"' userSearch.UserId' UserVisibilityMode.AllUsers).ToLowerInvariant ())) { " is 131.
Long Statement,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,AddBasicInformation,The length of the statement  "	if (!searchDocuments.ContainsKey (string.Format ("{0}_{1}"' userSearch.UserId' UserVisibilityMode.AdminOnly).ToLowerInvariant ())) { " is 132.
Long Statement,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,IndexSearchDocuments,The length of the statement  "	var searchModuleCollection = _searchModules.ContainsKey (portalId) ? _searchModules [portalId].Where (m => m.SupportSearch).Select (m => m.ModuleInfo) : GetSearchModules (portalId); " is 181.
Long Statement,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,IndexSearchDocuments,The length of the statement  "	var modulesInDateRange = searchModuleCollection.Where (module => !((SqlDateTime.MinValue.Value < module.LastContentModifiedOnDate && module.LastContentModifiedOnDate < startDateLocal))).OrderBy (m => m.LastContentModifiedOnDate).ThenBy (m => m.ModuleID).ToArray (); " is 265.
Long Statement,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,IndexSearchDocuments,The length of the statement  "				var controller = Reflection.CreateObject (module.DesktopModule.BusinessControllerClass' module.DesktopModule.BusinessControllerClass); " is 134.
Long Statement,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,IndexSearchDocuments,The length of the statement  "				var searchItems = contentInfo.ModSearchBaseControllerType.GetModifiedSearchDocuments (module' startDateLocal.ToUniversalTime ()); " is 129.
Long Statement,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,IndexSearchDocuments,The length of the statement  "						Logger.TraceFormat ("ModuleIndexer: {0} search documents found for module [{1} mid:{2}]"' searchItems.Count' module.DesktopModule.ModuleName' module.ModuleID); " is 159.
Long Statement,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,GetModuleMetaData,The length of the statement  "	var searchModuleCollection = _searchModules.ContainsKey (portalId) ? _searchModules [portalId].Select (m => m.ModuleInfo) : GetSearchModules (portalId' true); " is 158.
Long Statement,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,GetModuleMetaData,The length of the statement  "				Logger.Trace ("ModuleIndexer: Search document for metaData found for module [" + module.DesktopModule.ModuleName + " mid:" + module.ModuleID + "]"); " is 148.
Long Statement,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,GetSearchIndexItems,The length of the statement  "				Logger.Trace ("ModuleIndexer: " + myCollection.Count + " search documents found for module [" + scModInfo.ModInfo.DesktopModule.ModuleName + " mid:" + scModInfo.ModInfo.ModuleID + "]"); " is 185.
Long Statement,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,GetModuleList,The length of the statement  "					controller = Reflection.CreateObject (module.DesktopModule.BusinessControllerClass' module.DesktopModule.BusinessControllerClass); " is 130.
Long Statement,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,ThrowLogError,The length of the statement  "		var message = string.Format (Localization.Localization.GetExceptionMessage ("ErrorCreatingBusinessControllerClass"' "Error Creating BusinessControllerClass '{0}' of module({1}) id=({2}) in tab({3}) and portal({4})")' module.DesktopModule.BusinessControllerClass' module.DesktopModule.ModuleName' module.ModuleID' module.TabID' module.PortalID); " is 344.
Long Statement,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,GetModulesForIndex,The length of the statement  "	var modules = ModuleController.Instance.GetSearchModules (portalId).Cast<ModuleInfo> ().Where (m => m.TabModuleSettings ["AllowIndex"] == null || bool.Parse (m.TabModuleSettings ["AllowIndex"].ToString ())); " is 207.
Long Statement,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,GetModulesForIndex,The length of the statement  "			if (tab.TabSettings ["AllowIndex"] == null || (tab.TabSettings ["AllowIndex"] != null && bool.Parse (tab.TabSettings ["AllowIndex"].ToString ()))) { " is 148.
Long Statement,DotNetNuke.Services.Search,ModuleIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\ModuleIndexer.cs,GetModulesForIndex,The length of the statement  "						controller = Reflection.CreateObject (module.DesktopModule.BusinessControllerClass' module.DesktopModule.BusinessControllerClass); " is 130.
Long Statement,DotNetNuke.Services.Search,IndexingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\IndexingProvider.cs,GetLocalTimeOfLastIndexedItem,The length of the statement  "	var lastTime = SearchHelper.Instance.GetIndexerCheckpointUtcTime (scheduleId' ScheduleItemSettingKey (portalId' TimePostfix)).ToLocalTime (); " is 141.
Long Statement,DotNetNuke.Services.Search,IndexingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\IndexingProvider.cs,SetLocalTimeOfLastIndexedItem,The length of the statement  "	SearchHelper.Instance.SetIndexerCheckpointUtcTime (scheduleId' ScheduleItemSettingKey (portalId' TimePostfix)' localTime.ToUniversalTime ()); " is 141.
Long Statement,DotNetNuke.Services.Search,IndexingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\IndexingProvider.cs,ScheduleItemSettingKey,The length of the statement  "	return string.Join ("_"' "Search"' t.Name' t.FullName.GetHashCode ().ToString ("x8")' portalId.ToString ()' propertyId); " is 120.
Long Statement,DotNetNuke.Services.Search,SearchEngineScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchEngineScheduler.cs,DoWork,The length of the statement  "		ScheduleHistoryItem.AddLogNote (string.Format ("Starting. Content change start time <b>{0:g}</b>"' lastSuccessFulDateTime)); " is 124.
Long Statement,DotNetNuke.Services.Search,SearchEngineScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchEngineScheduler.cs,DoWork,The length of the statement  "		SearchHelper.Instance.SetLastSuccessfulIndexingDateTime (ScheduleHistoryItem.ScheduleID' ScheduleHistoryItem.StartDate); " is 120.
Long Statement,DotNetNuke.Services.Social.Messaging,UserPreferencesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\UserPreferencesController.cs,SetUserPreference,The length of the statement  "	dataService.SetUserPreference (userPreference.PortalId' userPreference.UserId' Convert.ToInt32 (userPreference.MessagesEmailFrequency)' Convert.ToInt32 (userPreference.NotificationsEmailFrequency)); " is 198.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "		throw new ArgumentException (Localization.Localization.GetString ("MsgSenderRequiredError"' Localization.Localization.ExceptionsResourceFile)); " is 143.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "		throw new ArgumentException (Localization.Localization.GetString ("MsgMessageRequiredError"' Localization.Localization.ExceptionsResourceFile)); " is 144.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "		throw new ArgumentException (Localization.Localization.GetString ("MsgSubjectOrBodyRequiredError"' Localization.Localization.ExceptionsResourceFile)); " is 150.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "		throw new ArgumentException (Localization.Localization.GetString ("MsgRolesOrUsersRequiredError"' Localization.Localization.ExceptionsResourceFile)); " is 149.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "		throw new ArgumentException (Localization.Localization.GetString ("PrivateMessageDisabledError"' Localization.Localization.ExceptionsResourceFile)); " is 148.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "		throw new ArgumentException (string.Format (Localization.Localization.GetString ("MsgSubjectTooBigError"' Localization.Localization.ExceptionsResourceFile)' ConstMaxSubject' message.Subject.Length)); " is 199.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "		if (!roles.All (role => sender.Social.Roles.Any (userRoleInfo => role.RoleID == userRoleInfo.RoleID && userRoleInfo.IsOwner))) { " is 128.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "			throw new ArgumentException (Localization.Localization.GetString ("MsgOnlyHostOrAdminOrUserInGroupCanSendToRoleError"' Localization.Localization.ExceptionsResourceFile)); " is 170.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "		throw new ArgumentException (Localization.Localization.GetString ("MsgEmptyToListFoundError"' Localization.Localization.ExceptionsResourceFile)); " is 145.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "		throw new ArgumentException (string.Format (Localization.Localization.GetString ("MsgToListTooBigError"' Localization.Localization.ExceptionsResourceFile)' ConstMaxTo' sbTo.Length)); " is 182.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "		throw new ThrottlingIntervalNotMetException (string.Format (Localization.Localization.GetString ("MsgThrottlingIntervalNotMet"' Localization.Localization.ExceptionsResourceFile)' interval)); " is 190.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "		throw new AttachmentsNotAllowed (Localization.Localization.GetString ("MsgAttachmentsNotAllowed"' Localization.Localization.ExceptionsResourceFile)); " is 149.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "		throw new RecipientLimitExceededException (Localization.Localization.GetString ("MsgRecipientLimitExceeded"' Localization.Localization.ExceptionsResourceFile)); " is 160.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "	message.MessageID = _dataService.SaveMessage (message' PortalController.GetEffectivePortalId (UserController.Instance.GetCurrentUserInfo ().PortalID)' UserController.Instance.GetCurrentUserInfo ().UserID); " is 205.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "		_dataService.CreateMessageRecipientsForRole (message.MessageID' roleIds' UserController.Instance.GetCurrentUserInfo ().UserID); " is 127.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,SendMessage,The length of the statement  "			recipient.RecipientID = _dataService.SaveMessageRecipient (recipient' UserController.Instance.GetCurrentUserInfo ().UserID); " is 124.
Long Statement,DotNetNuke.Services.Social.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\MessagingController.cs,IsAdminOrHost,The length of the statement  "	return userInfo.IsSuperUser || userInfo.IsInRole (PortalController.Instance.GetCurrentPortalSettings ().AdministratorRoleName); " is 127.
Long Statement,DotNetNuke.Services.Social.Subscriptions.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\Data\DataService.cs,AddSubscriptionType,The length of the statement  "	return provider.ExecuteScalar<int> ("CoreMessaging_AddSubscriptionType"' subscriptionName' friendlyName' desktopModuleId); " is 122.
Long Statement,DotNetNuke.Services.Social.Subscriptions.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\Data\DataService.cs,AddSubscription,The length of the statement  "	return provider.ExecuteScalar<int> ("CoreMessaging_AddSubscription"' userId' provider.GetNull (portalId)' subscriptionTypeId' objectKey' description' provider.GetNull (moduleId)' provider.GetNull (tabId)' objectData); " is 217.
Long Statement,DotNetNuke.Services.Social.Subscriptions.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\Data\DataService.cs,GetSubscriptionsByUser,The length of the statement  "	return provider.ExecuteReader ("CoreMessaging_GetSubscriptionsByUser"' provider.GetNull (portalId)' userId' provider.GetNull (subscriptionTypeId)); " is 147.
Long Statement,DotNetNuke.Services.Social.Subscriptions.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\Data\DataService.cs,GetSubscriptionsByContent,The length of the statement  "	return provider.ExecuteReader ("CoreMessaging_GetSubscriptionsByContent"' provider.GetNull (portalId)' subscriptionTypeId' objectKey); " is 134.
Long Statement,DotNetNuke.Services.Social.Subscriptions.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\Data\DataService.cs,IsSubscribed,The length of the statement  "	return provider.ExecuteReader ("CoreMessaging_IsSubscribed"' provider.GetNull (portalId)' userId' subscriptionTypeId' objectKey' provider.GetNull (moduleId)' provider.GetNull (tabId)); " is 184.
Long Statement,DotNetNuke.Services.Social.Subscriptions.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\Data\DataService.cs,UpdateSubscriptionDescription,The length of the statement  "	return provider.ExecuteScalar<int> ("CoreMessaging_UpdateSubscriptionDescription"' objectKey' portalId' newDescription); " is 120.
Long Statement,DotNetNuke.Services.Social.Subscriptions,SubscriptionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\SubscriptionController.cs,GetUserSubscriptions,The length of the statement  "	var subscriptions = CBO.FillCollection<Subscription> (dataService.GetSubscriptionsByUser (portalId' user.UserID' subscriptionTypeId)); " is 134.
Long Statement,DotNetNuke.Services.Social.Subscriptions,SubscriptionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\SubscriptionController.cs,GetContentSubscriptions,The length of the statement  "	var subscriptions = CBO.FillCollection<Subscription> (dataService.GetSubscriptionsByContent (portalId' subscriptionTypeId' objectKey)); " is 135.
Long Statement,DotNetNuke.Services.Social.Subscriptions,SubscriptionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\SubscriptionController.cs,IsSubscribed,The length of the statement  "	var fetchedSubscription = CBO.FillObject<Subscription> (dataService.IsSubscribed (subscription.PortalId' subscription.UserId' subscription.SubscriptionTypeId' subscription.ObjectKey' subscription.ModuleId' subscription.TabId)); " is 227.
Long Statement,DotNetNuke.Services.Social.Subscriptions,SubscriptionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\SubscriptionController.cs,AddSubscription,The length of the statement  "	subscription.SubscriptionId = dataService.AddSubscription (subscription.UserId' subscription.PortalId' subscription.SubscriptionTypeId' subscription.ObjectKey' subscription.Description' subscription.ModuleId' subscription.TabId' subscription.ObjectData); " is 254.
Long Statement,DotNetNuke.Services.Social.Subscriptions,SubscriptionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\SubscriptionController.cs,DeleteSubscription,The length of the statement  "	var subscriptionToDelete = CBO.FillObject<Subscription> (dataService.IsSubscribed (subscription.PortalId' subscription.UserId' subscription.SubscriptionTypeId' subscription.ObjectKey' subscription.ModuleId' subscription.TabId)); " is 228.
Long Statement,DotNetNuke.Services.Social.Subscriptions,SubscriptionTypeController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\SubscriptionTypeController.cs,AddSubscriptionType,The length of the statement  "	subscriptionType.SubscriptionTypeId = dataService.AddSubscriptionType (subscriptionType.SubscriptionName' subscriptionType.FriendlyName' subscriptionType.DesktopModuleId); " is 171.
Long Statement,DotNetNuke.Services.Social.Subscriptions,SubscriptionTypeController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\SubscriptionTypeController.cs,GetSubscriptionTypes,The length of the statement  "	var cacheArgs = new CacheItemArgs (DataCache.SubscriptionTypesCacheKey' DataCache.SubscriptionTypesTimeOut' DataCache.SubscriptionTypesCachePriority); " is 150.
Long Statement,DotNetNuke.Services.Social.Subscriptions,SubscriptionTypeController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Subscriptions\SubscriptionTypeController.cs,GetSubscriptionTypes,The length of the statement  "	return CBO.GetCachedObject<IEnumerable<SubscriptionType>> (cacheArgs' c => CBO.FillCollection<SubscriptionType> (dataService.GetSubscriptionTypes ())); " is 151.
Long Statement,DotNetNuke.Services.Tokens,JavaScriptPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\JavaScriptPropertyAccess.cs,ProcessToken,The length of the statement  "			throw new ArgumentException ("If the jsname property is not specified then the JavaScript token must specify a path or property."); " is 131.
Long Statement,DotNetNuke.Services.Tokens,BaseCustomTokenReplace,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\BaseCustomTokenReplace.cs,replacedTokenValue,The length of the statement  "		result = PropertySource [objectName.ToLower ()].GetProperty (propertyName' format' FormatProvider' AccessingUser' CurrentAccessLevel' ref propertyNotFound); " is 156.
Long Statement,DotNetNuke.Services.Tokens,BaseCustomTokenReplace,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\BaseCustomTokenReplace.cs,replacedTokenValue,The length of the statement  "			string message = Localization.Localization.GetString ("TokenReplaceUnknownObject"' Localization.Localization.SharedResourceFile' FormatProvider.ToString ()); " is 157.
Long Statement,DotNetNuke.Services.Tokens,BaseCustomTokenReplace,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\BaseCustomTokenReplace.cs,replacedTokenValue,The length of the statement  "			message = Localization.Localization.GetString ("TokenReplaceRestrictedProperty"' Localization.Localization.GlobalResourceFile' FormatProvider.ToString ()); " is 155.
Long Statement,DotNetNuke.Services.Tokens,BaseCustomTokenReplace,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\BaseCustomTokenReplace.cs,replacedTokenValue,The length of the statement  "			message = Localization.Localization.GetString ("TokenReplaceUnknownProperty"' Localization.Localization.GlobalResourceFile' FormatProvider.ToString ()); " is 152.
Long Statement,DotNetNuke.Services.Tokens,BaseCustomTokenReplace,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\BaseCustomTokenReplace.cs,ContainsTokens,The length of the statement  "		return TokenizerRegex.Matches (strSourceText).Cast<Match> ().Any (currentMatch => currentMatch.Result ("${object}").Length > 0); " is 128.
Long Statement,DotNetNuke.Services.Upgrade,DnnInstallLogger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\DnnInstallLogger.cs,LogInstaller,The length of the statement  "		writer.WriteLine (DateTime.UtcNow.ToString (CultureInfo.InvariantCulture) + " " + logType + " " + CallingType + " " + message); " is 127.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddAdminPages,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddAdminPages:" + tabName); " is 158.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddAdminPages,The length of the statement  "	AddAdminPages (tabName' description' tabIconFile' tabIconFileLarge' isVisible' moduleDefId' moduleTitle' moduleIconFile' true); " is 127.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddAdminRoleToPage,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddAdminRoleToPage:" + tabPath); " is 163.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddConsoleModuleSettings,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddConsoleModuleSettings:" + moduleID); " is 170.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleControl,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddModuleControl:" + moduleDefId); " is 165.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleDefinition,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddModuleDefinition:" + desktopModuleName); " is 174.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleDefinition,The length of the statement  "	var moduleDefinition = ModuleDefinitionController.GetModuleDefinitionByFriendlyName (moduleDefinitionName' desktopModule.DesktopModuleID); " is 138.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddPage,The length of the statement  "	return AddPage (portalId' parentId' tabName' description' tabIconFile' tabIconFileLarge' isVisible' permissions' isAdmin); " is 122.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddPage,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddPage:" + tabName); " is 152.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddPagePermission,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddPagePermission:" + key); " is 158.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddSearchResults,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddSearchResults:" + moduleDefId); " is 165.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddSkinControl,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddSkinControl:" + controlKey); " is 162.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddDefaultModuleIcons,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddDefaultModuleIcons"); " is 155.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddDefaultModuleIcons,The length of the statement  "	var pkg = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.Name == "DotNetNuke.Google Analytics"); " is 122.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddDefaultModuleIcons,The length of the statement  "	pkg = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.Name == "DotNetNuke.Configuration Manager"); " is 123.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddDefaultModuleIcons,The length of the statement  "	pkg = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.Name == "DotNetNuke.ProfessionalPreview"); " is 121.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleCategories,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddModuleCategories"); " is 153.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,EnableModalPopUps,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "EnableModalPopUps"); " is 151.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,EnableModalPopUps,The length of the statement  "	foreach (ModuleControlInfo control in ModuleControlController.GetModuleControlsByModuleDefinitionID (Null.NullInteger).Values) { " is 128.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ExecuteScript,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "ExecuteScript:" + scriptFile); " is 161.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ExecuteScript,The length of the statement  "		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' Localization.Localization.GetString ("ExecutingScript"' Localization.Localization.GlobalResourceFile) + ":" + Path.GetFileName (scriptFile)); " is 199.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ExecuteScript,The length of the statement  "		DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + "ExecuteScript:" + scriptFile); " is 159.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ExecuteScript,The length of the statement  "			HtmlUtils.WriteScriptSuccessError (HttpContext.Current.Response' (string.IsNullOrEmpty (exceptions))' resourcesFile.Replace ("." + DefaultProvider' ".log.resources")); " is 167.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetModuleDefinition,The length of the statement  "	ModuleDefinitionInfo objModuleDefinition = ModuleDefinitionController.GetModuleDefinitionByFriendlyName (moduleDefinitionName' desktopModule.DesktopModuleID); " is 158.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallMemberRoleProvider,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "InstallMemberRoleProvider"); " is 159.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallMemberRoleProvider,The length of the statement  "		DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + "InstallMemberRoleProvider"); " is 157.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallMemberRoleProviderScript,The length of the statement  "	string exceptions = DataProvider.Instance ().ExecuteScript (FileSystemUtils.ReadFile (providerPath + scriptFile + ".sql")); " is 123.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ParseFiles,The length of the statement  "				var file = new FileInfo (portalId' fileName' extension' (int)size' width' height' contentType' folder' folderInfo.FolderID' folderInfo.StorageLocation' true); " is 158.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,RemoveCoreModule,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "RemoveCoreModule:" + desktopModuleName); " is 171.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,RemoveCoreModule,The length of the statement  "		PackageController.Instance.DeleteExtensionPackage (PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.PackageID == desktopModule.PackageID)); " is 163.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,RemoveModule,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "RemoveModule:" + desktopModuleName); " is 167.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,RemoveModuleControl,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "RemoveModuleControl:" + moduleDefId); " is 168.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,RemoveModuleFromPortals,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "RemoveModuleFromPortals:" + friendlyName); " is 173.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,TabPermissionExists,The length of the statement  "	return TabPermissionController.GetTabPermissions (tabPermission.TabID' portalID).Cast<TabPermissionInfo> ().Any (permission => permission.TabID == tabPermission.TabID && permission.RoleID == tabPermission.RoleID && permission.PermissionID == tabPermission.PermissionID); " is 270.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,FavIconsToPortalSettings,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "FavIconsToPortalSettings"); " is 158.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddIconToAllowedFiles,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddIconToAllowedFiles"); " is 155.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion440,The length of the statement  "			string[] files = Directory.GetFiles (Globals.ApplicationMapPath + "\\Portals\\" + objPortal.PortalID + "\\Cache\\"' "*.htm"); " is 125.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		moduleDefId = AddModuleDefinition ("Dashboard"' "Provides a snapshot of your DotNetNuke Application."' "Dashboard"' true' true); " is 128.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/Dashboard/Dashboard.ascx"' "icon_dashboard_32px.gif"' SecurityAccessLevel.Host' 0); " is 144.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		AddModuleControl (moduleDefId' "Export"' ""' "DesktopModules/Admin/Dashboard/Export.ascx"' ""' SecurityAccessLevel.Host' 0); " is 124.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		AddModuleControl (moduleDefId' "DashboardControls"' ""' "DesktopModules/Admin/Dashboard/DashboardControls.ascx"' ""' SecurityAccessLevel.Host' 0); " is 146.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		TabInfo dashboardPage = AddHostPage ("Dashboard"' "Summary view of application and site settings."' "~/images/icon_dashboard_16px.gif"' "~/images/icon_dashboard_32px.gif"' true); " is 178.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		AddModuleControl (moduleDefId' "DashboardControls"' ""' "DesktopModules/Admin/Dashboard/DashboardControls.ascx"' ""' SecurityAccessLevel.Host' 0); " is 146.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/Extensions/Extensions.ascx"' "~/images/icon_extensions_32px.png"' SecurityAccessLevel.View' 0); " is 156.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		AddModuleControl (moduleDefId' "Edit"' "Edit Feature"' "DesktopModules/Admin/Extensions/EditExtension.ascx"' "~/images/icon_extensions_32px.png"' SecurityAccessLevel.Edit' 0); " is 175.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		AddModuleControl (moduleDefId' "PackageWriter"' "Package Writer"' "DesktopModules/Admin/Extensions/PackageWriter.ascx"' "~/images/icon_extensions_32px.png"' SecurityAccessLevel.Host' 0); " is 186.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		AddModuleControl (moduleDefId' "EditControl"' "Edit Control"' "DesktopModules/Admin/Extensions/Editors/EditModuleControl.ascx"' "~/images/icon_extensions_32px.png"' SecurityAccessLevel.Host' 0); " is 194.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		AddModuleControl (moduleDefId' "ImportModuleDefinition"' "Import Module Definition"' "DesktopModules/Admin/Extensions/Editors/ImportModuleDefinition.ascx"' "~/images/icon_extensions_32px.png"' SecurityAccessLevel.Host' 0); " is 222.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		AddModuleControl (moduleDefId' "BatchInstall"' "Batch Install"' "DesktopModules/Admin/Extensions/BatchInstall.ascx"' "~/images/icon_extensions_32px.png"' SecurityAccessLevel.Host' 0); " is 183.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		AddModuleControl (moduleDefId' "NewExtension"' "New Extension Wizard"' "DesktopModules/Admin/Extensions/ExtensionWizard.ascx"' "~/images/icon_extensions_32px.png"' SecurityAccessLevel.Host' 0); " is 193.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		AddModuleControl (moduleDefId' "UsageDetails"' "Usage Information"' "DesktopModules/Admin/Extensions/UsageDetails.ascx"' "~/images/icon_extensions_32px.png"' SecurityAccessLevel.Host' 0' ""' true); " is 197.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "		AddModuleControl (moduleDefId' "UsageDetails"' "Usage Information"' "DesktopModules/Admin/Extensions/UsageDetails.ascx"' "~/images/icon_extensions_32px.png"' SecurityAccessLevel.Host' 0' ""' true); " is 197.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	int moduleId = AddModuleToPage (definitionsPage' moduleDefId' "Module Definitions"' "~/images/icon_moduledefinitions_32px.gif"); " is 128.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	TabInfo extensionsPage = AddHostPage ("Extensions"' "Install' add' modify and delete extensions' such as modules' skins and language packs."' "~/images/icon_extensions_16px.gif"' "~/images/icon_extensions_32px.png"' true); " is 222.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddAdminPages ("Extensions"' "Install' add' modify and delete extensions' such as modules' skins and language packs."' "~/images/icon_extensions_16px.gif"' "~/images/icon_extensions_32px.png"' true' moduleDefId' "Extensions"' "~/images/icon_extensions_32px.png"); " is 263.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/Languages/languageeditor.ascx"' "~/images/icon_language_32px.gif"' SecurityAccessLevel.View' 0); " is 157.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddModuleControl (moduleDefId' "Edit"' "Edit Language"' "DesktopModules/Admin/Languages/EditLanguage.ascx"' "~/images/icon_language_32px.gif"' SecurityAccessLevel.Edit' 0); " is 172.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddModuleControl (moduleDefId' "EditResourceKey"' "Full Language Editor"' "DesktopModules/Admin/Languages/languageeditorext.ascx"' "~/images/icon_language_32px.gif"' SecurityAccessLevel.Edit' 0); " is 195.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddModuleControl (moduleDefId' "LanguageSettings"' "Language Settings"' "DesktopModules/Admin/Languages/LanguageSettings.ascx"' ""' SecurityAccessLevel.Edit' 0); " is 161.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddModuleControl (moduleDefId' "TimeZone"' "TimeZone Editor"' "DesktopModules/Admin/Languages/timezoneeditor.ascx"' "~/images/icon_language_32px.gif"' SecurityAccessLevel.Host' 0); " is 180.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddModuleControl (moduleDefId' "Verify"' "Resource File Verifier"' "DesktopModules/Admin/Languages/resourceverifier.ascx"' ""' SecurityAccessLevel.Host' 0); " is 156.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddModuleControl (moduleDefId' "PackageWriter"' "Language Pack Writer"' "DesktopModules/Admin/Languages/LanguagePackWriter.ascx"' ""' SecurityAccessLevel.Host' 0); " is 163.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddAdminPages ("Languages"' "Manage Language Resources."' "~/images/icon_language_16px.gif"' "~/images/icon_language_32px.gif"' true' moduleDefId' "Language Editor"' "~/images/icon_language_32px.gif"); " is 201.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/Skins/editskins.ascx"' "~/images/icon_skins_32px.gif"' SecurityAccessLevel.View' 0); " is 145.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddAdminPages ("Skins"' "Manage Skin Resources."' "~/images/icon_skins_16px.gif"' "~/images/icon_skins_32px.gif"' true' moduleDefId' "Skin Editor"' "~/images/icon_skins_32px.gif"); " is 180.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	moduleDefId = AddModuleDefinition ("Skin Designer"' "Allows you to modify skin attributes."' "Skin Designer"' true' true); " is 122.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/SkinDesigner/Attributes.ascx"' "~/images/icon_skins_32px.gif"' SecurityAccessLevel.Host' 0); " is 153.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	TabInfo newPage = AddHostPage ("What's New"' "Provides a summary of the major features for each release."' "~/images/icon_whatsnew_16px.gif"' "~/images/icon_whatsnew_32px.gif"' true); " is 183.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	moduleDefId = AddModuleDefinition ("Console"' "Display children pages as icon links for navigation."' "Console"' "DotNetNuke.Modules.Console.Components.ConsoleController"' true' false' false); " is 192.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddModuleControl (moduleDefId' ""' "Console"' "DesktopModules/Admin/Console/ViewConsole.ascx"' ""' SecurityAccessLevel.Anonymous' 0); " is 133.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddModuleControl (moduleDefId' "Settings"' "Console Settings"' "DesktopModules/Admin/Console/Settings.ascx"' ""' SecurityAccessLevel.Admin' 0); " is 143.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	moduleDefId = AddModuleDefinition ("Google Analytics"' "Configure Site Google Analytics settings."' "GoogleAnalytics"' false' false); " is 133.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddModuleControl (moduleDefId' ""' "Google Analytics"' "DesktopModules/Admin/Analytics/GoogleAnalyticsSettings.ascx"' ""' SecurityAccessLevel.Admin' 0); " is 152.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion510,The length of the statement  "	AddAdminPages ("Google Analytics"' "Configure Site Google Analytics settings."' "~/images/icon_analytics_16px.gif"' "~/images/icon_analytics_32px.gif"' true' moduleDefId' "Google Analytics"' "~/images/icon_analytics_32px.gif"); " is 227.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion513,The length of the statement  "	var package = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.Name == "DefaultAuthentication"); " is 120.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion520,The length of the statement  "	AddModuleControl (Null.NullInteger' "ViewSource"' "View Module Source"' "Admin/Modules/ViewSource.ascx"' "~/images/icon_source_32px.gif"' SecurityAccessLevel.Host' 0' ""' true); " is 177.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion520,The length of the statement  "	int moduleDefId = AddModuleDefinition ("Marketplace"' "Search for DotNetNuke modules' extension and skins."' "Marketplace"); " is 124.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion520,The length of the statement  "	AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/Marketplace/Marketplace.ascx"' "~/images/icon_marketplace_32px.gif"' SecurityAccessLevel.Host' 0); " is 159.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion520,The length of the statement  "	TabInfo newPage = AddHostPage ("Marketplace"' "Search for DotNetNuke modules' extension and skins."' "~/images/icon_marketplace_16px.gif"' "~/images/icon_marketplace_32px.gif"' true); " is 183.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion521,The length of the statement  "	using (DataProvider.Instance ().ExecuteSQL ("DROP PROCEDURE {databaseOwner}{objectQualifier}UpgradeDefaultLanguages")) { " is 120.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The length of the statement  "	AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/Languages/languageEnabler.ascx"' "~/images/icon_language_32px.gif"' SecurityAccessLevel.View' 0' ""' true); " is 168.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The length of the statement  "	AddModuleControl (moduleDefId' "Editor"' ""' "DesktopModules/Admin/Languages/languageeditor.ascx"' "~/images/icon_language_32px.gif"' SecurityAccessLevel.View' 0); " is 163.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The length of the statement  "	AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/ViewProfile/ViewProfile.ascx"' "~/images/icon_profile_32px.gif"' SecurityAccessLevel.View' 0); " is 155.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The length of the statement  "	AddModuleControl (moduleDefId' "Settings"' "Settings"' "DesktopModules/Admin/ViewProfile/Settings.ascx"' "~/images/icon_profile_32px.gif"' SecurityAccessLevel.Edit' 0); " is 168.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The length of the statement  "	AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/Sitemap/SitemapSettings.ascx"' "~/images/icon_analytics_32px.gif"' SecurityAccessLevel.View' 0); " is 157.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The length of the statement  "	AddAdminPages ("Search Engine Sitemap"' "Configure the sitemap for submission to common search engines."' "~/images/icon_analytics_16px.gif"' "~/images/icon_analytics_32px.gif"' true' moduleDefId' "Search Engine Sitemap"' "~/images/icon_analytics_32px.gif"); " is 258.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The length of the statement  "	ProfileController.AddDefaultDefinition (Null.NullInteger' "Preferences"' "Photo"' "Image"' 0' properties.Count * 2 + 2' UserVisibilityMode.AllUsers' dataTypes); " is 160.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The length of the statement  "			ProfileController.AddDefaultDefinition (portal.PortalID' "Preferences"' "Photo"' "Image"' 0' properties.Count * 2 + 2' UserVisibilityMode.AllUsers' dataTypes); " is 159.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The length of the statement  "				File.Move (defaultPageTemplatePath' String.Format ("{0}Templates\\Default_old.page.template"' portal.HomeDirectoryMapPath)); " is 124.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The length of the statement  "				var userTab = TabController.Instance.GetTabByName (tabName' portal.PortalID) ?? TabController.DeserializeTab (userTabNode' null' portal.PortalID' PortalTemplateModuleAction.Merge); " is 180.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The length of the statement  "	AddModuleControl (moduleDefId' "EditModuleDefinition"' "Edit Module Definition"' "DesktopModules/Admin/Extensions/Editors/EditModuleDefinition.ascx"' "~/images/icon_extensions_32px.png"' SecurityAccessLevel.Host' 0); " is 216.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion540,The length of the statement  "		EventLogController.Instance.AddLog ("UpgradeConfig"' string.IsNullOrEmpty (message) ? "Remove System Web Extensions" : string.Format ("Remove System Web Extensions failed. Error reported during attempt to update:{0}"' message)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.HOST_ALERT); " is 381.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion540,The length of the statement  "	int moduleDefId = AddModuleDefinition ("ContentList"' "This module displays a list of content by tag."' "Content List"); " is 120.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion540,The length of the statement  "	AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/ContentList/ContentList.ascx"' ""' SecurityAccessLevel.View' 0); " is 125.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion550,The length of the statement  "	AddModuleControl (moduleDefId' "TranslationStatus"' ""' "DesktopModules/Admin/Languages/TranslationStatus.ascx"' "~/images/icon_language_32px.gif"' SecurityAccessLevel.Edit' 0); " is 177.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion560,The length of the statement  "	AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/XmlMerge/XmlMerge.ascx"' "~/images/icon_configuration_32px.png"' SecurityAccessLevel.Host' 0); " is 155.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion560,The length of the statement  "	TabInfo hostPage = AddHostPage ("Configuration Manager"' "Modify configuration settings for your site"' "~/images/icon_configuration_16px.png"' "~/images/icon_configuration_32px.png"' true); " is 190.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion560,The length of the statement  "	ModuleControlInfo moduleControl = ModuleControlController.GetModuleControlsByModuleDefinitionID (languageModule.ModuleDefID) ["LanguageSettings"]; " is 146.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "	ProfileController.AddDefaultDefinition (Null.NullInteger' "Preferences"' "Photo"' "Image"' 0' properties.Count * 2 + 2' UserVisibilityMode.AllUsers' dataTypes); " is 160.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/LogViewer/LogViewer.ascx"' ""' SecurityAccessLevel.Admin' 0); " is 122.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddModuleControl (moduleDefId' "Edit"' "Edit Log Settings"' "DesktopModules/Admin/LogViewer/EditLogTypes.ascx"' ""' SecurityAccessLevel.Host' 0); " is 145.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddAdminPages ("Log Viewer"' "View a historical log of database events such as event schedules' exceptions' account logins' module and page changes' user account activities' security role activities' etc."' "icon_viewstats_16px.gif"' "icon_viewstats_32px.gif"' true' moduleDefId' "Log Viewer"' "icon_viewstats_16px.gif"); " is 321.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		moduleDefId = AddModuleDefinition ("Scheduler"' "Allows you to schedule tasks to be run at specified intervals."' "Scheduler"); " is 127.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/Scheduler/ViewSchedule.ascx"' ""' SecurityAccessLevel.Admin' 0); " is 125.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddModuleControl (moduleDefId' "Edit"' "Edit Schedule"' "DesktopModules/Admin/Scheduler/EditSchedule.ascx"' ""' SecurityAccessLevel.Host' 0); " is 141.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddModuleControl (moduleDefId' "History"' "Schedule History"' "DesktopModules/Admin/Scheduler/ViewScheduleHistory.ascx"' ""' SecurityAccessLevel.Host' 0); " is 154.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddModuleControl (moduleDefId' "Status"' "Schedule Status"' "DesktopModules/Admin/Scheduler/ViewScheduleStatus.ascx"' ""' SecurityAccessLevel.Host' 0); " is 151.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		newPage = AddHostPage ("Schedule"' "Add' modify and delete scheduled tasks to be run at specified intervals."' "icon_scheduler_16px.gif"' "icon_scheduler_32px.gif"' true); " is 171.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		moduleDefId = AddModuleDefinition ("SearchAdmin"' "The Search Admininstrator provides the ability to manage search settings."' "Search Admin"); " is 143.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/SearchAdmin/SearchAdmin.ascx"' ""' SecurityAccessLevel.Host' 0); " is 125.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		newPage = AddHostPage ("Search Admin"' "Manage search settings associated with DotNetNuke's search capability."' "icon_search_16px.gif"' "icon_search_32px.gif"' true); " is 167.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		moduleDefId = AddModuleDefinition ("SearchInput"' "The Search Input module provides the ability to submit a search to a given search results module."' "Search Input"' false' false); " is 181.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/SearchInput/SearchInput.ascx"' ""' SecurityAccessLevel.Anonymous' 0); " is 130.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddModuleControl (moduleDefId' "Settings"' "Search Input Settings"' "DesktopModules/Admin/SearchInput/Settings.ascx"' ""' SecurityAccessLevel.Edit' 0); " is 151.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		moduleDefId = AddModuleDefinition ("SearchResults"' "The Search Reasults module provides the ability to display search results."' "Search Results"' false' false); " is 162.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/SearchResults/SearchResults.ascx"' ""' SecurityAccessLevel.Anonymous' 0); " is 134.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddModuleControl (moduleDefId' "Settings"' "Search Results Settings"' "DesktopModules/Admin/SearchResults/Settings.ascx"' ""' SecurityAccessLevel.Edit' 0); " is 155.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		moduleDefId = AddModuleDefinition ("SiteWizard"' "The Administrator can use this user-friendly wizard to set up the common Extensions of the Portal/Site."' "Site Wizard"); " is 171.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/SiteWizard/Sitewizard.ascx"' ""' SecurityAccessLevel.Admin' 0); " is 124.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddAdminPages ("Site Wizard"' "Configure portal settings' page design and apply a site template using a step-by-step wizard."' "icon_wizard_16px.gif"' "icon_wizard_32px.gif"' true' moduleDefId' "Site Wizard"' "icon_wizard_16px.gif"); " is 233.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		DesktopModuleInfo objDesktopModuleInfo = DesktopModuleController.GetDesktopModuleByModuleName ("Security"' Null.NullInteger); " is 125.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		moduleDefId = ModuleDefinitionController.GetModuleDefinitionByFriendlyName ("User Accounts"' objDesktopModuleInfo.DesktopModuleID).ModuleDefID; " is 143.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		newPage = AddHostPage ("Superuser Accounts"' "Manage host user accounts."' "icon_users_16px.gif"' "icon_users_32px.gif"' true); " is 127.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "	AddModuleControl (moduleDefId' "EditGroup"' "Edit Role Groups"' "DesktopModules/Admin/Security/EditGroups.ascx"' "icon_securityroles_32px.gif"' SecurityAccessLevel.Edit' Null.NullInteger); " is 188.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "	AddModuleControl (moduleDefId' "UserSettings"' "Manage User Settings"' "DesktopModules/Admin/Security/UserSettings.ascx"' "~/images/settings.gif"' SecurityAccessLevel.Edit' Null.NullInteger); " is 191.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "	AddModuleControl (moduleDefId' "ManageProfile"' "Manage Profile Definition"' "DesktopModules/Admin/Security/ProfileDefinitions.ascx"' "icon_users_32px.gif"' SecurityAccessLevel.Edit' Null.NullInteger); " is 201.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "	AddModuleControl (moduleDefId' "EditProfileProperty"' "Edit Profile Property Definition"' "DesktopModules/Admin/Security/EditProfileDefinition.ascx"' "icon_users_32px.gif"' SecurityAccessLevel.Edit' Null.NullInteger); " is 217.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "	AddModuleControl (moduleDefId' "UserSettings"' "Manage User Settings"' "DesktopModules/Admin/Security/UserSettings.ascx"' "~/images/settings.gif"' SecurityAccessLevel.Edit' Null.NullInteger); " is 191.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "	AddModuleControl (Null.NullInteger' "Profile"' "Profile"' "DesktopModules/Admin/Security/ManageUsers.ascx"' "icon_users_32px.gif"' SecurityAccessLevel.Anonymous' Null.NullInteger); " is 180.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "	AddModuleControl (Null.NullInteger' "SendPassword"' "Send Password"' "DesktopModules/Admin/Security/SendPassword.ascx"' ""' SecurityAccessLevel.Anonymous' Null.NullInteger); " is 173.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "	AddModuleControl (Null.NullInteger' "ViewProfile"' "View Profile"' "DesktopModules/Admin/Security/ViewProfile.ascx"' "icon_users_32px.gif"' SecurityAccessLevel.Anonymous' Null.NullInteger); " is 189.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		moduleDefId = AddModuleDefinition ("Solutions"' "Browse additional solutions for your application."' "Solutions"' false' false); " is 128.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/Solutions/Solutions.ascx"' ""' SecurityAccessLevel.Admin' 0); " is 122.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The length of the statement  "		AddAdminPages ("Solutions"' "DotNetNuke Solutions Explorer page provides easy access to locate free and commercial DotNetNuke modules' skin and more."' "icon_solutions_16px.gif"' "icon_solutions_32px.gif"' true' moduleDefId' "Solutions Explorer"' "icon_solutions_32px.gif"); " is 274.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion600,The length of the statement  "	ProfilePropertyDefinition ppdHostTimeZone = ProfileController.GetPropertyDefinitionByName (Null.NullInteger' "TimeZone"); " is 121.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion600,The length of the statement  "		TimeZoneInfo timeZoneInfo = Localization.Localization.ConvertLegacyTimeZoneOffsetToTimeZoneInfo (portal.TimeZoneOffset); " is 120.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion600,The length of the statement  "	AddModuleControl (moduleDefId' "EnableContent"' "Enable Localized Content"' "DesktopModules/Admin/Languages/EnableLocalizedContent.ascx"' ""' SecurityAccessLevel.Host' 0' null' false); " is 184.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion610,The length of the statement  "	AddModuleControl (moduleDefId' "LocalizePages"' "Localize Pages"' "DesktopModules/Admin/Languages/LocalizePages.ascx"' "~/images/icon_language_32px.gif"' SecurityAccessLevel.Edit' 0' Null.NullString' true); " is 206.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion610,The length of the statement  "	AddModuleControl (moduleDefId' "Store"' "Store Details"' "DesktopModules/Admin/Extensions/Store.ascx"' "~/images/icon_extensions_32px.png"' SecurityAccessLevel.Host' 0); " is 169.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion610,The length of the statement  "		AddAdminPages ("Lists"' "Manage common lists"' "~/Icons/Sigma/Lists_16X16_Standard.png"' "~/Icons/Sigma/Lists_32X32_Standard.png"' true' mDef.ModuleDefID' "Lists"' "~/Icons/Sigma/Lists_16X16_Standard.png"' true); " is 212.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion610,The length of the statement  "	var portalPackage = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.Name == "DotNetNuke.Portals"); " is 123.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion610,The length of the statement  "	AddModuleControl (Null.NullInteger' "MobilePreview"' "Mobile Preview"' "DesktopModules/Admin/MobilePreview/Preview.ascx"' string.Empty' SecurityAccessLevel.Admin' Null.NullInteger); " is 181.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion612,The length of the statement  "	var portalPackage = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.Name == "DotNetNuke.Portals"); " is 123.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion612,The length of the statement  "		portalPackage.Description = "The Super User can manage the various parent and child sites within the install instance. This module allows you to add a new site' modify an existing site' and delete a site."; " is 206.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion612,The length of the statement  "		portalPackage.Description = "Administrators can manage the Pages within the site. This module allows you to create a new page' modify an existing page' delete pages' change the page order' and change the hierarchical page level."; " is 230.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion612,The length of the statement  "		portalPackage.Description = "Administrators can manage the Vendors and Banners associated to the site. This module allows you to add a new vendor' modify an existing vendor' and delete a vendor."; " is 196.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion612,The length of the statement  "		portalPackage.Description = "Administrators can view the details of visitors using their site. There are a variety of reports available to display information regarding site usage' membership' and volumes."; " is 207.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion612,The length of the statement  "	portalPackage = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.Name == "DotNetNuke.SiteWizard"); " is 122.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion612,The length of the statement  "		portalPackage.Description = "The Administrator can use this user-friendly wizard to set up the common features of the site."; " is 125.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion612,The length of the statement  "	portalPackage = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.Name == "DotNetNuke.Security"); " is 120.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion612,The length of the statement  "		portalPackage.Description = "Administrators can manage the security roles defined for their site. The module allows you to add new security roles' modify existing security roles' delete security roles' and manage the users assigned to security roles."; " is 252.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion612,The length of the statement  "	portalPackage = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.Name == "DotNetNuke.LogViewer"); " is 121.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion612,The length of the statement  "	portalPackage = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.Name == "DotNetNuke.Google Analytics"); " is 128.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion621,The length of the statement  "				if (settings.ContainsKey ("ProfileTemplate") && settings ["ProfileTemplate"].ToString ().Contains ("<div class=\"pBio\">")) { " is 125.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion621,The length of the statement  "                                    <span data-bind=""text: EmptyLocationText' visible: Street().length=0 && Location().length==0 && Country().length==0 && PostalCode().length==0""></span> " is 152.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion621,The length of the statement  "                                    <span data-bind=""text: EmptyGetInTouchText' visible: Telephone().length==0 && Email().length==0 && Website().length==0 && IM().length==0""></span> " is 147.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion621,The length of the statement  "                                    <li data-bind=""visible: Telephone().length > 0""><strong><span data-bind=""text: TelephoneText"">:</span></strong> <span data-bind=""text: Telephone()""></span></li> " is 166.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion621,The length of the statement  "                                    <li data-bind=""visible: Email().length > 0""><strong><span data-bind=""text: EmailText"">:</span></strong> <span data-bind=""text: Email()""></span></li> " is 154.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion621,The length of the statement  "                                    <li data-bind=""visible: Website().length > 0""><strong><span data-bind=""text: WebsiteText"">:</span></strong> <span data-bind=""text: Website()""></span></li> " is 160.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion621,The length of the statement  "                                    <li data-bind=""visible: IM().length > 0""><strong><span data-bind=""text: IMText"">:</span></strong> <span data-bind=""text: IM()""></span></li> " is 145.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion700,The length of the statement  "		AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/AdvancedSettings/AdvancedSettings.ascx"' ""' SecurityAccessLevel.Admin' 0); " is 136.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion700,The length of the statement  "		AddAdminPages ("Advanced Settings"' ""' "~/Icons/Sigma/AdvancedSettings_16X16_Standard.png"' "~/Icons/Sigma/AdvancedSettings_32X32_Standard.png"' true' moduleDefId' "Advanced Settings"' "~/Icons/Sigma/AdvancedSettings_16X16_Standard.png"); " is 239.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion710,The length of the statement  "			foreach (var alias in PortalAliasController.Instance.GetPortalAliasesByPortalId (portal.PortalID).Where (alias => alias.HTTPAlias == defaultAlias)) { " is 149.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion710,The length of the statement  "		AddAdminPages ("Search Admin"' "Manage search settings associated with DotNetNuke's search capability."' "~/Icons/Sigma/Search_16x16_Standard.png"' "~/Icons/Sigma/Search_32x32_Standard.png"' true' modDef.ModuleDefID' "Search Admin"' ""); " is 237.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion712,The length of the statement  "			foreach (var module in ModuleController.Instance.GetTabModules (tabId).Where (m => m.Value.ModuleDefinition.FriendlyName == "Console")) { " is 137.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion712,The length of the statement  "		foreach (var module in ModuleController.Instance.GetTabModules (hostTabId).Where (m => m.Value.ModuleDefinition.FriendlyName == "Console")) { " is 141.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion720,The length of the statement  "	desktopModule = DesktopModuleController.GetDesktopModuleByModuleName ("DotNetNuke.RadEditorProvider"' Null.NullInteger); " is 120.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion720,The length of the statement  "	AddModuleControl (moduleDefId' ""' ""' "DesktopModules/Admin/ModuleCreator/CreateModule.ascx"' "~/DesktopModules/Admin/ModuleCreator/icon.png"' SecurityAccessLevel.Host' 0); " is 173.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion720,The length of the statement  "		var package = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.PackageID == desktopModule.PackageID); " is 125.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion720,The length of the statement  "	int advancedFeaturesTabId = TabController.GetTabByTabPath (Null.NullInteger' "//Host//ProfessionalFeatures"' Null.NullString); " is 126.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion721,The length of the statement  "		//the username maybe html encode when register in 7.1.2' it will caught unicode charactors changed' need use InputFilter to correct the value. " is 142.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion721,The length of the statement  "		using (var reader = DataProvider.Instance ().ExecuteSQL ("SELECT UserID' Username FROM {databaseOwner}[{objectQualifier}Users] WHERE Username LIKE '%&%'")) { " is 157.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion721,The length of the statement  "					userName = portalSecurity.InputFilter (HttpUtility.HtmlDecode (userName)' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 194.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion722,The length of the statement  "	var pkg = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.Name == "DotNetNuke.AdvancedSettings"); " is 122.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion740,The length of the statement  "	string PageHeadTextForUpgrade = "<meta content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\" />" + "\n" + "<meta name=\"REVISIT-AFTER\" content=\"1 DAYS\" />" + "\n" + "<meta name=\"RATING\" content=\"GENERAL\" />" + "\n" + "<meta name=\"RESOURCE-TYPE\" content=\"DOCUMENT\" />" + "\n" + "<meta content=\"text/javascript\" http-equiv=\"Content-Script-Type\" />" + "\n" + "<meta content=\"text/css\" http-equiv=\"Content-Style-Type\" />" + "\n"; " is 455.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateFoldersForParentId,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "UpgradeFolders"); " is 148.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateFoldersForParentId,The length of the statement  "		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' string.Format ("Converting old Folders to new format. Total: {0} [Remaining: {1}]<br/>"' foldersToConvert' foldersRemaining)); " is 184.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateFoldersForParentId,The length of the statement  "		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' string.Format ("Conversion of old Folders Completed. Total Converted: {0}<br/>"' foldersToConvert)); " is 158.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UninstallPackage,The length of the statement  "	var searchInput = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.Name == packageName && p.PackageType == packageType); " is 144.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddMissingNotificationTypes,The length of the statement  "		NotificationsController.Instance.SetNotificationTypeActions (friendRequestTypeActions' friendRequestType.NotificationTypeId); " is 125.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddMissingNotificationTypes,The length of the statement  "		NotificationsController.Instance.SetNotificationTypeActions (followBackRequestTypeActions' followBackRequestType.NotificationTypeId); " is 133.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddCoreNotificationTypesFor620,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddCoreNotificationTypesFor620"); " is 164.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ConvertOldMessages,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "ConvertOldMessages"); " is 152.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ConvertOldMessages,The length of the statement  "		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' string.Format ("Converting old Messages to new format. Total: {0} [Remaining: {1}]<br/>"' messagesToConvert' messagesRemaining)); " is 187.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ConvertOldMessages,The length of the statement  "		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' string.Format ("Conversion of old Messages Completed. Total Converted: {0}<br/>"' messagesToConvert)); " is 160.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ReplaceMessagingModule,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "ReplaceMessagingModule"); " is 156.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,MovePhotoProperty,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "MovePhotoProperty"); " is 151.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateChildPortalsDefaultPage,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "UpdateChildPortalsDefaultPage"); " is 163.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,CopyGettingStartedStyles,The length of the statement  "		var gettingStartedTabId = PortalController.GetPortalSettingAsInteger ("GettingStartedTabId"' portal.PortalID' Null.NullInteger); " is 128.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,RemoveGettingStartedPages,The length of the statement  "			var gettingStartedTabId = PortalController.GetPortalSettingAsInteger ("GettingStartedTabId"' portal.PortalID' Null.NullInteger); " is 128.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddAdminPage,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddAdminPage:" + tabName); " is 157.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddAdminPage,The length of the statement  "		return AddPage (adminPage' tabName' description' tabIconFile' tabIconFileLarge' isVisible' tabPermissionCollection' true); " is 122.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddHostPage,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddHostPage:" + tabName); " is 156.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddHostPage,The length of the statement  "		return AddPage (hostPage' tabName' description' tabIconFile' tabIconFileLarge' isVisible' new TabPermissionCollection ()' true); " is 128.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleControl,The length of the statement  "	AddModuleControl (moduleDefId' controlKey' controlTitle' controlSrc' iconFile' controlType' viewOrder' Null.NullString); " is 120.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleToPage,The length of the statement  "	return AddModuleToPage (page' moduleDefId' moduleTitle' moduleIconFile' inheritPermissions' true' Globals.glbDefaultPane); " is 122.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleToPage,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddModuleToPage:" + moduleDefId); " is 164.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddModuleToPage,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + "AddModuleToPage:" + moduleDefId); " is 162.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddPortal,The length of the statement  "		DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddPortal:" + domain); " is 153.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddPortal,The length of the statement  "			portalId = PortalController.Instance.CreatePortal (portalName' userInfo' description' keyWords' template' homeDirectory' strPortalAlias' serverPath' serverPath + childPath' isChild); " is 182.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddPortal,The length of the statement  "									HtmlUtils.WriteFeedback (HttpContext.Current.Response' indent' "Creating Site Alias: " + portalAlias.InnerText + "<br>"); " is 121.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddPortal,The length of the statement  "			HtmlUtils.WriteFeedback (HttpContext.Current.Response' indent' "<font color='red'>Error!</font> " + ex.Message + ex.StackTrace + "<br>"); " is 137.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,CreateUserInfo,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "CreateUserInfo:" + userName); " is 160.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,CheckUpgrade,The length of the statement  "			warnings = BuildUserTable (dr' "Duplicate SuperUsers"' "We have detected that the following SuperUsers have duplicate entries as Portal Users. Although' no longer supported' these users may have been created in early Betas of DNN v3.0. You need to be aware that after the upgrade' these users will only be able to log in using the Super User Account's password."); " is 364.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,CheckUpgrade,The length of the statement  "				warnings += BuildUserTable (dr' "Duplicate Portal Users"' "We have detected that the following Users have duplicate entries (they exist in more than one portal). You need to be aware that after the upgrade' the password for some of these users may have been automatically changed (as the system now only uses one password per user' rather than one password per user per portal). It is important to remember that your Users can always retrieve their password using the Password Reminder feature' which will be sent to the Email addess shown in the table."); " is 556.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,CheckUpgrade,The length of the statement  "				warnings += "<br/><h3>More than 1000 Users</h3><p>This DotNetNuke Database has " + userCount + " users. As the users and their profiles are transferred to a new format' it is estimated that the script will take ~" + time.ToString ("F2") + " minutes to execute.</p>"; " is 266.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,DeleteFiles,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "DeleteFiles:" + stringVersion); " is 162.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ExecuteScripts,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "ExecuteScripts:" + strProviderPath); " is 167.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetSuperUser,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "GetSuperUser"); " is 146.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The length of the statement  "	Logger.TraceFormat ("GetUpgradedScripts databaseVersion:{0} applicationVersion:{1}"' databaseVersion' ApplicationVersion); " is 122.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The length of the statement  "				if (version > databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) { " is 124.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The length of the statement  "				if (version == databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) { " is 125.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InitialiseHostSettings,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "InitialiseHostSettings"); " is 156.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDatabase,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "InstallDatabase:" + Globals.FormatVersion (version)); " is 184.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDatabase,The length of the statement  "		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 0' "Installing Version: " + Globals.FormatVersion (version) + "<br>"); " is 125.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDatabase,The length of the statement  "		select scriptNode.InnerText + "." + defaultProvider).Aggregate (message' (current' script) => current + ExecuteScript (providerPath + script' writeFeedback)); " is 158.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "InstallDNN:" + strProviderPath); " is 163.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The length of the statement  "						HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>"); " is 138.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The length of the statement  "						HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>"); " is 120.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallFiles,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "InstallFiles"); " is 146.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallPackage,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "InstallPackage:" + file); " is 156.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallPackage,The length of the statement  "		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "Installing Package File " + Path.GetFileNameWithoutExtension (file) + ": "); " is 135.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallPackage,The length of the statement  "	var installer = new Installer.Installer (new FileStream (file' FileMode.Open' FileAccess.Read)' Globals.ApplicationMapPath' true' deleteTempFolder); " is 148.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallPackage,The length of the statement  "				var message = string.Format (Localization.Localization.GetString ("InstallPackageError"' Localization.Localization.ExceptionsResourceFile)' file' "Manifest file missing"); " is 171.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetInstallPackages,The length of the statement  "			if (package.Value.Dependencies.All (d => sortedPackages.Any (p => p.Value.Name == d.PackageName && p.Value.Version >= d.Version))) { " is 132.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ParsePackagesFromApplicationPath,The length of the statement  "					var oldPackages = packages.Where (kvp => kvp.Value.FriendlyName == package.FriendlyName && kvp.Value.Version < package.Version).ToList (); " is 138.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallPackages,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "InstallPackages:" + packageType); " is 164.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,IsNETFrameworkCurrent,The length of the statement  "		XPathNavigator configNavigator = configFile.CreateNavigator ().SelectSingleNode ("//configuration/system.web/httpRuntime|//configuration/location/system.web/httpRuntime"); " is 171.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,RemoveAdminPages,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "RemoveAdminPages:" + tabPath); " is 161.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,RemoveHostPage,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "RemoveHostPage:" + pageName); " is 160.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,TryUpgradeNETFramework,The length of the statement  "				EventLogController.Instance.AddLog ("UpgradeNet"' "Upgraded Site to .NET 3.5"' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.HOST_ALERT); " is 232.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,TryUpgradeNETFramework,The length of the statement  "				EventLogController.Instance.AddLog ("UpgradeNet"' string.Format ("Upgrade to .NET 3.5 failed. Error reported during attempt to update:{0}"' message)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.HOST_ALERT); " is 303.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,TryUpgradeNETFramework,The length of the statement  "			EventLogController.Instance.AddLog ("UpgradeNet"' string.IsNullOrEmpty (strMessage) ? "Upgraded Site to .NET 4.0" : string.Format ("Upgrade to .NET 4.0 failed. Error reported during attempt to update:{0}"' strMessage)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.HOST_ALERT); " is 372.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The length of the statement  "	foreach (string file in Directory.GetFiles (Globals.InstallMapPath + "Cleanup\\"' "??.??.??.txt").Concat (Directory.GetFiles (Globals.InstallMapPath + "Cleanup\\"' "??.??.??.??.txt"))) { " is 186.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The length of the statement  "	foreach (string file in Directory.GetFiles (Globals.InstallMapPath + "Config\\"' "??.??.??.config").Concat (Directory.GetFiles (Globals.InstallMapPath + "Config\\"' "??.??.??.??.config"))) { " is 190.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + Localization.Localization.GetString ("ApplicationUpgrades"' Localization.Localization.GlobalResourceFile) + ": " + version.ToString (3)); " is 267.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The length of the statement  "		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' Localization.Localization.GetString ("ApplicationUpgrades"' Localization.Localization.GlobalResourceFile) + " : " + GetStringVersionWithRevision (version)); " is 214.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The length of the statement  "			DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + Localization.Localization.GetString ("ApplicationUpgrades"' Localization.Localization.GlobalResourceFile) + ": " + version.ToString (3)); " is 265.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The length of the statement  "			using (StreamWriter streamWriter = File.CreateText (providerPath + Globals.FormatVersion (version) + "_Application.log.resources")) { " is 133.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "UpdateConfig:" + stringVersion); " is 163.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The length of the statement  "	string strExceptions = UpdateConfig (providerPath' Globals.InstallMapPath + "Config\\" + stringVersion + ".config"' version' "Core Upgrade"); " is 141.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The length of the statement  "		DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + "UpdateConfig:" + stringVersion); " is 161.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "UpdateConfig:" + version.ToString (3)); " is 170.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The length of the statement  "		DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + "UpdateConfig:" + version.ToString (3)); " is 168.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "UpdateConfig:" + version.ToString (3)); " is 170.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The length of the statement  "		DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + "UpdateConfig:" + version.ToString (3)); " is 168.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeDNN,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "UpgradeDNN:" + Globals.FormatVersion (ApplicationVersion)); " is 190.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeDNN,The length of the statement  "	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 0' "Upgrading to Version: " + Globals.FormatVersion (ApplicationVersion) + "<br/>"); " is 139.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeDNN,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("GeneralUpgrades"' Localization.Localization.GlobalResourceFile)); " is 136.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The length of the statement  "	return UpgradeIndicator (version' DotNetNukeContext.Current.Application.Type' DotNetNukeContext.Current.Application.Name' ""' isLocal' isSecureConnection); " is 155.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeRedirect,The length of the statement  "	return UpgradeRedirect (ApplicationVersion' DotNetNukeContext.Current.Application.Type' DotNetNukeContext.Current.Application.Name' ""); " is 136.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeVersion,The length of the statement  "	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "UpgradeVersion:" + scriptFile); " is 162.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeVersion,The length of the statement  "		log.AddProperty ("Upgraded DotNetNuke"' "Version: " + Globals.FormatVersion (version) + "' Iteration:" + version.Revision); " is 123.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeVersion,The length of the statement  "		DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "UpgradeVersion:" + scriptFile); " is 162.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ActivateLicense,The length of the statement  "	var isLicensable = (File.Exists (HttpContext.Current.Server.MapPath ("~\\bin\\DotNetNuke.Professional.dll")) || File.Exists (HttpContext.Current.Server.MapPath ("~\\bin\\DotNetNuke.Enterprise.dll"))); " is 200.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ActivateLicense,The length of the statement  "		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' Localization.Localization.GetString ("ActivatingLicense"' Localization.Localization.GlobalResourceFile)); " is 163.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ActivateLicense,The length of the statement  "			dynamic licenseActivation = Reflection.CreateObject (Reflection.CreateType ("DotNetNuke.Professional.LicenseActivation.ViewLicx")); " is 131.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ActivateLicense,The length of the statement  "			licenseActivation.AutoActivation (licenseConfig.AccountEmail' licenseConfig.InvoiceNumber' licenseConfig.WebServer' licenseConfig.LicenseType' sku); " is 148.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ActivateLicense,The length of the statement  "			EventLogController.Instance.AddLog ("License Activation"' "License Activated during install for: " + licenseConfig.AccountEmail + " | invoice: " + licenseConfig.InvoiceNumber' EventLogController.EventLogType.HOST_ALERT); " is 220.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,FindLanguageXmlDocument,The length of the statement  "		var languageFilePath = Path.Combine (Globals.HostMapPath' string.Format ("Default Website.template.{0}.resx"' cultureCode)); " is 124.
Long Statement,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,FindLanguageXmlDocument,The length of the statement  "			languageFilePath = Path.Combine (Globals.HostMapPath' string.Format ("Default Website.template.{0}.resx"' Localization.Localization.SystemLocale)); " is 147.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,SetInstallConfig,The length of the statement  "			versionNode = AppendNewXmlNode (ref installTemplate' ref dotnetnukeNode' "installCulture"' installConfig.InstallCulture); " is 121.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,SetInstallConfig,The length of the statement  "		XmlNode folderMappingsNode = installTemplate.SelectSingleNode ("//dotnetnuke/" + FolderMappingsConfigController.Instance.ConfigNode); " is 133.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,SetInstallConfig,The length of the statement  "			folderMappingsNode = AppendNewXmlNode (ref installTemplate' ref dotnetnukeNode' FolderMappingsConfigController.Instance.ConfigNode' installConfig.FolderMappingsSettings); " is 170.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,SetInstallConfig,The length of the statement  "		AppendNewXmlNode (ref installTemplate' ref connectionNode' "integrated"' installConfig.Connection.Integrated.ToString ().ToLower ()); " is 133.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,SetInstallConfig,The length of the statement  "		AppendNewXmlNode (ref installTemplate' ref connectionNode' "runasdbowner"' installConfig.Connection.RunAsDbowner.ToString ().ToLower ()); " is 137.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,SetInstallConfig,The length of the statement  "		AppendNewXmlNode (ref installTemplate' ref connectionNode' "upgradeconnectionstring"' installConfig.Connection.UpgradeConnectionString); " is 136.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,GetInstallConfig,The length of the statement  "		installConfig.InstallCulture = XmlUtils.GetNodeValue (rootNode.CreateNavigator ()' "installCulture") ?? Localization.Localization.SystemLocale; " is 143.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,GetInstallConfig,The length of the statement  "		connectionConfig.Integrated = XmlUtils.GetNodeValue (connectionNode.CreateNavigator ()' "integrated").ToLower () == "true"; " is 123.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,GetInstallConfig,The length of the statement  "		connectionConfig.RunAsDbowner = XmlUtils.GetNodeValue (connectionNode.CreateNavigator ()' "runasdbowner").ToLower () == "true"; " is 127.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,GetInstallConfig,The length of the statement  "		connectionConfig.UpgradeConnectionString = XmlUtils.GetNodeValue (connectionNode.CreateNavigator ()' "upgradeconnectionstring"); " is 128.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,GetInstallConfig,The length of the statement  "		superUserConfig.UpdatePassword = XmlUtils.GetNodeValue (superUserNode.CreateNavigator ()' "updatepassword").ToLower () == "true"; " is 129.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,GetInstallConfig,The length of the statement  "	var folderMappingsNode = installTemplate.SelectSingleNode ("//dotnetnuke/" + FolderMappingsConfigController.Instance.ConfigNode); " is 129.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsAbleToPerformDatabaseActions,The length of the statement  "	var databaseActions = string.Format (@"CREATE TABLE {0}([fakeColumn] [int] NULL); SELECT * FROM {0}; DROP TABLE {0};"' fakeName); " is 129.
Long Statement,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,GetLanguagePack,The length of the statement  "	WebResponse wr = Util.GetExternalRequest (downloadUrl' null' null' null' null' null' -1' null' null' false' "DotNetNuke-Appgallery/1.0.0.0(Microsoft Windows NT 6.1.7600.0"' "wpi://2.1.0.0/Microsoft Windows NT 6.1.7600.0"' out myfile' 10000); " is 241.
Long Statement,DotNetNuke.Services.Cache,FBCachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\FBCachingProvider.cs,CreateCacheFile,The length of the statement  "		//permissions issue creating cache file or more than one thread may have been trying to write the cache file simultaneously " is 123.
Long Statement,DotNetNuke.Services.Cache,FBCachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\FBCachingProvider.cs,DeleteCacheFile,The length of the statement  "		//an error occurred when trying to delete the cache file - this is serious as it means that the cache will not be synchronized " is 126.
Long Statement,DotNetNuke.Services.Cache,FBCachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\FBCachingProvider.cs,PurgeCacheFiles,The length of the statement  "	return string.Format ("Cache Synchronization Files Processed: " + f.Length + "' Purged: " + PurgedFiles + "' Errors: " + PurgeErrors); " is 134.
Long Statement,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,ClearFolderCacheInternal,The length of the statement  "	PermissionProvider.ResetCacheDependency (portalId' () => RemoveFormattedCacheKey (DataCache.FolderPermissionCacheKey' clearRuntime' portalId)); " is 143.
Long Statement,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The length of the statement  "	Insert (cacheKey' itemToCache' null as DNNCacheDependency' System.Web.Caching.Cache.NoAbsoluteExpiration' System.Web.Caching.Cache.NoSlidingExpiration' CacheItemPriority.Default' null); " is 185.
Long Statement,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The length of the statement  "	Insert (cacheKey' itemToCache' dependency' System.Web.Caching.Cache.NoAbsoluteExpiration' System.Web.Caching.Cache.NoSlidingExpiration' CacheItemPriority.Default' null); " is 169.
Long Statement,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The length of the statement  "	Cache.Insert (cacheKey' itemToCache' dependency == null ? null : dependency.SystemCacheDependency' absoluteExpiration' slidingExpiration' priority' onRemoveCallback); " is 166.
Long Statement,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,PurgeCache,The length of the statement  "	return Localization.Localization.GetString ("PurgeCacheUnsupported.Text"' Localization.Localization.GlobalResourceFile); " is 120.
Long Statement,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Add,The length of the statement  "		Insert (CacheKey' objObject' new DNNCacheDependency (objDependency)' AbsoluteExpiration' SlidingExpiration' Priority' OnRemoveCallback); " is 136.
Long Statement,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The length of the statement  "	Insert (cacheKey' itemToCache' new DNNCacheDependency (objDependency)' System.Web.Caching.Cache.NoAbsoluteExpiration' System.Web.Caching.Cache.NoSlidingExpiration' CacheItemPriority.Default' null); " is 197.
Long Statement,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The length of the statement  "	Insert (cacheKey' itemToCache' new DNNCacheDependency (objDependency)' absoluteExpiration' slidingExpiration' CacheItemPriority.Default' null); " is 143.
Long Statement,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The length of the statement  "	Insert (Key' itemToCache' new DNNCacheDependency (objDependency)' absoluteExpiration' slidingExpiration' priority' onRemoveCallback); " is 133.
Long Statement,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The length of the statement  "	Insert (cacheKey' itemToCache' new DNNCacheDependency (objDependency)' System.Web.Caching.Cache.NoAbsoluteExpiration' System.Web.Caching.Cache.NoSlidingExpiration' CacheItemPriority.Default' null); " is 197.
Long Statement,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The length of the statement  "	Insert (cacheKey' itemToCache' new DNNCacheDependency (objDependency)' absoluteExpiration' slidingExpiration' CacheItemPriority.Default' null); " is 143.
Long Statement,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,Insert,The length of the statement  "	Insert (cacheKey' itemToCache' new DNNCacheDependency (objDependency)' absoluteExpiration' slidingExpiration' priority' onRemoveCallback); " is 138.
Long Statement,DotNetNuke.Services.Journal,Content,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Content.cs,UpdateContentItem,The length of the statement  "	if ((objContent.ContentTypeId == GetContentTypeID ("DNNCorp_JournalProfile") && objJournalItem.ProfileId > 0) || (objContent.ContentTypeId == GetContentTypeID ("DNNCorp_JournalGroup") && objJournalItem.SocialGroupId > 0)) { " is 223.
Long Statement,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_ListForProfile,The length of the statement  "	return _provider.ExecuteReader ("Journal_ListForProfile"' portalId' moduleId' currentUserId' profileId' rowIndex' maxRows); " is 123.
Long Statement,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Get,The length of the statement  "	return _provider.ExecuteReader ("Journal_Get"' portalId' currentUserId' journalId' includeAllItems' isDeleted' securityCheck); " is 126.
Long Statement,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Save,The length of the statement  "	journalId = _provider.ExecuteScalar<int> ("Journal_Save"' portalId' journalId' journalTypeId' currentUserId' profileId' groupId' title' summary' itemData' xml' objectKey' accessKey' securitySet' false' false); " is 209.
Long Statement,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Save,The length of the statement  "	journalId = _provider.ExecuteScalar<int> ("Journal_Save"' portalId' journalId' journalTypeId' currentUserId' profileId' groupId' title' summary' itemData' xml' objectKey' accessKey' securitySet' commentsDisabled' commentsHidden); " is 229.
Long Statement,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Update,The length of the statement  "	journalId = _provider.ExecuteScalar<int> ("Journal_Update"' portalId' journalId' journalTypeId' currentUserId' profileId' groupId' title' summary' itemData' xml' objectKey' accessKey' securitySet' false' false); " is 211.
Long Statement,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Update,The length of the statement  "	journalId = _provider.ExecuteScalar<int> ("Journal_Update"' portalId' journalId' journalTypeId' currentUserId' profileId' groupId' title' summary' itemData' xml' objectKey' accessKey' securitySet' commentsDisabled' commentsHidden); " is 231.
Long Statement,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Comment_Save,The length of the statement  "	commentId = _provider.ExecuteScalar<int> ("Journal_Comment_Save"' journalId' commentId' userId' comment' xml' DataProvider.Instance ().GetNull (dateUpdated)); " is 158.
Long Statement,DotNetNuke.Services.Journal,JournalDataServiceImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Data\JournalDataServiceImpl.cs,Journal_Types_Save,The length of the statement  "	journalTypeId = _provider.ExecuteScalar<int> ("Journal_Types_Save"' journalTypeId' journalType' icon' portalId' isEnabled' appliesToProfile' appliesToGroup' appliesToStream' options' supportsNotify); " is 199.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,GetMinorSize,The length of the statement  "	double calculated = (Convert.ToDouble (imageMinorSize) * Convert.ToDouble (thumbnailMajorSize)) / Convert.ToDouble (imageMajorSize); " is 132.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,IsImageFile,The length of the statement  "	return (Globals.glbImageFileTypes + "'").IndexOf (Path.GetExtension (fileName).ToLower ().Replace ("."' "") + "'") > -1; " is 120.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,IsResizePhotosEnabled,The length of the statement  "	return GetBooleanSetting (AllowResizePhotosSetting' false' module) && GetBooleanSetting (AllowPhotosSetting' true' module) && GetBooleanSetting (EditorEnabledSetting' true' module); " is 181.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,PrepareSecuritySet,The length of the statement  "		var role = RoleController.Instance.GetRole (journalItem.PortalId' r => r.SecurityMode != SecurityMode.SecurityRole && r.RoleID == item.SocialGroupId); " is 150.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,PrepareSecuritySet,The length of the statement  "	var parts = journalItem.SecuritySet.Replace (" "' "").Split ("'".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries).Distinct ().Except (InvalidSecuritySetsWithoutId).Where (p => p.IndexOfAny (ValidSecurityDescriptors) >= 0); " is 228.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,SaveJournalItem,The length of the statement  "			journalItem.ItemData.Title = portalSecurity.InputFilter (journalItem.ItemData.Title' PortalSecurity.FilterFlag.NoMarkup); " is 121.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,SaveJournalItem,The length of the statement  "			journalItem.ItemData.Description = portalSecurity.InputFilter (journalItem.ItemData.Description' PortalSecurity.FilterFlag.NoScripting); " is 136.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,SaveJournalItem,The length of the statement  "			journalItem.ItemData.Url = portalSecurity.InputFilter (journalItem.ItemData.Url' PortalSecurity.FilterFlag.NoScripting); " is 120.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,SaveJournalItem,The length of the statement  "			journalItem.ItemData.ImageUrl = portalSecurity.InputFilter (journalItem.ItemData.ImageUrl' PortalSecurity.FilterFlag.NoScripting); " is 130.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,SaveJournalItem,The length of the statement  "	journalItem.JournalId = _dataService.Journal_Save (journalItem.PortalId' journalItem.UserId' journalItem.ProfileId' journalItem.SocialGroupId' journalItem.JournalId' journalItem.JournalTypeId' journalItem.Title' journalItem.Summary' journalItem.Body' journalData' xml' journalItem.ObjectKey' journalItem.AccessKey' journalItem.SecuritySet' journalItem.CommentsDisabled' journalItem.CommentsHidden); " is 398.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,UpdateJournalItem,The length of the statement  "			journalItem.ItemData.Title = portalSecurity.InputFilter (journalItem.ItemData.Title' PortalSecurity.FilterFlag.NoMarkup); " is 121.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,UpdateJournalItem,The length of the statement  "			journalItem.ItemData.Description = portalSecurity.InputFilter (journalItem.ItemData.Description' PortalSecurity.FilterFlag.NoScripting); " is 136.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,UpdateJournalItem,The length of the statement  "			journalItem.ItemData.Url = portalSecurity.InputFilter (journalItem.ItemData.Url' PortalSecurity.FilterFlag.NoScripting); " is 120.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,UpdateJournalItem,The length of the statement  "			journalItem.ItemData.ImageUrl = portalSecurity.InputFilter (journalItem.ItemData.ImageUrl' PortalSecurity.FilterFlag.NoScripting); " is 130.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,UpdateJournalItem,The length of the statement  "	journalItem.JournalId = _dataService.Journal_Update (journalItem.PortalId' journalItem.UserId' journalItem.ProfileId' journalItem.SocialGroupId' journalItem.JournalId' journalItem.JournalTypeId' journalItem.Title' journalItem.Summary' journalItem.Body' journalData' xml' journalItem.ObjectKey' journalItem.AccessKey' journalItem.SecuritySet' journalItem.CommentsDisabled' journalItem.CommentsHidden); " is 400.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,GetJournalItem,The length of the statement  "	return CBO.FillObject<JournalItem> (_dataService.Journal_Get (portalId' currentUserId' journalId' includeAllItems' isDeleted' securityCheck)); " is 142.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,SaveComment,The length of the statement  "	//objCommentInfo.Comment = portalSecurity.Remove(objCommentInfo.Comment' DotNetNuke.Security.PortalSecurity.ConfigType.ListController' "ProfanityFilter"' DotNetNuke.Security.PortalSecurity.FilterScope.PortalList); " is 213.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,SaveComment,The length of the statement  "	comment.CommentId = _dataService.Journal_Comment_Save (comment.JournalId' comment.CommentId' comment.UserId' comment.Comment' xml' Null.NullDate); " is 146.
Long Statement,DotNetNuke.Services.Journal,JournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalControllerImpl.cs,GetJournalTypes,The length of the statement  "	return CBO.GetCachedObject<IEnumerable<JournalTypeInfo>> (new CacheItemArgs (String.Format (DataCache.JournalTypesCacheKey' portalId)' DataCache.JournalTypesTimeOut' DataCache.JournalTypesCachePriority' portalId)' c => CBO.FillCollection<JournalTypeInfo> (_dataService.Journal_Types_List (portalId))); " is 301.
Long Statement,DotNetNuke.Services.Journal.Internal,InternalJournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Internal\InternalJournalControllerImpl.cs,GetJournalItemsByProfile,The length of the statement  "	return CBO.FillCollection<JournalItem> (_dataService.Journal_ListForProfile (portalId' moduleId' currentUserId' profileId' rowIndex' maxRows)); " is 143.
Long Statement,DotNetNuke.Services.Journal.Internal,InternalJournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Internal\InternalJournalControllerImpl.cs,GetJournalItemsByGroup,The length of the statement  "	return CBO.FillCollection<JournalItem> (_dataService.Journal_ListForGroup (portalId' moduleId' currentUserId' groupId' rowIndex' maxRows)); " is 139.
Long Statement,DotNetNuke.Services.Journal.Internal,InternalJournalControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Internal\InternalJournalControllerImpl.cs,GetJournalItems,The length of the statement  "	return CBO.FillCollection<JournalItem> (_dataService.Journal_ListForSummary (portalId' moduleId' currentUserId' rowIndex' maxRows)); " is 132.
Long Statement,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeCache,The length of the statement  "		throw new IOException (String.Format ("Deleted {0} files' however' some files are locked.  Could not delete the following files: {1}"' i' filesNotDeleted)); " is 156.
Long Statement,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeExpiredItems,The length of the statement  "		throw new IOException (String.Format ("Deleted {0} files' however' some files are locked.  Could not delete the following files: {1}"' i' filesNotDeleted)); " is 156.
Long Statement,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,Remove,The length of the statement  "		throw new IOException ("Deleted " + i + " files' however' some files are locked.  Could not delete the following files: " + filesNotDeleted); " is 141.
Long Statement,DotNetNuke.Services.ModuleCache,MemoryProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\MemoryProvider.cs,SetModule,The length of the statement  "	DataCache.SetCache (cacheKey' moduleOutput' dep' DateTime.UtcNow.Add (duration)' System.Web.Caching.Cache.NoSlidingExpiration' CacheItemPriority.Default' null); " is 160.
Long Statement,DotNetNuke.Services.Scheduling,DNNScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\DNNScheduler.cs,AddSchedule,The length of the statement  "	scheduleItem.ScheduleID = SchedulingController.AddSchedule (scheduleItem.TypeFullName' scheduleItem.TimeLapse' scheduleItem.TimeLapseMeasurement' scheduleItem.RetryTimeLapse' scheduleItem.RetryTimeLapseMeasurement' scheduleItem.RetainHistoryNum' scheduleItem.AttachToEvent' scheduleItem.CatchUpEnabled' scheduleItem.Enabled' scheduleItem.ObjectDependencies' scheduleItem.Servers' scheduleItem.FriendlyName' scheduleItem.ScheduleStartDate); " is 439.
Long Statement,DotNetNuke.Services.Scheduling,DNNScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\DNNScheduler.cs,RunScheduleItemNow,The length of the statement  "		NextStart = runNow ? DateTime.Now : (scheduleItem.ScheduleStartDate != Null.NullDate ? scheduleItem.ScheduleStartDate : DateTime.Now) " is 133.
Long Statement,DotNetNuke.Services.Scheduling,DNNScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\DNNScheduler.cs,RunScheduleItemNow,The length of the statement  "	if (scheduleHistoryItem.TimeLapse != Null.NullInteger && scheduleHistoryItem.TimeLapseMeasurement != Null.NullString && scheduleHistoryItem.Enabled && SchedulingController.CanRunOnThisServer (scheduleItem.Servers)) { " is 216.
Long Statement,DotNetNuke.Services.Scheduling,DNNScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\DNNScheduler.cs,UpdateSchedule,The length of the statement  "	var futureHistory = GetScheduleHistory (scheduleItem.ScheduleID).Cast<ScheduleHistoryItem> ().Where (h => h.NextStart > DateTime.Now); " is 134.
Long Statement,DotNetNuke.Services.Scheduling,DNNScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\DNNScheduler.cs,UpdateSchedule,The length of the statement  "	var scheduleItemStart = scheduleItem.ScheduleStartDate > DateTime.Now ? scheduleItem.ScheduleStartDate : scheduleItem.NextStart; " is 128.
Long Statement,DotNetNuke.Services.Scheduling,DNNScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\DNNScheduler.cs,RemoveFromScheduleInProgress,The length of the statement  "	var runningscheduleHistoryItem = GetScheduleHistory (scheduleItem.ScheduleID).Cast<ScheduleHistoryItem> ().ElementAtOrDefault (0); " is 130.
Long Statement,DotNetNuke.Services.Scheduling,ProcessGroup,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\ProcessGroup.cs,Run,The length of the statement  "			//we need also trigger work errored event so that the schedule can remove from inprogress and inqueue list to prevent endless loop. " is 131.
Long Statement,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,AddSchedule,The length of the statement  "	return AddSchedule (TypeFullName' TimeLapse' TimeLapseMeasurement' RetryTimeLapse' RetryTimeLapseMeasurement' RetainHistoryNum' AttachToEvent' CatchUpEnabled' Enabled' ObjectDependencies' Servers' TypeFullName' DateTime.Now); " is 225.
Long Statement,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,AddSchedule,The length of the statement  "	return AddSchedule (TypeFullName' TimeLapse' TimeLapseMeasurement' RetryTimeLapse' RetryTimeLapseMeasurement' RetainHistoryNum' AttachToEvent' CatchUpEnabled' Enabled' ObjectDependencies' Servers' FriendlyName' DateTime.Now); " is 225.
Long Statement,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,AddSchedule,The length of the statement  "	EventLogController.Instance.AddLog ("TypeFullName"' TypeFullName' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.SCHEDULE_CREATED); " is 225.
Long Statement,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,AddSchedule,The length of the statement  "	return DataProvider.Instance ().AddSchedule (TypeFullName' TimeLapse' TimeLapseMeasurement' RetryTimeLapse' RetryTimeLapseMeasurement' RetainHistoryNum' AttachToEvent' CatchUpEnabled' Enabled' ObjectDependencies' Servers' UserController.Instance.GetCurrentUserInfo ().UserID' FriendlyName' ScheduleStartDate); " is 309.
Long Statement,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,AddScheduleHistory,The length of the statement  "	return DataProvider.Instance ().AddScheduleHistory (objScheduleHistoryItem.ScheduleID' objScheduleHistoryItem.StartDate' ServerController.GetExecutingServerName ()); " is 165.
Long Statement,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,DeleteSchedule,The length of the statement  "	EventLogController.Instance.AddLog ("ScheduleID"' ScheduleID.ToString ()' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.SCHEDULE_DELETED); " is 233.
Long Statement,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,UpdateSchedule,The length of the statement  "	UpdateSchedule (scheduleItem.ScheduleID' scheduleItem.TypeFullName' scheduleItem.TimeLapse' scheduleItem.TimeLapseMeasurement' scheduleItem.RetryTimeLapse' scheduleItem.RetryTimeLapseMeasurement' scheduleItem.RetainHistoryNum' scheduleItem.AttachToEvent' scheduleItem.CatchUpEnabled' scheduleItem.Enabled' scheduleItem.ObjectDependencies' scheduleItem.Servers' scheduleItem.FriendlyName' scheduleItem.ScheduleStartDate); " is 420.
Long Statement,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,UpdateSchedule,The length of the statement  "	UpdateSchedule (ScheduleID' TypeFullName' TimeLapse' TimeLapseMeasurement' RetryTimeLapse' RetryTimeLapseMeasurement' RetainHistoryNum' AttachToEvent' CatchUpEnabled' Enabled' ObjectDependencies' Servers' FriendlyName' DateTime.Now); " is 233.
Long Statement,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,UpdateSchedule,The length of the statement  "	DataProvider.Instance ().UpdateSchedule (ScheduleID' TypeFullName' TimeLapse' TimeLapseMeasurement' RetryTimeLapse' RetryTimeLapseMeasurement' RetainHistoryNum' AttachToEvent' CatchUpEnabled' Enabled' ObjectDependencies' Servers' UserController.Instance.GetCurrentUserInfo ().UserID' FriendlyName' ScheduleStartDate); " is 317.
Long Statement,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,UpdateSchedule,The length of the statement  "	EventLogController.Instance.AddLog ("TypeFullName"' TypeFullName' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.SCHEDULE_UPDATED); " is 225.
Long Statement,DotNetNuke.Services.Scheduling,SchedulingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingController.cs,UpdateScheduleHistory,The length of the statement  "	DataProvider.Instance ().UpdateScheduleHistory (objScheduleHistoryItem.ScheduleHistoryID' objScheduleHistoryItem.EndDate' objScheduleHistoryItem.Succeeded' objScheduleHistoryItem.LogNotes' objScheduleHistoryItem.NextStart); " is 223.
Long Statement,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetUrls,The length of the statement  "	minPagePriority = float.Parse (PortalController.GetPortalSetting ("SitemapMinPriority"' portalId' "0.1")' CultureInfo.InvariantCulture); " is 136.
Long Statement,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetUrls,The length of the statement  "	var tabs = TabController.Instance.GetTabsByPortal (portalId).Values.Where (t => !t.IsSystem && !ps.ContentLocalizationEnabled || (languagePublished && t.CultureCode.Equals (currentLanguage' StringComparison.InvariantCultureIgnoreCase))); " is 237.
Long Statement,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetUrls,The length of the statement  "			if (!tab.IsDeleted && !tab.DisableLink && tab.TabType == TabType.Normal && (Null.IsNull (tab.StartDate) || tab.StartDate < DateTime.Now) && (Null.IsNull (tab.EndDate) || tab.EndDate > DateTime.Now) && IsTabPublic (tab.TabPermissions)) { " is 236.
Long Statement,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetUrls,The length of the statement  "			Services.Exceptions.Exceptions.LogException (new Exception (Localization.Localization.GetExceptionMessage ("SitemapUrlGenerationError"' "URL sitemap generation for page '{0} - {1}' caused an exception: {2}"' tab.TabID' tab.TabName' ex.Message))); " is 246.
Long Statement,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetPageUrl,The length of the statement  "			if ((!localized.IsDeleted && !localized.DisableLink && localized.TabType == TabType.Normal) && (Null.IsNull (localized.StartDate) || localized.StartDate < DateTime.Now) && (Null.IsNull (localized.EndDate) || localized.EndDate > DateTime.Now) && (IsTabPublic (localized.TabPermissions)) && (includeHiddenPages || localized.IsVisible) && localized.HasBeenPublished) { " is 365.
Long Statement,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetPageUrl,The length of the statement  "				string alternateUrl = TestableGlobals.Instance.NavigateURL (localized.TabID' localized.IsSuperTab' ps' ""' localized.CultureCode); " is 130.
Long Statement,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetPageUrl,The length of the statement  "			string alternateUrl = TestableGlobals.Instance.NavigateURL (currentTab.TabID' currentTab.IsSuperTab' ps' ""' currentTab.CultureCode); " is 133.
Long Statement,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,IsTabPublic,The length of the statement  "		// permissions strings are encoded with Deny permissions at the beginning and Grant permissions at the end for optimal performance " is 130.
Long Statement,DotNetNuke.Services.Sitemap,SitemapBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\SitemapBuilder.cs,BuildSiteMap,The length of the statement  "	excludePriority = float.Parse (PortalController.GetPortalSetting ("SitemapExcludePriority"' PortalSettings.PortalId' "0")' NumberFormatInfo.InvariantInfo); " is 155.
Long Statement,DotNetNuke.Services.Sitemap,SitemapBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\SitemapBuilder.cs,BuildSiteMap,The length of the statement  "		isProviderEnabled = bool.Parse (PortalController.GetPortalSetting (_provider.Name + "Enabled"' PortalSettings.PortalId' "True")); " is 129.
Long Statement,DotNetNuke.Services.Sitemap,SitemapBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\SitemapBuilder.cs,BuildSiteMap,The length of the statement  "			isProviderPriorityOverrided = bool.Parse (PortalController.GetPortalSetting (_provider.Name + "Override"' PortalSettings.PortalId' "False")); " is 141.
Long Statement,DotNetNuke.Services.Sitemap,SitemapBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\SitemapBuilder.cs,BuildSiteMap,The length of the statement  "			providerPriorityValue = float.Parse (PortalController.GetPortalSetting (_provider.Name + "Value"' PortalSettings.PortalId' "50")) / 100; " is 136.
Long Statement,DotNetNuke.Services.Sitemap,SitemapBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\SitemapBuilder.cs,BuildSiteMap,The length of the statement  "				Services.Exceptions.Exceptions.LogException (new Exception (Localization.Localization.GetExceptionMessage ("SitemapProviderError"' "URL sitemap provider '{0}' failed with error: {1}"' _provider.Name' ex.Message))); " is 214.
Long Statement,DotNetNuke.Services.Sitemap,SitemapBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\SitemapBuilder.cs,BuildSiteMap,The length of the statement  "				if (url.Priority > 0 && url.Priority >= excludePriority)//#RS# a valid sitemap needs priorities larger then 0' otherwise the sitemap will be rejected by google as invalid " is 170.
Long Statement,DotNetNuke.Services.Sitemap,SitemapBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\SitemapBuilder.cs,WriteSitemap,The length of the statement  "			sitemapOutput = new StreamWriter (PortalSettings.HomeSystemDirectoryMapPath + "Sitemap\\" + cachedFile' false' Encoding.UTF8); " is 126.
Long Statement,DotNetNuke.Services.Sitemap,SitemapBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\SitemapBuilder.cs,WriteSitemapIndex,The length of the statement  "	using (sitemapOutput = new StreamWriter (PortalSettings.HomeSystemDirectoryMapPath + "Sitemap\\" + CacheFileName' false' Encoding.UTF8)) { " is 138.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,ReplyMessage,The length of the statement  "		throw new ArgumentException (Localization.Localization.GetString ("MsgSenderRequiredError"' Localization.Localization.ExceptionsResourceFile)); " is 143.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,ReplyMessage,The length of the statement  "		throw new ArgumentException (Localization.Localization.GetString ("MsgBodyRequiredError"' Localization.Localization.ExceptionsResourceFile)); " is 141.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,ReplyMessage,The length of the statement  "		throw new AttachmentsNotAllowed (Localization.Localization.GetString ("MsgAttachmentsNotAllowed"' Localization.Localization.ExceptionsResourceFile)); " is 149.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,ReplyMessage,The length of the statement  "	var messageId = _dataService.CreateMessageReply (conversationId' PortalController.GetEffectivePortalId (sender.PortalID)' body' sender.UserID' sender.DisplayName' GetCurrentUserInfo ().UserID); " is 193.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,ReplyMessage,The length of the statement  "		throw new MessageOrRecipientNotFoundException (Localization.Localization.GetString ("MsgMessageOrRecipientNotFound"' Localization.Localization.ExceptionsResourceFile)); " is 168.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetLastSentMessage,The length of the statement  "	return CBO.FillObject<Message> (_dataService.GetLastSentMessage (sender.UserID' PortalController.GetEffectivePortalId (sender.PortalID))); " is 138.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetArchivedMessages,The length of the statement  "	var reader = _dataService.GetArchiveBoxView (userId' PortalController.GetEffectivePortalId (GetCurrentUserInfo ().PortalID)' afterMessageId' numberOfRecords' ConstSortColumnDate' !ConstAscending); " is 196.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetInbox,The length of the statement  "	return GetInbox (userId' afterMessageId' numberOfRecords' sortColumn' sortAscending' MessageReadStatus.Any' MessageArchivedStatus.UnArchived); " is 142.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetInbox,The length of the statement  "	var reader = _dataService.GetInBoxView (userId' PortalController.GetEffectivePortalId (GetCurrentUserInfo ().PortalID)' afterMessageId' numberOfRecords' sortColumn' sortAscending' readStatus' archivedStatus' MessageSentStatus.Received); " is 236.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetMessageThread,The length of the statement  "	return GetMessageThread (conversationId' userId' afterMessageId' numberOfRecords' ConstSortColumnDate' !ConstAscending' ref totalRecords); " is 138.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetMessageThread,The length of the statement  "	var dr = _dataService.GetMessageThread (conversationId' userId' afterMessageId' numberOfRecords' sortColumn' sortAscending' ref totalRecords); " is 142.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetSentbox,The length of the statement  "	return GetSentbox (userId' afterMessageId' numberOfRecords' sortColumn' sortAscending' MessageReadStatus.Any' MessageArchivedStatus.UnArchived); " is 144.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetSentbox,The length of the statement  "	var reader = _dataService.GetSentBoxView (userId' PortalController.GetEffectivePortalId (GetCurrentUserInfo ().PortalID)' afterMessageId' numberOfRecords' sortColumn' sortAscending); " is 182.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,CountConversations,The length of the statement  "	cache.Insert (cacheKey' count' (DNNCacheDependency)null' DateTime.Now.AddSeconds (DataCache.NotificationsCacheTimeInSec)' System.Web.Caching.Cache.NoSlidingExpiration); " is 168.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,CountUnreadMessages,The length of the statement  "	cache.Insert (cacheKey' count' (DNNCacheDependency)null' DateTime.Now.AddSeconds (DataCache.NotificationsCacheTimeInSec)' System.Web.Caching.Cache.NoSlidingExpiration); " is 168.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,IsAdminOrHost,The length of the statement  "	return userInfo.IsSuperUser || userInfo.IsInRole (PortalController.Instance.GetCurrentPortalSettings ().AdministratorRoleName); " is 127.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetNextMessagesForInstantDispatch,The length of the statement  "	return CBO.FillCollection<MessageRecipient> (_dataService.GetNextMessagesForInstantDispatch (schedulerInstance' batchSize)); " is 124.
Long Statement,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,GetNextMessagesForDigestDispatch,The length of the statement  "	return CBO.FillCollection<MessageRecipient> (_dataService.GetNextMessagesForDigestDispatch (Convert.ToInt32 (frequency)' schedulerInstance' batchSize)); " is 152.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetEmailItemContent,The length of the statement  "		emailItemContent = emailItemContent.Replace ("[FRIENDREQUESTACTIONS]"' string.Format (linkContent' acceptUrl' profileUrl)); " is 123.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetEmailItemContent,The length of the statement  "		emailItemContent = emailItemContent.Replace ("[FOLLOWREQUESTACTIONS]"' string.Format (linkContent' acceptUrl' profileUrl)); " is 123.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetEmailBodyItemTemplate,The length of the statement  "	return Localization.Localization.GetString ("EMAIL_MESSAGING_DISPATCH_ITEM"' Localization.Localization.GlobalResourceFile' language); " is 133.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetEmailBodyTemplate,The length of the statement  "	return Localization.Localization.GetString ("EMAIL_MESSAGING_DISPATCH_BODY"' Localization.Localization.GlobalResourceFile' language); " is 133.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetEmailSubjectTemplate,The length of the statement  "	return Localization.Localization.GetString ("EMAIL_SUBJECT_FORMAT"' Localization.Localization.GlobalResourceFile' language); " is 124.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetFriendRequestActionsTemplate,The length of the statement  "	return Localization.Localization.GetString ("EMAIL_SOCIAL_FRIENDREQUESTACTIONS"' Localization.Localization.GlobalResourceFile' language); " is 137.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetFollowRequestActionsTemplate,The length of the statement  "	return Localization.Localization.GetString ("EMAIL_SOCIAL_FOLLOWREQUESTACTIONS"' Localization.Localization.GlobalResourceFile' language); " is 137.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetProfilePicUrl,The length of the statement  "	return string.Format ("http://{0}/DnnImageHandler.ashx?mode=profilepic&userId={1}&h={2}&w={3}"' portalSettings.DefaultPortalAlias' userId' 64' 64); " is 147.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetRelationshipAcceptRequestUrl,The length of the statement  "	return string.Format ("http://{0}/tabid/{1}/userId/{2}/action/{3}/{4}"' portalSettings.DefaultPortalAlias' portalSettings.UserTabId' userId.ToString (CultureInfo.InvariantCulture)' action' Globals.glbDefaultPage); " is 213.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetProfileUrl,The length of the statement  "	return string.Format ("http://{0}/tabid/{1}/userId/{2}/{3}"' portalSettings.DefaultPortalAlias' portalSettings.UserTabId' userId.ToString (CultureInfo.InvariantCulture)' Globals.glbDefaultPage); " is 194.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetDisplayName,The length of the statement  "	return (UserController.GetUserById (portalSettings.PortalId' userId) != null) ? UserController.GetUserById (portalSettings.PortalId' userId).DisplayName : portalSettings.PortalName; " is 181.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetNotificationUrl,The length of the statement  "	return string.Format ("http://{0}/tabid/{1}/userId/{2}/{3}#dnnCoreNotification"' portalSettings.DefaultPortalAlias' messageTabId' userId' Globals.glbDefaultPage); " is 162.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetPortalLogoUrl,The length of the statement  "	return string.Format ("http://{0}/{1}/{2}"' GetDomainName (portalSettings)' portalSettings.HomeDirectory' portalSettings.LogoFile); " is 131.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetDomainName,The length of the statement  "	return portalAlias.IndexOf ("/"' StringComparison.InvariantCulture) != -1 ? portalAlias.Substring (0' portalAlias.IndexOf ("/"' StringComparison.InvariantCulture)) : portalAlias; " is 178.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetSubscriptionsUrl,The length of the statement  "	return string.Format ("http://{0}/tabid/{1}/ctl/Profile/userId/{2}/pageno/3"' portalSettings.DefaultPortalAlias' GetMessageTab (portalSettings)' userId); " is 153.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,HandleFrequentDigests,The length of the statement  "	var handledMessages = this.HandleFrequencyDigest (DateTime.Now.AddHours (-1)' SettingLastHourlyRun' Frequency.Hourly' schedulerInstance' remainingMessages); " is 156.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,HandleFrequentDigests,The length of the statement  "	handledMessages = this.HandleFrequencyDigest (DateTime.Now.AddDays (-1)' SettingLastDailyRun' Frequency.Daily' schedulerInstance' remainingMessages); " is 149.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,HandleFrequentDigests,The length of the statement  "	handledMessages = this.HandleFrequencyDigest (DateTime.Now.AddDays (-7)' SettingLastWeeklyRun' Frequency.Weekly' schedulerInstance' remainingMessages); " is 151.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,HandleFrequentDigests,The length of the statement  "	this.HandleFrequencyDigest (DateTime.Now.AddDays (-30)' SettingLastMonthlyRun' Frequency.Monthly' schedulerInstance' remainingMessages); " is 136.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,HandleFrequencyDigest,The length of the statement  "			SchedulingProvider.Instance ().AddScheduleItemSetting (ScheduleHistoryItem.ScheduleID' settingKeyLastRunDate' DateTime.Now.ToString (CultureInfo.InvariantCulture)); " is 164.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,HandleDigest,The length of the statement  "	// get subscribers based on frequency' utilize remaining batch size as part of count of users to return (note' if multiple subscriptions have the same frequency they will be combined into 1 email) " is 196.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,HandleDigest,The length of the statement  "		var batchMessages = InternalMessagingController.Instance.GetNextMessagesForDigestDispatch (frequency' schedulerInstance' remainingMessages); " is 140.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,SendDigest,The length of the statement  "	var emailBodyItemContent = messageRecipients.Aggregate (string.Empty' (current' message) => current + GetEmailItemContent (portalSettings' message' emailBodyItemTemplate)); " is 172.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetScheduleItemDateSetting,The length of the statement  "		SchedulingProvider.Instance ().AddScheduleItemSetting (ScheduleHistoryItem.ScheduleID' SettingLastHourlyRun' dateValue.ToString (CultureInfo.InvariantCulture)); " is 160.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetScheduleItemDateSetting,The length of the statement  "		SchedulingProvider.Instance ().AddScheduleItemSetting (ScheduleHistoryItem.ScheduleID' SettingLastDailyRun' dateValue.ToString (CultureInfo.InvariantCulture)); " is 159.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetScheduleItemDateSetting,The length of the statement  "		SchedulingProvider.Instance ().AddScheduleItemSetting (ScheduleHistoryItem.ScheduleID' SettingLastWeeklyRun' dateValue.ToString (CultureInfo.InvariantCulture)); " is 160.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetScheduleItemDateSetting,The length of the statement  "		SchedulingProvider.Instance ().AddScheduleItemSetting (ScheduleHistoryItem.ScheduleID' SettingLastMonthlyRun' dateValue.ToString (CultureInfo.InvariantCulture)); " is 161.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,HandleInstantMessages,The length of the statement  "		var batchMessages = InternalMessagingController.Instance.GetNextMessagesForInstantDispatch (schedulerInstance' Host.MessageSchedulerBatchSize); " is 143.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,HandleInstantMessages,The length of the statement  "	ScheduleHistoryItem.AddLogNote (string.Format ("<br>Messaging Scheduler '{0}' sent a total of {1} message(s)"' schedulerInstance' messagesSent)); " is 145.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,SendMessage,The length of the statement  "		InternalMessagingController.Instance.MarkMessageAsDispatched (messageRecipient.MessageID' messageRecipient.RecipientID); " is 120.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,SendMessage,The length of the statement  "			Mail.Mail.SendEmail (fromAddress' senderAddress' toAddress' subject' body' CreateAttachments (message.MessageID).ToList ()); " is 124.
Long Statement,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,SendMessage,The length of the statement  "	InternalMessagingController.Instance.MarkMessageAsDispatched (messageRecipient.MessageID' messageRecipient.RecipientID); " is 120.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,SetNotificationTypeActions,The length of the statement  "		action.NotificationTypeActionId = _dataService.AddNotificationTypeAction (notificationTypeId' action.NameResourceKey' action.DescriptionResourceKey' action.ConfirmResourceKey' action.APICall' GetCurrentUserId ()); " is 213.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,CountNotifications,The length of the statement  "	cache.Insert (cacheKey' count' (DNNCacheDependency)null' DateTime.Now.AddSeconds (DataCache.NotificationsCacheTimeInSec)' System.Web.Caching.Cache.NoSlidingExpiration); " is 168.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,SendNotification,The length of the statement  "		throw new ArgumentException (Localization.Localization.GetString ("MsgSubjectOrBodyRequiredError"' Localization.Localization.ExceptionsResourceFile)); " is 150.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,SendNotification,The length of the statement  "		throw new ArgumentException (Localization.Localization.GetString ("MsgRolesOrUsersRequiredError"' Localization.Localization.ExceptionsResourceFile)); " is 149.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,SendNotification,The length of the statement  "		throw new ArgumentException (string.Format (Localization.Localization.GetString ("MsgSubjectTooBigError"' Localization.Localization.ExceptionsResourceFile)' ConstMaxSubject' notification.Subject.Length)); " is 204.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,SendNotification,The length of the statement  "		throw new ArgumentException (Localization.Localization.GetString ("MsgEmptyToListFoundError"' Localization.Localization.ExceptionsResourceFile)); " is 145.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,SendNotification,The length of the statement  "		throw new ArgumentException (string.Format (Localization.Localization.GetString ("MsgToListTooBigError"' Localization.Localization.ExceptionsResourceFile)' ConstMaxTo' sbTo.Length)); " is 182.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,SendNotification,The length of the statement  "		_messagingDataService.CreateMessageRecipientsForRole (notification.NotificationID' roleIds' UserController.Instance.GetCurrentUserInfo ().UserID); " is 146.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,SendNotification,The length of the statement  "		foreach (var messageRecipient in InternalMessagingController.Instance.GetMessageRecipients (notification.NotificationID)) { " is 123.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,CreateNotificationType,The length of the statement  "	notificationType.NotificationTypeId = _dataService.CreateNotificationType (notificationType.Name' notificationType.Description' (int)notificationType.TimeToLive.TotalMinutes == 0 ? Null.NullInteger : (int)notificationType.TimeToLive.TotalMinutes' notificationType.DesktopModuleId' GetCurrentUserId ()' notificationType.IsTask); " is 327.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,GetNotifications,The length of the statement  "	return userId <= 0 ? new List<Notification> (0) : CBO.FillCollection<Notification> (_dataService.GetNotifications (userId' pid' afterNotificationId' numberOfRecords)); " is 167.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,GetNotificationType,The length of the statement  "	var cacheItemArgs = new CacheItemArgs (notificationTypeCacheKey' DataCache.NotificationTypesTimeOut' DataCache.NotificationTypesCachePriority' notificationTypeId); " is 163.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,GetNotificationType,The length of the statement  "	var cacheItemArgs = new CacheItemArgs (notificationTypeCacheKey' DataCache.NotificationTypesTimeOut' DataCache.NotificationTypesCachePriority' name); " is 149.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,GetNotificationTypeAction,The length of the statement  "	var notificationTypeActionCacheKey = string.Format (DataCache.NotificationTypeActionsCacheKey' notificationTypeActionId); " is 121.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,GetNotificationTypeAction,The length of the statement  "	var cacheItemArgs = new CacheItemArgs (notificationTypeActionCacheKey' DataCache.NotificationTypeActionsTimeOut' DataCache.NotificationTypeActionsPriority' notificationTypeActionId); " is 182.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,GetNotificationTypeAction,The length of the statement  "	var notificationTypeActionCacheKey = string.Format (DataCache.NotificationTypeActionsByNameCacheKey' notificationTypeId' name); " is 127.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,GetNotificationTypeAction,The length of the statement  "	var cacheItemArgs = new CacheItemArgs (notificationTypeActionCacheKey' DataCache.NotificationTypeActionsTimeOut' DataCache.NotificationTypeActionsPriority' notificationTypeId' name); " is 182.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,GetExpirationDate,The length of the statement  "	return notificationType.TimeToLive.TotalMinutes > 0 ? DateTime.UtcNow.AddMinutes (notificationType.TimeToLive.TotalMinutes) : DateTime.MinValue; " is 144.
Long Statement,DotNetNuke.Services.Social.Notifications,NotificationsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\NotificationsController.cs,GetNotificationTypeActionByNameCallBack,The length of the statement  "	return CBO.FillObject<NotificationTypeAction> (_dataService.GetNotificationTypeActionByName (notificationTypeId' name)); " is 120.
Long Statement,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,SaveMessage,The length of the statement  "	return _provider.ExecuteScalar<int> ("CoreMessaging_SaveMessage"' message.MessageID' portalId' message.To' message.From' message.Subject' message.Body' message.ConversationId' message.ReplyAllAllowed' message.SenderUserID' createUpdateUserId); " is 243.
Long Statement,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,CreateMessageReply,The length of the statement  "	return _provider.ExecuteScalar<int> ("CoreMessaging_CreateMessageReply"' conversationId' portalId' body' senderUserId' fromName' createUpdateUserId); " is 149.
Long Statement,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,GetInBoxView,The length of the statement  "	return _provider.ExecuteReader ("CoreMessaging_GetMessageConversations"' userId' portalId' afterMessageId' numberOfRecords' sortColumn' sortAscending' read' archived' sent); " is 173.
Long Statement,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,GetSentBoxView,The length of the statement  "	return _provider.ExecuteReader ("CoreMessaging_GetSentBox"' userId' portalId' afterMessageId' numberOfRecords' sortColumn' sortAscending); " is 138.
Long Statement,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,GetArchiveBoxView,The length of the statement  "	return _provider.ExecuteReader ("CoreMessaging_GetArchiveBox"' userId' portalId' afterMessageId' numberOfRecords' sortColumn' sortAscending); " is 141.
Long Statement,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,GetMessageThread,The length of the statement  "	return _provider.ExecuteReader ("CoreMessaging_GetMessageThread"' conversationId' userId' afterMessageId' numberOfRecords' sortColumn' sortAscending); " is 150.
Long Statement,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,SaveMessageRecipient,The length of the statement  "	return _provider.ExecuteScalar<int> ("CoreMessaging_SaveMessageRecipient"' messageRecipient.RecipientID' messageRecipient.MessageID' messageRecipient.UserID' messageRecipient.Read' messageRecipient.Archived' createUpdateUserId); " is 228.
Long Statement,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,SaveMessageAttachment,The length of the statement  "	return _provider.ExecuteScalar<int> ("CoreMessaging_SaveMessageAttachment"' messageAttachment.MessageAttachmentID' messageAttachment.MessageID' messageAttachment.FileID' createUpdateUserId); " is 190.
Long Statement,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,GetNextMessagesForDigestDispatch,The length of the statement  "	return _provider.ExecuteReader ("CoreMessaging_GetNextMessagesForDigestDispatch"' frequecy' schedulerInstance' batchSize); " is 122.
Long Statement,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,SetUserPreference,The length of the statement  "	_provider.ExecuteNonQuery ("CoreMessaging_SetUserPreference"' portalId' userId' messagesEmailFrequency' notificationsEmailFrequency); " is 133.
Long Statement,DotNetNuke.Entities.Modules.Definitions,ModuleDefinitionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Definitions\ModuleDefinitionController.cs,GetModuleDefinitions,The length of the statement  "	return CBO.GetCachedObject<Dictionary<int' ModuleDefinitionInfo>> (new CacheItemArgs (DataCache.ModuleDefinitionCacheKey' DataCache.ModuleDefinitionCachePriority)' GetModuleDefinitionsCallBack); " is 194.
Long Statement,DotNetNuke.Entities.Modules.Definitions,ModuleDefinitionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Definitions\ModuleDefinitionController.cs,GetModuleDefinitionsByDesktopModuleID,The length of the statement  "	return GetModuleDefinitions ().Where (kvp => kvp.Value.DesktopModuleID == desktopModuleID).ToDictionary (kvp => kvp.Value.FriendlyName' kvp => kvp.Value); " is 154.
Long Statement,DotNetNuke.Entities.Modules.Definitions,ModuleDefinitionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Definitions\ModuleDefinitionController.cs,SaveModuleDefinition,The length of the statement  "		moduleDefinitionID = dataProvider.AddModuleDefinition (moduleDefinition.DesktopModuleID' moduleDefinition.FriendlyName' moduleDefinition.DefinitionName' moduleDefinition.DefaultCacheTime' UserController.Instance.GetCurrentUserInfo ().UserID); " is 242.
Long Statement,DotNetNuke.Entities.Modules.Definitions,ModuleDefinitionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Definitions\ModuleDefinitionController.cs,SaveModuleDefinition,The length of the statement  "		dataProvider.UpdateModuleDefinition (moduleDefinition.ModuleDefID' moduleDefinition.FriendlyName' moduleDefinition.DefinitionName' moduleDefinition.DefaultCacheTime' UserController.Instance.GetCurrentUserInfo ().UserID); " is 220.
Long Statement,DotNetNuke.Entities.Modules.Definitions,ModuleDefinitionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Definitions\ModuleDefinitionController.cs,SaveModuleDefinition,The length of the statement  "			ArrayList permissions = permissionController.GetPermissionByCodeAndKey (kvp.Value.PermissionCode' kvp.Value.PermissionKey); " is 123.
Long Statement,DotNetNuke.Entities.Modules.Definitions,ModuleDefinitionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Definitions\ModuleDefinitionController.cs,SaveModuleDefinition,The length of the statement  "			ModuleControlInfo moduleControl = ModuleControlController.GetModuleControlByControlKey (kvp.Value.ControlKey' kvp.Value.ModuleDefID); " is 133.
Long Statement,DotNetNuke.Entities.Modules.Definitions,ModuleDefinitionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Definitions\ModuleDefinitionInfo.cs,LoadControls,The length of the statement  "	_ModuleControls = ModuleDefID > Null.NullInteger ? ModuleControlController.GetModuleControlsByModuleDefinitionID (ModuleDefID) : new Dictionary<string' ModuleControlInfo> (); " is 174.
Long Statement,DotNetNuke.Entities.Portals.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\Data\DataService.cs,AddPortalGroup,The length of the statement  "	return _provider.ExecuteScalar<int> ("AddPortalGroup"' portalGroup.PortalGroupName' portalGroup.PortalGroupDescription' portalGroup.MasterPortalId' portalGroup.AuthenticationDomain' createdByUserId); " is 199.
Long Statement,DotNetNuke.Entities.Portals.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Portals\Data\DataService.cs,UpdatePortalGroup,The length of the statement  "	_provider.ExecuteNonQuery ("UpdatePortalGroup"' portalGroup.PortalGroupId' portalGroup.PortalGroupName' portalGroup.PortalGroupDescription' portalGroup.AuthenticationDomain' lastModifiedByUserId); " is 196.
Long Statement,DotNetNuke.Modules.SearchInput,SearchInputController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Modules\SearchInput\SearchInputController.cs,GetSearchResultModules,The length of the statement  "	return CBO.FillCollection (DataProvider.Instance ().GetSearchResultModules (PortalID)' typeof(SearchResultsModuleInfo)); " is 120.
Long Statement,DotNetNuke.Security.Permissions.Controls,DesktopModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\DesktopModulePermissionsGrid.cs,GetDesktopModulePermissions,The length of the statement  "	_DesktopModulePermissions = new DesktopModulePermissionCollection (DesktopModulePermissionController.GetDesktopModulePermissions (PortalDesktopModuleID)); " is 154.
Long Statement,DotNetNuke.Security.Permissions.Controls,DesktopModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\DesktopModulePermissionsGrid.cs,AddPermission,The length of the statement  "				AddPermission (objPermission' int.Parse (Globals.glbRoleNothing)' Null.NullString' user.UserID' user.DisplayName' true); " is 120.
Long Statement,DotNetNuke.Security.Permissions.Controls,DesktopModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\DesktopModulePermissionsGrid.cs,SaveViewState,The length of the statement  "			sb.Append (BuildKey (objDesktopModulePermission.AllowAccess' objDesktopModulePermission.PermissionID' objDesktopModulePermission.DesktopModulePermissionID' objDesktopModulePermission.RoleID' objDesktopModulePermission.RoleName' objDesktopModulePermission.UserID' objDesktopModulePermission.DisplayName)); " is 304.
Long Statement,DotNetNuke.Security.Permissions.Controls,FolderPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\FolderPermissionsGrid.cs,GetFolderPermissions,The length of the statement  "	FolderPermissions = new FolderPermissionCollection (FolderPermissionController.GetFolderPermissionsCollectionByFolder (PortalId' FolderPath)); " is 142.
Long Statement,DotNetNuke.Security.Permissions.Controls,FolderPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\FolderPermissionsGrid.cs,rolePermissionsGrid_ItemDataBound,The length of the statement  "	if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem || item.ItemType == ListItemType.SelectedItem) { " is 136.
Long Statement,DotNetNuke.Security.Permissions.Controls,FolderPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\FolderPermissionsGrid.cs,AddPermission,The length of the statement  "				AddPermission (objPermission' int.Parse (Globals.glbRoleNothing)' Null.NullString' user.UserID' user.DisplayName' true); " is 120.
Long Statement,DotNetNuke.Security.Permissions.Controls,FolderPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\FolderPermissionsGrid.cs,SaveViewState,The length of the statement  "			sb.Append (BuildKey (objFolderPermission.AllowAccess' objFolderPermission.PermissionID' objFolderPermission.FolderPermissionID' objFolderPermission.RoleID' objFolderPermission.RoleName' objFolderPermission.UserID' objFolderPermission.DisplayName)); " is 248.
Long Statement,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,GetModulePermissions,The length of the statement  "	_ModulePermissions = new ModulePermissionCollection (ModulePermissionController.GetModulePermissions (ModuleID' TabId)); " is 120.
Long Statement,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,rolePermissionsGrid_ItemDataBound,The length of the statement  "	if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem || item.ItemType == ListItemType.SelectedItem) { " is 136.
Long Statement,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,AddPermission,The length of the statement  "	bool isMatch = _ModulePermissions.Cast<ModulePermissionInfo> ().Any (objModulePermission => objModulePermission.UserID == user.UserID); " is 135.
Long Statement,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,AddPermission,The length of the statement  "				AddPermission (objPermission' int.Parse (Globals.glbRoleNothing)' Null.NullString' user.UserID' user.DisplayName' true); " is 120.
Long Statement,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,GetPermission,The length of the statement  "		permission = role.RoleID == AdministratorRoleId ? PermissionTypeGrant : base.GetPermission (objPerm' role' column' defaultState); " is 129.
Long Statement,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,SaveViewState,The length of the statement  "			sb.Append (BuildKey (modulePermission.AllowAccess' modulePermission.PermissionID' modulePermission.ModulePermissionID' modulePermission.RoleID' modulePermission.RoleName' modulePermission.UserID' modulePermission.DisplayName)); " is 227.
Long Statement,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,GetRoles,The length of the statement  "	Roles = new ArrayList (RoleController.Instance.GetRoles (portalSettings.PortalId' r => r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved && checkedRoles.Contains (r.RoleID)).ToArray ()); " is 214.
Long Statement,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,SetUpGrid,The length of the statement  "		var locName = (permission.ModuleDefID <= 0) ? Localization.GetString (permission.PermissionName + ".Permission"' PermissionProvider.Instance ().LocalResourceFile) //system permission " is 182.
Long Statement,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,SetUpGrid,The length of the statement  "		: (!String.IsNullOrEmpty (ResourceFile) ? Localization.GetString (permission.PermissionName + ".Permission"' ResourceFile) //custom permission " is 142.
Long Statement,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,SetUpRolesGrid,The length of the statement  "	SetUpGrid (rolePermissionsGrid' "RoleName"' "roleid"' Localization.GetString ("PermissionRoleHeader.Text"' PermissionProvider.Instance ().LocalResourceFile)); " is 158.
Long Statement,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,SetUpUsersGrid,The length of the statement  "		SetUpGrid (userPermissionsGrid' "DisplayName"' "userid"' Localization.GetString ("PermissionUserHeader.Text"' PermissionProvider.Instance ().LocalResourceFile)); " is 161.
Long Statement,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,FillSelectRoleComboBox,The length of the statement  "	var groupRoles = (selectedRoleGroupId > -2) ? RoleController.Instance.GetRoles (portalSettings.PortalId' r => r.RoleGroupID == selectedRoleGroupId && r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved) : RoleController.Instance.GetRoles (portalSettings.PortalId' r => r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved); " is 374.
Long Statement,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,FillSelectRoleComboBox,The length of the statement  "	var itemToSelect = cboSelectRole.Items.Cast<ListItem> ().FirstOrDefault (i => !defaultRoleIds.Contains (int.Parse (i.Value))); " is 126.
Long Statement,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,rolePermissionsGrid_ItemDataBound,The length of the statement  "	if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem || item.ItemType == ListItemType.SelectedItem) { " is 136.
Long Statement,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,rolePermissionsGrid_ItemDataBound,The length of the statement  "		if (roleID == PortalSettings.Current.AdministratorRoleId || roleID == AllUsersRoleId || roleID == PortalSettings.Current.RegisteredRoleId) { " is 140.
Long Statement,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,CreateAddRoleControls,The length of the statement  "		cboRoleGroups.Items.Add (new ListItem (roleGroup.RoleGroupName' roleGroup.RoleGroupID.ToString (CultureInfo.InvariantCulture))); " is 128.
Long Statement,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,OnInit,The length of the statement  "	ClientResourceManager.RegisterStyleSheet (Page' "~/Resources/Shared/Components/Tokeninput/Themes/token-input-facebook.css"' FileOrder.Css.ResourceCss); " is 151.
Long Statement,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,SupportsDenyPermissions,The length of the statement  "	//to maintain backward compatibility the base implementation must always call the simple parameterless version of this method " is 125.
Long Statement,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,SupportsDenyPermissions,The length of the statement  "	//to support Deny permissions a derived grid typically needs to implement the new GetPermission and UpdatePermission overload methods which support StateKey " is 156.
Long Statement,DotNetNuke.Security.Permissions.Controls,TabPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\TabPermissionsGrid.cs,rolePermissionsGrid_ItemDataBound,The length of the statement  "	if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem || item.ItemType == ListItemType.SelectedItem) { " is 136.
Long Statement,DotNetNuke.Security.Permissions.Controls,TabPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\TabPermissionsGrid.cs,AddPermission,The length of the statement  "				AddPermission (objPermission' int.Parse (Globals.glbRoleNothing)' Null.NullString' user.UserID' user.DisplayName' true); " is 120.
Long Statement,DotNetNuke.Security.Permissions.Controls,TabPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\TabPermissionsGrid.cs,SaveViewState,The length of the statement  "			sb.Append (BuildKey (objTabPermission.AllowAccess' objTabPermission.PermissionID' objTabPermission.TabPermissionID' objTabPermission.RoleID' objTabPermission.RoleName' objTabPermission.UserID' objTabPermission.DisplayName)); " is 224.
Long Statement,DotNetNuke.Services.Analytics,GoogleAnalyticsEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Analytics\GoogleAnalyticsEngine.cs,RenderScript,The length of the statement  "	if (!trackForAdmin && (UserController.Instance.GetCurrentUserInfo ().IsSuperUser || (PortalSettings.Current != null && UserController.Instance.GetCurrentUserInfo ().IsInRole (PortalSettings.Current.AdministratorRoleName)))) { " is 225.
Long Statement,DotNetNuke.Services.ClientCapability,FacebookRequestController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ClientCapability\FacebookRequestController.cs,GetFacebookDetailsFromRequest,The length of the statement  "		var base64JsonArray = Convert.FromBase64String (decodedJson.PadRight (decodedJson.Length + (4 - decodedJson.Length % 4) % 4' '=')); " is 131.
Long Statement,DotNetNuke.Services.Mobile,PreviewProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\PreviewProfileController.cs,Save,The length of the statement  "	int id = DataProvider.Instance ().SavePreviewProfile (profile.Id' profile.PortalId' profile.Name' profile.Width' profile.Height' profile.UserAgent' profile.SortOrder' UserController.Instance.GetCurrentUserInfo ().UserID); " is 221.
Long Statement,DotNetNuke.Services.Mobile,PreviewProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\PreviewProfileController.cs,Save,The length of the statement  "	var logContent = string.Format ("{0} Mobile Preview Profile '{1}'"' profile.Id == Null.NullInteger ? "Add" : "Update"' profile.Name); " is 133.
Long Statement,DotNetNuke.Services.Mobile,PreviewProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\PreviewProfileController.cs,GetProfilesByPortal,The length of the statement  "	var cacheArg = new CacheItemArgs (cacheKey' DataCache.PreviewProfilesCacheTimeOut' DataCache.PreviewProfilesCachePriority' portalId' addDefault); " is 145.
Long Statement,DotNetNuke.Services.Mobile,PreviewProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\PreviewProfileController.cs,AddLog,The length of the statement  "	EventLogController.Instance.AddLog ("Message"' logContent' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.ADMIN_ALERT); " is 213.
Long Statement,DotNetNuke.Services.Mobile,PreviewProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\PreviewProfileController.cs,CreateDefaultDevices,The length of the statement  "	if (!settings.TryGetValue ("DefPreviewProfiles_Created"' out defaultPreviewProfiles) || defaultPreviewProfiles != DotNetNukeContext.Current.Application.Name) { " is 159.
Long Statement,DotNetNuke.Services.Mobile,PreviewProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\PreviewProfileController.cs,CreateDefaultDevices,The length of the statement  "			PortalController.UpdatePortalSetting (portalId' "DefPreviewProfiles_Created"' DotNetNukeContext.Current.Application.Name); " is 122.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,IsRedirectAllowedForTheSession,The length of the statement  "	} else if (app.Request.Cookies [DisableMobileRedirectCookieName] != null && app.Request.Cookies [DisableRedirectPresistCookieName] != null)//check for cookie " is 157.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetRedirectUrl,The length of the statement  "		if (!string.IsNullOrEmpty (redirectUrl) && string.Compare (redirectUrl' portalSettings.ActiveTab.FullUrl' true' CultureInfo.InvariantCulture) != 0) { " is 149.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetFullSiteUrl,The length of the statement  "		if (!string.IsNullOrEmpty (fullSiteUrl) && string.Compare (fullSiteUrl' portalSettings.ActiveTab.FullUrl' true' CultureInfo.InvariantCulture) != 0) { " is 149.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetFullSiteUrl,The length of the statement  "					if (portalSettings.HomeTabId != Null.NullInteger && portalSettings.HomeTabId != currentTabId)//ensure it's not redirecting to itself " is 132.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetFullSiteUrl,The length of the statement  "		fullSiteUrl += string.Format ("{0}{1}=1"' fullSiteUrl.Contains ("?") ? "&" : "?"' DisableMobileRedirectQueryStringName); " is 120.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetMobileSiteUrl,The length of the statement  "		if (!string.IsNullOrEmpty (fullSiteUrl) && string.Compare (fullSiteUrl' portalSettings.ActiveTab.FullUrl' true' CultureInfo.InvariantCulture) != 0) { " is 149.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetMobileSiteUrl,The length of the statement  "		mobileSiteUrl += string.Format ("{0}{1}=0"' mobileSiteUrl.Contains ("?") ? "&" : "?"' DisableMobileRedirectQueryStringName); " is 124.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,Save,The length of the statement  "	int id = DataProvider.Instance ().SaveRedirection (redirection.Id' redirection.PortalId' redirection.Name' (int)redirection.Type' redirection.SortOrder' redirection.SourceTabId' redirection.IncludeChildTabs' (int)redirection.TargetType' redirection.TargetValue' redirection.Enabled' UserController.Instance.GetCurrentUserInfo ().UserID); " is 337.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,Save,The length of the statement  "	var logContent = string.Format ("'{0}' {1}"' redirection.Name' redirection.Id == Null.NullInteger ? "Added" : "Updated"); " is 121.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,PurgeInvalidRedirections,The length of the statement  "	foreach (var r in redirects.Where (r => r.SourceTabId != Null.NullInteger && allTabs.Where (t => t.Key == r.SourceTabId).Count () < 1)) { " is 137.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,PurgeInvalidRedirections,The length of the statement  "	foreach (var r in redirects.Where (r => r.TargetType == TargetType.Tab && allTabs.Where (t => t.Key == int.Parse (r.TargetValue.ToString ())).Count () < 1)) { " is 158.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetAllRedirections,The length of the statement  "	var cacheArg = new CacheItemArgs (AllRedirectionsCacheKey' DataCache.RedirectionsCacheTimeOut' DataCache.RedirectionsCachePriority' ""); " is 136.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetRedirectionsByPortal,The length of the statement  "	var cacheArg = new CacheItemArgs (cacheKey' DataCache.RedirectionsCacheTimeOut' DataCache.RedirectionsCachePriority' portalId); " is 127.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetRedirectUrlFromRule,The length of the statement  "				if (portalSettings.HomeTabId != Null.NullInteger && portalSettings.HomeTabId != currentTabId)//ensure it's not redirecting to itself " is 132.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetAllRedirectionsCallBack,The length of the statement  "	return CBO.FillCollection<Redirection> (DataProvider.Instance ().GetAllRedirections ()).Cast<IRedirection> ().ToList (); " is 120.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,GetRedirectionsByPortalCallBack,The length of the statement  "	return CBO.FillCollection<Redirection> (DataProvider.Instance ().GetRedirections (portalId)).Cast<IRedirection> ().ToList (); " is 125.
Long Statement,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,AddLog,The length of the statement  "	EventLogController.Instance.AddLog ("Site Redirection Rule"' logContent' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.ADMIN_ALERT); " is 227.
Long Statement,DotNetNuke.Services.Social.Notifications.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\Data\DataService.cs,CreateNotificationType,The length of the statement  "	return _provider.ExecuteScalar<int> (GetFullyQualifiedName ("CreateNotificationType")' name' _provider.GetNull (description)' _provider.GetNull (timeToLive)' _provider.GetNull (desktopModuleId)' createUpdateUserId' isTask); " is 223.
Long Statement,DotNetNuke.Services.Social.Notifications.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\Data\DataService.cs,AddNotificationTypeAction,The length of the statement  "	return _provider.ExecuteScalar<int> (GetFullyQualifiedName ("AddNotificationTypeAction")' notificationTypeId' nameResourceKey' _provider.GetNull (descriptionResourceKey)' _provider.GetNull (confirmResourceKey)' apiCall' createdByUserId); " is 237.
Long Statement,DotNetNuke.Services.Social.Notifications.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\Data\DataService.cs,SendNotification,The length of the statement  "	return _provider.ExecuteScalar<int> (GetFullyQualifiedName ("SendNotification")' notification.NotificationTypeID' portalId' notification.To' notification.From' notification.Subject' notification.Body' notification.SenderUserID' createdByUserId' _provider.GetNull (notification.ExpirationDate)' notification.IncludeDismissAction' notification.Context); " is 351.
Long Statement,DotNetNuke.Services.Social.Notifications.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\Data\DataService.cs,DeleteUserNotifications,The length of the statement  "	return userId <= 0 ? 0 : _provider.ExecuteScalar<int> (GetFullyQualifiedName ("DeleteUserNotifications")' userId' portalId); " is 124.
Long Statement,DotNetNuke.Services.Social.Notifications.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Notifications\Data\DataService.cs,GetNotifications,The length of the statement  "	return _provider.ExecuteReader (GetFullyQualifiedName ("GetNotifications")' userId' portalId' afterNotificationId' numberOfRecords); " is 132.
Long Statement,DotNetNuke.Services.EventQueue,EventQueueController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\EventQueue\EventQueueController.cs,FillMessage,The length of the statement  "		message.Priority = (MessagePriority)Enum.Parse (typeof(MessagePriority)' Convert.ToString (Null.SetNull (dr ["Priority"]' message.Priority))); " is 142.
Long Statement,DotNetNuke.Services.EventQueue,EventQueueController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\EventQueue\EventQueueController.cs,SendMessage,The length of the statement  "			intMessageID = DataProvider.Instance ().AddEventMessage (eventName' (int)message.Priority' message.ProcessorType' message.ProcessorCommand' message.Body' message.Sender' subscribers [indx]' message.AuthorizedRoles' message.ExceptionMessage' message.SentDate' message.ExpirationDate' message.SerializeAttributes ()); " is 315.
Long Statement,DotNetNuke.Services.Installer,Installer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installer.cs,LogInstallEvent,The length of the statement  "			log.LogProperties.Add (new LogDetailInfo (eventType + " " + package + ":"' InstallerInfo.ManifestFile.Name.Replace (".dnn"' ""))); " is 130.
Long Statement,DotNetNuke.Services.Installer,Installer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installer.cs,DeleteTempFolder,The length of the statement  "		Logger.Error ("Exception deleting folder " + TempInstallFolder + " while installing " + InstallerInfo.ManifestFile.Name' ex); " is 125.
Long Statement,DotNetNuke.Services.Installer,InstallerInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\InstallerInfo.cs,ReadZipStream,The length of the statement  "			if (file.Type == InstallFileType.Resources && (file.Name.ToLowerInvariant () == "containers.zip" || file.Name.ToLowerInvariant () == "skins.zip")) { " is 148.
Long Statement,DotNetNuke.Services.Installer,InstallerInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\InstallerInfo.cs,ReadZipStream,The length of the statement  "						if (file.Extension == "dnn7" && (ManifestFile.Extension == "dnn" || ManifestFile.Extension == "dnn5" || ManifestFile.Extension == "dnn6")) { " is 140.
Long Statement,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacySkin,The length of the statement  "					SkinController.AddSkin (skin.SkinPackageID' Path.Combine ("[G]" + SkinController.RootSkin' Path.Combine (skin.SkinName' skinFile.FullName))); " is 141.
Long Statement,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacySkin,The length of the statement  "					SkinController.AddSkin (skin.SkinPackageID' Path.Combine ("[G]" + SkinController.RootContainer' Path.Combine (skin.SkinName' skinFile.FullName))); " is 146.
Long Statement,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,CreateSkinManifest,The length of the statement  "				CreateSkinManifest (writer' skinFolder' "Skin"' tempInstallFolder.Replace (Globals.ApplicationMapPath + "\\"' "")' "Skins"); " is 124.
Long Statement,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,CreateSkinManifest,The length of the statement  "				CreateSkinManifest (writer' skinFolder' "Container"' tempInstallFolder.Replace (Globals.ApplicationMapPath + "\\"' "")' "Containers"); " is 134.
Long Statement,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,CreateSkinManifest,The length of the statement  "			CreateSkinManifest (writer' skinFolder' skinType' tempInstallFolder.Replace (Globals.ApplicationMapPath + "\\"' "")' ""); " is 121.
Long Statement,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ParsePackageName,The length of the statement  "	if (package.PackageType == "Module" && AdminModules.Contains (package.Name + "'") || package.PackageType == "Module" && CoreModules.Contains (package.Name + "'") || (package.PackageType == "Container" || package.PackageType == "Skin") && KnownSkins.Contains (package.Name + "'") || package.PackageType == "SkinObject" && KnownSkinObjects.Contains (package.Name + "'")) { " is 370.
Long Statement,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacyLanguages,The length of the statement  "	string filePath = Globals.ApplicationMapPath + Localization.Localization.SupportedLocalesFile.Substring (1).Replace ("/"' "\\"); " is 128.
Long Statement,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacyLanguages,The length of the statement  "			HostController.Instance.Update ("EnableBrowserLanguage"' Util.ReadAttribute (browserNav' "enabled"' false' null' Null.NullString' "true")); " is 139.
Long Statement,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacyLanguages,The length of the statement  "			HostController.Instance.Update ("EnableUrlLanguage"' Util.ReadAttribute (urlNav' "enabled"' false' null' Null.NullString' "true")); " is 131.
Long Statement,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacyLanguages,The length of the statement  "		filePath = string.Format (Globals.ApplicationMapPath + Localization.Localization.ApplicationResourceDirectory.Substring (1).Replace ("/"' "\\") + "\\Locales.Portal-{0}.xml"' portalID); " is 184.
Long Statement,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacyLanguages,The length of the statement  "				PortalController.UpdatePortalSetting (portalID' "EnableBrowserLanguage"' Util.ReadAttribute (browserNav' "enabled"' false' null' Null.NullString' "true")); " is 155.
Long Statement,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacyLanguages,The length of the statement  "				PortalController.UpdatePortalSetting (portalID' "EnableUrlLanguage"' Util.ReadAttribute (urlNav' "enabled"' false' null' Null.NullString' "true")); " is 147.
Long Statement,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacyModule,The length of the statement  "	string moduleFolder = Path.Combine (Globals.ApplicationMapPath' Path.Combine ("DesktopModules"' desktopModule.FolderName)); " is 123.
Long Statement,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,BackupFile,The length of the statement  "	RetryableAction.RetryEverySecondFor30Seconds (() => FileSystemUtils.CopyFile (fullFileName' backupFileName)' "Backup file " + fullFileName); " is 140.
Long Statement,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,CopyFile,The length of the statement  "	RetryableAction.RetryEverySecondFor30Seconds (() => FileSystemUtils.CopyFile (installFile.TempFileName' fullFileName)' "Copy file to " + fullFileName); " is 151.
Long Statement,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,DeleteFile,The length of the statement  "		RetryableAction.RetryEverySecondFor30Seconds (() => FileSystemUtils.DeleteFile (fullFileName)' "Delete file " + fullFileName); " is 126.
Long Statement,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,IsFileValid,The length of the statement  "	if ((strExtension == "dnn" || whiteList.IsAllowedExtension (strExtension) || packageWhiteList.Contains (strExtension) || (packageWhiteList.Contains ("*dataprovider") && strExtension.EndsWith ("dataprovider")))) { " is 212.
Long Statement,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,ParsePackageIconFileName,The length of the statement  "	if ((package.IconFile != null) && (package.PackageType == "Module" || package.PackageType == "Auth_System" || package.PackageType == "Container" || package.PackageType == "Skin")) { " is 181.
Long Statement,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,ParsePackageIconFileName,The length of the statement  "		filename = package.IconFile.StartsWith ("~/" + package.FolderName) ? package.IconFile.Remove (0' ("~/" + package.FolderName).Length).TrimStart ('/') : package.IconFile; " is 168.
Long Statement,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,ParsePackageIconFile,The length of the statement  "	if ((package.IconFile != null) && (package.PackageType == "Module" || package.PackageType == "Auth_System" || package.PackageType == "Container" || package.PackageType == "Skin")) { " is 181.
Long Statement,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,GetExternalRequest,The length of the statement  "	return GetExternalRequest (URL' Data' Username' Password' Domain' ProxyAddress' ProxyPort' DoPOST' UserAgent' Referer' out Filename' Host.WebRequestTimeout); " is 157.
Long Statement,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,GetExternalRequest,The length of the statement  "	return GetExternalRequest (URL' Data' Username' Password' Domain' ProxyAddress' ProxyPort' string.Empty' string.Empty' DoPOST' UserAgent' Referer' out Filename' requestTimeout); " is 177.
Long Statement,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,GetExternalRequest,The length of the statement  "	return GetExternalRequest (URL' Data' Username' Password' Domain' ProxyAddress' ProxyPort' ProxyUsername' ProxyPassword' DoPOST' UserAgent' Referer' out Filename' Host.WebRequestTimeout); " is 187.
Long Statement,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,GetExternalRequest,The length of the statement  "	if (Username != null && Password != null && Domain != null && Username.Trim () != "" && Password.Trim () != null && Domain.Trim () != null) { " is 141.
Long Statement,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,GetExternalRequest,The length of the statement  "				Filename = filenameParam.Substring (filenameParam.IndexOf ("\"") + 1).TrimEnd (Convert.ToChar ("\"")).TrimEnd (Convert.ToChar ("\\")); " is 134.
Long Statement,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,AddNode,The length of the statement  "			DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "AddNode:" + child.InnerXml.ToString ()); " is 171.
Long Statement,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,PrependNode,The length of the statement  "			DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "PrependNode:" + child.InnerXml.ToString ()); " is 175.
Long Statement,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,InsertNode,The length of the statement  "			DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "InsertNode:" + child.InnerXml.ToString ()); " is 174.
Long Statement,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,RemoveAttribute,The length of the statement  "				DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "RemoveAttribute:attributeName=" + attributeName.ToString ()); " is 192.
Long Statement,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,RemoveNode,The length of the statement  "			DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "RemoveNode:" + node.InnerXml.ToString ()); " is 173.
Long Statement,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,UpdateAttribute,The length of the statement  "			DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "UpdateAttribute:attributeName=" + attributeName.ToString ()); " is 192.
Long Statement,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,UpdateNode,The length of the statement  "		DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "UpdateNode: keyAttribute=" + keyAttribute.ToString ()); " is 186.
Long Statement,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,UpdateNode,The length of the statement  "				string commentHeaderText = string.Format (Localization.Localization.GetString ("XMLMERGE_Upgrade"' Localization.Localization.SharedResourceFile)' Environment.NewLine' Sender' Version' DateTime.Now); " is 198.
Long Statement,DotNetNuke.Services.Installer.Writers,LanguageComponentWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguageComponentWriter.cs,WriteCustomManifest,The length of the statement  "		PackageInfo package = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.PackageID == _DependentPackageID); " is 129.
Long Statement,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ReadLegacyManifest,The length of the statement  "							var dependentPackage = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.PackageID == kvp.Value.PackageID); " is 130.
Long Statement,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ParseFiles,The length of the statement  "		if (folder.FullName.ToLowerInvariant ().Contains ("desktopmodules") && !folder.FullName.ToLowerInvariant ().Contains ("admin") || folder.FullName.ToLowerInvariant ().Contains ("providers")) { " is 191.
Long Statement,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ParseFiles,The length of the statement  "		if (folder.FullName.ToLowerInvariant ().Contains ("install") && folder.FullName.ToLowerInvariant ().Contains ("temp")) { " is 120.
Long Statement,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ParseFiles,The length of the statement  "	if (folder.Name.ToLowerInvariant () == "app_localresources" || folder.Name.ToLowerInvariant () == "app_globalresources" || folder.Name.ToLowerInvariant () == "_default") { " is 171.
Long Statement,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ParseFiles,The length of the statement  "			if (file.Name.ToLowerInvariant ().Contains (Language.Code.ToLowerInvariant ()) || (Language.Code.ToLowerInvariant () == "en-us" && !file.Name.Contains ("-"))) { " is 160.
Long Statement,DotNetNuke.Services.Installer.Writers,ModulePackageWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\ModulePackageWriter.cs,ProcessControls,The length of the statement  "		//this code allows a developer to reference an ASCX file in a different folder than the module folder ( good for ASCX files shared between modules where you want only a single copy ) " is 182.
Long Statement,DotNetNuke.Services.Installer.Writers,ModulePackageWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\ModulePackageWriter.cs,ProcessControls,The length of the statement  "			moduleControl.ControlType = (SecurityAccessLevel)TypeDescriptor.GetConverter (typeof(SecurityAccessLevel)).ConvertFromString (controlType); " is 139.
Long Statement,DotNetNuke.Services.Installer.Writers,PackageWriterBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\PackageWriterBase.cs,AddFilesToZip,The length of the statement  "			filepath = Path.Combine (Path.Combine (Globals.ApplicationMapPath' basePath)' packageFile.FullName.Replace (basePath + "\\"' "")); " is 130.
Long Statement,DotNetNuke.Services.Installer.Writers,PackageWriterBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\PackageWriterBase.cs,ParseProjectFile,The length of the statement  "		if (!(fileName.ToLowerInvariant ().StartsWith ("system") || fileName.ToLowerInvariant ().StartsWith ("microsoft") || fileName.ToLowerInvariant () == "dotnetnuke" || fileName.ToLowerInvariant () == "dotnetnuke.webutility" || fileName.ToLowerInvariant () == "dotnetnuke.webcontrols")) { " is 284.
Long Statement,DotNetNuke.Services.Installer.Writers,PackageWriterBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\PackageWriterBase.cs,AddFile,The length of the statement  "	if ((file.Type == InstallFileType.CleanUp || file.Type == InstallFileType.Script) && FileVersionMatchRegex.IsMatch (file.Name)) { " is 129.
Long Statement,DotNetNuke.Services.Installer.Writers,PackageWriterBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\PackageWriterBase.cs,WriteManifest,The length of the statement  "	using (XmlWriter writer = XmlWriter.Create (Path.Combine (Globals.ApplicationMapPath' Path.Combine (BasePath' manifestName))' XmlUtils.GetXmlWriterSettings (ConformanceLevel.Fragment))) { " is 187.
Long Statement,DotNetNuke.Services.Installer.Writers,SkinControlPackageWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\SkinControlPackageWriter.cs,ReadLegacyManifest,The length of the statement  "			SkinControl.ControlSrc = Path.Combine (Path.Combine ("DesktopModules"' Package.Name.ToLower ())' Util.ReadElement (controlNav' "src")).Replace ("\\"' "/"); " is 155.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMailInternal,The length of the statement  "		if (smtpUsername.Contains ("@") && senderAddress == Host.HostEmail && !senderAddress.Equals (smtpUsername' StringComparison.InvariantCultureIgnoreCase)) { " is 154.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMailInternal,The length of the statement  "		mailMessage.Sender = new MailAddress (smtpUsername' Host.SMTPPortalEnabled ? PortalSettings.Current.PortalName : Host.HostTitle); " is 129.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendEmail,The length of the statement  "	if (string.IsNullOrEmpty (Host.SMTPServer) || string.IsNullOrEmpty (fromAddress) || string.IsNullOrEmpty (senderAddress) || string.IsNullOrEmpty (toAddress)) { " is 159.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendEmail,The length of the statement  "		SendMailInternal (emailMessage' subject' body' MailPriority.Normal' HtmlUtils.IsHtml (body) ? MailFormat.Html : MailFormat.Text' Encoding.UTF8' new List<Attachment> ()' Host.SMTPServer' Host.SMTPAuthentication' Host.SMTPUsername' Host.SMTPPassword' Host.EnableSMTPSSL); " is 269.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendEmail,The length of the statement  "		return SendMailInternal (emailMessage' subject' body' MailPriority.Normal' HtmlUtils.IsHtml (body) ? MailFormat.Html : MailFormat.Text' Encoding.UTF8' attachments' Host.SMTPServer' Host.SMTPAuthentication' Host.SMTPUsername' Host.SMTPPassword' Host.EnableSMTPSSL); " is 264.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The length of the statement  "				HttpContext.Current.Server.UrlEncode (user.GetProperty ("verificationcode"' String.Empty' null' user' Scope.SystemMessages' ref propertyNotFound)) " is 146.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The length of the statement  "	subject = Localize.GetSystemMessage (locale' settings' subject' user' Localize.GlobalResourceFile' custom' ""' settings.AdministratorId); " is 137.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The length of the statement  "	body = Localize.GetSystemMessage (locale' settings' body' user' Localize.GlobalResourceFile' custom' ""' settings.AdministratorId); " is 131.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The length of the statement  "	var fromUser = (UserController.GetUserByEmail (settings.PortalId' settings.Email) != null) ? String.Format ("{0} < {1} >"' UserController.GetUserByEmail (settings.PortalId' settings.Email).DisplayName' settings.Email) : settings.Email; " is 235.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The length of the statement  "	return SendMail (mailFrom' mailTo' ""' bcc' MailPriority.Normal' subject' bodyFormat' Encoding.UTF8' body' attachment' smtpServer' smtpAuthentication' smtpUsername' smtpPassword); " is 179.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The length of the statement  "	return SendMail (mailFrom' mailTo' cc' bcc' priority' subject' bodyFormat' bodyEncoding' body' attachment' smtpServer' smtpAuthentication' smtpUsername' smtpPassword' Host.EnableSMTPSSL); " is 187.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The length of the statement  "	return SendMail (mailFrom' mailTo' cc' bcc' mailFrom' priority' subject' bodyFormat' bodyEncoding' body' attachment.Split ('|')' smtpServer' smtpAuthentication' smtpUsername' smtpPassword' smtpEnableSSL); " is 204.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The length of the statement  "	return SendMail (mailFrom' mailTo' cc' bcc' mailFrom' priority' subject' bodyFormat' bodyEncoding' body' attachments' smtpServer' smtpAuthentication' smtpUsername' smtpPassword' smtpEnableSSL); " is 193.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The length of the statement  "	return SendMail (mailFrom' mailTo' cc' bcc' replyTo' priority' subject' bodyFormat' bodyEncoding' body' attachmentList' smtpServer' smtpAuthentication' smtpUsername' smtpPassword' smtpEnableSSL); " is 195.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The length of the statement  "	return SendMail (mailFrom' string.Empty' mailTo' cc' bcc' replyTo' priority' subject' bodyFormat' bodyEncoding' body' attachments' smtpServer' smtpAuthentication' smtpUsername' smtpPassword' smtpEnableSSL); " is 206.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The length of the statement  "			From = new MailAddress (mailFrom' UserController.GetUserByEmail (PortalSettings.Current.PortalId' mailFrom).DisplayName) " is 120.
Long Statement,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The length of the statement  "		return SendMailInternal (mailMessage' subject' body' priority' bodyFormat' bodyEncoding' attachments' smtpServer' smtpAuthentication' smtpUsername' smtpPassword' smtpEnableSSL); " is 177.
Long Statement,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,Initialize,The length of the statement  "	_confirmBodyHTML = Localization.Localization.GetString ("EMAIL_BulkMailConf_Html_Body"' Localization.Localization.GlobalResourceFile' _strSenderLanguage); " is 154.
Long Statement,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,Initialize,The length of the statement  "	_confirmBodyText = Localization.Localization.GetString ("EMAIL_BulkMailConf_Text_Body"' Localization.Localization.GlobalResourceFile' _strSenderLanguage); " is 154.
Long Statement,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,Initialize,The length of the statement  "	_confirmSubject = Localization.Localization.GetString ("EMAIL_BulkMailConf_Subject"' Localization.Localization.GlobalResourceFile' _strSenderLanguage); " is 151.
Long Statement,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,Initialize,The length of the statement  "	_noError = Localization.Localization.GetString ("NoErrorsSending"' Localization.Localization.GlobalResourceFile' _strSenderLanguage); " is 133.
Long Statement,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendConfirmationMail,The length of the statement  "	string body = _tokenReplace.ReplaceEnvironmentTokens (BodyFormat == MailFormat.Html ? _confirmBodyHTML : _confirmBodyText' parameters' "Custom"); " is 145.
Long Statement,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,ConditionallyAddUser,The length of the statement  "	if (((user.UserID <= 0 || user.Membership.Approved) && user.Email != string.Empty) && MatchLanguageFilter (user.Profile.PreferredLocale)) { " is 139.
Long Statement,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,Recipients,The length of the statement  "			if ((userRole.EffectiveDate <= DateTime.Now || Null.IsNull (userRole.EffectiveDate)) && (userRole.ExpiryDate >= DateTime.Now || Null.IsNull (userRole.ExpiryDate))) { " is 165.
Long Statement,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,The length of the statement  "			body = "<html><head><base href='http://" + host + "'><title>" + Subject + "</title></head><body>" + body + "</body></html>"; " is 124.
Long Statement,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,The length of the statement  "		bool replaceTokens = !SuppressTokenReplace && (_tokenReplace.ContainsTokens (Subject) || _tokenReplace.ContainsTokens (_body)); " is 127.
Long Statement,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,The length of the statement  "				string mailError = Mail.SendMail (_sendingUser.Email' recipient' ""' ""' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL); " is 246.
Long Statement,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,The length of the statement  "				string mailError = Mail.SendMail (_sendingUser.Email' _sendingUser.Email' ""' distributionList.ToString (0' distributionList.Length - 2)' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL); " is 311.
Long Statement,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,The length of the statement  "		SendConfirmationMail (recipients' messagesSent' errors' subject' startedAt' mailErrors.ToString ()' mailRecipients.ToString ()); " is 128.
Long Statement,DotNetNuke.Services.Messaging.Data,MessagingDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Messaging\Data\MessagingDataService.cs,SaveMessage,The length of the statement  "	return provider.ExecuteScalar<long> ("Messaging_Save_Message"' objMessaging.PortalID' objMessaging.FromUserID' objMessaging.ToUserID' objMessaging.ToRoleID' (int)objMessaging.Status' objMessaging.Subject' objMessaging.Body' objMessaging.MessageDate' objMessaging.Conversation' objMessaging.ReplyTo' objMessaging.AllowReply' objMessaging.SkipInbox); " is 348.
Long Statement,DotNetNuke.Services.Messaging.Data,MessagingDataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Messaging\Data\MessagingDataService.cs,UpdateMessage,The length of the statement  "	provider.ExecuteNonQuery ("Messaging_UpdateMessage"' message.MessageID' message.ToUserID' message.ToRoleID' (int)message.Status' message.Subject' message.Body' message.MessageDate' message.ReplyTo' message.AllowReply' message.SkipInbox); " is 237.
Long Statement,DotNetNuke.Services.Messaging.Scheduler,MessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Messaging\Scheduler\MessagingScheduler.cs,DoWork,The length of the statement  "			ScheduleHistoryItem.AddLogNote (string.Format ("Message Scheduler '{0}' sent a total of {1} message(s)"' _schedulerInstance' _messagesSent)); " is 141.
Long Statement,DotNetNuke.Services.Personalization,Personalization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Personalization\Personalization.cs,GetSecureProfile,The length of the statement  "		return ps.DecryptString (personalization.Profile [namingContainer + ":" + key].ToString ()' Config.GetDecryptionkey ()); " is 120.
Long Statement,DotNetNuke.Services.Personalization,Personalization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Personalization\Personalization.cs,SetSecureProfile,The length of the statement  "		personalization.Profile [namingContainer + ":" + key] = ps.EncryptString (value.ToString ()' Config.GetDecryptionkey ()); " is 121.
Long Statement,DotNetNuke.Services.Personalization,PersonalizationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Personalization\PersonalizationController.cs,LoadProfile,The length of the statement  "		profileData = CBO.GetCachedObject<string> (new CacheItemArgs (cacheKey' DataCache.UserPersonalizationCacheTimeout' DataCache.UserPersonalizationCachePriority' portalId' userId)' GetCachedUserPersonalizationCallback); " is 216.
Long Statement,DotNetNuke.Services.Personalization,PersonalizationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Personalization\PersonalizationController.cs,LoadProfile,The length of the statement  "	personalization.Profile = string.IsNullOrEmpty (profileData) ? new Hashtable () : Globals.DeserializeHashTableXml (profileData); " is 128.
Long Statement,DotNetNuke.Services.Personalization,PersonalizationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Personalization\PersonalizationController.cs,SaveProfile,The length of the statement  "			CBO.GetCachedObject<string> (new CacheItemArgs (cacheKey' DataCache.UserPersonalizationCacheTimeout' DataCache.UserPersonalizationCachePriority)' _ => profileData); " is 164.
Long Statement,DotNetNuke.Services.Syndication,RssHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Syndication\RssHandler.cs,PopulateChannel,The length of the statement  "	Channel ["copyright"] = !string.IsNullOrEmpty (Settings.FooterText) ? Settings.FooterText.Replace ("[year]"' DateTime.Now.Year.ToString ()) : string.Empty; " is 155.
Long Statement,DotNetNuke.Services.Syndication,RssHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Syndication\RssHandler.cs,PopulateChannel,The length of the statement  "							if (Convert.ToDateTime (objModule.StartDate == Null.NullDate ? DateTime.MinValue : objModule.StartDate) < DateTime.Now && Convert.ToDateTime (objModule.EndDate == Null.NullDate ? DateTime.MaxValue : objModule.EndDate) > DateTime.Now) { " is 235.
Long Statement,DotNetNuke.Services.Upgrade.Internals.Steps,ActivateLicenseStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\ActivateLicenseStep.cs,Execute,The length of the statement  "	if (licenseConfig != null && (!string.IsNullOrEmpty (licenseConfig.AccountEmail) && !string.IsNullOrEmpty (licenseConfig.InvoiceNumber) && !string.IsNullOrEmpty (licenseConfig.LicenseType) && !string.IsNullOrEmpty (licenseConfig.WebServer))) { " is 243.
Long Statement,DotNetNuke.Services.Upgrade.Internals.Steps,ActivateLicenseStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\ActivateLicenseStep.cs,Execute,The length of the statement  "				Errors.Add (Localization.Localization.GetString ("LicenseActivation"' LocalInstallResourceFile) + ": " + activationResult); " is 123.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,SynchConnectionStringStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\SynchConnectionStringStep.cs,Execute,The length of the statement  "		dbowner = (string.IsNullOrEmpty (GetUpgradeConnectionStringUserID ())) ? connectionConfig.User + "." : GetUpgradeConnectionStringUserID (); " is 139.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,SynchConnectionStringStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\SynchConnectionStringStep.cs,Execute,The length of the statement  "	if (Config.GetDataBaseOwner ().ToLower () != dbowner.ToLower () || (Config.GetObjectQualifer ().ToLower () != connectionConfig.Qualifier.ToLower ())) { " is 151.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,SynchConnectionStringStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\SynchConnectionStringStep.cs,Execute,The length of the statement  "	if (!string.IsNullOrEmpty (connectionConfig.UpgradeConnectionString) && Config.GetUpgradeConnectionString ().ToLower () != connectionConfig.UpgradeConnectionString.ToLower ()) { " is 177.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,SynchConnectionStringStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\SynchConnectionStringStep.cs,GetUpgradeConnectionStringUserID,The length of the statement  "	if (connection.ToLower ().Contains ("user id") || connection.ToLower ().Contains ("uid") || connection.ToLower ().Contains ("user")) { " is 134.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,InstallDatabaseStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InstallDatabaseStep.cs,Execute,The length of the statement  "	//Step 1 - Install Base Database. Only when it's not already installed. Globals.DataBaseVersion is null when SPs are not present " is 128.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,InstallSiteStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InstallSiteStep.cs,CreateSite,The length of the statement  "		domain = Globals.GetDomainName (HttpContext.Current.Request' true).ToLowerInvariant ().Replace ("/install/launchautoinstall"' "").Replace ("/install"' "").Replace ("/runinstall"' ""); " is 183.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,InstallSiteStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InstallSiteStep.cs,CreateSite,The length of the statement  "		userInfo = Upgrade.CreateUserInfo (portal.AdminFirstName' portal.AdminLastName' portal.AdminUserName' portal.AdminPassword' email); " is 131.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,InstallSiteStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InstallSiteStep.cs,CreateSite,The length of the statement  "		userInfo = Upgrade.CreateUserInfo (installConfig.SuperUser.FirstName' installConfig.SuperUser.LastName' installConfig.SuperUser.UserName' installConfig.SuperUser.Password' installConfig.SuperUser.Email); " is 203.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,InstallSiteStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InstallSiteStep.cs,CreateSite,The length of the statement  "	var portalId = PortalController.Instance.CreatePortal (portal.PortalName' userInfo' portal.Description' portal.Keywords' template' portal.HomeDirectory' portalAlias' serverPath' serverPath + childPath' portal.IsChild); " is 218.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,InstallSiteStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InstallSiteStep.cs,CreateSite,The length of the statement  "	UserController.UserLogin (portalId' userInfo.Username' installConfig.SuperUser.Password' ""' ""' ""' ref loginStatus' false); " is 125.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,InstallSuperUserStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InstallSuperUserStep.cs,Execute,The length of the statement  "	Details = Localization.Localization.GetString ("CreatingSuperUser"' LocalInstallResourceFile) + installConfig.SuperUser.UserName; " is 129.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,InstallExtensionsStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InstallExtensionsStep.cs,Execute,The length of the statement  "		var message = string.Format (Localization.Localization.GetString ("InstallingExtension"' LocalInstallResourceFile)' packageType' Path.GetFileName (file)); " is 154.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,FilePermissionCheckStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\FilePermissionCheckStep.cs,Execute,The length of the statement  "	Details = Localization.Localization.GetString ("FolderCreateCheck"' LocalInstallResourceFile) + Localization.Localization.GetString ("FileCreateCheck"' LocalInstallResourceFile) + Localization.Localization.GetString ("FileDeleteCheck"' LocalInstallResourceFile) + Localization.Localization.GetString ("FolderDeleteCheck"' LocalInstallResourceFile); " is 348.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,UpdateLanguagePackStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\UpdateLanguagePackStep.cs,Execute,The length of the statement  "			//need apply the Licensing module after packages installed' so that we can know whats the edition of install instance. CE/PE/EE " is 127.
Long Statement,DotNetNuke.Services.Upgrade.InternalController.Steps,UpdateLanguagePackStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\UpdateLanguagePackStep.cs,Execute,The length of the statement  "			//we shouldn't break the install process when LP download failed' for admin user can install the LP after website created. " is 122.
Long Statement,DotNetNuke.UI.Containers,ActionCommandButton,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionCommandButton.cs,OnPreRender,The length of the statement  "				ImageUrl = ModuleControl.ModuleContext.Configuration.ContainerPath.Substring (0' ModuleControl.ModuleContext.Configuration.ContainerPath.LastIndexOf ("/") + 1) + ImageUrl; " is 171.
Long Statement,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,Delete,The length of the statement  "				EventLogController.Instance.AddLog (instance' PortalSettings' user.UserID' ""' EventLogController.EventLogType.MODULE_DELETED); " is 127.
Long Statement,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,Delete,The length of the statement  "	EventLogController.Instance.AddLog (module' PortalSettings' user.UserID' ""' EventLogController.EventLogType.MODULE_SENT_TO_RECYCLE_BIN); " is 137.
Long Statement,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,Localize,The length of the statement  "		ModuleController.Instance.LocalizeModule (sourceModule' LocaleController.Instance.GetCurrentLocale (ModuleContext.PortalId)); " is 125.
Long Statement,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,MoveUpDown,The length of the statement  "		ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' ModuleContext.Configuration.ModuleOrder - 3' Command.CommandArgument); " is 160.
Long Statement,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,MoveUpDown,The length of the statement  "		ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' ModuleContext.Configuration.ModuleOrder + 3' Command.CommandArgument); " is 160.
Long Statement,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,MoveUpDown,The length of the statement  "		ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' (ModuleContext.Configuration.PaneModuleCount * 2) + 1' Command.CommandArgument); " is 170.
Long Statement,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,IsVisible,The length of the statement  "	if (action.Visible && ModulePermissionController.HasModuleAccess (action.Secure' Null.NullString' ModuleContext.Configuration)) { " is 129.
Long Statement,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,IsVisible,The length of the statement  "		if ((ModuleContext.PortalSettings.UserMode == PortalSettings.Mode.Edit) || (action.Secure == SecurityAccessLevel.Anonymous || action.Secure == SecurityAccessLevel.View)) { " is 171.
Long Statement,DotNetNuke.UI.Containers,ActionsMenu,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionsMenu.cs,ProcessNodes,The length of the statement  "		objParent.JSFunction = string.Format ("if({0}){{{1}}};"' objParent.JSFunction' Page.ClientScript.GetPostBackEventReference (ProviderControl.NavigationControl' objParent.ID)); " is 174.
Long Statement,DotNetNuke.UI.Containers,Container,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\Container.cs,AddAdministratorOnlyHighlighting,The length of the statement  "	ContentPane.Controls.Add (new LiteralControl (string.Format ("<div class=\"dnnFormMessage dnnFormInfo dnnFormInfoAdminErrMssg\">{0}</div>"' message))); " is 151.
Long Statement,DotNetNuke.UI.Containers,Container,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\Container.cs,ProcessContentPane,The length of the statement  "	string viewRoles = ModuleConfiguration.InheritViewPermissions ? TabPermissionController.GetTabPermissions (ModuleConfiguration.TabID' ModuleConfiguration.PortalID).ToString ("VIEW") : ModuleConfiguration.ModulePermissions.ToString ("VIEW"); " is 240.
Long Statement,DotNetNuke.UI.Containers,Container,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\Container.cs,ProcessContentPane,The length of the statement  "	string pageEditRoles = TabPermissionController.GetTabPermissions (ModuleConfiguration.TabID' ModuleConfiguration.PortalID).ToString ("EDIT"); " is 141.
Long Statement,DotNetNuke.UI.Containers,Container,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\Container.cs,ProcessContentPane,The length of the statement  "	if (viewRoles == PortalSettings.AdministratorRoleName.ToLowerInvariant () && (moduleEditRoles == PortalSettings.AdministratorRoleName.ToLowerInvariant () || String.IsNullOrEmpty (moduleEditRoles)) && pageEditRoles == PortalSettings.AdministratorRoleName.ToLowerInvariant ()) { " is 276.
Long Statement,DotNetNuke.UI.Containers,Container,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\Container.cs,ProcessModule,The length of the statement  "		if (InjectActionMenu && !ModuleHost.IsViewMode (ModuleConfiguration' PortalSettings) && Request.QueryString ["dnnprintmode"] != "true") { " is 137.
Long Statement,DotNetNuke.UI.Containers,Container,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\Container.cs,ProcessStylesheets,The length of the statement  "	ClientResourceManager.RegisterStyleSheet (Page' ContainerSrc.Replace (".ascx"' ".css")' FileOrder.Css.SpecificContainerCss); " is 124.
Long Statement,DotNetNuke.UI.Containers,Container,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\Container.cs,SetAlignment,The length of the statement  "			ContentPane.Attributes ["class"] = ContentPane.Attributes ["class"] + " DNNAlign" + ModuleConfiguration.Alignment.ToLower (); " is 125.
Long Statement,DotNetNuke.UI.Containers,Container,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\Container.cs,InvokeContainerEvents,The length of the statement  "	SharedList<ContainerEventListener> list = ((NaiveLockingList<ContainerEventListener>)DotNetNukeContext.Current.ContainerEventListeners).SharedList; " is 147.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,IsModuleAdminInternal,The length of the statement  "			bool blnHasModuleEditPermissions = ModulePermissionController.HasModuleAccess (SecurityAccessLevel.Edit' Null.NullString' objModule); " is 133.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,IsModuleAdminInternal,The length of the statement  "	return PortalController.Instance.GetCurrentPortalSettings ().ControlPanelSecurity == PortalSettings.ControlPanelPermission.ModuleEditor && _IsModuleAdmin; " is 154.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,IsPageAdminInternal,The length of the statement  "	if (TabPermissionController.CanAddContentToPage () || TabPermissionController.CanAddPage () || TabPermissionController.CanAdminPage () || TabPermissionController.CanCopyPage () || TabPermissionController.CanDeletePage () || TabPermissionController.CanExportPage () || TabPermissionController.CanImportPage () || TabPermissionController.CanManagePage ()) { " is 355.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddExistingModule,The length of the statement  "		EventLogController.Instance.AddLog (objClone' PortalSettings' UserId' ""' EventLogController.EventLogType.MODULE_CREATED); " is 122.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,The length of the statement  "		if (!DesktopModuleController.GetDesktopModules (PortalSettings.PortalId).TryGetValue (desktopModuleId' out desktopModule)) { " is 124.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,The length of the statement  "	foreach (ModuleDefinitionInfo objModuleDefinition in ModuleDefinitionController.GetModuleDefinitionsByDesktopModuleID (desktopModuleId).Values) { " is 145.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,The length of the statement  "			if (PortalSettings.Current.DefaultModuleId > Null.NullInteger && PortalSettings.Current.DefaultTabId > Null.NullInteger) { " is 122.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,The length of the statement  "				ModuleInfo defaultModule = ModuleController.Instance.GetModule (PortalSettings.Current.DefaultModuleId' PortalSettings.Current.DefaultTabId' true); " is 147.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,The length of the statement  "		ArrayList arrSystemModuleViewPermissions = objPermissionController.GetPermissionByCodeAndKey ("SYSTEM_MODULE_DEFINITION"' "VIEW"); " is 130.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,The length of the statement  "			ArrayList arrSystemModulePermissions = objPermissionController.GetPermissionByCodeAndKey ("SYSTEM_MODULE_DEFINITION"' objTabPermission.PermissionKey); " is 150.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,The length of the statement  "				if (objSystemModulePermission.PermissionKey == "VIEW" && permissionType == ViewPermissionType.Edit && objTabPermission.PermissionKey != "EDIT") { " is 145.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,The length of the statement  "				ModulePermissionInfo objModulePermission = AddModulePermission (objModule' objSystemModulePermission' objTabPermission.RoleID' objTabPermission.UserID' objTabPermission.AllowAccess); " is 182.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,The length of the statement  "					ModulePermissionInfo objModuleViewperm = AddModulePermission (objModule' (PermissionInfo)arrSystemModuleViewPermissions [0]' objModulePermission.RoleID' objModulePermission.UserID' true); " is 187.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,The length of the statement  "					AddModulePermission (objModule' objCustomModulePermission' objTabPermission.RoleID' objTabPermission.UserID' objTabPermission.AllowAccess); " is 139.
Long Statement,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,OnInit,The length of the statement  "	if (this.Page.Items.Contains (typeof(ControlPanelBase)) && this.Page.Items [typeof(ControlPanelBase)] is ControlPanelBase) { " is 124.
Long Statement,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,AddChildActions,The length of the statement  "			if (action.Visible && (action.Secure != SecurityAccessLevel.Anonymous || (!ModuleHost.IsViewMode (actionControl.ModuleControl.ModuleContext.Configuration' PortalSettings.Current)) && ModulePermissionController.HasModuleAccess (action.Secure' Null.NullString' actionControl.ModuleControl.ModuleContext.Configuration))) { " is 319.
Long Statement,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,AddChildActions,The length of the statement  "					if (string.IsNullOrEmpty (action.ClientScript) && string.IsNullOrEmpty (action.Url) && string.IsNullOrEmpty (action.CommandArgument)) { " is 135.
Long Statement,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,AddNode,The length of the statement  "		if (objTab.TabSettings ["LinkNewWindow"] != null && Boolean.TryParse ((string)objTab.TabSettings ["LinkNewWindow"]' out newWindow) && newWindow) { " is 146.
Long Statement,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,IsTabPending,The length of the statement  "		//Why is the check for POD required?  Well to allow for functionality like RootOnly requests.  We do not want any children " is 122.
Long Statement,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,IsTabPending,The length of the statement  "		//in tree above say we our breadcrumb is (A' B' B-2) we want our tree containing A' B' B-2 AND B-1 AND C since A and B are expanded " is 131.
Long Statement,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,ProcessTab,The length of the statement  "	bool showHidden = (intNavNodeOptions & (int)NavNodeOptions.IncludeHiddenNodes) == (int)NavNodeOptions.IncludeHiddenNodes; " is 121.
Long Statement,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,ProcessTab,The length of the statement  "	if (CanShowTab (objTab' TabPermissionController.CanAdminPage ()' true' showHidden))//based off of tab properties' is it shown " is 125.
Long Statement,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,ProcessTab,The length of the statement  "		} else if (((intNavNodeOptions & (int)NavNodeOptions.IncludeSiblings) != 0) && IsTabSibling (objTab' intStartTabId' objTabLookup)) { " is 132.
Long Statement,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,ProcessTab,The length of the statement  "				if (((intNavNodeOptions & (int)NavNodeOptions.IncludeSiblings) != 0) || IsTabSibling (objTab' intStartTabId' objTabLookup) == false) { " is 134.
Long Statement,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,CanShowTab,The length of the statement  "	return ((tab.IsVisible || showHidden) && tab.HasAVisibleVersion && !tab.IsDeleted && (!tab.DisableLink || showDisabled) && (((tab.StartDate < DateTime.Now || tab.StartDate == Null.NullDate) && (tab.EndDate > DateTime.Now || tab.EndDate == Null.NullDate)) || isAdminMode) && TabPermissionController.CanNavigateToPage (tab)); " is 323.
Long Statement,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,GetNavigationNodes,The length of the statement  "	//--- cache breadcrumbs in hashtable so we can easily set flag on node denoting it as a breadcrumb node (without looping multiple times) --- " is 140.
Long Statement,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,GetNavigationNodes,The length of the statement  "		ProcessTab (objRootNode' objTab' objTabLookup' objBreadCrumbs' intLastBreadCrumbId' eToolTips' intStartTabId' intDepth' intNavNodeOptions); " is 139.
Long Statement,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,GetNavigationNodes,The length of the statement  "		ProcessTab (objRootNode' objTab' objTabLookup' objBreadCrumbs' intLastBreadCrumbId' eToolTips' intStartTabId' intDepth' intNavNodeOptions); " is 139.
Long Statement,DotNetNuke.UI,UIUtilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UIUtilities.cs,GetSlaveModule,The length of the statement  "		var moduleControl = ModuleControlController.GetModuleControlByControlKey (key' slaveModule.ModuleDefID) ?? ModuleControlController.GetModuleControlByControlKey (key' Null.NullInteger); " is 184.
Long Statement,DotNetNuke.UI,UIUtilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UIUtilities.cs,IsLegacyUI,The length of the statement  "		isLegacyUi = !(settings.EnablePopUps && !request.Browser.Crawler && request.Browser.EcmaScriptVersion >= new Version (1' 0)); " is 125.
Long Statement,DotNetNuke.UI,UIUtilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UIUtilities.cs,IsLegacyUI,The length of the statement  "				var moduleControl = ModuleControlController.GetModuleControlByControlKey (key' slaveModule.ModuleDefID) ?? ModuleControlController.GetModuleControlByControlKey (key' Null.NullInteger); " is 184.
Long Statement,DotNetNuke.UI,UIUtilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UIUtilities.cs,GetLocalResourceFile,The length of the statement  "			resourceFileName = string.Format ("{0}/{1}/{2}.ascx.resx"' ctrl.TemplateSourceDirectory' Localization.LocalResourceDirectory' ctrl.GetType ().BaseType.Name); " is 157.
Long Statement,DotNetNuke.UI,UIUtilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UIUtilities.cs,GetLocalResourceFile,The length of the statement  "			resourceFileName = string.Format ("{0}/{1}/{2}.aspx.resx"' ctrl.TemplateSourceDirectory' Localization.LocalResourceDirectory' ctrl.GetType ().BaseType.Name); " is 157.
Long Statement,DotNetNuke.UI.Internals,FavIcon,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\FavIcon.cs,Update,The length of the statement  "	PortalController.UpdatePortalSetting (_portalId' SettingName' fileId != Null.NullInteger ? string.Format ("FileID={0}"' fileId) : ""' /*clearCache*/true); " is 154.
Long Statement,DotNetNuke.UI.Modules,ModuleControlFactory,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleControlFactory.cs,CreateModuleControl,The length of the statement  "		moduleControl.LocalResourceFile = String.Format ("~/DesktopModules/MVC/{0}/{1}/{2}.resx"' moduleConfiguration.DesktopModule.FolderName' Localization.LocalResourceDirectory' segments [0]); " is 187.
Long Statement,DotNetNuke.UI.Modules,ModuleControlFactory,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleControlFactory.cs,CreateModuleControl,The length of the statement  "		moduleControl.LocalResourceFile = moduleConfiguration.ModuleControl.ControlSrc.Replace (Path.GetFileName (moduleConfiguration.ModuleControl.ControlSrc)' "") + Localization.LocalResourceDirectory + "/" + Path.GetFileName (moduleConfiguration.ModuleControl.ControlSrc); " is 267.
Long Statement,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,InjectModuleContent,The length of the statement  "			Text = !string.IsNullOrEmpty (_moduleConfiguration.WebSliceTitle) ? _moduleConfiguration.WebSliceTitle : _moduleConfiguration.ModuleTitle " is 137.
Long Statement,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,LoadModuleControl,The length of the statement  "			//if the module supports caching and caching is enabled for the instance and the user does not have Edit rights or is currently in View mode " is 140.
Long Statement,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,TryLoadCached,The length of the statement  "		byte[] cachedBytes = ModuleCachingProvider.Instance (_moduleConfiguration.GetEffectiveCacheMethod ()).GetModule (_moduleConfiguration.TabModuleID' cacheKey); " is 157.
Long Statement,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The length of the statement  "				JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2])); " is 131.
Long Statement,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,CreateChildControls,The length of the statement  "		//if module is dynamically loaded and AJAX is installed and the control supports partial rendering (defined in ModuleControls table ) " is 133.
Long Statement,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RenderContents,The length of the statement  "		if (SupportsCaching () && IsViewMode (_moduleConfiguration' PortalSettings) && !Globals.IsAdminControl () && !IsVersionRequest ()) { " is 132.
Long Statement,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RenderContents,The length of the statement  "				cache.SetModule (_moduleConfiguration.TabModuleID' cacheKey' new TimeSpan (0' 0' _moduleConfiguration.CacheTime)' moduleContent); " is 129.
Long Statement,DotNetNuke.UI.Modules,ModuleInjectionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInjectionManager.cs,GetFilters,The length of the statement  "			Logger.ErrorFormat ("Unable to create {0} while registering module injection filters.  {1}"' filterType.FullName' e.Message); " is 125.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddHelpActions,The length of the statement  "	if (!string.IsNullOrEmpty (Configuration.ModuleControl.HelpURL) && Host.EnableModuleOnLineHelp && PortalSettings.EnablePopUps) { " is 128.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddPrintAction,The length of the statement  "		Url = NavigateUrl (TabId' ""' false' "mid=" + ModuleId' "SkinSrc=" + Globals.QueryStringEncode ("[G]" + SkinController.RootSkin + "/" + Globals.glbHostSkinFolder + "/" + "No Skin")' "ContainerSrc=" + Globals.QueryStringEncode ("[G]" + SkinController.RootContainer + "/" + Globals.glbHostSkinFolder + "/" + "No Container")' "dnnprintmode=true")' " is 344.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddMenuMoveActions,The length of the statement  "	_moduleMoveActions = new ModuleAction (GetNextActionID ()' Localization.GetString (ModuleActionType.MoveRoot' Localization.GlobalResourceFile)' string.Empty' string.Empty' string.Empty' string.Empty' string.Empty' false); " is 221.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddMenuMoveActions,The length of the statement  "			_moduleMoveActions.Actions.Add (GetNextActionID ()' Localization.GetString (ModuleActionType.MoveTop' Localization.GlobalResourceFile)' ModuleActionType.MoveTop' Configuration.PaneName' "action_top.gif"' ""' false' SecurityAccessLevel.View' true' false); " is 254.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddMenuMoveActions,The length of the statement  "			_moduleMoveActions.Actions.Add (GetNextActionID ()' Localization.GetString (ModuleActionType.MoveUp' Localization.GlobalResourceFile)' ModuleActionType.MoveUp' Configuration.PaneName' "action_up.gif"' ""' false' SecurityAccessLevel.View' true' false); " is 251.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddMenuMoveActions,The length of the statement  "			_moduleMoveActions.Actions.Add (GetNextActionID ()' Localization.GetString (ModuleActionType.MoveDown' Localization.GlobalResourceFile)' ModuleActionType.MoveDown' Configuration.PaneName' "action_down.gif"' ""' false' SecurityAccessLevel.View' true' false); " is 257.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddMenuMoveActions,The length of the statement  "			_moduleMoveActions.Actions.Add (GetNextActionID ()' Localization.GetString (ModuleActionType.MoveBottom' Localization.GlobalResourceFile)' ModuleActionType.MoveBottom' Configuration.PaneName' "action_bottom.gif"' ""' false' SecurityAccessLevel.View' true' false); " is 263.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddMenuMoveActions,The length of the statement  "		if (!string.IsNullOrEmpty (pane) && Configuration != null && !Configuration.PaneName.Equals (pane' StringComparison.InvariantCultureIgnoreCase)) { " is 146.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddMenuMoveActions,The length of the statement  "			_moduleMoveActions.Actions.Add (GetNextActionID ()' Localization.GetString (ModuleActionType.MovePane' Localization.GlobalResourceFile) + " " + pane' ModuleActionType.MovePane' pane' "action_move.gif"' ""' false' SecurityAccessLevel.View' true' false); " is 252.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "	_moduleGenericActions = new ModuleAction (GetNextActionID ()' Localization.GetString ("ModuleGenericActions.Action"' Localization.GlobalResourceFile)' string.Empty' string.Empty' string.Empty); " is 193.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "		_moduleSpecificActions = new ModuleAction (GetNextActionID ()' Localization.GetString ("ModuleSpecificActions.Action"' Localization.GlobalResourceFile)' string.Empty' string.Empty' string.Empty); " is 195.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "	if (Configuration != null && (Configuration.IsShared && Configuration.IsShareableViewOnly) && TabPermissionController.CanAddContentToPage ()) { " is 143.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "		_moduleGenericActions.Actions.Add (GetNextActionID ()' Localization.GetString ("ModulePermissions.Action"' Localization.GlobalResourceFile)' "ModulePermissions"' ""' "action_settings.gif"' NavigateUrl (TabId' "ModulePermissions"' false' "ModuleId=" + ModuleId' "ReturnURL=" + FilterUrl (request))' false' SecurityAccessLevel.ViewPermissions' true' false); " is 355.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "		if (!Globals.IsAdminControl () && ModulePermissionController.HasModuleAccess (SecurityAccessLevel.Admin' "DELETE'MANAGE"' Configuration)) { " is 139.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "				_moduleGenericActions.Actions.Add (GetNextActionID ()' Localization.GetString (ModuleActionType.ModuleSettings' Localization.GlobalResourceFile)' ModuleActionType.ModuleSettings' ""' "action_settings.gif"' NavigateUrl (TabId' "Module"' false' "ModuleId=" + ModuleId' "ReturnURL=" + FilterUrl (request))' false' SecurityAccessLevel.Edit' true' false); " is 350.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "				_moduleGenericActions.Actions.Add (GetNextActionID ()' Localization.GetString (ModuleActionType.ExportModule' Localization.GlobalResourceFile)' ModuleActionType.ExportModule' ""' "action_export.gif"' NavigateUrl (PortalSettings.ActiveTab.TabID' "ExportModule"' false' "moduleid=" + ModuleId' "ReturnURL=" + FilterUrl (request))' ""' false' SecurityAccessLevel.View' true' false); " is 379.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "				_moduleGenericActions.Actions.Add (GetNextActionID ()' Localization.GetString (ModuleActionType.ImportModule' Localization.GlobalResourceFile)' ModuleActionType.ImportModule' ""' "action_import.gif"' NavigateUrl (PortalSettings.ActiveTab.TabID' "ImportModule"' false' "moduleid=" + ModuleId' "ReturnURL=" + FilterUrl (request))' ""' false' SecurityAccessLevel.View' true' false); " is 379.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "	if (ModulePermissionController.HasModulePermission (Configuration.ModulePermissions' permisisonList) && request.QueryString ["ctl"] != "Help" && !Globals.IsAdminControl ()) { " is 174.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "	if (ModulePermissionController.HasModuleAccess (SecurityAccessLevel.Host' "MANAGE"' Configuration) && !Globals.IsAdminControl ()) { " is 131.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "		_moduleGenericActions.Actions.Add (GetNextActionID ()' Localization.GetString (ModuleActionType.ViewSource' Localization.GlobalResourceFile)' ModuleActionType.ViewSource' ""' "action_source.gif"' NavigateUrl (TabId' "ViewSource"' false' "ModuleId=" + ModuleId' "ctlid=" + Configuration.ModuleControlId' "ReturnURL=" + FilterUrl (request))' false' SecurityAccessLevel.Host' true' false); " is 386.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "	if (!Globals.IsAdminControl () && ModulePermissionController.HasModuleAccess (SecurityAccessLevel.Admin' "DELETE'MANAGE"' Configuration)) { " is 139.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "			_moduleGenericActions.Actions.Add (GetNextActionID ()' Localization.GetString (ModuleActionType.DeleteModule' Localization.GlobalResourceFile)' ModuleActionType.DeleteModule' Configuration.ModuleID.ToString ()' "action_delete.gif"' ""' confirmText' false' SecurityAccessLevel.View' true' false); " is 295.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The length of the statement  "			_moduleGenericActions.Actions.Add (GetNextActionID ()' Localization.GetString (ModuleActionType.ClearCache' Localization.GlobalResourceFile)' ModuleActionType.ClearCache' Configuration.ModuleID.ToString ()' "action_refresh.gif"' ""' false' SecurityAccessLevel.View' true' false); " is 279.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,SupportShowInPopup,The length of the statement  "	return (isSecureConnection && url.StartsWith ("https://"' StringComparison.InvariantCultureIgnoreCase)) || (!isSecureConnection && url.StartsWith ("http://"' StringComparison.InvariantCultureIgnoreCase)); " is 204.
Long Statement,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,NavigateUrl,The length of the statement  "	var url = TestableGlobals.Instance.NavigateURL (tabID' isSuperTab' settings' controlKey' language' pageName' additionalParameters); " is 131.
Long Statement,DotNetNuke.UI.Modules,StandardModuleInjectionFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\StandardModuleInjectionFilter.cs,CanInjectModule,The length of the statement  "	return ModulePermissionController.CanViewModule (module) && module.IsDeleted == false && ((module.StartDate < DateTime.Now && module.EndDate > DateTime.Now) || Globals.IsLayoutMode () || Globals.IsEditMode ()); " is 210.
Long Statement,DotNetNuke.UI.Modules,ProfileModuleUserControlBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ProfileModuleUserControlBase.cs,GetRedirectUrl,The length of the statement  "		redirectUrl = TestableGlobals.Instance.GetPortalDomainName (PortalSettings.Current.PortalAlias.HTTPAlias' Request' true) + "/" + Globals.glbDefaultPage; " is 152.
Long Statement,DotNetNuke.UI.Modules,ProfileModuleUserControlBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ProfileModuleUserControlBase.cs,OnInit,The length of the statement  "	if (string.IsNullOrEmpty (Request.Params ["UserId"]) && (ModuleContext.PortalSettings.ActiveTab.TabID == ModuleContext.PortalSettings.UserTabId || ModuleContext.PortalSettings.ActiveTab.ParentId == ModuleContext.PortalSettings.UserTabId)) { " is 240.
Long Statement,DotNetNuke.UI.Modules,ProfileModuleUserControlBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ProfileModuleUserControlBase.cs,OnInit,The length of the statement  "			Response.Redirect (Request.IsAuthenticated ? Globals.NavigateURL (ModuleContext.PortalSettings.ActiveTab.TabID' ""' "UserId=" + ModuleContext.PortalSettings.UserId.ToString (CultureInfo.InvariantCulture)) : GetRedirectUrl ()' true); " is 232.
Long Statement,DotNetNuke.UI.Modules.Html5,Html5HostControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\Html5\Html5HostControl.cs,GetFileContent,The length of the statement  "	var cacheItemArgs = new CacheItemArgs (cacheKey' DataCache.SpaModulesHtmlFileTimeOut' DataCache.SpaModulesHtmlFileCachePriority) { " is 130.
Long Statement,DotNetNuke.UI.Modules.Html5,Html5HostControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\Html5\Html5HostControl.cs,FileExists,The length of the statement  "	return CBO.GetCachedObject<bool> (new CacheItemArgs (cacheKey' DataCache.SpaModulesHtmlFileTimeOut' DataCache.SpaModulesHtmlFileCachePriority)' c => File.Exists (Page.Server.MapPath (filepath))); " is 195.
Long Statement,DotNetNuke.UI.Modules.Html5,ModuleActionsPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\Html5\ModuleActionsPropertyAccess.cs,ProcessToken,The length of the statement  "	var title = (!String.IsNullOrEmpty (model.TitleKey) && !String.IsNullOrEmpty (model.LocalResourceFile)) ? Localization.GetString (model.TitleKey' model.LocalResourceFile) : model.Title; " is 185.
Long Statement,DotNetNuke.UI.Modules.Html5,ModuleActionsPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\Html5\ModuleActionsPropertyAccess.cs,ProcessToken,The length of the statement  "		moduleAction.Url = model.Script.ToLower ().StartsWith ("javascript:") ? model.Script : string.Format ("javascript:{0}"' model.Script); " is 134.
Long Statement,DotNetNuke.UI.Skins.Controls,LanguagePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\LanguageTokenReplace.cs,GetQsParams,The length of the statement  "	var rawQueryStringCollection = HttpUtility.ParseQueryString (new Uri (HttpContext.Current.Request.Url.Scheme + "://" + HttpContext.Current.Request.Url.Authority + HttpContext.Current.Request.RawUrl).Query); " is 206.
Long Statement,DotNetNuke.UI.Skins.Controls,LanguagePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\LanguageTokenReplace.cs,GetQsParams,The length of the statement  "					ModuleInfo localizedModule = ModuleController.Instance.GetModuleByCulture (moduleID' tabid' settings.PortalId' LocaleController.Instance.GetLocale (newLanguage)); " is 162.
Long Statement,DotNetNuke.UI.Skins.Controls,LanguagePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\LanguageTokenReplace.cs,GetQsParams,The length of the statement  "	if (!settings.ContentLocalizationEnabled && LocaleController.Instance.GetLocales (settings.PortalId).Count > 1 && !settings.EnableUrlLanguage) { " is 144.
Long Statement,DotNetNuke.UI.Skins.Controls,LanguagePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\LanguageTokenReplace.cs,NewUrl,The length of the statement  "		// Example: Accessing protected page /de-de/Page1 redirects to /de-DE/Login?returnurl=%2f%2fde-de%2fPage1 and changing language to en-us on the login page " is 154.
Long Statement,DotNetNuke.UI.Skins.Controls,LanguagePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\LanguageTokenReplace.cs,NewUrl,The length of the statement  "		// using the language links won't change the language in the returnurl parameter and the user will be redirected to the de-de version after logging in " is 150.
Long Statement,DotNetNuke.UI.Skins.Controls,LanguagePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\LanguageTokenReplace.cs,NewUrl,The length of the statement  "		// Assumption: Loosing the returnurl information is better than confusing the user by switching the language back after the login " is 129.
Long Statement,DotNetNuke.UI.Skins.Controls,LanguagePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\LanguageTokenReplace.cs,NewUrl,The length of the statement  "		var queryParams = HttpUtility.ParseQueryString (new Uri (string.Concat (HttpContext.Current.Request.Url.GetLeftPart (UriPartial.Authority)' HttpContext.Current.Request.RawUrl)).Query); " is 184.
Long Statement,DotNetNuke.UI.Skins.Controls,LanguagePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\LanguageTokenReplace.cs,NewUrl,The length of the statement  "	return objSecurity.InputFilter (TestableGlobals.Instance.NavigateURL (tabId' objPortal.ActiveTab.IsSuperTab' objPortal' HttpContext.Current.Request.QueryString ["ctl"]' newLanguage' GetQsParams (newLocale.Code' islocalized)) + rawQueryString' PortalSecurity.FilterFlag.NoScripting); " is 282.
Long Statement,DotNetNuke.UI.Skins.Controls,SkinsEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\SkinsEditControl.cs,RenderEditMode,The length of the statement  "			writer.AddAttribute (HtmlTextWriterAttribute.Href' Page.ClientScript.GetPostBackClientHyperlink (this' "Delete_" + kvp.Key' false)); " is 132.
Long Statement,DotNetNuke.UI.Skins.Controls,SkinsEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\SkinsEditControl.cs,RenderEditMode,The length of the statement  "			writer.AddAttribute (HtmlTextWriterAttribute.Onclick' "javascript:return confirm('" + ClientAPI.GetSafeJSString (Localization.GetString ("DeleteItem")) + "');"); " is 161.
Long Statement,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,LoadContainerByPath,The length of the statement  "	if (containerPath.ToLower ().IndexOf ("/skins/") != -1 || containerPath.ToLower ().IndexOf ("/skins\\") != -1 || containerPath.ToLower ().IndexOf ("\\skins\\") != -1 || containerPath.ToLower ().IndexOf ("\\skins/") != -1) { " is 223.
Long Statement,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,LoadContainerByPath,The length of the statement  "			_containerWrapperControl.Controls.Add (new ErrorContainer (PortalSettings' string.Format (Skin.CONTAINERLOAD_ERROR' containerPath)' lex).Container); " is 148.
Long Statement,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,LoadContainerFromPane,The length of the statement  "		containerSrc = "[" + PaneControl.Attributes ["ContainerType"] + "]" + SkinController.RootContainer + "/" + PaneControl.Attributes ["ContainerName"] + "/" + PaneControl.Attributes ["ContainerSrc"]; " is 196.
Long Statement,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,LoadContainerFromPane,The length of the statement  "		if (containerSrc.Contains ("/") && !(containerSrc.ToLower ().StartsWith ("[g]") || containerSrc.ToLower ().StartsWith ("[l]"))) { " is 129.
Long Statement,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,LoadContainerFromPane,The length of the statement  "			containerSrc = string.Format (SkinController.IsGlobalSkin (PortalSettings.ActiveTab.SkinSrc) ? "[G]containers/{0}" : "[L]containers/{0}"' containerSrc.TrimStart ('/')); " is 168.
Long Statement,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,LoadContainerFromQueryString,The length of the statement  "		string containerSrc = SkinController.FormatSkinSrc (Globals.QueryStringDecode (request.QueryString ["ContainerSrc"]) + ".ascx"' PortalSettings); " is 144.
Long Statement,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,LoadModuleContainer,The length of the statement  "		container = (LoadContainerFromQueryString (module' request) ?? LoadContainerFromCookie (request)) ?? LoadNoContainer (module); " is 126.
Long Statement,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,LoadModuleContainer,The length of the statement  "			if (masterModules.ContainsKey (module.ModuleID) && string.IsNullOrEmpty (masterModules [module.ModuleID].ContainerSrc)) { " is 121.
Long Statement,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,InjectModule,The length of the statement  "	_containerWrapperControl.Attributes ["class"] = String.Format (classFormatString' sanitizedModuleName' module.ModuleID); " is 120.
Long Statement,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,InjectModule,The length of the statement  "		if (!Globals.IsAdminControl () && (PortalSettings.InjectModuleHyperLink || PortalSettings.UserMode != PortalSettings.Mode.View)) { " is 130.
Long Statement,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,InjectModule,The length of the statement  "			//Assume that the title control is named dnnTitle.  If this becomes an issue we could loop through the controls looking for the title type of skin object " is 153.
Long Statement,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,InjectModule,The length of the statement  "		//Response.Redirect may called in module control's OnInit method' so it will cause ThreadAbortException' no need any action here. " is 129.
Long Statement,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,ProcessPane,The length of the statement  "				PaneControl.Attributes ["class"] = cssclass.Replace (CPaneOutline' "").Trim ().Replace ("  "' " ") + " " + CPaneOutline; " is 120.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,CheckExpired,The length of the statement  "		if (Convert.ToDateTime (PortalSettings.ExpiryDate) < DateTime.Now && !Globals.IsHostTab (PortalSettings.ActiveTab.TabID)) { " is 123.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,InjectControlPanel,The length of the statement  "	if (Request.QueryString ["dnnprintmode"] != "true" && !UrlUtils.InPopUp () && Request.QueryString ["hidecommandbar"] != "true") { " is 129.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,InjectControlPanel,The length of the statement  "		if (Host.AllowControlPanelToDetermineVisibility || (ControlPanelBase.IsPageAdminInternal () || ControlPanelBase.IsModuleAdminInternal ())) { " is 140.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,InvokeSkinEvents,The length of the statement  "	SharedList<SkinEventListener> list = ((NaiveLockingList<SkinEventListener>)DotNetNukeContext.Current.SkinEventListeners).SharedList; " is 132.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,LoadSkin,The length of the statement  "			skinError.Text = string.Format (Localization.GetString ("SkinLoadError"' Localization.GlobalResourceFile)' skinPath' page.Server.HtmlEncode (exc.Message)); " is 155.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,ProcessMasterModules,The length of the statement  "			if (TabVersionController.Instance.GetTabVersions (TabController.CurrentPage.TabID).All (tabVersion => tabVersion.Version != urlVersion)) { " is 138.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,ProcessMasterModules,The length of the statement  "			if ((PortalSettings.ActiveTab.StartDate < DateAndTime.Now && PortalSettings.ActiveTab.EndDate > DateAndTime.Now) || TabPermissionController.CanAdminPage () || Globals.IsLayoutMode ()) { " is 185.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,ProcessMasterModules,The length of the statement  "			AddPageMessage (this' ""' string.Format (Localization.GetString ("ContractExpired.Error")' PortalSettings.PortalName' Globals.GetMediumDate (PortalSettings.ExpiryDate.ToString (CultureInfo.InvariantCulture))' PortalSettings.Email)' ModuleMessage.ModuleMessageType.RedError); " is 274.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,OnInit,The length of the statement  "		AddPageMessage (this' Localization.GetString ("ModuleLoadWarning.Error")' string.Format (Localization.GetString ("ModuleLoadWarning.Text")' PortalSettings.Email)' ModuleMessage.ModuleMessageType.YellowWarning); " is 210.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,OnInit,The length of the statement  "			messageType = (ModuleMessage.ModuleMessageType)Enum.Parse (typeof(ModuleMessage.ModuleMessageType)' HttpContext.Current.Items [OnInitMessageType].ToString ()' true); " is 165.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,OnPreRender,The length of the statement  "		ClientResourceManager.RegisterStyleSheet (Page' "~/resources/shared/stylesheets/dnn.dragDrop.css"' FileOrder.Css.FeatureCss); " is 125.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,OnPreRender,The length of the statement  "		sb.AppendLine ("             draggingHintText: '" + Localization.GetSafeJSString ("DraggingHintText"' Localization.GlobalResourceFile) + "''"); " is 143.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,OnPreRender,The length of the statement  "		sb.AppendLine ("             dragHintText: '" + Localization.GetSafeJSString ("DragModuleHint"' Localization.GlobalResourceFile) + "''"); " is 137.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,OnPreRender,The length of the statement  "		sb.AppendLine ("             dropHintText: '" + Localization.GetSafeJSString ("DropModuleHint"' Localization.GlobalResourceFile) + "''"); " is 137.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,OnPreRender,The length of the statement  "		sb.AppendLine ("             dropTargetText: '" + Localization.GetSafeJSString ("DropModuleTarget"' Localization.GlobalResourceFile) + "'"); " is 140.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,GetPopUpSkin,The length of the statement  "	string skinSource = Globals.IsAdminSkin () ? SkinController.FormatSkinSrc (page.PortalSettings.DefaultAdminSkin' page.PortalSettings) : page.PortalSettings.ActiveTab.SkinSrc; " is 174.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,GetPopUpSkin,The length of the statement  "		skinSource = SkinController.FormatSkinSrc (SkinController.FormatSkinPath (skinSource) + "popUpSkin.ascx"' page.PortalSettings); " is 127.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,GetPopUpSkin,The length of the statement  "		if (File.Exists (HttpContext.Current.Server.MapPath (SkinController.FormatSkinSrc (skinSource' page.PortalSettings)))) { " is 120.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,GetSkin,The length of the statement  "		skinSource = SkinController.FormatSkinSrc (Globals.QueryStringDecode (page.Request.QueryString ["SkinSrc"]) + ".ascx"' page.PortalSettings); " is 140.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,GetSkin,The length of the statement  "		//skinSource = Globals.IsAdminSkin() ? SkinController.FormatSkinSrc(page.PortalSettings.DefaultAdminSkin' page.PortalSettings) : page.PortalSettings.ActiveTab.SkinSrc; " is 167.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,GetSkin,The length of the statement  "		skinSource = Globals.IsAdminSkin () ? PortalController.GetPortalSetting ("DefaultAdminSkin"' page.PortalSettings.PortalId' Host.DefaultPortalSkin' page.PortalSettings.CultureCode) : page.PortalSettings.ActiveTab.SkinSrc; " is 220.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,InjectModule,The length of the statement  "		if (PortalSettings.ActiveTab.TabID == PortalSettings.UserTabId || PortalSettings.ActiveTab.ParentId == PortalSettings.UserTabId) { " is 130.
Long Statement,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,InjectModule,The length of the statement  "		//Response.Redirect may called in module control's OnInit method' so it will cause ThreadAbortException' no need any action here. " is 129.
Long Statement,DotNetNuke.UI.Skins,SkinControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinControl.cs,OnLoad,The length of the statement  "		if (Request.QueryString ["pid"] != null && (Globals.IsHostTab (PortalSettings.ActiveTab.TabID) || UserController.Instance.GetCurrentUserInfo ().IsSuperUser)) { " is 159.
Long Statement,DotNetNuke.UI.Skins,SkinControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinControl.cs,cmdPreview_Click,The length of the statement  "		string strURL = Globals.ApplicationURL () + "&" + strType + "Src=" + Globals.QueryStringEncode (SkinSrc.Replace (".ascx"' "")); " is 127.
Long Statement,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,AddSkinFiles,The length of the statement  "		string key = (skinPrefix == PortalSystemSkinPrefix || skinPrefix == PortalSkinPrefix ? "Site: " : "Host: ") + FormatSkinName (folder' Path.GetFileNameWithoutExtension (skinFile)); " is 179.
Long Statement,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,AddSkinPackage,The length of the statement  "	EventLogController.Instance.AddLog (skinPackage' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.SKINPACKAGE_CREATED); " is 215.
Long Statement,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,AddSkinPackage,The length of the statement  "	return DataProvider.Instance ().AddSkinPackage (skinPackage.PackageID' skinPackage.PortalID' skinPackage.SkinName' skinPackage.SkinType' UserController.Instance.GetCurrentUserInfo ().UserID); " is 191.
Long Statement,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,CanDeleteSkin,The length of the statement  "	} else if (folderPath.IndexOf (PortalSettings.Current.HomeSystemDirectoryMapPath' StringComparison.InvariantCultureIgnoreCase) != -1) { " is 135.
Long Statement,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,CanDeleteSkin,The length of the statement  "		if (Host.DefaultAdminSkin.ToLowerInvariant ().StartsWith (skin) || Host.DefaultPortalSkin.ToLowerInvariant ().StartsWith (skin) || portalSettings.DefaultAdminSkin.ToLowerInvariant ().StartsWith (skin) || portalSettings.DefaultPortalSkin.ToLowerInvariant ().StartsWith (skin)) { " is 277.
Long Statement,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,CanDeleteSkin,The length of the statement  "		if (Host.DefaultAdminContainer.ToLowerInvariant ().StartsWith (skin) || Host.DefaultPortalContainer.ToLowerInvariant ().StartsWith (skin) || portalSettings.DefaultAdminContainer.ToLowerInvariant ().StartsWith (skin) || portalSettings.DefaultPortalContainer.ToLowerInvariant ().StartsWith (skin)) { " is 297.
Long Statement,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,DeleteSkinPackage,The length of the statement  "	EventLogController.Instance.AddLog (skinPackage' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.SKINPACKAGE_DELETED); " is 215.
Long Statement,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UpdateSkinPackage,The length of the statement  "	DataProvider.Instance ().UpdateSkinPackage (skinPackage.SkinPackageID' skinPackage.PackageID' skinPackage.PortalID' skinPackage.SkinName' skinPackage.SkinType' UserController.Instance.GetCurrentUserInfo ().UserID); " is 214.
Long Statement,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UpdateSkinPackage,The length of the statement  "	EventLogController.Instance.AddLog (skinPackage' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.SKINPACKAGE_UPDATED); " is 215.
Long Statement,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The length of the statement  "				strMessage += string.Format (FILE_RESTICTED' objZipEntry.Name' Host.AllowedExtensionWhitelist.ToStorageString ()' "'"' "' *.").Replace ("2"' "true"); " is 149.
Long Statement,DotNetNuke.UI.Skins,SkinDefaults,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinDefaults.cs,GetSkinDefaults,The length of the statement  "	return CBO.GetCachedObject<SkinDefaults> (new CacheItemArgs (string.Format (DataCache.SkinDefaultsCacheKey' DefaultType)' DataCache.SkinDefaultsCacheTimeOut' DataCache.SkinDefaultsCachePriority' DefaultType)' GetSkinDefaultsCallback); " is 234.
Long Statement,DotNetNuke.UI.Skins,SkinThumbNailControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinThumbNailControl.cs,AddDefaultSkin,The length of the statement  "	strDefault += "<img src=\"" + Globals.ApplicationPath.Replace ("\\"' "/") + "/images/spacer.gif\" width=\"140\" height=\"135\" border=\"0\">"; " is 142.
Long Statement,DotNetNuke.UI.Skins,SkinThumbNailControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinThumbNailControl.cs,AddSkin,The length of the statement  "		strImage += "<a href=\"" + CreateThumbnail (strFile.Replace (".ascx"' ".jpg")).Replace ("thumbnail_"' "") + "\" target=\"_blank\"><img src=\"" + CreateThumbnail (strFile.Replace (".ascx"' ".jpg")).Replace ("\\"' "/") + "\" border=\"1\"></a>"; " is 242.
Long Statement,DotNetNuke.UI.Skins,SkinThumbNailControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinThumbNailControl.cs,AddSkin,The length of the statement  "	OptSkin.Items.Add (new ListItem (FormatSkinName (strFolder' Path.GetFileNameWithoutExtension (strFile)) + "<br />" + strImage' root + "/" + strFolder + "/" + Path.GetFileName (strFile))); " is 187.
Long Statement,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,Localize,The length of the statement  "			cboRegion.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' "")); " is 133.
Long Statement,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The length of the statement  "		valTelephone.ErrorMessage = Localization.GetString ("TelephoneRequired"' Localization.GetResourceFile (this' MyFileName)); " is 122.
Long Statement,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The length of the statement  "			cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' "")); " is 134.
Long Statement,DotNetNuke.UI.UserControls,Help,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Help.cs,OnLoad,The length of the statement  "			helpFrame.Text = string.Format ("<iframe src='{0}' id='helpFrame' width='100%' height='500' />"' objModuleControl.HelpURL); " is 123.
Long Statement,DotNetNuke.UI.UserControls,Help,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Help.cs,OnLoad,The length of the statement  "			string localResourceFile = objModuleControl.ControlSrc.Replace (fileName' Localization.LocalResourceDirectory + "/" + fileName); " is 128.
Long Statement,DotNetNuke.UI.UserControls,Help,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Help.cs,OnLoad,The length of the statement  "			ModuleDefinitionInfo objModuleDefinition = ModuleDefinitionController.GetModuleDefinitionByID (objModuleControl.ModuleDefID); " is 125.
Long Statement,DotNetNuke.UI.UserControls,Help,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Help.cs,OnLoad,The length of the statement  "				DesktopModuleInfo objDesktopModule = DesktopModuleController.GetDesktopModule (objModuleDefinition.DesktopModuleID' PortalId); " is 126.
Long Statement,DotNetNuke.UI.UserControls,Help,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Help.cs,OnLoad,The length of the statement  "					PackageInfo objPackage = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.PackageID == objDesktopModule.PackageID); " is 139.
Long Statement,DotNetNuke.UI.UserControls,ModuleAuditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\ModuleAuditControl.cs,OnLoad,The length of the statement  "		var isCreatorAndUpdater = CreatedByUser == LastModifiedByUser && Globals.NumberMatchRegex.IsMatch (CreatedByUser) && Globals.NumberMatchRegex.IsMatch (LastModifiedByUser); " is 171.
Long Statement,DotNetNuke.UI.UserControls,ModuleAuditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\ModuleAuditControl.cs,ShowCreatedString,The length of the statement  "			UserInfo userInfo = UserController.GetUserById (PortalController.Instance.GetCurrentPortalSettings ().PortalId' int.Parse (CreatedByUser)); " is 139.
Long Statement,DotNetNuke.UI.UserControls,ModuleAuditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\ModuleAuditControl.cs,ShowUpdatedString,The length of the statement  "			UserInfo userInfo = UserController.GetUserById (PortalController.Instance.GetCurrentPortalSettings ().PortalId' int.Parse (LastModifiedByUser)); " is 144.
Long Statement,DotNetNuke.UI.UserControls,SectionHeadControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\SectionHeadControl.cs,OnPreRender,The length of the statement  "			DNNClientAPI.EnableMinMax (imgIcon' ctl' !IsExpanded' Page.ResolveUrl (MinImageUrl)' Page.ResolveUrl (MaxImageUrl)' DNNClientAPI.MinMaxPersistanceType.Page); " is 157.
Long Statement,DotNetNuke.UI.UserControls,TextEditor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\TextEditor.cs,PopulateLists,The length of the statement  "		OptRender.Items.Add (new ListItem (Localization.GetString ("Text"' Localization.GetResourceFile (this' MyFileName))' "T")); " is 123.
Long Statement,DotNetNuke.UI.UserControls,TextEditor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\TextEditor.cs,PopulateLists,The length of the statement  "		OptRender.Items.Add (new ListItem (Localization.GetString ("Html"' Localization.GetResourceFile (this' MyFileName))' "H")); " is 123.
Long Statement,DotNetNuke.UI.UserControls,TextEditor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\TextEditor.cs,PopulateLists,The length of the statement  "		OptRender.Items.Add (new ListItem (Localization.GetString ("Raw"' Localization.GetResourceFile (this' MyFileName))' "R")); " is 122.
Long Statement,DotNetNuke.UI.UserControls,TextEditor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\TextEditor.cs,PopulateLists,The length of the statement  "		OptView.Items.Add (new ListItem (Localization.GetString ("BasicTextBox"' Localization.GetResourceFile (this' MyFileName))' "BASIC")); " is 133.
Long Statement,DotNetNuke.UI.UserControls,TextEditor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\TextEditor.cs,PopulateLists,The length of the statement  "			OptView.Items.Add (new ListItem (Localization.GetString ("RichTextBox"' Localization.GetResourceFile (this' MyFileName))' "RICH")); " is 131.
Long Statement,DotNetNuke.UI.UserControls,TextEditor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\TextEditor.cs,OptRenderSelectedIndexChanged,The length of the statement  "		TxtDesktopHTML.Text = TextRenderMode == "H" ? HtmlUtils.ConvertToHtml (TxtDesktopHTML.Text) : HtmlUtils.ConvertToText (TxtDesktopHTML.Text); " is 140.
Long Statement,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,SetStorageLocationType,The length of the statement  "	//Check to see if this is the 'Root' folder' if so we cannot rely on its text value because it is something and not an empty string that we need to lookup the 'root' folder " is 172.
Long Statement,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,SetStorageLocationType,The length of the statement  "		var folderMapping = FolderMappingController.Instance.GetFolderMapping (objFolderInfo.PortalID' objFolderInfo.FolderMappingID); " is 126.
Long Statement,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,SetStorageLocationType,The length of the statement  "			imgStorageLocationType.ImageUrl = FolderProvider.Instance (folderMapping.FolderProviderType).GetFolderProviderIconPath (); " is 122.
Long Statement,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoChangeURL,The length of the statement  "		if (_Urltype == "U" && (_Url.StartsWith ("~/" + PortalSettings.DefaultIconLocation' StringComparison.InvariantCultureIgnoreCase))) { " is 132.
Long Statement,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoRenderTypeControls,The length of the statement  "			string strImagesFolder = Path.Combine (Globals.ApplicationMapPath' PortalSettings.DefaultIconLocation.Replace ('/'' '\\')); " is 123.
Long Statement,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoRenderTypeControls,The length of the statement  "				cboImages.Items.Add (new ListItem (img' string.Format ("~/{0}/{1}"' PortalSettings.DefaultIconLocation' img).ToLower ())); " is 122.
Long Statement,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoRenderTypeControls,The length of the statement  "			cboTabs.DataSource = TabController.GetPortalTabs (_settings.PortalId' Null.NullInteger' !Required' "none available"' true' false' false' true' false); " is 150.
Long Statement,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoRenderTypeControls,The length of the statement  "					if ((Required && String.IsNullOrEmpty (cboFiles.Items [0].Value)) || (!Required && !String.IsNullOrEmpty (cboFiles.Items [0].Value))) { " is 135.
Long Statement,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,OnLoad,The length of the statement  "		if ((Request.QueryString ["pid"] != null) && (Globals.IsHostTab (PortalSettings.ActiveTab.TabID) || UserController.Instance.GetCurrentUserInfo ().IsSuperUser)) { " is 161.
Long Statement,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,cmdSave_Click,The length of the statement  "	if (!String.IsNullOrEmpty (FileFilter) && ("'" + FileFilter.ToLower ()).IndexOf ("'" + strExtension.ToLower ()) == -1) { " is 120.
Long Statement,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,cmdSave_Click,The length of the statement  "			fileManager.AddFile (folder' fileName' txtFile.PostedFile.InputStream' true' true' ((FileManager)fileManager).GetContentType (Path.GetExtension (fileName))); " is 157.
Long Statement,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,cmdSave_Click,The length of the statement  "			lblMessage.Text += "<br />" + string.Format (Localization.GetString ("InsufficientFolderPermission")' folder.FolderPath); " is 121.
Long Statement,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,cmdSave_Click,The length of the statement  "			lblMessage.Text += "<br />" + string.Format (Localization.GetString ("RestrictedFileType")' fileName' Host.AllowedExtensionWhitelist.ToDisplayString ()); " is 153.
Long Statement,DotNetNuke.UI.UserControls,URLTrackingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLTrackingControl.cs,cmdDisplay_Click,The length of the statement  "		grdLog.DataSource = objUrls.GetUrlLog (PortalSettings.PortalId' lblLogURL.Text' ModuleID' Convert.ToDateTime (strStartDate)' Convert.ToDateTime (strEndDate)); " is 158.
Long Statement,DotNetNuke.UI.UserControls,LocaleSelectorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\LocaleSelectorControl.cs,OnLoad,The length of the statement  "		item = new ListItem (Localization.GetString ("NativeName.Text"' Localization.GetResourceFile (this' MyFileName))' "NATIVE"); " is 124.
Long Statement,DotNetNuke.UI.UserControls,LocaleSelectorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\LocaleSelectorControl.cs,OnLoad,The length of the statement  "		item = new ListItem (Localization.GetString ("EnglishName.Text"' Localization.GetResourceFile (this' MyFileName))' "ENGLISH"); " is 126.
Long Statement,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableContainerDragAndDrop,The length of the statement  "	if (ClientAPI.ClientAPIDisabled () == false && ClientAPI.BrowserSupportsFunctionality (ClientAPI.ClientFunctionality.Positioning)) { " is 132.
Long Statement,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableContainerDragAndDrop,The length of the statement  "		ClientAPI.RegisterClientVariable (objTitle.Page' "__dnn_dragDrop"' objContainer.ClientID + " " + objTitle.ClientID + " " + ModuleID + ";"' false); " is 146.
Long Statement,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The length of the statement  "	EnableMinMax (objButton' objContent' -1' blnDefaultMin' strMinIconLoc' strMaxIconLoc' ePersistanceType' 5' strPersonalizationNamingCtr' strPersonalizationKey); " is 159.
Long Statement,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The length of the statement  "	EnableMinMax (objButton' objContent' intModuleId' blnDefaultMin' strMinIconLoc' strMaxIconLoc' ePersistanceType' intAnimationFrames' null' null); " is 145.
Long Statement,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The length of the statement  "				AddAttribute (objButton' "onclick"' "if (__dnn_ContainerMaxMin_OnClick(this' '" + objContent.ClientID + "')) return false;"); " is 125.
Long Statement,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The length of the statement  "				ClientAPI.RegisterClientVariable (objButton.Page' "cookieid_" + objContent.ClientID' "_Module" + intModuleId + "_Visible"' true); " is 129.
Long Statement,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The length of the statement  "			SetMinMaxProperties (objButton' strMinIconLoc' Localization.GetString ("Minimize")' Localization.GetString ("Minimize")); " is 121.
Long Statement,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The length of the statement  "			SetMinMaxProperties (objButton' strMaxIconLoc' Localization.GetString ("Maximize")' Localization.GetString ("Maximize")); " is 121.
Long Statement,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The length of the statement  "		ClientAPI.RegisterClientVariable (objButton.Page' "animf_" + objContent.ClientID' intAnimationFrames.ToString ()' true); " is 120.
Long Statement,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,MinMaxContentVisibile,The length of the statement  "			string strVisible = Convert.ToString (Personalization.GetProfile (Globals.GetAttribute (objButton' "userctr")' Globals.GetAttribute (objButton' "userkey"))); " is 157.
Long Statement,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,MinMaxContentVisibile,The length of the statement  "			ClientAPI.RegisterClientVariable (objButton.Page' objButton.ClientID + ":exp"' Convert.ToInt32 (value).ToString ()' true); " is 122.
Long Statement,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,MinMaxContentVisibile,The length of the statement  "			Personalization.SetProfile (Globals.GetAttribute (objButton' "userctr")' Globals.GetAttribute (objButton' "userkey")' value.ToString ()); " is 137.
Long Statement,DotNetNuke.UI.WebControls,ActionLink,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\ActionLink.cs,IsVisible,The length of the statement  "	if (ModulePermissionController.HasModuleAccess (security' Null.NullString' ModuleControl.ModuleContext.Configuration)) { " is 120.
Long Statement,DotNetNuke.UI.WebControls,ActionLink,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\ActionLink.cs,IsVisible,The length of the statement  "		if ((RequireEditMode != true || ModuleControl.ModuleContext.PortalSettings.UserMode == PortalSettings.Mode.Edit) || (security == SecurityAccessLevel.Anonymous || security == SecurityAccessLevel.View)) { " is 202.
Long Statement,DotNetNuke.UI.WebControls,ActionLink,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\ActionLink.cs,OnPreRender,The length of the statement  "		NavigateUrl = ControlKey != "" ? ModuleControl.ModuleContext.EditUrl (KeyName' KeyValue' ControlKey) : ModuleControl.ModuleContext.EditUrl (Title); " is 147.
Long Statement,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateImage,The length of the statement  "	Brush b = new LinearGradientBrush (rect' Color.FromArgb (_Rand.Next (224)' _Rand.Next (224)' _Rand.Next (224))' Color.FromArgb (_Rand.Next (224)' _Rand.Next (224)' _Rand.Next (224))' Convert.ToSingle (_Rand.NextDouble ()) * 360' false); " is 236.
Long Statement,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,Encrypt,The length of the statement  "	var ticket = new FormsAuthenticationTicket (1' HttpContext.Current.Request.UserHostAddress' DateTime.Now' expiration' false' content); " is 134.
Long Statement,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,WarpText,The length of the statement  "	PointF p4 = RandomPoint (rect.Width - (intWrange - Convert.ToInt32 (p3.X))' rect.Width' rect.Height - (intHrange - Convert.ToInt32 (p2.Y))' rect.Height); " is 153.
Long Statement,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateChildControls,The length of the statement  "	if ((CaptchaWidth.IsEmpty || CaptchaWidth.Type != UnitType.Pixel || CaptchaHeight.IsEmpty || CaptchaHeight.Type != UnitType.Pixel)) { " is 133.
Long Statement,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,Render,The length of the statement  "		writer.AddAttribute (HtmlTextWriterAttribute.Alt' Localization.GetString ("CaptchaAlt.Text"' Localization.SharedResourceFile)); " is 127.
Long Statement,DotNetNuke.UI.WebControls,RolesSelectionGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\RolesSelectionGrid.cs,GetRoles,The length of the statement  "	_roles = roleGroupId > -2 ? RoleController.Instance.GetRoles (PortalController.Instance.GetCurrentPortalSettings ().PortalId' r => r.RoleGroupID == roleGroupId && r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved) : RoleController.Instance.GetRoles (PortalController.Instance.GetCurrentPortalSettings ().PortalId' r => r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved); " is 426.
Long Statement,DotNetNuke.UI.WebControls,RolesSelectionGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\RolesSelectionGrid.cs,CreateChildControls,The length of the statement  "			cboRoleGroups.Items.Add (new ListItem (roleGroup.RoleGroupName' roleGroup.RoleGroupID.ToString (CultureInfo.InvariantCulture))); " is 128.
Long Statement,DotNetNuke.UI.WebControls,DualListBox,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DualListBox.cs,RenderButton,The length of the statement  "		buttonText = string.IsNullOrEmpty (RemoveAllKey) ? RemoveAllText : Localization.GetString (RemoveAllKey' LocalResourceFile); " is 124.
Long Statement,DotNetNuke.UI.WebControls,DualListBox,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DualListBox.cs,RenderButton,The length of the statement  "	writer.AddAttribute (HtmlTextWriterAttribute.Href' Page.ClientScript.GetPostBackEventReference (GetPostBackOptions (buttonType))); " is 130.
Long Statement,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,BindPageNumbers,The length of the statement  "	_totalPages = TotalRecords / RecordsPerPage >= 1 ? Convert.ToInt32 (Math.Ceiling (Convert.ToDouble (TotalRecords) / RecordsPerPage)) : 0; " is 137.
Long Statement,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,CreateURL,The length of the statement  "		return !String.IsNullOrEmpty (QuerystringParams) ? (!String.IsNullOrEmpty (CurrentPage) ? TestableGlobals.Instance.NavigateURL (TabID' ""' QuerystringParams' "currentpage=" + CurrentPage) : TestableGlobals.Instance.NavigateURL (TabID' ""' QuerystringParams)) : (!String.IsNullOrEmpty (CurrentPage) ? TestableGlobals.Instance.NavigateURL (TabID' ""' "currentpage=" + CurrentPage) : TestableGlobals.Instance.NavigateURL (TabID)); " is 427.
Long Statement,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,GetLink,The length of the statement  "		return CSSClassLinkInactive.Trim ().Length > 0 ? "<span class=\"" + CSSClassLinkInactive + "\">[" + PageNum + "]</span>" : "<span>[" + PageNum + "]</span>"; " is 156.
Long Statement,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,GetLink,The length of the statement  "	return CSSClassLinkActive.Trim ().Length > 0 ? "<a href=\"" + CreateURL (PageNum.ToString ()) + "\" class=\"" + CSSClassLinkActive + "\">" + PageNum + "</a>" : "<a href=\"" + CreateURL (PageNum.ToString ()) + "\">" + PageNum + "</a>"; " is 234.
Long Statement,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,GetPreviousLink,The length of the statement  "	return CurrentPage > 1 && _totalPages > 0 ? (CSSClassLinkActive.Trim ().Length > 0 ? "<a href=\"" + CreateURL ((CurrentPage - 1).ToString ()) + "\" class=\"" + CSSClassLinkActive + "\">" + Localization.GetString ("Previous"' Localization.SharedResourceFile) + "</a>" : "<a href=\"" + CreateURL ((CurrentPage - 1).ToString ()) + "\">" + Localization.GetString ("Previous"' Localization.SharedResourceFile) + "</a>") : (CSSClassLinkInactive.Trim ().Length > 0 ? "<span class=\"" + CSSClassLinkInactive + "\">" + Localization.GetString ("Previous"' Localization.SharedResourceFile) + "</span>" : "<span>" + Localization.GetString ("Previous"' Localization.SharedResourceFile) + "</span>"); " is 686.
Long Statement,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,GetNextLink,The length of the statement  "	return CurrentPage != _totalPages && _totalPages > 0 ? (CSSClassLinkActive.Trim ().Length > 0 ? "<a href=\"" + CreateURL ((CurrentPage + 1).ToString ()) + "\" class=\"" + CSSClassLinkActive + "\">" + Localization.GetString ("Next"' Localization.SharedResourceFile) + "</a>" : "<a href=\"" + CreateURL ((CurrentPage + 1).ToString ()) + "\">" + Localization.GetString ("Next"' Localization.SharedResourceFile) + "</a>") : (CSSClassLinkInactive.Trim ().Length > 0 ? "<span class=\"" + CSSClassLinkInactive + "\">" + Localization.GetString ("Next"' Localization.SharedResourceFile) + "</span>" : "<span>" + Localization.GetString ("Next"' Localization.SharedResourceFile) + "</span>"); " is 681.
Long Statement,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,GetFirstLink,The length of the statement  "		return CSSClassLinkActive.Trim ().Length > 0 ? "<a href=\"" + CreateURL ("1") + "\" class=\"" + CSSClassLinkActive + "\">" + Localization.GetString ("First"' Localization.SharedResourceFile) + "</a>" : "<a href=\"" + CreateURL ("1") + "\">" + Localization.GetString ("First"' Localization.SharedResourceFile) + "</a>"; " is 318.
Long Statement,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,GetFirstLink,The length of the statement  "	return CSSClassLinkInactive.Trim ().Length > 0 ? "<span class=\"" + CSSClassLinkInactive + "\">" + Localization.GetString ("First"' Localization.SharedResourceFile) + "</span>" : "<span>" + Localization.GetString ("First"' Localization.SharedResourceFile) + "</span>"; " is 268.
Long Statement,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,GetLastLink,The length of the statement  "		return CSSClassLinkActive.Trim ().Length > 0 ? "<a href=\"" + CreateURL (_totalPages.ToString ()) + "\" class=\"" + CSSClassLinkActive + "\">" + Localization.GetString ("Last"' Localization.SharedResourceFile) + "</a>" : "<a href=\"" + CreateURL (_totalPages.ToString ()) + "\">" + Localization.GetString ("Last"' Localization.SharedResourceFile) + "</a>"; " is 356.
Long Statement,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,GetLastLink,The length of the statement  "	return CSSClassLinkInactive.Trim ().Length > 0 ? "<span class=\"" + CSSClassLinkInactive + "\">" + Localization.GetString ("Last"' Localization.SharedResourceFile) + "</span>" : "<span>" + Localization.GetString ("Last"' Localization.SharedResourceFile) + "</span>"; " is 266.
Long Statement,DotNetNuke.UI.WebControls,StandardEditorInfoAdapter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Adapters\StandardEditorInfoAdapter.cs,GetEditorInfo,The length of the statement  "			if (((EditorAttribute)editorAttributes [i]).EditorBaseTypeName.IndexOf ("DotNetNuke.UI.WebControls.EditControl") >= 0) { " is 120.
Long Statement,DotNetNuke.UI.WebControls,AutoCompleteControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\AutoCompleteControl.cs,AutoCompleteControl_Init,The length of the statement  "	ClientResourceManager.RegisterScript (this.Page' "~/Resources/Shared/components/ProfileAutoComplete/dnn.ProfileAutoComplete.js"); " is 129.
Long Statement,DotNetNuke.UI.WebControls,AutoCompleteControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\AutoCompleteControl.cs,AutoCompleteControl_Init,The length of the statement  "	ClientResourceManager.RegisterFeatureStylesheet (this.Page' "~/Resources/Shared/components/ProfileAutoComplete/dnn.AutoComplete.css"); " is 134.
Long Statement,DotNetNuke.UI.WebControls,DateEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateEditControl.cs,CreateChildControls,The length of the statement  "	linkCalendar.Text = "<img src=\"" + Globals.ApplicationPath + "/images/calendar.png\" border=\"0\" />&nbsp;&nbsp;" + Localization.GetString ("Calendar"); " is 153.
Long Statement,DotNetNuke.UI.WebControls,DnnCountryAutocompleteControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNCountryAutocompleteControl.cs,DnnCountryRegionControl_Init,The length of the statement  "	ClientResourceManager.RegisterScript (this.Page' "~/Resources/Shared/components/CountriesRegions/dnn.CountriesRegions.js"); " is 123.
Long Statement,DotNetNuke.UI.WebControls,DnnCountryAutocompleteControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNCountryAutocompleteControl.cs,DnnCountryRegionControl_Init,The length of the statement  "	ClientResourceManager.RegisterFeatureStylesheet (this.Page' "~/Resources/Shared/components/CountriesRegions/dnn.CountriesRegions.css"); " is 135.
Long Statement,DotNetNuke.UI.WebControls,DnnCountryAutocompleteControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNCountryAutocompleteControl.cs,LoadControls,The length of the statement  "	var regionControl2 = ControlUtilities.FindFirstDescendent<DNNRegionEditControl> (Page' c => IsCoupledRegionControl (c)); " is 120.
Long Statement,DotNetNuke.UI.WebControls,DNNListEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNListEditControl.cs,RenderEditMode,The length of the statement  "	var defaultText = HttpUtility.HtmlEncode ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"); " is 129.
Long Statement,DotNetNuke.UI.WebControls,DNNPageEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNPageEditControl.cs,RenderEditMode,The length of the statement  "	List<TabInfo> listTabs = TabController.GetPortalTabs (_portalSettings.PortalId' Null.NullInteger' true' "<" + Localization.GetString ("None_Specified") + ">"' true' false' true' true' false); " is 191.
Long Statement,DotNetNuke.UI.WebControls,DNNRegionEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRegionEditControl.cs,DnnRegionControl_Init,The length of the statement  "	ClientResourceManager.RegisterScript (this.Page' "~/Resources/Shared/components/CountriesRegions/dnn.CountriesRegions.js"); " is 123.
Long Statement,DotNetNuke.UI.WebControls,DNNRegionEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRegionEditControl.cs,DnnRegionControl_Init,The length of the statement  "	ClientResourceManager.RegisterFeatureStylesheet (this.Page' "~/Resources/Shared/components/CountriesRegions/dnn.CountriesRegions.css"); " is 135.
Long Statement,DotNetNuke.UI.WebControls,DNNTimeZoneEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNTimeZoneEditControl.cs,RenderViewMode,The length of the statement  "	Localization.LoadTimeZoneDropDownList (cboTimeZones' ((PageBase)Page).PageCulture.Name' Convert.ToString (_portalSettings.TimeZoneOffset)); " is 139.
Long Statement,DotNetNuke.UI.WebControls,DNNTimeZoneEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNTimeZoneEditControl.cs,RenderEditMode,The length of the statement  "	Localization.LoadTimeZoneDropDownList (cboTimeZones' ((PageBase)Page).PageCulture.Name' Convert.ToString (_portalSettings.TimeZoneOffset)); " is 139.
Long Statement,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildDiv,The length of the statement  "	if (ShowRequired && editInfo.Required && (editInfo.EditMode == PropertyEditorMode.Edit || (editInfo.Required && string.IsNullOrEmpty (strValue)))) { " is 148.
Long Statement,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildRequiredIcon,The length of the statement  "	if (ShowRequired && editInfo.Required && (editInfo.EditMode == PropertyEditorMode.Edit || (editInfo.Required && string.IsNullOrEmpty (strValue)))) { " is 148.
Long Statement,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildTable,The length of the statement  "	if (editInfo.LabelMode == LabelMode.Bottom || editInfo.LabelMode == LabelMode.Top || editInfo.LabelMode == LabelMode.None) { " is 124.
Long Statement,DotNetNuke.UI.WebControls,PropertyEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\PropertyEditorControl.cs,CreateEditor,The length of the statement  "						var groupData = UnderlyingDataSource.Cast<object> ().Where (obj => GetCategory (obj) == strGroup.Trim () && GetRowVisibility (obj)); " is 132.
Long Statement,DotNetNuke.UI.WebControls,PropertyEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\PropertyEditorControl.cs,OnPreRender,The length of the statement  "			DNNClientAPI.EnableMinMax (icon' tbl' false' IconController.IconURL ("Minus"' "12X15")' IconController.IconURL ("Plus"' "12X15")' DNNClientAPI.MinMaxPersistanceType.Page); " is 171.
Long Statement,DotNetNuke.UI.WebControls,PropertyLabelControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\PropertyLabelControl.cs,OnPreRender,The length of the statement  "		label.Attributes.Add ("for"' EditControl is EditControl ? ((EditControl)EditControl).EditControlClientId : EditControl.ClientID); " is 129.
Long Statement,DotNetNuke.UI.WebControls,VisibilityControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\VisibilityControl.cs,LoadPostData,The length of the statement  "				if (postCollection [postDataKey + ":relationship_" + relationship.RelationshipId.ToString (CultureInfo.InvariantCulture)] != null) { " is 132.
Long Statement,DotNetNuke.UI.WebControls,VisibilityControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\VisibilityControl.cs,RenderGroups,The length of the statement  "		RenderCheckboxItem (writer' ":group_"' group.RoleID.ToString (CultureInfo.InvariantCulture)' group.RoleName' Visibility.RoleVisibilities.Count (r => r.RoleID == group.RoleID) == 1); " is 181.
Long Statement,DotNetNuke.UI.WebControls,VisibilityControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\VisibilityControl.cs,RenderRelationships,The length of the statement  "		RenderCheckboxItem (writer' ":relationship_"' relationship.RelationshipId.ToString (CultureInfo.InvariantCulture)' relationship.Name' Visibility.RelationshipVisibilities.Count (r => r.RelationshipId == relationship.RelationshipId) == 1); " is 237.
Long Statement,DotNetNuke.UI.WebControls,VisibilityControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\VisibilityControl.cs,OnPreRender,The length of the statement  "	Page.ClientScript.RegisterClientScriptBlock (GetType ()' "visibleChange"' "$(document).ready(function(){$('.dnnFormVisibility').on('click'' 'input[type=radio]'' function(){$(this).parent().parent().find('ul').hide();$(this).parent().next('ul').show();});});"' true); " is 266.
Long Statement,DotNetNuke.UI.WebControls,VisibilityControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\VisibilityControl.cs,Render,The length of the statement  "	writer.AddStyleAttribute (HtmlTextWriterStyle.Display' Visibility.VisibilityMode == UserVisibilityMode.FriendsAndGroups ? "block" : "none"); " is 140.
Long Statement,DotNetNuke.UI.WebControls.Internal,PermissionTriState,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\PermissionTriState.cs,RegisterScripts,The length of the statement  "		ClientAPI.RegisterStartUpScript (page' scriptKey' "<script type='text/javascript'>" + GetInitScript (ctl) + "</script>"); " is 121.
Long Statement,DotNetNuke.UI.WebControls.Internal,PermissionTriState,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\PermissionTriState.cs,GetInitScript,The length of the statement  "	LookupScriptValues (ctl' out grantImagePath' out denyImagePath' out nullImagePath' out lockImagePath' out grantAltText' out denyAltText' out nullAltText); " is 154.
Long Statement,DotNetNuke.Entities.Content.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Data\DataService.cs,AddContentItem,The length of the statement  "	return _provider.ExecuteScalar<int> ("AddContentItem"' contentItem.Content' contentItem.ContentTypeId' contentItem.TabID' contentItem.ModuleID' contentItem.ContentKey' contentItem.Indexed' createdByUserId' _provider.GetNull (contentItem.StateID)); " is 247.
Long Statement,DotNetNuke.Entities.Content.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Data\DataService.cs,GetContentItems,The length of the statement  "	return _provider.ExecuteReader ("GetContentItems"' _provider.GetNull (contentTypeId)' _provider.GetNull (tabId)' _provider.GetNull (moduleId)); " is 143.
Long Statement,DotNetNuke.Entities.Content.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Data\DataService.cs,UpdateContentItem,The length of the statement  "	_provider.ExecuteNonQuery ("UpdateContentItem"' contentItem.ContentItemId' contentItem.Content' contentItem.ContentTypeId' contentItem.TabID' contentItem.ModuleID' contentItem.ContentKey' contentItem.Indexed' createdByUserId' _provider.GetNull (contentItem.StateID)); " is 267.
Long Statement,DotNetNuke.Entities.Content.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Data\DataService.cs,AddHeirarchicalTerm,The length of the statement  "	return _provider.ExecuteScalar<int> ("AddHeirarchicalTerm"' term.VocabularyId' term.ParentTermId' term.Name' term.Description' term.Weight' createdByUserId); " is 157.
Long Statement,DotNetNuke.Entities.Content.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Data\DataService.cs,AddSimpleTerm,The length of the statement  "	return _provider.ExecuteScalar<int> ("AddSimpleTerm"' term.VocabularyId' term.Name' term.Description' term.Weight' createdByUserId); " is 132.
Long Statement,DotNetNuke.Entities.Content.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Data\DataService.cs,UpdateHeirarchicalTerm,The length of the statement  "	_provider.ExecuteNonQuery ("UpdateHeirarchicalTerm"' term.TermId' term.VocabularyId' term.ParentTermId' term.Name' term.Description' term.Weight' lastModifiedByUserId); " is 168.
Long Statement,DotNetNuke.Entities.Content.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Data\DataService.cs,UpdateSimpleTerm,The length of the statement  "	_provider.ExecuteNonQuery ("UpdateSimpleTerm"' term.TermId' term.VocabularyId' term.Name' term.Description' term.Weight' lastModifiedByUserId); " is 143.
Long Statement,DotNetNuke.Entities.Content.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Data\DataService.cs,AddVocabulary,The length of the statement  "	return _provider.ExecuteScalar<int> ("AddVocabulary"' vocabulary.Type' vocabulary.Name' vocabulary.Description' vocabulary.Weight' _provider.GetNull (vocabulary.ScopeId)' vocabulary.ScopeTypeId' createdByUserId); " is 212.
Long Statement,DotNetNuke.Entities.Content.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Data\DataService.cs,UpdateVocabulary,The length of the statement  "	_provider.ExecuteNonQuery ("UpdateVocabulary"' vocabulary.VocabularyId' vocabulary.Type' vocabulary.Name' vocabulary.Description' vocabulary.Weight' vocabulary.ScopeId' vocabulary.ScopeTypeId' lastModifiedByUserId); " is 215.
Long Statement,DotNetNuke.Entities.Controllers,HostController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Controllers\HostController.cs,GetSettings,The length of the statement  "	return CBO.GetCachedObject<Dictionary<string' ConfigurationSetting>> (new CacheItemArgs (DataCache.HostSettingsCacheKey' DataCache.HostSettingsCacheTimeOut' DataCache.HostSettingsCachePriority)' GetSettingsDictionaryCallBack' true); " is 232.
Long Statement,DotNetNuke.Entities.Controllers,HostController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Controllers\HostController.cs,Update,The length of the statement  "				EventLogController.Instance.AddLog (config.Key' config.Value' portalSettings' userId' EventLogController.EventLogType.HOST_SETTING_UPDATED); " is 140.
Long Statement,DotNetNuke.Entities.Controllers,HostController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Controllers\HostController.cs,Update,The length of the statement  "			EventLogController.Instance.AddLog (config.Key' config.Value' portalSettings' userId' EventLogController.EventLogType.HOST_SETTING_CREATED); " is 140.
Complex Conditional,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseUtcTime,The conditional expression  "DateTime.UtcNow >= _lastUpdateUtc + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftUtc && _driftUtc <= TimeSpan.FromHours (26)) || _driftUtc == TimeSpan.MinValue"  is complex.
Complex Conditional,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseLocalTime,The conditional expression  "DateTime.UtcNow >= _lastUpdateLocal + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftLocal && _driftLocal <= TimeSpan.FromHours (26)) || _driftLocal == TimeSpan.MinValue"  is complex.
Complex Conditional,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateDatabaseVersion,The conditional expression  "(Major >= 5 || (Major == 4 && Minor == 9 && Build > 0))"  is complex.
Complex Conditional,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,CopyModule,The conditional expression  "!String.IsNullOrEmpty (sourceModule.CultureCode) && sourceModule.CultureCode == portal.DefaultLanguage && destinationModule.CultureCode != sourceModule.CultureCode && !String.IsNullOrEmpty (destinationModule.CultureCode)"  is complex.
Complex Conditional,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,CopyModule,The conditional expression  "!String.IsNullOrEmpty (sourceModule.CultureCode) && sourceModule.CultureCode != portal.DefaultLanguage && destinationModule.CultureCode != sourceModule.CultureCode && !String.IsNullOrEmpty (destinationModule.CultureCode)"  is complex.
Complex Conditional,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeserializeModule,The conditional expression  "existModule != null && !existModule.IsDeleted && existModule.AllTabs && existModule.PortalID == portalId"  is complex.
Complex Conditional,DotNetNuke.Entities.Users,MembershipPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPropertyAccess.cs,GetProperty,The conditional expression  "CurrentScope < Scope.DefaultSettings || (CurrentScope == Scope.DefaultSettings && !UserQueriesHimself) || ((CurrentScope != Scope.SystemMessages || objUser.IsSuperUser) && (propertyName.ToLower () == "password" || propertyName.ToLower () == "passwordanswer" || propertyName.ToLower () == "passwordquestion"))"  is complex.
Complex Conditional,DotNetNuke.Entities.Users,ProfilePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Profile\ProfilePropertyAccess.cs,CheckAccessLevel,The conditional expression  "targetUser.Social.UserRelationships.Any (userRelationship => (userRelationship.RelationshipId == relationship.RelationshipId && userRelationship.Status == RelationshipStatus.Accepted && ((userRelationship.RelatedUserId == accessingUser.UserID && userRelationship.UserId == targetUser.UserID) || (userRelationship.RelatedUserId == targetUser.UserID && userRelationship.UserId == accessingUser.UserID))))"  is complex.
Complex Conditional,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,AddHTTP,The conditional expression  "strURL.IndexOf ("mailto:") == -1 && strURL.IndexOf ("://") == -1 && strURL.IndexOf ("~") == -1 && strURL.IndexOf ("\\\\") == -1"  is complex.
Complex Conditional,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetURLType,The conditional expression  "URL.ToLower ().StartsWith ("mailto:") == false && URL.IndexOf ("://") == -1 && URL.StartsWith ("~") == false && URL.StartsWith ("\\\\") == false && URL.StartsWith ("/") == false"  is complex.
Complex Conditional,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The conditional expression  "(tab.IsVisible || blnHidden) && (tab.IsDeleted == false) && (tab.TabType == TabType.Normal)"  is complex.
Complex Conditional,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The conditional expression  "(tab.IsVisible || blnHidden) && (tab.IsDeleted == false || blnDeleted) && (tab.TabType == TabType.Normal || blnURL)"  is complex.
Complex Conditional,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The conditional expression  "(tab.IsVisible || blnHidden) && (tab.IsDeleted == false || blnDeleted) && (tab.TabType == TabType.Normal || blnURL)"  is complex.
Complex Conditional,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,ProcessHttpModule,The conditional expression  "toLowerLocalPath.EndsWith ("webresource.axd") || toLowerLocalPath.EndsWith ("scriptresource.axd") || toLowerLocalPath.EndsWith ("captcha.aspx") || toLowerLocalPath.Contains ("upgradewizard.aspx") || toLowerLocalPath.Contains ("installwizard.aspx") || toLowerLocalPath.EndsWith ("install.aspx")"  is complex.
Complex Conditional,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,ProcessHttpModule,The conditional expression  "allowUnknownExtensions == false && toLowerLocalPath.EndsWith (".aspx") == false && toLowerLocalPath.EndsWith (".asmx") == false && toLowerLocalPath.EndsWith (".ashx") == false && toLowerLocalPath.EndsWith (".svc") == false"  is complex.
Complex Conditional,DotNetNuke.Common.Lists,ListController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\ListController.cs,GetListInfoCollection,The conditional expression  "(list.Name == listName || string.IsNullOrEmpty (listName)) && (list.ParentKey == parentKey || string.IsNullOrEmpty (parentKey)) && (list.PortalID == portalId || portalId == Null.NullInteger)"  is complex.
Complex Conditional,DotNetNuke.Entities.Host,ServerController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\ServerController.cs,UpdateServerActivity,The conditional expression  "existServer == null || string.IsNullOrEmpty (existServer.Url) || (string.IsNullOrEmpty (existServer.UniqueId) && !string.IsNullOrEmpty (GetServerUniqueId ()))"  is complex.
Complex Conditional,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetPortalTabs,The conditional expression  "((excludeTabId < 0) || (tab.TabID != excludeTabId)) && (!tab.IsSuperTab || objUserInfo.IsSuperUser)"  is complex.
Complex Conditional,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetPortalTabs,The conditional expression  "(tab.IsVisible || includeHidden) && tab.HasAVisibleVersion && (tab.IsDeleted == false || includeDeleted) && (tab.TabType == TabType.Normal || includeURL)"  is complex.
Complex Conditional,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,IsValidTabName,The conditional expression  "!string.IsNullOrEmpty (doNotRewriteRegex) && (Regex.IsMatch (cleanTabName' doNotRewriteRegex' RegexOptions.IgnoreCase) || Regex.IsMatch ("/" + cleanTabName' doNotRewriteRegex' RegexOptions.IgnoreCase) || Regex.IsMatch ("/" + cleanTabName + "/"' doNotRewriteRegex' RegexOptions.IgnoreCase))"  is complex.
Complex Conditional,DotNetNuke.Security.Permissions,FolderPermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\FolderPermissionCollection.cs,Contains,The conditional expression  "permission.PermissionKey == key && permission.FolderID == folderId && permission.RoleID == roleId && permission.UserID == userId"  is complex.
Complex Conditional,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,AddLog,The conditional expression  "scheduler == null || logInfo.BypassBuffering || SchedulingProvider.Enabled == false || scheduler.GetScheduleStatus () == ScheduleStatus.STOPPED || !Host.EventLogBuffer"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,CreateFriendlyUrl,The conditional expression  "newPath == "" //no path (no querystring when rewritten)  && (isHomePage && newTabPath == "/") //is the home page' and we're not using 'home' for it  && (langParms == "" || dropLangParms) //doesn't have any language parms' or we're intentionally getting rid of them  && !builtInUrl"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,FriendlyUrlInternal,The conditional expression  "tab != null && portalSettings.SSLEnabled && tab.IsSecure && friendlyPath.StartsWith ("http://"' StringComparison.InvariantCultureIgnoreCase)"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The conditional expression  "customOnly && isCustomUrl || customOnly == false || builtInUrl"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The conditional expression  "(redirectAlias && wrongAlias != null) && result.RedirectAllowed && result.PortalAliasMapping != PortalSettings.PortalAliasMapping.Redirect"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The conditional expression  "!finished && !postRequest /* either request is null' or it's not a post - 551 */&& result.HttpAlias != null /* must have a http alias */&& !result.CustomParmRewrite && /* not custom rewritten parms */((settings.EnableCustomProviders && RedirectController.CheckForModuleProviderRedirect (requestUri' ref result' queryStringCol' settings' parentTraceId)) //894 : allow disable of all custom providers  || RedirectController.CheckForParameterRedirect (requestUri' ref result' queryStringCol' settings))"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The conditional expression  "result.OriginalPath.Equals (result.HttpAlias' StringComparison.InvariantCultureIgnoreCase) && result.PortalAlias != null && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The conditional expression  "result.DoRewrite == false && result.CanRewrite != StateBoolean.False && !finished && result.Action == ActionType.Continue"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The conditional expression  "context != null && response != null && result != null && showDebug"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForTabExternalForwardOrRedirect,The conditional expression  "result.TabId > -1 && result.PortalId > -1 && (settings.ForwardExternalUrlsType != DNNPageForwardType.NoForward || result.Reason == RedirectReason.Tab_Permanent_Redirect)"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IdentifyPortalAlias,The conditional expression  "result.DoRewrite == false && (result.Action == ActionType.Continue || (result.Action == ActionType.CheckFor301 && result.Reason == RedirectReason.Custom_Tab_Alias))"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IgnoreRequestForInstall,The conditional expression  "physicalPath.EndsWith ("install.aspx"' true' CultureInfo.InvariantCulture) || physicalPath.EndsWith ("installwizard.aspx"' true' CultureInfo.InvariantCulture) || physicalPath.EndsWith ("upgradewizard.aspx"' true' CultureInfo.InvariantCulture) || Globals.Status == Globals.UpgradeStatus.Install || Globals.Status == Globals.UpgradeStatus.Upgrade"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IgnoreRequestForInstall,The conditional expression  "physicalPath.EndsWith (Globals.glbDefaultPage' true' CultureInfo.InvariantCulture) == false && refererPath != null && String.Compare (requestedDomain' refererDomain' StringComparison.OrdinalIgnoreCase) == 0 && (refererPath.EndsWith ("install.aspx"' true' CultureInfo.InvariantCulture) || refererPath.EndsWith ("installwizard.aspx"' true' CultureInfo.InvariantCulture) || refererPath.EndsWith ("upgradewizard.aspx"' true' CultureInfo.InvariantCulture))"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The conditional expression  "result.TabId > -1 //valid tab  && (result.Action == ActionType.Redirect301 //specific 301 redirect  || (do301Val != null && do301Val == "true") //or rewrite hint for specific 301 redirect   || result.Action == ActionType.Redirect302)"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The conditional expression  "(result.Reason == RedirectReason.Deleted_Page || result.Reason == RedirectReason.Disabled_Page) && portalHomeTabId > 0 && settings.DeletedTabHandlingType == DeletedTabHandlingType.Do301RedirectToPortalHome"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The conditional expression  "!(bestFriendlyNoScheme == requestedPathNoScheme || bestFriendlyNoScheme == rawUrlWithHost || bestFriendlyNoScheme == rawUrlWithHostNoScheme || bestFriendlyNoScheme == HttpUtility.UrlDecode (requestedPathNoScheme) || bestFriendlyNoScheme == rawUrlLowerCase)"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,FriendlyUrl,The conditional expression  "tab != null && portalSettings.SSLEnabled && tab.IsSecure && friendlyPath.StartsWith ("http://"' StringComparison.InvariantCultureIgnoreCase)"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The conditional expression  "rulePortalId == portalId || rulePortalId == -1 || portalId == -1 || portalSpecific"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,SplitUserIdFromFriendlyUrlPath,The conditional expression  "otherParmsGp != null && otherParmsGp.Success && (parm1ValueGp.Success || parm2ValueGp.Success)"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,SplitUserIdFromFriendlyUrlPath,The conditional expression  "(otherParmsGp == null || otherParmsGp.Success == false) && parm1ValueGp != null && parm1ValueGp.Success"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,FriendlyUrlPathController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlPathController.cs,CheckUserProfileReplacement,The conditional expression  "portalSettings != null && tab.PortalID == portalSettings.PortalId && (tab.TabID == portalSettings.UserTabId || portalSettings.UserTabId == -1 || tab.ParentId == portalSettings.UserTabId)"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,FriendlyUrlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlController.cs,CleanNameForUrl,The conditional expression  "!doublePeriod && i > 0 && c == '.' && normalisedUrl [i - 1] == '.'"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,FriendlyUrlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlController.cs,EnsureLeadingChar,The conditional expression  "leading != null && path != null && leading.Length <= path.Length && leading != """  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,FriendlyUrlController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\FriendlyUrlController.cs,EnsureNotLeadingChar,The conditional expression  "leading != null && path != null && leading.Length <= path.Length && leading != """  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,IdentifyByTabPathEx,The conditional expression  "result.DoRewrite && settings.ForcePortalDefaultLanguage && result.PortalId >= 0 && rewritePath.Contains ("language=") == false"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The conditional expression  "tab.DisableLink || !string.IsNullOrEmpty (tab.Url) || (tab.EndDate < DateTime.Now && tab.EndDate > DateTime.MinValue) || (tab.StartDate > DateTime.Now && tab.StartDate > DateTime.MinValue)"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The conditional expression  "thisPortal != null && (thisPortal.UserTabId == tab.TabID || thisPortal.UserTabId == tab.ParentId || thisPortal.UserTabId == -1)"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddTabToTabDict,The conditional expression  "tab.DisableLink || !string.IsNullOrEmpty (tab.Url) || (tab.EndDate < DateTime.Now && tab.EndDate > DateTime.MinValue) || (tab.StartDate > DateTime.Now && tab.StartDate > DateTime.MinValue)"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddToTabDict,The conditional expression  "(foundTAb.IsDeleted == false && isDeleted == false) //found is not deleted' this tab is not deleted  && keyDupAction == UrlEnums.TabKeyPreference.TabOK && foundTAb.TabIdOriginal != "-1""  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,FetchTabDictionary,The conditional expression  "dict != null && portalDepths != null && forceRebuild == false && bypassCache == false"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,AppendToTabPath,The conditional expression  "!modified && string.IsNullOrEmpty (options.PunctuationReplacement) == false && tab.TabName.Contains (" ") && tabName.Contains (" ") == false"  is complex.
Complex Conditional,DotNetNuke.Entities.Urls,UrlAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\UrlAction.cs,SetActionWithNoDowngrade,The conditional expression  "Action != ActionType.Redirect301 && Action != ActionType.Redirect302 && Action != ActionType.Redirect302Now && Action != ActionType.Output404"  is complex.
Complex Conditional,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,GenerateSignatureBase,The conditional expression  "!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))"  is complex.
Complex Conditional,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,MoveFolder,The conditional expression  "(folder.FolderMappingID == destinationFolder.FolderMappingID && FolderProvider.Instance (folderMapping.FolderProviderType).SupportsMoveFolder) || (IsStandardFolderProviderType (folderMapping) && IsStandardFolderProviderType (destinationFolderMapping))"  is complex.
Complex Conditional,DotNetNuke.Services.FileSystem,FolderManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderManager.cs,SetFolderPermission,The conditional expression  "folder.FolderPermissions.Cast<FolderPermissionInfo> ().Any (fpi => fpi.FolderID == folder.FolderID && fpi.PermissionID == permissionId && fpi.RoleID == roleId && fpi.UserID == userId && fpi.AllowAccess)"  is complex.
Complex Conditional,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,ParsePackage,The conditional expression  "(iconFileNav.Value != string.Empty) && (package.PackageType == "Module" || package.PackageType == "Auth_System" || package.PackageType == "Container" || package.PackageType == "Skin")"  is complex.
Complex Conditional,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,LocalizeControlTitle,The conditional expression  "PortalSettings.Current.ActiveTab.TabPath.StartsWith ("//Admin//"' StringComparison.CurrentCultureIgnoreCase) || String.Compare (PortalSettings.Current.ActiveTab.TabPath' "//Admin"' StringComparison.OrdinalIgnoreCase) == 0 || PortalSettings.Current.ActiveTab.TabPath.StartsWith ("//Host//"' StringComparison.CurrentCultureIgnoreCase) || String.Compare (PortalSettings.Current.ActiveTab.TabPath' "//Host"' StringComparison.OrdinalIgnoreCase) == 0"  is complex.
Complex Conditional,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,SetThreadCultures,The conditional expression  "portalSettings != null && portalSettings.ContentLocalizationEnabled && HttpContext.Current.Request.IsAuthenticated && portalSettings.AllowUserUICulture"  is complex.
Complex Conditional,DotNetNuke.Services.Search.Controllers,SearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\SearchControllerImpl.cs,GetResults,The conditional expression  "searchQuery.SortField == SortFields.CustomStringField || searchQuery.SortField == SortFields.CustomNumericField || searchQuery.SortField == SortFields.NumericKey || searchQuery.SortField == SortFields.Keyword"  is complex.
Complex Conditional,DotNetNuke.Services.Journal,Content,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\Content.cs,UpdateContentItem,The conditional expression  "(objContent.ContentTypeId == GetContentTypeID ("DNNCorp_JournalProfile") && objJournalItem.ProfileId > 0) || (objContent.ContentTypeId == GetContentTypeID ("DNNCorp_JournalGroup") && objJournalItem.SocialGroupId > 0)"  is complex.
Complex Conditional,DotNetNuke.Services.Scheduling,DNNScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\DNNScheduler.cs,RunScheduleItemNow,The conditional expression  "scheduleHistoryItem.TimeLapse != Null.NullInteger && scheduleHistoryItem.TimeLapseMeasurement != Null.NullString && scheduleHistoryItem.Enabled && SchedulingController.CanRunOnThisServer (scheduleItem.Servers)"  is complex.
Complex Conditional,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetUrls,The conditional expression  "!tab.IsDeleted && !tab.DisableLink && tab.TabType == TabType.Normal && (Null.IsNull (tab.StartDate) || tab.StartDate < DateTime.Now) && (Null.IsNull (tab.EndDate) || tab.EndDate > DateTime.Now) && IsTabPublic (tab.TabPermissions)"  is complex.
Complex Conditional,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetPageUrl,The conditional expression  "(ps.SSLEnforced || (objTab.IsSecure && ps.SSLEnabled)) && url.StartsWith ("http://")"  is complex.
Complex Conditional,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetPageUrl,The conditional expression  "(!localized.IsDeleted && !localized.DisableLink && localized.TabType == TabType.Normal) && (Null.IsNull (localized.StartDate) || localized.StartDate < DateTime.Now) && (Null.IsNull (localized.EndDate) || localized.EndDate > DateTime.Now) && (IsTabPublic (localized.TabPermissions)) && (includeHiddenPages || localized.IsVisible) && localized.HasBeenPublished"  is complex.
Complex Conditional,DotNetNuke.Services.Analytics,GoogleAnalyticsEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Analytics\GoogleAnalyticsEngine.cs,RenderScript,The conditional expression  "!trackForAdmin && (UserController.Instance.GetCurrentUserInfo ().IsSuperUser || (PortalSettings.Current != null && UserController.Instance.GetCurrentUserInfo ().IsInRole (PortalSettings.Current.AdministratorRoleName)))"  is complex.
Complex Conditional,DotNetNuke.Services.Installer,InstallerInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\InstallerInfo.cs,ReadZipStream,The conditional expression  "file.Extension == "dnn7" && (ManifestFile.Extension == "dnn" || ManifestFile.Extension == "dnn5" || ManifestFile.Extension == "dnn6")"  is complex.
Complex Conditional,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ParsePackageName,The conditional expression  "package.PackageType == "Module" && AdminModules.Contains (package.Name + "'") || package.PackageType == "Module" && CoreModules.Contains (package.Name + "'") || (package.PackageType == "Container" || package.PackageType == "Skin") && KnownSkins.Contains (package.Name + "'") || package.PackageType == "SkinObject" && KnownSkinObjects.Contains (package.Name + "'")"  is complex.
Complex Conditional,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,IsFileValid,The conditional expression  "(strExtension == "dnn" || whiteList.IsAllowedExtension (strExtension) || packageWhiteList.Contains (strExtension) || (packageWhiteList.Contains ("*dataprovider") && strExtension.EndsWith ("dataprovider")))"  is complex.
Complex Conditional,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,ParsePackageIconFileName,The conditional expression  "(package.IconFile != null) && (package.PackageType == "Module" || package.PackageType == "Auth_System" || package.PackageType == "Container" || package.PackageType == "Skin")"  is complex.
Complex Conditional,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,ParsePackageIconFile,The conditional expression  "(package.IconFile != null) && (package.PackageType == "Module" || package.PackageType == "Auth_System" || package.PackageType == "Container" || package.PackageType == "Skin")"  is complex.
Complex Conditional,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,GetExternalRequest,The conditional expression  "Username != null && Password != null && Domain != null && Username.Trim () != "" && Password.Trim () != null && Domain.Trim () != null"  is complex.
Complex Conditional,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,GetExternalRequest,The conditional expression  "Username != null && Password != null && Username.Trim () != "" && Password.Trim () != null"  is complex.
Complex Conditional,DotNetNuke.Services.Installer.Writers,PackageWriterBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\PackageWriterBase.cs,ParseProjectFile,The conditional expression  "!(fileName.ToLowerInvariant ().StartsWith ("system") || fileName.ToLowerInvariant ().StartsWith ("microsoft") || fileName.ToLowerInvariant () == "dotnetnuke" || fileName.ToLowerInvariant () == "dotnetnuke.webutility" || fileName.ToLowerInvariant () == "dotnetnuke.webcontrols")"  is complex.
Complex Conditional,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendEmail,The conditional expression  "string.IsNullOrEmpty (Host.SMTPServer) || string.IsNullOrEmpty (fromAddress) || string.IsNullOrEmpty (senderAddress) || string.IsNullOrEmpty (toAddress)"  is complex.
Complex Conditional,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,ConditionallyAddUser,The conditional expression  "((user.UserID <= 0 || user.Membership.Approved) && user.Email != string.Empty) && MatchLanguageFilter (user.Profile.PreferredLocale)"  is complex.
Complex Conditional,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,Recipients,The conditional expression  "(userRole.EffectiveDate <= DateTime.Now || Null.IsNull (userRole.EffectiveDate)) && (userRole.ExpiryDate >= DateTime.Now || Null.IsNull (userRole.ExpiryDate))"  is complex.
Complex Conditional,DotNetNuke.Services.Syndication,RssHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Syndication\RssHandler.cs,PopulateChannel,The conditional expression  "Request == null || Settings == null || Settings.ActiveTab == null || ModuleId == Null.NullInteger"  is complex.
Complex Conditional,DotNetNuke.Services.Upgrade.Internals.Steps,ActivateLicenseStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\ActivateLicenseStep.cs,Execute,The conditional expression  "licenseConfig != null && (!string.IsNullOrEmpty (licenseConfig.AccountEmail) && !string.IsNullOrEmpty (licenseConfig.InvoiceNumber) && !string.IsNullOrEmpty (licenseConfig.LicenseType) && !string.IsNullOrEmpty (licenseConfig.WebServer))"  is complex.
Complex Conditional,DotNetNuke.UI.Containers,Container,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\Container.cs,ProcessContentPane,The conditional expression  "viewRoles == PortalSettings.AdministratorRoleName.ToLowerInvariant () && (moduleEditRoles == PortalSettings.AdministratorRoleName.ToLowerInvariant () || String.IsNullOrEmpty (moduleEditRoles)) && pageEditRoles == PortalSettings.AdministratorRoleName.ToLowerInvariant ()"  is complex.
Complex Conditional,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,IsPageAdminInternal,The conditional expression  "TabPermissionController.CanAddContentToPage () || TabPermissionController.CanAddPage () || TabPermissionController.CanAdminPage () || TabPermissionController.CanCopyPage () || TabPermissionController.CanDeletePage () || TabPermissionController.CanExportPage () || TabPermissionController.CanImportPage () || TabPermissionController.CanManagePage ()"  is complex.
Complex Conditional,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,AddChildActions,The conditional expression  "action.Visible && (action.Secure != SecurityAccessLevel.Anonymous || (!ModuleHost.IsViewMode (actionControl.ModuleControl.ModuleContext.Configuration' PortalSettings.Current)) && ModulePermissionController.HasModuleAccess (action.Secure' Null.NullString' actionControl.ModuleControl.ModuleContext.Configuration))"  is complex.
Complex Conditional,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RenderContents,The conditional expression  "SupportsCaching () && IsViewMode (_moduleConfiguration' PortalSettings) && !Globals.IsAdminControl () && !IsVersionRequest ()"  is complex.
Complex Conditional,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,LoadActions,The conditional expression  "Configuration != null && (Configuration.IsShared && Configuration.IsShareableViewOnly) && TabPermissionController.CanAddContentToPage ()"  is complex.
Complex Conditional,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,LoadContainerByPath,The conditional expression  "containerPath.ToLower ().IndexOf ("/skins/") != -1 || containerPath.ToLower ().IndexOf ("/skins\\") != -1 || containerPath.ToLower ().IndexOf ("\\skins\\") != -1 || containerPath.ToLower ().IndexOf ("\\skins/") != -1"  is complex.
Complex Conditional,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,ProcessMasterModules,The conditional expression  "(PortalSettings.ActiveTab.StartDate < DateAndTime.Now && PortalSettings.ActiveTab.EndDate > DateAndTime.Now) || TabPermissionController.CanAdminPage () || Globals.IsLayoutMode ()"  is complex.
Complex Conditional,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,CanDeleteSkin,The conditional expression  "Host.DefaultAdminSkin.ToLowerInvariant ().StartsWith (skin) || Host.DefaultPortalSkin.ToLowerInvariant ().StartsWith (skin) || portalSettings.DefaultAdminSkin.ToLowerInvariant ().StartsWith (skin) || portalSettings.DefaultPortalSkin.ToLowerInvariant ().StartsWith (skin)"  is complex.
Complex Conditional,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,CanDeleteSkin,The conditional expression  "Host.DefaultAdminContainer.ToLowerInvariant ().StartsWith (skin) || Host.DefaultPortalContainer.ToLowerInvariant ().StartsWith (skin) || portalSettings.DefaultAdminContainer.ToLowerInvariant ().StartsWith (skin) || portalSettings.DefaultPortalContainer.ToLowerInvariant ().StartsWith (skin)"  is complex.
Complex Conditional,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoRenderTypeControls,The conditional expression  "(Required && String.IsNullOrEmpty (cboFiles.Items [0].Value)) || (!Required && !String.IsNullOrEmpty (cboFiles.Items [0].Value))"  is complex.
Complex Conditional,DotNetNuke.UI.WebControls,ActionLink,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\ActionLink.cs,IsVisible,The conditional expression  "(RequireEditMode != true || ModuleControl.ModuleContext.PortalSettings.UserMode == PortalSettings.Mode.Edit) || (security == SecurityAccessLevel.Anonymous || security == SecurityAccessLevel.View)"  is complex.
Complex Conditional,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateChildControls,The conditional expression  "(CaptchaWidth.IsEmpty || CaptchaWidth.Type != UnitType.Pixel || CaptchaHeight.IsEmpty || CaptchaHeight.Type != UnitType.Pixel)"  is complex.
Complex Conditional,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildDiv,The conditional expression  "ShowRequired && editInfo.Required && (editInfo.EditMode == PropertyEditorMode.Edit || (editInfo.Required && string.IsNullOrEmpty (strValue)))"  is complex.
Complex Conditional,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildRequiredIcon,The conditional expression  "ShowRequired && editInfo.Required && (editInfo.EditMode == PropertyEditorMode.Edit || (editInfo.Required && string.IsNullOrEmpty (strValue)))"  is complex.
Virtual Method Call from Constructor,DotNetNuke.Services.OutputCache.Providers,DatabaseResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\DatabaseResponseFilter.cs,DatabaseResponseFilter,The constructor "DatabaseResponseFilter" calls a virtual method "GetOutputCacheItemCount".
Empty Catch Block,DotNetNuke.Common.Utilities,ImageUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\ImageUtils.cs,CreateJPG,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Common.Utilities,XmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\XmlUtils.cs,DeSerializeHashtable,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,CreatePortal,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,Redirect,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetReleaseFromRegistry,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Common.Lists,CachedCountryList,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Lists\CachedCountryList.cs,GetCountryList,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Entities.Host,IPFilterInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\IPFilter\IPFilterInfo.cs,Fill,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,SerializeTab,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Security.Roles,RoleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleInfo.cs,Fill,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForTabExternalForwardOrRedirect,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,GetPortal,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Entities.Urls,CacheController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CacheController.cs,RemovedPageIndexCallBack,The method has an empty catch block.
Empty Catch Block,DotNetNuke.ExtensionPoints,SafeDirectoryCatalog,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\ExtensionPoints\SafeDirectoryCatalog.cs,SafeDirectoryCatalog,The method has an empty catch block.
Empty Catch Block,DotNetNuke.ExtensionPoints,SafeDirectoryCatalog,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\ExtensionPoints\SafeDirectoryCatalog.cs,SafeDirectoryCatalog,The method has an empty catch block.
Empty Catch Block,DotNetNuke.ExtensionPoints,SafeDirectoryCatalog,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\ExtensionPoints\SafeDirectoryCatalog.cs,SafeDirectoryCatalog,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Framework,AJAX,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\AJAX.cs,AddScriptManager,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Framework,AJAX,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\AJAX.cs,AddScriptManager,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.FileSystem,FileServerHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileServerHandler.cs,ProcessRequest,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.FileSystem,FileServerHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileServerHandler.cs,ProcessRequest,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.GeneratedImage,IPCount,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\IPCount.cs,CheckIp,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.GeneratedImage,DiskImageStore,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DiskImageStore.cs,PurgeCallback,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.GeneratedImage,DiskImageStore,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DiskImageStore.cs,Add,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.Localization.Persian,PersianCalendar,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Persian\PersianCalendar.cs,GetYear,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.Localization.Persian,PersianCalendar,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Persian\PersianCalendar.cs,GetMonth,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.Localization.Persian,PersianCalendar,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Persian\PersianCalendar.cs,GetDayOfMonth,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.Localization.Persian,PersianCalendar,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Persian\PersianCalendar.cs,GetDayOfYear,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.Localization.Persian,PersianCalendar,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Persian\PersianCalendar.cs,GetDayOfWeek,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddManageUsersModulePermissions,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddManageUsersModulePermissions,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddManageUsersModulePermissions,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ParsePackagesFromApplicationPath,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,ProcessRequest,The method has an empty catch block.
Empty Catch Block,DotNetNuke.UI.Skins,Pane,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Pane.cs,InjectModule,The method has an empty catch block.
Empty Catch Block,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,InjectModule,The method has an empty catch block.
Empty Catch Block,DotNetNuke.UI.WebControls,EditControlFactory,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\EditControlFactory.cs,CreateEditControlInternal,The method has an empty catch block.
Magic Number,DotNetNuke.Common.Utilities,RegexUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RegexUtils.cs,GetCachedRegex,The following statement contains a magic number: if (timeoutSeconds < 1)  	timeoutSeconds = 1;  else if (timeoutSeconds > 10)  	timeoutSeconds = 10;  
Magic Number,DotNetNuke.Common.Utilities,RegexUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RegexUtils.cs,GetCachedRegex,The following statement contains a magic number: if (timeoutSeconds < 1)  	timeoutSeconds = 1;  else if (timeoutSeconds > 10)  	timeoutSeconds = 10;  
Magic Number,DotNetNuke.Common.Utilities,RegexUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RegexUtils.cs,GetCachedRegex,The following statement contains a magic number: if (timeoutSeconds > 10)  	timeoutSeconds = 10;  
Magic Number,DotNetNuke.Common.Utilities,RegexUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RegexUtils.cs,GetCachedRegex,The following statement contains a magic number: if (timeoutSeconds > 10)  	timeoutSeconds = 10;  
Magic Number,DotNetNuke.Common.Utilities,RegexUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RegexUtils.cs,GetCachedRegex,The following statement contains a magic number: timeoutSeconds = 10;  
Magic Number,DotNetNuke.Common.Utilities,RegexUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RegexUtils.cs,GetCachedRegex,The following statement contains a magic number: if (regex == null) {  	regex = new Regex (pattern' options & ~RegexOptions.Compiled' TimeSpan.FromSeconds (timeoutSeconds));  	cache.Insert (key' regex' (DNNCacheDependency)null' Cache.NoAbsoluteExpiration' TimeSpan.FromMinutes (10)' CacheItemPriority.BelowNormal' null);  }  
Magic Number,DotNetNuke.Common.Utilities,RegexUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RegexUtils.cs,GetCachedRegex,The following statement contains a magic number: cache.Insert (key' regex' (DNNCacheDependency)null' Cache.NoAbsoluteExpiration' TimeSpan.FromMinutes (10)' CacheItemPriority.BelowNormal' null);  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetMaxUploadSize,The following statement contains a magic number: if (httpNode != null) {  	maxRequestLength = XmlUtils.GetAttributeValueAsLong (httpNode.CreateNavigator ()' "maxRequestLength"' 0) * 1024;  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetMaxUploadSize,The following statement contains a magic number: maxRequestLength = XmlUtils.GetAttributeValueAsLong (httpNode.CreateNavigator ()' "maxRequestLength"' 0) * 1024;  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetMaxUploadSize,The following statement contains a magic number: if (httpNode == null && Iis7AndAbove ()) {  	const int DefaultMaxAllowedContentLength = 30000000;  	return Math.Min (maxRequestLength' DefaultMaxAllowedContentLength);  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetMaxUploadSize,The following statement contains a magic number: if (httpNode != null) {  	var maxAllowedContentLength = XmlUtils.GetAttributeValueAsLong (httpNode.CreateNavigator ()' "maxAllowedContentLength"' 30000000);  	return Math.Min (maxRequestLength' maxAllowedContentLength);  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetRequestFilterSize,The following statement contains a magic number: if (httpNode != null) {  	var maxAllowedContentLength = XmlUtils.GetAttributeValueAsLong (httpNode.CreateNavigator ()' "maxAllowedContentLength"' 30000000);  	return maxAllowedContentLength / 1024 / 1024;  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetRequestFilterSize,The following statement contains a magic number: if (httpNode != null) {  	var maxAllowedContentLength = XmlUtils.GetAttributeValueAsLong (httpNode.CreateNavigator ()' "maxAllowedContentLength"' 30000000);  	return maxAllowedContentLength / 1024 / 1024;  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetRequestFilterSize,The following statement contains a magic number: if (httpNode != null) {  	var maxAllowedContentLength = XmlUtils.GetAttributeValueAsLong (httpNode.CreateNavigator ()' "maxAllowedContentLength"' 30000000);  	return maxAllowedContentLength / 1024 / 1024;  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetRequestFilterSize,The following statement contains a magic number: return maxAllowedContentLength / 1024 / 1024;  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetRequestFilterSize,The following statement contains a magic number: return maxAllowedContentLength / 1024 / 1024;  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,SetMaxUploadSize,The following statement contains a magic number: if (newSize < 12582912) {  	newSize = 12582912;  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,SetMaxUploadSize,The following statement contains a magic number: if (newSize < 12582912) {  	newSize = 12582912;  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,SetMaxUploadSize,The following statement contains a magic number: newSize = 12582912;  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,SetMaxUploadSize,The following statement contains a magic number: if (httpNode != null) {  	httpNode.Attributes ["maxRequestLength"].InnerText = (newSize / 1024).ToString ("#");  	httpNode.Attributes ["requestLengthDiskThreshold"].InnerText = (newSize / 1024).ToString ("#");  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,SetMaxUploadSize,The following statement contains a magic number: if (httpNode != null) {  	httpNode.Attributes ["maxRequestLength"].InnerText = (newSize / 1024).ToString ("#");  	httpNode.Attributes ["requestLengthDiskThreshold"].InnerText = (newSize / 1024).ToString ("#");  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,SetMaxUploadSize,The following statement contains a magic number: httpNode.Attributes ["maxRequestLength"].InnerText = (newSize / 1024).ToString ("#");  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,SetMaxUploadSize,The following statement contains a magic number: httpNode.Attributes ["requestLengthDiskThreshold"].InnerText = (newSize / 1024).ToString ("#");  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,Iis7AndAbove,The following statement contains a magic number: return Environment.OSVersion.Version.Major >= 6;  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetAuthCookieTimeout,The following statement contains a magic number: return (formsNav != null) ? XmlUtils.GetAttributeValueAsInteger (formsNav' "timeout"' 30) : 30;  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,GetAuthCookieTimeout,The following statement contains a magic number: return (formsNav != null) ? XmlUtils.GetAttributeValueAsInteger (formsNav' "timeout"' 30) : 30;  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,Save,The following statement contains a magic number: try {  	var strFilePath = Globals.ApplicationMapPath + "\\" + filename;  	var objFileAttributes = FileAttributes.Normal;  	if (File.Exists (strFilePath)) {  		//save current file attributes  		objFileAttributes = File.GetAttributes (strFilePath);  		//change to normal ( in case it is flagged as read-only )  		File.SetAttributes (strFilePath' FileAttributes.Normal);  	}  	// Attempt a few times in case the file was locked; occurs during modules' installation due  	// to application restarts where IIS can overlap old application shutdown and new one start.  	const int maxRetires = 4;  	const double miltiplier = 2.5;  	for (var retry = maxRetires; retry >= 0; retry--) {  		try {  			//save the config file  			var settings = new XmlWriterSettings {  				CloseOutput = true'  				Indent = true  			};  			using (var writer = XmlWriter.Create (strFilePath' settings)) {  				xmlDoc.WriteTo (writer);  				writer.Flush ();  				writer.Close ();  			}  			break;  		} catch (IOException exc) {  			if (retry == 0) {  				Logger.Error (exc);  				retMsg = exc.Message;  			}  			// try incremental delay; maybe the file lock is released by then  			Thread.Sleep (((int)(miltiplier * (maxRetires - retry + 1)) * 1000));  		}  	}  	//reset file attributes  	File.SetAttributes (strFilePath' objFileAttributes);  } catch (Exception exc) {  	// the file permissions may not be set properly  	Logger.Error (exc);  	retMsg = exc.Message;  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,Save,The following statement contains a magic number: try {  	var strFilePath = Globals.ApplicationMapPath + "\\" + filename;  	var objFileAttributes = FileAttributes.Normal;  	if (File.Exists (strFilePath)) {  		//save current file attributes  		objFileAttributes = File.GetAttributes (strFilePath);  		//change to normal ( in case it is flagged as read-only )  		File.SetAttributes (strFilePath' FileAttributes.Normal);  	}  	// Attempt a few times in case the file was locked; occurs during modules' installation due  	// to application restarts where IIS can overlap old application shutdown and new one start.  	const int maxRetires = 4;  	const double miltiplier = 2.5;  	for (var retry = maxRetires; retry >= 0; retry--) {  		try {  			//save the config file  			var settings = new XmlWriterSettings {  				CloseOutput = true'  				Indent = true  			};  			using (var writer = XmlWriter.Create (strFilePath' settings)) {  				xmlDoc.WriteTo (writer);  				writer.Flush ();  				writer.Close ();  			}  			break;  		} catch (IOException exc) {  			if (retry == 0) {  				Logger.Error (exc);  				retMsg = exc.Message;  			}  			// try incremental delay; maybe the file lock is released by then  			Thread.Sleep (((int)(miltiplier * (maxRetires - retry + 1)) * 1000));  		}  	}  	//reset file attributes  	File.SetAttributes (strFilePath' objFileAttributes);  } catch (Exception exc) {  	// the file permissions may not be set properly  	Logger.Error (exc);  	retMsg = exc.Message;  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,Save,The following statement contains a magic number: try {  	var strFilePath = Globals.ApplicationMapPath + "\\" + filename;  	var objFileAttributes = FileAttributes.Normal;  	if (File.Exists (strFilePath)) {  		//save current file attributes  		objFileAttributes = File.GetAttributes (strFilePath);  		//change to normal ( in case it is flagged as read-only )  		File.SetAttributes (strFilePath' FileAttributes.Normal);  	}  	// Attempt a few times in case the file was locked; occurs during modules' installation due  	// to application restarts where IIS can overlap old application shutdown and new one start.  	const int maxRetires = 4;  	const double miltiplier = 2.5;  	for (var retry = maxRetires; retry >= 0; retry--) {  		try {  			//save the config file  			var settings = new XmlWriterSettings {  				CloseOutput = true'  				Indent = true  			};  			using (var writer = XmlWriter.Create (strFilePath' settings)) {  				xmlDoc.WriteTo (writer);  				writer.Flush ();  				writer.Close ();  			}  			break;  		} catch (IOException exc) {  			if (retry == 0) {  				Logger.Error (exc);  				retMsg = exc.Message;  			}  			// try incremental delay; maybe the file lock is released by then  			Thread.Sleep (((int)(miltiplier * (maxRetires - retry + 1)) * 1000));  		}  	}  	//reset file attributes  	File.SetAttributes (strFilePath' objFileAttributes);  } catch (Exception exc) {  	// the file permissions may not be set properly  	Logger.Error (exc);  	retMsg = exc.Message;  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,Save,The following statement contains a magic number: for (var retry = maxRetires; retry >= 0; retry--) {  	try {  		//save the config file  		var settings = new XmlWriterSettings {  			CloseOutput = true'  			Indent = true  		};  		using (var writer = XmlWriter.Create (strFilePath' settings)) {  			xmlDoc.WriteTo (writer);  			writer.Flush ();  			writer.Close ();  		}  		break;  	} catch (IOException exc) {  		if (retry == 0) {  			Logger.Error (exc);  			retMsg = exc.Message;  		}  		// try incremental delay; maybe the file lock is released by then  		Thread.Sleep (((int)(miltiplier * (maxRetires - retry + 1)) * 1000));  	}  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,Save,The following statement contains a magic number: try {  	//save the config file  	var settings = new XmlWriterSettings {  		CloseOutput = true'  		Indent = true  	};  	using (var writer = XmlWriter.Create (strFilePath' settings)) {  		xmlDoc.WriteTo (writer);  		writer.Flush ();  		writer.Close ();  	}  	break;  } catch (IOException exc) {  	if (retry == 0) {  		Logger.Error (exc);  		retMsg = exc.Message;  	}  	// try incremental delay; maybe the file lock is released by then  	Thread.Sleep (((int)(miltiplier * (maxRetires - retry + 1)) * 1000));  }  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,Save,The following statement contains a magic number: Thread.Sleep (((int)(miltiplier * (maxRetires - retry + 1)) * 1000));  
Magic Number,DotNetNuke.Common.Utilities,Config,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\Config.cs,UpdateValidationKey,The following statement contains a magic number: if (xmlMachineKey.Attributes ["validationKey"].Value == "F9D1A2D3E1D3E2F7B3D9F90FF3965ABDAC304902") {  	var objSecurity = new PortalSecurity ();  	string validationKey = objSecurity.CreateKey (20);  	XmlUtils.UpdateAttribute (xmlMachineKey' "validationKey"' validationKey);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseUtcTime,The following statement contains a magic number: try {  	// Also We check that drift is not the initial value and it is not out of the maximum UTC offset  	if (DateTime.UtcNow >= _lastUpdateUtc + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftUtc && _driftUtc <= TimeSpan.FromHours (26)) || _driftUtc == TimeSpan.MinValue) {  		_lastUpdateUtc = DateTime.UtcNow;  		_driftUtc = DateTime.UtcNow - DataProvider.Instance ().GetDatabaseTimeUtc ();  	}  } catch (ArgumentOutOfRangeException) {  	_lastUpdateUtc = DateTime.UtcNow;  	_driftUtc = DateTime.UtcNow - DataProvider.Instance ().GetDatabaseTimeUtc ();  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseUtcTime,The following statement contains a magic number: try {  	// Also We check that drift is not the initial value and it is not out of the maximum UTC offset  	if (DateTime.UtcNow >= _lastUpdateUtc + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftUtc && _driftUtc <= TimeSpan.FromHours (26)) || _driftUtc == TimeSpan.MinValue) {  		_lastUpdateUtc = DateTime.UtcNow;  		_driftUtc = DateTime.UtcNow - DataProvider.Instance ().GetDatabaseTimeUtc ();  	}  } catch (ArgumentOutOfRangeException) {  	_lastUpdateUtc = DateTime.UtcNow;  	_driftUtc = DateTime.UtcNow - DataProvider.Instance ().GetDatabaseTimeUtc ();  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseUtcTime,The following statement contains a magic number: try {  	// Also We check that drift is not the initial value and it is not out of the maximum UTC offset  	if (DateTime.UtcNow >= _lastUpdateUtc + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftUtc && _driftUtc <= TimeSpan.FromHours (26)) || _driftUtc == TimeSpan.MinValue) {  		_lastUpdateUtc = DateTime.UtcNow;  		_driftUtc = DateTime.UtcNow - DataProvider.Instance ().GetDatabaseTimeUtc ();  	}  } catch (ArgumentOutOfRangeException) {  	_lastUpdateUtc = DateTime.UtcNow;  	_driftUtc = DateTime.UtcNow - DataProvider.Instance ().GetDatabaseTimeUtc ();  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseUtcTime,The following statement contains a magic number: if (DateTime.UtcNow >= _lastUpdateUtc + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftUtc && _driftUtc <= TimeSpan.FromHours (26)) || _driftUtc == TimeSpan.MinValue) {  	_lastUpdateUtc = DateTime.UtcNow;  	_driftUtc = DateTime.UtcNow - DataProvider.Instance ().GetDatabaseTimeUtc ();  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseUtcTime,The following statement contains a magic number: if (DateTime.UtcNow >= _lastUpdateUtc + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftUtc && _driftUtc <= TimeSpan.FromHours (26)) || _driftUtc == TimeSpan.MinValue) {  	_lastUpdateUtc = DateTime.UtcNow;  	_driftUtc = DateTime.UtcNow - DataProvider.Instance ().GetDatabaseTimeUtc ();  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseUtcTime,The following statement contains a magic number: if (DateTime.UtcNow >= _lastUpdateUtc + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftUtc && _driftUtc <= TimeSpan.FromHours (26)) || _driftUtc == TimeSpan.MinValue) {  	_lastUpdateUtc = DateTime.UtcNow;  	_driftUtc = DateTime.UtcNow - DataProvider.Instance ().GetDatabaseTimeUtc ();  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseLocalTime,The following statement contains a magic number: try {  	// Also We check that drift is not the initial value and it is not out of the maximum UTC offset  	if (DateTime.UtcNow >= _lastUpdateLocal + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftLocal && _driftLocal <= TimeSpan.FromHours (26)) || _driftLocal == TimeSpan.MinValue) {  		_lastUpdateLocal = DateTime.Now;  		_driftLocal = DateTime.Now - DataProvider.Instance ().GetDatabaseTime ();  	}  } catch (ArgumentOutOfRangeException) {  	_lastUpdateLocal = DateTime.Now;  	_driftLocal = DateTime.Now - DataProvider.Instance ().GetDatabaseTime ();  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseLocalTime,The following statement contains a magic number: try {  	// Also We check that drift is not the initial value and it is not out of the maximum UTC offset  	if (DateTime.UtcNow >= _lastUpdateLocal + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftLocal && _driftLocal <= TimeSpan.FromHours (26)) || _driftLocal == TimeSpan.MinValue) {  		_lastUpdateLocal = DateTime.Now;  		_driftLocal = DateTime.Now - DataProvider.Instance ().GetDatabaseTime ();  	}  } catch (ArgumentOutOfRangeException) {  	_lastUpdateLocal = DateTime.Now;  	_driftLocal = DateTime.Now - DataProvider.Instance ().GetDatabaseTime ();  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseLocalTime,The following statement contains a magic number: try {  	// Also We check that drift is not the initial value and it is not out of the maximum UTC offset  	if (DateTime.UtcNow >= _lastUpdateLocal + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftLocal && _driftLocal <= TimeSpan.FromHours (26)) || _driftLocal == TimeSpan.MinValue) {  		_lastUpdateLocal = DateTime.Now;  		_driftLocal = DateTime.Now - DataProvider.Instance ().GetDatabaseTime ();  	}  } catch (ArgumentOutOfRangeException) {  	_lastUpdateLocal = DateTime.Now;  	_driftLocal = DateTime.Now - DataProvider.Instance ().GetDatabaseTime ();  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseLocalTime,The following statement contains a magic number: if (DateTime.UtcNow >= _lastUpdateLocal + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftLocal && _driftLocal <= TimeSpan.FromHours (26)) || _driftLocal == TimeSpan.MinValue) {  	_lastUpdateLocal = DateTime.Now;  	_driftLocal = DateTime.Now - DataProvider.Instance ().GetDatabaseTime ();  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseLocalTime,The following statement contains a magic number: if (DateTime.UtcNow >= _lastUpdateLocal + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftLocal && _driftLocal <= TimeSpan.FromHours (26)) || _driftLocal == TimeSpan.MinValue) {  	_lastUpdateLocal = DateTime.Now;  	_driftLocal = DateTime.Now - DataProvider.Instance ().GetDatabaseTime ();  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,GetDatabaseLocalTime,The following statement contains a magic number: if (DateTime.UtcNow >= _lastUpdateLocal + TimeSpan.FromMinutes (15) || !(TimeSpan.FromHours (-26) <= _driftLocal && _driftLocal <= TimeSpan.FromHours (26)) || _driftLocal == TimeSpan.MinValue) {  	_lastUpdateLocal = DateTime.Now;  	_driftLocal = DateTime.Now - DataProvider.Instance ().GetDatabaseTime ();  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalSeconds < 60) {  	return String.Format (Localization.GetString ("SecondsAgo")' (int)utcTimeDifference.TotalSeconds);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalMinutes < 60) {  	if (utcTimeDifference.TotalMinutes < 2) {  		return String.Format (Localization.GetString ("MinuteAgo")' (int)utcTimeDifference.TotalMinutes);  	}  	return String.Format (Localization.GetString ("MinutesAgo")' (int)utcTimeDifference.TotalMinutes);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalMinutes < 60) {  	if (utcTimeDifference.TotalMinutes < 2) {  		return String.Format (Localization.GetString ("MinuteAgo")' (int)utcTimeDifference.TotalMinutes);  	}  	return String.Format (Localization.GetString ("MinutesAgo")' (int)utcTimeDifference.TotalMinutes);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalMinutes < 2) {  	return String.Format (Localization.GetString ("MinuteAgo")' (int)utcTimeDifference.TotalMinutes);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalHours < 24) {  	if (utcTimeDifference.TotalHours < 2) {  		return String.Format (Localization.GetString ("HourAgo")' (int)utcTimeDifference.TotalHours);  	}  	return String.Format (Localization.GetString ("HoursAgo")' (int)utcTimeDifference.TotalHours);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalHours < 24) {  	if (utcTimeDifference.TotalHours < 2) {  		return String.Format (Localization.GetString ("HourAgo")' (int)utcTimeDifference.TotalHours);  	}  	return String.Format (Localization.GetString ("HoursAgo")' (int)utcTimeDifference.TotalHours);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalHours < 2) {  	return String.Format (Localization.GetString ("HourAgo")' (int)utcTimeDifference.TotalHours);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 7) {  	if (utcTimeDifference.TotalDays < 2) {  		return String.Format (Localization.GetString ("DayAgo")' (int)utcTimeDifference.TotalDays);  	}  	return String.Format (Localization.GetString ("DaysAgo")' (int)utcTimeDifference.TotalDays);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 7) {  	if (utcTimeDifference.TotalDays < 2) {  		return String.Format (Localization.GetString ("DayAgo")' (int)utcTimeDifference.TotalDays);  	}  	return String.Format (Localization.GetString ("DaysAgo")' (int)utcTimeDifference.TotalDays);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 2) {  	return String.Format (Localization.GetString ("DayAgo")' (int)utcTimeDifference.TotalDays);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 30) {  	if (utcTimeDifference.TotalDays < 14) {  		return String.Format (Localization.GetString ("WeekAgo")' (int)utcTimeDifference.TotalDays / 7);  	}  	return String.Format (Localization.GetString ("WeeksAgo")' (int)utcTimeDifference.TotalDays / 7);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 30) {  	if (utcTimeDifference.TotalDays < 14) {  		return String.Format (Localization.GetString ("WeekAgo")' (int)utcTimeDifference.TotalDays / 7);  	}  	return String.Format (Localization.GetString ("WeeksAgo")' (int)utcTimeDifference.TotalDays / 7);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 30) {  	if (utcTimeDifference.TotalDays < 14) {  		return String.Format (Localization.GetString ("WeekAgo")' (int)utcTimeDifference.TotalDays / 7);  	}  	return String.Format (Localization.GetString ("WeeksAgo")' (int)utcTimeDifference.TotalDays / 7);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 30) {  	if (utcTimeDifference.TotalDays < 14) {  		return String.Format (Localization.GetString ("WeekAgo")' (int)utcTimeDifference.TotalDays / 7);  	}  	return String.Format (Localization.GetString ("WeeksAgo")' (int)utcTimeDifference.TotalDays / 7);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 14) {  	return String.Format (Localization.GetString ("WeekAgo")' (int)utcTimeDifference.TotalDays / 7);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 14) {  	return String.Format (Localization.GetString ("WeekAgo")' (int)utcTimeDifference.TotalDays / 7);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: return String.Format (Localization.GetString ("WeekAgo")' (int)utcTimeDifference.TotalDays / 7);  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: return String.Format (Localization.GetString ("WeeksAgo")' (int)utcTimeDifference.TotalDays / 7);  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 180) {  	if (utcTimeDifference.TotalDays < 60) {  		return String.Format (Localization.GetString ("MonthAgo")' (int)utcTimeDifference.TotalDays / 30);  	}  	return String.Format (Localization.GetString ("MonthsAgo")' (int)utcTimeDifference.TotalDays / 30);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 180) {  	if (utcTimeDifference.TotalDays < 60) {  		return String.Format (Localization.GetString ("MonthAgo")' (int)utcTimeDifference.TotalDays / 30);  	}  	return String.Format (Localization.GetString ("MonthsAgo")' (int)utcTimeDifference.TotalDays / 30);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 180) {  	if (utcTimeDifference.TotalDays < 60) {  		return String.Format (Localization.GetString ("MonthAgo")' (int)utcTimeDifference.TotalDays / 30);  	}  	return String.Format (Localization.GetString ("MonthsAgo")' (int)utcTimeDifference.TotalDays / 30);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 180) {  	if (utcTimeDifference.TotalDays < 60) {  		return String.Format (Localization.GetString ("MonthAgo")' (int)utcTimeDifference.TotalDays / 30);  	}  	return String.Format (Localization.GetString ("MonthsAgo")' (int)utcTimeDifference.TotalDays / 30);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 60) {  	return String.Format (Localization.GetString ("MonthAgo")' (int)utcTimeDifference.TotalDays / 30);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: if (utcTimeDifference.TotalDays < 60) {  	return String.Format (Localization.GetString ("MonthAgo")' (int)utcTimeDifference.TotalDays / 30);  }  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: return String.Format (Localization.GetString ("MonthAgo")' (int)utcTimeDifference.TotalDays / 30);  
Magic Number,DotNetNuke.Common.Utilities,DateUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DateUtils.cs,CalculateDateForDisplay,The following statement contains a magic number: return String.Format (Localization.GetString ("MonthsAgo")' (int)utcTimeDifference.TotalDays / 30);  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,WriteStream,The following statement contains a magic number: try {  	//Total bytes to read:  	lngDataToRead = objStream.Length;  	//Read the bytes.  	while (lngDataToRead > 0) {  		//Verify that the client is connected.  		if (objResponse.IsClientConnected) {  			//Read the data in buffer  			intLength = objStream.Read (bytBuffer' 0' 10000);  			//Write the data to the current output stream.  			objResponse.OutputStream.Write (bytBuffer' 0' intLength);  			//Flush the data to the HTML output.  			objResponse.Flush ();  			lngDataToRead = lngDataToRead - intLength;  		} else {  			lngDataToRead = -1;  		}  	}  } catch (Exception ex) {  	Logger.Error (ex);  	objResponse.Write ("Error : " + ex.Message);  } finally {  	if (objStream != null) {  		objStream.Close ();  		objStream.Dispose ();  	}  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,WriteStream,The following statement contains a magic number: while (lngDataToRead > 0) {  	//Verify that the client is connected.  	if (objResponse.IsClientConnected) {  		//Read the data in buffer  		intLength = objStream.Read (bytBuffer' 0' 10000);  		//Write the data to the current output stream.  		objResponse.OutputStream.Write (bytBuffer' 0' intLength);  		//Flush the data to the HTML output.  		objResponse.Flush ();  		lngDataToRead = lngDataToRead - intLength;  	} else {  		lngDataToRead = -1;  	}  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,WriteStream,The following statement contains a magic number: if (objResponse.IsClientConnected) {  	//Read the data in buffer  	intLength = objStream.Read (bytBuffer' 0' 10000);  	//Write the data to the current output stream.  	objResponse.OutputStream.Write (bytBuffer' 0' intLength);  	//Flush the data to the HTML output.  	objResponse.Flush ();  	lngDataToRead = lngDataToRead - intLength;  } else {  	lngDataToRead = -1;  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,WriteStream,The following statement contains a magic number: intLength = objStream.Read (bytBuffer' 0' 10000);  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,AddFolder,The following statement contains a magic number: if (folderMapping != null) {  	#pragma  	AddFolder (portalSettings' parentFolder' newFolder' folderMapping.FolderMappingID);  	#pragma  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,AddFolder,The following statement contains a magic number: if (folderMapping != null) {  	#pragma  	AddFolder (portalSettings' parentFolder' newFolder' folderMapping.FolderMappingID);  	#pragma  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,AddFolder,The following statement contains a magic number: if (folderMapping != null) {  	#pragma  	AddFolder (portalSettings' parentFolder' newFolder' folderMapping.FolderMappingID);  	#pragma  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,AddFolder,The following statement contains a magic number: if (folderMapping != null) {  	#pragma  	AddFolder (portalSettings' parentFolder' newFolder' folderMapping.FolderMappingID);  	#pragma  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,DownloadFile,The following statement contains a magic number: if (objFile.Exists) {  	objResponse.ClearContent ();  	objResponse.ClearHeaders ();  	objResponse.AppendHeader ("content-disposition"' "attachment; filename=\"" + filename + "\"");  	objResponse.AppendHeader ("Content-Length"' objFile.Length.ToString ());  	objResponse.ContentType = new FileManager ().GetContentType (objFile.Extension.Replace ("."' ""));  	#pragma  	WriteFile (objFile.FullName);  	#pragma  	objResponse.Flush ();  	objResponse.End ();  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,DownloadFile,The following statement contains a magic number: if (objFile.Exists) {  	objResponse.ClearContent ();  	objResponse.ClearHeaders ();  	objResponse.AppendHeader ("content-disposition"' "attachment; filename=\"" + filename + "\"");  	objResponse.AppendHeader ("Content-Length"' objFile.Length.ToString ());  	objResponse.ContentType = new FileManager ().GetContentType (objFile.Extension.Replace ("."' ""));  	#pragma  	WriteFile (objFile.FullName);  	#pragma  	objResponse.Flush ();  	objResponse.End ();  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,DownloadFile,The following statement contains a magic number: if (objFile.Exists) {  	objResponse.ClearContent ();  	objResponse.ClearHeaders ();  	objResponse.AppendHeader ("content-disposition"' "attachment; filename=\"" + filename + "\"");  	objResponse.AppendHeader ("Content-Length"' objFile.Length.ToString ());  	objResponse.ContentType = new FileManager ().GetContentType (objFile.Extension.Replace ("."' ""));  	#pragma  	WriteFile (objFile.FullName);  	#pragma  	objResponse.Flush ();  	objResponse.End ();  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,DownloadFile,The following statement contains a magic number: if (objFile.Exists) {  	objResponse.ClearContent ();  	objResponse.ClearHeaders ();  	objResponse.AppendHeader ("content-disposition"' "attachment; filename=\"" + filename + "\"");  	objResponse.AppendHeader ("Content-Length"' objFile.Length.ToString ());  	objResponse.ContentType = new FileManager ().GetContentType (objFile.Extension.Replace ("."' ""));  	#pragma  	WriteFile (objFile.FullName);  	#pragma  	objResponse.Flush ();  	objResponse.End ();  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,UnzipResources,The following statement contains a magic number: try {  	var zipEntry = zipStream.GetNextEntry ();  	while (zipEntry != null) {  		HtmlUtils.WriteKeepAlive ();  		var localFileName = zipEntry.Name;  		var relativeDir = Path.GetDirectoryName (zipEntry.Name);  		if (!string.IsNullOrEmpty (relativeDir) && (!Directory.Exists (Path.Combine (destPath' relativeDir)))) {  			Directory.Create (Path.Combine (destPath' relativeDir)' true);  		}  		if (!zipEntry.IsDirectory && (!string.IsNullOrEmpty (localFileName))) {  			var fileNamePath = Path.Combine (destPath' localFileName).Replace ("/"' "\\");  			try {  				if (File.Exists (fileNamePath)) {  					File.SetAttributes (fileNamePath' FileAttributes.Normal);  					File.Delete (fileNamePath);  				}  				FileStream objFileStream = null;  				try {  					File.Create (fileNamePath);  					objFileStream = File.Open (fileNamePath);  					int intSize = 2048;  					var arrData = new byte[2048];  					intSize = zipStream.Read (arrData' 0' arrData.Length);  					while (intSize > 0) {  						objFileStream.Write (arrData' 0' intSize);  						intSize = zipStream.Read (arrData' 0' arrData.Length);  					}  				} finally {  					if (objFileStream != null) {  						objFileStream.Close ();  						objFileStream.Dispose ();  					}  				}  			} catch (Exception ex) {  				Logger.Error (ex);  			}  		}  		zipEntry = zipStream.GetNextEntry ();  	}  } finally {  	if (zipStream != null) {  		zipStream.Close ();  		zipStream.Dispose ();  	}  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,UnzipResources,The following statement contains a magic number: try {  	var zipEntry = zipStream.GetNextEntry ();  	while (zipEntry != null) {  		HtmlUtils.WriteKeepAlive ();  		var localFileName = zipEntry.Name;  		var relativeDir = Path.GetDirectoryName (zipEntry.Name);  		if (!string.IsNullOrEmpty (relativeDir) && (!Directory.Exists (Path.Combine (destPath' relativeDir)))) {  			Directory.Create (Path.Combine (destPath' relativeDir)' true);  		}  		if (!zipEntry.IsDirectory && (!string.IsNullOrEmpty (localFileName))) {  			var fileNamePath = Path.Combine (destPath' localFileName).Replace ("/"' "\\");  			try {  				if (File.Exists (fileNamePath)) {  					File.SetAttributes (fileNamePath' FileAttributes.Normal);  					File.Delete (fileNamePath);  				}  				FileStream objFileStream = null;  				try {  					File.Create (fileNamePath);  					objFileStream = File.Open (fileNamePath);  					int intSize = 2048;  					var arrData = new byte[2048];  					intSize = zipStream.Read (arrData' 0' arrData.Length);  					while (intSize > 0) {  						objFileStream.Write (arrData' 0' intSize);  						intSize = zipStream.Read (arrData' 0' arrData.Length);  					}  				} finally {  					if (objFileStream != null) {  						objFileStream.Close ();  						objFileStream.Dispose ();  					}  				}  			} catch (Exception ex) {  				Logger.Error (ex);  			}  		}  		zipEntry = zipStream.GetNextEntry ();  	}  } finally {  	if (zipStream != null) {  		zipStream.Close ();  		zipStream.Dispose ();  	}  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,UnzipResources,The following statement contains a magic number: while (zipEntry != null) {  	HtmlUtils.WriteKeepAlive ();  	var localFileName = zipEntry.Name;  	var relativeDir = Path.GetDirectoryName (zipEntry.Name);  	if (!string.IsNullOrEmpty (relativeDir) && (!Directory.Exists (Path.Combine (destPath' relativeDir)))) {  		Directory.Create (Path.Combine (destPath' relativeDir)' true);  	}  	if (!zipEntry.IsDirectory && (!string.IsNullOrEmpty (localFileName))) {  		var fileNamePath = Path.Combine (destPath' localFileName).Replace ("/"' "\\");  		try {  			if (File.Exists (fileNamePath)) {  				File.SetAttributes (fileNamePath' FileAttributes.Normal);  				File.Delete (fileNamePath);  			}  			FileStream objFileStream = null;  			try {  				File.Create (fileNamePath);  				objFileStream = File.Open (fileNamePath);  				int intSize = 2048;  				var arrData = new byte[2048];  				intSize = zipStream.Read (arrData' 0' arrData.Length);  				while (intSize > 0) {  					objFileStream.Write (arrData' 0' intSize);  					intSize = zipStream.Read (arrData' 0' arrData.Length);  				}  			} finally {  				if (objFileStream != null) {  					objFileStream.Close ();  					objFileStream.Dispose ();  				}  			}  		} catch (Exception ex) {  			Logger.Error (ex);  		}  	}  	zipEntry = zipStream.GetNextEntry ();  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,UnzipResources,The following statement contains a magic number: while (zipEntry != null) {  	HtmlUtils.WriteKeepAlive ();  	var localFileName = zipEntry.Name;  	var relativeDir = Path.GetDirectoryName (zipEntry.Name);  	if (!string.IsNullOrEmpty (relativeDir) && (!Directory.Exists (Path.Combine (destPath' relativeDir)))) {  		Directory.Create (Path.Combine (destPath' relativeDir)' true);  	}  	if (!zipEntry.IsDirectory && (!string.IsNullOrEmpty (localFileName))) {  		var fileNamePath = Path.Combine (destPath' localFileName).Replace ("/"' "\\");  		try {  			if (File.Exists (fileNamePath)) {  				File.SetAttributes (fileNamePath' FileAttributes.Normal);  				File.Delete (fileNamePath);  			}  			FileStream objFileStream = null;  			try {  				File.Create (fileNamePath);  				objFileStream = File.Open (fileNamePath);  				int intSize = 2048;  				var arrData = new byte[2048];  				intSize = zipStream.Read (arrData' 0' arrData.Length);  				while (intSize > 0) {  					objFileStream.Write (arrData' 0' intSize);  					intSize = zipStream.Read (arrData' 0' arrData.Length);  				}  			} finally {  				if (objFileStream != null) {  					objFileStream.Close ();  					objFileStream.Dispose ();  				}  			}  		} catch (Exception ex) {  			Logger.Error (ex);  		}  	}  	zipEntry = zipStream.GetNextEntry ();  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,UnzipResources,The following statement contains a magic number: if (!zipEntry.IsDirectory && (!string.IsNullOrEmpty (localFileName))) {  	var fileNamePath = Path.Combine (destPath' localFileName).Replace ("/"' "\\");  	try {  		if (File.Exists (fileNamePath)) {  			File.SetAttributes (fileNamePath' FileAttributes.Normal);  			File.Delete (fileNamePath);  		}  		FileStream objFileStream = null;  		try {  			File.Create (fileNamePath);  			objFileStream = File.Open (fileNamePath);  			int intSize = 2048;  			var arrData = new byte[2048];  			intSize = zipStream.Read (arrData' 0' arrData.Length);  			while (intSize > 0) {  				objFileStream.Write (arrData' 0' intSize);  				intSize = zipStream.Read (arrData' 0' arrData.Length);  			}  		} finally {  			if (objFileStream != null) {  				objFileStream.Close ();  				objFileStream.Dispose ();  			}  		}  	} catch (Exception ex) {  		Logger.Error (ex);  	}  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,UnzipResources,The following statement contains a magic number: if (!zipEntry.IsDirectory && (!string.IsNullOrEmpty (localFileName))) {  	var fileNamePath = Path.Combine (destPath' localFileName).Replace ("/"' "\\");  	try {  		if (File.Exists (fileNamePath)) {  			File.SetAttributes (fileNamePath' FileAttributes.Normal);  			File.Delete (fileNamePath);  		}  		FileStream objFileStream = null;  		try {  			File.Create (fileNamePath);  			objFileStream = File.Open (fileNamePath);  			int intSize = 2048;  			var arrData = new byte[2048];  			intSize = zipStream.Read (arrData' 0' arrData.Length);  			while (intSize > 0) {  				objFileStream.Write (arrData' 0' intSize);  				intSize = zipStream.Read (arrData' 0' arrData.Length);  			}  		} finally {  			if (objFileStream != null) {  				objFileStream.Close ();  				objFileStream.Dispose ();  			}  		}  	} catch (Exception ex) {  		Logger.Error (ex);  	}  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,UnzipResources,The following statement contains a magic number: try {  	if (File.Exists (fileNamePath)) {  		File.SetAttributes (fileNamePath' FileAttributes.Normal);  		File.Delete (fileNamePath);  	}  	FileStream objFileStream = null;  	try {  		File.Create (fileNamePath);  		objFileStream = File.Open (fileNamePath);  		int intSize = 2048;  		var arrData = new byte[2048];  		intSize = zipStream.Read (arrData' 0' arrData.Length);  		while (intSize > 0) {  			objFileStream.Write (arrData' 0' intSize);  			intSize = zipStream.Read (arrData' 0' arrData.Length);  		}  	} finally {  		if (objFileStream != null) {  			objFileStream.Close ();  			objFileStream.Dispose ();  		}  	}  } catch (Exception ex) {  	Logger.Error (ex);  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,UnzipResources,The following statement contains a magic number: try {  	if (File.Exists (fileNamePath)) {  		File.SetAttributes (fileNamePath' FileAttributes.Normal);  		File.Delete (fileNamePath);  	}  	FileStream objFileStream = null;  	try {  		File.Create (fileNamePath);  		objFileStream = File.Open (fileNamePath);  		int intSize = 2048;  		var arrData = new byte[2048];  		intSize = zipStream.Read (arrData' 0' arrData.Length);  		while (intSize > 0) {  			objFileStream.Write (arrData' 0' intSize);  			intSize = zipStream.Read (arrData' 0' arrData.Length);  		}  	} finally {  		if (objFileStream != null) {  			objFileStream.Close ();  			objFileStream.Dispose ();  		}  	}  } catch (Exception ex) {  	Logger.Error (ex);  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,UnzipResources,The following statement contains a magic number: try {  	File.Create (fileNamePath);  	objFileStream = File.Open (fileNamePath);  	int intSize = 2048;  	var arrData = new byte[2048];  	intSize = zipStream.Read (arrData' 0' arrData.Length);  	while (intSize > 0) {  		objFileStream.Write (arrData' 0' intSize);  		intSize = zipStream.Read (arrData' 0' arrData.Length);  	}  } finally {  	if (objFileStream != null) {  		objFileStream.Close ();  		objFileStream.Dispose ();  	}  }  
Magic Number,DotNetNuke.Common.Utilities,FileSystemUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\FileSystemUtils.cs,UnzipResources,The following statement contains a magic number: try {  	File.Create (fileNamePath);  	objFileStream = File.Open (fileNamePath);  	int intSize = 2048;  	var arrData = new byte[2048];  	intSize = zipStream.Read (arrData' 0' arrData.Length);  	while (intSize > 0) {  		objFileStream.Write (arrData' 0' intSize);  		intSize = zipStream.Read (arrData' 0' arrData.Length);  	}  } finally {  	if (objFileStream != null) {  		objFileStream.Close ();  		objFileStream.Dispose ();  	}  }  
Magic Number,DotNetNuke.Common.Utilities,HtmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\HtmlUtils.cs,WriteFeedback,The following statement contains a magic number: if (showInstallationMessages) {  	//Get the time of the feedback  	TimeSpan timeElapsed = Upgrade.RunTime;  	string strMessage = "";  	if (showtime) {  		strMessage += timeElapsed.ToString ().Substring (0' timeElapsed.ToString ().LastIndexOf ("."' StringComparison.Ordinal) + 4) + " -";  	}  	for (int i = 0; i <= indent; i++) {  		strMessage += "&nbsp;";  	}  	strMessage += message;  	response.Write (strMessage);  	response.Flush ();  }  
Magic Number,DotNetNuke.Common.Utilities,HtmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\HtmlUtils.cs,WriteFeedback,The following statement contains a magic number: if (showtime) {  	strMessage += timeElapsed.ToString ().Substring (0' timeElapsed.ToString ().LastIndexOf ("."' StringComparison.Ordinal) + 4) + " -";  }  
Magic Number,DotNetNuke.Common.Utilities,HtmlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\HtmlUtils.cs,WriteFeedback,The following statement contains a magic number: strMessage += timeElapsed.ToString ().Substring (0' timeElapsed.ToString ().LastIndexOf ("."' StringComparison.Ordinal) + 4) + " -";  
Magic Number,DotNetNuke.Common.Utilities,ImageUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\ImageUtils.cs,CreateImage,The following statement contains a magic number: using (var fileContent = File.OpenRead (tmp))  	using (var content = CreateImage (fileContent' intHeight' intWidth' fi.Extension)) {  		string sFileExt = fi.Extension;  		string sFileNoExtension = Path.GetFileNameWithoutExtension (sFile);  		sFile += sFileNoExtension + sFileExt;  		if (FileWrapper.Instance.Exists (sFile)) {  			FileWrapper.Instance.SetAttributes (sFile' FileAttributes.Normal);  			FileWrapper.Instance.Delete (sFile);  		}  		var arrData = new byte[2048];  		using (Stream outStream = FileWrapper.Instance.Create (sFile)) {  			long originalPosition = content.Position;  			content.Position = 0;  			try {  				int intLength = content.Read (arrData' 0' arrData.Length);  				while (intLength > 0) {  					outStream.Write (arrData' 0' intLength);  					intLength = content.Read (arrData' 0' arrData.Length);  				}  			} finally {  				content.Position = originalPosition;  			}  		}  	}  
Magic Number,DotNetNuke.Common.Utilities,ImageUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\ImageUtils.cs,CreateImage,The following statement contains a magic number: using (var content = CreateImage (fileContent' intHeight' intWidth' fi.Extension)) {  	string sFileExt = fi.Extension;  	string sFileNoExtension = Path.GetFileNameWithoutExtension (sFile);  	sFile += sFileNoExtension + sFileExt;  	if (FileWrapper.Instance.Exists (sFile)) {  		FileWrapper.Instance.SetAttributes (sFile' FileAttributes.Normal);  		FileWrapper.Instance.Delete (sFile);  	}  	var arrData = new byte[2048];  	using (Stream outStream = FileWrapper.Instance.Create (sFile)) {  		long originalPosition = content.Position;  		content.Position = 0;  		try {  			int intLength = content.Read (arrData' 0' arrData.Length);  			while (intLength > 0) {  				outStream.Write (arrData' 0' intLength);  				intLength = content.Read (arrData' 0' arrData.Length);  			}  		} finally {  			content.Position = originalPosition;  		}  	}  }  
Magic Number,DotNetNuke.Common.Utilities,EscapedString,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\EscapedString.cs,EndsInEscapeMode,The following statement contains a magic number: return escapeCount % 2 == 1;  
Magic Number,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,PopUpUrl,The following statement contains a magic number: return PopUpUrl (url' control' portalSettings' onClickEvent' responseRedirect' 550' 950);  
Magic Number,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,PopUpUrl,The following statement contains a magic number: return PopUpUrl (url' control' portalSettings' onClickEvent' responseRedirect' 550' 950);  
Magic Number,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,ValidReturnUrl,The following statement contains a magic number: if (url.StartsWith ("//")) {  	var urlWithNoProtocol = url.Substring (2);  	var portalSettings = PortalSettings.Current;  	if (portalSettings == null || !urlWithNoProtocol.StartsWith (portalSettings.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase)) {  		url = string.Empty;  	}  }  
Magic Number,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,Handle404Exception,The following statement contains a magic number: if (portalSetting.ErrorPage404 > Null.NullInteger) {  	response.Redirect (Globals.NavigateURL (portalSetting.ErrorPage404' string.Empty' "status=404"));  } else {  	response.ClearContent ();  	response.TrySkipIisCustomErrors = true;  	response.StatusCode = 404;  	response.Status = "404 Not Found";  	response.Write ("404 Not Found");  	response.End ();  }  
Magic Number,DotNetNuke.Common.Utilities,UrlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\UrlUtils.cs,Handle404Exception,The following statement contains a magic number: response.StatusCode = 404;  
Magic Number,DotNetNuke.Common.Utilities,SqlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\SqlUtils.cs,TranslateSQLException,The following statement contains a magic number: for (i = 0; i <= exc.Errors.Count - 1; i++) {  	SqlError sqlError = exc.Errors [i];  	string filteredMessage = string.Empty;  	switch (sqlError.Number) {  	case 17:  		filteredMessage = "Sql server does not exist or access denied";  		break;  	case 4060:  		filteredMessage = "Invalid Database";  		break;  	case 18456:  		filteredMessage = "Sql login failed";  		break;  	case 1205:  		filteredMessage = "Sql deadlock victim";  		break;  	default:  		filteredMessage = exc.ToString ();  		break;  	}  	errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Procedure:</b> " + sqlError.Procedure + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/>");  }  
Magic Number,DotNetNuke.Common.Utilities,SqlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\SqlUtils.cs,TranslateSQLException,The following statement contains a magic number: for (i = 0; i <= exc.Errors.Count - 1; i++) {  	SqlError sqlError = exc.Errors [i];  	string filteredMessage = string.Empty;  	switch (sqlError.Number) {  	case 17:  		filteredMessage = "Sql server does not exist or access denied";  		break;  	case 4060:  		filteredMessage = "Invalid Database";  		break;  	case 18456:  		filteredMessage = "Sql login failed";  		break;  	case 1205:  		filteredMessage = "Sql deadlock victim";  		break;  	default:  		filteredMessage = exc.ToString ();  		break;  	}  	errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Procedure:</b> " + sqlError.Procedure + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/>");  }  
Magic Number,DotNetNuke.Common.Utilities,SqlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\SqlUtils.cs,TranslateSQLException,The following statement contains a magic number: for (i = 0; i <= exc.Errors.Count - 1; i++) {  	SqlError sqlError = exc.Errors [i];  	string filteredMessage = string.Empty;  	switch (sqlError.Number) {  	case 17:  		filteredMessage = "Sql server does not exist or access denied";  		break;  	case 4060:  		filteredMessage = "Invalid Database";  		break;  	case 18456:  		filteredMessage = "Sql login failed";  		break;  	case 1205:  		filteredMessage = "Sql deadlock victim";  		break;  	default:  		filteredMessage = exc.ToString ();  		break;  	}  	errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Procedure:</b> " + sqlError.Procedure + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/>");  }  
Magic Number,DotNetNuke.Common.Utilities,SqlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\SqlUtils.cs,TranslateSQLException,The following statement contains a magic number: for (i = 0; i <= exc.Errors.Count - 1; i++) {  	SqlError sqlError = exc.Errors [i];  	string filteredMessage = string.Empty;  	switch (sqlError.Number) {  	case 17:  		filteredMessage = "Sql server does not exist or access denied";  		break;  	case 4060:  		filteredMessage = "Invalid Database";  		break;  	case 18456:  		filteredMessage = "Sql login failed";  		break;  	case 1205:  		filteredMessage = "Sql deadlock victim";  		break;  	default:  		filteredMessage = exc.ToString ();  		break;  	}  	errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Procedure:</b> " + sqlError.Procedure + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/>");  }  
Magic Number,DotNetNuke.Common.Utilities,SqlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\SqlUtils.cs,TranslateSQLException,The following statement contains a magic number: switch (sqlError.Number) {  case 17:  	filteredMessage = "Sql server does not exist or access denied";  	break;  case 4060:  	filteredMessage = "Invalid Database";  	break;  case 18456:  	filteredMessage = "Sql login failed";  	break;  case 1205:  	filteredMessage = "Sql deadlock victim";  	break;  default:  	filteredMessage = exc.ToString ();  	break;  }  
Magic Number,DotNetNuke.Common.Utilities,SqlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\SqlUtils.cs,TranslateSQLException,The following statement contains a magic number: switch (sqlError.Number) {  case 17:  	filteredMessage = "Sql server does not exist or access denied";  	break;  case 4060:  	filteredMessage = "Invalid Database";  	break;  case 18456:  	filteredMessage = "Sql login failed";  	break;  case 1205:  	filteredMessage = "Sql deadlock victim";  	break;  default:  	filteredMessage = exc.ToString ();  	break;  }  
Magic Number,DotNetNuke.Common.Utilities,SqlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\SqlUtils.cs,TranslateSQLException,The following statement contains a magic number: switch (sqlError.Number) {  case 17:  	filteredMessage = "Sql server does not exist or access denied";  	break;  case 4060:  	filteredMessage = "Invalid Database";  	break;  case 18456:  	filteredMessage = "Sql login failed";  	break;  case 1205:  	filteredMessage = "Sql deadlock victim";  	break;  default:  	filteredMessage = exc.ToString ();  	break;  }  
Magic Number,DotNetNuke.Common.Utilities,SqlUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\SqlUtils.cs,TranslateSQLException,The following statement contains a magic number: switch (sqlError.Number) {  case 17:  	filteredMessage = "Sql server does not exist or access denied";  	break;  case 4060:  	filteredMessage = "Invalid Database";  	break;  case 18456:  	filteredMessage = "Sql login failed";  	break;  case 1205:  	filteredMessage = "Sql deadlock victim";  	break;  default:  	filteredMessage = exc.ToString ();  	break;  }  
Magic Number,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,CanConnect,The following statement contains a magic number: try {  	PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' owner + qualifier + "GetDatabaseVersion");  } catch (SqlException ex) {  	if (ex.Errors.Cast<SqlError> ().Any (c => !(c.Number == 2812 && c.Class == 16))) {  		connectionValid = false;  	}  }  
Magic Number,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,CanConnect,The following statement contains a magic number: try {  	PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' owner + qualifier + "GetDatabaseVersion");  } catch (SqlException ex) {  	if (ex.Errors.Cast<SqlError> ().Any (c => !(c.Number == 2812 && c.Class == 16))) {  		connectionValid = false;  	}  }  
Magic Number,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,CanConnect,The following statement contains a magic number: if (ex.Errors.Cast<SqlError> ().Any (c => !(c.Number == 2812 && c.Class == 16))) {  	connectionValid = false;  }  
Magic Number,DotNetNuke.Data,SqlDataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\SqlDataProvider.cs,CanConnect,The following statement contains a magic number: if (ex.Errors.Cast<SqlError> ().Any (c => !(c.Number == 2812 && c.Class == 16))) {  	connectionValid = false;  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetVersionInternal,The following statement contains a magic number: try {  	dr = current ? GetDatabaseVersion () : GetDatabaseInstallVersion ();  	if (dr.Read ()) {  		version = new Version (Convert.ToInt32 (dr ["Major"])' Convert.ToInt32 (dr ["Minor"])' Convert.ToInt32 (dr ["Build"]));  	}  } catch (SqlException ex) {  	bool noStoredProc = false;  	for (int i = 0; i <= ex.Errors.Count - 1; i++) {  		SqlError sqlError = ex.Errors [i];  		if (sqlError.Number == 2812 && sqlError.Class == 16)//2812 - 16 means SP could not be found  		 {  			noStoredProc = true;  			break;  		}  	}  	if (!noStoredProc) {  		throw;  	}  } finally {  	CBO.CloseDataReader (dr' true);  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetVersionInternal,The following statement contains a magic number: try {  	dr = current ? GetDatabaseVersion () : GetDatabaseInstallVersion ();  	if (dr.Read ()) {  		version = new Version (Convert.ToInt32 (dr ["Major"])' Convert.ToInt32 (dr ["Minor"])' Convert.ToInt32 (dr ["Build"]));  	}  } catch (SqlException ex) {  	bool noStoredProc = false;  	for (int i = 0; i <= ex.Errors.Count - 1; i++) {  		SqlError sqlError = ex.Errors [i];  		if (sqlError.Number == 2812 && sqlError.Class == 16)//2812 - 16 means SP could not be found  		 {  			noStoredProc = true;  			break;  		}  	}  	if (!noStoredProc) {  		throw;  	}  } finally {  	CBO.CloseDataReader (dr' true);  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetVersionInternal,The following statement contains a magic number: for (int i = 0; i <= ex.Errors.Count - 1; i++) {  	SqlError sqlError = ex.Errors [i];  	if (sqlError.Number == 2812 && sqlError.Class == 16)//2812 - 16 means SP could not be found  	 {  		noStoredProc = true;  		break;  	}  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetVersionInternal,The following statement contains a magic number: for (int i = 0; i <= ex.Errors.Count - 1; i++) {  	SqlError sqlError = ex.Errors [i];  	if (sqlError.Number == 2812 && sqlError.Class == 16)//2812 - 16 means SP could not be found  	 {  		noStoredProc = true;  		break;  	}  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetVersionInternal,The following statement contains a magic number: if (sqlError.Number == 2812 && sqlError.Class == 16)//2812 - 16 means SP could not be found   {  	noStoredProc = true;  	break;  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetVersionInternal,The following statement contains a magic number: if (sqlError.Number == 2812 && sqlError.Class == 16)//2812 - 16 means SP could not be found   {  	noStoredProc = true;  	break;  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: if (sqlBuilder != null) {  	connectionString = sqlBuilder.ToString ();  	IDataReader dr = null;  	try {  		dr = PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' Owner + Qualifier + "GetDatabaseVersion");  	} catch (SqlException ex) {  		const string message = "ERROR:";  		bool bError = true;  		int i;  		var errorMessages = new StringBuilder ();  		for (i = 0; i <= ex.Errors.Count - 1; i++) {  			SqlError sqlError = ex.Errors [i];  			if (sqlError.Number == 2812 && sqlError.Class == 16) {  				bError = false;  				break;  			}  			string filteredMessage = String.Empty;  			switch (sqlError.Number) {  			case 17:  				filteredMessage = "Sql server does not exist or access denied";  				break;  			case 4060:  				filteredMessage = "Invalid Database";  				break;  			case 18456:  				filteredMessage = "Sql login failed";  				break;  			case 1205:  				filteredMessage = "Sql deadlock victim";  				break;  			}  			errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  		}  		if (bError) {  			connectionString = message + errorMessages;  		}  	} finally {  		CBO.CloseDataReader (dr' true);  	}  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: if (sqlBuilder != null) {  	connectionString = sqlBuilder.ToString ();  	IDataReader dr = null;  	try {  		dr = PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' Owner + Qualifier + "GetDatabaseVersion");  	} catch (SqlException ex) {  		const string message = "ERROR:";  		bool bError = true;  		int i;  		var errorMessages = new StringBuilder ();  		for (i = 0; i <= ex.Errors.Count - 1; i++) {  			SqlError sqlError = ex.Errors [i];  			if (sqlError.Number == 2812 && sqlError.Class == 16) {  				bError = false;  				break;  			}  			string filteredMessage = String.Empty;  			switch (sqlError.Number) {  			case 17:  				filteredMessage = "Sql server does not exist or access denied";  				break;  			case 4060:  				filteredMessage = "Invalid Database";  				break;  			case 18456:  				filteredMessage = "Sql login failed";  				break;  			case 1205:  				filteredMessage = "Sql deadlock victim";  				break;  			}  			errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  		}  		if (bError) {  			connectionString = message + errorMessages;  		}  	} finally {  		CBO.CloseDataReader (dr' true);  	}  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: if (sqlBuilder != null) {  	connectionString = sqlBuilder.ToString ();  	IDataReader dr = null;  	try {  		dr = PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' Owner + Qualifier + "GetDatabaseVersion");  	} catch (SqlException ex) {  		const string message = "ERROR:";  		bool bError = true;  		int i;  		var errorMessages = new StringBuilder ();  		for (i = 0; i <= ex.Errors.Count - 1; i++) {  			SqlError sqlError = ex.Errors [i];  			if (sqlError.Number == 2812 && sqlError.Class == 16) {  				bError = false;  				break;  			}  			string filteredMessage = String.Empty;  			switch (sqlError.Number) {  			case 17:  				filteredMessage = "Sql server does not exist or access denied";  				break;  			case 4060:  				filteredMessage = "Invalid Database";  				break;  			case 18456:  				filteredMessage = "Sql login failed";  				break;  			case 1205:  				filteredMessage = "Sql deadlock victim";  				break;  			}  			errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  		}  		if (bError) {  			connectionString = message + errorMessages;  		}  	} finally {  		CBO.CloseDataReader (dr' true);  	}  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: if (sqlBuilder != null) {  	connectionString = sqlBuilder.ToString ();  	IDataReader dr = null;  	try {  		dr = PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' Owner + Qualifier + "GetDatabaseVersion");  	} catch (SqlException ex) {  		const string message = "ERROR:";  		bool bError = true;  		int i;  		var errorMessages = new StringBuilder ();  		for (i = 0; i <= ex.Errors.Count - 1; i++) {  			SqlError sqlError = ex.Errors [i];  			if (sqlError.Number == 2812 && sqlError.Class == 16) {  				bError = false;  				break;  			}  			string filteredMessage = String.Empty;  			switch (sqlError.Number) {  			case 17:  				filteredMessage = "Sql server does not exist or access denied";  				break;  			case 4060:  				filteredMessage = "Invalid Database";  				break;  			case 18456:  				filteredMessage = "Sql login failed";  				break;  			case 1205:  				filteredMessage = "Sql deadlock victim";  				break;  			}  			errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  		}  		if (bError) {  			connectionString = message + errorMessages;  		}  	} finally {  		CBO.CloseDataReader (dr' true);  	}  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: if (sqlBuilder != null) {  	connectionString = sqlBuilder.ToString ();  	IDataReader dr = null;  	try {  		dr = PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' Owner + Qualifier + "GetDatabaseVersion");  	} catch (SqlException ex) {  		const string message = "ERROR:";  		bool bError = true;  		int i;  		var errorMessages = new StringBuilder ();  		for (i = 0; i <= ex.Errors.Count - 1; i++) {  			SqlError sqlError = ex.Errors [i];  			if (sqlError.Number == 2812 && sqlError.Class == 16) {  				bError = false;  				break;  			}  			string filteredMessage = String.Empty;  			switch (sqlError.Number) {  			case 17:  				filteredMessage = "Sql server does not exist or access denied";  				break;  			case 4060:  				filteredMessage = "Invalid Database";  				break;  			case 18456:  				filteredMessage = "Sql login failed";  				break;  			case 1205:  				filteredMessage = "Sql deadlock victim";  				break;  			}  			errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  		}  		if (bError) {  			connectionString = message + errorMessages;  		}  	} finally {  		CBO.CloseDataReader (dr' true);  	}  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: if (sqlBuilder != null) {  	connectionString = sqlBuilder.ToString ();  	IDataReader dr = null;  	try {  		dr = PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' Owner + Qualifier + "GetDatabaseVersion");  	} catch (SqlException ex) {  		const string message = "ERROR:";  		bool bError = true;  		int i;  		var errorMessages = new StringBuilder ();  		for (i = 0; i <= ex.Errors.Count - 1; i++) {  			SqlError sqlError = ex.Errors [i];  			if (sqlError.Number == 2812 && sqlError.Class == 16) {  				bError = false;  				break;  			}  			string filteredMessage = String.Empty;  			switch (sqlError.Number) {  			case 17:  				filteredMessage = "Sql server does not exist or access denied";  				break;  			case 4060:  				filteredMessage = "Invalid Database";  				break;  			case 18456:  				filteredMessage = "Sql login failed";  				break;  			case 1205:  				filteredMessage = "Sql deadlock victim";  				break;  			}  			errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  		}  		if (bError) {  			connectionString = message + errorMessages;  		}  	} finally {  		CBO.CloseDataReader (dr' true);  	}  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: try {  	dr = PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' Owner + Qualifier + "GetDatabaseVersion");  } catch (SqlException ex) {  	const string message = "ERROR:";  	bool bError = true;  	int i;  	var errorMessages = new StringBuilder ();  	for (i = 0; i <= ex.Errors.Count - 1; i++) {  		SqlError sqlError = ex.Errors [i];  		if (sqlError.Number == 2812 && sqlError.Class == 16) {  			bError = false;  			break;  		}  		string filteredMessage = String.Empty;  		switch (sqlError.Number) {  		case 17:  			filteredMessage = "Sql server does not exist or access denied";  			break;  		case 4060:  			filteredMessage = "Invalid Database";  			break;  		case 18456:  			filteredMessage = "Sql login failed";  			break;  		case 1205:  			filteredMessage = "Sql deadlock victim";  			break;  		}  		errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  	}  	if (bError) {  		connectionString = message + errorMessages;  	}  } finally {  	CBO.CloseDataReader (dr' true);  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: try {  	dr = PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' Owner + Qualifier + "GetDatabaseVersion");  } catch (SqlException ex) {  	const string message = "ERROR:";  	bool bError = true;  	int i;  	var errorMessages = new StringBuilder ();  	for (i = 0; i <= ex.Errors.Count - 1; i++) {  		SqlError sqlError = ex.Errors [i];  		if (sqlError.Number == 2812 && sqlError.Class == 16) {  			bError = false;  			break;  		}  		string filteredMessage = String.Empty;  		switch (sqlError.Number) {  		case 17:  			filteredMessage = "Sql server does not exist or access denied";  			break;  		case 4060:  			filteredMessage = "Invalid Database";  			break;  		case 18456:  			filteredMessage = "Sql login failed";  			break;  		case 1205:  			filteredMessage = "Sql deadlock victim";  			break;  		}  		errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  	}  	if (bError) {  		connectionString = message + errorMessages;  	}  } finally {  	CBO.CloseDataReader (dr' true);  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: try {  	dr = PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' Owner + Qualifier + "GetDatabaseVersion");  } catch (SqlException ex) {  	const string message = "ERROR:";  	bool bError = true;  	int i;  	var errorMessages = new StringBuilder ();  	for (i = 0; i <= ex.Errors.Count - 1; i++) {  		SqlError sqlError = ex.Errors [i];  		if (sqlError.Number == 2812 && sqlError.Class == 16) {  			bError = false;  			break;  		}  		string filteredMessage = String.Empty;  		switch (sqlError.Number) {  		case 17:  			filteredMessage = "Sql server does not exist or access denied";  			break;  		case 4060:  			filteredMessage = "Invalid Database";  			break;  		case 18456:  			filteredMessage = "Sql login failed";  			break;  		case 1205:  			filteredMessage = "Sql deadlock victim";  			break;  		}  		errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  	}  	if (bError) {  		connectionString = message + errorMessages;  	}  } finally {  	CBO.CloseDataReader (dr' true);  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: try {  	dr = PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' Owner + Qualifier + "GetDatabaseVersion");  } catch (SqlException ex) {  	const string message = "ERROR:";  	bool bError = true;  	int i;  	var errorMessages = new StringBuilder ();  	for (i = 0; i <= ex.Errors.Count - 1; i++) {  		SqlError sqlError = ex.Errors [i];  		if (sqlError.Number == 2812 && sqlError.Class == 16) {  			bError = false;  			break;  		}  		string filteredMessage = String.Empty;  		switch (sqlError.Number) {  		case 17:  			filteredMessage = "Sql server does not exist or access denied";  			break;  		case 4060:  			filteredMessage = "Invalid Database";  			break;  		case 18456:  			filteredMessage = "Sql login failed";  			break;  		case 1205:  			filteredMessage = "Sql deadlock victim";  			break;  		}  		errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  	}  	if (bError) {  		connectionString = message + errorMessages;  	}  } finally {  	CBO.CloseDataReader (dr' true);  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: try {  	dr = PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' Owner + Qualifier + "GetDatabaseVersion");  } catch (SqlException ex) {  	const string message = "ERROR:";  	bool bError = true;  	int i;  	var errorMessages = new StringBuilder ();  	for (i = 0; i <= ex.Errors.Count - 1; i++) {  		SqlError sqlError = ex.Errors [i];  		if (sqlError.Number == 2812 && sqlError.Class == 16) {  			bError = false;  			break;  		}  		string filteredMessage = String.Empty;  		switch (sqlError.Number) {  		case 17:  			filteredMessage = "Sql server does not exist or access denied";  			break;  		case 4060:  			filteredMessage = "Invalid Database";  			break;  		case 18456:  			filteredMessage = "Sql login failed";  			break;  		case 1205:  			filteredMessage = "Sql deadlock victim";  			break;  		}  		errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  	}  	if (bError) {  		connectionString = message + errorMessages;  	}  } finally {  	CBO.CloseDataReader (dr' true);  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: try {  	dr = PetaPocoHelper.ExecuteReader (connectionString' CommandType.StoredProcedure' Owner + Qualifier + "GetDatabaseVersion");  } catch (SqlException ex) {  	const string message = "ERROR:";  	bool bError = true;  	int i;  	var errorMessages = new StringBuilder ();  	for (i = 0; i <= ex.Errors.Count - 1; i++) {  		SqlError sqlError = ex.Errors [i];  		if (sqlError.Number == 2812 && sqlError.Class == 16) {  			bError = false;  			break;  		}  		string filteredMessage = String.Empty;  		switch (sqlError.Number) {  		case 17:  			filteredMessage = "Sql server does not exist or access denied";  			break;  		case 4060:  			filteredMessage = "Invalid Database";  			break;  		case 18456:  			filteredMessage = "Sql login failed";  			break;  		case 1205:  			filteredMessage = "Sql deadlock victim";  			break;  		}  		errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  	}  	if (bError) {  		connectionString = message + errorMessages;  	}  } finally {  	CBO.CloseDataReader (dr' true);  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: for (i = 0; i <= ex.Errors.Count - 1; i++) {  	SqlError sqlError = ex.Errors [i];  	if (sqlError.Number == 2812 && sqlError.Class == 16) {  		bError = false;  		break;  	}  	string filteredMessage = String.Empty;  	switch (sqlError.Number) {  	case 17:  		filteredMessage = "Sql server does not exist or access denied";  		break;  	case 4060:  		filteredMessage = "Invalid Database";  		break;  	case 18456:  		filteredMessage = "Sql login failed";  		break;  	case 1205:  		filteredMessage = "Sql deadlock victim";  		break;  	}  	errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: for (i = 0; i <= ex.Errors.Count - 1; i++) {  	SqlError sqlError = ex.Errors [i];  	if (sqlError.Number == 2812 && sqlError.Class == 16) {  		bError = false;  		break;  	}  	string filteredMessage = String.Empty;  	switch (sqlError.Number) {  	case 17:  		filteredMessage = "Sql server does not exist or access denied";  		break;  	case 4060:  		filteredMessage = "Invalid Database";  		break;  	case 18456:  		filteredMessage = "Sql login failed";  		break;  	case 1205:  		filteredMessage = "Sql deadlock victim";  		break;  	}  	errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: for (i = 0; i <= ex.Errors.Count - 1; i++) {  	SqlError sqlError = ex.Errors [i];  	if (sqlError.Number == 2812 && sqlError.Class == 16) {  		bError = false;  		break;  	}  	string filteredMessage = String.Empty;  	switch (sqlError.Number) {  	case 17:  		filteredMessage = "Sql server does not exist or access denied";  		break;  	case 4060:  		filteredMessage = "Invalid Database";  		break;  	case 18456:  		filteredMessage = "Sql login failed";  		break;  	case 1205:  		filteredMessage = "Sql deadlock victim";  		break;  	}  	errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: for (i = 0; i <= ex.Errors.Count - 1; i++) {  	SqlError sqlError = ex.Errors [i];  	if (sqlError.Number == 2812 && sqlError.Class == 16) {  		bError = false;  		break;  	}  	string filteredMessage = String.Empty;  	switch (sqlError.Number) {  	case 17:  		filteredMessage = "Sql server does not exist or access denied";  		break;  	case 4060:  		filteredMessage = "Invalid Database";  		break;  	case 18456:  		filteredMessage = "Sql login failed";  		break;  	case 1205:  		filteredMessage = "Sql deadlock victim";  		break;  	}  	errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: for (i = 0; i <= ex.Errors.Count - 1; i++) {  	SqlError sqlError = ex.Errors [i];  	if (sqlError.Number == 2812 && sqlError.Class == 16) {  		bError = false;  		break;  	}  	string filteredMessage = String.Empty;  	switch (sqlError.Number) {  	case 17:  		filteredMessage = "Sql server does not exist or access denied";  		break;  	case 4060:  		filteredMessage = "Invalid Database";  		break;  	case 18456:  		filteredMessage = "Sql login failed";  		break;  	case 1205:  		filteredMessage = "Sql deadlock victim";  		break;  	}  	errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: for (i = 0; i <= ex.Errors.Count - 1; i++) {  	SqlError sqlError = ex.Errors [i];  	if (sqlError.Number == 2812 && sqlError.Class == 16) {  		bError = false;  		break;  	}  	string filteredMessage = String.Empty;  	switch (sqlError.Number) {  	case 17:  		filteredMessage = "Sql server does not exist or access denied";  		break;  	case 4060:  		filteredMessage = "Invalid Database";  		break;  	case 18456:  		filteredMessage = "Sql login failed";  		break;  	case 1205:  		filteredMessage = "Sql deadlock victim";  		break;  	}  	errorMessages.Append ("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " + sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: if (sqlError.Number == 2812 && sqlError.Class == 16) {  	bError = false;  	break;  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: if (sqlError.Number == 2812 && sqlError.Class == 16) {  	bError = false;  	break;  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: switch (sqlError.Number) {  case 17:  	filteredMessage = "Sql server does not exist or access denied";  	break;  case 4060:  	filteredMessage = "Invalid Database";  	break;  case 18456:  	filteredMessage = "Sql login failed";  	break;  case 1205:  	filteredMessage = "Sql deadlock victim";  	break;  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: switch (sqlError.Number) {  case 17:  	filteredMessage = "Sql server does not exist or access denied";  	break;  case 4060:  	filteredMessage = "Invalid Database";  	break;  case 18456:  	filteredMessage = "Sql login failed";  	break;  case 1205:  	filteredMessage = "Sql deadlock victim";  	break;  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: switch (sqlError.Number) {  case 17:  	filteredMessage = "Sql server does not exist or access denied";  	break;  case 4060:  	filteredMessage = "Invalid Database";  	break;  case 18456:  	filteredMessage = "Sql login failed";  	break;  case 1205:  	filteredMessage = "Sql deadlock victim";  	break;  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following statement contains a magic number: switch (sqlError.Number) {  case 17:  	filteredMessage = "Sql server does not exist or access denied";  	break;  case 4060:  	filteredMessage = "Invalid Database";  	break;  case 18456:  	filteredMessage = "Sql login failed";  	break;  case 1205:  	filteredMessage = "Sql deadlock victim";  	break;  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateDatabaseVersion,The following statement contains a magic number: if ((Major >= 5 || (Major == 4 && Minor == 9 && Build > 0))) {  	//If the version > 4.9.0 use the new sproc' which is added in 4.9.1 script  	ExecuteNonQuery ("UpdateDatabaseVersionAndName"' Major' Minor' Build' Name);  } else {  	ExecuteNonQuery ("UpdateDatabaseVersion"' Major' Minor' Build);  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateDatabaseVersion,The following statement contains a magic number: if ((Major >= 5 || (Major == 4 && Minor == 9 && Build > 0))) {  	//If the version > 4.9.0 use the new sproc' which is added in 4.9.1 script  	ExecuteNonQuery ("UpdateDatabaseVersionAndName"' Major' Minor' Build' Name);  } else {  	ExecuteNonQuery ("UpdateDatabaseVersion"' Major' Minor' Build);  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,UpdateDatabaseVersion,The following statement contains a magic number: if ((Major >= 5 || (Major == 4 && Minor == 9 && Build > 0))) {  	//If the version > 4.9.0 use the new sproc' which is added in 4.9.1 script  	ExecuteNonQuery ("UpdateDatabaseVersionAndName"' Major' Minor' Build' Name);  } else {  	ExecuteNonQuery ("UpdateDatabaseVersion"' Major' Minor' Build);  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetPortals,The following statement contains a magic number: if (Globals.Status == Globals.UpgradeStatus.Upgrade && Globals.DataBaseVersion < new Version (6' 1' 0)) {  	reader = ExecuteReader ("GetPortals");  } else {  	reader = ExecuteReader ("GetPortals"' CultureCode);  }  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,PurgeScheduleHistory,The following statement contains a magic number: ExecuteNonQuery (90' "PurgeScheduleHistory");  
Magic Number,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,GetAvailableUsersForIndex,The following statement contains a magic number: return ExecuteReader (90' "GetAvailableUsersForIndex"' portalId' startDate' startUserId' numberOfUsers);  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeserializeModule,The following statement contains a magic number: if (module.IsWebSlice) {  	module.WebSliceTitle = XmlUtils.GetNodeValue (nodeModule' "webslicetitle"' module.ModuleTitle);  	module.WebSliceExpiryDate = XmlUtils.GetNodeValueDate (nodeModule' "websliceexpirydate"' module.EndDate);  	module.WebSliceTTL = XmlUtils.GetNodeValueInt (nodeModule' "webslicettl"' module.CacheTime / 60);  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeserializeModule,The following statement contains a magic number: module.WebSliceTTL = XmlUtils.GetNodeValueInt (nodeModule' "webslicettl"' module.CacheTime / 60);  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleContent,The following statement contains a magic number: if (nodeModule != null) {  	// ReSharper disable PossibleNullReferenceException  	string version = nodeModule.SelectSingleNode ("content").Attributes ["version"].Value;  	string content = nodeModule.SelectSingleNode ("content").InnerXml;  	content = content.Substring (9' content.Length - 12);  	if (!String.IsNullOrEmpty (module.DesktopModule.BusinessControllerClass) && !String.IsNullOrEmpty (content)) {  		var portal = PortalController.Instance.GetPortal (PortalId);  		content = HttpContext.Current.Server.HtmlDecode (content);  		//Determine if the Module is copmpletely installed   		//(ie are we running in the same request that installed the module).  		if (module.DesktopModule.SupportedFeatures == Null.NullInteger) {  			//save content in eventqueue for processing after an app restart'  			//as modules Supported Features are not updated yet so we  			//cannot determine if the module supports IsPortable								  			EventMessageProcessor.CreateImportModuleMessage (module' content' version' portal.AdministratorId);  		} else {  			if (module.DesktopModule.IsPortable) {  				try {  					object businessController = Reflection.CreateObject (module.DesktopModule.BusinessControllerClass' module.DesktopModule.BusinessControllerClass);  					var controller = businessController as IPortable;  					if (controller != null) {  						controller.ImportModule (module.ModuleID' content' version' portal.AdministratorId);  					}  				} catch {  					//if there is an error then the type cannot be loaded at this time' so add to EventQueue  					EventMessageProcessor.CreateImportModuleMessage (module' content' version' portal.AdministratorId);  				}  			}  		}  	}  	// ReSharper restore PossibleNullReferenceException  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleContent,The following statement contains a magic number: if (nodeModule != null) {  	// ReSharper disable PossibleNullReferenceException  	string version = nodeModule.SelectSingleNode ("content").Attributes ["version"].Value;  	string content = nodeModule.SelectSingleNode ("content").InnerXml;  	content = content.Substring (9' content.Length - 12);  	if (!String.IsNullOrEmpty (module.DesktopModule.BusinessControllerClass) && !String.IsNullOrEmpty (content)) {  		var portal = PortalController.Instance.GetPortal (PortalId);  		content = HttpContext.Current.Server.HtmlDecode (content);  		//Determine if the Module is copmpletely installed   		//(ie are we running in the same request that installed the module).  		if (module.DesktopModule.SupportedFeatures == Null.NullInteger) {  			//save content in eventqueue for processing after an app restart'  			//as modules Supported Features are not updated yet so we  			//cannot determine if the module supports IsPortable								  			EventMessageProcessor.CreateImportModuleMessage (module' content' version' portal.AdministratorId);  		} else {  			if (module.DesktopModule.IsPortable) {  				try {  					object businessController = Reflection.CreateObject (module.DesktopModule.BusinessControllerClass' module.DesktopModule.BusinessControllerClass);  					var controller = businessController as IPortable;  					if (controller != null) {  						controller.ImportModule (module.ModuleID' content' version' portal.AdministratorId);  					}  				} catch {  					//if there is an error then the type cannot be loaded at this time' so add to EventQueue  					EventMessageProcessor.CreateImportModuleMessage (module' content' version' portal.AdministratorId);  				}  			}  		}  	}  	// ReSharper restore PossibleNullReferenceException  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleContent,The following statement contains a magic number: content = content.Substring (9' content.Length - 12);  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleContent,The following statement contains a magic number: content = content.Substring (9' content.Length - 12);  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleSettings,The following statement contains a magic number: while (dr.Read ()) {  	int mId = dr.GetInt32 (0);  	Hashtable settings;  	if (!moduleSettingsDic.TryGetValue (mId' out settings)) {  		settings = new Hashtable ();  		moduleSettingsDic [mId] = settings;  	}  	if (!dr.IsDBNull (2)) {  		settings [dr.GetString (1)] = dr.GetString (2);  	} else {  		settings [dr.GetString (1)] = "";  	}  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleSettings,The following statement contains a magic number: while (dr.Read ()) {  	int mId = dr.GetInt32 (0);  	Hashtable settings;  	if (!moduleSettingsDic.TryGetValue (mId' out settings)) {  		settings = new Hashtable ();  		moduleSettingsDic [mId] = settings;  	}  	if (!dr.IsDBNull (2)) {  		settings [dr.GetString (1)] = dr.GetString (2);  	} else {  		settings [dr.GetString (1)] = "";  	}  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleSettings,The following statement contains a magic number: if (!dr.IsDBNull (2)) {  	settings [dr.GetString (1)] = dr.GetString (2);  } else {  	settings [dr.GetString (1)] = "";  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleSettings,The following statement contains a magic number: if (!dr.IsDBNull (2)) {  	settings [dr.GetString (1)] = dr.GetString (2);  } else {  	settings [dr.GetString (1)] = "";  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetModuleSettings,The following statement contains a magic number: settings [dr.GetString (1)] = dr.GetString (2);  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetTabModuleSettings,The following statement contains a magic number: using (IDataReader dr = DataProvider.Instance ().GetTabModuleSettingsByTab (tabId)) {  	while (dr.Read ()) {  		int tMId = dr.GetInt32 (0);  		Hashtable settings;  		if (!tabModuleSettingsDic.TryGetValue (tMId' out settings)) {  			settings = new Hashtable ();  			tabModuleSettingsDic [tMId] = settings;  		}  		if (!dr.IsDBNull (2)) {  			settings [dr.GetString (1)] = dr.GetString (2);  		} else {  			settings [dr.GetString (1)] = "";  		}  	}  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetTabModuleSettings,The following statement contains a magic number: using (IDataReader dr = DataProvider.Instance ().GetTabModuleSettingsByTab (tabId)) {  	while (dr.Read ()) {  		int tMId = dr.GetInt32 (0);  		Hashtable settings;  		if (!tabModuleSettingsDic.TryGetValue (tMId' out settings)) {  			settings = new Hashtable ();  			tabModuleSettingsDic [tMId] = settings;  		}  		if (!dr.IsDBNull (2)) {  			settings [dr.GetString (1)] = dr.GetString (2);  		} else {  			settings [dr.GetString (1)] = "";  		}  	}  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetTabModuleSettings,The following statement contains a magic number: while (dr.Read ()) {  	int tMId = dr.GetInt32 (0);  	Hashtable settings;  	if (!tabModuleSettingsDic.TryGetValue (tMId' out settings)) {  		settings = new Hashtable ();  		tabModuleSettingsDic [tMId] = settings;  	}  	if (!dr.IsDBNull (2)) {  		settings [dr.GetString (1)] = dr.GetString (2);  	} else {  		settings [dr.GetString (1)] = "";  	}  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetTabModuleSettings,The following statement contains a magic number: while (dr.Read ()) {  	int tMId = dr.GetInt32 (0);  	Hashtable settings;  	if (!tabModuleSettingsDic.TryGetValue (tMId' out settings)) {  		settings = new Hashtable ();  		tabModuleSettingsDic [tMId] = settings;  	}  	if (!dr.IsDBNull (2)) {  		settings [dr.GetString (1)] = dr.GetString (2);  	} else {  		settings [dr.GetString (1)] = "";  	}  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetTabModuleSettings,The following statement contains a magic number: if (!dr.IsDBNull (2)) {  	settings [dr.GetString (1)] = dr.GetString (2);  } else {  	settings [dr.GetString (1)] = "";  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetTabModuleSettings,The following statement contains a magic number: if (!dr.IsDBNull (2)) {  	settings [dr.GetString (1)] = dr.GetString (2);  } else {  	settings [dr.GetString (1)] = "";  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,GetTabModuleSettings,The following statement contains a magic number: settings [dr.GetString (1)] = dr.GetString (2);  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModuleOrder,The following statement contains a magic number: if (moduleInfo != null) {  	//adding a module to a new pane - places the module at the bottom of the pane   	if (moduleOrder == -1) {  		IDataReader dr = null;  		try {  			dr = dataProvider.GetTabModuleOrder (tabId' paneName);  			while (dr.Read ()) {  				moduleOrder = Convert.ToInt32 (dr ["ModuleOrder"]);  			}  		} catch (Exception ex) {  			Exceptions.LogException (ex);  		} finally {  			CBO.CloseDataReader (dr' true);  		}  		moduleOrder += 2;  	}  	dataProvider.UpdateModuleOrder (tabId' moduleId' moduleOrder' paneName);  	TabChangeTracker.Instance.TrackModuleModification (GetModule (moduleId' tabId' true)' Null.NullInteger' UserController.Instance.GetCurrentUserInfo ().UserID);  	//clear cache  	ClearCache (tabId);  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModuleOrder,The following statement contains a magic number: if (moduleOrder == -1) {  	IDataReader dr = null;  	try {  		dr = dataProvider.GetTabModuleOrder (tabId' paneName);  		while (dr.Read ()) {  			moduleOrder = Convert.ToInt32 (dr ["ModuleOrder"]);  		}  	} catch (Exception ex) {  		Exceptions.LogException (ex);  	} finally {  		CBO.CloseDataReader (dr' true);  	}  	moduleOrder += 2;  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateModuleOrder,The following statement contains a magic number: moduleOrder += 2;  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateTabModuleOrder,The following statement contains a magic number: try {  	while (dr.Read ()) {  		int moduleCounter = 0;  		IDataReader dr2 = dataProvider.GetTabModuleOrder (tabId' Convert.ToString (dr ["PaneName"]));  		try {  			while (dr2.Read ()) {  				moduleCounter += 1;  				var moduleId = Convert.ToInt32 (dr2 ["ModuleID"]);  				var paneName = Convert.ToString (dr ["PaneName"]);  				var isDeleted = Convert.ToBoolean (dr2 ["IsDeleted"]);  				var existingOrder = Convert.ToInt32 (dr2 ["ModuleOrder"]);  				var newOrder = (moduleCounter * 2) - 1;  				if (existingOrder == newOrder)  					continue;  				dataProvider.UpdateModuleOrder (tabId' moduleId' newOrder' paneName);  				if (!isDeleted) {  					var moduleInfo = GetModule (moduleId' tabId' true);  					var userInfo = UserController.Instance.GetCurrentUserInfo ();  					TabChangeTracker.Instance.TrackModuleModification (moduleInfo' Null.NullInteger' userInfo.UserID);  				}  			}  		} catch (Exception ex2) {  			Exceptions.LogException (ex2);  		} finally {  			CBO.CloseDataReader (dr2' true);  		}  	}  } catch (Exception ex) {  	Exceptions.LogException (ex);  } finally {  	CBO.CloseDataReader (dr' true);  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateTabModuleOrder,The following statement contains a magic number: while (dr.Read ()) {  	int moduleCounter = 0;  	IDataReader dr2 = dataProvider.GetTabModuleOrder (tabId' Convert.ToString (dr ["PaneName"]));  	try {  		while (dr2.Read ()) {  			moduleCounter += 1;  			var moduleId = Convert.ToInt32 (dr2 ["ModuleID"]);  			var paneName = Convert.ToString (dr ["PaneName"]);  			var isDeleted = Convert.ToBoolean (dr2 ["IsDeleted"]);  			var existingOrder = Convert.ToInt32 (dr2 ["ModuleOrder"]);  			var newOrder = (moduleCounter * 2) - 1;  			if (existingOrder == newOrder)  				continue;  			dataProvider.UpdateModuleOrder (tabId' moduleId' newOrder' paneName);  			if (!isDeleted) {  				var moduleInfo = GetModule (moduleId' tabId' true);  				var userInfo = UserController.Instance.GetCurrentUserInfo ();  				TabChangeTracker.Instance.TrackModuleModification (moduleInfo' Null.NullInteger' userInfo.UserID);  			}  		}  	} catch (Exception ex2) {  		Exceptions.LogException (ex2);  	} finally {  		CBO.CloseDataReader (dr2' true);  	}  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateTabModuleOrder,The following statement contains a magic number: try {  	while (dr2.Read ()) {  		moduleCounter += 1;  		var moduleId = Convert.ToInt32 (dr2 ["ModuleID"]);  		var paneName = Convert.ToString (dr ["PaneName"]);  		var isDeleted = Convert.ToBoolean (dr2 ["IsDeleted"]);  		var existingOrder = Convert.ToInt32 (dr2 ["ModuleOrder"]);  		var newOrder = (moduleCounter * 2) - 1;  		if (existingOrder == newOrder)  			continue;  		dataProvider.UpdateModuleOrder (tabId' moduleId' newOrder' paneName);  		if (!isDeleted) {  			var moduleInfo = GetModule (moduleId' tabId' true);  			var userInfo = UserController.Instance.GetCurrentUserInfo ();  			TabChangeTracker.Instance.TrackModuleModification (moduleInfo' Null.NullInteger' userInfo.UserID);  		}  	}  } catch (Exception ex2) {  	Exceptions.LogException (ex2);  } finally {  	CBO.CloseDataReader (dr2' true);  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,UpdateTabModuleOrder,The following statement contains a magic number: while (dr2.Read ()) {  	moduleCounter += 1;  	var moduleId = Convert.ToInt32 (dr2 ["ModuleID"]);  	var paneName = Convert.ToString (dr ["PaneName"]);  	var isDeleted = Convert.ToBoolean (dr2 ["IsDeleted"]);  	var existingOrder = Convert.ToInt32 (dr2 ["ModuleOrder"]);  	var newOrder = (moduleCounter * 2) - 1;  	if (existingOrder == newOrder)  		continue;  	dataProvider.UpdateModuleOrder (tabId' moduleId' newOrder' paneName);  	if (!isDeleted) {  		var moduleInfo = GetModule (moduleId' tabId' true);  		var userInfo = UserController.Instance.GetCurrentUserInfo ();  		TabChangeTracker.Instance.TrackModuleModification (moduleInfo' Null.NullInteger' userInfo.UserID);  	}  }  
Magic Number,DotNetNuke.Entities.Modules,EventMessageProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\EventMessageProcessor.cs,UpdateSupportedFeatures,The following statement contains a magic number: try {  	DesktopModuleInfo desktopModule = DesktopModuleController.GetDesktopModule (desktopModuleId' Null.NullInteger);  	if ((desktopModule != null)) {  		//Initialise the SupportedFeatures  		desktopModule.SupportedFeatures = 0;  		//Test the interfaces  		desktopModule.IsPortable = (objController is IPortable);  		#pragma  		desktopModule.IsSearchable = (objController is ModuleSearchBase) || (objController is ISearchable);  		#pragma  		desktopModule.IsUpgradeable = (objController is IUpgradeable);  		DesktopModuleController.SaveDesktopModule (desktopModule' false' false' false);  		foreach (PortalInfo portal in PortalController.Instance.GetPortals ()) {  			DataCache.RemoveCache (String.Format (DataCache.DesktopModuleCacheKey' portal.PortalID));  			DataCache.RemoveCache (String.Format (DataCache.PortalDesktopModuleCacheKey' portal.PortalID));  		}  	}  } catch (Exception exc) {  	Exceptions.LogException (exc);  }  
Magic Number,DotNetNuke.Entities.Modules,EventMessageProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\EventMessageProcessor.cs,UpdateSupportedFeatures,The following statement contains a magic number: try {  	DesktopModuleInfo desktopModule = DesktopModuleController.GetDesktopModule (desktopModuleId' Null.NullInteger);  	if ((desktopModule != null)) {  		//Initialise the SupportedFeatures  		desktopModule.SupportedFeatures = 0;  		//Test the interfaces  		desktopModule.IsPortable = (objController is IPortable);  		#pragma  		desktopModule.IsSearchable = (objController is ModuleSearchBase) || (objController is ISearchable);  		#pragma  		desktopModule.IsUpgradeable = (objController is IUpgradeable);  		DesktopModuleController.SaveDesktopModule (desktopModule' false' false' false);  		foreach (PortalInfo portal in PortalController.Instance.GetPortals ()) {  			DataCache.RemoveCache (String.Format (DataCache.DesktopModuleCacheKey' portal.PortalID));  			DataCache.RemoveCache (String.Format (DataCache.PortalDesktopModuleCacheKey' portal.PortalID));  		}  	}  } catch (Exception exc) {  	Exceptions.LogException (exc);  }  
Magic Number,DotNetNuke.Entities.Modules,EventMessageProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\EventMessageProcessor.cs,UpdateSupportedFeatures,The following statement contains a magic number: if ((desktopModule != null)) {  	//Initialise the SupportedFeatures  	desktopModule.SupportedFeatures = 0;  	//Test the interfaces  	desktopModule.IsPortable = (objController is IPortable);  	#pragma  	desktopModule.IsSearchable = (objController is ModuleSearchBase) || (objController is ISearchable);  	#pragma  	desktopModule.IsUpgradeable = (objController is IUpgradeable);  	DesktopModuleController.SaveDesktopModule (desktopModule' false' false' false);  	foreach (PortalInfo portal in PortalController.Instance.GetPortals ()) {  		DataCache.RemoveCache (String.Format (DataCache.DesktopModuleCacheKey' portal.PortalID));  		DataCache.RemoveCache (String.Format (DataCache.PortalDesktopModuleCacheKey' portal.PortalID));  	}  }  
Magic Number,DotNetNuke.Entities.Modules,EventMessageProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\EventMessageProcessor.cs,UpdateSupportedFeatures,The following statement contains a magic number: if ((desktopModule != null)) {  	//Initialise the SupportedFeatures  	desktopModule.SupportedFeatures = 0;  	//Test the interfaces  	desktopModule.IsPortable = (objController is IPortable);  	#pragma  	desktopModule.IsSearchable = (objController is ModuleSearchBase) || (objController is ISearchable);  	#pragma  	desktopModule.IsUpgradeable = (objController is IUpgradeable);  	DesktopModuleController.SaveDesktopModule (desktopModule' false' false' false);  	foreach (PortalInfo portal in PortalController.Instance.GetPortals ()) {  		DataCache.RemoveCache (String.Format (DataCache.DesktopModuleCacheKey' portal.PortalID));  		DataCache.RemoveCache (String.Format (DataCache.PortalDesktopModuleCacheKey' portal.PortalID));  	}  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleInfo.cs,Fill,The following statement contains a magic number: try {  	TabModuleID = Null.SetNullInteger (dr ["TabModuleID"]);  	ModuleOrder = Null.SetNullInteger (dr ["ModuleOrder"]);  	PaneName = Null.SetNullString (dr ["PaneName"]);  	CacheTime = Null.SetNullInteger (dr ["CacheTime"]);  	CacheMethod = Null.SetNullString (dr ["CacheMethod"]);  	Alignment = Null.SetNullString (dr ["Alignment"]);  	Color = Null.SetNullString (dr ["Color"]);  	Border = Null.SetNullString (dr ["Border"]);  	IconFile = Null.SetNullString (dr ["IconFile"]);  	int visible = Null.SetNullInteger (dr ["Visibility"]);  	if (visible == Null.NullInteger) {  		Visibility = VisibilityState.Maximized;  	} else {  		switch (visible) {  		case 0:  			Visibility = VisibilityState.Maximized;  			break;  		case 1:  			Visibility = VisibilityState.Minimized;  			break;  		case 2:  			Visibility = VisibilityState.None;  			break;  		}  	}  	ContainerSrc = Null.SetNullString (dr ["ContainerSrc"]);  	DisplayTitle = Null.SetNullBoolean (dr ["DisplayTitle"]);  	DisplayPrint = Null.SetNullBoolean (dr ["DisplayPrint"]);  	DisplaySyndicate = Null.SetNullBoolean (dr ["DisplaySyndicate"]);  	IsWebSlice = Null.SetNullBoolean (dr ["IsWebSlice"]);  	if (IsWebSlice) {  		WebSliceTitle = Null.SetNullString (dr ["WebSliceTitle"]);  		WebSliceExpiryDate = Null.SetNullDateTime (dr ["WebSliceExpiryDate"]);  		WebSliceTTL = Null.SetNullInteger (dr ["WebSliceTTL"]);  	}  	DesktopModuleID = Null.SetNullInteger (dr ["DesktopModuleID"]);  	ModuleControlId = Null.SetNullInteger (dr ["ModuleControlID"]);  } catch (Exception exc) {  	Logger.Error (exc);  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleInfo.cs,Fill,The following statement contains a magic number: if (visible == Null.NullInteger) {  	Visibility = VisibilityState.Maximized;  } else {  	switch (visible) {  	case 0:  		Visibility = VisibilityState.Maximized;  		break;  	case 1:  		Visibility = VisibilityState.Minimized;  		break;  	case 2:  		Visibility = VisibilityState.None;  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Modules,ModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleInfo.cs,Fill,The following statement contains a magic number: switch (visible) {  case 0:  	Visibility = VisibilityState.Maximized;  	break;  case 1:  	Visibility = VisibilityState.Minimized;  	break;  case 2:  	Visibility = VisibilityState.None;  	break;  }  
Magic Number,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,GetSettings,The following statement contains a magic number: return CBO.GetCachedObject<T> (new CacheItemArgs (CacheKey (moduleContext.TabModuleID)' 20' CacheItemPriority.AboveNormal' moduleContext)' Load' false);  
Magic Number,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,LoadMapping,The following statement contains a magic number: if (mapping == null) {  	mapping = this.CreateMapping ();  	// HARDCODED: 2 hour expiration.   	// Note that "caching" can also be accomplished with a static dictionary since the Attribute/Property mapping does not change unless the module is updated.  	CachingProvider.Instance ().Insert (cacheKey' mapping' (DNNCacheDependency)null' DateTime.Now.AddHours (2)' Cache.NoSlidingExpiration);  }  
Magic Number,DotNetNuke.Entities.Modules.Settings,SettingsRepository,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Settings\SettingsRepository.cs,LoadMapping,The following statement contains a magic number: CachingProvider.Instance ().Insert (cacheKey' mapping' (DNNCacheDependency)null' DateTime.Now.AddHours (2)' Cache.NoSlidingExpiration);  
Magic Number,DotNetNuke.Entities.Portals,PortalAliasController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalAliasController.cs,GetPortalAliasByTab,The following statement contains a magic number: switch (intPortalId) {  case -2:  	//tab does not exist  	break;  case -1:  	//host tab  	//host tabs are not verified to determine if they belong to the portal alias  	retValue = portalAlias;  	break;  default:  	//portal tab  	retValue = GetPortalAliasByPortal (intPortalId' portalAlias);  	break;  }  
Magic Number,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseProfileDefinitions,The following statement contains a magic number: foreach (XmlNode node in nodeProfileDefinitions.SelectNodes ("//profiledefinition")) {  	orderCounter += 2;  	ListEntryInfo typeInfo;  	if (!colDataTypes.TryGetValue ("DataType:" + XmlUtils.GetNodeValue (node.CreateNavigator ()' "datatype")' out typeInfo)) {  		typeInfo = colDataTypes ["DataType:Unknown"];  	}  	objProfileDefinition = new ProfilePropertyDefinition (portalId);  	objProfileDefinition.DataType = typeInfo.EntryID;  	objProfileDefinition.DefaultValue = "";  	objProfileDefinition.ModuleDefId = Null.NullInteger;  	objProfileDefinition.PropertyCategory = XmlUtils.GetNodeValue (node.CreateNavigator ()' "propertycategory");  	objProfileDefinition.PropertyName = XmlUtils.GetNodeValue (node.CreateNavigator ()' "propertyname");  	objProfileDefinition.Required = false;  	objProfileDefinition.Visible = true;  	objProfileDefinition.ViewOrder = orderCounter;  	objProfileDefinition.Length = XmlUtils.GetNodeValueInt (node' "length");  	switch (XmlUtils.GetNodeValueInt (node' "defaultvisibility"' 2)) {  	case 0:  		objProfileDefinition.DefaultVisibility = UserVisibilityMode.AllUsers;  		break;  	case 1:  		objProfileDefinition.DefaultVisibility = UserVisibilityMode.MembersOnly;  		break;  	case 2:  		objProfileDefinition.DefaultVisibility = UserVisibilityMode.AdminOnly;  		break;  	}  	if (objProfileDefinition.PropertyName == "PreferredTimeZone") {  		preferredTimeZoneFound = true;  	}  	ProfileController.AddPropertyDefinition (objProfileDefinition);  }  
Magic Number,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseProfileDefinitions,The following statement contains a magic number: foreach (XmlNode node in nodeProfileDefinitions.SelectNodes ("//profiledefinition")) {  	orderCounter += 2;  	ListEntryInfo typeInfo;  	if (!colDataTypes.TryGetValue ("DataType:" + XmlUtils.GetNodeValue (node.CreateNavigator ()' "datatype")' out typeInfo)) {  		typeInfo = colDataTypes ["DataType:Unknown"];  	}  	objProfileDefinition = new ProfilePropertyDefinition (portalId);  	objProfileDefinition.DataType = typeInfo.EntryID;  	objProfileDefinition.DefaultValue = "";  	objProfileDefinition.ModuleDefId = Null.NullInteger;  	objProfileDefinition.PropertyCategory = XmlUtils.GetNodeValue (node.CreateNavigator ()' "propertycategory");  	objProfileDefinition.PropertyName = XmlUtils.GetNodeValue (node.CreateNavigator ()' "propertyname");  	objProfileDefinition.Required = false;  	objProfileDefinition.Visible = true;  	objProfileDefinition.ViewOrder = orderCounter;  	objProfileDefinition.Length = XmlUtils.GetNodeValueInt (node' "length");  	switch (XmlUtils.GetNodeValueInt (node' "defaultvisibility"' 2)) {  	case 0:  		objProfileDefinition.DefaultVisibility = UserVisibilityMode.AllUsers;  		break;  	case 1:  		objProfileDefinition.DefaultVisibility = UserVisibilityMode.MembersOnly;  		break;  	case 2:  		objProfileDefinition.DefaultVisibility = UserVisibilityMode.AdminOnly;  		break;  	}  	if (objProfileDefinition.PropertyName == "PreferredTimeZone") {  		preferredTimeZoneFound = true;  	}  	ProfileController.AddPropertyDefinition (objProfileDefinition);  }  
Magic Number,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseProfileDefinitions,The following statement contains a magic number: foreach (XmlNode node in nodeProfileDefinitions.SelectNodes ("//profiledefinition")) {  	orderCounter += 2;  	ListEntryInfo typeInfo;  	if (!colDataTypes.TryGetValue ("DataType:" + XmlUtils.GetNodeValue (node.CreateNavigator ()' "datatype")' out typeInfo)) {  		typeInfo = colDataTypes ["DataType:Unknown"];  	}  	objProfileDefinition = new ProfilePropertyDefinition (portalId);  	objProfileDefinition.DataType = typeInfo.EntryID;  	objProfileDefinition.DefaultValue = "";  	objProfileDefinition.ModuleDefId = Null.NullInteger;  	objProfileDefinition.PropertyCategory = XmlUtils.GetNodeValue (node.CreateNavigator ()' "propertycategory");  	objProfileDefinition.PropertyName = XmlUtils.GetNodeValue (node.CreateNavigator ()' "propertyname");  	objProfileDefinition.Required = false;  	objProfileDefinition.Visible = true;  	objProfileDefinition.ViewOrder = orderCounter;  	objProfileDefinition.Length = XmlUtils.GetNodeValueInt (node' "length");  	switch (XmlUtils.GetNodeValueInt (node' "defaultvisibility"' 2)) {  	case 0:  		objProfileDefinition.DefaultVisibility = UserVisibilityMode.AllUsers;  		break;  	case 1:  		objProfileDefinition.DefaultVisibility = UserVisibilityMode.MembersOnly;  		break;  	case 2:  		objProfileDefinition.DefaultVisibility = UserVisibilityMode.AdminOnly;  		break;  	}  	if (objProfileDefinition.PropertyName == "PreferredTimeZone") {  		preferredTimeZoneFound = true;  	}  	ProfileController.AddPropertyDefinition (objProfileDefinition);  }  
Magic Number,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseProfileDefinitions,The following statement contains a magic number: orderCounter += 2;  
Magic Number,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseProfileDefinitions,The following statement contains a magic number: switch (XmlUtils.GetNodeValueInt (node' "defaultvisibility"' 2)) {  case 0:  	objProfileDefinition.DefaultVisibility = UserVisibilityMode.AllUsers;  	break;  case 1:  	objProfileDefinition.DefaultVisibility = UserVisibilityMode.MembersOnly;  	break;  case 2:  	objProfileDefinition.DefaultVisibility = UserVisibilityMode.AdminOnly;  	break;  }  
Magic Number,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseProfileDefinitions,The following statement contains a magic number: switch (XmlUtils.GetNodeValueInt (node' "defaultvisibility"' 2)) {  case 0:  	objProfileDefinition.DefaultVisibility = UserVisibilityMode.AllUsers;  	break;  case 1:  	objProfileDefinition.DefaultVisibility = UserVisibilityMode.MembersOnly;  	break;  case 2:  	objProfileDefinition.DefaultVisibility = UserVisibilityMode.AdminOnly;  	break;  }  
Magic Number,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseProfileDefinitions,The following statement contains a magic number: if (!preferredTimeZoneFound) {  	orderCounter += 2;  	ListEntryInfo typeInfo = colDataTypes ["DataType:TimeZoneInfo"];  	if (typeInfo == null) {  		typeInfo = colDataTypes ["DataType:Unknown"];  	}  	objProfileDefinition = new ProfilePropertyDefinition (portalId);  	objProfileDefinition.DataType = typeInfo.EntryID;  	objProfileDefinition.DefaultValue = "";  	objProfileDefinition.ModuleDefId = Null.NullInteger;  	objProfileDefinition.PropertyCategory = "Preferences";  	objProfileDefinition.PropertyName = "PreferredTimeZone";  	objProfileDefinition.Required = false;  	objProfileDefinition.Visible = true;  	objProfileDefinition.ViewOrder = orderCounter;  	objProfileDefinition.Length = 0;  	objProfileDefinition.DefaultVisibility = UserVisibilityMode.AdminOnly;  	ProfileController.AddPropertyDefinition (objProfileDefinition);  }  
Magic Number,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseProfileDefinitions,The following statement contains a magic number: orderCounter += 2;  
Magic Number,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,HasSpaceAvailable,The following statement contains a magic number: return (((GetPortalSpaceUsedBytes (portalId) + fileSizeBytes) / Math.Pow (1024' 2)) <= hostSpace) || hostSpace == 0;  
Magic Number,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,HasSpaceAvailable,The following statement contains a magic number: return (((GetPortalSpaceUsedBytes (portalId) + fileSizeBytes) / Math.Pow (1024' 2)) <= hostSpace) || hostSpace == 0;  
Magic Number,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserSettings,The following statement contains a magic number: if (settings ["Records_PerPage"] == null) {  	settings ["Records_PerPage"] = 10;  }  
Magic Number,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserSettings,The following statement contains a magic number: settings ["Records_PerPage"] = 10;  
Magic Number,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserSettings,The following statement contains a magic number: if (settings ["Security_UsersControl"] == null) {  	var portal = PortalController.Instance.GetPortal (portalId);  	if (portal != null && portal.Users > 1000) {  		settings ["Security_UsersControl"] = UsersControl.TextBox;  	} else {  		settings ["Security_UsersControl"] = UsersControl.Combo;  	}  } else {  	settings ["Security_UsersControl"] = (UsersControl)Convert.ToInt32 (settings ["Security_UsersControl"]);  }  
Magic Number,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GetUserSettings,The following statement contains a magic number: if (portal != null && portal.Users > 1000) {  	settings ["Security_UsersControl"] = UsersControl.TextBox;  } else {  	settings ["Security_UsersControl"] = UsersControl.Combo;  }  
Magic Number,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,GeneratePassword,The following statement contains a magic number: return GeneratePassword (MembershipProviderConfig.MinPasswordLength + 4);  
Magic Number,DotNetNuke.Entities.Users,UserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserController.cs,VerifyUser,The following statement contains a magic number: if (strings.Length != 2) {  	throw new InvalidVerificationCodeException ();  }  
Magic Number,DotNetNuke.Entities.Users,UserOnlineController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Users Online\UserOnlineController.cs,TrackAnonymousUser,The following statement contains a magic number: if ((cookie == null)) {  	//Create a temporary userId  	userID = Guid.NewGuid ().ToString ();  	//Create a new cookie  	cookie = new HttpCookie (cookieName' userID) {  		Expires = DateTime.Now.AddMinutes (20)'  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	};  	context.Response.Cookies.Add (cookie);  	//Create a user  	user = new AnonymousUserInfo {  		UserID = userID'  		PortalID = portalSettings.PortalId'  		TabID = portalSettings.ActiveTab.TabID'  		CreationDate = DateTime.Now'  		LastActiveDate = DateTime.Now  	};  	//Add the user  	if (!userList.Contains (userID)) {  		userList [userID] = user;  	}  } else {  	if ((cookie.Value == null)) {  		//Expire the cookie' there is something wrong with it  		context.Response.Cookies [cookieName].Expires = new DateTime (1999' 10' 12);  		//No need to do anything else  		return;  	}  	//Get userID out of cookie  	userID = cookie.Value;  	//Find the cookie in the user list  	if ((userList [userID] == null)) {  		userList [userID] = new AnonymousUserInfo ();  		((AnonymousUserInfo)userList [userID]).CreationDate = DateTime.Now;  	}  	user = (AnonymousUserInfo)userList [userID];  	user.UserID = userID;  	user.PortalID = portalSettings.PortalId;  	user.TabID = portalSettings.ActiveTab.TabID;  	user.LastActiveDate = DateTime.Now;  	//Reset the expiration on the cookie  	cookie = new HttpCookie (cookieName' userID) {  		Expires = DateTime.Now.AddMinutes (20)'  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	};  	context.Response.Cookies.Add (cookie);  }  
Magic Number,DotNetNuke.Entities.Users,UserOnlineController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Users Online\UserOnlineController.cs,TrackAnonymousUser,The following statement contains a magic number: if ((cookie == null)) {  	//Create a temporary userId  	userID = Guid.NewGuid ().ToString ();  	//Create a new cookie  	cookie = new HttpCookie (cookieName' userID) {  		Expires = DateTime.Now.AddMinutes (20)'  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	};  	context.Response.Cookies.Add (cookie);  	//Create a user  	user = new AnonymousUserInfo {  		UserID = userID'  		PortalID = portalSettings.PortalId'  		TabID = portalSettings.ActiveTab.TabID'  		CreationDate = DateTime.Now'  		LastActiveDate = DateTime.Now  	};  	//Add the user  	if (!userList.Contains (userID)) {  		userList [userID] = user;  	}  } else {  	if ((cookie.Value == null)) {  		//Expire the cookie' there is something wrong with it  		context.Response.Cookies [cookieName].Expires = new DateTime (1999' 10' 12);  		//No need to do anything else  		return;  	}  	//Get userID out of cookie  	userID = cookie.Value;  	//Find the cookie in the user list  	if ((userList [userID] == null)) {  		userList [userID] = new AnonymousUserInfo ();  		((AnonymousUserInfo)userList [userID]).CreationDate = DateTime.Now;  	}  	user = (AnonymousUserInfo)userList [userID];  	user.UserID = userID;  	user.PortalID = portalSettings.PortalId;  	user.TabID = portalSettings.ActiveTab.TabID;  	user.LastActiveDate = DateTime.Now;  	//Reset the expiration on the cookie  	cookie = new HttpCookie (cookieName' userID) {  		Expires = DateTime.Now.AddMinutes (20)'  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	};  	context.Response.Cookies.Add (cookie);  }  
Magic Number,DotNetNuke.Entities.Users,UserOnlineController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Users Online\UserOnlineController.cs,TrackAnonymousUser,The following statement contains a magic number: if ((cookie == null)) {  	//Create a temporary userId  	userID = Guid.NewGuid ().ToString ();  	//Create a new cookie  	cookie = new HttpCookie (cookieName' userID) {  		Expires = DateTime.Now.AddMinutes (20)'  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	};  	context.Response.Cookies.Add (cookie);  	//Create a user  	user = new AnonymousUserInfo {  		UserID = userID'  		PortalID = portalSettings.PortalId'  		TabID = portalSettings.ActiveTab.TabID'  		CreationDate = DateTime.Now'  		LastActiveDate = DateTime.Now  	};  	//Add the user  	if (!userList.Contains (userID)) {  		userList [userID] = user;  	}  } else {  	if ((cookie.Value == null)) {  		//Expire the cookie' there is something wrong with it  		context.Response.Cookies [cookieName].Expires = new DateTime (1999' 10' 12);  		//No need to do anything else  		return;  	}  	//Get userID out of cookie  	userID = cookie.Value;  	//Find the cookie in the user list  	if ((userList [userID] == null)) {  		userList [userID] = new AnonymousUserInfo ();  		((AnonymousUserInfo)userList [userID]).CreationDate = DateTime.Now;  	}  	user = (AnonymousUserInfo)userList [userID];  	user.UserID = userID;  	user.PortalID = portalSettings.PortalId;  	user.TabID = portalSettings.ActiveTab.TabID;  	user.LastActiveDate = DateTime.Now;  	//Reset the expiration on the cookie  	cookie = new HttpCookie (cookieName' userID) {  		Expires = DateTime.Now.AddMinutes (20)'  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	};  	context.Response.Cookies.Add (cookie);  }  
Magic Number,DotNetNuke.Entities.Users,UserOnlineController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Users Online\UserOnlineController.cs,TrackAnonymousUser,The following statement contains a magic number: if ((cookie == null)) {  	//Create a temporary userId  	userID = Guid.NewGuid ().ToString ();  	//Create a new cookie  	cookie = new HttpCookie (cookieName' userID) {  		Expires = DateTime.Now.AddMinutes (20)'  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	};  	context.Response.Cookies.Add (cookie);  	//Create a user  	user = new AnonymousUserInfo {  		UserID = userID'  		PortalID = portalSettings.PortalId'  		TabID = portalSettings.ActiveTab.TabID'  		CreationDate = DateTime.Now'  		LastActiveDate = DateTime.Now  	};  	//Add the user  	if (!userList.Contains (userID)) {  		userList [userID] = user;  	}  } else {  	if ((cookie.Value == null)) {  		//Expire the cookie' there is something wrong with it  		context.Response.Cookies [cookieName].Expires = new DateTime (1999' 10' 12);  		//No need to do anything else  		return;  	}  	//Get userID out of cookie  	userID = cookie.Value;  	//Find the cookie in the user list  	if ((userList [userID] == null)) {  		userList [userID] = new AnonymousUserInfo ();  		((AnonymousUserInfo)userList [userID]).CreationDate = DateTime.Now;  	}  	user = (AnonymousUserInfo)userList [userID];  	user.UserID = userID;  	user.PortalID = portalSettings.PortalId;  	user.TabID = portalSettings.ActiveTab.TabID;  	user.LastActiveDate = DateTime.Now;  	//Reset the expiration on the cookie  	cookie = new HttpCookie (cookieName' userID) {  		Expires = DateTime.Now.AddMinutes (20)'  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	};  	context.Response.Cookies.Add (cookie);  }  
Magic Number,DotNetNuke.Entities.Users,UserOnlineController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Users Online\UserOnlineController.cs,TrackAnonymousUser,The following statement contains a magic number: if ((cookie == null)) {  	//Create a temporary userId  	userID = Guid.NewGuid ().ToString ();  	//Create a new cookie  	cookie = new HttpCookie (cookieName' userID) {  		Expires = DateTime.Now.AddMinutes (20)'  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	};  	context.Response.Cookies.Add (cookie);  	//Create a user  	user = new AnonymousUserInfo {  		UserID = userID'  		PortalID = portalSettings.PortalId'  		TabID = portalSettings.ActiveTab.TabID'  		CreationDate = DateTime.Now'  		LastActiveDate = DateTime.Now  	};  	//Add the user  	if (!userList.Contains (userID)) {  		userList [userID] = user;  	}  } else {  	if ((cookie.Value == null)) {  		//Expire the cookie' there is something wrong with it  		context.Response.Cookies [cookieName].Expires = new DateTime (1999' 10' 12);  		//No need to do anything else  		return;  	}  	//Get userID out of cookie  	userID = cookie.Value;  	//Find the cookie in the user list  	if ((userList [userID] == null)) {  		userList [userID] = new AnonymousUserInfo ();  		((AnonymousUserInfo)userList [userID]).CreationDate = DateTime.Now;  	}  	user = (AnonymousUserInfo)userList [userID];  	user.UserID = userID;  	user.PortalID = portalSettings.PortalId;  	user.TabID = portalSettings.ActiveTab.TabID;  	user.LastActiveDate = DateTime.Now;  	//Reset the expiration on the cookie  	cookie = new HttpCookie (cookieName' userID) {  		Expires = DateTime.Now.AddMinutes (20)'  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	};  	context.Response.Cookies.Add (cookie);  }  
Magic Number,DotNetNuke.Entities.Users,UserOnlineController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Users Online\UserOnlineController.cs,TrackAnonymousUser,The following statement contains a magic number: cookie = new HttpCookie (cookieName' userID) {  	Expires = DateTime.Now.AddMinutes (20)'  	Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  };  
Magic Number,DotNetNuke.Entities.Users,UserOnlineController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Users Online\UserOnlineController.cs,TrackAnonymousUser,The following statement contains a magic number: if ((cookie.Value == null)) {  	//Expire the cookie' there is something wrong with it  	context.Response.Cookies [cookieName].Expires = new DateTime (1999' 10' 12);  	//No need to do anything else  	return;  }  
Magic Number,DotNetNuke.Entities.Users,UserOnlineController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Users Online\UserOnlineController.cs,TrackAnonymousUser,The following statement contains a magic number: if ((cookie.Value == null)) {  	//Expire the cookie' there is something wrong with it  	context.Response.Cookies [cookieName].Expires = new DateTime (1999' 10' 12);  	//No need to do anything else  	return;  }  
Magic Number,DotNetNuke.Entities.Users,UserOnlineController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Users Online\UserOnlineController.cs,TrackAnonymousUser,The following statement contains a magic number: if ((cookie.Value == null)) {  	//Expire the cookie' there is something wrong with it  	context.Response.Cookies [cookieName].Expires = new DateTime (1999' 10' 12);  	//No need to do anything else  	return;  }  
Magic Number,DotNetNuke.Entities.Users,UserOnlineController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Users Online\UserOnlineController.cs,TrackAnonymousUser,The following statement contains a magic number: context.Response.Cookies [cookieName].Expires = new DateTime (1999' 10' 12);  
Magic Number,DotNetNuke.Entities.Users,UserOnlineController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Users Online\UserOnlineController.cs,TrackAnonymousUser,The following statement contains a magic number: context.Response.Cookies [cookieName].Expires = new DateTime (1999' 10' 12);  
Magic Number,DotNetNuke.Entities.Users,UserOnlineController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Users Online\UserOnlineController.cs,TrackAnonymousUser,The following statement contains a magic number: context.Response.Cookies [cookieName].Expires = new DateTime (1999' 10' 12);  
Magic Number,DotNetNuke.Entities.Users,UserOnlineController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Users Online\UserOnlineController.cs,TrackAnonymousUser,The following statement contains a magic number: cookie = new HttpCookie (cookieName' userID) {  	Expires = DateTime.Now.AddMinutes (20)'  	Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  };  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetCurrentDomainDirectory,The following statement contains a magic number: if (dir.Length > 3 && dir.EndsWith ("\\")) {  	dir = dir.Substring (0' dir.Length - 1);  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,FormatAddress,The following statement contains a magic number: if (!String.IsNullOrEmpty (strAddress.Trim ())) {  	strAddress = strAddress.Substring (2);  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,FormatAddress,The following statement contains a magic number: strAddress = strAddress.Substring (2);  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,FormatVersion,The following statement contains a magic number: if (version != null) {  	if (fieldCount > 0) {  		if (version.Major >= 0) {  			strVersion += version.Major.ToString (fieldFormat);  		} else {  			strVersion += intZero.ToString (fieldFormat);  		}  	}  	if (fieldCount > 1) {  		strVersion += delimiterCharacter;  		if (version.Minor >= 0) {  			strVersion += version.Minor.ToString (fieldFormat);  		} else {  			strVersion += intZero.ToString (fieldFormat);  		}  	}  	if (fieldCount > 2) {  		strVersion += delimiterCharacter;  		if (version.Build >= 0) {  			strVersion += version.Build.ToString (fieldFormat);  		} else {  			strVersion += intZero.ToString (fieldFormat);  		}  	}  	if (fieldCount > 3) {  		strVersion += delimiterCharacter;  		if (version.Revision >= 0) {  			strVersion += version.Revision.ToString (fieldFormat);  		} else {  			strVersion += intZero.ToString (fieldFormat);  		}  	}  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,FormatVersion,The following statement contains a magic number: if (version != null) {  	if (fieldCount > 0) {  		if (version.Major >= 0) {  			strVersion += version.Major.ToString (fieldFormat);  		} else {  			strVersion += intZero.ToString (fieldFormat);  		}  	}  	if (fieldCount > 1) {  		strVersion += delimiterCharacter;  		if (version.Minor >= 0) {  			strVersion += version.Minor.ToString (fieldFormat);  		} else {  			strVersion += intZero.ToString (fieldFormat);  		}  	}  	if (fieldCount > 2) {  		strVersion += delimiterCharacter;  		if (version.Build >= 0) {  			strVersion += version.Build.ToString (fieldFormat);  		} else {  			strVersion += intZero.ToString (fieldFormat);  		}  	}  	if (fieldCount > 3) {  		strVersion += delimiterCharacter;  		if (version.Revision >= 0) {  			strVersion += version.Revision.ToString (fieldFormat);  		} else {  			strVersion += intZero.ToString (fieldFormat);  		}  	}  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,FormatVersion,The following statement contains a magic number: if (fieldCount > 2) {  	strVersion += delimiterCharacter;  	if (version.Build >= 0) {  		strVersion += version.Build.ToString (fieldFormat);  	} else {  		strVersion += intZero.ToString (fieldFormat);  	}  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,FormatVersion,The following statement contains a magic number: if (fieldCount > 3) {  	strVersion += delimiterCharacter;  	if (version.Revision >= 0) {  		strVersion += version.Revision.ToString (fieldFormat);  	} else {  		strVersion += intZero.ToString (fieldFormat);  	}  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,ManageTokenUploadDirectory,The following statement contains a magic number: if (!String.IsNullOrEmpty (strHTML)) {  	tLen = strToken.Length + 2;  	string _UploadDirectory = strUploadDirectory.ToLower ();  	//find position of first occurrance:  	P = strHTML.IndexOf (strToken + "=\""' StringComparison.InvariantCultureIgnoreCase);  	while (P != -1) {  		sbBuff.Append (strHTML.Substring (S' P - S + tLen));  		//keep charactes left of URL  		S = P + tLen;  		//save startpos of URL  		R = strHTML.IndexOf ("\""' S);  		//end of URL  		if (R >= 0) {  			strURL = strHTML.Substring (S' R - S).ToLower ();  		} else {  			strURL = strHTML.Substring (S).ToLower ();  		}  		// add uploaddirectory if we are linking internally and the uploaddirectory is not already included  		if (!strURL.Contains ("://") && !strURL.StartsWith ("/") && !strURL.StartsWith (_UploadDirectory)) {  			sbBuff.Append (strUploadDirectory);  		}  		//find position of next occurrance:  		P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  	}  	if (S > -1) {  		sbBuff.Append (strHTML.Substring (S));  	}  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,ManageTokenUploadDirectory,The following statement contains a magic number: if (!String.IsNullOrEmpty (strHTML)) {  	tLen = strToken.Length + 2;  	string _UploadDirectory = strUploadDirectory.ToLower ();  	//find position of first occurrance:  	P = strHTML.IndexOf (strToken + "=\""' StringComparison.InvariantCultureIgnoreCase);  	while (P != -1) {  		sbBuff.Append (strHTML.Substring (S' P - S + tLen));  		//keep charactes left of URL  		S = P + tLen;  		//save startpos of URL  		R = strHTML.IndexOf ("\""' S);  		//end of URL  		if (R >= 0) {  			strURL = strHTML.Substring (S' R - S).ToLower ();  		} else {  			strURL = strHTML.Substring (S).ToLower ();  		}  		// add uploaddirectory if we are linking internally and the uploaddirectory is not already included  		if (!strURL.Contains ("://") && !strURL.StartsWith ("/") && !strURL.StartsWith (_UploadDirectory)) {  			sbBuff.Append (strUploadDirectory);  		}  		//find position of next occurrance:  		P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  	}  	if (S > -1) {  		sbBuff.Append (strHTML.Substring (S));  	}  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,ManageTokenUploadDirectory,The following statement contains a magic number: tLen = strToken.Length + 2;  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,ManageTokenUploadDirectory,The following statement contains a magic number: while (P != -1) {  	sbBuff.Append (strHTML.Substring (S' P - S + tLen));  	//keep charactes left of URL  	S = P + tLen;  	//save startpos of URL  	R = strHTML.IndexOf ("\""' S);  	//end of URL  	if (R >= 0) {  		strURL = strHTML.Substring (S' R - S).ToLower ();  	} else {  		strURL = strHTML.Substring (S).ToLower ();  	}  	// add uploaddirectory if we are linking internally and the uploaddirectory is not already included  	if (!strURL.Contains ("://") && !strURL.StartsWith ("/") && !strURL.StartsWith (_UploadDirectory)) {  		sbBuff.Append (strUploadDirectory);  	}  	//find position of next occurrance:  	P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,ManageTokenUploadDirectory,The following statement contains a magic number: P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,DeleteFolder,The following statement contains a magic number: try {  	Directory.Delete (strRoot);  } catch (IOException) {  	//Force Deletion. Directory should be empty  	try {  		Thread.Sleep (50);  		Directory.Delete (strRoot' true);  	} catch (Exception ex) {  		Logger.Error (ex);  	}  } catch (Exception ex) {  	Logger.Error (ex);  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,DeleteFolder,The following statement contains a magic number: try {  	Thread.Sleep (50);  	Directory.Delete (strRoot' true);  } catch (Exception ex) {  	Logger.Error (ex);  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,DeleteFolder,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CleanFileName,The following statement contains a magic number: if (String.IsNullOrEmpty (BadChars)) {  	BadChars = ":/\\?*|" + ((char)34) + ((char)39) + ((char)9);  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CleanFileName,The following statement contains a magic number: if (String.IsNullOrEmpty (BadChars)) {  	BadChars = ":/\\?*|" + ((char)34) + ((char)39) + ((char)9);  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CleanFileName,The following statement contains a magic number: if (String.IsNullOrEmpty (BadChars)) {  	BadChars = ":/\\?*|" + ((char)34) + ((char)39) + ((char)9);  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CleanFileName,The following statement contains a magic number: BadChars = ":/\\?*|" + ((char)34) + ((char)39) + ((char)9);  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CleanFileName,The following statement contains a magic number: BadChars = ":/\\?*|" + ((char)34) + ((char)39) + ((char)9);  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,CleanFileName,The following statement contains a magic number: BadChars = ":/\\?*|" + ((char)34) + ((char)39) + ((char)9);  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,ResolveUrl,The following statement contains a magic number: if ((url.ToCharArray () [1] == '/' || url.ToCharArray () [1] == '\\')) {  	// Url looks like ~/ or ~\  	if (!string.IsNullOrEmpty (ApplicationPath) && ApplicationPath.Length > 1) {  		return ApplicationPath + "/" + url.Substring (2);  	} else {  		return "/" + url.Substring (2);  	}  } else {  	// Url look like ~something  	if (!string.IsNullOrEmpty (ApplicationPath) && ApplicationPath.Length > 1) {  		return ApplicationPath + "/" + url.Substring (1);  	} else {  		return ApplicationPath + url.Substring (1);  	}  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,ResolveUrl,The following statement contains a magic number: if ((url.ToCharArray () [1] == '/' || url.ToCharArray () [1] == '\\')) {  	// Url looks like ~/ or ~\  	if (!string.IsNullOrEmpty (ApplicationPath) && ApplicationPath.Length > 1) {  		return ApplicationPath + "/" + url.Substring (2);  	} else {  		return "/" + url.Substring (2);  	}  } else {  	// Url look like ~something  	if (!string.IsNullOrEmpty (ApplicationPath) && ApplicationPath.Length > 1) {  		return ApplicationPath + "/" + url.Substring (1);  	} else {  		return ApplicationPath + url.Substring (1);  	}  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,ResolveUrl,The following statement contains a magic number: if (!string.IsNullOrEmpty (ApplicationPath) && ApplicationPath.Length > 1) {  	return ApplicationPath + "/" + url.Substring (2);  } else {  	return "/" + url.Substring (2);  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,ResolveUrl,The following statement contains a magic number: if (!string.IsNullOrEmpty (ApplicationPath) && ApplicationPath.Length > 1) {  	return ApplicationPath + "/" + url.Substring (2);  } else {  	return "/" + url.Substring (2);  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,ResolveUrl,The following statement contains a magic number: return ApplicationPath + "/" + url.Substring (2);  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,ResolveUrl,The following statement contains a magic number: return "/" + url.Substring (2);  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The following statement contains a magic number: if (blnNoneSpecified) {  	objTab = new TabInfo ();  	objTab.TabID = -1;  	objTab.TabName = "<" + Localization.GetString ("None_Specified") + ">";  	objTab.TabOrder = 0;  	objTab.ParentId = -2;  	arrPortalTabs.Add (objTab);  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The following statement contains a magic number: objTab.ParentId = -2;  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The following statement contains a magic number: if (blnNoneSpecified) {  	objTab = new TabInfo ();  	objTab.TabID = -1;  	objTab.TabName = "<" + Localization.GetString ("None_Specified") + ">";  	objTab.TabOrder = 0;  	objTab.ParentId = -2;  	arrPortalTabs.Add (objTab);  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The following statement contains a magic number: objTab.ParentId = -2;  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The following statement contains a magic number: if (blnNoneSpecified) {  	objTab = new TabInfo ();  	objTab.TabID = -1;  	objTab.TabName = "<" + Localization.GetString ("None_Specified") + ">";  	objTab.TabOrder = 0;  	objTab.ParentId = -2;  	arrPortalTabs.Add (objTab);  }  
Magic Number,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetPortalTabs,The following statement contains a magic number: objTab.ParentId = -2;  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (version == "2.0") {  	//Try and load a 3.0 Assembly  	try {  		AppDomain.CurrentDomain.Load ("System.Runtime.Serialization' Version=3.0.0.0' Culture=neutral' PublicKeyToken=B77A5C561934E089");  		version = "3.0";  	} catch (Exception exc) {  		Logger.Error (exc);  	}  	//Try and load a 3.5 Assembly  	try {  		AppDomain.CurrentDomain.Load ("System.Core' Version=3.5.0.0' Culture=neutral' PublicKeyToken=B77A5C561934E089");  		version = "3.5";  	} catch (Exception exc) {  		Logger.Error (exc);  	}  } else if (version == "4.0") {  	var release = GetReleaseFromRegistry ();  	if (release >= 394254) {  		version = "4.6.1";  	} else if (release >= 393295) {  		version = "4.6";  	} else if (release >= 379893) {  		version = "4.5.2";  	} else if (release >= 378675) {  		version = "4.5.1";  	} else if (release >= 378389) {  		version = "4.5";  	}  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (version == "2.0") {  	//Try and load a 3.0 Assembly  	try {  		AppDomain.CurrentDomain.Load ("System.Runtime.Serialization' Version=3.0.0.0' Culture=neutral' PublicKeyToken=B77A5C561934E089");  		version = "3.0";  	} catch (Exception exc) {  		Logger.Error (exc);  	}  	//Try and load a 3.5 Assembly  	try {  		AppDomain.CurrentDomain.Load ("System.Core' Version=3.5.0.0' Culture=neutral' PublicKeyToken=B77A5C561934E089");  		version = "3.5";  	} catch (Exception exc) {  		Logger.Error (exc);  	}  } else if (version == "4.0") {  	var release = GetReleaseFromRegistry ();  	if (release >= 394254) {  		version = "4.6.1";  	} else if (release >= 393295) {  		version = "4.6";  	} else if (release >= 379893) {  		version = "4.5.2";  	} else if (release >= 378675) {  		version = "4.5.1";  	} else if (release >= 378389) {  		version = "4.5";  	}  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (version == "2.0") {  	//Try and load a 3.0 Assembly  	try {  		AppDomain.CurrentDomain.Load ("System.Runtime.Serialization' Version=3.0.0.0' Culture=neutral' PublicKeyToken=B77A5C561934E089");  		version = "3.0";  	} catch (Exception exc) {  		Logger.Error (exc);  	}  	//Try and load a 3.5 Assembly  	try {  		AppDomain.CurrentDomain.Load ("System.Core' Version=3.5.0.0' Culture=neutral' PublicKeyToken=B77A5C561934E089");  		version = "3.5";  	} catch (Exception exc) {  		Logger.Error (exc);  	}  } else if (version == "4.0") {  	var release = GetReleaseFromRegistry ();  	if (release >= 394254) {  		version = "4.6.1";  	} else if (release >= 393295) {  		version = "4.6";  	} else if (release >= 379893) {  		version = "4.5.2";  	} else if (release >= 378675) {  		version = "4.5.1";  	} else if (release >= 378389) {  		version = "4.5";  	}  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (version == "2.0") {  	//Try and load a 3.0 Assembly  	try {  		AppDomain.CurrentDomain.Load ("System.Runtime.Serialization' Version=3.0.0.0' Culture=neutral' PublicKeyToken=B77A5C561934E089");  		version = "3.0";  	} catch (Exception exc) {  		Logger.Error (exc);  	}  	//Try and load a 3.5 Assembly  	try {  		AppDomain.CurrentDomain.Load ("System.Core' Version=3.5.0.0' Culture=neutral' PublicKeyToken=B77A5C561934E089");  		version = "3.5";  	} catch (Exception exc) {  		Logger.Error (exc);  	}  } else if (version == "4.0") {  	var release = GetReleaseFromRegistry ();  	if (release >= 394254) {  		version = "4.6.1";  	} else if (release >= 393295) {  		version = "4.6";  	} else if (release >= 379893) {  		version = "4.5.2";  	} else if (release >= 378675) {  		version = "4.5.1";  	} else if (release >= 378389) {  		version = "4.5";  	}  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (version == "2.0") {  	//Try and load a 3.0 Assembly  	try {  		AppDomain.CurrentDomain.Load ("System.Runtime.Serialization' Version=3.0.0.0' Culture=neutral' PublicKeyToken=B77A5C561934E089");  		version = "3.0";  	} catch (Exception exc) {  		Logger.Error (exc);  	}  	//Try and load a 3.5 Assembly  	try {  		AppDomain.CurrentDomain.Load ("System.Core' Version=3.5.0.0' Culture=neutral' PublicKeyToken=B77A5C561934E089");  		version = "3.5";  	} catch (Exception exc) {  		Logger.Error (exc);  	}  } else if (version == "4.0") {  	var release = GetReleaseFromRegistry ();  	if (release >= 394254) {  		version = "4.6.1";  	} else if (release >= 393295) {  		version = "4.6";  	} else if (release >= 379893) {  		version = "4.5.2";  	} else if (release >= 378675) {  		version = "4.5.1";  	} else if (release >= 378389) {  		version = "4.5";  	}  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (version == "4.0") {  	var release = GetReleaseFromRegistry ();  	if (release >= 394254) {  		version = "4.6.1";  	} else if (release >= 393295) {  		version = "4.6";  	} else if (release >= 379893) {  		version = "4.5.2";  	} else if (release >= 378675) {  		version = "4.5.1";  	} else if (release >= 378389) {  		version = "4.5";  	}  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (version == "4.0") {  	var release = GetReleaseFromRegistry ();  	if (release >= 394254) {  		version = "4.6.1";  	} else if (release >= 393295) {  		version = "4.6";  	} else if (release >= 379893) {  		version = "4.5.2";  	} else if (release >= 378675) {  		version = "4.5.1";  	} else if (release >= 378389) {  		version = "4.5";  	}  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (version == "4.0") {  	var release = GetReleaseFromRegistry ();  	if (release >= 394254) {  		version = "4.6.1";  	} else if (release >= 393295) {  		version = "4.6";  	} else if (release >= 379893) {  		version = "4.5.2";  	} else if (release >= 378675) {  		version = "4.5.1";  	} else if (release >= 378389) {  		version = "4.5";  	}  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (version == "4.0") {  	var release = GetReleaseFromRegistry ();  	if (release >= 394254) {  		version = "4.6.1";  	} else if (release >= 393295) {  		version = "4.6";  	} else if (release >= 379893) {  		version = "4.5.2";  	} else if (release >= 378675) {  		version = "4.5.1";  	} else if (release >= 378389) {  		version = "4.5";  	}  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (version == "4.0") {  	var release = GetReleaseFromRegistry ();  	if (release >= 394254) {  		version = "4.6.1";  	} else if (release >= 393295) {  		version = "4.6";  	} else if (release >= 379893) {  		version = "4.5.2";  	} else if (release >= 378675) {  		version = "4.5.1";  	} else if (release >= 378389) {  		version = "4.5";  	}  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 394254) {  	version = "4.6.1";  } else if (release >= 393295) {  	version = "4.6";  } else if (release >= 379893) {  	version = "4.5.2";  } else if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 394254) {  	version = "4.6.1";  } else if (release >= 393295) {  	version = "4.6";  } else if (release >= 379893) {  	version = "4.5.2";  } else if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 394254) {  	version = "4.6.1";  } else if (release >= 393295) {  	version = "4.6";  } else if (release >= 379893) {  	version = "4.5.2";  } else if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 394254) {  	version = "4.6.1";  } else if (release >= 393295) {  	version = "4.6";  } else if (release >= 379893) {  	version = "4.5.2";  } else if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 394254) {  	version = "4.6.1";  } else if (release >= 393295) {  	version = "4.6";  } else if (release >= 379893) {  	version = "4.5.2";  } else if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 393295) {  	version = "4.6";  } else if (release >= 379893) {  	version = "4.5.2";  } else if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 393295) {  	version = "4.6";  } else if (release >= 379893) {  	version = "4.5.2";  } else if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 393295) {  	version = "4.6";  } else if (release >= 379893) {  	version = "4.5.2";  } else if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 393295) {  	version = "4.6";  } else if (release >= 379893) {  	version = "4.5.2";  } else if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 379893) {  	version = "4.5.2";  } else if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 379893) {  	version = "4.5.2";  } else if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 379893) {  	version = "4.5.2";  } else if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 378675) {  	version = "4.5.1";  } else if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,GetNETFrameworkVersion,The following statement contains a magic number: if (release >= 378389) {  	version = "4.5";  }  
Magic Number,DotNetNuke.Common.Controls,Form,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Controls\ActionLessForm.cs,RenderAttributes,The following statement contains a magic number: if (StartPoint >= 0) {  	int EndPoint = html.IndexOf ("\""' StartPoint + 8) + 1;  	html = html.Remove (StartPoint' EndPoint - StartPoint);  	html = html.Insert (StartPoint' "action=\"" + HttpUtility.HtmlEncode (HttpContext.Current.Request.RawUrl) + "\"");  }  
Magic Number,DotNetNuke.Common.Controls,Form,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Controls\ActionLessForm.cs,RenderAttributes,The following statement contains a magic number: if (base.ID != null) {  	// Locate and replace id attribute  	StartPoint = html.IndexOf ("id=\"");  	if (StartPoint >= 0) {  		int EndPoint = html.IndexOf ("\""' StartPoint + 4) + 1;  		html = html.Remove (StartPoint' EndPoint - StartPoint);  		html = html.Insert (StartPoint' "id=\"" + base.ClientID + "\"");  	}  }  
Magic Number,DotNetNuke.Common.Controls,Form,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Controls\ActionLessForm.cs,RenderAttributes,The following statement contains a magic number: if (StartPoint >= 0) {  	int EndPoint = html.IndexOf ("\""' StartPoint + 4) + 1;  	html = html.Remove (StartPoint' EndPoint - StartPoint);  	html = html.Insert (StartPoint' "id=\"" + base.ClientID + "\"");  }  
Magic Number,DotNetNuke.Common.Internal,GlobalsImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Internal\GlobalsImpl.cs,GetDomainName,The following statement contains a magic number: for (queryIndex = 2; queryIndex <= url.GetUpperBound (0); queryIndex++) {  	bool needExit = false;  	switch (url [queryIndex].ToLower ()) {  	case "":  		continue;  	case "admin":  	case "controls":  	case "desktopmodules":  	case "mobilemodules":  	case "premiummodules":  	case "providers":  	case "api":  		needExit = true;  		break;  	default:  		// exclude filenames ENDing in ".aspx" or ".axd" ---   		//   we'll use reverse match'  		//   - but that means we are checking position of left end of the match;  		//   - and to do that' we need to ensure the string we test against is long enough;  		if ((url [queryIndex].Length >= ".aspx".Length)) {  			if (url [queryIndex].ToLower ().LastIndexOf (".aspx"' StringComparison.Ordinal) == (url [queryIndex].Length - (".aspx".Length)) || url [queryIndex].ToLower ().LastIndexOf (".axd"' StringComparison.Ordinal) == (url [queryIndex].Length - (".axd".Length)) || url [queryIndex].ToLower ().LastIndexOf (".ashx"' StringComparison.Ordinal) == (url [queryIndex].Length - (".ashx".Length))) {  				break;  			}  		}  		// non of the exclusionary names found  		domainName.Append ((!String.IsNullOrEmpty (domainName.ToString ()) ? "/" : "") + url [queryIndex]);  		break;  	}  	if (needExit) {  		break;  	}  }  
Magic Number,DotNetNuke.Common.Internal,GlobalsImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Internal\GlobalsImpl.cs,GetDomainName,The following statement contains a magic number: queryIndex = 2
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IPtoLong,The following statement contains a magic number: for (int x = 0; x <= 3; x++) {  	addr = addr | (Convert.ToInt64 (addressBytes [x]) << (3 - x) * 8);  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IPtoLong,The following statement contains a magic number: for (int x = 0; x <= 3; x++) {  	addr = addr | (Convert.ToInt64 (addressBytes [x]) << (3 - x) * 8);  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IPtoLong,The following statement contains a magic number: for (int x = 0; x <= 3; x++) {  	addr = addr | (Convert.ToInt64 (addressBytes [x]) << (3 - x) * 8);  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IPtoLong,The following statement contains a magic number: addr = addr | (Convert.ToInt64 (addressBytes [x]) << (3 - x) * 8);  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IPtoLong,The following statement contains a magic number: addr = addr | (Convert.ToInt64 (addressBytes [x]) << (3 - x) * 8);  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,LongToIp,The following statement contains a magic number: for (int x = 0; x <= 3; x++) {  	ipByte [x] = Convert.ToByte ((ip & mask8) >> ((3 - x) * 8));  	mask8 = mask8 >> 8;  	addr += ipByte [x].ToString () + ".";  	//add current octet to string  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,LongToIp,The following statement contains a magic number: for (int x = 0; x <= 3; x++) {  	ipByte [x] = Convert.ToByte ((ip & mask8) >> ((3 - x) * 8));  	mask8 = mask8 >> 8;  	addr += ipByte [x].ToString () + ".";  	//add current octet to string  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,LongToIp,The following statement contains a magic number: for (int x = 0; x <= 3; x++) {  	ipByte [x] = Convert.ToByte ((ip & mask8) >> ((3 - x) * 8));  	mask8 = mask8 >> 8;  	addr += ipByte [x].ToString () + ".";  	//add current octet to string  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,LongToIp,The following statement contains a magic number: for (int x = 0; x <= 3; x++) {  	ipByte [x] = Convert.ToByte ((ip & mask8) >> ((3 - x) * 8));  	mask8 = mask8 >> 8;  	addr += ipByte [x].ToString () + ".";  	//add current octet to string  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,LongToIp,The following statement contains a magic number: ipByte [x] = Convert.ToByte ((ip & mask8) >> ((3 - x) * 8));  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,LongToIp,The following statement contains a magic number: ipByte [x] = Convert.ToByte ((ip & mask8) >> ((3 - x) * 8));  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,LongToIp,The following statement contains a magic number: mask8 = mask8 >> 8;  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,MaskFromCidr,The following statement contains a magic number: return Convert.ToInt64 (Math.Pow (2' ((32 - cidr))) - 1) ^ 4294967295L;  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,MaskFromCidr,The following statement contains a magic number: return Convert.ToInt64 (Math.Pow (2' ((32 - cidr))) - 1) ^ 4294967295L;  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,FormatAsCidr,The following statement contains a magic number: for (int x = 31; x >= 0; x += -1) {  	if ((maskL & oneBit) == oneBit)  		cidr += 1;  	else  		break;  	oneBit = oneBit >> 1;  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,Network2IpRange,The following statement contains a magic number: try {  	string[] elements = sNetwork.Split (new[] {  		'/'  	});  	uint ip = IP2Int (elements [0]);  	int bits = Convert.ToInt32 (elements [1]);  	uint mask = ~(0xffffffff >> bits);  	uint network = ip & mask;  	uint broadcast = network + ~mask;  	uint usableIps = (bits > 30) ? 0 : (broadcast - network - 1);  	if (usableIps <= 0) {  		startIP = endIP = 0;  	} else {  		startIP = network + 1;  		endIP = broadcast - 1;  	}  } catch (Exception) {  	//catch case where IP cannot be resolved such as when debugger is attached  	startIP = 0;  	endIP = 0;  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IP2Int,The following statement contains a magic number: if (elements.Length == 4) {  	ip = Convert.ToUInt32 (elements [0]) << 24;  	ip += Convert.ToUInt32 (elements [1]) << 16;  	ip += Convert.ToUInt32 (elements [2]) << 8;  	ip += Convert.ToUInt32 (elements [3]);  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IP2Int,The following statement contains a magic number: if (elements.Length == 4) {  	ip = Convert.ToUInt32 (elements [0]) << 24;  	ip += Convert.ToUInt32 (elements [1]) << 16;  	ip += Convert.ToUInt32 (elements [2]) << 8;  	ip += Convert.ToUInt32 (elements [3]);  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IP2Int,The following statement contains a magic number: if (elements.Length == 4) {  	ip = Convert.ToUInt32 (elements [0]) << 24;  	ip += Convert.ToUInt32 (elements [1]) << 16;  	ip += Convert.ToUInt32 (elements [2]) << 8;  	ip += Convert.ToUInt32 (elements [3]);  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IP2Int,The following statement contains a magic number: if (elements.Length == 4) {  	ip = Convert.ToUInt32 (elements [0]) << 24;  	ip += Convert.ToUInt32 (elements [1]) << 16;  	ip += Convert.ToUInt32 (elements [2]) << 8;  	ip += Convert.ToUInt32 (elements [3]);  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IP2Int,The following statement contains a magic number: if (elements.Length == 4) {  	ip = Convert.ToUInt32 (elements [0]) << 24;  	ip += Convert.ToUInt32 (elements [1]) << 16;  	ip += Convert.ToUInt32 (elements [2]) << 8;  	ip += Convert.ToUInt32 (elements [3]);  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IP2Int,The following statement contains a magic number: if (elements.Length == 4) {  	ip = Convert.ToUInt32 (elements [0]) << 24;  	ip += Convert.ToUInt32 (elements [1]) << 16;  	ip += Convert.ToUInt32 (elements [2]) << 8;  	ip += Convert.ToUInt32 (elements [3]);  }  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IP2Int,The following statement contains a magic number: ip = Convert.ToUInt32 (elements [0]) << 24;  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IP2Int,The following statement contains a magic number: ip += Convert.ToUInt32 (elements [1]) << 16;  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IP2Int,The following statement contains a magic number: ip += Convert.ToUInt32 (elements [2]) << 8;  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IP2Int,The following statement contains a magic number: ip += Convert.ToUInt32 (elements [2]) << 8;  
Magic Number,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,IP2Int,The following statement contains a magic number: ip += Convert.ToUInt32 (elements [3]);  
Magic Number,DotNetNuke.Common.Utilities.Internal,RetryableAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RetryableAction.cs,RetryEverySecondFor30Seconds,The following statement contains a magic number: new RetryableAction (action' description' 30' TimeSpan.FromSeconds (1)).TryIt ();  
Magic Number,DotNetNuke.Common.Utilities.Internal,RetryableAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RetryableAction.cs,Retry5TimesWith2SecondsDelay,The following statement contains a magic number: new RetryableAction (action' description' 5' TimeSpan.FromSeconds (2)).TryIt ();  
Magic Number,DotNetNuke.Common.Utilities.Internal,RetryableAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RetryableAction.cs,Retry5TimesWith2SecondsDelay,The following statement contains a magic number: new RetryableAction (action' description' 5' TimeSpan.FromSeconds (2)).TryIt ();  
Magic Number,DotNetNuke.Common.Utilities.Internal,RetryableAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RetryableAction.cs,TryIt,The following statement contains a magic number: do {  	try {  		Action ();  		if (Logger.IsTraceEnabled)  			Logger.TraceFormat ("Action succeeded - {0}"' Description);  		return;  	} catch (Exception) {  		if (retrysRemaining <= 0) {  			Logger.WarnFormat ("All retries of action failed - {0}"' Description);  			throw;  		}  		if (Logger.IsTraceEnabled)  			Logger.TraceFormat ("Retrying action {0} - {1}"' retrysRemaining' Description);  		SleepAction.Invoke (currentDelay);  		const double epsilon = 0.0001;  		if (Math.Abs (DelayMultiplier - 1) > epsilon) {  			currentDelay = (int)(currentDelay * DelayMultiplier);  		}  	}  	retrysRemaining--;  } while (true);  
Magic Number,DotNetNuke.Common.Utilities.Internal,RetryableAction,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\RetryableAction.cs,TryIt,The following statement contains a magic number: try {  	Action ();  	if (Logger.IsTraceEnabled)  		Logger.TraceFormat ("Action succeeded - {0}"' Description);  	return;  } catch (Exception) {  	if (retrysRemaining <= 0) {  		Logger.WarnFormat ("All retries of action failed - {0}"' Description);  		throw;  	}  	if (Logger.IsTraceEnabled)  		Logger.TraceFormat ("Retrying action {0} - {1}"' retrysRemaining' Description);  	SleepAction.Invoke (currentDelay);  	const double epsilon = 0.0001;  	if (Math.Abs (DelayMultiplier - 1) > epsilon) {  		currentDelay = (int)(currentDelay * DelayMultiplier);  	}  }  
Magic Number,DotNetNuke.ComponentModel.DataAnnotations,CacheableAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\ComponentModel\DataAnnotations\CacheableAttribute.cs,CacheableAttribute,The following statement contains a magic number: CacheTimeOut = 20;  
Magic Number,DotNetNuke.Entities.Content.Taxonomy,Vocabulary,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Taxonomy\Vocabulary.cs,Fill,The following statement contains a magic number: switch (Convert.ToInt16 (dr ["VocabularyTypeID"])) {  case 1:  	Type = VocabularyType.Simple;  	break;  case 2:  	Type = VocabularyType.Hierarchy;  	break;  }  
Magic Number,DotNetNuke.Entities.Content.Workflow,SystemWorkflowManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\SystemWorkflowManager.cs,CreateSaveDraftWorkflow,The following statement contains a magic number: state = GetPublishedStateDefinition (2);  
Magic Number,DotNetNuke.Entities.Content.Workflow,SystemWorkflowManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\SystemWorkflowManager.cs,CreateContentApprovalWorkflow,The following statement contains a magic number: state = GetReadyForReviewStateDefinition (2);  
Magic Number,DotNetNuke.Entities.Content.Workflow,SystemWorkflowManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\SystemWorkflowManager.cs,CreateContentApprovalWorkflow,The following statement contains a magic number: state = GetPublishedStateDefinition (3);  
Magic Number,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,MoveWorkflowStateDown,The following statement contains a magic number: if (states.Length == 3) {  	throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateCannotBeMoved"' Localization.ExceptionsResourceFile));  }  
Magic Number,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,MoveWorkflowStateUp,The following statement contains a magic number: if (states.Length == 3) {  	throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateCannotBeMoved"' Localization.ExceptionsResourceFile));  }  
Magic Number,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,MoveWorkflowStateUp,The following statement contains a magic number: for (var i = 0; i < states.Length; i++) {  	if (states [i].StateID != stateId)  		continue;  	// Last and Next to Last workflow state cannot be moved up  	if (i >= states.Length - 2) {  		throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateCannotBeMoved"' Localization.ExceptionsResourceFile));  	}  	stateToMoveUp = states [i];  	stateToMoveDown = states [i + 1];  	break;  }  
Magic Number,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,MoveWorkflowStateUp,The following statement contains a magic number: if (i >= states.Length - 2) {  	throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateCannotBeMoved"' Localization.ExceptionsResourceFile));  }  
Magic Number,DotNetNuke.Entities.Content.Workflow,WorkflowStateManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Workflow\WorkflowStateManager.cs,MoveState,The following statement contains a magic number: if (index < 1 || index > states.Length - 2) {  	throw new WorkflowInvalidOperationException (Localization.GetString ("WorkflowStateCannotBeMoved"' Localization.ExceptionsResourceFile));  }  
Magic Number,DotNetNuke.Entities.Host,IPFilterController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\IPFilter\IPFilterController.cs,IsIPAddressBanned,The following statement contains a magic number: if (CheckIfBannedIPAddress (ipAddress)) {  	//should throw 403.6  	throw new HttpException (403' "");  }  
Magic Number,DotNetNuke.Entities.Host,IPFilterController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\IPFilter\IPFilterController.cs,IsIPAddressBanned,The following statement contains a magic number: throw new HttpException (403' "");  
Magic Number,DotNetNuke.Entities.Host,Host,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\Host.cs,GetSecureHostSettingsDictionary,The following statement contains a magic number: if (dicSettings == null) {  	dicSettings = new Dictionary<string' string> ();  	IDataReader dr = DataProvider.Instance ().GetHostSettings ();  	try {  		while (dr.Read ()) {  			if (!Convert.ToBoolean (dr [2])) {  				string settingName = dr.GetString (0);  				if (settingName.ToLower ().IndexOf ("password") == -1) {  					if (!dr.IsDBNull (1)) {  						dicSettings.Add (settingName' dr.GetString (1));  					} else {  						dicSettings.Add (settingName' "");  					}  				}  			}  		}  	} finally {  		CBO.CloseDataReader (dr' true);  	}  	//Save settings to cache  	DNNCacheDependency objDependency = null;  	DataCache.SetCache (DataCache.SecureHostSettingsCacheKey' dicSettings' objDependency' Cache.NoAbsoluteExpiration' TimeSpan.FromMinutes (DataCache.HostSettingsCacheTimeOut)' DataCache.HostSettingsCachePriority' null);  }  
Magic Number,DotNetNuke.Entities.Host,Host,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\Host.cs,GetSecureHostSettingsDictionary,The following statement contains a magic number: try {  	while (dr.Read ()) {  		if (!Convert.ToBoolean (dr [2])) {  			string settingName = dr.GetString (0);  			if (settingName.ToLower ().IndexOf ("password") == -1) {  				if (!dr.IsDBNull (1)) {  					dicSettings.Add (settingName' dr.GetString (1));  				} else {  					dicSettings.Add (settingName' "");  				}  			}  		}  	}  } finally {  	CBO.CloseDataReader (dr' true);  }  
Magic Number,DotNetNuke.Entities.Host,Host,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\Host.cs,GetSecureHostSettingsDictionary,The following statement contains a magic number: while (dr.Read ()) {  	if (!Convert.ToBoolean (dr [2])) {  		string settingName = dr.GetString (0);  		if (settingName.ToLower ().IndexOf ("password") == -1) {  			if (!dr.IsDBNull (1)) {  				dicSettings.Add (settingName' dr.GetString (1));  			} else {  				dicSettings.Add (settingName' "");  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Host,Host,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Host\Host.cs,GetSecureHostSettingsDictionary,The following statement contains a magic number: if (!Convert.ToBoolean (dr [2])) {  	string settingName = dr.GetString (0);  	if (settingName.ToLower ().IndexOf ("password") == -1) {  		if (!dr.IsDBNull (1)) {  			dicSettings.Add (settingName' dr.GetString (1));  		} else {  			dicSettings.Add (settingName' "");  		}  	}  }  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinition,The following statement contains a magic number: _orderCounter += 2;  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Name"' "Prefix"' "Text"' 50' UserVisibilityMode.AllUsers' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Name"' "FirstName"' "Text"' 50' UserVisibilityMode.AllUsers' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Name"' "MiddleName"' "Text"' 50' UserVisibilityMode.AllUsers' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Name"' "LastName"' "Text"' 50' UserVisibilityMode.AllUsers' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Name"' "Suffix"' "Text"' 50' UserVisibilityMode.AllUsers' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Address"' "Unit"' "Text"' 50' UserVisibilityMode.AdminOnly' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Address"' "Street"' "Text"' 50' UserVisibilityMode.AdminOnly' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Address"' "City"' "Text"' 50' UserVisibilityMode.AdminOnly' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Address"' "PostalCode"' "Text"' 50' UserVisibilityMode.AdminOnly' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Contact Info"' "Telephone"' "Text"' 50' UserVisibilityMode.AdminOnly' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Contact Info"' "Cell"' "Text"' 50' UserVisibilityMode.AdminOnly' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Contact Info"' "Fax"' "Text"' 50' UserVisibilityMode.AdminOnly' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Contact Info"' "Website"' "Text"' 50' UserVisibilityMode.AdminOnly' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,AddDefaultDefinitions,The following statement contains a magic number: AddDefaultDefinition (portalId' "Contact Info"' "IM"' "Text"' 50' UserVisibilityMode.AdminOnly' dataTypes);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,CreateThumbnails,The following statement contains a magic number: CreateThumbnail (fileId' "l"' 64' 64);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,CreateThumbnails,The following statement contains a magic number: CreateThumbnail (fileId' "l"' 64' 64);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,CreateThumbnails,The following statement contains a magic number: CreateThumbnail (fileId' "s"' 50' 50);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,CreateThumbnails,The following statement contains a magic number: CreateThumbnail (fileId' "s"' 50' 50);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,CreateThumbnails,The following statement contains a magic number: CreateThumbnail (fileId' "xs"' 32' 32);  
Magic Number,DotNetNuke.Entities.Profile,ProfileController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileController.cs,CreateThumbnails,The following statement contains a magic number: CreateThumbnail (fileId' "xs"' 32' 32);  
Magic Number,DotNetNuke.Entities.Profile,ProfileVisibility,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileVisibility.cs,ProfileVisibility,The following statement contains a magic number: if (!String.IsNullOrEmpty (extendedVisibility)) {  	var relationshipController = new RelationshipController ();  	var lists = extendedVisibility.Split (';');  	if (!String.IsNullOrEmpty (lists [0].Substring (2).TrimEnd ('''))) {  		var roles = lists [0].Substring (2).TrimEnd (''').Split (''');  		foreach (var role in roles) {  			int roleId = Int32.Parse (role);  			RoleInfo userRole = RoleController.Instance.GetRole (portalId' r => r.RoleID == roleId);  			RoleVisibilities.Add (userRole);  		}  	}  	if (!String.IsNullOrEmpty (lists [1].Substring (2).TrimEnd ('''))) {  		var relationships = lists [1].Substring (2).TrimEnd (''').Split (''');  		foreach (var relationship in relationships) {  			Relationship userRelationship = RelationshipController.Instance.GetRelationship (Int32.Parse (relationship));  			RelationshipVisibilities.Add (userRelationship);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Profile,ProfileVisibility,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileVisibility.cs,ProfileVisibility,The following statement contains a magic number: if (!String.IsNullOrEmpty (extendedVisibility)) {  	var relationshipController = new RelationshipController ();  	var lists = extendedVisibility.Split (';');  	if (!String.IsNullOrEmpty (lists [0].Substring (2).TrimEnd ('''))) {  		var roles = lists [0].Substring (2).TrimEnd (''').Split (''');  		foreach (var role in roles) {  			int roleId = Int32.Parse (role);  			RoleInfo userRole = RoleController.Instance.GetRole (portalId' r => r.RoleID == roleId);  			RoleVisibilities.Add (userRole);  		}  	}  	if (!String.IsNullOrEmpty (lists [1].Substring (2).TrimEnd ('''))) {  		var relationships = lists [1].Substring (2).TrimEnd (''').Split (''');  		foreach (var relationship in relationships) {  			Relationship userRelationship = RelationshipController.Instance.GetRelationship (Int32.Parse (relationship));  			RelationshipVisibilities.Add (userRelationship);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Profile,ProfileVisibility,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileVisibility.cs,ProfileVisibility,The following statement contains a magic number: if (!String.IsNullOrEmpty (extendedVisibility)) {  	var relationshipController = new RelationshipController ();  	var lists = extendedVisibility.Split (';');  	if (!String.IsNullOrEmpty (lists [0].Substring (2).TrimEnd ('''))) {  		var roles = lists [0].Substring (2).TrimEnd (''').Split (''');  		foreach (var role in roles) {  			int roleId = Int32.Parse (role);  			RoleInfo userRole = RoleController.Instance.GetRole (portalId' r => r.RoleID == roleId);  			RoleVisibilities.Add (userRole);  		}  	}  	if (!String.IsNullOrEmpty (lists [1].Substring (2).TrimEnd ('''))) {  		var relationships = lists [1].Substring (2).TrimEnd (''').Split (''');  		foreach (var relationship in relationships) {  			Relationship userRelationship = RelationshipController.Instance.GetRelationship (Int32.Parse (relationship));  			RelationshipVisibilities.Add (userRelationship);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Profile,ProfileVisibility,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileVisibility.cs,ProfileVisibility,The following statement contains a magic number: if (!String.IsNullOrEmpty (extendedVisibility)) {  	var relationshipController = new RelationshipController ();  	var lists = extendedVisibility.Split (';');  	if (!String.IsNullOrEmpty (lists [0].Substring (2).TrimEnd ('''))) {  		var roles = lists [0].Substring (2).TrimEnd (''').Split (''');  		foreach (var role in roles) {  			int roleId = Int32.Parse (role);  			RoleInfo userRole = RoleController.Instance.GetRole (portalId' r => r.RoleID == roleId);  			RoleVisibilities.Add (userRole);  		}  	}  	if (!String.IsNullOrEmpty (lists [1].Substring (2).TrimEnd ('''))) {  		var relationships = lists [1].Substring (2).TrimEnd (''').Split (''');  		foreach (var relationship in relationships) {  			Relationship userRelationship = RelationshipController.Instance.GetRelationship (Int32.Parse (relationship));  			RelationshipVisibilities.Add (userRelationship);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Profile,ProfileVisibility,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileVisibility.cs,ProfileVisibility,The following statement contains a magic number: if (!String.IsNullOrEmpty (lists [0].Substring (2).TrimEnd ('''))) {  	var roles = lists [0].Substring (2).TrimEnd (''').Split (''');  	foreach (var role in roles) {  		int roleId = Int32.Parse (role);  		RoleInfo userRole = RoleController.Instance.GetRole (portalId' r => r.RoleID == roleId);  		RoleVisibilities.Add (userRole);  	}  }  
Magic Number,DotNetNuke.Entities.Profile,ProfileVisibility,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileVisibility.cs,ProfileVisibility,The following statement contains a magic number: if (!String.IsNullOrEmpty (lists [0].Substring (2).TrimEnd ('''))) {  	var roles = lists [0].Substring (2).TrimEnd (''').Split (''');  	foreach (var role in roles) {  		int roleId = Int32.Parse (role);  		RoleInfo userRole = RoleController.Instance.GetRole (portalId' r => r.RoleID == roleId);  		RoleVisibilities.Add (userRole);  	}  }  
Magic Number,DotNetNuke.Entities.Profile,ProfileVisibility,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileVisibility.cs,ProfileVisibility,The following statement contains a magic number: if (!String.IsNullOrEmpty (lists [1].Substring (2).TrimEnd ('''))) {  	var relationships = lists [1].Substring (2).TrimEnd (''').Split (''');  	foreach (var relationship in relationships) {  		Relationship userRelationship = RelationshipController.Instance.GetRelationship (Int32.Parse (relationship));  		RelationshipVisibilities.Add (userRelationship);  	}  }  
Magic Number,DotNetNuke.Entities.Profile,ProfileVisibility,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Profile\ProfileVisibility.cs,ProfileVisibility,The following statement contains a magic number: if (!String.IsNullOrEmpty (lists [1].Substring (2).TrimEnd ('''))) {  	var relationships = lists [1].Substring (2).TrimEnd (''').Split (''');  	foreach (var relationship in relationships) {  		Relationship userRelationship = RelationshipController.Instance.GetRelationship (Int32.Parse (relationship));  		RelationshipVisibilities.Add (userRelationship);  	}  }  
Magic Number,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTabSettingsByPortal,The following statement contains a magic number: return CBO.GetCachedObject<Dictionary<int' Hashtable>> (new CacheItemArgs (cacheKey' DataCache.TabCacheTimeOut' DataCache.TabCachePriority)' c => {  	var tabSettings = new Dictionary<int' Hashtable> ();  	using (var dr = _dataProvider.GetTabSettings (portalId)) {  		while (dr.Read ()) {  			int tabId = dr.GetInt32 (0);  			Hashtable settings;  			if (!tabSettings.TryGetValue (tabId' out settings)) {  				settings = new Hashtable ();  				tabSettings [tabId] = settings;  			}  			if (!dr.IsDBNull (2)) {  				settings [dr.GetString (1)] = dr.GetString (2);  			} else {  				settings [dr.GetString (1)] = "";  			}  		}  	}  	return tabSettings;  });  
Magic Number,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTabSettingsByPortal,The following statement contains a magic number: return CBO.GetCachedObject<Dictionary<int' Hashtable>> (new CacheItemArgs (cacheKey' DataCache.TabCacheTimeOut' DataCache.TabCachePriority)' c => {  	var tabSettings = new Dictionary<int' Hashtable> ();  	using (var dr = _dataProvider.GetTabSettings (portalId)) {  		while (dr.Read ()) {  			int tabId = dr.GetInt32 (0);  			Hashtable settings;  			if (!tabSettings.TryGetValue (tabId' out settings)) {  				settings = new Hashtable ();  				tabSettings [tabId] = settings;  			}  			if (!dr.IsDBNull (2)) {  				settings [dr.GetString (1)] = dr.GetString (2);  			} else {  				settings [dr.GetString (1)] = "";  			}  		}  	}  	return tabSettings;  });  
Magic Number,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTabSettingsByPortal,The following statement contains a magic number: using (var dr = _dataProvider.GetTabSettings (portalId)) {  	while (dr.Read ()) {  		int tabId = dr.GetInt32 (0);  		Hashtable settings;  		if (!tabSettings.TryGetValue (tabId' out settings)) {  			settings = new Hashtable ();  			tabSettings [tabId] = settings;  		}  		if (!dr.IsDBNull (2)) {  			settings [dr.GetString (1)] = dr.GetString (2);  		} else {  			settings [dr.GetString (1)] = "";  		}  	}  }  
Magic Number,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTabSettingsByPortal,The following statement contains a magic number: using (var dr = _dataProvider.GetTabSettings (portalId)) {  	while (dr.Read ()) {  		int tabId = dr.GetInt32 (0);  		Hashtable settings;  		if (!tabSettings.TryGetValue (tabId' out settings)) {  			settings = new Hashtable ();  			tabSettings [tabId] = settings;  		}  		if (!dr.IsDBNull (2)) {  			settings [dr.GetString (1)] = dr.GetString (2);  		} else {  			settings [dr.GetString (1)] = "";  		}  	}  }  
Magic Number,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTabSettingsByPortal,The following statement contains a magic number: while (dr.Read ()) {  	int tabId = dr.GetInt32 (0);  	Hashtable settings;  	if (!tabSettings.TryGetValue (tabId' out settings)) {  		settings = new Hashtable ();  		tabSettings [tabId] = settings;  	}  	if (!dr.IsDBNull (2)) {  		settings [dr.GetString (1)] = dr.GetString (2);  	} else {  		settings [dr.GetString (1)] = "";  	}  }  
Magic Number,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTabSettingsByPortal,The following statement contains a magic number: while (dr.Read ()) {  	int tabId = dr.GetInt32 (0);  	Hashtable settings;  	if (!tabSettings.TryGetValue (tabId' out settings)) {  		settings = new Hashtable ();  		tabSettings [tabId] = settings;  	}  	if (!dr.IsDBNull (2)) {  		settings [dr.GetString (1)] = dr.GetString (2);  	} else {  		settings [dr.GetString (1)] = "";  	}  }  
Magic Number,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTabSettingsByPortal,The following statement contains a magic number: if (!dr.IsDBNull (2)) {  	settings [dr.GetString (1)] = dr.GetString (2);  } else {  	settings [dr.GetString (1)] = "";  }  
Magic Number,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTabSettingsByPortal,The following statement contains a magic number: if (!dr.IsDBNull (2)) {  	settings [dr.GetString (1)] = dr.GetString (2);  } else {  	settings [dr.GetString (1)] = "";  }  
Magic Number,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetTabSettingsByPortal,The following statement contains a magic number: settings [dr.GetString (1)] = dr.GetString (2);  
Magic Number,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTab,The following statement contains a magic number: if (!String.IsNullOrEmpty (tabName)) {  	if (tab == null) {  		tab = new TabInfo {  			TabID = Null.NullInteger'  			ParentId = Null.NullInteger'  			TabName = tabName  		};  	}  	tab.PortalID = portalId;  	if (string.IsNullOrEmpty (tab.Title)) {  		tab.Title = XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "title");  	}  	if (string.IsNullOrEmpty (tab.Description)) {  		tab.Description = XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "description");  	}  	tab.KeyWords = XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "keywords");  	tab.IsVisible = XmlUtils.GetNodeValueBoolean (tabNode' "visible"' true);  	tab.DisableLink = XmlUtils.GetNodeValueBoolean (tabNode' "disabled");  	tab.IconFile = Globals.ImportFile (portalId' XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "iconfile"));  	tab.IconFileLarge = Globals.ImportFile (portalId' XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "iconfilelarge"));  	tab.Url = XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "url");  	tab.StartDate = XmlUtils.GetNodeValueDate (tabNode' "startdate"' Null.NullDate);  	tab.EndDate = XmlUtils.GetNodeValueDate (tabNode' "enddate"' Null.NullDate);  	tab.RefreshInterval = XmlUtils.GetNodeValueInt (tabNode' "refreshinterval"' Null.NullInteger);  	tab.PageHeadText = XmlUtils.GetNodeValue (tabNode' "pageheadtext"' Null.NullString);  	tab.IsSecure = XmlUtils.GetNodeValueBoolean (tabNode' "issecure"' false);  	tab.SiteMapPriority = XmlUtils.GetNodeValueSingle (tabNode' "sitemappriority"' (float)0.5);  	tab.CultureCode = XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "cultureCode");  	//objTab.UniqueId = New Guid(XmlUtils.GetNodeValue(nodeTab' "guid"' Guid.NewGuid.ToString()));  	//objTab.VersionGuid = New Guid(XmlUtils.GetNodeValue(nodeTab' "versionGuid"' Guid.NewGuid.ToString()));  	tab.UseBaseFriendlyUrls = XmlUtils.GetNodeValueBoolean (tabNode' "UseBaseFriendlyUrls"' false);  	tab.TabPermissions.Clear ();  	DeserializeTabPermissions (tabNode.SelectNodes ("tabpermissions/permission")' tab' isAdminTemplate);  	DeserializeTabSettings (tabNode.SelectNodes ("tabsettings/tabsetting")' tab);  	//set tab skin and container  	if (!String.IsNullOrEmpty (XmlUtils.GetNodeValue (tabNode' "skinsrc"' ""))) {  		tab.SkinSrc = XmlUtils.GetNodeValue (tabNode' "skinsrc"' "");  	}  	if (!String.IsNullOrEmpty (XmlUtils.GetNodeValue (tabNode' "containersrc"' ""))) {  		tab.ContainerSrc = XmlUtils.GetNodeValue (tabNode' "containersrc"' "");  	}  	tabName = tab.TabName;  	if (!String.IsNullOrEmpty (XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "parent"))) {  		if (tabs [XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "parent")] != null) {  			//parent node specifies the path (tab1/tab2/tab3)' use saved tabid  			tab.ParentId = Convert.ToInt32 (tabs [XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "parent")]);  			tabName = XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "parent") + "/" + tab.TabName;  		} else {  			//Parent node doesn't spcecify the path' search by name.  			//Possible incoherence if tabname not unique  			TabInfo objParent = Instance.GetTabByName (XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "parent")' portalId);  			if (objParent != null) {  				tab.ParentId = objParent.TabID;  				tabName = objParent.TabName + "/" + tab.TabName;  			} else {  				//parent tab not found!  				tab.ParentId = Null.NullInteger;  				tabName = tab.TabName;  			}  		}  	}  	if (!String.IsNullOrEmpty (XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "defaultLanguageTab"))) {  		if (tabs [XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "defaultLanguageTab")] != null) {  			//parent node specifies the path (tab1/tab2/tab3)' use saved tabid  			int defaultLanguageTabId = Convert.ToInt32 (tabs [XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "defaultLanguageTab")]);  			TabInfo defaultLanguageTab = Instance.GetTab (defaultLanguageTabId' portalId' false);  			if (defaultLanguageTab != null) {  				tab.DefaultLanguageGuid = defaultLanguageTab.UniqueId;  			}  		} else {  			//Parent node doesn't spcecify the path' search by name.  			//Possible incoherence if tabname not unique  			TabInfo defaultLanguageTab = Instance.GetTabByName (XmlUtils.GetNodeValue (tabNode.CreateNavigator ()' "defaultLanguageTab")' portalId);  			if (defaultLanguageTab != null) {  				tab.DefaultLanguageGuid = defaultLanguageTab.UniqueId;  			}  		}  	}  	//create/update tab  	if (tab.TabID == Null.NullInteger) {  		tab.TabID = TabController.Instance.AddTab (tab);  	} else {  		Instance.UpdateTab (tab);  	}  	//UpdateTabUrls  	foreach (XmlNode oTabUrlNode in tabNode.SelectNodes ("tabUrls/tabUrl")) {  		var tabUrl = new TabUrlInfo ();  		DeserializeTabUrls (oTabUrlNode' tabUrl);  		DataProvider.Instance ().SaveTabUrl (tab.TabID' tabUrl.SeqNum' tabUrl.PortalAliasId' (int)tabUrl.PortalAliasUsage' tabUrl.Url' tabUrl.QueryString' tabUrl.CultureCode' tabUrl.HttpStatus' tabUrl.IsSystem' UserController.Instance.GetCurrentUserInfo ().UserID);  	}  	//extra check for duplicate tabs in same level  	if (tabs [tabName] == null) {  		tabs.Add (tabName' tab.TabID);  	}  }  
Magic Number,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,DeserializeTab,The following statement contains a magic number: tab.SiteMapPriority = XmlUtils.GetNodeValueSingle (tabNode' "sitemappriority"' (float)0.5);  
Magic Number,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,GetPortalTabs,The following statement contains a magic number: if (includeNoneSpecified) {  	var tab = new TabInfo {  		TabID = -1'  		TabName = noneSpecifiedText'  		TabOrder = 0'  		ParentId = -2  	};  	listTabs.Add (tab);  }  
Magic Number,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,SerializeTab,The following statement contains a magic number: switch (tab.TabType) {  case TabType.Normal:  	urlNode.Attributes.Append (XmlUtils.CreateAttribute (tabXml' "type"' "Normal"));  	break;  case TabType.Tab:  	urlNode.Attributes.Append (XmlUtils.CreateAttribute (tabXml' "type"' "Tab"));  	//Get the tab being linked to  	TabInfo tempTab = TabController.Instance.GetTab (Int32.Parse (tab.Url)' tab.PortalID' false);  	if (tempTab != null) {  		urlNode.InnerXml = tempTab.TabPath;  	}  	break;  case TabType.File:  	urlNode.Attributes.Append (XmlUtils.CreateAttribute (tabXml' "type"' "File"));  	IFileInfo file = FileManager.Instance.GetFile (Int32.Parse (tab.Url.Substring (7)));  	urlNode.InnerXml = file.RelativePath;  	break;  case TabType.Url:  	urlNode.Attributes.Append (XmlUtils.CreateAttribute (tabXml' "type"' "Url"));  	break;  }  
Magic Number,DotNetNuke.Entities.Tabs,TabInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabInfo.cs,IconFileGetter,The following statement contains a magic number: if ((!String.IsNullOrEmpty (iconRaw) && iconRaw.StartsWith ("~")) || PortalID == Null.NullInteger) {  	iconFile = iconRaw;  } else if (iconFile == null && !String.IsNullOrEmpty (iconRaw) && PortalID != Null.NullInteger) {  	IFileInfo fileInfo;  	if (iconRaw.StartsWith ("FileID="' StringComparison.InvariantCultureIgnoreCase)) {  		var fileId = Convert.ToInt32 (iconRaw.Substring (7));  		fileInfo = FileManager.Instance.GetFile (fileId);  	} else {  		fileInfo = FileManager.Instance.GetFile (PortalID' iconRaw);  	}  	iconFile = fileInfo != null ? FileManager.Instance.GetUrl (fileInfo) : iconRaw;  }  
Magic Number,DotNetNuke.Entities.Tabs,TabInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabInfo.cs,IconFileGetter,The following statement contains a magic number: if (iconFile == null && !String.IsNullOrEmpty (iconRaw) && PortalID != Null.NullInteger) {  	IFileInfo fileInfo;  	if (iconRaw.StartsWith ("FileID="' StringComparison.InvariantCultureIgnoreCase)) {  		var fileId = Convert.ToInt32 (iconRaw.Substring (7));  		fileInfo = FileManager.Instance.GetFile (fileId);  	} else {  		fileInfo = FileManager.Instance.GetFile (PortalID' iconRaw);  	}  	iconFile = fileInfo != null ? FileManager.Instance.GetUrl (fileInfo) : iconRaw;  }  
Magic Number,DotNetNuke.Entities.Tabs,TabInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabInfo.cs,IconFileGetter,The following statement contains a magic number: if (iconRaw.StartsWith ("FileID="' StringComparison.InvariantCultureIgnoreCase)) {  	var fileId = Convert.ToInt32 (iconRaw.Substring (7));  	fileInfo = FileManager.Instance.GetFile (fileId);  } else {  	fileInfo = FileManager.Instance.GetFile (PortalID' iconRaw);  }  
Magic Number,DotNetNuke.Security.Permissions,DesktopModulePermissionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\DesktopModulePermissionInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (_desktopModulePermissionID * 397) ^ _portalDesktopModuleID;  }  
Magic Number,DotNetNuke.Security.Permissions,DesktopModulePermissionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\DesktopModulePermissionInfo.cs,GetHashCode,The following statement contains a magic number: return (_desktopModulePermissionID * 397) ^ _portalDesktopModuleID;  
Magic Number,DotNetNuke.Security.Permissions,ModulePermissionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\ModulePermissionInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (_moduleID * 397) ^ _modulePermissionID;  }  
Magic Number,DotNetNuke.Security.Permissions,ModulePermissionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\ModulePermissionInfo.cs,GetHashCode,The following statement contains a magic number: return (_moduleID * 397) ^ _modulePermissionID;  
Magic Number,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,WriteToStreamWriter,The following statement contains a magic number: using (var sw = new StreamWriter (fs' Encoding.UTF8)) {  	var fileLength = fs.Length;  	if (fileLength > 0) {  		fs.Position = fileLength - 9;  	} else {  		message = "<logs>" + message;  	}  	sw.WriteLine (message + "</logs>");  	sw.Flush ();  }  
Magic Number,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,WriteToStreamWriter,The following statement contains a magic number: if (fileLength > 0) {  	fs.Position = fileLength - 9;  } else {  	message = "<logs>" + message;  }  
Magic Number,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,WriteToStreamWriter,The following statement contains a magic number: fs.Position = fileLength - 9;  
Magic Number,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,WriteLog,The following statement contains a magic number: try {  	var intAttempts = 0;  	while (fs == null && intAttempts < 100) {  		intAttempts += 1;  		try {  			fs = new FileStream (filePath' FileMode.OpenOrCreate' FileAccess.Write' FileShare.None);  		} catch (IOException exc) {  			Logger.Debug (exc);  			Thread.Sleep (1);  		}  	}  	if (fs == null) {  		if (HttpContext.Current != null) {  			HttpContext.Current.Response.Write ("An error has occurred writing to the exception log.");  			HttpContext.Current.Response.End ();  		}  	} else {  		WriteToStreamWriter (fs' message);  	}  } catch (UnauthorizedAccessException) {  	RaiseError (filePath' "Unauthorized Access Error"' "The Windows User Account listed below must have Read/Write Privileges for the website path.");  } catch (DirectoryNotFoundException exc) {  	RaiseError (filePath' "Directory Not Found Error"' exc.Message);  } catch (PathTooLongException exc) {  	RaiseError (filePath' "Path Too Long Error"' exc.Message);  } catch (IOException exc) {  	RaiseError (filePath' "IO Error"' exc.Message);  } catch (SqlException exc) {  	RaiseError (filePath' "SQL Exception"' SqlUtils.TranslateSQLException (exc));  } catch (Exception exc) {  	RaiseError (filePath' "Unhandled Error"' exc.Message);  } finally {  	if (fs != null) {  		fs.Close ();  	}  	LockLog.ExitWriteLock ();  }  
Magic Number,DotNetNuke.Services.Log.EventLog,LogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\LogController.cs,WriteLog,The following statement contains a magic number: while (fs == null && intAttempts < 100) {  	intAttempts += 1;  	try {  		fs = new FileStream (filePath' FileMode.OpenOrCreate' FileAccess.Write' FileShare.None);  	} catch (IOException exc) {  		Logger.Debug (exc);  		Thread.Sleep (1);  	}  }  
Magic Number,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,WriteError,The following statement contains a magic number: if (HttpContext.Current != null) {  	if (HttpContext.Current.IsCustomErrorEnabled) {  		HttpContext.Current.AddError (exc);  	} else {  		HttpResponse response = HttpContext.Current.Response;  		response.StatusCode = 500;  		HtmlUtils.WriteHeader (response' header);  		if (logTypeConfigInfo != null) {  			HtmlUtils.WriteError (response' logTypeConfigInfo.LogFileNameWithPath' message);  		}  		HtmlUtils.WriteFooter (response);  		response.End ();  	}  }  
Magic Number,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,WriteError,The following statement contains a magic number: if (HttpContext.Current.IsCustomErrorEnabled) {  	HttpContext.Current.AddError (exc);  } else {  	HttpResponse response = HttpContext.Current.Response;  	response.StatusCode = 500;  	HtmlUtils.WriteHeader (response' header);  	if (logTypeConfigInfo != null) {  		HtmlUtils.WriteError (response' logTypeConfigInfo.LogFileNameWithPath' message);  	}  	HtmlUtils.WriteFooter (response);  	response.End ();  }  
Magic Number,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,WriteError,The following statement contains a magic number: response.StatusCode = 500;  
Magic Number,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,GetLogTypeInfo,The following statement contains a magic number: return CBO.GetCachedObject<ArrayList> (new CacheItemArgs (LogTypeCacheKey' 20' CacheItemPriority.Normal)' c => CBO.FillCollection (DataProvider.Instance ().GetLogTypeInfo ()' typeof(LogTypeInfo)));  
Magic Number,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,GetLog,The following statement contains a magic number: FillLogs (DataProvider.Instance ().GetLogs (Null.NullInteger' Null.NullString' 10' 0)' logs' ref totalRecords);  
Magic Number,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,GetLog,The following statement contains a magic number: FillLogs (DataProvider.Instance ().GetLogs (Null.NullInteger' logType' 10' 0)' logs' ref totalRecords);  
Magic Number,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,GetLog,The following statement contains a magic number: FillLogs (DataProvider.Instance ().GetLogs (portalID' Null.NullString' 10' 0)' logs' ref totalRecords);  
Magic Number,DotNetNuke.Services.Log.EventLog,DBLoggingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\DBLoggingProvider.cs,GetLog,The following statement contains a magic number: FillLogs (DataProvider.Instance ().GetLogs (portalID' logType' 10' 0)' logs' ref totalRecords);  
Magic Number,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,AddProperty,The following statement contains a magic number: try {  	if (PropertyValue == null) {  		PropertyValue = string.Empty;  	}  	if (PropertyName.Length > 50) {  		PropertyName = PropertyName.Substring (0' 50);  	}  	if (PropertyValue.Length > 500) {  		PropertyValue = "(TRUNCATED TO 500 CHARS): " + PropertyValue.Substring (0' 500);  	}  	var objLogDetailInfo = new LogDetailInfo ();  	objLogDetailInfo.PropertyName = PropertyName;  	objLogDetailInfo.PropertyValue = PropertyValue;  	LogProperties.Add (objLogDetailInfo);  } catch (Exception exc) {  	Exceptions.Exceptions.LogException (exc);  }  
Magic Number,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,AddProperty,The following statement contains a magic number: try {  	if (PropertyValue == null) {  		PropertyValue = string.Empty;  	}  	if (PropertyName.Length > 50) {  		PropertyName = PropertyName.Substring (0' 50);  	}  	if (PropertyValue.Length > 500) {  		PropertyValue = "(TRUNCATED TO 500 CHARS): " + PropertyValue.Substring (0' 500);  	}  	var objLogDetailInfo = new LogDetailInfo ();  	objLogDetailInfo.PropertyName = PropertyName;  	objLogDetailInfo.PropertyValue = PropertyValue;  	LogProperties.Add (objLogDetailInfo);  } catch (Exception exc) {  	Exceptions.Exceptions.LogException (exc);  }  
Magic Number,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,AddProperty,The following statement contains a magic number: try {  	if (PropertyValue == null) {  		PropertyValue = string.Empty;  	}  	if (PropertyName.Length > 50) {  		PropertyName = PropertyName.Substring (0' 50);  	}  	if (PropertyValue.Length > 500) {  		PropertyValue = "(TRUNCATED TO 500 CHARS): " + PropertyValue.Substring (0' 500);  	}  	var objLogDetailInfo = new LogDetailInfo ();  	objLogDetailInfo.PropertyName = PropertyName;  	objLogDetailInfo.PropertyValue = PropertyValue;  	LogProperties.Add (objLogDetailInfo);  } catch (Exception exc) {  	Exceptions.Exceptions.LogException (exc);  }  
Magic Number,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,AddProperty,The following statement contains a magic number: try {  	if (PropertyValue == null) {  		PropertyValue = string.Empty;  	}  	if (PropertyName.Length > 50) {  		PropertyName = PropertyName.Substring (0' 50);  	}  	if (PropertyValue.Length > 500) {  		PropertyValue = "(TRUNCATED TO 500 CHARS): " + PropertyValue.Substring (0' 500);  	}  	var objLogDetailInfo = new LogDetailInfo ();  	objLogDetailInfo.PropertyName = PropertyName;  	objLogDetailInfo.PropertyValue = PropertyValue;  	LogProperties.Add (objLogDetailInfo);  } catch (Exception exc) {  	Exceptions.Exceptions.LogException (exc);  }  
Magic Number,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,AddProperty,The following statement contains a magic number: if (PropertyName.Length > 50) {  	PropertyName = PropertyName.Substring (0' 50);  }  
Magic Number,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,AddProperty,The following statement contains a magic number: if (PropertyName.Length > 50) {  	PropertyName = PropertyName.Substring (0' 50);  }  
Magic Number,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,AddProperty,The following statement contains a magic number: PropertyName = PropertyName.Substring (0' 50);  
Magic Number,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,AddProperty,The following statement contains a magic number: if (PropertyValue.Length > 500) {  	PropertyValue = "(TRUNCATED TO 500 CHARS): " + PropertyValue.Substring (0' 500);  }  
Magic Number,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,AddProperty,The following statement contains a magic number: if (PropertyValue.Length > 500) {  	PropertyValue = "(TRUNCATED TO 500 CHARS): " + PropertyValue.Substring (0' 500);  }  
Magic Number,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,AddProperty,The following statement contains a magic number: PropertyValue = "(TRUNCATED TO 500 CHARS): " + PropertyValue.Substring (0' 500);  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: if (cancel) {  	if (userRole != null && userRole.ServiceFee > 0.0 && userRole.IsTrialUsed) {  		//Expire Role so we retain trial used data  		userRole.ExpiryDate = DateTime.Now.AddDays (-1);  		userRole.Status = status;  		userRole.IsOwner = isOwner;  		provider.UpdateUserRole (userRole);  		EventLogController.Instance.AddLog (userRole' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_UPDATED);  	} else {  		//Delete Role  		DeleteUserRoleInternal (portalId' userId' roleId);  		EventLogController.Instance.AddLog ("UserId"' userId.ToString (CultureInfo.InvariantCulture)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.USER_ROLE_DELETED);  	}  } else {  	int UserRoleId = -1;  	DateTime ExpiryDate = DateTime.Now;  	DateTime EffectiveDate = Null.NullDate;  	bool IsTrialUsed = false;  	int Period = 0;  	string Frequency = "";  	if (userRole != null) {  		UserRoleId = userRole.UserRoleID;  		EffectiveDate = userRole.EffectiveDate;  		ExpiryDate = userRole.ExpiryDate;  		IsTrialUsed = userRole.IsTrialUsed;  	}  	RoleInfo role = Instance.GetRole (portalId' r => r.RoleID == roleId);  	if (role != null) {  		if (IsTrialUsed == false && role.TrialFrequency != "N") {  			Period = role.TrialPeriod;  			Frequency = role.TrialFrequency;  		} else {  			Period = role.BillingPeriod;  			Frequency = role.BillingFrequency;  		}  	}  	if (EffectiveDate < DateTime.Now) {  		EffectiveDate = Null.NullDate;  	}  	if (ExpiryDate < DateTime.Now) {  		ExpiryDate = DateTime.Now;  	}  	if (Period == Null.NullInteger) {  		ExpiryDate = Null.NullDate;  	} else {  		switch (Frequency) {  		case "N":  			ExpiryDate = Null.NullDate;  			break;  		case "O":  			ExpiryDate = new DateTime (9999' 12' 31);  			break;  		case "D":  			ExpiryDate = ExpiryDate.AddDays (Period);  			break;  		case "W":  			ExpiryDate = ExpiryDate.AddDays (Period * 7);  			break;  		case "M":  			ExpiryDate = ExpiryDate.AddMonths (Period);  			break;  		case "Y":  			ExpiryDate = ExpiryDate.AddYears (Period);  			break;  		}  	}  	if (UserRoleId != -1 && userRole != null) {  		userRole.ExpiryDate = ExpiryDate;  		userRole.Status = status;  		userRole.IsOwner = isOwner;  		provider.UpdateUserRole (userRole);  		EventLogController.Instance.AddLog (userRole' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_UPDATED);  	} else {  		AddUserRole (portalId' userId' roleId' status' isOwner' EffectiveDate' ExpiryDate);  	}  }  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: if (cancel) {  	if (userRole != null && userRole.ServiceFee > 0.0 && userRole.IsTrialUsed) {  		//Expire Role so we retain trial used data  		userRole.ExpiryDate = DateTime.Now.AddDays (-1);  		userRole.Status = status;  		userRole.IsOwner = isOwner;  		provider.UpdateUserRole (userRole);  		EventLogController.Instance.AddLog (userRole' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_UPDATED);  	} else {  		//Delete Role  		DeleteUserRoleInternal (portalId' userId' roleId);  		EventLogController.Instance.AddLog ("UserId"' userId.ToString (CultureInfo.InvariantCulture)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.USER_ROLE_DELETED);  	}  } else {  	int UserRoleId = -1;  	DateTime ExpiryDate = DateTime.Now;  	DateTime EffectiveDate = Null.NullDate;  	bool IsTrialUsed = false;  	int Period = 0;  	string Frequency = "";  	if (userRole != null) {  		UserRoleId = userRole.UserRoleID;  		EffectiveDate = userRole.EffectiveDate;  		ExpiryDate = userRole.ExpiryDate;  		IsTrialUsed = userRole.IsTrialUsed;  	}  	RoleInfo role = Instance.GetRole (portalId' r => r.RoleID == roleId);  	if (role != null) {  		if (IsTrialUsed == false && role.TrialFrequency != "N") {  			Period = role.TrialPeriod;  			Frequency = role.TrialFrequency;  		} else {  			Period = role.BillingPeriod;  			Frequency = role.BillingFrequency;  		}  	}  	if (EffectiveDate < DateTime.Now) {  		EffectiveDate = Null.NullDate;  	}  	if (ExpiryDate < DateTime.Now) {  		ExpiryDate = DateTime.Now;  	}  	if (Period == Null.NullInteger) {  		ExpiryDate = Null.NullDate;  	} else {  		switch (Frequency) {  		case "N":  			ExpiryDate = Null.NullDate;  			break;  		case "O":  			ExpiryDate = new DateTime (9999' 12' 31);  			break;  		case "D":  			ExpiryDate = ExpiryDate.AddDays (Period);  			break;  		case "W":  			ExpiryDate = ExpiryDate.AddDays (Period * 7);  			break;  		case "M":  			ExpiryDate = ExpiryDate.AddMonths (Period);  			break;  		case "Y":  			ExpiryDate = ExpiryDate.AddYears (Period);  			break;  		}  	}  	if (UserRoleId != -1 && userRole != null) {  		userRole.ExpiryDate = ExpiryDate;  		userRole.Status = status;  		userRole.IsOwner = isOwner;  		provider.UpdateUserRole (userRole);  		EventLogController.Instance.AddLog (userRole' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_UPDATED);  	} else {  		AddUserRole (portalId' userId' roleId' status' isOwner' EffectiveDate' ExpiryDate);  	}  }  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: if (cancel) {  	if (userRole != null && userRole.ServiceFee > 0.0 && userRole.IsTrialUsed) {  		//Expire Role so we retain trial used data  		userRole.ExpiryDate = DateTime.Now.AddDays (-1);  		userRole.Status = status;  		userRole.IsOwner = isOwner;  		provider.UpdateUserRole (userRole);  		EventLogController.Instance.AddLog (userRole' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_UPDATED);  	} else {  		//Delete Role  		DeleteUserRoleInternal (portalId' userId' roleId);  		EventLogController.Instance.AddLog ("UserId"' userId.ToString (CultureInfo.InvariantCulture)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.USER_ROLE_DELETED);  	}  } else {  	int UserRoleId = -1;  	DateTime ExpiryDate = DateTime.Now;  	DateTime EffectiveDate = Null.NullDate;  	bool IsTrialUsed = false;  	int Period = 0;  	string Frequency = "";  	if (userRole != null) {  		UserRoleId = userRole.UserRoleID;  		EffectiveDate = userRole.EffectiveDate;  		ExpiryDate = userRole.ExpiryDate;  		IsTrialUsed = userRole.IsTrialUsed;  	}  	RoleInfo role = Instance.GetRole (portalId' r => r.RoleID == roleId);  	if (role != null) {  		if (IsTrialUsed == false && role.TrialFrequency != "N") {  			Period = role.TrialPeriod;  			Frequency = role.TrialFrequency;  		} else {  			Period = role.BillingPeriod;  			Frequency = role.BillingFrequency;  		}  	}  	if (EffectiveDate < DateTime.Now) {  		EffectiveDate = Null.NullDate;  	}  	if (ExpiryDate < DateTime.Now) {  		ExpiryDate = DateTime.Now;  	}  	if (Period == Null.NullInteger) {  		ExpiryDate = Null.NullDate;  	} else {  		switch (Frequency) {  		case "N":  			ExpiryDate = Null.NullDate;  			break;  		case "O":  			ExpiryDate = new DateTime (9999' 12' 31);  			break;  		case "D":  			ExpiryDate = ExpiryDate.AddDays (Period);  			break;  		case "W":  			ExpiryDate = ExpiryDate.AddDays (Period * 7);  			break;  		case "M":  			ExpiryDate = ExpiryDate.AddMonths (Period);  			break;  		case "Y":  			ExpiryDate = ExpiryDate.AddYears (Period);  			break;  		}  	}  	if (UserRoleId != -1 && userRole != null) {  		userRole.ExpiryDate = ExpiryDate;  		userRole.Status = status;  		userRole.IsOwner = isOwner;  		provider.UpdateUserRole (userRole);  		EventLogController.Instance.AddLog (userRole' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_UPDATED);  	} else {  		AddUserRole (portalId' userId' roleId' status' isOwner' EffectiveDate' ExpiryDate);  	}  }  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: if (cancel) {  	if (userRole != null && userRole.ServiceFee > 0.0 && userRole.IsTrialUsed) {  		//Expire Role so we retain trial used data  		userRole.ExpiryDate = DateTime.Now.AddDays (-1);  		userRole.Status = status;  		userRole.IsOwner = isOwner;  		provider.UpdateUserRole (userRole);  		EventLogController.Instance.AddLog (userRole' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_UPDATED);  	} else {  		//Delete Role  		DeleteUserRoleInternal (portalId' userId' roleId);  		EventLogController.Instance.AddLog ("UserId"' userId.ToString (CultureInfo.InvariantCulture)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.USER_ROLE_DELETED);  	}  } else {  	int UserRoleId = -1;  	DateTime ExpiryDate = DateTime.Now;  	DateTime EffectiveDate = Null.NullDate;  	bool IsTrialUsed = false;  	int Period = 0;  	string Frequency = "";  	if (userRole != null) {  		UserRoleId = userRole.UserRoleID;  		EffectiveDate = userRole.EffectiveDate;  		ExpiryDate = userRole.ExpiryDate;  		IsTrialUsed = userRole.IsTrialUsed;  	}  	RoleInfo role = Instance.GetRole (portalId' r => r.RoleID == roleId);  	if (role != null) {  		if (IsTrialUsed == false && role.TrialFrequency != "N") {  			Period = role.TrialPeriod;  			Frequency = role.TrialFrequency;  		} else {  			Period = role.BillingPeriod;  			Frequency = role.BillingFrequency;  		}  	}  	if (EffectiveDate < DateTime.Now) {  		EffectiveDate = Null.NullDate;  	}  	if (ExpiryDate < DateTime.Now) {  		ExpiryDate = DateTime.Now;  	}  	if (Period == Null.NullInteger) {  		ExpiryDate = Null.NullDate;  	} else {  		switch (Frequency) {  		case "N":  			ExpiryDate = Null.NullDate;  			break;  		case "O":  			ExpiryDate = new DateTime (9999' 12' 31);  			break;  		case "D":  			ExpiryDate = ExpiryDate.AddDays (Period);  			break;  		case "W":  			ExpiryDate = ExpiryDate.AddDays (Period * 7);  			break;  		case "M":  			ExpiryDate = ExpiryDate.AddMonths (Period);  			break;  		case "Y":  			ExpiryDate = ExpiryDate.AddYears (Period);  			break;  		}  	}  	if (UserRoleId != -1 && userRole != null) {  		userRole.ExpiryDate = ExpiryDate;  		userRole.Status = status;  		userRole.IsOwner = isOwner;  		provider.UpdateUserRole (userRole);  		EventLogController.Instance.AddLog (userRole' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' ""' EventLogController.EventLogType.USER_ROLE_UPDATED);  	} else {  		AddUserRole (portalId' userId' roleId' status' isOwner' EffectiveDate' ExpiryDate);  	}  }  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: if (Period == Null.NullInteger) {  	ExpiryDate = Null.NullDate;  } else {  	switch (Frequency) {  	case "N":  		ExpiryDate = Null.NullDate;  		break;  	case "O":  		ExpiryDate = new DateTime (9999' 12' 31);  		break;  	case "D":  		ExpiryDate = ExpiryDate.AddDays (Period);  		break;  	case "W":  		ExpiryDate = ExpiryDate.AddDays (Period * 7);  		break;  	case "M":  		ExpiryDate = ExpiryDate.AddMonths (Period);  		break;  	case "Y":  		ExpiryDate = ExpiryDate.AddYears (Period);  		break;  	}  }  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: if (Period == Null.NullInteger) {  	ExpiryDate = Null.NullDate;  } else {  	switch (Frequency) {  	case "N":  		ExpiryDate = Null.NullDate;  		break;  	case "O":  		ExpiryDate = new DateTime (9999' 12' 31);  		break;  	case "D":  		ExpiryDate = ExpiryDate.AddDays (Period);  		break;  	case "W":  		ExpiryDate = ExpiryDate.AddDays (Period * 7);  		break;  	case "M":  		ExpiryDate = ExpiryDate.AddMonths (Period);  		break;  	case "Y":  		ExpiryDate = ExpiryDate.AddYears (Period);  		break;  	}  }  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: if (Period == Null.NullInteger) {  	ExpiryDate = Null.NullDate;  } else {  	switch (Frequency) {  	case "N":  		ExpiryDate = Null.NullDate;  		break;  	case "O":  		ExpiryDate = new DateTime (9999' 12' 31);  		break;  	case "D":  		ExpiryDate = ExpiryDate.AddDays (Period);  		break;  	case "W":  		ExpiryDate = ExpiryDate.AddDays (Period * 7);  		break;  	case "M":  		ExpiryDate = ExpiryDate.AddMonths (Period);  		break;  	case "Y":  		ExpiryDate = ExpiryDate.AddYears (Period);  		break;  	}  }  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: if (Period == Null.NullInteger) {  	ExpiryDate = Null.NullDate;  } else {  	switch (Frequency) {  	case "N":  		ExpiryDate = Null.NullDate;  		break;  	case "O":  		ExpiryDate = new DateTime (9999' 12' 31);  		break;  	case "D":  		ExpiryDate = ExpiryDate.AddDays (Period);  		break;  	case "W":  		ExpiryDate = ExpiryDate.AddDays (Period * 7);  		break;  	case "M":  		ExpiryDate = ExpiryDate.AddMonths (Period);  		break;  	case "Y":  		ExpiryDate = ExpiryDate.AddYears (Period);  		break;  	}  }  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: switch (Frequency) {  case "N":  	ExpiryDate = Null.NullDate;  	break;  case "O":  	ExpiryDate = new DateTime (9999' 12' 31);  	break;  case "D":  	ExpiryDate = ExpiryDate.AddDays (Period);  	break;  case "W":  	ExpiryDate = ExpiryDate.AddDays (Period * 7);  	break;  case "M":  	ExpiryDate = ExpiryDate.AddMonths (Period);  	break;  case "Y":  	ExpiryDate = ExpiryDate.AddYears (Period);  	break;  }  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: switch (Frequency) {  case "N":  	ExpiryDate = Null.NullDate;  	break;  case "O":  	ExpiryDate = new DateTime (9999' 12' 31);  	break;  case "D":  	ExpiryDate = ExpiryDate.AddDays (Period);  	break;  case "W":  	ExpiryDate = ExpiryDate.AddDays (Period * 7);  	break;  case "M":  	ExpiryDate = ExpiryDate.AddMonths (Period);  	break;  case "Y":  	ExpiryDate = ExpiryDate.AddYears (Period);  	break;  }  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: switch (Frequency) {  case "N":  	ExpiryDate = Null.NullDate;  	break;  case "O":  	ExpiryDate = new DateTime (9999' 12' 31);  	break;  case "D":  	ExpiryDate = ExpiryDate.AddDays (Period);  	break;  case "W":  	ExpiryDate = ExpiryDate.AddDays (Period * 7);  	break;  case "M":  	ExpiryDate = ExpiryDate.AddMonths (Period);  	break;  case "Y":  	ExpiryDate = ExpiryDate.AddYears (Period);  	break;  }  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: switch (Frequency) {  case "N":  	ExpiryDate = Null.NullDate;  	break;  case "O":  	ExpiryDate = new DateTime (9999' 12' 31);  	break;  case "D":  	ExpiryDate = ExpiryDate.AddDays (Period);  	break;  case "W":  	ExpiryDate = ExpiryDate.AddDays (Period * 7);  	break;  case "M":  	ExpiryDate = ExpiryDate.AddMonths (Period);  	break;  case "Y":  	ExpiryDate = ExpiryDate.AddYears (Period);  	break;  }  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: ExpiryDate = new DateTime (9999' 12' 31);  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: ExpiryDate = new DateTime (9999' 12' 31);  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: ExpiryDate = new DateTime (9999' 12' 31);  
Magic Number,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following statement contains a magic number: ExpiryDate = ExpiryDate.AddDays (Period * 7);  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: if (!ReferenceEquals (queryStringMatch' Match.Empty)) {  	friendlyPath = queryStringMatch.Groups [1].Value;  	friendlyPath = DefaultPageRegex.Replace (friendlyPath' "");  	if (String.Compare (pageName' Globals.glbDefaultPage' StringComparison.OrdinalIgnoreCase) != 0)//take out the end page name' it will get re-added  	 {  		var pgNameRx = RegexUtils.GetCachedRegex (pageName' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		friendlyPath = pgNameRx.Replace (friendlyPath' "");  	}  	string queryString = queryStringMatch.Groups [2].Value.Replace ("&amp;"' "&");  	if ((queryString.StartsWith ("?"))) {  		queryString = queryString.TrimStart ('?');  	}  	string[] nameValuePairs = queryString.Split ('&');  	for (int i = 0; i <= nameValuePairs.Length - 1; i++) {  		string pathToAppend = "";  		string[] pair = nameValuePairs [i].Split ('=');  		var illegalPageNames = new[] {  			"con"'  			"aux"'  			"nul"'  			"prn"  		};  		if (!illegalPageNames.Contains (pair [0].ToLowerInvariant ()) && (pair.Length == 1 || !illegalPageNames.Contains (pair [1].ToLowerInvariant ()))) {  			//Add name part of name/value pair   			if (friendlyPath.EndsWith ("/")) {  				if (pair [0].ToLower () == "tabid")//always lowercase the tabid part of the path  				 {  					pathToAppend = pathToAppend + pair [0].ToLower ();  				} else {  					pathToAppend = pathToAppend + pair [0];  				}  			} else {  				pathToAppend = pathToAppend + "/" + pair [0];  			}  			if (pair.Length > 1) {  				if (pair [1].Length > 0) {  					var rx = RegexUtils.GetCachedRegex (settings.RegexMatch);  					if (rx.IsMatch (pair [1]) == false) {  						// Contains Non-AlphaNumeric Characters   						if (pair [0].ToLower () == "tabid") {  							int tabId;  							if (Int32.TryParse (pair [1]' out tabId)) {  								if (tab != null && tab.TabID == tabId) {  									if (tab.TabPath != Null.NullString && settings.IncludePageName) {  										if (pathToAppend.StartsWith ("/") == false) {  											pathToAppend = "/" + pathToAppend;  										}  										pathToAppend = tab.TabPath.Replace ("//"' "/").TrimStart ('/').TrimEnd ('/') + pathToAppend;  									}  								}  							}  						}  						if (pair [1].Contains (" ")) {  							if (tab != null && (tab.IsSuperTab || RewriteController.IsAdminTab (tab.PortalID' tab.TabPath' settings))) {  								//741 : check admin paths to make sure they aren't using + encoding   								pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' "%20");  							} else {  								pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' settings.SpaceEncodingValue);  								//625 : replace space with specified url encoding value   							}  						} else {  							pathToAppend = pathToAppend + "/" + pair [1];  						}  					} else {  						var valueBuilder = new StringBuilder (pair.GetUpperBound (0));  						string key = pair [0];  						//string value = pair[1];  						valueBuilder.Append (pair [1]);  						//if the querystring has been decoded and has a '=' in it' the value will get split more times.  Put those back together with a loop.  						if (pair.GetUpperBound (0) > 1) {  							for (int j = 2; j <= pair.GetUpperBound (0); j++) {  								valueBuilder.Append ("=");  								valueBuilder.Append (pair [j]);  							}  						}  						// Rewrite into URL' contains only alphanumeric and the % or space   						if (queryStringSpecialChars.Length == 0) {  							queryStringSpecialChars = key + "=" + valueBuilder;  						} else {  							queryStringSpecialChars = queryStringSpecialChars + "&" + key + "=" + valueBuilder;  						}  						pathToAppend = "";  					}  				} else {  					pathToAppend = pathToAppend + "/" + settings.SpaceEncodingValue;  					//625 : replace with specified space encoding value  				}  			}  		} else {  			if (pair.Length == 2) {  				if (queryStringSpecialChars.Length == 0) {  					queryStringSpecialChars = pair [0] + "=" + pair [1];  				} else {  					queryStringSpecialChars = queryStringSpecialChars + "&" + pair [0] + "=" + pair [1];  				}  			}  		}  		friendlyPath = friendlyPath + pathToAppend;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: if (!ReferenceEquals (queryStringMatch' Match.Empty)) {  	friendlyPath = queryStringMatch.Groups [1].Value;  	friendlyPath = DefaultPageRegex.Replace (friendlyPath' "");  	if (String.Compare (pageName' Globals.glbDefaultPage' StringComparison.OrdinalIgnoreCase) != 0)//take out the end page name' it will get re-added  	 {  		var pgNameRx = RegexUtils.GetCachedRegex (pageName' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		friendlyPath = pgNameRx.Replace (friendlyPath' "");  	}  	string queryString = queryStringMatch.Groups [2].Value.Replace ("&amp;"' "&");  	if ((queryString.StartsWith ("?"))) {  		queryString = queryString.TrimStart ('?');  	}  	string[] nameValuePairs = queryString.Split ('&');  	for (int i = 0; i <= nameValuePairs.Length - 1; i++) {  		string pathToAppend = "";  		string[] pair = nameValuePairs [i].Split ('=');  		var illegalPageNames = new[] {  			"con"'  			"aux"'  			"nul"'  			"prn"  		};  		if (!illegalPageNames.Contains (pair [0].ToLowerInvariant ()) && (pair.Length == 1 || !illegalPageNames.Contains (pair [1].ToLowerInvariant ()))) {  			//Add name part of name/value pair   			if (friendlyPath.EndsWith ("/")) {  				if (pair [0].ToLower () == "tabid")//always lowercase the tabid part of the path  				 {  					pathToAppend = pathToAppend + pair [0].ToLower ();  				} else {  					pathToAppend = pathToAppend + pair [0];  				}  			} else {  				pathToAppend = pathToAppend + "/" + pair [0];  			}  			if (pair.Length > 1) {  				if (pair [1].Length > 0) {  					var rx = RegexUtils.GetCachedRegex (settings.RegexMatch);  					if (rx.IsMatch (pair [1]) == false) {  						// Contains Non-AlphaNumeric Characters   						if (pair [0].ToLower () == "tabid") {  							int tabId;  							if (Int32.TryParse (pair [1]' out tabId)) {  								if (tab != null && tab.TabID == tabId) {  									if (tab.TabPath != Null.NullString && settings.IncludePageName) {  										if (pathToAppend.StartsWith ("/") == false) {  											pathToAppend = "/" + pathToAppend;  										}  										pathToAppend = tab.TabPath.Replace ("//"' "/").TrimStart ('/').TrimEnd ('/') + pathToAppend;  									}  								}  							}  						}  						if (pair [1].Contains (" ")) {  							if (tab != null && (tab.IsSuperTab || RewriteController.IsAdminTab (tab.PortalID' tab.TabPath' settings))) {  								//741 : check admin paths to make sure they aren't using + encoding   								pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' "%20");  							} else {  								pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' settings.SpaceEncodingValue);  								//625 : replace space with specified url encoding value   							}  						} else {  							pathToAppend = pathToAppend + "/" + pair [1];  						}  					} else {  						var valueBuilder = new StringBuilder (pair.GetUpperBound (0));  						string key = pair [0];  						//string value = pair[1];  						valueBuilder.Append (pair [1]);  						//if the querystring has been decoded and has a '=' in it' the value will get split more times.  Put those back together with a loop.  						if (pair.GetUpperBound (0) > 1) {  							for (int j = 2; j <= pair.GetUpperBound (0); j++) {  								valueBuilder.Append ("=");  								valueBuilder.Append (pair [j]);  							}  						}  						// Rewrite into URL' contains only alphanumeric and the % or space   						if (queryStringSpecialChars.Length == 0) {  							queryStringSpecialChars = key + "=" + valueBuilder;  						} else {  							queryStringSpecialChars = queryStringSpecialChars + "&" + key + "=" + valueBuilder;  						}  						pathToAppend = "";  					}  				} else {  					pathToAppend = pathToAppend + "/" + settings.SpaceEncodingValue;  					//625 : replace with specified space encoding value  				}  			}  		} else {  			if (pair.Length == 2) {  				if (queryStringSpecialChars.Length == 0) {  					queryStringSpecialChars = pair [0] + "=" + pair [1];  				} else {  					queryStringSpecialChars = queryStringSpecialChars + "&" + pair [0] + "=" + pair [1];  				}  			}  		}  		friendlyPath = friendlyPath + pathToAppend;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: if (!ReferenceEquals (queryStringMatch' Match.Empty)) {  	friendlyPath = queryStringMatch.Groups [1].Value;  	friendlyPath = DefaultPageRegex.Replace (friendlyPath' "");  	if (String.Compare (pageName' Globals.glbDefaultPage' StringComparison.OrdinalIgnoreCase) != 0)//take out the end page name' it will get re-added  	 {  		var pgNameRx = RegexUtils.GetCachedRegex (pageName' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		friendlyPath = pgNameRx.Replace (friendlyPath' "");  	}  	string queryString = queryStringMatch.Groups [2].Value.Replace ("&amp;"' "&");  	if ((queryString.StartsWith ("?"))) {  		queryString = queryString.TrimStart ('?');  	}  	string[] nameValuePairs = queryString.Split ('&');  	for (int i = 0; i <= nameValuePairs.Length - 1; i++) {  		string pathToAppend = "";  		string[] pair = nameValuePairs [i].Split ('=');  		var illegalPageNames = new[] {  			"con"'  			"aux"'  			"nul"'  			"prn"  		};  		if (!illegalPageNames.Contains (pair [0].ToLowerInvariant ()) && (pair.Length == 1 || !illegalPageNames.Contains (pair [1].ToLowerInvariant ()))) {  			//Add name part of name/value pair   			if (friendlyPath.EndsWith ("/")) {  				if (pair [0].ToLower () == "tabid")//always lowercase the tabid part of the path  				 {  					pathToAppend = pathToAppend + pair [0].ToLower ();  				} else {  					pathToAppend = pathToAppend + pair [0];  				}  			} else {  				pathToAppend = pathToAppend + "/" + pair [0];  			}  			if (pair.Length > 1) {  				if (pair [1].Length > 0) {  					var rx = RegexUtils.GetCachedRegex (settings.RegexMatch);  					if (rx.IsMatch (pair [1]) == false) {  						// Contains Non-AlphaNumeric Characters   						if (pair [0].ToLower () == "tabid") {  							int tabId;  							if (Int32.TryParse (pair [1]' out tabId)) {  								if (tab != null && tab.TabID == tabId) {  									if (tab.TabPath != Null.NullString && settings.IncludePageName) {  										if (pathToAppend.StartsWith ("/") == false) {  											pathToAppend = "/" + pathToAppend;  										}  										pathToAppend = tab.TabPath.Replace ("//"' "/").TrimStart ('/').TrimEnd ('/') + pathToAppend;  									}  								}  							}  						}  						if (pair [1].Contains (" ")) {  							if (tab != null && (tab.IsSuperTab || RewriteController.IsAdminTab (tab.PortalID' tab.TabPath' settings))) {  								//741 : check admin paths to make sure they aren't using + encoding   								pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' "%20");  							} else {  								pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' settings.SpaceEncodingValue);  								//625 : replace space with specified url encoding value   							}  						} else {  							pathToAppend = pathToAppend + "/" + pair [1];  						}  					} else {  						var valueBuilder = new StringBuilder (pair.GetUpperBound (0));  						string key = pair [0];  						//string value = pair[1];  						valueBuilder.Append (pair [1]);  						//if the querystring has been decoded and has a '=' in it' the value will get split more times.  Put those back together with a loop.  						if (pair.GetUpperBound (0) > 1) {  							for (int j = 2; j <= pair.GetUpperBound (0); j++) {  								valueBuilder.Append ("=");  								valueBuilder.Append (pair [j]);  							}  						}  						// Rewrite into URL' contains only alphanumeric and the % or space   						if (queryStringSpecialChars.Length == 0) {  							queryStringSpecialChars = key + "=" + valueBuilder;  						} else {  							queryStringSpecialChars = queryStringSpecialChars + "&" + key + "=" + valueBuilder;  						}  						pathToAppend = "";  					}  				} else {  					pathToAppend = pathToAppend + "/" + settings.SpaceEncodingValue;  					//625 : replace with specified space encoding value  				}  			}  		} else {  			if (pair.Length == 2) {  				if (queryStringSpecialChars.Length == 0) {  					queryStringSpecialChars = pair [0] + "=" + pair [1];  				} else {  					queryStringSpecialChars = queryStringSpecialChars + "&" + pair [0] + "=" + pair [1];  				}  			}  		}  		friendlyPath = friendlyPath + pathToAppend;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: for (int i = 0; i <= nameValuePairs.Length - 1; i++) {  	string pathToAppend = "";  	string[] pair = nameValuePairs [i].Split ('=');  	var illegalPageNames = new[] {  		"con"'  		"aux"'  		"nul"'  		"prn"  	};  	if (!illegalPageNames.Contains (pair [0].ToLowerInvariant ()) && (pair.Length == 1 || !illegalPageNames.Contains (pair [1].ToLowerInvariant ()))) {  		//Add name part of name/value pair   		if (friendlyPath.EndsWith ("/")) {  			if (pair [0].ToLower () == "tabid")//always lowercase the tabid part of the path  			 {  				pathToAppend = pathToAppend + pair [0].ToLower ();  			} else {  				pathToAppend = pathToAppend + pair [0];  			}  		} else {  			pathToAppend = pathToAppend + "/" + pair [0];  		}  		if (pair.Length > 1) {  			if (pair [1].Length > 0) {  				var rx = RegexUtils.GetCachedRegex (settings.RegexMatch);  				if (rx.IsMatch (pair [1]) == false) {  					// Contains Non-AlphaNumeric Characters   					if (pair [0].ToLower () == "tabid") {  						int tabId;  						if (Int32.TryParse (pair [1]' out tabId)) {  							if (tab != null && tab.TabID == tabId) {  								if (tab.TabPath != Null.NullString && settings.IncludePageName) {  									if (pathToAppend.StartsWith ("/") == false) {  										pathToAppend = "/" + pathToAppend;  									}  									pathToAppend = tab.TabPath.Replace ("//"' "/").TrimStart ('/').TrimEnd ('/') + pathToAppend;  								}  							}  						}  					}  					if (pair [1].Contains (" ")) {  						if (tab != null && (tab.IsSuperTab || RewriteController.IsAdminTab (tab.PortalID' tab.TabPath' settings))) {  							//741 : check admin paths to make sure they aren't using + encoding   							pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' "%20");  						} else {  							pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' settings.SpaceEncodingValue);  							//625 : replace space with specified url encoding value   						}  					} else {  						pathToAppend = pathToAppend + "/" + pair [1];  					}  				} else {  					var valueBuilder = new StringBuilder (pair.GetUpperBound (0));  					string key = pair [0];  					//string value = pair[1];  					valueBuilder.Append (pair [1]);  					//if the querystring has been decoded and has a '=' in it' the value will get split more times.  Put those back together with a loop.  					if (pair.GetUpperBound (0) > 1) {  						for (int j = 2; j <= pair.GetUpperBound (0); j++) {  							valueBuilder.Append ("=");  							valueBuilder.Append (pair [j]);  						}  					}  					// Rewrite into URL' contains only alphanumeric and the % or space   					if (queryStringSpecialChars.Length == 0) {  						queryStringSpecialChars = key + "=" + valueBuilder;  					} else {  						queryStringSpecialChars = queryStringSpecialChars + "&" + key + "=" + valueBuilder;  					}  					pathToAppend = "";  				}  			} else {  				pathToAppend = pathToAppend + "/" + settings.SpaceEncodingValue;  				//625 : replace with specified space encoding value  			}  		}  	} else {  		if (pair.Length == 2) {  			if (queryStringSpecialChars.Length == 0) {  				queryStringSpecialChars = pair [0] + "=" + pair [1];  			} else {  				queryStringSpecialChars = queryStringSpecialChars + "&" + pair [0] + "=" + pair [1];  			}  		}  	}  	friendlyPath = friendlyPath + pathToAppend;  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: for (int i = 0; i <= nameValuePairs.Length - 1; i++) {  	string pathToAppend = "";  	string[] pair = nameValuePairs [i].Split ('=');  	var illegalPageNames = new[] {  		"con"'  		"aux"'  		"nul"'  		"prn"  	};  	if (!illegalPageNames.Contains (pair [0].ToLowerInvariant ()) && (pair.Length == 1 || !illegalPageNames.Contains (pair [1].ToLowerInvariant ()))) {  		//Add name part of name/value pair   		if (friendlyPath.EndsWith ("/")) {  			if (pair [0].ToLower () == "tabid")//always lowercase the tabid part of the path  			 {  				pathToAppend = pathToAppend + pair [0].ToLower ();  			} else {  				pathToAppend = pathToAppend + pair [0];  			}  		} else {  			pathToAppend = pathToAppend + "/" + pair [0];  		}  		if (pair.Length > 1) {  			if (pair [1].Length > 0) {  				var rx = RegexUtils.GetCachedRegex (settings.RegexMatch);  				if (rx.IsMatch (pair [1]) == false) {  					// Contains Non-AlphaNumeric Characters   					if (pair [0].ToLower () == "tabid") {  						int tabId;  						if (Int32.TryParse (pair [1]' out tabId)) {  							if (tab != null && tab.TabID == tabId) {  								if (tab.TabPath != Null.NullString && settings.IncludePageName) {  									if (pathToAppend.StartsWith ("/") == false) {  										pathToAppend = "/" + pathToAppend;  									}  									pathToAppend = tab.TabPath.Replace ("//"' "/").TrimStart ('/').TrimEnd ('/') + pathToAppend;  								}  							}  						}  					}  					if (pair [1].Contains (" ")) {  						if (tab != null && (tab.IsSuperTab || RewriteController.IsAdminTab (tab.PortalID' tab.TabPath' settings))) {  							//741 : check admin paths to make sure they aren't using + encoding   							pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' "%20");  						} else {  							pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' settings.SpaceEncodingValue);  							//625 : replace space with specified url encoding value   						}  					} else {  						pathToAppend = pathToAppend + "/" + pair [1];  					}  				} else {  					var valueBuilder = new StringBuilder (pair.GetUpperBound (0));  					string key = pair [0];  					//string value = pair[1];  					valueBuilder.Append (pair [1]);  					//if the querystring has been decoded and has a '=' in it' the value will get split more times.  Put those back together with a loop.  					if (pair.GetUpperBound (0) > 1) {  						for (int j = 2; j <= pair.GetUpperBound (0); j++) {  							valueBuilder.Append ("=");  							valueBuilder.Append (pair [j]);  						}  					}  					// Rewrite into URL' contains only alphanumeric and the % or space   					if (queryStringSpecialChars.Length == 0) {  						queryStringSpecialChars = key + "=" + valueBuilder;  					} else {  						queryStringSpecialChars = queryStringSpecialChars + "&" + key + "=" + valueBuilder;  					}  					pathToAppend = "";  				}  			} else {  				pathToAppend = pathToAppend + "/" + settings.SpaceEncodingValue;  				//625 : replace with specified space encoding value  			}  		}  	} else {  		if (pair.Length == 2) {  			if (queryStringSpecialChars.Length == 0) {  				queryStringSpecialChars = pair [0] + "=" + pair [1];  			} else {  				queryStringSpecialChars = queryStringSpecialChars + "&" + pair [0] + "=" + pair [1];  			}  		}  	}  	friendlyPath = friendlyPath + pathToAppend;  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: if (!illegalPageNames.Contains (pair [0].ToLowerInvariant ()) && (pair.Length == 1 || !illegalPageNames.Contains (pair [1].ToLowerInvariant ()))) {  	//Add name part of name/value pair   	if (friendlyPath.EndsWith ("/")) {  		if (pair [0].ToLower () == "tabid")//always lowercase the tabid part of the path  		 {  			pathToAppend = pathToAppend + pair [0].ToLower ();  		} else {  			pathToAppend = pathToAppend + pair [0];  		}  	} else {  		pathToAppend = pathToAppend + "/" + pair [0];  	}  	if (pair.Length > 1) {  		if (pair [1].Length > 0) {  			var rx = RegexUtils.GetCachedRegex (settings.RegexMatch);  			if (rx.IsMatch (pair [1]) == false) {  				// Contains Non-AlphaNumeric Characters   				if (pair [0].ToLower () == "tabid") {  					int tabId;  					if (Int32.TryParse (pair [1]' out tabId)) {  						if (tab != null && tab.TabID == tabId) {  							if (tab.TabPath != Null.NullString && settings.IncludePageName) {  								if (pathToAppend.StartsWith ("/") == false) {  									pathToAppend = "/" + pathToAppend;  								}  								pathToAppend = tab.TabPath.Replace ("//"' "/").TrimStart ('/').TrimEnd ('/') + pathToAppend;  							}  						}  					}  				}  				if (pair [1].Contains (" ")) {  					if (tab != null && (tab.IsSuperTab || RewriteController.IsAdminTab (tab.PortalID' tab.TabPath' settings))) {  						//741 : check admin paths to make sure they aren't using + encoding   						pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' "%20");  					} else {  						pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' settings.SpaceEncodingValue);  						//625 : replace space with specified url encoding value   					}  				} else {  					pathToAppend = pathToAppend + "/" + pair [1];  				}  			} else {  				var valueBuilder = new StringBuilder (pair.GetUpperBound (0));  				string key = pair [0];  				//string value = pair[1];  				valueBuilder.Append (pair [1]);  				//if the querystring has been decoded and has a '=' in it' the value will get split more times.  Put those back together with a loop.  				if (pair.GetUpperBound (0) > 1) {  					for (int j = 2; j <= pair.GetUpperBound (0); j++) {  						valueBuilder.Append ("=");  						valueBuilder.Append (pair [j]);  					}  				}  				// Rewrite into URL' contains only alphanumeric and the % or space   				if (queryStringSpecialChars.Length == 0) {  					queryStringSpecialChars = key + "=" + valueBuilder;  				} else {  					queryStringSpecialChars = queryStringSpecialChars + "&" + key + "=" + valueBuilder;  				}  				pathToAppend = "";  			}  		} else {  			pathToAppend = pathToAppend + "/" + settings.SpaceEncodingValue;  			//625 : replace with specified space encoding value  		}  	}  } else {  	if (pair.Length == 2) {  		if (queryStringSpecialChars.Length == 0) {  			queryStringSpecialChars = pair [0] + "=" + pair [1];  		} else {  			queryStringSpecialChars = queryStringSpecialChars + "&" + pair [0] + "=" + pair [1];  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: if (!illegalPageNames.Contains (pair [0].ToLowerInvariant ()) && (pair.Length == 1 || !illegalPageNames.Contains (pair [1].ToLowerInvariant ()))) {  	//Add name part of name/value pair   	if (friendlyPath.EndsWith ("/")) {  		if (pair [0].ToLower () == "tabid")//always lowercase the tabid part of the path  		 {  			pathToAppend = pathToAppend + pair [0].ToLower ();  		} else {  			pathToAppend = pathToAppend + pair [0];  		}  	} else {  		pathToAppend = pathToAppend + "/" + pair [0];  	}  	if (pair.Length > 1) {  		if (pair [1].Length > 0) {  			var rx = RegexUtils.GetCachedRegex (settings.RegexMatch);  			if (rx.IsMatch (pair [1]) == false) {  				// Contains Non-AlphaNumeric Characters   				if (pair [0].ToLower () == "tabid") {  					int tabId;  					if (Int32.TryParse (pair [1]' out tabId)) {  						if (tab != null && tab.TabID == tabId) {  							if (tab.TabPath != Null.NullString && settings.IncludePageName) {  								if (pathToAppend.StartsWith ("/") == false) {  									pathToAppend = "/" + pathToAppend;  								}  								pathToAppend = tab.TabPath.Replace ("//"' "/").TrimStart ('/').TrimEnd ('/') + pathToAppend;  							}  						}  					}  				}  				if (pair [1].Contains (" ")) {  					if (tab != null && (tab.IsSuperTab || RewriteController.IsAdminTab (tab.PortalID' tab.TabPath' settings))) {  						//741 : check admin paths to make sure they aren't using + encoding   						pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' "%20");  					} else {  						pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' settings.SpaceEncodingValue);  						//625 : replace space with specified url encoding value   					}  				} else {  					pathToAppend = pathToAppend + "/" + pair [1];  				}  			} else {  				var valueBuilder = new StringBuilder (pair.GetUpperBound (0));  				string key = pair [0];  				//string value = pair[1];  				valueBuilder.Append (pair [1]);  				//if the querystring has been decoded and has a '=' in it' the value will get split more times.  Put those back together with a loop.  				if (pair.GetUpperBound (0) > 1) {  					for (int j = 2; j <= pair.GetUpperBound (0); j++) {  						valueBuilder.Append ("=");  						valueBuilder.Append (pair [j]);  					}  				}  				// Rewrite into URL' contains only alphanumeric and the % or space   				if (queryStringSpecialChars.Length == 0) {  					queryStringSpecialChars = key + "=" + valueBuilder;  				} else {  					queryStringSpecialChars = queryStringSpecialChars + "&" + key + "=" + valueBuilder;  				}  				pathToAppend = "";  			}  		} else {  			pathToAppend = pathToAppend + "/" + settings.SpaceEncodingValue;  			//625 : replace with specified space encoding value  		}  	}  } else {  	if (pair.Length == 2) {  		if (queryStringSpecialChars.Length == 0) {  			queryStringSpecialChars = pair [0] + "=" + pair [1];  		} else {  			queryStringSpecialChars = queryStringSpecialChars + "&" + pair [0] + "=" + pair [1];  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: if (pair.Length > 1) {  	if (pair [1].Length > 0) {  		var rx = RegexUtils.GetCachedRegex (settings.RegexMatch);  		if (rx.IsMatch (pair [1]) == false) {  			// Contains Non-AlphaNumeric Characters   			if (pair [0].ToLower () == "tabid") {  				int tabId;  				if (Int32.TryParse (pair [1]' out tabId)) {  					if (tab != null && tab.TabID == tabId) {  						if (tab.TabPath != Null.NullString && settings.IncludePageName) {  							if (pathToAppend.StartsWith ("/") == false) {  								pathToAppend = "/" + pathToAppend;  							}  							pathToAppend = tab.TabPath.Replace ("//"' "/").TrimStart ('/').TrimEnd ('/') + pathToAppend;  						}  					}  				}  			}  			if (pair [1].Contains (" ")) {  				if (tab != null && (tab.IsSuperTab || RewriteController.IsAdminTab (tab.PortalID' tab.TabPath' settings))) {  					//741 : check admin paths to make sure they aren't using + encoding   					pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' "%20");  				} else {  					pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' settings.SpaceEncodingValue);  					//625 : replace space with specified url encoding value   				}  			} else {  				pathToAppend = pathToAppend + "/" + pair [1];  			}  		} else {  			var valueBuilder = new StringBuilder (pair.GetUpperBound (0));  			string key = pair [0];  			//string value = pair[1];  			valueBuilder.Append (pair [1]);  			//if the querystring has been decoded and has a '=' in it' the value will get split more times.  Put those back together with a loop.  			if (pair.GetUpperBound (0) > 1) {  				for (int j = 2; j <= pair.GetUpperBound (0); j++) {  					valueBuilder.Append ("=");  					valueBuilder.Append (pair [j]);  				}  			}  			// Rewrite into URL' contains only alphanumeric and the % or space   			if (queryStringSpecialChars.Length == 0) {  				queryStringSpecialChars = key + "=" + valueBuilder;  			} else {  				queryStringSpecialChars = queryStringSpecialChars + "&" + key + "=" + valueBuilder;  			}  			pathToAppend = "";  		}  	} else {  		pathToAppend = pathToAppend + "/" + settings.SpaceEncodingValue;  		//625 : replace with specified space encoding value  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: if (pair [1].Length > 0) {  	var rx = RegexUtils.GetCachedRegex (settings.RegexMatch);  	if (rx.IsMatch (pair [1]) == false) {  		// Contains Non-AlphaNumeric Characters   		if (pair [0].ToLower () == "tabid") {  			int tabId;  			if (Int32.TryParse (pair [1]' out tabId)) {  				if (tab != null && tab.TabID == tabId) {  					if (tab.TabPath != Null.NullString && settings.IncludePageName) {  						if (pathToAppend.StartsWith ("/") == false) {  							pathToAppend = "/" + pathToAppend;  						}  						pathToAppend = tab.TabPath.Replace ("//"' "/").TrimStart ('/').TrimEnd ('/') + pathToAppend;  					}  				}  			}  		}  		if (pair [1].Contains (" ")) {  			if (tab != null && (tab.IsSuperTab || RewriteController.IsAdminTab (tab.PortalID' tab.TabPath' settings))) {  				//741 : check admin paths to make sure they aren't using + encoding   				pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' "%20");  			} else {  				pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' settings.SpaceEncodingValue);  				//625 : replace space with specified url encoding value   			}  		} else {  			pathToAppend = pathToAppend + "/" + pair [1];  		}  	} else {  		var valueBuilder = new StringBuilder (pair.GetUpperBound (0));  		string key = pair [0];  		//string value = pair[1];  		valueBuilder.Append (pair [1]);  		//if the querystring has been decoded and has a '=' in it' the value will get split more times.  Put those back together with a loop.  		if (pair.GetUpperBound (0) > 1) {  			for (int j = 2; j <= pair.GetUpperBound (0); j++) {  				valueBuilder.Append ("=");  				valueBuilder.Append (pair [j]);  			}  		}  		// Rewrite into URL' contains only alphanumeric and the % or space   		if (queryStringSpecialChars.Length == 0) {  			queryStringSpecialChars = key + "=" + valueBuilder;  		} else {  			queryStringSpecialChars = queryStringSpecialChars + "&" + key + "=" + valueBuilder;  		}  		pathToAppend = "";  	}  } else {  	pathToAppend = pathToAppend + "/" + settings.SpaceEncodingValue;  	//625 : replace with specified space encoding value  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: if (rx.IsMatch (pair [1]) == false) {  	// Contains Non-AlphaNumeric Characters   	if (pair [0].ToLower () == "tabid") {  		int tabId;  		if (Int32.TryParse (pair [1]' out tabId)) {  			if (tab != null && tab.TabID == tabId) {  				if (tab.TabPath != Null.NullString && settings.IncludePageName) {  					if (pathToAppend.StartsWith ("/") == false) {  						pathToAppend = "/" + pathToAppend;  					}  					pathToAppend = tab.TabPath.Replace ("//"' "/").TrimStart ('/').TrimEnd ('/') + pathToAppend;  				}  			}  		}  	}  	if (pair [1].Contains (" ")) {  		if (tab != null && (tab.IsSuperTab || RewriteController.IsAdminTab (tab.PortalID' tab.TabPath' settings))) {  			//741 : check admin paths to make sure they aren't using + encoding   			pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' "%20");  		} else {  			pathToAppend = pathToAppend + "/" + pair [1].Replace (" "' settings.SpaceEncodingValue);  			//625 : replace space with specified url encoding value   		}  	} else {  		pathToAppend = pathToAppend + "/" + pair [1];  	}  } else {  	var valueBuilder = new StringBuilder (pair.GetUpperBound (0));  	string key = pair [0];  	//string value = pair[1];  	valueBuilder.Append (pair [1]);  	//if the querystring has been decoded and has a '=' in it' the value will get split more times.  Put those back together with a loop.  	if (pair.GetUpperBound (0) > 1) {  		for (int j = 2; j <= pair.GetUpperBound (0); j++) {  			valueBuilder.Append ("=");  			valueBuilder.Append (pair [j]);  		}  	}  	// Rewrite into URL' contains only alphanumeric and the % or space   	if (queryStringSpecialChars.Length == 0) {  		queryStringSpecialChars = key + "=" + valueBuilder;  	} else {  		queryStringSpecialChars = queryStringSpecialChars + "&" + key + "=" + valueBuilder;  	}  	pathToAppend = "";  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: if (pair.GetUpperBound (0) > 1) {  	for (int j = 2; j <= pair.GetUpperBound (0); j++) {  		valueBuilder.Append ("=");  		valueBuilder.Append (pair [j]);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: for (int j = 2; j <= pair.GetUpperBound (0); j++) {  	valueBuilder.Append ("=");  	valueBuilder.Append (pair [j]);  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: if (pair.Length == 2) {  	if (queryStringSpecialChars.Length == 0) {  		queryStringSpecialChars = pair [0] + "=" + pair [1];  	} else {  		queryStringSpecialChars = queryStringSpecialChars + "&" + pair [0] + "=" + pair [1];  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((settings.UrlFormat.ToLower () == "advanced" || customOnly) && !RewriteController.IsExcludedFromFriendlyUrls (tab' settings' false)) {  	string newTabPath;  	string customHttpAlias;  	bool isHomePage = TabPathHelper.IsTabHomePage (tab' portalSettings);  	//do a regex check on the base friendly Path' to see if there is parameters on the end or not  	var tabOnlyRegex = RegexUtils.GetCachedRegex ("[^?]*/tabId/(?<tabid>\\d+)/" + pageName + "($|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	if (tabOnlyRegex.IsMatch (friendlyPath)) {  		MatchCollection tabOnlyMatches = tabOnlyRegex.Matches (friendlyPath);  		string qs = "";  		if (tabOnlyMatches.Count > 0) {  			Match rgxMatch = tabOnlyMatches [0];  			if (rgxMatch.Groups ["qs"] != null && rgxMatch.Groups ["qs"].Success) {  				qs = "?" + rgxMatch.Groups ["qs"].Value;  			}  		}  		bool dropLangParms;  		//736: observe the culture code of the tab  		string cultureCode = tab.CultureCode;  		bool isDefaultLanguage = false;  		if (cultureCode == "") {  			cultureCode = portalSettings.DefaultLanguage;  			isDefaultLanguage = true;  			//751 when using the default culture code' the redirect doesn't need an explicit language  		}  		bool isCustomUrl;  		newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' true' isHomePage' cultureCode' isDefaultLanguage' false' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  		//770 : custom http alias found' merge into overall result  		if (!string.IsNullOrEmpty (customHttpAlias)) {  			httpAlias = customHttpAlias;  			messages.Add ("Uses page-specific alias: " + customHttpAlias);  		}  		//it is a straight page.aspx reference' with just the tabid to specify parameters' so get the extension that should be used (no pagename is used by design)  		string extension = customHttpAlias != null && newTabPath == "" ? "" : DetermineExtension (isHomePage' pageName' settings);  		if (customOnly && isCustomUrl || customOnly == false) {  			result = Globals.AddHTTP (httpAlias + "/" + newTabPath.TrimStart ('/') + extension) + qs;  		}  	} else {  		//When the home page is requested with a querystring value' the path for the home page is included.  This is because path items without the home page   		//qualifier are incorrectly checked for as dnn pages' and will result in a 404.  Ie domain.com/key/value will fail looking for a DNN path called 'key/value'.  		//This gets around the problem because it places the path aas /home/key/value - which correctly identifies the tab as '/Home' and the key/value parameters as  		// &key=value.  		//there are parameters on the base friendly url path' so split them off and process separately  		//this regex splits the incoming friendly path pagename/tabid/56/default.aspx into the non-tabid path' and individual parms for each /parm/ in the friendly path   		//550 : add in \. to allow '.' in the parameter path.  		//667 : allow non-word characters (specifically %) in the path  		var rgx = RegexUtils.GetCachedRegex ("[^?]*(?<tabs>/tabId/(?<tabid>\\d+))(?<path>(?<parms>(?:(?:/[^/?]+){1})+))(?:/" + pageName + ")(?:$|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		MatchCollection matches = rgx.Matches (friendlyPath);  		if (matches.Count > 0) {  			//it is a friendly url with other parameters in it   			//format it up with the parameters in the end' keeping the same page name   			//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   			Match rgxMatch = matches [0];  			bool hasParms = false;  			string cultureCode = null;  			string defaultCode = null;  			const string newPageName = "";  			string newPath = "";  			string qs = "";  			string langParms = "";  			//check we matched on some parms in the path   			if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  				if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  					hasParms = true;  					newPath = rgxMatch.Groups ["path"].Value;  					qs = rgxMatch.Groups ["qs"].Value;  					Match langMatch = LangMatchRegex.Match (newPath);  					if (langMatch.Success) {  						//a language specifier parameter is in the string  						//this is always the last parameter in the list' which  						//gives nasty pagename results' so shift the language query to before the page name  						// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  						// we really want language/en-us/home.aspx  						langParms = langMatch.Value;  						langParms = langParms.TrimEnd ('/');  						newPath = newPath.Replace (langParms' "");  						cultureCode = langMatch.Groups ["code"].Value;  						//obtain the culture code for this language   						defaultCode = portalSettings.DefaultLanguage;  					} else {  						//no language settings' use default  						cultureCode = portalSettings.DefaultLanguage;  						defaultCode = cultureCode;  					}  				}  			}  			bool dropLangParms;  			//determine if we allow the home page to be shown as the site root.  This is if :  			//cultureCode = default culture' newPath is blank after removing languageParms  			//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  			bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  			bool hasPath = (newPath != "");  			//871 : case insensitive comparison for culture  			bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  			bool isCustomUrl;  			newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  			if (hasParms) {  				bool changeToSiteRoot;  				//remove any parts of the path excluded by regex  				RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  				if (newPath == "" && isHomePage) {  					//956 : recheck the test for the homePagebeing a site root Url  					homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  					hasPath = (newPath != "");  					if (homePageSiteRoot) {  						//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  						//then re-get the home page Url with no params (hasPath=false)  						//done like this to re-run all rules relating the url  						newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  					}  				}  				//check for parameter regex replacement   				string changedPath;  				bool allowOtherParameters;  				if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  					messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  					newPath = changedPath;  				}  				//transform is ctl/privacy' ctl/login etc  				bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  				//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  				//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  				if (!string.IsNullOrEmpty (customHttpAlias)) {  					httpAlias = customHttpAlias;  					messages.Add ("Uses page-specific alias: " + customHttpAlias);  				}  				if (allowOtherParameters) {  					//738 : check for transformation by module specific provider  					//894 : allow module providers to be disabled  					bool customModuleUrl = false;  					if (settings.EnableCustomProviders) {  						customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  					}  					//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  					if (!customModuleUrl) {  						if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  							newPath = changedPath;  						}  					} else {  						//update path value with custom Url returned from module provider(s)  						newPath = changedPath;  					}  				}  				//start constructing the url  				//get the page and extension  				//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  				//because it's treated like a site root (quasi home page if you like)  				string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  				//prepend querystring qualifier if necessary                              				qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  				//string it all together  				if (!dropLangParms) {  					//871 : case insensitive culture comparisons  					//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  					dropLangParms = isDefaultLanguage || cultureSpecificAlias;  					// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   				}  				string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  				//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  				finalPath = AumDebugRegex.Replace (finalPath' "");  				//'and we're done!   				if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  					result = Globals.AddHTTP (finalPath);  				}  			}  		} else {  			var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			if ((re.IsMatch (friendlyPath))) {  				Match sesMatch = re.Match (friendlyPath);  				if ((sesMatch.Groups.Count > 2)) {  					switch (sesMatch.Groups [2].Value.ToLower ()) {  					case "terms":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "privacy":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "login":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "register":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					default:  						result = friendlyPath;  						break;  					}  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((settings.UrlFormat.ToLower () == "advanced" || customOnly) && !RewriteController.IsExcludedFromFriendlyUrls (tab' settings' false)) {  	string newTabPath;  	string customHttpAlias;  	bool isHomePage = TabPathHelper.IsTabHomePage (tab' portalSettings);  	//do a regex check on the base friendly Path' to see if there is parameters on the end or not  	var tabOnlyRegex = RegexUtils.GetCachedRegex ("[^?]*/tabId/(?<tabid>\\d+)/" + pageName + "($|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	if (tabOnlyRegex.IsMatch (friendlyPath)) {  		MatchCollection tabOnlyMatches = tabOnlyRegex.Matches (friendlyPath);  		string qs = "";  		if (tabOnlyMatches.Count > 0) {  			Match rgxMatch = tabOnlyMatches [0];  			if (rgxMatch.Groups ["qs"] != null && rgxMatch.Groups ["qs"].Success) {  				qs = "?" + rgxMatch.Groups ["qs"].Value;  			}  		}  		bool dropLangParms;  		//736: observe the culture code of the tab  		string cultureCode = tab.CultureCode;  		bool isDefaultLanguage = false;  		if (cultureCode == "") {  			cultureCode = portalSettings.DefaultLanguage;  			isDefaultLanguage = true;  			//751 when using the default culture code' the redirect doesn't need an explicit language  		}  		bool isCustomUrl;  		newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' true' isHomePage' cultureCode' isDefaultLanguage' false' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  		//770 : custom http alias found' merge into overall result  		if (!string.IsNullOrEmpty (customHttpAlias)) {  			httpAlias = customHttpAlias;  			messages.Add ("Uses page-specific alias: " + customHttpAlias);  		}  		//it is a straight page.aspx reference' with just the tabid to specify parameters' so get the extension that should be used (no pagename is used by design)  		string extension = customHttpAlias != null && newTabPath == "" ? "" : DetermineExtension (isHomePage' pageName' settings);  		if (customOnly && isCustomUrl || customOnly == false) {  			result = Globals.AddHTTP (httpAlias + "/" + newTabPath.TrimStart ('/') + extension) + qs;  		}  	} else {  		//When the home page is requested with a querystring value' the path for the home page is included.  This is because path items without the home page   		//qualifier are incorrectly checked for as dnn pages' and will result in a 404.  Ie domain.com/key/value will fail looking for a DNN path called 'key/value'.  		//This gets around the problem because it places the path aas /home/key/value - which correctly identifies the tab as '/Home' and the key/value parameters as  		// &key=value.  		//there are parameters on the base friendly url path' so split them off and process separately  		//this regex splits the incoming friendly path pagename/tabid/56/default.aspx into the non-tabid path' and individual parms for each /parm/ in the friendly path   		//550 : add in \. to allow '.' in the parameter path.  		//667 : allow non-word characters (specifically %) in the path  		var rgx = RegexUtils.GetCachedRegex ("[^?]*(?<tabs>/tabId/(?<tabid>\\d+))(?<path>(?<parms>(?:(?:/[^/?]+){1})+))(?:/" + pageName + ")(?:$|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		MatchCollection matches = rgx.Matches (friendlyPath);  		if (matches.Count > 0) {  			//it is a friendly url with other parameters in it   			//format it up with the parameters in the end' keeping the same page name   			//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   			Match rgxMatch = matches [0];  			bool hasParms = false;  			string cultureCode = null;  			string defaultCode = null;  			const string newPageName = "";  			string newPath = "";  			string qs = "";  			string langParms = "";  			//check we matched on some parms in the path   			if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  				if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  					hasParms = true;  					newPath = rgxMatch.Groups ["path"].Value;  					qs = rgxMatch.Groups ["qs"].Value;  					Match langMatch = LangMatchRegex.Match (newPath);  					if (langMatch.Success) {  						//a language specifier parameter is in the string  						//this is always the last parameter in the list' which  						//gives nasty pagename results' so shift the language query to before the page name  						// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  						// we really want language/en-us/home.aspx  						langParms = langMatch.Value;  						langParms = langParms.TrimEnd ('/');  						newPath = newPath.Replace (langParms' "");  						cultureCode = langMatch.Groups ["code"].Value;  						//obtain the culture code for this language   						defaultCode = portalSettings.DefaultLanguage;  					} else {  						//no language settings' use default  						cultureCode = portalSettings.DefaultLanguage;  						defaultCode = cultureCode;  					}  				}  			}  			bool dropLangParms;  			//determine if we allow the home page to be shown as the site root.  This is if :  			//cultureCode = default culture' newPath is blank after removing languageParms  			//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  			bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  			bool hasPath = (newPath != "");  			//871 : case insensitive comparison for culture  			bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  			bool isCustomUrl;  			newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  			if (hasParms) {  				bool changeToSiteRoot;  				//remove any parts of the path excluded by regex  				RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  				if (newPath == "" && isHomePage) {  					//956 : recheck the test for the homePagebeing a site root Url  					homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  					hasPath = (newPath != "");  					if (homePageSiteRoot) {  						//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  						//then re-get the home page Url with no params (hasPath=false)  						//done like this to re-run all rules relating the url  						newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  					}  				}  				//check for parameter regex replacement   				string changedPath;  				bool allowOtherParameters;  				if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  					messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  					newPath = changedPath;  				}  				//transform is ctl/privacy' ctl/login etc  				bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  				//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  				//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  				if (!string.IsNullOrEmpty (customHttpAlias)) {  					httpAlias = customHttpAlias;  					messages.Add ("Uses page-specific alias: " + customHttpAlias);  				}  				if (allowOtherParameters) {  					//738 : check for transformation by module specific provider  					//894 : allow module providers to be disabled  					bool customModuleUrl = false;  					if (settings.EnableCustomProviders) {  						customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  					}  					//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  					if (!customModuleUrl) {  						if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  							newPath = changedPath;  						}  					} else {  						//update path value with custom Url returned from module provider(s)  						newPath = changedPath;  					}  				}  				//start constructing the url  				//get the page and extension  				//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  				//because it's treated like a site root (quasi home page if you like)  				string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  				//prepend querystring qualifier if necessary                              				qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  				//string it all together  				if (!dropLangParms) {  					//871 : case insensitive culture comparisons  					//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  					dropLangParms = isDefaultLanguage || cultureSpecificAlias;  					// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   				}  				string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  				//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  				finalPath = AumDebugRegex.Replace (finalPath' "");  				//'and we're done!   				if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  					result = Globals.AddHTTP (finalPath);  				}  			}  		} else {  			var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			if ((re.IsMatch (friendlyPath))) {  				Match sesMatch = re.Match (friendlyPath);  				if ((sesMatch.Groups.Count > 2)) {  					switch (sesMatch.Groups [2].Value.ToLower ()) {  					case "terms":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "privacy":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "login":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "register":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					default:  						result = friendlyPath;  						break;  					}  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((settings.UrlFormat.ToLower () == "advanced" || customOnly) && !RewriteController.IsExcludedFromFriendlyUrls (tab' settings' false)) {  	string newTabPath;  	string customHttpAlias;  	bool isHomePage = TabPathHelper.IsTabHomePage (tab' portalSettings);  	//do a regex check on the base friendly Path' to see if there is parameters on the end or not  	var tabOnlyRegex = RegexUtils.GetCachedRegex ("[^?]*/tabId/(?<tabid>\\d+)/" + pageName + "($|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	if (tabOnlyRegex.IsMatch (friendlyPath)) {  		MatchCollection tabOnlyMatches = tabOnlyRegex.Matches (friendlyPath);  		string qs = "";  		if (tabOnlyMatches.Count > 0) {  			Match rgxMatch = tabOnlyMatches [0];  			if (rgxMatch.Groups ["qs"] != null && rgxMatch.Groups ["qs"].Success) {  				qs = "?" + rgxMatch.Groups ["qs"].Value;  			}  		}  		bool dropLangParms;  		//736: observe the culture code of the tab  		string cultureCode = tab.CultureCode;  		bool isDefaultLanguage = false;  		if (cultureCode == "") {  			cultureCode = portalSettings.DefaultLanguage;  			isDefaultLanguage = true;  			//751 when using the default culture code' the redirect doesn't need an explicit language  		}  		bool isCustomUrl;  		newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' true' isHomePage' cultureCode' isDefaultLanguage' false' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  		//770 : custom http alias found' merge into overall result  		if (!string.IsNullOrEmpty (customHttpAlias)) {  			httpAlias = customHttpAlias;  			messages.Add ("Uses page-specific alias: " + customHttpAlias);  		}  		//it is a straight page.aspx reference' with just the tabid to specify parameters' so get the extension that should be used (no pagename is used by design)  		string extension = customHttpAlias != null && newTabPath == "" ? "" : DetermineExtension (isHomePage' pageName' settings);  		if (customOnly && isCustomUrl || customOnly == false) {  			result = Globals.AddHTTP (httpAlias + "/" + newTabPath.TrimStart ('/') + extension) + qs;  		}  	} else {  		//When the home page is requested with a querystring value' the path for the home page is included.  This is because path items without the home page   		//qualifier are incorrectly checked for as dnn pages' and will result in a 404.  Ie domain.com/key/value will fail looking for a DNN path called 'key/value'.  		//This gets around the problem because it places the path aas /home/key/value - which correctly identifies the tab as '/Home' and the key/value parameters as  		// &key=value.  		//there are parameters on the base friendly url path' so split them off and process separately  		//this regex splits the incoming friendly path pagename/tabid/56/default.aspx into the non-tabid path' and individual parms for each /parm/ in the friendly path   		//550 : add in \. to allow '.' in the parameter path.  		//667 : allow non-word characters (specifically %) in the path  		var rgx = RegexUtils.GetCachedRegex ("[^?]*(?<tabs>/tabId/(?<tabid>\\d+))(?<path>(?<parms>(?:(?:/[^/?]+){1})+))(?:/" + pageName + ")(?:$|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		MatchCollection matches = rgx.Matches (friendlyPath);  		if (matches.Count > 0) {  			//it is a friendly url with other parameters in it   			//format it up with the parameters in the end' keeping the same page name   			//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   			Match rgxMatch = matches [0];  			bool hasParms = false;  			string cultureCode = null;  			string defaultCode = null;  			const string newPageName = "";  			string newPath = "";  			string qs = "";  			string langParms = "";  			//check we matched on some parms in the path   			if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  				if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  					hasParms = true;  					newPath = rgxMatch.Groups ["path"].Value;  					qs = rgxMatch.Groups ["qs"].Value;  					Match langMatch = LangMatchRegex.Match (newPath);  					if (langMatch.Success) {  						//a language specifier parameter is in the string  						//this is always the last parameter in the list' which  						//gives nasty pagename results' so shift the language query to before the page name  						// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  						// we really want language/en-us/home.aspx  						langParms = langMatch.Value;  						langParms = langParms.TrimEnd ('/');  						newPath = newPath.Replace (langParms' "");  						cultureCode = langMatch.Groups ["code"].Value;  						//obtain the culture code for this language   						defaultCode = portalSettings.DefaultLanguage;  					} else {  						//no language settings' use default  						cultureCode = portalSettings.DefaultLanguage;  						defaultCode = cultureCode;  					}  				}  			}  			bool dropLangParms;  			//determine if we allow the home page to be shown as the site root.  This is if :  			//cultureCode = default culture' newPath is blank after removing languageParms  			//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  			bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  			bool hasPath = (newPath != "");  			//871 : case insensitive comparison for culture  			bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  			bool isCustomUrl;  			newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  			if (hasParms) {  				bool changeToSiteRoot;  				//remove any parts of the path excluded by regex  				RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  				if (newPath == "" && isHomePage) {  					//956 : recheck the test for the homePagebeing a site root Url  					homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  					hasPath = (newPath != "");  					if (homePageSiteRoot) {  						//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  						//then re-get the home page Url with no params (hasPath=false)  						//done like this to re-run all rules relating the url  						newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  					}  				}  				//check for parameter regex replacement   				string changedPath;  				bool allowOtherParameters;  				if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  					messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  					newPath = changedPath;  				}  				//transform is ctl/privacy' ctl/login etc  				bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  				//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  				//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  				if (!string.IsNullOrEmpty (customHttpAlias)) {  					httpAlias = customHttpAlias;  					messages.Add ("Uses page-specific alias: " + customHttpAlias);  				}  				if (allowOtherParameters) {  					//738 : check for transformation by module specific provider  					//894 : allow module providers to be disabled  					bool customModuleUrl = false;  					if (settings.EnableCustomProviders) {  						customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  					}  					//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  					if (!customModuleUrl) {  						if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  							newPath = changedPath;  						}  					} else {  						//update path value with custom Url returned from module provider(s)  						newPath = changedPath;  					}  				}  				//start constructing the url  				//get the page and extension  				//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  				//because it's treated like a site root (quasi home page if you like)  				string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  				//prepend querystring qualifier if necessary                              				qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  				//string it all together  				if (!dropLangParms) {  					//871 : case insensitive culture comparisons  					//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  					dropLangParms = isDefaultLanguage || cultureSpecificAlias;  					// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   				}  				string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  				//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  				finalPath = AumDebugRegex.Replace (finalPath' "");  				//'and we're done!   				if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  					result = Globals.AddHTTP (finalPath);  				}  			}  		} else {  			var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			if ((re.IsMatch (friendlyPath))) {  				Match sesMatch = re.Match (friendlyPath);  				if ((sesMatch.Groups.Count > 2)) {  					switch (sesMatch.Groups [2].Value.ToLower ()) {  					case "terms":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "privacy":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "login":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "register":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					default:  						result = friendlyPath;  						break;  					}  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((settings.UrlFormat.ToLower () == "advanced" || customOnly) && !RewriteController.IsExcludedFromFriendlyUrls (tab' settings' false)) {  	string newTabPath;  	string customHttpAlias;  	bool isHomePage = TabPathHelper.IsTabHomePage (tab' portalSettings);  	//do a regex check on the base friendly Path' to see if there is parameters on the end or not  	var tabOnlyRegex = RegexUtils.GetCachedRegex ("[^?]*/tabId/(?<tabid>\\d+)/" + pageName + "($|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	if (tabOnlyRegex.IsMatch (friendlyPath)) {  		MatchCollection tabOnlyMatches = tabOnlyRegex.Matches (friendlyPath);  		string qs = "";  		if (tabOnlyMatches.Count > 0) {  			Match rgxMatch = tabOnlyMatches [0];  			if (rgxMatch.Groups ["qs"] != null && rgxMatch.Groups ["qs"].Success) {  				qs = "?" + rgxMatch.Groups ["qs"].Value;  			}  		}  		bool dropLangParms;  		//736: observe the culture code of the tab  		string cultureCode = tab.CultureCode;  		bool isDefaultLanguage = false;  		if (cultureCode == "") {  			cultureCode = portalSettings.DefaultLanguage;  			isDefaultLanguage = true;  			//751 when using the default culture code' the redirect doesn't need an explicit language  		}  		bool isCustomUrl;  		newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' true' isHomePage' cultureCode' isDefaultLanguage' false' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  		//770 : custom http alias found' merge into overall result  		if (!string.IsNullOrEmpty (customHttpAlias)) {  			httpAlias = customHttpAlias;  			messages.Add ("Uses page-specific alias: " + customHttpAlias);  		}  		//it is a straight page.aspx reference' with just the tabid to specify parameters' so get the extension that should be used (no pagename is used by design)  		string extension = customHttpAlias != null && newTabPath == "" ? "" : DetermineExtension (isHomePage' pageName' settings);  		if (customOnly && isCustomUrl || customOnly == false) {  			result = Globals.AddHTTP (httpAlias + "/" + newTabPath.TrimStart ('/') + extension) + qs;  		}  	} else {  		//When the home page is requested with a querystring value' the path for the home page is included.  This is because path items without the home page   		//qualifier are incorrectly checked for as dnn pages' and will result in a 404.  Ie domain.com/key/value will fail looking for a DNN path called 'key/value'.  		//This gets around the problem because it places the path aas /home/key/value - which correctly identifies the tab as '/Home' and the key/value parameters as  		// &key=value.  		//there are parameters on the base friendly url path' so split them off and process separately  		//this regex splits the incoming friendly path pagename/tabid/56/default.aspx into the non-tabid path' and individual parms for each /parm/ in the friendly path   		//550 : add in \. to allow '.' in the parameter path.  		//667 : allow non-word characters (specifically %) in the path  		var rgx = RegexUtils.GetCachedRegex ("[^?]*(?<tabs>/tabId/(?<tabid>\\d+))(?<path>(?<parms>(?:(?:/[^/?]+){1})+))(?:/" + pageName + ")(?:$|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		MatchCollection matches = rgx.Matches (friendlyPath);  		if (matches.Count > 0) {  			//it is a friendly url with other parameters in it   			//format it up with the parameters in the end' keeping the same page name   			//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   			Match rgxMatch = matches [0];  			bool hasParms = false;  			string cultureCode = null;  			string defaultCode = null;  			const string newPageName = "";  			string newPath = "";  			string qs = "";  			string langParms = "";  			//check we matched on some parms in the path   			if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  				if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  					hasParms = true;  					newPath = rgxMatch.Groups ["path"].Value;  					qs = rgxMatch.Groups ["qs"].Value;  					Match langMatch = LangMatchRegex.Match (newPath);  					if (langMatch.Success) {  						//a language specifier parameter is in the string  						//this is always the last parameter in the list' which  						//gives nasty pagename results' so shift the language query to before the page name  						// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  						// we really want language/en-us/home.aspx  						langParms = langMatch.Value;  						langParms = langParms.TrimEnd ('/');  						newPath = newPath.Replace (langParms' "");  						cultureCode = langMatch.Groups ["code"].Value;  						//obtain the culture code for this language   						defaultCode = portalSettings.DefaultLanguage;  					} else {  						//no language settings' use default  						cultureCode = portalSettings.DefaultLanguage;  						defaultCode = cultureCode;  					}  				}  			}  			bool dropLangParms;  			//determine if we allow the home page to be shown as the site root.  This is if :  			//cultureCode = default culture' newPath is blank after removing languageParms  			//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  			bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  			bool hasPath = (newPath != "");  			//871 : case insensitive comparison for culture  			bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  			bool isCustomUrl;  			newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  			if (hasParms) {  				bool changeToSiteRoot;  				//remove any parts of the path excluded by regex  				RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  				if (newPath == "" && isHomePage) {  					//956 : recheck the test for the homePagebeing a site root Url  					homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  					hasPath = (newPath != "");  					if (homePageSiteRoot) {  						//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  						//then re-get the home page Url with no params (hasPath=false)  						//done like this to re-run all rules relating the url  						newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  					}  				}  				//check for parameter regex replacement   				string changedPath;  				bool allowOtherParameters;  				if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  					messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  					newPath = changedPath;  				}  				//transform is ctl/privacy' ctl/login etc  				bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  				//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  				//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  				if (!string.IsNullOrEmpty (customHttpAlias)) {  					httpAlias = customHttpAlias;  					messages.Add ("Uses page-specific alias: " + customHttpAlias);  				}  				if (allowOtherParameters) {  					//738 : check for transformation by module specific provider  					//894 : allow module providers to be disabled  					bool customModuleUrl = false;  					if (settings.EnableCustomProviders) {  						customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  					}  					//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  					if (!customModuleUrl) {  						if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  							newPath = changedPath;  						}  					} else {  						//update path value with custom Url returned from module provider(s)  						newPath = changedPath;  					}  				}  				//start constructing the url  				//get the page and extension  				//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  				//because it's treated like a site root (quasi home page if you like)  				string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  				//prepend querystring qualifier if necessary                              				qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  				//string it all together  				if (!dropLangParms) {  					//871 : case insensitive culture comparisons  					//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  					dropLangParms = isDefaultLanguage || cultureSpecificAlias;  					// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   				}  				string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  				//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  				finalPath = AumDebugRegex.Replace (finalPath' "");  				//'and we're done!   				if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  					result = Globals.AddHTTP (finalPath);  				}  			}  		} else {  			var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			if ((re.IsMatch (friendlyPath))) {  				Match sesMatch = re.Match (friendlyPath);  				if ((sesMatch.Groups.Count > 2)) {  					switch (sesMatch.Groups [2].Value.ToLower ()) {  					case "terms":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "privacy":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "login":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "register":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					default:  						result = friendlyPath;  						break;  					}  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((settings.UrlFormat.ToLower () == "advanced" || customOnly) && !RewriteController.IsExcludedFromFriendlyUrls (tab' settings' false)) {  	string newTabPath;  	string customHttpAlias;  	bool isHomePage = TabPathHelper.IsTabHomePage (tab' portalSettings);  	//do a regex check on the base friendly Path' to see if there is parameters on the end or not  	var tabOnlyRegex = RegexUtils.GetCachedRegex ("[^?]*/tabId/(?<tabid>\\d+)/" + pageName + "($|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	if (tabOnlyRegex.IsMatch (friendlyPath)) {  		MatchCollection tabOnlyMatches = tabOnlyRegex.Matches (friendlyPath);  		string qs = "";  		if (tabOnlyMatches.Count > 0) {  			Match rgxMatch = tabOnlyMatches [0];  			if (rgxMatch.Groups ["qs"] != null && rgxMatch.Groups ["qs"].Success) {  				qs = "?" + rgxMatch.Groups ["qs"].Value;  			}  		}  		bool dropLangParms;  		//736: observe the culture code of the tab  		string cultureCode = tab.CultureCode;  		bool isDefaultLanguage = false;  		if (cultureCode == "") {  			cultureCode = portalSettings.DefaultLanguage;  			isDefaultLanguage = true;  			//751 when using the default culture code' the redirect doesn't need an explicit language  		}  		bool isCustomUrl;  		newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' true' isHomePage' cultureCode' isDefaultLanguage' false' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  		//770 : custom http alias found' merge into overall result  		if (!string.IsNullOrEmpty (customHttpAlias)) {  			httpAlias = customHttpAlias;  			messages.Add ("Uses page-specific alias: " + customHttpAlias);  		}  		//it is a straight page.aspx reference' with just the tabid to specify parameters' so get the extension that should be used (no pagename is used by design)  		string extension = customHttpAlias != null && newTabPath == "" ? "" : DetermineExtension (isHomePage' pageName' settings);  		if (customOnly && isCustomUrl || customOnly == false) {  			result = Globals.AddHTTP (httpAlias + "/" + newTabPath.TrimStart ('/') + extension) + qs;  		}  	} else {  		//When the home page is requested with a querystring value' the path for the home page is included.  This is because path items without the home page   		//qualifier are incorrectly checked for as dnn pages' and will result in a 404.  Ie domain.com/key/value will fail looking for a DNN path called 'key/value'.  		//This gets around the problem because it places the path aas /home/key/value - which correctly identifies the tab as '/Home' and the key/value parameters as  		// &key=value.  		//there are parameters on the base friendly url path' so split them off and process separately  		//this regex splits the incoming friendly path pagename/tabid/56/default.aspx into the non-tabid path' and individual parms for each /parm/ in the friendly path   		//550 : add in \. to allow '.' in the parameter path.  		//667 : allow non-word characters (specifically %) in the path  		var rgx = RegexUtils.GetCachedRegex ("[^?]*(?<tabs>/tabId/(?<tabid>\\d+))(?<path>(?<parms>(?:(?:/[^/?]+){1})+))(?:/" + pageName + ")(?:$|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		MatchCollection matches = rgx.Matches (friendlyPath);  		if (matches.Count > 0) {  			//it is a friendly url with other parameters in it   			//format it up with the parameters in the end' keeping the same page name   			//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   			Match rgxMatch = matches [0];  			bool hasParms = false;  			string cultureCode = null;  			string defaultCode = null;  			const string newPageName = "";  			string newPath = "";  			string qs = "";  			string langParms = "";  			//check we matched on some parms in the path   			if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  				if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  					hasParms = true;  					newPath = rgxMatch.Groups ["path"].Value;  					qs = rgxMatch.Groups ["qs"].Value;  					Match langMatch = LangMatchRegex.Match (newPath);  					if (langMatch.Success) {  						//a language specifier parameter is in the string  						//this is always the last parameter in the list' which  						//gives nasty pagename results' so shift the language query to before the page name  						// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  						// we really want language/en-us/home.aspx  						langParms = langMatch.Value;  						langParms = langParms.TrimEnd ('/');  						newPath = newPath.Replace (langParms' "");  						cultureCode = langMatch.Groups ["code"].Value;  						//obtain the culture code for this language   						defaultCode = portalSettings.DefaultLanguage;  					} else {  						//no language settings' use default  						cultureCode = portalSettings.DefaultLanguage;  						defaultCode = cultureCode;  					}  				}  			}  			bool dropLangParms;  			//determine if we allow the home page to be shown as the site root.  This is if :  			//cultureCode = default culture' newPath is blank after removing languageParms  			//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  			bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  			bool hasPath = (newPath != "");  			//871 : case insensitive comparison for culture  			bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  			bool isCustomUrl;  			newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  			if (hasParms) {  				bool changeToSiteRoot;  				//remove any parts of the path excluded by regex  				RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  				if (newPath == "" && isHomePage) {  					//956 : recheck the test for the homePagebeing a site root Url  					homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  					hasPath = (newPath != "");  					if (homePageSiteRoot) {  						//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  						//then re-get the home page Url with no params (hasPath=false)  						//done like this to re-run all rules relating the url  						newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  					}  				}  				//check for parameter regex replacement   				string changedPath;  				bool allowOtherParameters;  				if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  					messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  					newPath = changedPath;  				}  				//transform is ctl/privacy' ctl/login etc  				bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  				//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  				//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  				if (!string.IsNullOrEmpty (customHttpAlias)) {  					httpAlias = customHttpAlias;  					messages.Add ("Uses page-specific alias: " + customHttpAlias);  				}  				if (allowOtherParameters) {  					//738 : check for transformation by module specific provider  					//894 : allow module providers to be disabled  					bool customModuleUrl = false;  					if (settings.EnableCustomProviders) {  						customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  					}  					//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  					if (!customModuleUrl) {  						if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  							newPath = changedPath;  						}  					} else {  						//update path value with custom Url returned from module provider(s)  						newPath = changedPath;  					}  				}  				//start constructing the url  				//get the page and extension  				//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  				//because it's treated like a site root (quasi home page if you like)  				string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  				//prepend querystring qualifier if necessary                              				qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  				//string it all together  				if (!dropLangParms) {  					//871 : case insensitive culture comparisons  					//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  					dropLangParms = isDefaultLanguage || cultureSpecificAlias;  					// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   				}  				string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  				//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  				finalPath = AumDebugRegex.Replace (finalPath' "");  				//'and we're done!   				if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  					result = Globals.AddHTTP (finalPath);  				}  			}  		} else {  			var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			if ((re.IsMatch (friendlyPath))) {  				Match sesMatch = re.Match (friendlyPath);  				if ((sesMatch.Groups.Count > 2)) {  					switch (sesMatch.Groups [2].Value.ToLower ()) {  					case "terms":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "privacy":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "login":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "register":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					default:  						result = friendlyPath;  						break;  					}  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((settings.UrlFormat.ToLower () == "advanced" || customOnly) && !RewriteController.IsExcludedFromFriendlyUrls (tab' settings' false)) {  	string newTabPath;  	string customHttpAlias;  	bool isHomePage = TabPathHelper.IsTabHomePage (tab' portalSettings);  	//do a regex check on the base friendly Path' to see if there is parameters on the end or not  	var tabOnlyRegex = RegexUtils.GetCachedRegex ("[^?]*/tabId/(?<tabid>\\d+)/" + pageName + "($|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	if (tabOnlyRegex.IsMatch (friendlyPath)) {  		MatchCollection tabOnlyMatches = tabOnlyRegex.Matches (friendlyPath);  		string qs = "";  		if (tabOnlyMatches.Count > 0) {  			Match rgxMatch = tabOnlyMatches [0];  			if (rgxMatch.Groups ["qs"] != null && rgxMatch.Groups ["qs"].Success) {  				qs = "?" + rgxMatch.Groups ["qs"].Value;  			}  		}  		bool dropLangParms;  		//736: observe the culture code of the tab  		string cultureCode = tab.CultureCode;  		bool isDefaultLanguage = false;  		if (cultureCode == "") {  			cultureCode = portalSettings.DefaultLanguage;  			isDefaultLanguage = true;  			//751 when using the default culture code' the redirect doesn't need an explicit language  		}  		bool isCustomUrl;  		newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' true' isHomePage' cultureCode' isDefaultLanguage' false' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  		//770 : custom http alias found' merge into overall result  		if (!string.IsNullOrEmpty (customHttpAlias)) {  			httpAlias = customHttpAlias;  			messages.Add ("Uses page-specific alias: " + customHttpAlias);  		}  		//it is a straight page.aspx reference' with just the tabid to specify parameters' so get the extension that should be used (no pagename is used by design)  		string extension = customHttpAlias != null && newTabPath == "" ? "" : DetermineExtension (isHomePage' pageName' settings);  		if (customOnly && isCustomUrl || customOnly == false) {  			result = Globals.AddHTTP (httpAlias + "/" + newTabPath.TrimStart ('/') + extension) + qs;  		}  	} else {  		//When the home page is requested with a querystring value' the path for the home page is included.  This is because path items without the home page   		//qualifier are incorrectly checked for as dnn pages' and will result in a 404.  Ie domain.com/key/value will fail looking for a DNN path called 'key/value'.  		//This gets around the problem because it places the path aas /home/key/value - which correctly identifies the tab as '/Home' and the key/value parameters as  		// &key=value.  		//there are parameters on the base friendly url path' so split them off and process separately  		//this regex splits the incoming friendly path pagename/tabid/56/default.aspx into the non-tabid path' and individual parms for each /parm/ in the friendly path   		//550 : add in \. to allow '.' in the parameter path.  		//667 : allow non-word characters (specifically %) in the path  		var rgx = RegexUtils.GetCachedRegex ("[^?]*(?<tabs>/tabId/(?<tabid>\\d+))(?<path>(?<parms>(?:(?:/[^/?]+){1})+))(?:/" + pageName + ")(?:$|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		MatchCollection matches = rgx.Matches (friendlyPath);  		if (matches.Count > 0) {  			//it is a friendly url with other parameters in it   			//format it up with the parameters in the end' keeping the same page name   			//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   			Match rgxMatch = matches [0];  			bool hasParms = false;  			string cultureCode = null;  			string defaultCode = null;  			const string newPageName = "";  			string newPath = "";  			string qs = "";  			string langParms = "";  			//check we matched on some parms in the path   			if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  				if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  					hasParms = true;  					newPath = rgxMatch.Groups ["path"].Value;  					qs = rgxMatch.Groups ["qs"].Value;  					Match langMatch = LangMatchRegex.Match (newPath);  					if (langMatch.Success) {  						//a language specifier parameter is in the string  						//this is always the last parameter in the list' which  						//gives nasty pagename results' so shift the language query to before the page name  						// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  						// we really want language/en-us/home.aspx  						langParms = langMatch.Value;  						langParms = langParms.TrimEnd ('/');  						newPath = newPath.Replace (langParms' "");  						cultureCode = langMatch.Groups ["code"].Value;  						//obtain the culture code for this language   						defaultCode = portalSettings.DefaultLanguage;  					} else {  						//no language settings' use default  						cultureCode = portalSettings.DefaultLanguage;  						defaultCode = cultureCode;  					}  				}  			}  			bool dropLangParms;  			//determine if we allow the home page to be shown as the site root.  This is if :  			//cultureCode = default culture' newPath is blank after removing languageParms  			//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  			bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  			bool hasPath = (newPath != "");  			//871 : case insensitive comparison for culture  			bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  			bool isCustomUrl;  			newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  			if (hasParms) {  				bool changeToSiteRoot;  				//remove any parts of the path excluded by regex  				RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  				if (newPath == "" && isHomePage) {  					//956 : recheck the test for the homePagebeing a site root Url  					homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  					hasPath = (newPath != "");  					if (homePageSiteRoot) {  						//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  						//then re-get the home page Url with no params (hasPath=false)  						//done like this to re-run all rules relating the url  						newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  					}  				}  				//check for parameter regex replacement   				string changedPath;  				bool allowOtherParameters;  				if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  					messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  					newPath = changedPath;  				}  				//transform is ctl/privacy' ctl/login etc  				bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  				//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  				//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  				if (!string.IsNullOrEmpty (customHttpAlias)) {  					httpAlias = customHttpAlias;  					messages.Add ("Uses page-specific alias: " + customHttpAlias);  				}  				if (allowOtherParameters) {  					//738 : check for transformation by module specific provider  					//894 : allow module providers to be disabled  					bool customModuleUrl = false;  					if (settings.EnableCustomProviders) {  						customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  					}  					//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  					if (!customModuleUrl) {  						if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  							newPath = changedPath;  						}  					} else {  						//update path value with custom Url returned from module provider(s)  						newPath = changedPath;  					}  				}  				//start constructing the url  				//get the page and extension  				//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  				//because it's treated like a site root (quasi home page if you like)  				string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  				//prepend querystring qualifier if necessary                              				qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  				//string it all together  				if (!dropLangParms) {  					//871 : case insensitive culture comparisons  					//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  					dropLangParms = isDefaultLanguage || cultureSpecificAlias;  					// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   				}  				string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  				//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  				finalPath = AumDebugRegex.Replace (finalPath' "");  				//'and we're done!   				if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  					result = Globals.AddHTTP (finalPath);  				}  			}  		} else {  			var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			if ((re.IsMatch (friendlyPath))) {  				Match sesMatch = re.Match (friendlyPath);  				if ((sesMatch.Groups.Count > 2)) {  					switch (sesMatch.Groups [2].Value.ToLower ()) {  					case "terms":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "privacy":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "login":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					case "register":  						result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  						break;  					default:  						result = friendlyPath;  						break;  					}  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if (tabOnlyRegex.IsMatch (friendlyPath)) {  	MatchCollection tabOnlyMatches = tabOnlyRegex.Matches (friendlyPath);  	string qs = "";  	if (tabOnlyMatches.Count > 0) {  		Match rgxMatch = tabOnlyMatches [0];  		if (rgxMatch.Groups ["qs"] != null && rgxMatch.Groups ["qs"].Success) {  			qs = "?" + rgxMatch.Groups ["qs"].Value;  		}  	}  	bool dropLangParms;  	//736: observe the culture code of the tab  	string cultureCode = tab.CultureCode;  	bool isDefaultLanguage = false;  	if (cultureCode == "") {  		cultureCode = portalSettings.DefaultLanguage;  		isDefaultLanguage = true;  		//751 when using the default culture code' the redirect doesn't need an explicit language  	}  	bool isCustomUrl;  	newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' true' isHomePage' cultureCode' isDefaultLanguage' false' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  	//770 : custom http alias found' merge into overall result  	if (!string.IsNullOrEmpty (customHttpAlias)) {  		httpAlias = customHttpAlias;  		messages.Add ("Uses page-specific alias: " + customHttpAlias);  	}  	//it is a straight page.aspx reference' with just the tabid to specify parameters' so get the extension that should be used (no pagename is used by design)  	string extension = customHttpAlias != null && newTabPath == "" ? "" : DetermineExtension (isHomePage' pageName' settings);  	if (customOnly && isCustomUrl || customOnly == false) {  		result = Globals.AddHTTP (httpAlias + "/" + newTabPath.TrimStart ('/') + extension) + qs;  	}  } else {  	//When the home page is requested with a querystring value' the path for the home page is included.  This is because path items without the home page   	//qualifier are incorrectly checked for as dnn pages' and will result in a 404.  Ie domain.com/key/value will fail looking for a DNN path called 'key/value'.  	//This gets around the problem because it places the path aas /home/key/value - which correctly identifies the tab as '/Home' and the key/value parameters as  	// &key=value.  	//there are parameters on the base friendly url path' so split them off and process separately  	//this regex splits the incoming friendly path pagename/tabid/56/default.aspx into the non-tabid path' and individual parms for each /parm/ in the friendly path   	//550 : add in \. to allow '.' in the parameter path.  	//667 : allow non-word characters (specifically %) in the path  	var rgx = RegexUtils.GetCachedRegex ("[^?]*(?<tabs>/tabId/(?<tabid>\\d+))(?<path>(?<parms>(?:(?:/[^/?]+){1})+))(?:/" + pageName + ")(?:$|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	MatchCollection matches = rgx.Matches (friendlyPath);  	if (matches.Count > 0) {  		//it is a friendly url with other parameters in it   		//format it up with the parameters in the end' keeping the same page name   		//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   		Match rgxMatch = matches [0];  		bool hasParms = false;  		string cultureCode = null;  		string defaultCode = null;  		const string newPageName = "";  		string newPath = "";  		string qs = "";  		string langParms = "";  		//check we matched on some parms in the path   		if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  			if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  				hasParms = true;  				newPath = rgxMatch.Groups ["path"].Value;  				qs = rgxMatch.Groups ["qs"].Value;  				Match langMatch = LangMatchRegex.Match (newPath);  				if (langMatch.Success) {  					//a language specifier parameter is in the string  					//this is always the last parameter in the list' which  					//gives nasty pagename results' so shift the language query to before the page name  					// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  					// we really want language/en-us/home.aspx  					langParms = langMatch.Value;  					langParms = langParms.TrimEnd ('/');  					newPath = newPath.Replace (langParms' "");  					cultureCode = langMatch.Groups ["code"].Value;  					//obtain the culture code for this language   					defaultCode = portalSettings.DefaultLanguage;  				} else {  					//no language settings' use default  					cultureCode = portalSettings.DefaultLanguage;  					defaultCode = cultureCode;  				}  			}  		}  		bool dropLangParms;  		//determine if we allow the home page to be shown as the site root.  This is if :  		//cultureCode = default culture' newPath is blank after removing languageParms  		//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  		bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  		bool hasPath = (newPath != "");  		//871 : case insensitive comparison for culture  		bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  		bool isCustomUrl;  		newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  		if (hasParms) {  			bool changeToSiteRoot;  			//remove any parts of the path excluded by regex  			RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  			if (newPath == "" && isHomePage) {  				//956 : recheck the test for the homePagebeing a site root Url  				homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  				hasPath = (newPath != "");  				if (homePageSiteRoot) {  					//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  					//then re-get the home page Url with no params (hasPath=false)  					//done like this to re-run all rules relating the url  					newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  				}  			}  			//check for parameter regex replacement   			string changedPath;  			bool allowOtherParameters;  			if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  				messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  				newPath = changedPath;  			}  			//transform is ctl/privacy' ctl/login etc  			bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  			//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  			//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  			if (!string.IsNullOrEmpty (customHttpAlias)) {  				httpAlias = customHttpAlias;  				messages.Add ("Uses page-specific alias: " + customHttpAlias);  			}  			if (allowOtherParameters) {  				//738 : check for transformation by module specific provider  				//894 : allow module providers to be disabled  				bool customModuleUrl = false;  				if (settings.EnableCustomProviders) {  					customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  				}  				//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  				if (!customModuleUrl) {  					if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  						newPath = changedPath;  					}  				} else {  					//update path value with custom Url returned from module provider(s)  					newPath = changedPath;  				}  			}  			//start constructing the url  			//get the page and extension  			//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  			//because it's treated like a site root (quasi home page if you like)  			string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  			//prepend querystring qualifier if necessary                              			qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  			//string it all together  			if (!dropLangParms) {  				//871 : case insensitive culture comparisons  				//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  				dropLangParms = isDefaultLanguage || cultureSpecificAlias;  				// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   			}  			string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  			//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  			finalPath = AumDebugRegex.Replace (finalPath' "");  			//'and we're done!   			if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  				result = Globals.AddHTTP (finalPath);  			}  		}  	} else {  		var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		if ((re.IsMatch (friendlyPath))) {  			Match sesMatch = re.Match (friendlyPath);  			if ((sesMatch.Groups.Count > 2)) {  				switch (sesMatch.Groups [2].Value.ToLower ()) {  				case "terms":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "privacy":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "login":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "register":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				default:  					result = friendlyPath;  					break;  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if (tabOnlyRegex.IsMatch (friendlyPath)) {  	MatchCollection tabOnlyMatches = tabOnlyRegex.Matches (friendlyPath);  	string qs = "";  	if (tabOnlyMatches.Count > 0) {  		Match rgxMatch = tabOnlyMatches [0];  		if (rgxMatch.Groups ["qs"] != null && rgxMatch.Groups ["qs"].Success) {  			qs = "?" + rgxMatch.Groups ["qs"].Value;  		}  	}  	bool dropLangParms;  	//736: observe the culture code of the tab  	string cultureCode = tab.CultureCode;  	bool isDefaultLanguage = false;  	if (cultureCode == "") {  		cultureCode = portalSettings.DefaultLanguage;  		isDefaultLanguage = true;  		//751 when using the default culture code' the redirect doesn't need an explicit language  	}  	bool isCustomUrl;  	newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' true' isHomePage' cultureCode' isDefaultLanguage' false' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  	//770 : custom http alias found' merge into overall result  	if (!string.IsNullOrEmpty (customHttpAlias)) {  		httpAlias = customHttpAlias;  		messages.Add ("Uses page-specific alias: " + customHttpAlias);  	}  	//it is a straight page.aspx reference' with just the tabid to specify parameters' so get the extension that should be used (no pagename is used by design)  	string extension = customHttpAlias != null && newTabPath == "" ? "" : DetermineExtension (isHomePage' pageName' settings);  	if (customOnly && isCustomUrl || customOnly == false) {  		result = Globals.AddHTTP (httpAlias + "/" + newTabPath.TrimStart ('/') + extension) + qs;  	}  } else {  	//When the home page is requested with a querystring value' the path for the home page is included.  This is because path items without the home page   	//qualifier are incorrectly checked for as dnn pages' and will result in a 404.  Ie domain.com/key/value will fail looking for a DNN path called 'key/value'.  	//This gets around the problem because it places the path aas /home/key/value - which correctly identifies the tab as '/Home' and the key/value parameters as  	// &key=value.  	//there are parameters on the base friendly url path' so split them off and process separately  	//this regex splits the incoming friendly path pagename/tabid/56/default.aspx into the non-tabid path' and individual parms for each /parm/ in the friendly path   	//550 : add in \. to allow '.' in the parameter path.  	//667 : allow non-word characters (specifically %) in the path  	var rgx = RegexUtils.GetCachedRegex ("[^?]*(?<tabs>/tabId/(?<tabid>\\d+))(?<path>(?<parms>(?:(?:/[^/?]+){1})+))(?:/" + pageName + ")(?:$|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	MatchCollection matches = rgx.Matches (friendlyPath);  	if (matches.Count > 0) {  		//it is a friendly url with other parameters in it   		//format it up with the parameters in the end' keeping the same page name   		//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   		Match rgxMatch = matches [0];  		bool hasParms = false;  		string cultureCode = null;  		string defaultCode = null;  		const string newPageName = "";  		string newPath = "";  		string qs = "";  		string langParms = "";  		//check we matched on some parms in the path   		if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  			if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  				hasParms = true;  				newPath = rgxMatch.Groups ["path"].Value;  				qs = rgxMatch.Groups ["qs"].Value;  				Match langMatch = LangMatchRegex.Match (newPath);  				if (langMatch.Success) {  					//a language specifier parameter is in the string  					//this is always the last parameter in the list' which  					//gives nasty pagename results' so shift the language query to before the page name  					// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  					// we really want language/en-us/home.aspx  					langParms = langMatch.Value;  					langParms = langParms.TrimEnd ('/');  					newPath = newPath.Replace (langParms' "");  					cultureCode = langMatch.Groups ["code"].Value;  					//obtain the culture code for this language   					defaultCode = portalSettings.DefaultLanguage;  				} else {  					//no language settings' use default  					cultureCode = portalSettings.DefaultLanguage;  					defaultCode = cultureCode;  				}  			}  		}  		bool dropLangParms;  		//determine if we allow the home page to be shown as the site root.  This is if :  		//cultureCode = default culture' newPath is blank after removing languageParms  		//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  		bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  		bool hasPath = (newPath != "");  		//871 : case insensitive comparison for culture  		bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  		bool isCustomUrl;  		newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  		if (hasParms) {  			bool changeToSiteRoot;  			//remove any parts of the path excluded by regex  			RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  			if (newPath == "" && isHomePage) {  				//956 : recheck the test for the homePagebeing a site root Url  				homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  				hasPath = (newPath != "");  				if (homePageSiteRoot) {  					//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  					//then re-get the home page Url with no params (hasPath=false)  					//done like this to re-run all rules relating the url  					newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  				}  			}  			//check for parameter regex replacement   			string changedPath;  			bool allowOtherParameters;  			if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  				messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  				newPath = changedPath;  			}  			//transform is ctl/privacy' ctl/login etc  			bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  			//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  			//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  			if (!string.IsNullOrEmpty (customHttpAlias)) {  				httpAlias = customHttpAlias;  				messages.Add ("Uses page-specific alias: " + customHttpAlias);  			}  			if (allowOtherParameters) {  				//738 : check for transformation by module specific provider  				//894 : allow module providers to be disabled  				bool customModuleUrl = false;  				if (settings.EnableCustomProviders) {  					customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  				}  				//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  				if (!customModuleUrl) {  					if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  						newPath = changedPath;  					}  				} else {  					//update path value with custom Url returned from module provider(s)  					newPath = changedPath;  				}  			}  			//start constructing the url  			//get the page and extension  			//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  			//because it's treated like a site root (quasi home page if you like)  			string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  			//prepend querystring qualifier if necessary                              			qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  			//string it all together  			if (!dropLangParms) {  				//871 : case insensitive culture comparisons  				//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  				dropLangParms = isDefaultLanguage || cultureSpecificAlias;  				// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   			}  			string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  			//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  			finalPath = AumDebugRegex.Replace (finalPath' "");  			//'and we're done!   			if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  				result = Globals.AddHTTP (finalPath);  			}  		}  	} else {  		var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		if ((re.IsMatch (friendlyPath))) {  			Match sesMatch = re.Match (friendlyPath);  			if ((sesMatch.Groups.Count > 2)) {  				switch (sesMatch.Groups [2].Value.ToLower ()) {  				case "terms":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "privacy":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "login":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "register":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				default:  					result = friendlyPath;  					break;  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if (tabOnlyRegex.IsMatch (friendlyPath)) {  	MatchCollection tabOnlyMatches = tabOnlyRegex.Matches (friendlyPath);  	string qs = "";  	if (tabOnlyMatches.Count > 0) {  		Match rgxMatch = tabOnlyMatches [0];  		if (rgxMatch.Groups ["qs"] != null && rgxMatch.Groups ["qs"].Success) {  			qs = "?" + rgxMatch.Groups ["qs"].Value;  		}  	}  	bool dropLangParms;  	//736: observe the culture code of the tab  	string cultureCode = tab.CultureCode;  	bool isDefaultLanguage = false;  	if (cultureCode == "") {  		cultureCode = portalSettings.DefaultLanguage;  		isDefaultLanguage = true;  		//751 when using the default culture code' the redirect doesn't need an explicit language  	}  	bool isCustomUrl;  	newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' true' isHomePage' cultureCode' isDefaultLanguage' false' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  	//770 : custom http alias found' merge into overall result  	if (!string.IsNullOrEmpty (customHttpAlias)) {  		httpAlias = customHttpAlias;  		messages.Add ("Uses page-specific alias: " + customHttpAlias);  	}  	//it is a straight page.aspx reference' with just the tabid to specify parameters' so get the extension that should be used (no pagename is used by design)  	string extension = customHttpAlias != null && newTabPath == "" ? "" : DetermineExtension (isHomePage' pageName' settings);  	if (customOnly && isCustomUrl || customOnly == false) {  		result = Globals.AddHTTP (httpAlias + "/" + newTabPath.TrimStart ('/') + extension) + qs;  	}  } else {  	//When the home page is requested with a querystring value' the path for the home page is included.  This is because path items without the home page   	//qualifier are incorrectly checked for as dnn pages' and will result in a 404.  Ie domain.com/key/value will fail looking for a DNN path called 'key/value'.  	//This gets around the problem because it places the path aas /home/key/value - which correctly identifies the tab as '/Home' and the key/value parameters as  	// &key=value.  	//there are parameters on the base friendly url path' so split them off and process separately  	//this regex splits the incoming friendly path pagename/tabid/56/default.aspx into the non-tabid path' and individual parms for each /parm/ in the friendly path   	//550 : add in \. to allow '.' in the parameter path.  	//667 : allow non-word characters (specifically %) in the path  	var rgx = RegexUtils.GetCachedRegex ("[^?]*(?<tabs>/tabId/(?<tabid>\\d+))(?<path>(?<parms>(?:(?:/[^/?]+){1})+))(?:/" + pageName + ")(?:$|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	MatchCollection matches = rgx.Matches (friendlyPath);  	if (matches.Count > 0) {  		//it is a friendly url with other parameters in it   		//format it up with the parameters in the end' keeping the same page name   		//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   		Match rgxMatch = matches [0];  		bool hasParms = false;  		string cultureCode = null;  		string defaultCode = null;  		const string newPageName = "";  		string newPath = "";  		string qs = "";  		string langParms = "";  		//check we matched on some parms in the path   		if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  			if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  				hasParms = true;  				newPath = rgxMatch.Groups ["path"].Value;  				qs = rgxMatch.Groups ["qs"].Value;  				Match langMatch = LangMatchRegex.Match (newPath);  				if (langMatch.Success) {  					//a language specifier parameter is in the string  					//this is always the last parameter in the list' which  					//gives nasty pagename results' so shift the language query to before the page name  					// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  					// we really want language/en-us/home.aspx  					langParms = langMatch.Value;  					langParms = langParms.TrimEnd ('/');  					newPath = newPath.Replace (langParms' "");  					cultureCode = langMatch.Groups ["code"].Value;  					//obtain the culture code for this language   					defaultCode = portalSettings.DefaultLanguage;  				} else {  					//no language settings' use default  					cultureCode = portalSettings.DefaultLanguage;  					defaultCode = cultureCode;  				}  			}  		}  		bool dropLangParms;  		//determine if we allow the home page to be shown as the site root.  This is if :  		//cultureCode = default culture' newPath is blank after removing languageParms  		//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  		bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  		bool hasPath = (newPath != "");  		//871 : case insensitive comparison for culture  		bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  		bool isCustomUrl;  		newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  		if (hasParms) {  			bool changeToSiteRoot;  			//remove any parts of the path excluded by regex  			RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  			if (newPath == "" && isHomePage) {  				//956 : recheck the test for the homePagebeing a site root Url  				homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  				hasPath = (newPath != "");  				if (homePageSiteRoot) {  					//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  					//then re-get the home page Url with no params (hasPath=false)  					//done like this to re-run all rules relating the url  					newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  				}  			}  			//check for parameter regex replacement   			string changedPath;  			bool allowOtherParameters;  			if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  				messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  				newPath = changedPath;  			}  			//transform is ctl/privacy' ctl/login etc  			bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  			//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  			//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  			if (!string.IsNullOrEmpty (customHttpAlias)) {  				httpAlias = customHttpAlias;  				messages.Add ("Uses page-specific alias: " + customHttpAlias);  			}  			if (allowOtherParameters) {  				//738 : check for transformation by module specific provider  				//894 : allow module providers to be disabled  				bool customModuleUrl = false;  				if (settings.EnableCustomProviders) {  					customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  				}  				//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  				if (!customModuleUrl) {  					if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  						newPath = changedPath;  					}  				} else {  					//update path value with custom Url returned from module provider(s)  					newPath = changedPath;  				}  			}  			//start constructing the url  			//get the page and extension  			//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  			//because it's treated like a site root (quasi home page if you like)  			string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  			//prepend querystring qualifier if necessary                              			qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  			//string it all together  			if (!dropLangParms) {  				//871 : case insensitive culture comparisons  				//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  				dropLangParms = isDefaultLanguage || cultureSpecificAlias;  				// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   			}  			string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  			//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  			finalPath = AumDebugRegex.Replace (finalPath' "");  			//'and we're done!   			if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  				result = Globals.AddHTTP (finalPath);  			}  		}  	} else {  		var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		if ((re.IsMatch (friendlyPath))) {  			Match sesMatch = re.Match (friendlyPath);  			if ((sesMatch.Groups.Count > 2)) {  				switch (sesMatch.Groups [2].Value.ToLower ()) {  				case "terms":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "privacy":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "login":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "register":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				default:  					result = friendlyPath;  					break;  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if (tabOnlyRegex.IsMatch (friendlyPath)) {  	MatchCollection tabOnlyMatches = tabOnlyRegex.Matches (friendlyPath);  	string qs = "";  	if (tabOnlyMatches.Count > 0) {  		Match rgxMatch = tabOnlyMatches [0];  		if (rgxMatch.Groups ["qs"] != null && rgxMatch.Groups ["qs"].Success) {  			qs = "?" + rgxMatch.Groups ["qs"].Value;  		}  	}  	bool dropLangParms;  	//736: observe the culture code of the tab  	string cultureCode = tab.CultureCode;  	bool isDefaultLanguage = false;  	if (cultureCode == "") {  		cultureCode = portalSettings.DefaultLanguage;  		isDefaultLanguage = true;  		//751 when using the default culture code' the redirect doesn't need an explicit language  	}  	bool isCustomUrl;  	newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' true' isHomePage' cultureCode' isDefaultLanguage' false' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  	//770 : custom http alias found' merge into overall result  	if (!string.IsNullOrEmpty (customHttpAlias)) {  		httpAlias = customHttpAlias;  		messages.Add ("Uses page-specific alias: " + customHttpAlias);  	}  	//it is a straight page.aspx reference' with just the tabid to specify parameters' so get the extension that should be used (no pagename is used by design)  	string extension = customHttpAlias != null && newTabPath == "" ? "" : DetermineExtension (isHomePage' pageName' settings);  	if (customOnly && isCustomUrl || customOnly == false) {  		result = Globals.AddHTTP (httpAlias + "/" + newTabPath.TrimStart ('/') + extension) + qs;  	}  } else {  	//When the home page is requested with a querystring value' the path for the home page is included.  This is because path items without the home page   	//qualifier are incorrectly checked for as dnn pages' and will result in a 404.  Ie domain.com/key/value will fail looking for a DNN path called 'key/value'.  	//This gets around the problem because it places the path aas /home/key/value - which correctly identifies the tab as '/Home' and the key/value parameters as  	// &key=value.  	//there are parameters on the base friendly url path' so split them off and process separately  	//this regex splits the incoming friendly path pagename/tabid/56/default.aspx into the non-tabid path' and individual parms for each /parm/ in the friendly path   	//550 : add in \. to allow '.' in the parameter path.  	//667 : allow non-word characters (specifically %) in the path  	var rgx = RegexUtils.GetCachedRegex ("[^?]*(?<tabs>/tabId/(?<tabid>\\d+))(?<path>(?<parms>(?:(?:/[^/?]+){1})+))(?:/" + pageName + ")(?:$|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	MatchCollection matches = rgx.Matches (friendlyPath);  	if (matches.Count > 0) {  		//it is a friendly url with other parameters in it   		//format it up with the parameters in the end' keeping the same page name   		//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   		Match rgxMatch = matches [0];  		bool hasParms = false;  		string cultureCode = null;  		string defaultCode = null;  		const string newPageName = "";  		string newPath = "";  		string qs = "";  		string langParms = "";  		//check we matched on some parms in the path   		if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  			if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  				hasParms = true;  				newPath = rgxMatch.Groups ["path"].Value;  				qs = rgxMatch.Groups ["qs"].Value;  				Match langMatch = LangMatchRegex.Match (newPath);  				if (langMatch.Success) {  					//a language specifier parameter is in the string  					//this is always the last parameter in the list' which  					//gives nasty pagename results' so shift the language query to before the page name  					// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  					// we really want language/en-us/home.aspx  					langParms = langMatch.Value;  					langParms = langParms.TrimEnd ('/');  					newPath = newPath.Replace (langParms' "");  					cultureCode = langMatch.Groups ["code"].Value;  					//obtain the culture code for this language   					defaultCode = portalSettings.DefaultLanguage;  				} else {  					//no language settings' use default  					cultureCode = portalSettings.DefaultLanguage;  					defaultCode = cultureCode;  				}  			}  		}  		bool dropLangParms;  		//determine if we allow the home page to be shown as the site root.  This is if :  		//cultureCode = default culture' newPath is blank after removing languageParms  		//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  		bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  		bool hasPath = (newPath != "");  		//871 : case insensitive comparison for culture  		bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  		bool isCustomUrl;  		newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  		if (hasParms) {  			bool changeToSiteRoot;  			//remove any parts of the path excluded by regex  			RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  			if (newPath == "" && isHomePage) {  				//956 : recheck the test for the homePagebeing a site root Url  				homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  				hasPath = (newPath != "");  				if (homePageSiteRoot) {  					//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  					//then re-get the home page Url with no params (hasPath=false)  					//done like this to re-run all rules relating the url  					newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  				}  			}  			//check for parameter regex replacement   			string changedPath;  			bool allowOtherParameters;  			if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  				messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  				newPath = changedPath;  			}  			//transform is ctl/privacy' ctl/login etc  			bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  			//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  			//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  			if (!string.IsNullOrEmpty (customHttpAlias)) {  				httpAlias = customHttpAlias;  				messages.Add ("Uses page-specific alias: " + customHttpAlias);  			}  			if (allowOtherParameters) {  				//738 : check for transformation by module specific provider  				//894 : allow module providers to be disabled  				bool customModuleUrl = false;  				if (settings.EnableCustomProviders) {  					customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  				}  				//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  				if (!customModuleUrl) {  					if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  						newPath = changedPath;  					}  				} else {  					//update path value with custom Url returned from module provider(s)  					newPath = changedPath;  				}  			}  			//start constructing the url  			//get the page and extension  			//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  			//because it's treated like a site root (quasi home page if you like)  			string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  			//prepend querystring qualifier if necessary                              			qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  			//string it all together  			if (!dropLangParms) {  				//871 : case insensitive culture comparisons  				//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  				dropLangParms = isDefaultLanguage || cultureSpecificAlias;  				// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   			}  			string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  			//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  			finalPath = AumDebugRegex.Replace (finalPath' "");  			//'and we're done!   			if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  				result = Globals.AddHTTP (finalPath);  			}  		}  	} else {  		var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		if ((re.IsMatch (friendlyPath))) {  			Match sesMatch = re.Match (friendlyPath);  			if ((sesMatch.Groups.Count > 2)) {  				switch (sesMatch.Groups [2].Value.ToLower ()) {  				case "terms":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "privacy":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "login":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "register":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				default:  					result = friendlyPath;  					break;  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if (tabOnlyRegex.IsMatch (friendlyPath)) {  	MatchCollection tabOnlyMatches = tabOnlyRegex.Matches (friendlyPath);  	string qs = "";  	if (tabOnlyMatches.Count > 0) {  		Match rgxMatch = tabOnlyMatches [0];  		if (rgxMatch.Groups ["qs"] != null && rgxMatch.Groups ["qs"].Success) {  			qs = "?" + rgxMatch.Groups ["qs"].Value;  		}  	}  	bool dropLangParms;  	//736: observe the culture code of the tab  	string cultureCode = tab.CultureCode;  	bool isDefaultLanguage = false;  	if (cultureCode == "") {  		cultureCode = portalSettings.DefaultLanguage;  		isDefaultLanguage = true;  		//751 when using the default culture code' the redirect doesn't need an explicit language  	}  	bool isCustomUrl;  	newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' true' isHomePage' cultureCode' isDefaultLanguage' false' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  	//770 : custom http alias found' merge into overall result  	if (!string.IsNullOrEmpty (customHttpAlias)) {  		httpAlias = customHttpAlias;  		messages.Add ("Uses page-specific alias: " + customHttpAlias);  	}  	//it is a straight page.aspx reference' with just the tabid to specify parameters' so get the extension that should be used (no pagename is used by design)  	string extension = customHttpAlias != null && newTabPath == "" ? "" : DetermineExtension (isHomePage' pageName' settings);  	if (customOnly && isCustomUrl || customOnly == false) {  		result = Globals.AddHTTP (httpAlias + "/" + newTabPath.TrimStart ('/') + extension) + qs;  	}  } else {  	//When the home page is requested with a querystring value' the path for the home page is included.  This is because path items without the home page   	//qualifier are incorrectly checked for as dnn pages' and will result in a 404.  Ie domain.com/key/value will fail looking for a DNN path called 'key/value'.  	//This gets around the problem because it places the path aas /home/key/value - which correctly identifies the tab as '/Home' and the key/value parameters as  	// &key=value.  	//there are parameters on the base friendly url path' so split them off and process separately  	//this regex splits the incoming friendly path pagename/tabid/56/default.aspx into the non-tabid path' and individual parms for each /parm/ in the friendly path   	//550 : add in \. to allow '.' in the parameter path.  	//667 : allow non-word characters (specifically %) in the path  	var rgx = RegexUtils.GetCachedRegex ("[^?]*(?<tabs>/tabId/(?<tabid>\\d+))(?<path>(?<parms>(?:(?:/[^/?]+){1})+))(?:/" + pageName + ")(?:$|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	MatchCollection matches = rgx.Matches (friendlyPath);  	if (matches.Count > 0) {  		//it is a friendly url with other parameters in it   		//format it up with the parameters in the end' keeping the same page name   		//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   		Match rgxMatch = matches [0];  		bool hasParms = false;  		string cultureCode = null;  		string defaultCode = null;  		const string newPageName = "";  		string newPath = "";  		string qs = "";  		string langParms = "";  		//check we matched on some parms in the path   		if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  			if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  				hasParms = true;  				newPath = rgxMatch.Groups ["path"].Value;  				qs = rgxMatch.Groups ["qs"].Value;  				Match langMatch = LangMatchRegex.Match (newPath);  				if (langMatch.Success) {  					//a language specifier parameter is in the string  					//this is always the last parameter in the list' which  					//gives nasty pagename results' so shift the language query to before the page name  					// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  					// we really want language/en-us/home.aspx  					langParms = langMatch.Value;  					langParms = langParms.TrimEnd ('/');  					newPath = newPath.Replace (langParms' "");  					cultureCode = langMatch.Groups ["code"].Value;  					//obtain the culture code for this language   					defaultCode = portalSettings.DefaultLanguage;  				} else {  					//no language settings' use default  					cultureCode = portalSettings.DefaultLanguage;  					defaultCode = cultureCode;  				}  			}  		}  		bool dropLangParms;  		//determine if we allow the home page to be shown as the site root.  This is if :  		//cultureCode = default culture' newPath is blank after removing languageParms  		//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  		bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  		bool hasPath = (newPath != "");  		//871 : case insensitive comparison for culture  		bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  		bool isCustomUrl;  		newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  		if (hasParms) {  			bool changeToSiteRoot;  			//remove any parts of the path excluded by regex  			RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  			if (newPath == "" && isHomePage) {  				//956 : recheck the test for the homePagebeing a site root Url  				homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  				hasPath = (newPath != "");  				if (homePageSiteRoot) {  					//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  					//then re-get the home page Url with no params (hasPath=false)  					//done like this to re-run all rules relating the url  					newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  				}  			}  			//check for parameter regex replacement   			string changedPath;  			bool allowOtherParameters;  			if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  				messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  				newPath = changedPath;  			}  			//transform is ctl/privacy' ctl/login etc  			bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  			//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  			//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  			if (!string.IsNullOrEmpty (customHttpAlias)) {  				httpAlias = customHttpAlias;  				messages.Add ("Uses page-specific alias: " + customHttpAlias);  			}  			if (allowOtherParameters) {  				//738 : check for transformation by module specific provider  				//894 : allow module providers to be disabled  				bool customModuleUrl = false;  				if (settings.EnableCustomProviders) {  					customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  				}  				//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  				if (!customModuleUrl) {  					if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  						newPath = changedPath;  					}  				} else {  					//update path value with custom Url returned from module provider(s)  					newPath = changedPath;  				}  			}  			//start constructing the url  			//get the page and extension  			//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  			//because it's treated like a site root (quasi home page if you like)  			string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  			//prepend querystring qualifier if necessary                              			qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  			//string it all together  			if (!dropLangParms) {  				//871 : case insensitive culture comparisons  				//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  				dropLangParms = isDefaultLanguage || cultureSpecificAlias;  				// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   			}  			string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  			//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  			finalPath = AumDebugRegex.Replace (finalPath' "");  			//'and we're done!   			if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  				result = Globals.AddHTTP (finalPath);  			}  		}  	} else {  		var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		if ((re.IsMatch (friendlyPath))) {  			Match sesMatch = re.Match (friendlyPath);  			if ((sesMatch.Groups.Count > 2)) {  				switch (sesMatch.Groups [2].Value.ToLower ()) {  				case "terms":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "privacy":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "login":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "register":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				default:  					result = friendlyPath;  					break;  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if (tabOnlyRegex.IsMatch (friendlyPath)) {  	MatchCollection tabOnlyMatches = tabOnlyRegex.Matches (friendlyPath);  	string qs = "";  	if (tabOnlyMatches.Count > 0) {  		Match rgxMatch = tabOnlyMatches [0];  		if (rgxMatch.Groups ["qs"] != null && rgxMatch.Groups ["qs"].Success) {  			qs = "?" + rgxMatch.Groups ["qs"].Value;  		}  	}  	bool dropLangParms;  	//736: observe the culture code of the tab  	string cultureCode = tab.CultureCode;  	bool isDefaultLanguage = false;  	if (cultureCode == "") {  		cultureCode = portalSettings.DefaultLanguage;  		isDefaultLanguage = true;  		//751 when using the default culture code' the redirect doesn't need an explicit language  	}  	bool isCustomUrl;  	newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' true' isHomePage' cultureCode' isDefaultLanguage' false' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  	//770 : custom http alias found' merge into overall result  	if (!string.IsNullOrEmpty (customHttpAlias)) {  		httpAlias = customHttpAlias;  		messages.Add ("Uses page-specific alias: " + customHttpAlias);  	}  	//it is a straight page.aspx reference' with just the tabid to specify parameters' so get the extension that should be used (no pagename is used by design)  	string extension = customHttpAlias != null && newTabPath == "" ? "" : DetermineExtension (isHomePage' pageName' settings);  	if (customOnly && isCustomUrl || customOnly == false) {  		result = Globals.AddHTTP (httpAlias + "/" + newTabPath.TrimStart ('/') + extension) + qs;  	}  } else {  	//When the home page is requested with a querystring value' the path for the home page is included.  This is because path items without the home page   	//qualifier are incorrectly checked for as dnn pages' and will result in a 404.  Ie domain.com/key/value will fail looking for a DNN path called 'key/value'.  	//This gets around the problem because it places the path aas /home/key/value - which correctly identifies the tab as '/Home' and the key/value parameters as  	// &key=value.  	//there are parameters on the base friendly url path' so split them off and process separately  	//this regex splits the incoming friendly path pagename/tabid/56/default.aspx into the non-tabid path' and individual parms for each /parm/ in the friendly path   	//550 : add in \. to allow '.' in the parameter path.  	//667 : allow non-word characters (specifically %) in the path  	var rgx = RegexUtils.GetCachedRegex ("[^?]*(?<tabs>/tabId/(?<tabid>\\d+))(?<path>(?<parms>(?:(?:/[^/?]+){1})+))(?:/" + pageName + ")(?:$|\\?(?<qs>.+$))"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	MatchCollection matches = rgx.Matches (friendlyPath);  	if (matches.Count > 0) {  		//it is a friendly url with other parameters in it   		//format it up with the parameters in the end' keeping the same page name   		//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   		Match rgxMatch = matches [0];  		bool hasParms = false;  		string cultureCode = null;  		string defaultCode = null;  		const string newPageName = "";  		string newPath = "";  		string qs = "";  		string langParms = "";  		//check we matched on some parms in the path   		if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  			if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  				hasParms = true;  				newPath = rgxMatch.Groups ["path"].Value;  				qs = rgxMatch.Groups ["qs"].Value;  				Match langMatch = LangMatchRegex.Match (newPath);  				if (langMatch.Success) {  					//a language specifier parameter is in the string  					//this is always the last parameter in the list' which  					//gives nasty pagename results' so shift the language query to before the page name  					// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  					// we really want language/en-us/home.aspx  					langParms = langMatch.Value;  					langParms = langParms.TrimEnd ('/');  					newPath = newPath.Replace (langParms' "");  					cultureCode = langMatch.Groups ["code"].Value;  					//obtain the culture code for this language   					defaultCode = portalSettings.DefaultLanguage;  				} else {  					//no language settings' use default  					cultureCode = portalSettings.DefaultLanguage;  					defaultCode = cultureCode;  				}  			}  		}  		bool dropLangParms;  		//determine if we allow the home page to be shown as the site root.  This is if :  		//cultureCode = default culture' newPath is blank after removing languageParms  		//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  		bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  		bool hasPath = (newPath != "");  		//871 : case insensitive comparison for culture  		bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  		bool isCustomUrl;  		newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  		if (hasParms) {  			bool changeToSiteRoot;  			//remove any parts of the path excluded by regex  			RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  			if (newPath == "" && isHomePage) {  				//956 : recheck the test for the homePagebeing a site root Url  				homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  				hasPath = (newPath != "");  				if (homePageSiteRoot) {  					//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  					//then re-get the home page Url with no params (hasPath=false)  					//done like this to re-run all rules relating the url  					newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  				}  			}  			//check for parameter regex replacement   			string changedPath;  			bool allowOtherParameters;  			if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  				messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  				newPath = changedPath;  			}  			//transform is ctl/privacy' ctl/login etc  			bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  			//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  			//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  			if (!string.IsNullOrEmpty (customHttpAlias)) {  				httpAlias = customHttpAlias;  				messages.Add ("Uses page-specific alias: " + customHttpAlias);  			}  			if (allowOtherParameters) {  				//738 : check for transformation by module specific provider  				//894 : allow module providers to be disabled  				bool customModuleUrl = false;  				if (settings.EnableCustomProviders) {  					customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  				}  				//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  				if (!customModuleUrl) {  					if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  						newPath = changedPath;  					}  				} else {  					//update path value with custom Url returned from module provider(s)  					newPath = changedPath;  				}  			}  			//start constructing the url  			//get the page and extension  			//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  			//because it's treated like a site root (quasi home page if you like)  			string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  			//prepend querystring qualifier if necessary                              			qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  			//string it all together  			if (!dropLangParms) {  				//871 : case insensitive culture comparisons  				//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  				dropLangParms = isDefaultLanguage || cultureSpecificAlias;  				// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   			}  			string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  			//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  			finalPath = AumDebugRegex.Replace (finalPath' "");  			//'and we're done!   			if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  				result = Globals.AddHTTP (finalPath);  			}  		}  	} else {  		var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		if ((re.IsMatch (friendlyPath))) {  			Match sesMatch = re.Match (friendlyPath);  			if ((sesMatch.Groups.Count > 2)) {  				switch (sesMatch.Groups [2].Value.ToLower ()) {  				case "terms":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "privacy":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "login":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				case "register":  					result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  					break;  				default:  					result = friendlyPath;  					break;  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if (matches.Count > 0) {  	//it is a friendly url with other parameters in it   	//format it up with the parameters in the end' keeping the same page name   	//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   	Match rgxMatch = matches [0];  	bool hasParms = false;  	string cultureCode = null;  	string defaultCode = null;  	const string newPageName = "";  	string newPath = "";  	string qs = "";  	string langParms = "";  	//check we matched on some parms in the path   	if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  		if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  			hasParms = true;  			newPath = rgxMatch.Groups ["path"].Value;  			qs = rgxMatch.Groups ["qs"].Value;  			Match langMatch = LangMatchRegex.Match (newPath);  			if (langMatch.Success) {  				//a language specifier parameter is in the string  				//this is always the last parameter in the list' which  				//gives nasty pagename results' so shift the language query to before the page name  				// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  				// we really want language/en-us/home.aspx  				langParms = langMatch.Value;  				langParms = langParms.TrimEnd ('/');  				newPath = newPath.Replace (langParms' "");  				cultureCode = langMatch.Groups ["code"].Value;  				//obtain the culture code for this language   				defaultCode = portalSettings.DefaultLanguage;  			} else {  				//no language settings' use default  				cultureCode = portalSettings.DefaultLanguage;  				defaultCode = cultureCode;  			}  		}  	}  	bool dropLangParms;  	//determine if we allow the home page to be shown as the site root.  This is if :  	//cultureCode = default culture' newPath is blank after removing languageParms  	//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  	bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  	bool hasPath = (newPath != "");  	//871 : case insensitive comparison for culture  	bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  	bool isCustomUrl;  	newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  	if (hasParms) {  		bool changeToSiteRoot;  		//remove any parts of the path excluded by regex  		RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  		if (newPath == "" && isHomePage) {  			//956 : recheck the test for the homePagebeing a site root Url  			homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  			hasPath = (newPath != "");  			if (homePageSiteRoot) {  				//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  				//then re-get the home page Url with no params (hasPath=false)  				//done like this to re-run all rules relating the url  				newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  			}  		}  		//check for parameter regex replacement   		string changedPath;  		bool allowOtherParameters;  		if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  			messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  			newPath = changedPath;  		}  		//transform is ctl/privacy' ctl/login etc  		bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  		//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  		//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  		if (!string.IsNullOrEmpty (customHttpAlias)) {  			httpAlias = customHttpAlias;  			messages.Add ("Uses page-specific alias: " + customHttpAlias);  		}  		if (allowOtherParameters) {  			//738 : check for transformation by module specific provider  			//894 : allow module providers to be disabled  			bool customModuleUrl = false;  			if (settings.EnableCustomProviders) {  				customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  			}  			//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  			if (!customModuleUrl) {  				if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  					newPath = changedPath;  				}  			} else {  				//update path value with custom Url returned from module provider(s)  				newPath = changedPath;  			}  		}  		//start constructing the url  		//get the page and extension  		//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  		//because it's treated like a site root (quasi home page if you like)  		string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  		//prepend querystring qualifier if necessary                              		qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  		//string it all together  		if (!dropLangParms) {  			//871 : case insensitive culture comparisons  			//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  			dropLangParms = isDefaultLanguage || cultureSpecificAlias;  			// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   		}  		string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  		//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  		finalPath = AumDebugRegex.Replace (finalPath' "");  		//'and we're done!   		if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  			result = Globals.AddHTTP (finalPath);  		}  	}  } else {  	var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	if ((re.IsMatch (friendlyPath))) {  		Match sesMatch = re.Match (friendlyPath);  		if ((sesMatch.Groups.Count > 2)) {  			switch (sesMatch.Groups [2].Value.ToLower ()) {  			case "terms":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "privacy":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "login":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "register":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			default:  				result = friendlyPath;  				break;  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if (matches.Count > 0) {  	//it is a friendly url with other parameters in it   	//format it up with the parameters in the end' keeping the same page name   	//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   	Match rgxMatch = matches [0];  	bool hasParms = false;  	string cultureCode = null;  	string defaultCode = null;  	const string newPageName = "";  	string newPath = "";  	string qs = "";  	string langParms = "";  	//check we matched on some parms in the path   	if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  		if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  			hasParms = true;  			newPath = rgxMatch.Groups ["path"].Value;  			qs = rgxMatch.Groups ["qs"].Value;  			Match langMatch = LangMatchRegex.Match (newPath);  			if (langMatch.Success) {  				//a language specifier parameter is in the string  				//this is always the last parameter in the list' which  				//gives nasty pagename results' so shift the language query to before the page name  				// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  				// we really want language/en-us/home.aspx  				langParms = langMatch.Value;  				langParms = langParms.TrimEnd ('/');  				newPath = newPath.Replace (langParms' "");  				cultureCode = langMatch.Groups ["code"].Value;  				//obtain the culture code for this language   				defaultCode = portalSettings.DefaultLanguage;  			} else {  				//no language settings' use default  				cultureCode = portalSettings.DefaultLanguage;  				defaultCode = cultureCode;  			}  		}  	}  	bool dropLangParms;  	//determine if we allow the home page to be shown as the site root.  This is if :  	//cultureCode = default culture' newPath is blank after removing languageParms  	//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  	bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  	bool hasPath = (newPath != "");  	//871 : case insensitive comparison for culture  	bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  	bool isCustomUrl;  	newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  	if (hasParms) {  		bool changeToSiteRoot;  		//remove any parts of the path excluded by regex  		RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  		if (newPath == "" && isHomePage) {  			//956 : recheck the test for the homePagebeing a site root Url  			homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  			hasPath = (newPath != "");  			if (homePageSiteRoot) {  				//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  				//then re-get the home page Url with no params (hasPath=false)  				//done like this to re-run all rules relating the url  				newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  			}  		}  		//check for parameter regex replacement   		string changedPath;  		bool allowOtherParameters;  		if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  			messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  			newPath = changedPath;  		}  		//transform is ctl/privacy' ctl/login etc  		bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  		//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  		//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  		if (!string.IsNullOrEmpty (customHttpAlias)) {  			httpAlias = customHttpAlias;  			messages.Add ("Uses page-specific alias: " + customHttpAlias);  		}  		if (allowOtherParameters) {  			//738 : check for transformation by module specific provider  			//894 : allow module providers to be disabled  			bool customModuleUrl = false;  			if (settings.EnableCustomProviders) {  				customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  			}  			//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  			if (!customModuleUrl) {  				if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  					newPath = changedPath;  				}  			} else {  				//update path value with custom Url returned from module provider(s)  				newPath = changedPath;  			}  		}  		//start constructing the url  		//get the page and extension  		//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  		//because it's treated like a site root (quasi home page if you like)  		string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  		//prepend querystring qualifier if necessary                              		qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  		//string it all together  		if (!dropLangParms) {  			//871 : case insensitive culture comparisons  			//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  			dropLangParms = isDefaultLanguage || cultureSpecificAlias;  			// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   		}  		string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  		//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  		finalPath = AumDebugRegex.Replace (finalPath' "");  		//'and we're done!   		if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  			result = Globals.AddHTTP (finalPath);  		}  	}  } else {  	var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	if ((re.IsMatch (friendlyPath))) {  		Match sesMatch = re.Match (friendlyPath);  		if ((sesMatch.Groups.Count > 2)) {  			switch (sesMatch.Groups [2].Value.ToLower ()) {  			case "terms":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "privacy":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "login":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "register":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			default:  				result = friendlyPath;  				break;  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if (matches.Count > 0) {  	//it is a friendly url with other parameters in it   	//format it up with the parameters in the end' keeping the same page name   	//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   	Match rgxMatch = matches [0];  	bool hasParms = false;  	string cultureCode = null;  	string defaultCode = null;  	const string newPageName = "";  	string newPath = "";  	string qs = "";  	string langParms = "";  	//check we matched on some parms in the path   	if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  		if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  			hasParms = true;  			newPath = rgxMatch.Groups ["path"].Value;  			qs = rgxMatch.Groups ["qs"].Value;  			Match langMatch = LangMatchRegex.Match (newPath);  			if (langMatch.Success) {  				//a language specifier parameter is in the string  				//this is always the last parameter in the list' which  				//gives nasty pagename results' so shift the language query to before the page name  				// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  				// we really want language/en-us/home.aspx  				langParms = langMatch.Value;  				langParms = langParms.TrimEnd ('/');  				newPath = newPath.Replace (langParms' "");  				cultureCode = langMatch.Groups ["code"].Value;  				//obtain the culture code for this language   				defaultCode = portalSettings.DefaultLanguage;  			} else {  				//no language settings' use default  				cultureCode = portalSettings.DefaultLanguage;  				defaultCode = cultureCode;  			}  		}  	}  	bool dropLangParms;  	//determine if we allow the home page to be shown as the site root.  This is if :  	//cultureCode = default culture' newPath is blank after removing languageParms  	//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  	bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  	bool hasPath = (newPath != "");  	//871 : case insensitive comparison for culture  	bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  	bool isCustomUrl;  	newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  	if (hasParms) {  		bool changeToSiteRoot;  		//remove any parts of the path excluded by regex  		RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  		if (newPath == "" && isHomePage) {  			//956 : recheck the test for the homePagebeing a site root Url  			homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  			hasPath = (newPath != "");  			if (homePageSiteRoot) {  				//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  				//then re-get the home page Url with no params (hasPath=false)  				//done like this to re-run all rules relating the url  				newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  			}  		}  		//check for parameter regex replacement   		string changedPath;  		bool allowOtherParameters;  		if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  			messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  			newPath = changedPath;  		}  		//transform is ctl/privacy' ctl/login etc  		bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  		//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  		//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  		if (!string.IsNullOrEmpty (customHttpAlias)) {  			httpAlias = customHttpAlias;  			messages.Add ("Uses page-specific alias: " + customHttpAlias);  		}  		if (allowOtherParameters) {  			//738 : check for transformation by module specific provider  			//894 : allow module providers to be disabled  			bool customModuleUrl = false;  			if (settings.EnableCustomProviders) {  				customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  			}  			//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  			if (!customModuleUrl) {  				if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  					newPath = changedPath;  				}  			} else {  				//update path value with custom Url returned from module provider(s)  				newPath = changedPath;  			}  		}  		//start constructing the url  		//get the page and extension  		//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  		//because it's treated like a site root (quasi home page if you like)  		string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  		//prepend querystring qualifier if necessary                              		qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  		//string it all together  		if (!dropLangParms) {  			//871 : case insensitive culture comparisons  			//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  			dropLangParms = isDefaultLanguage || cultureSpecificAlias;  			// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   		}  		string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  		//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  		finalPath = AumDebugRegex.Replace (finalPath' "");  		//'and we're done!   		if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  			result = Globals.AddHTTP (finalPath);  		}  	}  } else {  	var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	if ((re.IsMatch (friendlyPath))) {  		Match sesMatch = re.Match (friendlyPath);  		if ((sesMatch.Groups.Count > 2)) {  			switch (sesMatch.Groups [2].Value.ToLower ()) {  			case "terms":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "privacy":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "login":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "register":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			default:  				result = friendlyPath;  				break;  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if (matches.Count > 0) {  	//it is a friendly url with other parameters in it   	//format it up with the parameters in the end' keeping the same page name   	//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   	Match rgxMatch = matches [0];  	bool hasParms = false;  	string cultureCode = null;  	string defaultCode = null;  	const string newPageName = "";  	string newPath = "";  	string qs = "";  	string langParms = "";  	//check we matched on some parms in the path   	if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  		if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  			hasParms = true;  			newPath = rgxMatch.Groups ["path"].Value;  			qs = rgxMatch.Groups ["qs"].Value;  			Match langMatch = LangMatchRegex.Match (newPath);  			if (langMatch.Success) {  				//a language specifier parameter is in the string  				//this is always the last parameter in the list' which  				//gives nasty pagename results' so shift the language query to before the page name  				// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  				// we really want language/en-us/home.aspx  				langParms = langMatch.Value;  				langParms = langParms.TrimEnd ('/');  				newPath = newPath.Replace (langParms' "");  				cultureCode = langMatch.Groups ["code"].Value;  				//obtain the culture code for this language   				defaultCode = portalSettings.DefaultLanguage;  			} else {  				//no language settings' use default  				cultureCode = portalSettings.DefaultLanguage;  				defaultCode = cultureCode;  			}  		}  	}  	bool dropLangParms;  	//determine if we allow the home page to be shown as the site root.  This is if :  	//cultureCode = default culture' newPath is blank after removing languageParms  	//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  	bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  	bool hasPath = (newPath != "");  	//871 : case insensitive comparison for culture  	bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  	bool isCustomUrl;  	newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  	if (hasParms) {  		bool changeToSiteRoot;  		//remove any parts of the path excluded by regex  		RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  		if (newPath == "" && isHomePage) {  			//956 : recheck the test for the homePagebeing a site root Url  			homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  			hasPath = (newPath != "");  			if (homePageSiteRoot) {  				//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  				//then re-get the home page Url with no params (hasPath=false)  				//done like this to re-run all rules relating the url  				newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  			}  		}  		//check for parameter regex replacement   		string changedPath;  		bool allowOtherParameters;  		if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  			messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  			newPath = changedPath;  		}  		//transform is ctl/privacy' ctl/login etc  		bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  		//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  		//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  		if (!string.IsNullOrEmpty (customHttpAlias)) {  			httpAlias = customHttpAlias;  			messages.Add ("Uses page-specific alias: " + customHttpAlias);  		}  		if (allowOtherParameters) {  			//738 : check for transformation by module specific provider  			//894 : allow module providers to be disabled  			bool customModuleUrl = false;  			if (settings.EnableCustomProviders) {  				customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  			}  			//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  			if (!customModuleUrl) {  				if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  					newPath = changedPath;  				}  			} else {  				//update path value with custom Url returned from module provider(s)  				newPath = changedPath;  			}  		}  		//start constructing the url  		//get the page and extension  		//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  		//because it's treated like a site root (quasi home page if you like)  		string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  		//prepend querystring qualifier if necessary                              		qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  		//string it all together  		if (!dropLangParms) {  			//871 : case insensitive culture comparisons  			//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  			dropLangParms = isDefaultLanguage || cultureSpecificAlias;  			// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   		}  		string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  		//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  		finalPath = AumDebugRegex.Replace (finalPath' "");  		//'and we're done!   		if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  			result = Globals.AddHTTP (finalPath);  		}  	}  } else {  	var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	if ((re.IsMatch (friendlyPath))) {  		Match sesMatch = re.Match (friendlyPath);  		if ((sesMatch.Groups.Count > 2)) {  			switch (sesMatch.Groups [2].Value.ToLower ()) {  			case "terms":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "privacy":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "login":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "register":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			default:  				result = friendlyPath;  				break;  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if (matches.Count > 0) {  	//it is a friendly url with other parameters in it   	//format it up with the parameters in the end' keeping the same page name   	//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   	Match rgxMatch = matches [0];  	bool hasParms = false;  	string cultureCode = null;  	string defaultCode = null;  	const string newPageName = "";  	string newPath = "";  	string qs = "";  	string langParms = "";  	//check we matched on some parms in the path   	if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  		if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  			hasParms = true;  			newPath = rgxMatch.Groups ["path"].Value;  			qs = rgxMatch.Groups ["qs"].Value;  			Match langMatch = LangMatchRegex.Match (newPath);  			if (langMatch.Success) {  				//a language specifier parameter is in the string  				//this is always the last parameter in the list' which  				//gives nasty pagename results' so shift the language query to before the page name  				// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  				// we really want language/en-us/home.aspx  				langParms = langMatch.Value;  				langParms = langParms.TrimEnd ('/');  				newPath = newPath.Replace (langParms' "");  				cultureCode = langMatch.Groups ["code"].Value;  				//obtain the culture code for this language   				defaultCode = portalSettings.DefaultLanguage;  			} else {  				//no language settings' use default  				cultureCode = portalSettings.DefaultLanguage;  				defaultCode = cultureCode;  			}  		}  	}  	bool dropLangParms;  	//determine if we allow the home page to be shown as the site root.  This is if :  	//cultureCode = default culture' newPath is blank after removing languageParms  	//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  	bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  	bool hasPath = (newPath != "");  	//871 : case insensitive comparison for culture  	bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  	bool isCustomUrl;  	newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  	if (hasParms) {  		bool changeToSiteRoot;  		//remove any parts of the path excluded by regex  		RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  		if (newPath == "" && isHomePage) {  			//956 : recheck the test for the homePagebeing a site root Url  			homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  			hasPath = (newPath != "");  			if (homePageSiteRoot) {  				//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  				//then re-get the home page Url with no params (hasPath=false)  				//done like this to re-run all rules relating the url  				newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  			}  		}  		//check for parameter regex replacement   		string changedPath;  		bool allowOtherParameters;  		if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  			messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  			newPath = changedPath;  		}  		//transform is ctl/privacy' ctl/login etc  		bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  		//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  		//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  		if (!string.IsNullOrEmpty (customHttpAlias)) {  			httpAlias = customHttpAlias;  			messages.Add ("Uses page-specific alias: " + customHttpAlias);  		}  		if (allowOtherParameters) {  			//738 : check for transformation by module specific provider  			//894 : allow module providers to be disabled  			bool customModuleUrl = false;  			if (settings.EnableCustomProviders) {  				customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  			}  			//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  			if (!customModuleUrl) {  				if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  					newPath = changedPath;  				}  			} else {  				//update path value with custom Url returned from module provider(s)  				newPath = changedPath;  			}  		}  		//start constructing the url  		//get the page and extension  		//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  		//because it's treated like a site root (quasi home page if you like)  		string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  		//prepend querystring qualifier if necessary                              		qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  		//string it all together  		if (!dropLangParms) {  			//871 : case insensitive culture comparisons  			//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  			dropLangParms = isDefaultLanguage || cultureSpecificAlias;  			// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   		}  		string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  		//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  		finalPath = AumDebugRegex.Replace (finalPath' "");  		//'and we're done!   		if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  			result = Globals.AddHTTP (finalPath);  		}  	}  } else {  	var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	if ((re.IsMatch (friendlyPath))) {  		Match sesMatch = re.Match (friendlyPath);  		if ((sesMatch.Groups.Count > 2)) {  			switch (sesMatch.Groups [2].Value.ToLower ()) {  			case "terms":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "privacy":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "login":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "register":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			default:  				result = friendlyPath;  				break;  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if (matches.Count > 0) {  	//it is a friendly url with other parameters in it   	//format it up with the parameters in the end' keeping the same page name   	//find the first param name in the params of the Url (the first path piece after the tabid/nn/ value)   	Match rgxMatch = matches [0];  	bool hasParms = false;  	string cultureCode = null;  	string defaultCode = null;  	const string newPageName = "";  	string newPath = "";  	string qs = "";  	string langParms = "";  	//check we matched on some parms in the path   	if (rgxMatch.Groups ["parms"] != null && rgxMatch.Groups ["parms"].Success) {  		if (rgxMatch.Groups ["parms"].Captures.Count > 0) {  			hasParms = true;  			newPath = rgxMatch.Groups ["path"].Value;  			qs = rgxMatch.Groups ["qs"].Value;  			Match langMatch = LangMatchRegex.Match (newPath);  			if (langMatch.Success) {  				//a language specifier parameter is in the string  				//this is always the last parameter in the list' which  				//gives nasty pagename results' so shift the language query to before the page name  				// ie home/tabid/66/language/en-us/default.aspx will give home/language/en-us.aspx  				// we really want language/en-us/home.aspx  				langParms = langMatch.Value;  				langParms = langParms.TrimEnd ('/');  				newPath = newPath.Replace (langParms' "");  				cultureCode = langMatch.Groups ["code"].Value;  				//obtain the culture code for this language   				defaultCode = portalSettings.DefaultLanguage;  			} else {  				//no language settings' use default  				cultureCode = portalSettings.DefaultLanguage;  				defaultCode = cultureCode;  			}  		}  	}  	bool dropLangParms;  	//determine if we allow the home page to be shown as the site root.  This is if :  	//cultureCode = default culture' newPath is blank after removing languageParms  	//allow site root for home page if it is the default culture and no other path items' or there is a specific alias for this culture and there are no other path items  	bool homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  	bool hasPath = (newPath != "");  	//871 : case insensitive comparison for culture  	bool isDefaultLanguage = (String.Compare (cultureCode' defaultCode' StringComparison.OrdinalIgnoreCase) == 0);  	bool isCustomUrl;  	newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  	if (hasParms) {  		bool changeToSiteRoot;  		//remove any parts of the path excluded by regex  		RemoveExcludedPartsOfPath (settings' ref newPath' ref qs);  		if (newPath == "" && isHomePage) {  			//956 : recheck the test for the homePagebeing a site root Url  			homePageSiteRoot = (cultureCode == defaultCode && newPath == "") || (cultureSpecificAlias && newPath == "");  			hasPath = (newPath != "");  			if (homePageSiteRoot) {  				//special case - if the newPath is empty after removing the parameters' and it is the home page' and the home page is only to show the site root  				//then re-get the home page Url with no params (hasPath=false)  				//done like this to re-run all rules relating the url  				newTabPath = TabPathHelper.GetTabPath (tab' settings' options' ignoreCustomRedirects' homePageSiteRoot' isHomePage' cultureCode' isDefaultLanguage' hasPath' out dropLangParms' out customHttpAlias' out isCustomUrl' parentTraceId);  			}  		}  		//check for parameter regex replacement   		string changedPath;  		bool allowOtherParameters;  		if (FriendlyUrlPathController.CheckUserProfileReplacement (newPath' tab' portalSettings' settings' options' out changedPath' out changeToSiteRoot' out allowOtherParameters' ref messages' parentTraceId)) {  			messages.Add ("User Profile Replacement: Old Path=" + newPath + "; Changed Path=" + changedPath);  			newPath = changedPath;  		}  		//transform is ctl/privacy' ctl/login etc  		bool builtInUrl = TransformStandardPath (ref newPath' ref newTabPath);  		//770 : custom http alias found' merge into overall result (except if builtin url' which don't get to use custom aliases)  		//820 : allow for custom http aliases for builtin urls as well (reverses 770).  Otherwise' can't log in to other aliases.  		if (!string.IsNullOrEmpty (customHttpAlias)) {  			httpAlias = customHttpAlias;  			messages.Add ("Uses page-specific alias: " + customHttpAlias);  		}  		if (allowOtherParameters) {  			//738 : check for transformation by module specific provider  			//894 : allow module providers to be disabled  			bool customModuleUrl = false;  			if (settings.EnableCustomProviders) {  				customModuleUrl = ExtensionUrlProviderController.GetUrlFromExtensionUrlProviders (portalSettings.PortalId' tab' settings' newPath' cultureCode' ref pageName' out changedPath' out changeToSiteRoot' ref messages' parentTraceId);  			}  			//when no custom module Urls' check for any regex replacements by way of the friendlyurlparms.config file  			if (!customModuleUrl) {  				if (FriendlyUrlPathController.CheckParameterRegexReplacement (newPath' tab' settings' portalSettings.PortalId' out changedPath' ref messages' out changeToSiteRoot' parentTraceId)) {  					newPath = changedPath;  				}  			} else {  				//update path value with custom Url returned from module provider(s)  				newPath = changedPath;  			}  		}  		//start constructing the url  		//get the page and extension  		//770 : when using a custom http alias' and there is no Url for that path' there's no extension regardless of settings  		//because it's treated like a site root (quasi home page if you like)  		string pageAndExtension = customHttpAlias != null && newTabPath == "" ? "" : DeterminePageNameAndExtension (ref pageName' settings);  		//prepend querystring qualifier if necessary                              		qs = !string.IsNullOrEmpty (qs) ? "?" + qs : "";  		//string it all together  		if (!dropLangParms) {  			//871 : case insensitive culture comparisons  			//drop the language parameters when the defaultCode is the cultureCode for this Url' or the portal alias defines the culture code  			dropLangParms = isDefaultLanguage || cultureSpecificAlias;  			// (defaultCode.ToLower() == cultureCode.ToLower()) || cultureSpecificAlias;   		}  		string finalPath = CreateFriendlyUrl (httpAlias' newTabPath' newPath' pageAndExtension' newPageName' qs' langParms' ref messages' builtInUrl' changeToSiteRoot' dropLangParms' isHomePage);  		//702: look for _aumdebug=true|false and remove if so - never want it part of the output friendly url path  		finalPath = AumDebugRegex.Replace (finalPath' "");  		//'and we're done!   		if (customOnly && isCustomUrl || customOnly == false || builtInUrl) {  			result = Globals.AddHTTP (finalPath);  		}  	}  } else {  	var re = RegexUtils.GetCachedRegex ("[^?]*/tabId/(\\d+)/ctl/([A-Z][a-z]+)/" + pageName + "$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	if ((re.IsMatch (friendlyPath))) {  		Match sesMatch = re.Match (friendlyPath);  		if ((sesMatch.Groups.Count > 2)) {  			switch (sesMatch.Groups [2].Value.ToLower ()) {  			case "terms":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "privacy":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "login":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			case "register":  				result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  				break;  			default:  				result = friendlyPath;  				break;  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((re.IsMatch (friendlyPath))) {  	Match sesMatch = re.Match (friendlyPath);  	if ((sesMatch.Groups.Count > 2)) {  		switch (sesMatch.Groups [2].Value.ToLower ()) {  		case "terms":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "privacy":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "login":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "register":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		default:  			result = friendlyPath;  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((re.IsMatch (friendlyPath))) {  	Match sesMatch = re.Match (friendlyPath);  	if ((sesMatch.Groups.Count > 2)) {  		switch (sesMatch.Groups [2].Value.ToLower ()) {  		case "terms":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "privacy":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "login":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "register":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		default:  			result = friendlyPath;  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((re.IsMatch (friendlyPath))) {  	Match sesMatch = re.Match (friendlyPath);  	if ((sesMatch.Groups.Count > 2)) {  		switch (sesMatch.Groups [2].Value.ToLower ()) {  		case "terms":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "privacy":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "login":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "register":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		default:  			result = friendlyPath;  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((re.IsMatch (friendlyPath))) {  	Match sesMatch = re.Match (friendlyPath);  	if ((sesMatch.Groups.Count > 2)) {  		switch (sesMatch.Groups [2].Value.ToLower ()) {  		case "terms":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "privacy":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "login":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "register":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		default:  			result = friendlyPath;  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((re.IsMatch (friendlyPath))) {  	Match sesMatch = re.Match (friendlyPath);  	if ((sesMatch.Groups.Count > 2)) {  		switch (sesMatch.Groups [2].Value.ToLower ()) {  		case "terms":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "privacy":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "login":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "register":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		default:  			result = friendlyPath;  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((re.IsMatch (friendlyPath))) {  	Match sesMatch = re.Match (friendlyPath);  	if ((sesMatch.Groups.Count > 2)) {  		switch (sesMatch.Groups [2].Value.ToLower ()) {  		case "terms":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "privacy":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "login":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		case "register":  			result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  			break;  		default:  			result = friendlyPath;  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((sesMatch.Groups.Count > 2)) {  	switch (sesMatch.Groups [2].Value.ToLower ()) {  	case "terms":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "privacy":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "login":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "register":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	default:  		result = friendlyPath;  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((sesMatch.Groups.Count > 2)) {  	switch (sesMatch.Groups [2].Value.ToLower ()) {  	case "terms":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "privacy":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "login":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "register":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	default:  		result = friendlyPath;  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((sesMatch.Groups.Count > 2)) {  	switch (sesMatch.Groups [2].Value.ToLower ()) {  	case "terms":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "privacy":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "login":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "register":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	default:  		result = friendlyPath;  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((sesMatch.Groups.Count > 2)) {  	switch (sesMatch.Groups [2].Value.ToLower ()) {  	case "terms":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "privacy":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "login":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "register":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	default:  		result = friendlyPath;  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((sesMatch.Groups.Count > 2)) {  	switch (sesMatch.Groups [2].Value.ToLower ()) {  	case "terms":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "privacy":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "login":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "register":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	default:  		result = friendlyPath;  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: if ((sesMatch.Groups.Count > 2)) {  	switch (sesMatch.Groups [2].Value.ToLower ()) {  	case "terms":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "privacy":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "login":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	case "register":  		result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  		break;  	default:  		result = friendlyPath;  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: switch (sesMatch.Groups [2].Value.ToLower ()) {  case "terms":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "privacy":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "login":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "register":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  default:  	result = friendlyPath;  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: switch (sesMatch.Groups [2].Value.ToLower ()) {  case "terms":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "privacy":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "login":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "register":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  default:  	result = friendlyPath;  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: switch (sesMatch.Groups [2].Value.ToLower ()) {  case "terms":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "privacy":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "login":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "register":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  default:  	result = friendlyPath;  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: switch (sesMatch.Groups [2].Value.ToLower ()) {  case "terms":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "privacy":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "login":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "register":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  default:  	result = friendlyPath;  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: switch (sesMatch.Groups [2].Value.ToLower ()) {  case "terms":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "privacy":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "login":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  case "register":  	result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  	break;  default:  	result = friendlyPath;  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,ImproveFriendlyUrlWithMessages,The following statement contains a magic number: result = Globals.AddHTTP (httpAlias + "/" + sesMatch.Groups [2].Value + ".aspx");  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,RemoveExcludedPartsOfPath,The following statement contains a magic number: for (var i = 0; i < pathParts.Length; i = i + 2) {  	// Just append to path' if no value exists  	if (pathParts.Length <= i + 1) {  		pathBuilder.Append (string.Format ("/{0}"' pathParts [i]));  		continue;  	}  	// Either add key/value parameter pair to path or to query  	var key = pathParts [i];  	var value = pathParts [i + 1];  	if (notInPath.IsMatch (string.Format ("/{0}/{1}"' key' value))) {  		if (queryStringBuilder.Length > 0)  			queryStringBuilder.Append ("&");  		queryStringBuilder.Append (string.Format ("{0}={1}"' key' value));  	} else {  		pathBuilder.Append (string.Format ("/{0}/{1}"' key' value));  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,RemoveExcludedPartsOfPath,The following statement contains a magic number: i = i + 2
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The following statement contains a magic number: try {  	string fullUrl' querystring;  	//699: get the full url based on the request and the quersytring' rather than the requestUri.ToString()  	//there is a difference in encoding' which can corrupt results when an encoded value is in the querystring  	RewriteController.GetUrlWithQuerystring (request' requestUri' out fullUrl' out querystring);  	showDebug = CheckForDebug (request' queryStringCol' settings.AllowDebugCode);  	string ignoreRegex = settings.IgnoreRegex;  	bool ignoreRequest = IgnoreRequest (result' fullUrl' ignoreRegex' request);  	bool redirectAlias = false;  	if (!ignoreRequest) {  		//set original path  		context.Items ["UrlRewrite:OriginalUrl"] = requestUri.AbsoluteUri;  		//set the path of the result object' and determine if a redirect is allowed on this request  		result.SetOriginalPath (requestUri.ToString ()' settings);  		//737 : set the mobile browser   		result.SetBrowserType (request' response' settings);  		//add to context  		context.Items ["UrlRewrite:BrowserType"] = result.BrowserType.ToString ();  		//839 : split out this check  		result.SetRedirectAllowed (result.OriginalPath' settings);  		//find the portal alias first  		string wrongAlias;  		bool isPrimaryAlias;  		var requestedAlias = GetPortalAlias (settings' fullUrl' out redirectAlias' out isPrimaryAlias' out wrongAlias);  		if (requestedAlias != null) {  			//827 : now get the correct settings for this portal (if not a test request)  			//839 : separate out redirect check as well and move above first redirect test (ConfigurePortalAliasRedirect)  			if (allowSettingsChange) {  				settings = new FriendlyUrlSettings (requestedAlias.PortalID);  				result.SetRedirectAllowed (result.OriginalPath' settings);  			}  			result.PortalAlias = requestedAlias;  			result.PrimaryAlias = requestedAlias;  			//this is the primary alias  			result.PortalId = requestedAlias.PortalID;  			result.CultureCode = requestedAlias.CultureCode;  			//get the portal alias mapping for this portal  			result.PortalAliasMapping = PortalSettingsController.Instance ().GetPortalAliasMappingMode (requestedAlias.PortalID);  			//if requested alias wasn't the primary' we have a replacement' redirects are allowed and the portal alias mapping mode is redirect  			//then do a redirect based on the wrong portal  			if ((redirectAlias && wrongAlias != null) && result.RedirectAllowed && result.PortalAliasMapping != PortalSettings.PortalAliasMapping.Redirect) {  				//this is the alias' we are going to enforce it as the primary alias  				result.PortalAlias = requestedAlias;  				result.PrimaryAlias = requestedAlias;  				//going to redirect this alias because it is incorrect  				//or do we just want to mark as 'check for 301??'  				redirectAlias = ConfigurePortalAliasRedirect (ref result' wrongAlias' requestedAlias.HTTPAlias' false' settings.InternalAliasList' settings);  			} else {  				//do not redirect the wrong alias' but set the primary alias value  				if (wrongAlias != null) {  					//get the portal alias info for the requested alias (which is the wrong one)  					//and set that as the alias' but also set the found alias as the primary  					PortalAliasInfo wrongAliasInfo = PortalAliasController.Instance.GetPortalAlias (wrongAlias);  					if (wrongAliasInfo != null) {  						result.PortalAlias = wrongAliasInfo;  						result.PrimaryAlias = requestedAlias;  					}  				}  			}  		}  	}  	ignoreRegex = settings.IgnoreRegex;  	ignoreRequest = IgnoreRequest (result' fullUrl' ignoreRegex' request);  	if (!ignoreRequest) {  		//check to see if a post request  		if (request.RequestType == "POST") {  			postRequest = true;  		}  		//check the portal alias again.  This time' in more depth now that the portal Id is known   		//this check handles browser types/language specific aliases & mobile aliases  		string primaryHttpAlias;  		if (!redirectAlias && IsPortalAliasIncorrect (context' request' requestUri' result' queryStringCol' settings' parentTraceId' out primaryHttpAlias)) {  			//it was an incorrect alias  			PortalAliasInfo primaryAlias = PortalAliasController.Instance.GetPortalAlias (primaryHttpAlias);  			if (primaryAlias != null)  				result.PrimaryAlias = primaryAlias;  			//try and redirect the alias if the settings allow it  			redirectAlias = RedirectPortalAlias (primaryHttpAlias' ref result' settings);  		}  		if (redirectAlias) {  			//not correct alias for portal : will be redirected  			//perform a 301 redirect if one has already been found  			response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  			response.RedirectPermanent (result.FinalUrl' false);  			finished = true;  		}  		if (!finished) {  			//Check to see if this to be rewritten into default.aspx?tabId=nn format  			//this call is the main rewriting matching call.  It makes the decision on whether it is a   			//physical file' whether it is toe be rewritten or redirected by way of a stored rule  			//Check if we have a standard url  			var uri = new Uri (fullUrl);  			if (uri.PathAndQuery.ToLowerInvariant ().StartsWith ("/" + Globals.glbDefaultPage.ToLowerInvariant ())) {  				result.DoRewrite = true;  				result.Action = ActionType.CheckFor301;  				result.RewritePath = Globals.glbDefaultPage + uri.Query;  			} else {  				bool isPhysicalResource;  				CheckForRewrite (fullUrl' querystring' result' useFriendlyUrls' queryStringCol' settings' out isPhysicalResource' parentTraceId);  			}  			//return 404 if there is no portal alias for a rewritten request  			if (result.DoRewrite && result.PortalAlias == null) {  				//882 : move this logic in from where it was before to here  				//so that non-rewritten requests don't trip over it  				//no portal alias found for the request : that's a 404 error  				result.Action = ActionType.Output404;  				result.Reason = RedirectReason.No_Portal_Alias;  				Handle404OrException (settings' context' null' result' false' showDebug);  				finished = true;  				//cannot fulfil request unless correct portal alias specified  			}  		}  		if (!finished && result.DoRewrite) {  			//check the identified portal alias details for any extra rewrite information required  			//this includes the culture and the skin' which can be placed into the rewrite path  			//This logic is here because it will catch any Urls which are excluded from rewriting  			var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  			if (result.PortalId > -1 && result.HttpAlias != null) {  				string culture;  				string skin;  				BrowserTypes browserType;  				primaryAliases.GetSettingsByPortalIdAndAlias (result.PortalId' result.HttpAlias' out culture' out browserType' out skin);  				//add language code to path if it exists (not null) and if it's not already there  				string rewritePath = result.RewritePath;  				if (RewriteController.AddLanguageCodeToRewritePath (ref rewritePath' culture)) {  					result.CultureCode = culture;  				}  				//852: add skinSrc to path if it exists and if it's not already there  				string debugMessage;  				RewriteController.AddSkinToRewritePath (result.TabId' result.PortalId' ref rewritePath' skin' out debugMessage);  				result.RewritePath = rewritePath;  				//reset back from ref temp var  				if (debugMessage != null) {  					result.DebugMessages.Add (debugMessage);  				}  			}  		}  		if (!finished && result.DoRewrite) {  			//if so' do the rewrite  			if (result.RewritePath.StartsWith (result.Scheme) || result.RewritePath.StartsWith (Globals.glbDefaultPage) == false) {  				if (result.RewritePath.Contains (Globals.glbDefaultPage) == false) {  					RewriterUtils.RewriteUrl (context' "~/" + result.RewritePath);  				} else {  					//if there is no TabId and we have the domain  					if (!result.RewritePath.ToLowerInvariant ().Contains ("tabId=")) {  						RewriterUtils.RewriteUrl (context' "~/" + result.RewritePath);  					} else {  						RewriterUtils.RewriteUrl (context' result.RewritePath);  					}  				}  			} else {  				RewriterUtils.RewriteUrl (context' "~/" + result.RewritePath);  			}  		}  		//confirm which portal the request is for   		if (!finished) {  			IdentifyPortalAlias (context' request' requestUri' result' queryStringCol' settings' parentTraceId);  			if (result.Action == ActionType.Redirect302Now) {  				//performs a 302 redirect if requested  				response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  				response.Redirect (result.FinalUrl' false);  				finished = true;  			} else {  				if (result.Action == ActionType.Redirect301 && !string.IsNullOrEmpty (result.FinalUrl)) {  					finished = true;  					//perform a 301 redirect if one has already been found  					response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  					response.RedirectPermanent (result.FinalUrl' false);  				}  			}  		}  		if (!finished) {  			//check to see if this tab has an external url that should be forwared or not  			finished = CheckForTabExternalForwardOrRedirect (context' ref result' response' settings' parentTraceId);  		}  		//check for a parameter redirect (we had to do all the previous processing to know we are on the right portal and identify the tabid)  		//if the CustomParmRewrite flag is set' it means we already rewrote these parameters' so they have to be correct' and aren't subject to   		//redirection.  The only reason to do a custom parm rewrite is to interpret already-friendly parameters  		if (!finished && !postRequest /* either request is null' or it's not a post - 551 */&& result.HttpAlias != null /* must have a http alias */&& !result.CustomParmRewrite && /* not custom rewritten parms */((settings.EnableCustomProviders && RedirectController.CheckForModuleProviderRedirect (requestUri' ref result' queryStringCol' settings' parentTraceId)) //894 : allow disable of all custom providers  		|| RedirectController.CheckForParameterRedirect (requestUri' ref result' queryStringCol' settings))) {  			//301 redirect to new location based on parameter match  			if (response != null) {  				switch (result.Action) {  				case ActionType.Redirect301:  					response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  					response.RedirectPermanent (result.FinalUrl);  					break;  				case ActionType.Redirect302:  					response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  					response.Redirect (result.FinalUrl);  					break;  				case ActionType.Output404:  					response.AppendHeader ("X-Result-Reason"' result.Reason.ToString ().Replace ("_"' " "));  					Handle404OrException (settings' context' null' result' true' showDebug);  					break;  				}  			}  			finished = true;  		}  		//shifted until after the 301 redirect code to allow redirects to be checked for pages which have no rewrite value  		//look for a 404 result from the rewrite' because of a deleted page or rule  		if (!finished && result.Action == ActionType.Output404) {  			if (result.OriginalPath.Equals (result.HttpAlias' StringComparison.InvariantCultureIgnoreCase) && result.PortalAlias != null && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  				//Request for domain with no page identified (and no home page set in Site Settings)  				result.Action = ActionType.Continue;  			} else {  				finished = true;  				response.AppendHeader ("X-Result-Reason"' result.Reason.ToString ().Replace ("_"' " "));  				if (showDebug) {  					ShowDebugData (context' requestUri.AbsoluteUri' result' null);  				}  				//show the 404 page if configured  				result.Reason = RedirectReason.Requested_404;  				Handle404OrException (settings' context' null' result' true' showDebug);  			}  		}  		if (!finished) {  			//add the portal settings to the app context if the portal alias has been found and is correct  			if (result.PortalId != -1 && result.PortalAlias != null) {  				//for invalid tab id other than -1' show the 404 page  				TabInfo tabInfo = TabController.Instance.GetTab (result.TabId' result.PortalId' false);  				if (tabInfo == null && result.TabId > -1) {  					finished = true;  					if (showDebug) {  						ShowDebugData (context' requestUri.AbsoluteUri' result' null);  					}  					//show the 404 page if configured  					result.Action = ActionType.Output404;  					result.Reason = RedirectReason.Requested_404;  					response.AppendHeader ("X-Result-Reason"' result.Reason.ToString ().Replace ("_"' " "));  					Handle404OrException (settings' context' null' result' true' showDebug);  				} else {  					Globals.SetApplicationName (result.PortalId);  					// load the PortalSettings into current context   					var portalSettings = new PortalSettings (result.TabId' result.PortalAlias);  					//set the primary alias if one was specified  					if (result.PrimaryAlias != null)  						portalSettings.PrimaryAlias = result.PrimaryAlias;  					if (result.CultureCode != null && fullUrl.Contains (result.CultureCode) && portalSettings.DefaultLanguage == result.CultureCode) {  						//when the request culture code is the same as the portal default' check for a 301 redirect' because we try and remove the language from the url where possible  						result.Action = ActionType.CheckFor301;  					}  					int portalHomeTabId = portalSettings.HomeTabId;  					if (context != null && portalSettings != null && !context.Items.Contains ("PortalSettings")) {  						context.Items.Add ("PortalSettings"' portalSettings);  						// load PortalSettings and HostSettings dictionaries into current context  						// specifically for use in DotNetNuke.Web.Client' which can't reference DotNetNuke.dll to get settings the normal way  						context.Items.Add ("PortalSettingsDictionary"' PortalController.Instance.GetPortalSettings (portalSettings.PortalId));  						context.Items.Add ("HostSettingsDictionary"' HostController.Instance.GetSettingsDictionary ());  					}  					//check if a secure redirection is needed  					//this would be done earlier in the piece' but need to know the portal settings' tabid etc before processing it  					bool redirectSecure = CheckForSecureRedirect (portalSettings' requestUri' result' queryStringCol' settings);  					if (redirectSecure) {  						if (response != null) {  							//702 : don't check final url until checked for null reference first  							if (result.FinalUrl != null) {  								if (result.FinalUrl.StartsWith ("https://")) {  									if (showDebug) {  										/*                                                     string debugMsg = "{0}' {1}' {2}' {3}' {4}";                                                     string productVer = System.Reflection.Assembly.GetExecutingAssembly().GetName(false).Version.ToString();                                                     response.AppendHeader("X-" + prodName + "-Debug"' string.Format(debugMsg' requestUri.AbsoluteUri' result.FinalUrl' result.RewritePath' result.Action' productVer));                                                      */ShowDebugData (context' fullUrl' result' null);  									}  									response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  									response.RedirectPermanent (result.FinalUrl);  									finished = true;  								} else {  									if (settings.SSLClientRedirect) {  										//redirect back to http version' use client redirect  										response.Clear ();  										// add a refresh header to the response   										response.AddHeader ("Refresh"' "0;URL=" + result.FinalUrl);  										// add the clientside javascript redirection script  										var finalUrl = HttpUtility.HtmlEncode (result.FinalUrl);  										response.Write ("<html><head><title></title>");  										response.Write (@"<!-- <script language=""javascript"">window.location.replace(""" + finalUrl + @""")</script> -->");  										response.Write ("</head><body><div><a href='" + finalUrl + "'>" + finalUrl + "</a></div></body></html>");  										if (showDebug) {  											/*                                                         string debugMsg = "{0}' {1}' {2}' {3}' {4}";                                                         string productVer = System.Reflection.Assembly.GetExecutingAssembly().GetName(false).Version.ToString();                                                         response.AppendHeader("X-" + prodName + "-Debug"' string.Format(debugMsg' requestUri.AbsoluteUri' result.FinalUrl' result.RewritePath' result.Action' productVer));                                                          */ShowDebugData (context' fullUrl' result' null);  										}  										// send the response  										//891 : reinstate the response.end to stop the entire page loading  										response.End ();  										finished = true;  									} else {  										response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  										response.RedirectPermanent (result.FinalUrl);  										finished = true;  									}  								}  							}  						}  					} else {  						//check for' and do a 301 redirect if required   						if (CheckForRedirects (requestUri' fullUrl' queryStringCol' result' requestType' settings' portalHomeTabId)) {  							if (response != null) {  								if (result.Action == ActionType.Redirect301) {  									response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  									response.RedirectPermanent (result.FinalUrl' false);  									finished = true;  								} else if (result.Action == ActionType.Redirect302) {  									response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  									response.Redirect (result.FinalUrl' false);  									finished = true;  								}  							}  						} else {  							//612 : Don't clear out a 302 redirect if set  							if (result.Action != ActionType.Redirect302 && result.Action != ActionType.Redirect302Now) {  								result.Reason = RedirectReason.Not_Redirected;  								result.FinalUrl = null;  							}  						}  					}  				}  			} else {  				// alias does not exist in database   				// and all attempts to find another have failed   				//this should only happen if the HostPortal does not have any aliases   				result.Action = ActionType.Output404;  				if (response != null) {  					if (showDebug) {  						ShowDebugData (context' fullUrl' result' null);  					}  					result.Reason = RedirectReason.Requested_404;  					//912 : change 404 type to transfer to allow transfer to main portal in single-portal installs  					Handle404OrException (settings' context' null' result' true' showDebug);  					finished = true;  				}  			}  		}  		//404 page ??  		if (settings.TabId404 > 0 && settings.TabId404 == result.TabId) {  			string status = queryStringCol ["status"];  			if (status == "404") {  				//respond with a 404 error  				result.Action = ActionType.Output404;  				result.Reason = RedirectReason.Requested_404_In_Url;  				Handle404OrException (settings' context' null' result' true' showDebug);  			}  		} else {  			if (result.DoRewrite == false && result.CanRewrite != StateBoolean.False && !finished && result.Action == ActionType.Continue) {  				//739 : catch no-extension 404 errors  				string pathWithNoQs = result.OriginalPath;  				if (pathWithNoQs.Contains ("?")) {  					pathWithNoQs = pathWithNoQs.Substring (0' pathWithNoQs.IndexOf ("?"' StringComparison.Ordinal));  				}  				if (!pathWithNoQs.Substring (pathWithNoQs.Length - 5' 5).Contains (".")) {  					//no page extension' output a 404 if the Url is not found  					//766 : check for physical path before passing off as a 404 error  					//829 : change to use action physical path  					//893 : filter by regex pattern to exclude urls which are valid' but show up as extensionless  					if ((request != null && Directory.Exists (result.PhysicalPath)) || Regex.IsMatch (pathWithNoQs' settings.ValidExtensionlessUrlsRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  						//do nothing : it's a request for a valid physical path' maybe including a default document  						result.VirtualPath = StateBoolean.False;  					} else {  						if (!Globals.ServicesFrameworkRegex.IsMatch (context.Request.RawUrl)) {  							//no physical path' intercept the request and hand out a 404 error  							result.Action = ActionType.Output404;  							result.Reason = RedirectReason.Page_404;  							result.VirtualPath = StateBoolean.True;  							//add in a message to explain this 404' becaue it can be cryptic  							result.DebugMessages.Add ("404 Reason : Not found and no extension");  							Handle404OrException (settings' context' null' result' true' showDebug);  						}  					}  				}  			}  		}  		//  show debug messages after extensionless-url special 404 handling  		if (showDebug) {  			ShowDebugData (context' fullUrl' result' null);  		}  	}  } catch (ThreadAbortException) {  	//do nothing' a threadAbortException will have occured from using a server.transfer or response.redirect within the code block.  This is the highest  	//level try/catch block' so we handle it here.  	Thread.ResetAbort ();  } catch (Exception ex) {  	if (showDebug) {  		Services.Exceptions.Exceptions.LogException (ex);  	}  	if (response != null) {  		if (showDebug) {  			ShowDebugData (context' requestUri.AbsoluteUri' result' ex);  		}  		if (result != null) {  			result.Ex = ex;  			result.Reason = RedirectReason.Exception;  		}  		Handle404OrException (settings' context' ex' result' false' showDebug);  	} else {  		if (result != null && result.DebugMessages != null) {  			result.DebugMessages.Add ("Exception: " + ex.Message);  			result.DebugMessages.Add ("Stack Trace: " + ex.StackTrace);  		}  		throw;  	}  } finally {  	//809 : add in new code copied from urlRewrite class in standard Url Rewrite module  	if (context != null && context.Items ["FirstRequest"] != null) {  		context.Items.Remove ("FirstRequest");  		//process any messages in the eventQueue for the Application_Start_FIrstRequest event  		EventQueueController.ProcessMessages ("Application_Start_FirstRequest");  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The following statement contains a magic number: try {  	string fullUrl' querystring;  	//699: get the full url based on the request and the quersytring' rather than the requestUri.ToString()  	//there is a difference in encoding' which can corrupt results when an encoded value is in the querystring  	RewriteController.GetUrlWithQuerystring (request' requestUri' out fullUrl' out querystring);  	showDebug = CheckForDebug (request' queryStringCol' settings.AllowDebugCode);  	string ignoreRegex = settings.IgnoreRegex;  	bool ignoreRequest = IgnoreRequest (result' fullUrl' ignoreRegex' request);  	bool redirectAlias = false;  	if (!ignoreRequest) {  		//set original path  		context.Items ["UrlRewrite:OriginalUrl"] = requestUri.AbsoluteUri;  		//set the path of the result object' and determine if a redirect is allowed on this request  		result.SetOriginalPath (requestUri.ToString ()' settings);  		//737 : set the mobile browser   		result.SetBrowserType (request' response' settings);  		//add to context  		context.Items ["UrlRewrite:BrowserType"] = result.BrowserType.ToString ();  		//839 : split out this check  		result.SetRedirectAllowed (result.OriginalPath' settings);  		//find the portal alias first  		string wrongAlias;  		bool isPrimaryAlias;  		var requestedAlias = GetPortalAlias (settings' fullUrl' out redirectAlias' out isPrimaryAlias' out wrongAlias);  		if (requestedAlias != null) {  			//827 : now get the correct settings for this portal (if not a test request)  			//839 : separate out redirect check as well and move above first redirect test (ConfigurePortalAliasRedirect)  			if (allowSettingsChange) {  				settings = new FriendlyUrlSettings (requestedAlias.PortalID);  				result.SetRedirectAllowed (result.OriginalPath' settings);  			}  			result.PortalAlias = requestedAlias;  			result.PrimaryAlias = requestedAlias;  			//this is the primary alias  			result.PortalId = requestedAlias.PortalID;  			result.CultureCode = requestedAlias.CultureCode;  			//get the portal alias mapping for this portal  			result.PortalAliasMapping = PortalSettingsController.Instance ().GetPortalAliasMappingMode (requestedAlias.PortalID);  			//if requested alias wasn't the primary' we have a replacement' redirects are allowed and the portal alias mapping mode is redirect  			//then do a redirect based on the wrong portal  			if ((redirectAlias && wrongAlias != null) && result.RedirectAllowed && result.PortalAliasMapping != PortalSettings.PortalAliasMapping.Redirect) {  				//this is the alias' we are going to enforce it as the primary alias  				result.PortalAlias = requestedAlias;  				result.PrimaryAlias = requestedAlias;  				//going to redirect this alias because it is incorrect  				//or do we just want to mark as 'check for 301??'  				redirectAlias = ConfigurePortalAliasRedirect (ref result' wrongAlias' requestedAlias.HTTPAlias' false' settings.InternalAliasList' settings);  			} else {  				//do not redirect the wrong alias' but set the primary alias value  				if (wrongAlias != null) {  					//get the portal alias info for the requested alias (which is the wrong one)  					//and set that as the alias' but also set the found alias as the primary  					PortalAliasInfo wrongAliasInfo = PortalAliasController.Instance.GetPortalAlias (wrongAlias);  					if (wrongAliasInfo != null) {  						result.PortalAlias = wrongAliasInfo;  						result.PrimaryAlias = requestedAlias;  					}  				}  			}  		}  	}  	ignoreRegex = settings.IgnoreRegex;  	ignoreRequest = IgnoreRequest (result' fullUrl' ignoreRegex' request);  	if (!ignoreRequest) {  		//check to see if a post request  		if (request.RequestType == "POST") {  			postRequest = true;  		}  		//check the portal alias again.  This time' in more depth now that the portal Id is known   		//this check handles browser types/language specific aliases & mobile aliases  		string primaryHttpAlias;  		if (!redirectAlias && IsPortalAliasIncorrect (context' request' requestUri' result' queryStringCol' settings' parentTraceId' out primaryHttpAlias)) {  			//it was an incorrect alias  			PortalAliasInfo primaryAlias = PortalAliasController.Instance.GetPortalAlias (primaryHttpAlias);  			if (primaryAlias != null)  				result.PrimaryAlias = primaryAlias;  			//try and redirect the alias if the settings allow it  			redirectAlias = RedirectPortalAlias (primaryHttpAlias' ref result' settings);  		}  		if (redirectAlias) {  			//not correct alias for portal : will be redirected  			//perform a 301 redirect if one has already been found  			response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  			response.RedirectPermanent (result.FinalUrl' false);  			finished = true;  		}  		if (!finished) {  			//Check to see if this to be rewritten into default.aspx?tabId=nn format  			//this call is the main rewriting matching call.  It makes the decision on whether it is a   			//physical file' whether it is toe be rewritten or redirected by way of a stored rule  			//Check if we have a standard url  			var uri = new Uri (fullUrl);  			if (uri.PathAndQuery.ToLowerInvariant ().StartsWith ("/" + Globals.glbDefaultPage.ToLowerInvariant ())) {  				result.DoRewrite = true;  				result.Action = ActionType.CheckFor301;  				result.RewritePath = Globals.glbDefaultPage + uri.Query;  			} else {  				bool isPhysicalResource;  				CheckForRewrite (fullUrl' querystring' result' useFriendlyUrls' queryStringCol' settings' out isPhysicalResource' parentTraceId);  			}  			//return 404 if there is no portal alias for a rewritten request  			if (result.DoRewrite && result.PortalAlias == null) {  				//882 : move this logic in from where it was before to here  				//so that non-rewritten requests don't trip over it  				//no portal alias found for the request : that's a 404 error  				result.Action = ActionType.Output404;  				result.Reason = RedirectReason.No_Portal_Alias;  				Handle404OrException (settings' context' null' result' false' showDebug);  				finished = true;  				//cannot fulfil request unless correct portal alias specified  			}  		}  		if (!finished && result.DoRewrite) {  			//check the identified portal alias details for any extra rewrite information required  			//this includes the culture and the skin' which can be placed into the rewrite path  			//This logic is here because it will catch any Urls which are excluded from rewriting  			var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  			if (result.PortalId > -1 && result.HttpAlias != null) {  				string culture;  				string skin;  				BrowserTypes browserType;  				primaryAliases.GetSettingsByPortalIdAndAlias (result.PortalId' result.HttpAlias' out culture' out browserType' out skin);  				//add language code to path if it exists (not null) and if it's not already there  				string rewritePath = result.RewritePath;  				if (RewriteController.AddLanguageCodeToRewritePath (ref rewritePath' culture)) {  					result.CultureCode = culture;  				}  				//852: add skinSrc to path if it exists and if it's not already there  				string debugMessage;  				RewriteController.AddSkinToRewritePath (result.TabId' result.PortalId' ref rewritePath' skin' out debugMessage);  				result.RewritePath = rewritePath;  				//reset back from ref temp var  				if (debugMessage != null) {  					result.DebugMessages.Add (debugMessage);  				}  			}  		}  		if (!finished && result.DoRewrite) {  			//if so' do the rewrite  			if (result.RewritePath.StartsWith (result.Scheme) || result.RewritePath.StartsWith (Globals.glbDefaultPage) == false) {  				if (result.RewritePath.Contains (Globals.glbDefaultPage) == false) {  					RewriterUtils.RewriteUrl (context' "~/" + result.RewritePath);  				} else {  					//if there is no TabId and we have the domain  					if (!result.RewritePath.ToLowerInvariant ().Contains ("tabId=")) {  						RewriterUtils.RewriteUrl (context' "~/" + result.RewritePath);  					} else {  						RewriterUtils.RewriteUrl (context' result.RewritePath);  					}  				}  			} else {  				RewriterUtils.RewriteUrl (context' "~/" + result.RewritePath);  			}  		}  		//confirm which portal the request is for   		if (!finished) {  			IdentifyPortalAlias (context' request' requestUri' result' queryStringCol' settings' parentTraceId);  			if (result.Action == ActionType.Redirect302Now) {  				//performs a 302 redirect if requested  				response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  				response.Redirect (result.FinalUrl' false);  				finished = true;  			} else {  				if (result.Action == ActionType.Redirect301 && !string.IsNullOrEmpty (result.FinalUrl)) {  					finished = true;  					//perform a 301 redirect if one has already been found  					response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  					response.RedirectPermanent (result.FinalUrl' false);  				}  			}  		}  		if (!finished) {  			//check to see if this tab has an external url that should be forwared or not  			finished = CheckForTabExternalForwardOrRedirect (context' ref result' response' settings' parentTraceId);  		}  		//check for a parameter redirect (we had to do all the previous processing to know we are on the right portal and identify the tabid)  		//if the CustomParmRewrite flag is set' it means we already rewrote these parameters' so they have to be correct' and aren't subject to   		//redirection.  The only reason to do a custom parm rewrite is to interpret already-friendly parameters  		if (!finished && !postRequest /* either request is null' or it's not a post - 551 */&& result.HttpAlias != null /* must have a http alias */&& !result.CustomParmRewrite && /* not custom rewritten parms */((settings.EnableCustomProviders && RedirectController.CheckForModuleProviderRedirect (requestUri' ref result' queryStringCol' settings' parentTraceId)) //894 : allow disable of all custom providers  		|| RedirectController.CheckForParameterRedirect (requestUri' ref result' queryStringCol' settings))) {  			//301 redirect to new location based on parameter match  			if (response != null) {  				switch (result.Action) {  				case ActionType.Redirect301:  					response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  					response.RedirectPermanent (result.FinalUrl);  					break;  				case ActionType.Redirect302:  					response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  					response.Redirect (result.FinalUrl);  					break;  				case ActionType.Output404:  					response.AppendHeader ("X-Result-Reason"' result.Reason.ToString ().Replace ("_"' " "));  					Handle404OrException (settings' context' null' result' true' showDebug);  					break;  				}  			}  			finished = true;  		}  		//shifted until after the 301 redirect code to allow redirects to be checked for pages which have no rewrite value  		//look for a 404 result from the rewrite' because of a deleted page or rule  		if (!finished && result.Action == ActionType.Output404) {  			if (result.OriginalPath.Equals (result.HttpAlias' StringComparison.InvariantCultureIgnoreCase) && result.PortalAlias != null && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  				//Request for domain with no page identified (and no home page set in Site Settings)  				result.Action = ActionType.Continue;  			} else {  				finished = true;  				response.AppendHeader ("X-Result-Reason"' result.Reason.ToString ().Replace ("_"' " "));  				if (showDebug) {  					ShowDebugData (context' requestUri.AbsoluteUri' result' null);  				}  				//show the 404 page if configured  				result.Reason = RedirectReason.Requested_404;  				Handle404OrException (settings' context' null' result' true' showDebug);  			}  		}  		if (!finished) {  			//add the portal settings to the app context if the portal alias has been found and is correct  			if (result.PortalId != -1 && result.PortalAlias != null) {  				//for invalid tab id other than -1' show the 404 page  				TabInfo tabInfo = TabController.Instance.GetTab (result.TabId' result.PortalId' false);  				if (tabInfo == null && result.TabId > -1) {  					finished = true;  					if (showDebug) {  						ShowDebugData (context' requestUri.AbsoluteUri' result' null);  					}  					//show the 404 page if configured  					result.Action = ActionType.Output404;  					result.Reason = RedirectReason.Requested_404;  					response.AppendHeader ("X-Result-Reason"' result.Reason.ToString ().Replace ("_"' " "));  					Handle404OrException (settings' context' null' result' true' showDebug);  				} else {  					Globals.SetApplicationName (result.PortalId);  					// load the PortalSettings into current context   					var portalSettings = new PortalSettings (result.TabId' result.PortalAlias);  					//set the primary alias if one was specified  					if (result.PrimaryAlias != null)  						portalSettings.PrimaryAlias = result.PrimaryAlias;  					if (result.CultureCode != null && fullUrl.Contains (result.CultureCode) && portalSettings.DefaultLanguage == result.CultureCode) {  						//when the request culture code is the same as the portal default' check for a 301 redirect' because we try and remove the language from the url where possible  						result.Action = ActionType.CheckFor301;  					}  					int portalHomeTabId = portalSettings.HomeTabId;  					if (context != null && portalSettings != null && !context.Items.Contains ("PortalSettings")) {  						context.Items.Add ("PortalSettings"' portalSettings);  						// load PortalSettings and HostSettings dictionaries into current context  						// specifically for use in DotNetNuke.Web.Client' which can't reference DotNetNuke.dll to get settings the normal way  						context.Items.Add ("PortalSettingsDictionary"' PortalController.Instance.GetPortalSettings (portalSettings.PortalId));  						context.Items.Add ("HostSettingsDictionary"' HostController.Instance.GetSettingsDictionary ());  					}  					//check if a secure redirection is needed  					//this would be done earlier in the piece' but need to know the portal settings' tabid etc before processing it  					bool redirectSecure = CheckForSecureRedirect (portalSettings' requestUri' result' queryStringCol' settings);  					if (redirectSecure) {  						if (response != null) {  							//702 : don't check final url until checked for null reference first  							if (result.FinalUrl != null) {  								if (result.FinalUrl.StartsWith ("https://")) {  									if (showDebug) {  										/*                                                     string debugMsg = "{0}' {1}' {2}' {3}' {4}";                                                     string productVer = System.Reflection.Assembly.GetExecutingAssembly().GetName(false).Version.ToString();                                                     response.AppendHeader("X-" + prodName + "-Debug"' string.Format(debugMsg' requestUri.AbsoluteUri' result.FinalUrl' result.RewritePath' result.Action' productVer));                                                      */ShowDebugData (context' fullUrl' result' null);  									}  									response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  									response.RedirectPermanent (result.FinalUrl);  									finished = true;  								} else {  									if (settings.SSLClientRedirect) {  										//redirect back to http version' use client redirect  										response.Clear ();  										// add a refresh header to the response   										response.AddHeader ("Refresh"' "0;URL=" + result.FinalUrl);  										// add the clientside javascript redirection script  										var finalUrl = HttpUtility.HtmlEncode (result.FinalUrl);  										response.Write ("<html><head><title></title>");  										response.Write (@"<!-- <script language=""javascript"">window.location.replace(""" + finalUrl + @""")</script> -->");  										response.Write ("</head><body><div><a href='" + finalUrl + "'>" + finalUrl + "</a></div></body></html>");  										if (showDebug) {  											/*                                                         string debugMsg = "{0}' {1}' {2}' {3}' {4}";                                                         string productVer = System.Reflection.Assembly.GetExecutingAssembly().GetName(false).Version.ToString();                                                         response.AppendHeader("X-" + prodName + "-Debug"' string.Format(debugMsg' requestUri.AbsoluteUri' result.FinalUrl' result.RewritePath' result.Action' productVer));                                                          */ShowDebugData (context' fullUrl' result' null);  										}  										// send the response  										//891 : reinstate the response.end to stop the entire page loading  										response.End ();  										finished = true;  									} else {  										response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  										response.RedirectPermanent (result.FinalUrl);  										finished = true;  									}  								}  							}  						}  					} else {  						//check for' and do a 301 redirect if required   						if (CheckForRedirects (requestUri' fullUrl' queryStringCol' result' requestType' settings' portalHomeTabId)) {  							if (response != null) {  								if (result.Action == ActionType.Redirect301) {  									response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  									response.RedirectPermanent (result.FinalUrl' false);  									finished = true;  								} else if (result.Action == ActionType.Redirect302) {  									response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  									response.Redirect (result.FinalUrl' false);  									finished = true;  								}  							}  						} else {  							//612 : Don't clear out a 302 redirect if set  							if (result.Action != ActionType.Redirect302 && result.Action != ActionType.Redirect302Now) {  								result.Reason = RedirectReason.Not_Redirected;  								result.FinalUrl = null;  							}  						}  					}  				}  			} else {  				// alias does not exist in database   				// and all attempts to find another have failed   				//this should only happen if the HostPortal does not have any aliases   				result.Action = ActionType.Output404;  				if (response != null) {  					if (showDebug) {  						ShowDebugData (context' fullUrl' result' null);  					}  					result.Reason = RedirectReason.Requested_404;  					//912 : change 404 type to transfer to allow transfer to main portal in single-portal installs  					Handle404OrException (settings' context' null' result' true' showDebug);  					finished = true;  				}  			}  		}  		//404 page ??  		if (settings.TabId404 > 0 && settings.TabId404 == result.TabId) {  			string status = queryStringCol ["status"];  			if (status == "404") {  				//respond with a 404 error  				result.Action = ActionType.Output404;  				result.Reason = RedirectReason.Requested_404_In_Url;  				Handle404OrException (settings' context' null' result' true' showDebug);  			}  		} else {  			if (result.DoRewrite == false && result.CanRewrite != StateBoolean.False && !finished && result.Action == ActionType.Continue) {  				//739 : catch no-extension 404 errors  				string pathWithNoQs = result.OriginalPath;  				if (pathWithNoQs.Contains ("?")) {  					pathWithNoQs = pathWithNoQs.Substring (0' pathWithNoQs.IndexOf ("?"' StringComparison.Ordinal));  				}  				if (!pathWithNoQs.Substring (pathWithNoQs.Length - 5' 5).Contains (".")) {  					//no page extension' output a 404 if the Url is not found  					//766 : check for physical path before passing off as a 404 error  					//829 : change to use action physical path  					//893 : filter by regex pattern to exclude urls which are valid' but show up as extensionless  					if ((request != null && Directory.Exists (result.PhysicalPath)) || Regex.IsMatch (pathWithNoQs' settings.ValidExtensionlessUrlsRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  						//do nothing : it's a request for a valid physical path' maybe including a default document  						result.VirtualPath = StateBoolean.False;  					} else {  						if (!Globals.ServicesFrameworkRegex.IsMatch (context.Request.RawUrl)) {  							//no physical path' intercept the request and hand out a 404 error  							result.Action = ActionType.Output404;  							result.Reason = RedirectReason.Page_404;  							result.VirtualPath = StateBoolean.True;  							//add in a message to explain this 404' becaue it can be cryptic  							result.DebugMessages.Add ("404 Reason : Not found and no extension");  							Handle404OrException (settings' context' null' result' true' showDebug);  						}  					}  				}  			}  		}  		//  show debug messages after extensionless-url special 404 handling  		if (showDebug) {  			ShowDebugData (context' fullUrl' result' null);  		}  	}  } catch (ThreadAbortException) {  	//do nothing' a threadAbortException will have occured from using a server.transfer or response.redirect within the code block.  This is the highest  	//level try/catch block' so we handle it here.  	Thread.ResetAbort ();  } catch (Exception ex) {  	if (showDebug) {  		Services.Exceptions.Exceptions.LogException (ex);  	}  	if (response != null) {  		if (showDebug) {  			ShowDebugData (context' requestUri.AbsoluteUri' result' ex);  		}  		if (result != null) {  			result.Ex = ex;  			result.Reason = RedirectReason.Exception;  		}  		Handle404OrException (settings' context' ex' result' false' showDebug);  	} else {  		if (result != null && result.DebugMessages != null) {  			result.DebugMessages.Add ("Exception: " + ex.Message);  			result.DebugMessages.Add ("Stack Trace: " + ex.StackTrace);  		}  		throw;  	}  } finally {  	//809 : add in new code copied from urlRewrite class in standard Url Rewrite module  	if (context != null && context.Items ["FirstRequest"] != null) {  		context.Items.Remove ("FirstRequest");  		//process any messages in the eventQueue for the Application_Start_FIrstRequest event  		EventQueueController.ProcessMessages ("Application_Start_FirstRequest");  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The following statement contains a magic number: if (!ignoreRequest) {  	//check to see if a post request  	if (request.RequestType == "POST") {  		postRequest = true;  	}  	//check the portal alias again.  This time' in more depth now that the portal Id is known   	//this check handles browser types/language specific aliases & mobile aliases  	string primaryHttpAlias;  	if (!redirectAlias && IsPortalAliasIncorrect (context' request' requestUri' result' queryStringCol' settings' parentTraceId' out primaryHttpAlias)) {  		//it was an incorrect alias  		PortalAliasInfo primaryAlias = PortalAliasController.Instance.GetPortalAlias (primaryHttpAlias);  		if (primaryAlias != null)  			result.PrimaryAlias = primaryAlias;  		//try and redirect the alias if the settings allow it  		redirectAlias = RedirectPortalAlias (primaryHttpAlias' ref result' settings);  	}  	if (redirectAlias) {  		//not correct alias for portal : will be redirected  		//perform a 301 redirect if one has already been found  		response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  		response.RedirectPermanent (result.FinalUrl' false);  		finished = true;  	}  	if (!finished) {  		//Check to see if this to be rewritten into default.aspx?tabId=nn format  		//this call is the main rewriting matching call.  It makes the decision on whether it is a   		//physical file' whether it is toe be rewritten or redirected by way of a stored rule  		//Check if we have a standard url  		var uri = new Uri (fullUrl);  		if (uri.PathAndQuery.ToLowerInvariant ().StartsWith ("/" + Globals.glbDefaultPage.ToLowerInvariant ())) {  			result.DoRewrite = true;  			result.Action = ActionType.CheckFor301;  			result.RewritePath = Globals.glbDefaultPage + uri.Query;  		} else {  			bool isPhysicalResource;  			CheckForRewrite (fullUrl' querystring' result' useFriendlyUrls' queryStringCol' settings' out isPhysicalResource' parentTraceId);  		}  		//return 404 if there is no portal alias for a rewritten request  		if (result.DoRewrite && result.PortalAlias == null) {  			//882 : move this logic in from where it was before to here  			//so that non-rewritten requests don't trip over it  			//no portal alias found for the request : that's a 404 error  			result.Action = ActionType.Output404;  			result.Reason = RedirectReason.No_Portal_Alias;  			Handle404OrException (settings' context' null' result' false' showDebug);  			finished = true;  			//cannot fulfil request unless correct portal alias specified  		}  	}  	if (!finished && result.DoRewrite) {  		//check the identified portal alias details for any extra rewrite information required  		//this includes the culture and the skin' which can be placed into the rewrite path  		//This logic is here because it will catch any Urls which are excluded from rewriting  		var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  		if (result.PortalId > -1 && result.HttpAlias != null) {  			string culture;  			string skin;  			BrowserTypes browserType;  			primaryAliases.GetSettingsByPortalIdAndAlias (result.PortalId' result.HttpAlias' out culture' out browserType' out skin);  			//add language code to path if it exists (not null) and if it's not already there  			string rewritePath = result.RewritePath;  			if (RewriteController.AddLanguageCodeToRewritePath (ref rewritePath' culture)) {  				result.CultureCode = culture;  			}  			//852: add skinSrc to path if it exists and if it's not already there  			string debugMessage;  			RewriteController.AddSkinToRewritePath (result.TabId' result.PortalId' ref rewritePath' skin' out debugMessage);  			result.RewritePath = rewritePath;  			//reset back from ref temp var  			if (debugMessage != null) {  				result.DebugMessages.Add (debugMessage);  			}  		}  	}  	if (!finished && result.DoRewrite) {  		//if so' do the rewrite  		if (result.RewritePath.StartsWith (result.Scheme) || result.RewritePath.StartsWith (Globals.glbDefaultPage) == false) {  			if (result.RewritePath.Contains (Globals.glbDefaultPage) == false) {  				RewriterUtils.RewriteUrl (context' "~/" + result.RewritePath);  			} else {  				//if there is no TabId and we have the domain  				if (!result.RewritePath.ToLowerInvariant ().Contains ("tabId=")) {  					RewriterUtils.RewriteUrl (context' "~/" + result.RewritePath);  				} else {  					RewriterUtils.RewriteUrl (context' result.RewritePath);  				}  			}  		} else {  			RewriterUtils.RewriteUrl (context' "~/" + result.RewritePath);  		}  	}  	//confirm which portal the request is for   	if (!finished) {  		IdentifyPortalAlias (context' request' requestUri' result' queryStringCol' settings' parentTraceId);  		if (result.Action == ActionType.Redirect302Now) {  			//performs a 302 redirect if requested  			response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  			response.Redirect (result.FinalUrl' false);  			finished = true;  		} else {  			if (result.Action == ActionType.Redirect301 && !string.IsNullOrEmpty (result.FinalUrl)) {  				finished = true;  				//perform a 301 redirect if one has already been found  				response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  				response.RedirectPermanent (result.FinalUrl' false);  			}  		}  	}  	if (!finished) {  		//check to see if this tab has an external url that should be forwared or not  		finished = CheckForTabExternalForwardOrRedirect (context' ref result' response' settings' parentTraceId);  	}  	//check for a parameter redirect (we had to do all the previous processing to know we are on the right portal and identify the tabid)  	//if the CustomParmRewrite flag is set' it means we already rewrote these parameters' so they have to be correct' and aren't subject to   	//redirection.  The only reason to do a custom parm rewrite is to interpret already-friendly parameters  	if (!finished && !postRequest /* either request is null' or it's not a post - 551 */&& result.HttpAlias != null /* must have a http alias */&& !result.CustomParmRewrite && /* not custom rewritten parms */((settings.EnableCustomProviders && RedirectController.CheckForModuleProviderRedirect (requestUri' ref result' queryStringCol' settings' parentTraceId)) //894 : allow disable of all custom providers  	|| RedirectController.CheckForParameterRedirect (requestUri' ref result' queryStringCol' settings))) {  		//301 redirect to new location based on parameter match  		if (response != null) {  			switch (result.Action) {  			case ActionType.Redirect301:  				response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  				response.RedirectPermanent (result.FinalUrl);  				break;  			case ActionType.Redirect302:  				response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  				response.Redirect (result.FinalUrl);  				break;  			case ActionType.Output404:  				response.AppendHeader ("X-Result-Reason"' result.Reason.ToString ().Replace ("_"' " "));  				Handle404OrException (settings' context' null' result' true' showDebug);  				break;  			}  		}  		finished = true;  	}  	//shifted until after the 301 redirect code to allow redirects to be checked for pages which have no rewrite value  	//look for a 404 result from the rewrite' because of a deleted page or rule  	if (!finished && result.Action == ActionType.Output404) {  		if (result.OriginalPath.Equals (result.HttpAlias' StringComparison.InvariantCultureIgnoreCase) && result.PortalAlias != null && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  			//Request for domain with no page identified (and no home page set in Site Settings)  			result.Action = ActionType.Continue;  		} else {  			finished = true;  			response.AppendHeader ("X-Result-Reason"' result.Reason.ToString ().Replace ("_"' " "));  			if (showDebug) {  				ShowDebugData (context' requestUri.AbsoluteUri' result' null);  			}  			//show the 404 page if configured  			result.Reason = RedirectReason.Requested_404;  			Handle404OrException (settings' context' null' result' true' showDebug);  		}  	}  	if (!finished) {  		//add the portal settings to the app context if the portal alias has been found and is correct  		if (result.PortalId != -1 && result.PortalAlias != null) {  			//for invalid tab id other than -1' show the 404 page  			TabInfo tabInfo = TabController.Instance.GetTab (result.TabId' result.PortalId' false);  			if (tabInfo == null && result.TabId > -1) {  				finished = true;  				if (showDebug) {  					ShowDebugData (context' requestUri.AbsoluteUri' result' null);  				}  				//show the 404 page if configured  				result.Action = ActionType.Output404;  				result.Reason = RedirectReason.Requested_404;  				response.AppendHeader ("X-Result-Reason"' result.Reason.ToString ().Replace ("_"' " "));  				Handle404OrException (settings' context' null' result' true' showDebug);  			} else {  				Globals.SetApplicationName (result.PortalId);  				// load the PortalSettings into current context   				var portalSettings = new PortalSettings (result.TabId' result.PortalAlias);  				//set the primary alias if one was specified  				if (result.PrimaryAlias != null)  					portalSettings.PrimaryAlias = result.PrimaryAlias;  				if (result.CultureCode != null && fullUrl.Contains (result.CultureCode) && portalSettings.DefaultLanguage == result.CultureCode) {  					//when the request culture code is the same as the portal default' check for a 301 redirect' because we try and remove the language from the url where possible  					result.Action = ActionType.CheckFor301;  				}  				int portalHomeTabId = portalSettings.HomeTabId;  				if (context != null && portalSettings != null && !context.Items.Contains ("PortalSettings")) {  					context.Items.Add ("PortalSettings"' portalSettings);  					// load PortalSettings and HostSettings dictionaries into current context  					// specifically for use in DotNetNuke.Web.Client' which can't reference DotNetNuke.dll to get settings the normal way  					context.Items.Add ("PortalSettingsDictionary"' PortalController.Instance.GetPortalSettings (portalSettings.PortalId));  					context.Items.Add ("HostSettingsDictionary"' HostController.Instance.GetSettingsDictionary ());  				}  				//check if a secure redirection is needed  				//this would be done earlier in the piece' but need to know the portal settings' tabid etc before processing it  				bool redirectSecure = CheckForSecureRedirect (portalSettings' requestUri' result' queryStringCol' settings);  				if (redirectSecure) {  					if (response != null) {  						//702 : don't check final url until checked for null reference first  						if (result.FinalUrl != null) {  							if (result.FinalUrl.StartsWith ("https://")) {  								if (showDebug) {  									/*                                                     string debugMsg = "{0}' {1}' {2}' {3}' {4}";                                                     string productVer = System.Reflection.Assembly.GetExecutingAssembly().GetName(false).Version.ToString();                                                     response.AppendHeader("X-" + prodName + "-Debug"' string.Format(debugMsg' requestUri.AbsoluteUri' result.FinalUrl' result.RewritePath' result.Action' productVer));                                                      */ShowDebugData (context' fullUrl' result' null);  								}  								response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  								response.RedirectPermanent (result.FinalUrl);  								finished = true;  							} else {  								if (settings.SSLClientRedirect) {  									//redirect back to http version' use client redirect  									response.Clear ();  									// add a refresh header to the response   									response.AddHeader ("Refresh"' "0;URL=" + result.FinalUrl);  									// add the clientside javascript redirection script  									var finalUrl = HttpUtility.HtmlEncode (result.FinalUrl);  									response.Write ("<html><head><title></title>");  									response.Write (@"<!-- <script language=""javascript"">window.location.replace(""" + finalUrl + @""")</script> -->");  									response.Write ("</head><body><div><a href='" + finalUrl + "'>" + finalUrl + "</a></div></body></html>");  									if (showDebug) {  										/*                                                         string debugMsg = "{0}' {1}' {2}' {3}' {4}";                                                         string productVer = System.Reflection.Assembly.GetExecutingAssembly().GetName(false).Version.ToString();                                                         response.AppendHeader("X-" + prodName + "-Debug"' string.Format(debugMsg' requestUri.AbsoluteUri' result.FinalUrl' result.RewritePath' result.Action' productVer));                                                          */ShowDebugData (context' fullUrl' result' null);  									}  									// send the response  									//891 : reinstate the response.end to stop the entire page loading  									response.End ();  									finished = true;  								} else {  									response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  									response.RedirectPermanent (result.FinalUrl);  									finished = true;  								}  							}  						}  					}  				} else {  					//check for' and do a 301 redirect if required   					if (CheckForRedirects (requestUri' fullUrl' queryStringCol' result' requestType' settings' portalHomeTabId)) {  						if (response != null) {  							if (result.Action == ActionType.Redirect301) {  								response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  								response.RedirectPermanent (result.FinalUrl' false);  								finished = true;  							} else if (result.Action == ActionType.Redirect302) {  								response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  								response.Redirect (result.FinalUrl' false);  								finished = true;  							}  						}  					} else {  						//612 : Don't clear out a 302 redirect if set  						if (result.Action != ActionType.Redirect302 && result.Action != ActionType.Redirect302Now) {  							result.Reason = RedirectReason.Not_Redirected;  							result.FinalUrl = null;  						}  					}  				}  			}  		} else {  			// alias does not exist in database   			// and all attempts to find another have failed   			//this should only happen if the HostPortal does not have any aliases   			result.Action = ActionType.Output404;  			if (response != null) {  				if (showDebug) {  					ShowDebugData (context' fullUrl' result' null);  				}  				result.Reason = RedirectReason.Requested_404;  				//912 : change 404 type to transfer to allow transfer to main portal in single-portal installs  				Handle404OrException (settings' context' null' result' true' showDebug);  				finished = true;  			}  		}  	}  	//404 page ??  	if (settings.TabId404 > 0 && settings.TabId404 == result.TabId) {  		string status = queryStringCol ["status"];  		if (status == "404") {  			//respond with a 404 error  			result.Action = ActionType.Output404;  			result.Reason = RedirectReason.Requested_404_In_Url;  			Handle404OrException (settings' context' null' result' true' showDebug);  		}  	} else {  		if (result.DoRewrite == false && result.CanRewrite != StateBoolean.False && !finished && result.Action == ActionType.Continue) {  			//739 : catch no-extension 404 errors  			string pathWithNoQs = result.OriginalPath;  			if (pathWithNoQs.Contains ("?")) {  				pathWithNoQs = pathWithNoQs.Substring (0' pathWithNoQs.IndexOf ("?"' StringComparison.Ordinal));  			}  			if (!pathWithNoQs.Substring (pathWithNoQs.Length - 5' 5).Contains (".")) {  				//no page extension' output a 404 if the Url is not found  				//766 : check for physical path before passing off as a 404 error  				//829 : change to use action physical path  				//893 : filter by regex pattern to exclude urls which are valid' but show up as extensionless  				if ((request != null && Directory.Exists (result.PhysicalPath)) || Regex.IsMatch (pathWithNoQs' settings.ValidExtensionlessUrlsRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  					//do nothing : it's a request for a valid physical path' maybe including a default document  					result.VirtualPath = StateBoolean.False;  				} else {  					if (!Globals.ServicesFrameworkRegex.IsMatch (context.Request.RawUrl)) {  						//no physical path' intercept the request and hand out a 404 error  						result.Action = ActionType.Output404;  						result.Reason = RedirectReason.Page_404;  						result.VirtualPath = StateBoolean.True;  						//add in a message to explain this 404' becaue it can be cryptic  						result.DebugMessages.Add ("404 Reason : Not found and no extension");  						Handle404OrException (settings' context' null' result' true' showDebug);  					}  				}  			}  		}  	}  	//  show debug messages after extensionless-url special 404 handling  	if (showDebug) {  		ShowDebugData (context' fullUrl' result' null);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The following statement contains a magic number: if (!ignoreRequest) {  	//check to see if a post request  	if (request.RequestType == "POST") {  		postRequest = true;  	}  	//check the portal alias again.  This time' in more depth now that the portal Id is known   	//this check handles browser types/language specific aliases & mobile aliases  	string primaryHttpAlias;  	if (!redirectAlias && IsPortalAliasIncorrect (context' request' requestUri' result' queryStringCol' settings' parentTraceId' out primaryHttpAlias)) {  		//it was an incorrect alias  		PortalAliasInfo primaryAlias = PortalAliasController.Instance.GetPortalAlias (primaryHttpAlias);  		if (primaryAlias != null)  			result.PrimaryAlias = primaryAlias;  		//try and redirect the alias if the settings allow it  		redirectAlias = RedirectPortalAlias (primaryHttpAlias' ref result' settings);  	}  	if (redirectAlias) {  		//not correct alias for portal : will be redirected  		//perform a 301 redirect if one has already been found  		response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  		response.RedirectPermanent (result.FinalUrl' false);  		finished = true;  	}  	if (!finished) {  		//Check to see if this to be rewritten into default.aspx?tabId=nn format  		//this call is the main rewriting matching call.  It makes the decision on whether it is a   		//physical file' whether it is toe be rewritten or redirected by way of a stored rule  		//Check if we have a standard url  		var uri = new Uri (fullUrl);  		if (uri.PathAndQuery.ToLowerInvariant ().StartsWith ("/" + Globals.glbDefaultPage.ToLowerInvariant ())) {  			result.DoRewrite = true;  			result.Action = ActionType.CheckFor301;  			result.RewritePath = Globals.glbDefaultPage + uri.Query;  		} else {  			bool isPhysicalResource;  			CheckForRewrite (fullUrl' querystring' result' useFriendlyUrls' queryStringCol' settings' out isPhysicalResource' parentTraceId);  		}  		//return 404 if there is no portal alias for a rewritten request  		if (result.DoRewrite && result.PortalAlias == null) {  			//882 : move this logic in from where it was before to here  			//so that non-rewritten requests don't trip over it  			//no portal alias found for the request : that's a 404 error  			result.Action = ActionType.Output404;  			result.Reason = RedirectReason.No_Portal_Alias;  			Handle404OrException (settings' context' null' result' false' showDebug);  			finished = true;  			//cannot fulfil request unless correct portal alias specified  		}  	}  	if (!finished && result.DoRewrite) {  		//check the identified portal alias details for any extra rewrite information required  		//this includes the culture and the skin' which can be placed into the rewrite path  		//This logic is here because it will catch any Urls which are excluded from rewriting  		var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  		if (result.PortalId > -1 && result.HttpAlias != null) {  			string culture;  			string skin;  			BrowserTypes browserType;  			primaryAliases.GetSettingsByPortalIdAndAlias (result.PortalId' result.HttpAlias' out culture' out browserType' out skin);  			//add language code to path if it exists (not null) and if it's not already there  			string rewritePath = result.RewritePath;  			if (RewriteController.AddLanguageCodeToRewritePath (ref rewritePath' culture)) {  				result.CultureCode = culture;  			}  			//852: add skinSrc to path if it exists and if it's not already there  			string debugMessage;  			RewriteController.AddSkinToRewritePath (result.TabId' result.PortalId' ref rewritePath' skin' out debugMessage);  			result.RewritePath = rewritePath;  			//reset back from ref temp var  			if (debugMessage != null) {  				result.DebugMessages.Add (debugMessage);  			}  		}  	}  	if (!finished && result.DoRewrite) {  		//if so' do the rewrite  		if (result.RewritePath.StartsWith (result.Scheme) || result.RewritePath.StartsWith (Globals.glbDefaultPage) == false) {  			if (result.RewritePath.Contains (Globals.glbDefaultPage) == false) {  				RewriterUtils.RewriteUrl (context' "~/" + result.RewritePath);  			} else {  				//if there is no TabId and we have the domain  				if (!result.RewritePath.ToLowerInvariant ().Contains ("tabId=")) {  					RewriterUtils.RewriteUrl (context' "~/" + result.RewritePath);  				} else {  					RewriterUtils.RewriteUrl (context' result.RewritePath);  				}  			}  		} else {  			RewriterUtils.RewriteUrl (context' "~/" + result.RewritePath);  		}  	}  	//confirm which portal the request is for   	if (!finished) {  		IdentifyPortalAlias (context' request' requestUri' result' queryStringCol' settings' parentTraceId);  		if (result.Action == ActionType.Redirect302Now) {  			//performs a 302 redirect if requested  			response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  			response.Redirect (result.FinalUrl' false);  			finished = true;  		} else {  			if (result.Action == ActionType.Redirect301 && !string.IsNullOrEmpty (result.FinalUrl)) {  				finished = true;  				//perform a 301 redirect if one has already been found  				response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  				response.RedirectPermanent (result.FinalUrl' false);  			}  		}  	}  	if (!finished) {  		//check to see if this tab has an external url that should be forwared or not  		finished = CheckForTabExternalForwardOrRedirect (context' ref result' response' settings' parentTraceId);  	}  	//check for a parameter redirect (we had to do all the previous processing to know we are on the right portal and identify the tabid)  	//if the CustomParmRewrite flag is set' it means we already rewrote these parameters' so they have to be correct' and aren't subject to   	//redirection.  The only reason to do a custom parm rewrite is to interpret already-friendly parameters  	if (!finished && !postRequest /* either request is null' or it's not a post - 551 */&& result.HttpAlias != null /* must have a http alias */&& !result.CustomParmRewrite && /* not custom rewritten parms */((settings.EnableCustomProviders && RedirectController.CheckForModuleProviderRedirect (requestUri' ref result' queryStringCol' settings' parentTraceId)) //894 : allow disable of all custom providers  	|| RedirectController.CheckForParameterRedirect (requestUri' ref result' queryStringCol' settings))) {  		//301 redirect to new location based on parameter match  		if (response != null) {  			switch (result.Action) {  			case ActionType.Redirect301:  				response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  				response.RedirectPermanent (result.FinalUrl);  				break;  			case ActionType.Redirect302:  				response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  				response.Redirect (result.FinalUrl);  				break;  			case ActionType.Output404:  				response.AppendHeader ("X-Result-Reason"' result.Reason.ToString ().Replace ("_"' " "));  				Handle404OrException (settings' context' null' result' true' showDebug);  				break;  			}  		}  		finished = true;  	}  	//shifted until after the 301 redirect code to allow redirects to be checked for pages which have no rewrite value  	//look for a 404 result from the rewrite' because of a deleted page or rule  	if (!finished && result.Action == ActionType.Output404) {  		if (result.OriginalPath.Equals (result.HttpAlias' StringComparison.InvariantCultureIgnoreCase) && result.PortalAlias != null && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  			//Request for domain with no page identified (and no home page set in Site Settings)  			result.Action = ActionType.Continue;  		} else {  			finished = true;  			response.AppendHeader ("X-Result-Reason"' result.Reason.ToString ().Replace ("_"' " "));  			if (showDebug) {  				ShowDebugData (context' requestUri.AbsoluteUri' result' null);  			}  			//show the 404 page if configured  			result.Reason = RedirectReason.Requested_404;  			Handle404OrException (settings' context' null' result' true' showDebug);  		}  	}  	if (!finished) {  		//add the portal settings to the app context if the portal alias has been found and is correct  		if (result.PortalId != -1 && result.PortalAlias != null) {  			//for invalid tab id other than -1' show the 404 page  			TabInfo tabInfo = TabController.Instance.GetTab (result.TabId' result.PortalId' false);  			if (tabInfo == null && result.TabId > -1) {  				finished = true;  				if (showDebug) {  					ShowDebugData (context' requestUri.AbsoluteUri' result' null);  				}  				//show the 404 page if configured  				result.Action = ActionType.Output404;  				result.Reason = RedirectReason.Requested_404;  				response.AppendHeader ("X-Result-Reason"' result.Reason.ToString ().Replace ("_"' " "));  				Handle404OrException (settings' context' null' result' true' showDebug);  			} else {  				Globals.SetApplicationName (result.PortalId);  				// load the PortalSettings into current context   				var portalSettings = new PortalSettings (result.TabId' result.PortalAlias);  				//set the primary alias if one was specified  				if (result.PrimaryAlias != null)  					portalSettings.PrimaryAlias = result.PrimaryAlias;  				if (result.CultureCode != null && fullUrl.Contains (result.CultureCode) && portalSettings.DefaultLanguage == result.CultureCode) {  					//when the request culture code is the same as the portal default' check for a 301 redirect' because we try and remove the language from the url where possible  					result.Action = ActionType.CheckFor301;  				}  				int portalHomeTabId = portalSettings.HomeTabId;  				if (context != null && portalSettings != null && !context.Items.Contains ("PortalSettings")) {  					context.Items.Add ("PortalSettings"' portalSettings);  					// load PortalSettings and HostSettings dictionaries into current context  					// specifically for use in DotNetNuke.Web.Client' which can't reference DotNetNuke.dll to get settings the normal way  					context.Items.Add ("PortalSettingsDictionary"' PortalController.Instance.GetPortalSettings (portalSettings.PortalId));  					context.Items.Add ("HostSettingsDictionary"' HostController.Instance.GetSettingsDictionary ());  				}  				//check if a secure redirection is needed  				//this would be done earlier in the piece' but need to know the portal settings' tabid etc before processing it  				bool redirectSecure = CheckForSecureRedirect (portalSettings' requestUri' result' queryStringCol' settings);  				if (redirectSecure) {  					if (response != null) {  						//702 : don't check final url until checked for null reference first  						if (result.FinalUrl != null) {  							if (result.FinalUrl.StartsWith ("https://")) {  								if (showDebug) {  									/*                                                     string debugMsg = "{0}' {1}' {2}' {3}' {4}";                                                     string productVer = System.Reflection.Assembly.GetExecutingAssembly().GetName(false).Version.ToString();                                                     response.AppendHeader("X-" + prodName + "-Debug"' string.Format(debugMsg' requestUri.AbsoluteUri' result.FinalUrl' result.RewritePath' result.Action' productVer));                                                      */ShowDebugData (context' fullUrl' result' null);  								}  								response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  								response.RedirectPermanent (result.FinalUrl);  								finished = true;  							} else {  								if (settings.SSLClientRedirect) {  									//redirect back to http version' use client redirect  									response.Clear ();  									// add a refresh header to the response   									response.AddHeader ("Refresh"' "0;URL=" + result.FinalUrl);  									// add the clientside javascript redirection script  									var finalUrl = HttpUtility.HtmlEncode (result.FinalUrl);  									response.Write ("<html><head><title></title>");  									response.Write (@"<!-- <script language=""javascript"">window.location.replace(""" + finalUrl + @""")</script> -->");  									response.Write ("</head><body><div><a href='" + finalUrl + "'>" + finalUrl + "</a></div></body></html>");  									if (showDebug) {  										/*                                                         string debugMsg = "{0}' {1}' {2}' {3}' {4}";                                                         string productVer = System.Reflection.Assembly.GetExecutingAssembly().GetName(false).Version.ToString();                                                         response.AppendHeader("X-" + prodName + "-Debug"' string.Format(debugMsg' requestUri.AbsoluteUri' result.FinalUrl' result.RewritePath' result.Action' productVer));                                                          */ShowDebugData (context' fullUrl' result' null);  									}  									// send the response  									//891 : reinstate the response.end to stop the entire page loading  									response.End ();  									finished = true;  								} else {  									response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  									response.RedirectPermanent (result.FinalUrl);  									finished = true;  								}  							}  						}  					}  				} else {  					//check for' and do a 301 redirect if required   					if (CheckForRedirects (requestUri' fullUrl' queryStringCol' result' requestType' settings' portalHomeTabId)) {  						if (response != null) {  							if (result.Action == ActionType.Redirect301) {  								response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  								response.RedirectPermanent (result.FinalUrl' false);  								finished = true;  							} else if (result.Action == ActionType.Redirect302) {  								response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  								response.Redirect (result.FinalUrl' false);  								finished = true;  							}  						}  					} else {  						//612 : Don't clear out a 302 redirect if set  						if (result.Action != ActionType.Redirect302 && result.Action != ActionType.Redirect302Now) {  							result.Reason = RedirectReason.Not_Redirected;  							result.FinalUrl = null;  						}  					}  				}  			}  		} else {  			// alias does not exist in database   			// and all attempts to find another have failed   			//this should only happen if the HostPortal does not have any aliases   			result.Action = ActionType.Output404;  			if (response != null) {  				if (showDebug) {  					ShowDebugData (context' fullUrl' result' null);  				}  				result.Reason = RedirectReason.Requested_404;  				//912 : change 404 type to transfer to allow transfer to main portal in single-portal installs  				Handle404OrException (settings' context' null' result' true' showDebug);  				finished = true;  			}  		}  	}  	//404 page ??  	if (settings.TabId404 > 0 && settings.TabId404 == result.TabId) {  		string status = queryStringCol ["status"];  		if (status == "404") {  			//respond with a 404 error  			result.Action = ActionType.Output404;  			result.Reason = RedirectReason.Requested_404_In_Url;  			Handle404OrException (settings' context' null' result' true' showDebug);  		}  	} else {  		if (result.DoRewrite == false && result.CanRewrite != StateBoolean.False && !finished && result.Action == ActionType.Continue) {  			//739 : catch no-extension 404 errors  			string pathWithNoQs = result.OriginalPath;  			if (pathWithNoQs.Contains ("?")) {  				pathWithNoQs = pathWithNoQs.Substring (0' pathWithNoQs.IndexOf ("?"' StringComparison.Ordinal));  			}  			if (!pathWithNoQs.Substring (pathWithNoQs.Length - 5' 5).Contains (".")) {  				//no page extension' output a 404 if the Url is not found  				//766 : check for physical path before passing off as a 404 error  				//829 : change to use action physical path  				//893 : filter by regex pattern to exclude urls which are valid' but show up as extensionless  				if ((request != null && Directory.Exists (result.PhysicalPath)) || Regex.IsMatch (pathWithNoQs' settings.ValidExtensionlessUrlsRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  					//do nothing : it's a request for a valid physical path' maybe including a default document  					result.VirtualPath = StateBoolean.False;  				} else {  					if (!Globals.ServicesFrameworkRegex.IsMatch (context.Request.RawUrl)) {  						//no physical path' intercept the request and hand out a 404 error  						result.Action = ActionType.Output404;  						result.Reason = RedirectReason.Page_404;  						result.VirtualPath = StateBoolean.True;  						//add in a message to explain this 404' becaue it can be cryptic  						result.DebugMessages.Add ("404 Reason : Not found and no extension");  						Handle404OrException (settings' context' null' result' true' showDebug);  					}  				}  			}  		}  	}  	//  show debug messages after extensionless-url special 404 handling  	if (showDebug) {  		ShowDebugData (context' fullUrl' result' null);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The following statement contains a magic number: if (settings.TabId404 > 0 && settings.TabId404 == result.TabId) {  	string status = queryStringCol ["status"];  	if (status == "404") {  		//respond with a 404 error  		result.Action = ActionType.Output404;  		result.Reason = RedirectReason.Requested_404_In_Url;  		Handle404OrException (settings' context' null' result' true' showDebug);  	}  } else {  	if (result.DoRewrite == false && result.CanRewrite != StateBoolean.False && !finished && result.Action == ActionType.Continue) {  		//739 : catch no-extension 404 errors  		string pathWithNoQs = result.OriginalPath;  		if (pathWithNoQs.Contains ("?")) {  			pathWithNoQs = pathWithNoQs.Substring (0' pathWithNoQs.IndexOf ("?"' StringComparison.Ordinal));  		}  		if (!pathWithNoQs.Substring (pathWithNoQs.Length - 5' 5).Contains (".")) {  			//no page extension' output a 404 if the Url is not found  			//766 : check for physical path before passing off as a 404 error  			//829 : change to use action physical path  			//893 : filter by regex pattern to exclude urls which are valid' but show up as extensionless  			if ((request != null && Directory.Exists (result.PhysicalPath)) || Regex.IsMatch (pathWithNoQs' settings.ValidExtensionlessUrlsRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  				//do nothing : it's a request for a valid physical path' maybe including a default document  				result.VirtualPath = StateBoolean.False;  			} else {  				if (!Globals.ServicesFrameworkRegex.IsMatch (context.Request.RawUrl)) {  					//no physical path' intercept the request and hand out a 404 error  					result.Action = ActionType.Output404;  					result.Reason = RedirectReason.Page_404;  					result.VirtualPath = StateBoolean.True;  					//add in a message to explain this 404' becaue it can be cryptic  					result.DebugMessages.Add ("404 Reason : Not found and no extension");  					Handle404OrException (settings' context' null' result' true' showDebug);  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The following statement contains a magic number: if (settings.TabId404 > 0 && settings.TabId404 == result.TabId) {  	string status = queryStringCol ["status"];  	if (status == "404") {  		//respond with a 404 error  		result.Action = ActionType.Output404;  		result.Reason = RedirectReason.Requested_404_In_Url;  		Handle404OrException (settings' context' null' result' true' showDebug);  	}  } else {  	if (result.DoRewrite == false && result.CanRewrite != StateBoolean.False && !finished && result.Action == ActionType.Continue) {  		//739 : catch no-extension 404 errors  		string pathWithNoQs = result.OriginalPath;  		if (pathWithNoQs.Contains ("?")) {  			pathWithNoQs = pathWithNoQs.Substring (0' pathWithNoQs.IndexOf ("?"' StringComparison.Ordinal));  		}  		if (!pathWithNoQs.Substring (pathWithNoQs.Length - 5' 5).Contains (".")) {  			//no page extension' output a 404 if the Url is not found  			//766 : check for physical path before passing off as a 404 error  			//829 : change to use action physical path  			//893 : filter by regex pattern to exclude urls which are valid' but show up as extensionless  			if ((request != null && Directory.Exists (result.PhysicalPath)) || Regex.IsMatch (pathWithNoQs' settings.ValidExtensionlessUrlsRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  				//do nothing : it's a request for a valid physical path' maybe including a default document  				result.VirtualPath = StateBoolean.False;  			} else {  				if (!Globals.ServicesFrameworkRegex.IsMatch (context.Request.RawUrl)) {  					//no physical path' intercept the request and hand out a 404 error  					result.Action = ActionType.Output404;  					result.Reason = RedirectReason.Page_404;  					result.VirtualPath = StateBoolean.True;  					//add in a message to explain this 404' becaue it can be cryptic  					result.DebugMessages.Add ("404 Reason : Not found and no extension");  					Handle404OrException (settings' context' null' result' true' showDebug);  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The following statement contains a magic number: if (result.DoRewrite == false && result.CanRewrite != StateBoolean.False && !finished && result.Action == ActionType.Continue) {  	//739 : catch no-extension 404 errors  	string pathWithNoQs = result.OriginalPath;  	if (pathWithNoQs.Contains ("?")) {  		pathWithNoQs = pathWithNoQs.Substring (0' pathWithNoQs.IndexOf ("?"' StringComparison.Ordinal));  	}  	if (!pathWithNoQs.Substring (pathWithNoQs.Length - 5' 5).Contains (".")) {  		//no page extension' output a 404 if the Url is not found  		//766 : check for physical path before passing off as a 404 error  		//829 : change to use action physical path  		//893 : filter by regex pattern to exclude urls which are valid' but show up as extensionless  		if ((request != null && Directory.Exists (result.PhysicalPath)) || Regex.IsMatch (pathWithNoQs' settings.ValidExtensionlessUrlsRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  			//do nothing : it's a request for a valid physical path' maybe including a default document  			result.VirtualPath = StateBoolean.False;  		} else {  			if (!Globals.ServicesFrameworkRegex.IsMatch (context.Request.RawUrl)) {  				//no physical path' intercept the request and hand out a 404 error  				result.Action = ActionType.Output404;  				result.Reason = RedirectReason.Page_404;  				result.VirtualPath = StateBoolean.True;  				//add in a message to explain this 404' becaue it can be cryptic  				result.DebugMessages.Add ("404 Reason : Not found and no extension");  				Handle404OrException (settings' context' null' result' true' showDebug);  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The following statement contains a magic number: if (result.DoRewrite == false && result.CanRewrite != StateBoolean.False && !finished && result.Action == ActionType.Continue) {  	//739 : catch no-extension 404 errors  	string pathWithNoQs = result.OriginalPath;  	if (pathWithNoQs.Contains ("?")) {  		pathWithNoQs = pathWithNoQs.Substring (0' pathWithNoQs.IndexOf ("?"' StringComparison.Ordinal));  	}  	if (!pathWithNoQs.Substring (pathWithNoQs.Length - 5' 5).Contains (".")) {  		//no page extension' output a 404 if the Url is not found  		//766 : check for physical path before passing off as a 404 error  		//829 : change to use action physical path  		//893 : filter by regex pattern to exclude urls which are valid' but show up as extensionless  		if ((request != null && Directory.Exists (result.PhysicalPath)) || Regex.IsMatch (pathWithNoQs' settings.ValidExtensionlessUrlsRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  			//do nothing : it's a request for a valid physical path' maybe including a default document  			result.VirtualPath = StateBoolean.False;  		} else {  			if (!Globals.ServicesFrameworkRegex.IsMatch (context.Request.RawUrl)) {  				//no physical path' intercept the request and hand out a 404 error  				result.Action = ActionType.Output404;  				result.Reason = RedirectReason.Page_404;  				result.VirtualPath = StateBoolean.True;  				//add in a message to explain this 404' becaue it can be cryptic  				result.DebugMessages.Add ("404 Reason : Not found and no extension");  				Handle404OrException (settings' context' null' result' true' showDebug);  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The following statement contains a magic number: if (!pathWithNoQs.Substring (pathWithNoQs.Length - 5' 5).Contains (".")) {  	//no page extension' output a 404 if the Url is not found  	//766 : check for physical path before passing off as a 404 error  	//829 : change to use action physical path  	//893 : filter by regex pattern to exclude urls which are valid' but show up as extensionless  	if ((request != null && Directory.Exists (result.PhysicalPath)) || Regex.IsMatch (pathWithNoQs' settings.ValidExtensionlessUrlsRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  		//do nothing : it's a request for a valid physical path' maybe including a default document  		result.VirtualPath = StateBoolean.False;  	} else {  		if (!Globals.ServicesFrameworkRegex.IsMatch (context.Request.RawUrl)) {  			//no physical path' intercept the request and hand out a 404 error  			result.Action = ActionType.Output404;  			result.Reason = RedirectReason.Page_404;  			result.VirtualPath = StateBoolean.True;  			//add in a message to explain this 404' becaue it can be cryptic  			result.DebugMessages.Add ("404 Reason : Not found and no extension");  			Handle404OrException (settings' context' null' result' true' showDebug);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The following statement contains a magic number: if (!pathWithNoQs.Substring (pathWithNoQs.Length - 5' 5).Contains (".")) {  	//no page extension' output a 404 if the Url is not found  	//766 : check for physical path before passing off as a 404 error  	//829 : change to use action physical path  	//893 : filter by regex pattern to exclude urls which are valid' but show up as extensionless  	if ((request != null && Directory.Exists (result.PhysicalPath)) || Regex.IsMatch (pathWithNoQs' settings.ValidExtensionlessUrlsRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  		//do nothing : it's a request for a valid physical path' maybe including a default document  		result.VirtualPath = StateBoolean.False;  	} else {  		if (!Globals.ServicesFrameworkRegex.IsMatch (context.Request.RawUrl)) {  			//no physical path' intercept the request and hand out a 404 error  			result.Action = ActionType.Output404;  			result.Reason = RedirectReason.Page_404;  			result.VirtualPath = StateBoolean.True;  			//add in a message to explain this 404' becaue it can be cryptic  			result.DebugMessages.Add ("404 Reason : Not found and no extension");  			Handle404OrException (settings' context' null' result' true' showDebug);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (context != null) {  	HttpRequest request = context.Request;  	HttpResponse response = context.Response;  	HttpServerUtility server = context.Server;  	const string errorPageHtmlHeader = @"<html><head><title>{0}</title></head><body>";  	const string errorPageHtmlFooter = @"</body></html>";  	var errorPageHtml = new StringWriter ();  	CustomErrorsSection ceSection = null;  	//876 : security catch for custom error reading  	try {  		ceSection = (CustomErrorsSection)WebConfigurationManager.GetSection ("system.web/customErrors");  	} // ReSharper disable EmptyGeneralCatchClause  	catch (Exception)// ReSharper restore EmptyGeneralCatchClause  	 {  		//on some medium trust environments' this will throw an exception for trying to read the custom Errors  		//do nothing  	}  	/* 454 new 404/500 error handling routine */bool useDNNTab = false;  	int errTabId = -1;  	string errUrl = null;  	string status = "";  	bool isPostback = false;  	if (settings != null) {  		if (request.RequestType == "POST") {  			isPostback = true;  		}  		if (result != null && ex != null) {  			result.DebugMessages.Add ("Exception: " + ex.Message);  			result.DebugMessages.Add ("Stack Trace: " + ex.StackTrace);  			if (ex.InnerException != null) {  				result.DebugMessages.Add ("Inner Ex : " + ex.InnerException.Message);  				result.DebugMessages.Add ("Stack Trace: " + ex.InnerException.StackTrace);  			} else {  				result.DebugMessages.Add ("Inner Ex : null");  			}  		}  		string errRH;  		string errRV;  		int statusCode;  		if (result != null && result.Action != ActionType.Output404) {  			//output everything but 404 (usually 500)  			if (settings.TabId500 > -1)//tabid specified for 500 error page' use that  			 {  				useDNNTab = true;  				errTabId = settings.TabId500;  			}  			errUrl = settings.Url500;  			errRH = "X-UrlRewriter-500";  			errRV = "500 Rewritten to {0} : {1}";  			statusCode = 500;  			status = "500 Internal Server Error";  		} else//output 404 error   		 {  			if (settings.TabId404 > -1)//if the tabid is specified for a 404 page' then use that  			 {  				useDNNTab = true;  				errTabId = settings.TabId404;  			}  			if (!String.IsNullOrEmpty (settings.Regex404))//with 404 errors' there's an option to catch certain urls and use an external url for extra processing.  			 {  				try {  					//944 : check the original Url in case the requested Url has been rewritten before discovering it's a 404 error  					string requestedUrl = request.Url.ToString ();  					if (result != null && !string.IsNullOrEmpty (result.OriginalPath)) {  						requestedUrl = result.OriginalPath;  					}  					if (Regex.IsMatch (requestedUrl' settings.Regex404' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  						useDNNTab = false;  						//if we have a match in the 404 regex value' then don't use the tabid  					}  				} catch (Exception regexEx) {  					//.some type of exception : output in response header' and go back to using the tabid   					response.AppendHeader ("X-UrlRewriter-404Exception"' regexEx.Message);  				}  			}  			errUrl = settings.Url404;  			errRH = "X-UrlRewriter-404";  			errRV = "404 Rewritten to {0} : {1} : Reason {2}";  			status = "404 Not Found";  			statusCode = 404;  		}  		// check for 404 logging  		if ((result == null || result.Action == ActionType.Output404)) {  			//Log 404 errors to Event Log  			UrlRewriterUtils.Log404 (request' settings' result);  		}  		//912 : use unhandled 404 switch  		string reason404 = null;  		bool unhandled404 = true;  		if (useDNNTab && errTabId > -1) {  			unhandled404 = false;  			//we're handling it here  			TabInfo errTab = TabController.Instance.GetTab (errTabId' result.PortalId' true);  			if (errTab != null) {  				bool redirect = false;  				//ok' valid tabid.  what we're going to do is to load up this tab via a rewrite of the url' and then change the output status  				string reason = "Not Found";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				response.AppendHeader (errRH' string.Format (errRV' "DNN Tab"' errTab.TabName + "(Tabid:" + errTabId.ToString () + ")"' reason));  				//show debug messages even if in debug mode  				if (context != null && response != null && result != null && showDebug) {  					ShowDebugData (context' result.OriginalPath' result' null);  				}  				if (!isPostback) {  					response.ClearContent ();  					response.StatusCode = statusCode;  					response.Status = status;  				} else {  					redirect = true;  					//redirect postbacks as you can't postback successfully to a server.transfer  				}  				errUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (errTab.TabID' "");  				//have to update the portal settings with the new tabid  				PortalSettings ps = null;  				if (context != null && context.Items != null) {  					if (context.Items.Contains ("PortalSettings")) {  						ps = (PortalSettings)context.Items ["PortalSettings"];  						context.Items.Remove ("PortalSettings");  						//nix it from the context  					}  				}  				if (ps != null && ps.PortalAlias != null) {  					ps = new PortalSettings (errTabId' ps.PortalAlias);  				} else {  					if (result.HttpAlias != null && result.PortalId > -1) {  						PortalAliasInfo pa = PortalAliasController.Instance.GetPortalAlias (result.HttpAlias' result.PortalId);  						ps = new PortalSettings (errTabId' pa);  					} else {  						//912 : handle 404 when no valid portal can be identified  						//results when iis is configured to handle portal alias' but   						//DNN isn't.  This always returns 404 because a multi-portal site  						//can't just show the 404 page of the host site.  						ArrayList portals = PortalController.Instance.GetPortals ();  						if (portals != null && portals.Count == 1) {  							//single portal install' load up portal settings for this portal  							var singlePortal = (PortalInfo)portals [0];  							//list of aliases from database  							var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (singlePortal.PortalID).ToList ();  							//list of aliases from Advanced Url settings  							List<string> chosen = aliases.GetAliasesForPortalId (singlePortal.PortalID);  							PortalAliasInfo useFor404 = null;  							//go through all aliases and either get the first valid one' or the first   							//as chosen in the advanced url management settings  							foreach (var pa in aliases) {  								if (useFor404 == null) {  									useFor404 = pa;  									//first one by default  								}  								//matching?  								if (chosen != null && chosen.Count > 0) {  									if (chosen.Contains (pa.HTTPAlias)) {  										useFor404 = pa;  									}  								} else {  									break;  									//no further checking  								}  							}  							//now configure that as the portal settings  							if (useFor404 != null) {  								//create portal settings context for identified portal alias in single portal install  								ps = new PortalSettings (errTabId' useFor404);  							}  						} else {  							reason404 = "Requested domain name is not configured as valid website";  							unhandled404 = true;  						}  					}  				}  				if (ps != null) {  					//re-add the context items portal settings back in  					context.Items.Add ("PortalSettings"' ps);  				}  				if (redirect) {  					errUrl = TestableGlobals.Instance.NavigateURL ();  					response.Redirect (errUrl' true);  					//redirect and end response.    					//It will mean the user will have to postback again' but it will work the second time  				} else {  					if (transfer) {  						//execute a server transfer to the default.aspx?tabid=xx url  						//767 : object not set error on extensionless 404 errors  						if (context.User == null) {  							context.User = Thread.CurrentPrincipal;  						}  						response.TrySkipIisCustomErrors = true;  						//881 : spoof the basePage object so that the client dependency framework  						//is satisfied it's working with a page-based handler  						IHttpHandler spoofPage = new CDefault ();  						context.Handler = spoofPage;  						server.Transfer ("~/" + errUrl' true);  					} else {  						context.RewritePath ("~/Default.aspx"' false);  						response.TrySkipIisCustomErrors = true;  						response.Status = "404 Not Found";  						response.StatusCode = 404;  					}  				}  			}  		}  		//912 : change to new if statement to handle cases where the TabId404 couldn't be handled correctly  		if (unhandled404) {  			//proces the error on the external Url by rewriting to the external url  			if (!String.IsNullOrEmpty (errUrl)) {  				response.ClearContent ();  				response.TrySkipIisCustomErrors = true;  				string reason = "Not Found";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				response.AppendHeader (errRH' string.Format (errRV' "Url"' errUrl' reason));  				if (reason404 != null) {  					response.AppendHeader ("X-Url-Master-404-Data"' reason404);  				}  				response.StatusCode = statusCode;  				response.Status = status;  				server.Transfer ("~/" + errUrl' true);  			} else {  				errorPageHtml.Write (status + "<br>The requested Url does not return any valid content.");  				if (reason404 != null) {  					errorPageHtml.Write (status + "<br>" + reason404);  				}  				errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  				errorPageHtml.Write ("<div>Change this message by configuring a specific 404 Error Page or Url for this website.</div>");  				//output a reason for the 404  				string reason = "";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				if (!string.IsNullOrEmpty (errRH) && !string.IsNullOrEmpty (reason)) {  					response.AppendHeader (errRH' reason);  				}  				response.StatusCode = statusCode;  				response.Status = status;  			}  		}  	} else {  		//fallback output if not valid settings  		if (result != null && result.Action == ActionType.Output404) {  			//don't restate the requested Url to prevent cross site scripting  			errorPageHtml.Write ("404 Not Found<br>The requested Url does not return any valid content.");  			response.StatusCode = 404;  			response.Status = "404 Not Found";  		} else {  			//error' especially if invalid result object  			errorPageHtml.Write ("500 Server Error<br><div style='font-weight:bolder'>An error occured during processing : if possible' check the event log of the server</div>");  			response.StatusCode = 500;  			response.Status = "500 Internal Server Error";  			if (result != null) {  				result.Action = ActionType.Output500;  			}  		}  	}  	if (ex != null) {  		if (context != null) {  			if (context.Items.Contains ("UrlRewrite:Exception") == false) {  				context.Items.Add ("UrlRewrite:Exception"' ex.Message);  				context.Items.Add ("UrlRewrite:StackTrace"' ex.StackTrace);  			}  		}  		if (ceSection != null && ceSection.Mode == CustomErrorsMode.Off) {  			errorPageHtml.Write (errorPageHtmlHeader);  			errorPageHtml.Write ("<div style='font-weight:bolder'>Exception:</div><div>" + ex.Message + "</div>");  			errorPageHtml.Write ("<div style='font-weight:bolder'>Stack Trace:</div><div>" + ex.StackTrace + "</div>");  			errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  			errorPageHtml.Write ("<div>You can see this exception because the customErrors attribute in the web.config is set to 'off'.  Change this value to 'on' or 'RemoteOnly' to show Error Handling</div>");  			try {  				if (errUrl != null && errUrl.StartsWith ("~")) {  					errUrl = VirtualPathUtility.ToAbsolute (errUrl);  				}  			} finally {  				if (errUrl != null) {  					errorPageHtml.Write ("<div>The error handling would have shown this page : <a href='" + errUrl + "'>" + errUrl + "</a></div>");  				} else {  					errorPageHtml.Write ("<div>The error handling could not determine the correct page to show.</div>");  				}  			}  		}  	}  	string errorPageHtmlBody = errorPageHtml.ToString ();  	if (errorPageHtmlBody.Length > 0) {  		response.Write (errorPageHtmlHeader);  		response.Write (errorPageHtmlBody);  		response.Write (errorPageHtmlFooter);  	}  	if (ex != null) {  		UrlRewriterUtils.LogExceptionInRequest (ex' status' result);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (context != null) {  	HttpRequest request = context.Request;  	HttpResponse response = context.Response;  	HttpServerUtility server = context.Server;  	const string errorPageHtmlHeader = @"<html><head><title>{0}</title></head><body>";  	const string errorPageHtmlFooter = @"</body></html>";  	var errorPageHtml = new StringWriter ();  	CustomErrorsSection ceSection = null;  	//876 : security catch for custom error reading  	try {  		ceSection = (CustomErrorsSection)WebConfigurationManager.GetSection ("system.web/customErrors");  	} // ReSharper disable EmptyGeneralCatchClause  	catch (Exception)// ReSharper restore EmptyGeneralCatchClause  	 {  		//on some medium trust environments' this will throw an exception for trying to read the custom Errors  		//do nothing  	}  	/* 454 new 404/500 error handling routine */bool useDNNTab = false;  	int errTabId = -1;  	string errUrl = null;  	string status = "";  	bool isPostback = false;  	if (settings != null) {  		if (request.RequestType == "POST") {  			isPostback = true;  		}  		if (result != null && ex != null) {  			result.DebugMessages.Add ("Exception: " + ex.Message);  			result.DebugMessages.Add ("Stack Trace: " + ex.StackTrace);  			if (ex.InnerException != null) {  				result.DebugMessages.Add ("Inner Ex : " + ex.InnerException.Message);  				result.DebugMessages.Add ("Stack Trace: " + ex.InnerException.StackTrace);  			} else {  				result.DebugMessages.Add ("Inner Ex : null");  			}  		}  		string errRH;  		string errRV;  		int statusCode;  		if (result != null && result.Action != ActionType.Output404) {  			//output everything but 404 (usually 500)  			if (settings.TabId500 > -1)//tabid specified for 500 error page' use that  			 {  				useDNNTab = true;  				errTabId = settings.TabId500;  			}  			errUrl = settings.Url500;  			errRH = "X-UrlRewriter-500";  			errRV = "500 Rewritten to {0} : {1}";  			statusCode = 500;  			status = "500 Internal Server Error";  		} else//output 404 error   		 {  			if (settings.TabId404 > -1)//if the tabid is specified for a 404 page' then use that  			 {  				useDNNTab = true;  				errTabId = settings.TabId404;  			}  			if (!String.IsNullOrEmpty (settings.Regex404))//with 404 errors' there's an option to catch certain urls and use an external url for extra processing.  			 {  				try {  					//944 : check the original Url in case the requested Url has been rewritten before discovering it's a 404 error  					string requestedUrl = request.Url.ToString ();  					if (result != null && !string.IsNullOrEmpty (result.OriginalPath)) {  						requestedUrl = result.OriginalPath;  					}  					if (Regex.IsMatch (requestedUrl' settings.Regex404' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  						useDNNTab = false;  						//if we have a match in the 404 regex value' then don't use the tabid  					}  				} catch (Exception regexEx) {  					//.some type of exception : output in response header' and go back to using the tabid   					response.AppendHeader ("X-UrlRewriter-404Exception"' regexEx.Message);  				}  			}  			errUrl = settings.Url404;  			errRH = "X-UrlRewriter-404";  			errRV = "404 Rewritten to {0} : {1} : Reason {2}";  			status = "404 Not Found";  			statusCode = 404;  		}  		// check for 404 logging  		if ((result == null || result.Action == ActionType.Output404)) {  			//Log 404 errors to Event Log  			UrlRewriterUtils.Log404 (request' settings' result);  		}  		//912 : use unhandled 404 switch  		string reason404 = null;  		bool unhandled404 = true;  		if (useDNNTab && errTabId > -1) {  			unhandled404 = false;  			//we're handling it here  			TabInfo errTab = TabController.Instance.GetTab (errTabId' result.PortalId' true);  			if (errTab != null) {  				bool redirect = false;  				//ok' valid tabid.  what we're going to do is to load up this tab via a rewrite of the url' and then change the output status  				string reason = "Not Found";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				response.AppendHeader (errRH' string.Format (errRV' "DNN Tab"' errTab.TabName + "(Tabid:" + errTabId.ToString () + ")"' reason));  				//show debug messages even if in debug mode  				if (context != null && response != null && result != null && showDebug) {  					ShowDebugData (context' result.OriginalPath' result' null);  				}  				if (!isPostback) {  					response.ClearContent ();  					response.StatusCode = statusCode;  					response.Status = status;  				} else {  					redirect = true;  					//redirect postbacks as you can't postback successfully to a server.transfer  				}  				errUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (errTab.TabID' "");  				//have to update the portal settings with the new tabid  				PortalSettings ps = null;  				if (context != null && context.Items != null) {  					if (context.Items.Contains ("PortalSettings")) {  						ps = (PortalSettings)context.Items ["PortalSettings"];  						context.Items.Remove ("PortalSettings");  						//nix it from the context  					}  				}  				if (ps != null && ps.PortalAlias != null) {  					ps = new PortalSettings (errTabId' ps.PortalAlias);  				} else {  					if (result.HttpAlias != null && result.PortalId > -1) {  						PortalAliasInfo pa = PortalAliasController.Instance.GetPortalAlias (result.HttpAlias' result.PortalId);  						ps = new PortalSettings (errTabId' pa);  					} else {  						//912 : handle 404 when no valid portal can be identified  						//results when iis is configured to handle portal alias' but   						//DNN isn't.  This always returns 404 because a multi-portal site  						//can't just show the 404 page of the host site.  						ArrayList portals = PortalController.Instance.GetPortals ();  						if (portals != null && portals.Count == 1) {  							//single portal install' load up portal settings for this portal  							var singlePortal = (PortalInfo)portals [0];  							//list of aliases from database  							var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (singlePortal.PortalID).ToList ();  							//list of aliases from Advanced Url settings  							List<string> chosen = aliases.GetAliasesForPortalId (singlePortal.PortalID);  							PortalAliasInfo useFor404 = null;  							//go through all aliases and either get the first valid one' or the first   							//as chosen in the advanced url management settings  							foreach (var pa in aliases) {  								if (useFor404 == null) {  									useFor404 = pa;  									//first one by default  								}  								//matching?  								if (chosen != null && chosen.Count > 0) {  									if (chosen.Contains (pa.HTTPAlias)) {  										useFor404 = pa;  									}  								} else {  									break;  									//no further checking  								}  							}  							//now configure that as the portal settings  							if (useFor404 != null) {  								//create portal settings context for identified portal alias in single portal install  								ps = new PortalSettings (errTabId' useFor404);  							}  						} else {  							reason404 = "Requested domain name is not configured as valid website";  							unhandled404 = true;  						}  					}  				}  				if (ps != null) {  					//re-add the context items portal settings back in  					context.Items.Add ("PortalSettings"' ps);  				}  				if (redirect) {  					errUrl = TestableGlobals.Instance.NavigateURL ();  					response.Redirect (errUrl' true);  					//redirect and end response.    					//It will mean the user will have to postback again' but it will work the second time  				} else {  					if (transfer) {  						//execute a server transfer to the default.aspx?tabid=xx url  						//767 : object not set error on extensionless 404 errors  						if (context.User == null) {  							context.User = Thread.CurrentPrincipal;  						}  						response.TrySkipIisCustomErrors = true;  						//881 : spoof the basePage object so that the client dependency framework  						//is satisfied it's working with a page-based handler  						IHttpHandler spoofPage = new CDefault ();  						context.Handler = spoofPage;  						server.Transfer ("~/" + errUrl' true);  					} else {  						context.RewritePath ("~/Default.aspx"' false);  						response.TrySkipIisCustomErrors = true;  						response.Status = "404 Not Found";  						response.StatusCode = 404;  					}  				}  			}  		}  		//912 : change to new if statement to handle cases where the TabId404 couldn't be handled correctly  		if (unhandled404) {  			//proces the error on the external Url by rewriting to the external url  			if (!String.IsNullOrEmpty (errUrl)) {  				response.ClearContent ();  				response.TrySkipIisCustomErrors = true;  				string reason = "Not Found";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				response.AppendHeader (errRH' string.Format (errRV' "Url"' errUrl' reason));  				if (reason404 != null) {  					response.AppendHeader ("X-Url-Master-404-Data"' reason404);  				}  				response.StatusCode = statusCode;  				response.Status = status;  				server.Transfer ("~/" + errUrl' true);  			} else {  				errorPageHtml.Write (status + "<br>The requested Url does not return any valid content.");  				if (reason404 != null) {  					errorPageHtml.Write (status + "<br>" + reason404);  				}  				errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  				errorPageHtml.Write ("<div>Change this message by configuring a specific 404 Error Page or Url for this website.</div>");  				//output a reason for the 404  				string reason = "";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				if (!string.IsNullOrEmpty (errRH) && !string.IsNullOrEmpty (reason)) {  					response.AppendHeader (errRH' reason);  				}  				response.StatusCode = statusCode;  				response.Status = status;  			}  		}  	} else {  		//fallback output if not valid settings  		if (result != null && result.Action == ActionType.Output404) {  			//don't restate the requested Url to prevent cross site scripting  			errorPageHtml.Write ("404 Not Found<br>The requested Url does not return any valid content.");  			response.StatusCode = 404;  			response.Status = "404 Not Found";  		} else {  			//error' especially if invalid result object  			errorPageHtml.Write ("500 Server Error<br><div style='font-weight:bolder'>An error occured during processing : if possible' check the event log of the server</div>");  			response.StatusCode = 500;  			response.Status = "500 Internal Server Error";  			if (result != null) {  				result.Action = ActionType.Output500;  			}  		}  	}  	if (ex != null) {  		if (context != null) {  			if (context.Items.Contains ("UrlRewrite:Exception") == false) {  				context.Items.Add ("UrlRewrite:Exception"' ex.Message);  				context.Items.Add ("UrlRewrite:StackTrace"' ex.StackTrace);  			}  		}  		if (ceSection != null && ceSection.Mode == CustomErrorsMode.Off) {  			errorPageHtml.Write (errorPageHtmlHeader);  			errorPageHtml.Write ("<div style='font-weight:bolder'>Exception:</div><div>" + ex.Message + "</div>");  			errorPageHtml.Write ("<div style='font-weight:bolder'>Stack Trace:</div><div>" + ex.StackTrace + "</div>");  			errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  			errorPageHtml.Write ("<div>You can see this exception because the customErrors attribute in the web.config is set to 'off'.  Change this value to 'on' or 'RemoteOnly' to show Error Handling</div>");  			try {  				if (errUrl != null && errUrl.StartsWith ("~")) {  					errUrl = VirtualPathUtility.ToAbsolute (errUrl);  				}  			} finally {  				if (errUrl != null) {  					errorPageHtml.Write ("<div>The error handling would have shown this page : <a href='" + errUrl + "'>" + errUrl + "</a></div>");  				} else {  					errorPageHtml.Write ("<div>The error handling could not determine the correct page to show.</div>");  				}  			}  		}  	}  	string errorPageHtmlBody = errorPageHtml.ToString ();  	if (errorPageHtmlBody.Length > 0) {  		response.Write (errorPageHtmlHeader);  		response.Write (errorPageHtmlBody);  		response.Write (errorPageHtmlFooter);  	}  	if (ex != null) {  		UrlRewriterUtils.LogExceptionInRequest (ex' status' result);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (context != null) {  	HttpRequest request = context.Request;  	HttpResponse response = context.Response;  	HttpServerUtility server = context.Server;  	const string errorPageHtmlHeader = @"<html><head><title>{0}</title></head><body>";  	const string errorPageHtmlFooter = @"</body></html>";  	var errorPageHtml = new StringWriter ();  	CustomErrorsSection ceSection = null;  	//876 : security catch for custom error reading  	try {  		ceSection = (CustomErrorsSection)WebConfigurationManager.GetSection ("system.web/customErrors");  	} // ReSharper disable EmptyGeneralCatchClause  	catch (Exception)// ReSharper restore EmptyGeneralCatchClause  	 {  		//on some medium trust environments' this will throw an exception for trying to read the custom Errors  		//do nothing  	}  	/* 454 new 404/500 error handling routine */bool useDNNTab = false;  	int errTabId = -1;  	string errUrl = null;  	string status = "";  	bool isPostback = false;  	if (settings != null) {  		if (request.RequestType == "POST") {  			isPostback = true;  		}  		if (result != null && ex != null) {  			result.DebugMessages.Add ("Exception: " + ex.Message);  			result.DebugMessages.Add ("Stack Trace: " + ex.StackTrace);  			if (ex.InnerException != null) {  				result.DebugMessages.Add ("Inner Ex : " + ex.InnerException.Message);  				result.DebugMessages.Add ("Stack Trace: " + ex.InnerException.StackTrace);  			} else {  				result.DebugMessages.Add ("Inner Ex : null");  			}  		}  		string errRH;  		string errRV;  		int statusCode;  		if (result != null && result.Action != ActionType.Output404) {  			//output everything but 404 (usually 500)  			if (settings.TabId500 > -1)//tabid specified for 500 error page' use that  			 {  				useDNNTab = true;  				errTabId = settings.TabId500;  			}  			errUrl = settings.Url500;  			errRH = "X-UrlRewriter-500";  			errRV = "500 Rewritten to {0} : {1}";  			statusCode = 500;  			status = "500 Internal Server Error";  		} else//output 404 error   		 {  			if (settings.TabId404 > -1)//if the tabid is specified for a 404 page' then use that  			 {  				useDNNTab = true;  				errTabId = settings.TabId404;  			}  			if (!String.IsNullOrEmpty (settings.Regex404))//with 404 errors' there's an option to catch certain urls and use an external url for extra processing.  			 {  				try {  					//944 : check the original Url in case the requested Url has been rewritten before discovering it's a 404 error  					string requestedUrl = request.Url.ToString ();  					if (result != null && !string.IsNullOrEmpty (result.OriginalPath)) {  						requestedUrl = result.OriginalPath;  					}  					if (Regex.IsMatch (requestedUrl' settings.Regex404' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  						useDNNTab = false;  						//if we have a match in the 404 regex value' then don't use the tabid  					}  				} catch (Exception regexEx) {  					//.some type of exception : output in response header' and go back to using the tabid   					response.AppendHeader ("X-UrlRewriter-404Exception"' regexEx.Message);  				}  			}  			errUrl = settings.Url404;  			errRH = "X-UrlRewriter-404";  			errRV = "404 Rewritten to {0} : {1} : Reason {2}";  			status = "404 Not Found";  			statusCode = 404;  		}  		// check for 404 logging  		if ((result == null || result.Action == ActionType.Output404)) {  			//Log 404 errors to Event Log  			UrlRewriterUtils.Log404 (request' settings' result);  		}  		//912 : use unhandled 404 switch  		string reason404 = null;  		bool unhandled404 = true;  		if (useDNNTab && errTabId > -1) {  			unhandled404 = false;  			//we're handling it here  			TabInfo errTab = TabController.Instance.GetTab (errTabId' result.PortalId' true);  			if (errTab != null) {  				bool redirect = false;  				//ok' valid tabid.  what we're going to do is to load up this tab via a rewrite of the url' and then change the output status  				string reason = "Not Found";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				response.AppendHeader (errRH' string.Format (errRV' "DNN Tab"' errTab.TabName + "(Tabid:" + errTabId.ToString () + ")"' reason));  				//show debug messages even if in debug mode  				if (context != null && response != null && result != null && showDebug) {  					ShowDebugData (context' result.OriginalPath' result' null);  				}  				if (!isPostback) {  					response.ClearContent ();  					response.StatusCode = statusCode;  					response.Status = status;  				} else {  					redirect = true;  					//redirect postbacks as you can't postback successfully to a server.transfer  				}  				errUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (errTab.TabID' "");  				//have to update the portal settings with the new tabid  				PortalSettings ps = null;  				if (context != null && context.Items != null) {  					if (context.Items.Contains ("PortalSettings")) {  						ps = (PortalSettings)context.Items ["PortalSettings"];  						context.Items.Remove ("PortalSettings");  						//nix it from the context  					}  				}  				if (ps != null && ps.PortalAlias != null) {  					ps = new PortalSettings (errTabId' ps.PortalAlias);  				} else {  					if (result.HttpAlias != null && result.PortalId > -1) {  						PortalAliasInfo pa = PortalAliasController.Instance.GetPortalAlias (result.HttpAlias' result.PortalId);  						ps = new PortalSettings (errTabId' pa);  					} else {  						//912 : handle 404 when no valid portal can be identified  						//results when iis is configured to handle portal alias' but   						//DNN isn't.  This always returns 404 because a multi-portal site  						//can't just show the 404 page of the host site.  						ArrayList portals = PortalController.Instance.GetPortals ();  						if (portals != null && portals.Count == 1) {  							//single portal install' load up portal settings for this portal  							var singlePortal = (PortalInfo)portals [0];  							//list of aliases from database  							var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (singlePortal.PortalID).ToList ();  							//list of aliases from Advanced Url settings  							List<string> chosen = aliases.GetAliasesForPortalId (singlePortal.PortalID);  							PortalAliasInfo useFor404 = null;  							//go through all aliases and either get the first valid one' or the first   							//as chosen in the advanced url management settings  							foreach (var pa in aliases) {  								if (useFor404 == null) {  									useFor404 = pa;  									//first one by default  								}  								//matching?  								if (chosen != null && chosen.Count > 0) {  									if (chosen.Contains (pa.HTTPAlias)) {  										useFor404 = pa;  									}  								} else {  									break;  									//no further checking  								}  							}  							//now configure that as the portal settings  							if (useFor404 != null) {  								//create portal settings context for identified portal alias in single portal install  								ps = new PortalSettings (errTabId' useFor404);  							}  						} else {  							reason404 = "Requested domain name is not configured as valid website";  							unhandled404 = true;  						}  					}  				}  				if (ps != null) {  					//re-add the context items portal settings back in  					context.Items.Add ("PortalSettings"' ps);  				}  				if (redirect) {  					errUrl = TestableGlobals.Instance.NavigateURL ();  					response.Redirect (errUrl' true);  					//redirect and end response.    					//It will mean the user will have to postback again' but it will work the second time  				} else {  					if (transfer) {  						//execute a server transfer to the default.aspx?tabid=xx url  						//767 : object not set error on extensionless 404 errors  						if (context.User == null) {  							context.User = Thread.CurrentPrincipal;  						}  						response.TrySkipIisCustomErrors = true;  						//881 : spoof the basePage object so that the client dependency framework  						//is satisfied it's working with a page-based handler  						IHttpHandler spoofPage = new CDefault ();  						context.Handler = spoofPage;  						server.Transfer ("~/" + errUrl' true);  					} else {  						context.RewritePath ("~/Default.aspx"' false);  						response.TrySkipIisCustomErrors = true;  						response.Status = "404 Not Found";  						response.StatusCode = 404;  					}  				}  			}  		}  		//912 : change to new if statement to handle cases where the TabId404 couldn't be handled correctly  		if (unhandled404) {  			//proces the error on the external Url by rewriting to the external url  			if (!String.IsNullOrEmpty (errUrl)) {  				response.ClearContent ();  				response.TrySkipIisCustomErrors = true;  				string reason = "Not Found";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				response.AppendHeader (errRH' string.Format (errRV' "Url"' errUrl' reason));  				if (reason404 != null) {  					response.AppendHeader ("X-Url-Master-404-Data"' reason404);  				}  				response.StatusCode = statusCode;  				response.Status = status;  				server.Transfer ("~/" + errUrl' true);  			} else {  				errorPageHtml.Write (status + "<br>The requested Url does not return any valid content.");  				if (reason404 != null) {  					errorPageHtml.Write (status + "<br>" + reason404);  				}  				errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  				errorPageHtml.Write ("<div>Change this message by configuring a specific 404 Error Page or Url for this website.</div>");  				//output a reason for the 404  				string reason = "";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				if (!string.IsNullOrEmpty (errRH) && !string.IsNullOrEmpty (reason)) {  					response.AppendHeader (errRH' reason);  				}  				response.StatusCode = statusCode;  				response.Status = status;  			}  		}  	} else {  		//fallback output if not valid settings  		if (result != null && result.Action == ActionType.Output404) {  			//don't restate the requested Url to prevent cross site scripting  			errorPageHtml.Write ("404 Not Found<br>The requested Url does not return any valid content.");  			response.StatusCode = 404;  			response.Status = "404 Not Found";  		} else {  			//error' especially if invalid result object  			errorPageHtml.Write ("500 Server Error<br><div style='font-weight:bolder'>An error occured during processing : if possible' check the event log of the server</div>");  			response.StatusCode = 500;  			response.Status = "500 Internal Server Error";  			if (result != null) {  				result.Action = ActionType.Output500;  			}  		}  	}  	if (ex != null) {  		if (context != null) {  			if (context.Items.Contains ("UrlRewrite:Exception") == false) {  				context.Items.Add ("UrlRewrite:Exception"' ex.Message);  				context.Items.Add ("UrlRewrite:StackTrace"' ex.StackTrace);  			}  		}  		if (ceSection != null && ceSection.Mode == CustomErrorsMode.Off) {  			errorPageHtml.Write (errorPageHtmlHeader);  			errorPageHtml.Write ("<div style='font-weight:bolder'>Exception:</div><div>" + ex.Message + "</div>");  			errorPageHtml.Write ("<div style='font-weight:bolder'>Stack Trace:</div><div>" + ex.StackTrace + "</div>");  			errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  			errorPageHtml.Write ("<div>You can see this exception because the customErrors attribute in the web.config is set to 'off'.  Change this value to 'on' or 'RemoteOnly' to show Error Handling</div>");  			try {  				if (errUrl != null && errUrl.StartsWith ("~")) {  					errUrl = VirtualPathUtility.ToAbsolute (errUrl);  				}  			} finally {  				if (errUrl != null) {  					errorPageHtml.Write ("<div>The error handling would have shown this page : <a href='" + errUrl + "'>" + errUrl + "</a></div>");  				} else {  					errorPageHtml.Write ("<div>The error handling could not determine the correct page to show.</div>");  				}  			}  		}  	}  	string errorPageHtmlBody = errorPageHtml.ToString ();  	if (errorPageHtmlBody.Length > 0) {  		response.Write (errorPageHtmlHeader);  		response.Write (errorPageHtmlBody);  		response.Write (errorPageHtmlFooter);  	}  	if (ex != null) {  		UrlRewriterUtils.LogExceptionInRequest (ex' status' result);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (context != null) {  	HttpRequest request = context.Request;  	HttpResponse response = context.Response;  	HttpServerUtility server = context.Server;  	const string errorPageHtmlHeader = @"<html><head><title>{0}</title></head><body>";  	const string errorPageHtmlFooter = @"</body></html>";  	var errorPageHtml = new StringWriter ();  	CustomErrorsSection ceSection = null;  	//876 : security catch for custom error reading  	try {  		ceSection = (CustomErrorsSection)WebConfigurationManager.GetSection ("system.web/customErrors");  	} // ReSharper disable EmptyGeneralCatchClause  	catch (Exception)// ReSharper restore EmptyGeneralCatchClause  	 {  		//on some medium trust environments' this will throw an exception for trying to read the custom Errors  		//do nothing  	}  	/* 454 new 404/500 error handling routine */bool useDNNTab = false;  	int errTabId = -1;  	string errUrl = null;  	string status = "";  	bool isPostback = false;  	if (settings != null) {  		if (request.RequestType == "POST") {  			isPostback = true;  		}  		if (result != null && ex != null) {  			result.DebugMessages.Add ("Exception: " + ex.Message);  			result.DebugMessages.Add ("Stack Trace: " + ex.StackTrace);  			if (ex.InnerException != null) {  				result.DebugMessages.Add ("Inner Ex : " + ex.InnerException.Message);  				result.DebugMessages.Add ("Stack Trace: " + ex.InnerException.StackTrace);  			} else {  				result.DebugMessages.Add ("Inner Ex : null");  			}  		}  		string errRH;  		string errRV;  		int statusCode;  		if (result != null && result.Action != ActionType.Output404) {  			//output everything but 404 (usually 500)  			if (settings.TabId500 > -1)//tabid specified for 500 error page' use that  			 {  				useDNNTab = true;  				errTabId = settings.TabId500;  			}  			errUrl = settings.Url500;  			errRH = "X-UrlRewriter-500";  			errRV = "500 Rewritten to {0} : {1}";  			statusCode = 500;  			status = "500 Internal Server Error";  		} else//output 404 error   		 {  			if (settings.TabId404 > -1)//if the tabid is specified for a 404 page' then use that  			 {  				useDNNTab = true;  				errTabId = settings.TabId404;  			}  			if (!String.IsNullOrEmpty (settings.Regex404))//with 404 errors' there's an option to catch certain urls and use an external url for extra processing.  			 {  				try {  					//944 : check the original Url in case the requested Url has been rewritten before discovering it's a 404 error  					string requestedUrl = request.Url.ToString ();  					if (result != null && !string.IsNullOrEmpty (result.OriginalPath)) {  						requestedUrl = result.OriginalPath;  					}  					if (Regex.IsMatch (requestedUrl' settings.Regex404' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  						useDNNTab = false;  						//if we have a match in the 404 regex value' then don't use the tabid  					}  				} catch (Exception regexEx) {  					//.some type of exception : output in response header' and go back to using the tabid   					response.AppendHeader ("X-UrlRewriter-404Exception"' regexEx.Message);  				}  			}  			errUrl = settings.Url404;  			errRH = "X-UrlRewriter-404";  			errRV = "404 Rewritten to {0} : {1} : Reason {2}";  			status = "404 Not Found";  			statusCode = 404;  		}  		// check for 404 logging  		if ((result == null || result.Action == ActionType.Output404)) {  			//Log 404 errors to Event Log  			UrlRewriterUtils.Log404 (request' settings' result);  		}  		//912 : use unhandled 404 switch  		string reason404 = null;  		bool unhandled404 = true;  		if (useDNNTab && errTabId > -1) {  			unhandled404 = false;  			//we're handling it here  			TabInfo errTab = TabController.Instance.GetTab (errTabId' result.PortalId' true);  			if (errTab != null) {  				bool redirect = false;  				//ok' valid tabid.  what we're going to do is to load up this tab via a rewrite of the url' and then change the output status  				string reason = "Not Found";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				response.AppendHeader (errRH' string.Format (errRV' "DNN Tab"' errTab.TabName + "(Tabid:" + errTabId.ToString () + ")"' reason));  				//show debug messages even if in debug mode  				if (context != null && response != null && result != null && showDebug) {  					ShowDebugData (context' result.OriginalPath' result' null);  				}  				if (!isPostback) {  					response.ClearContent ();  					response.StatusCode = statusCode;  					response.Status = status;  				} else {  					redirect = true;  					//redirect postbacks as you can't postback successfully to a server.transfer  				}  				errUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (errTab.TabID' "");  				//have to update the portal settings with the new tabid  				PortalSettings ps = null;  				if (context != null && context.Items != null) {  					if (context.Items.Contains ("PortalSettings")) {  						ps = (PortalSettings)context.Items ["PortalSettings"];  						context.Items.Remove ("PortalSettings");  						//nix it from the context  					}  				}  				if (ps != null && ps.PortalAlias != null) {  					ps = new PortalSettings (errTabId' ps.PortalAlias);  				} else {  					if (result.HttpAlias != null && result.PortalId > -1) {  						PortalAliasInfo pa = PortalAliasController.Instance.GetPortalAlias (result.HttpAlias' result.PortalId);  						ps = new PortalSettings (errTabId' pa);  					} else {  						//912 : handle 404 when no valid portal can be identified  						//results when iis is configured to handle portal alias' but   						//DNN isn't.  This always returns 404 because a multi-portal site  						//can't just show the 404 page of the host site.  						ArrayList portals = PortalController.Instance.GetPortals ();  						if (portals != null && portals.Count == 1) {  							//single portal install' load up portal settings for this portal  							var singlePortal = (PortalInfo)portals [0];  							//list of aliases from database  							var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (singlePortal.PortalID).ToList ();  							//list of aliases from Advanced Url settings  							List<string> chosen = aliases.GetAliasesForPortalId (singlePortal.PortalID);  							PortalAliasInfo useFor404 = null;  							//go through all aliases and either get the first valid one' or the first   							//as chosen in the advanced url management settings  							foreach (var pa in aliases) {  								if (useFor404 == null) {  									useFor404 = pa;  									//first one by default  								}  								//matching?  								if (chosen != null && chosen.Count > 0) {  									if (chosen.Contains (pa.HTTPAlias)) {  										useFor404 = pa;  									}  								} else {  									break;  									//no further checking  								}  							}  							//now configure that as the portal settings  							if (useFor404 != null) {  								//create portal settings context for identified portal alias in single portal install  								ps = new PortalSettings (errTabId' useFor404);  							}  						} else {  							reason404 = "Requested domain name is not configured as valid website";  							unhandled404 = true;  						}  					}  				}  				if (ps != null) {  					//re-add the context items portal settings back in  					context.Items.Add ("PortalSettings"' ps);  				}  				if (redirect) {  					errUrl = TestableGlobals.Instance.NavigateURL ();  					response.Redirect (errUrl' true);  					//redirect and end response.    					//It will mean the user will have to postback again' but it will work the second time  				} else {  					if (transfer) {  						//execute a server transfer to the default.aspx?tabid=xx url  						//767 : object not set error on extensionless 404 errors  						if (context.User == null) {  							context.User = Thread.CurrentPrincipal;  						}  						response.TrySkipIisCustomErrors = true;  						//881 : spoof the basePage object so that the client dependency framework  						//is satisfied it's working with a page-based handler  						IHttpHandler spoofPage = new CDefault ();  						context.Handler = spoofPage;  						server.Transfer ("~/" + errUrl' true);  					} else {  						context.RewritePath ("~/Default.aspx"' false);  						response.TrySkipIisCustomErrors = true;  						response.Status = "404 Not Found";  						response.StatusCode = 404;  					}  				}  			}  		}  		//912 : change to new if statement to handle cases where the TabId404 couldn't be handled correctly  		if (unhandled404) {  			//proces the error on the external Url by rewriting to the external url  			if (!String.IsNullOrEmpty (errUrl)) {  				response.ClearContent ();  				response.TrySkipIisCustomErrors = true;  				string reason = "Not Found";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				response.AppendHeader (errRH' string.Format (errRV' "Url"' errUrl' reason));  				if (reason404 != null) {  					response.AppendHeader ("X-Url-Master-404-Data"' reason404);  				}  				response.StatusCode = statusCode;  				response.Status = status;  				server.Transfer ("~/" + errUrl' true);  			} else {  				errorPageHtml.Write (status + "<br>The requested Url does not return any valid content.");  				if (reason404 != null) {  					errorPageHtml.Write (status + "<br>" + reason404);  				}  				errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  				errorPageHtml.Write ("<div>Change this message by configuring a specific 404 Error Page or Url for this website.</div>");  				//output a reason for the 404  				string reason = "";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				if (!string.IsNullOrEmpty (errRH) && !string.IsNullOrEmpty (reason)) {  					response.AppendHeader (errRH' reason);  				}  				response.StatusCode = statusCode;  				response.Status = status;  			}  		}  	} else {  		//fallback output if not valid settings  		if (result != null && result.Action == ActionType.Output404) {  			//don't restate the requested Url to prevent cross site scripting  			errorPageHtml.Write ("404 Not Found<br>The requested Url does not return any valid content.");  			response.StatusCode = 404;  			response.Status = "404 Not Found";  		} else {  			//error' especially if invalid result object  			errorPageHtml.Write ("500 Server Error<br><div style='font-weight:bolder'>An error occured during processing : if possible' check the event log of the server</div>");  			response.StatusCode = 500;  			response.Status = "500 Internal Server Error";  			if (result != null) {  				result.Action = ActionType.Output500;  			}  		}  	}  	if (ex != null) {  		if (context != null) {  			if (context.Items.Contains ("UrlRewrite:Exception") == false) {  				context.Items.Add ("UrlRewrite:Exception"' ex.Message);  				context.Items.Add ("UrlRewrite:StackTrace"' ex.StackTrace);  			}  		}  		if (ceSection != null && ceSection.Mode == CustomErrorsMode.Off) {  			errorPageHtml.Write (errorPageHtmlHeader);  			errorPageHtml.Write ("<div style='font-weight:bolder'>Exception:</div><div>" + ex.Message + "</div>");  			errorPageHtml.Write ("<div style='font-weight:bolder'>Stack Trace:</div><div>" + ex.StackTrace + "</div>");  			errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  			errorPageHtml.Write ("<div>You can see this exception because the customErrors attribute in the web.config is set to 'off'.  Change this value to 'on' or 'RemoteOnly' to show Error Handling</div>");  			try {  				if (errUrl != null && errUrl.StartsWith ("~")) {  					errUrl = VirtualPathUtility.ToAbsolute (errUrl);  				}  			} finally {  				if (errUrl != null) {  					errorPageHtml.Write ("<div>The error handling would have shown this page : <a href='" + errUrl + "'>" + errUrl + "</a></div>");  				} else {  					errorPageHtml.Write ("<div>The error handling could not determine the correct page to show.</div>");  				}  			}  		}  	}  	string errorPageHtmlBody = errorPageHtml.ToString ();  	if (errorPageHtmlBody.Length > 0) {  		response.Write (errorPageHtmlHeader);  		response.Write (errorPageHtmlBody);  		response.Write (errorPageHtmlFooter);  	}  	if (ex != null) {  		UrlRewriterUtils.LogExceptionInRequest (ex' status' result);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (context != null) {  	HttpRequest request = context.Request;  	HttpResponse response = context.Response;  	HttpServerUtility server = context.Server;  	const string errorPageHtmlHeader = @"<html><head><title>{0}</title></head><body>";  	const string errorPageHtmlFooter = @"</body></html>";  	var errorPageHtml = new StringWriter ();  	CustomErrorsSection ceSection = null;  	//876 : security catch for custom error reading  	try {  		ceSection = (CustomErrorsSection)WebConfigurationManager.GetSection ("system.web/customErrors");  	} // ReSharper disable EmptyGeneralCatchClause  	catch (Exception)// ReSharper restore EmptyGeneralCatchClause  	 {  		//on some medium trust environments' this will throw an exception for trying to read the custom Errors  		//do nothing  	}  	/* 454 new 404/500 error handling routine */bool useDNNTab = false;  	int errTabId = -1;  	string errUrl = null;  	string status = "";  	bool isPostback = false;  	if (settings != null) {  		if (request.RequestType == "POST") {  			isPostback = true;  		}  		if (result != null && ex != null) {  			result.DebugMessages.Add ("Exception: " + ex.Message);  			result.DebugMessages.Add ("Stack Trace: " + ex.StackTrace);  			if (ex.InnerException != null) {  				result.DebugMessages.Add ("Inner Ex : " + ex.InnerException.Message);  				result.DebugMessages.Add ("Stack Trace: " + ex.InnerException.StackTrace);  			} else {  				result.DebugMessages.Add ("Inner Ex : null");  			}  		}  		string errRH;  		string errRV;  		int statusCode;  		if (result != null && result.Action != ActionType.Output404) {  			//output everything but 404 (usually 500)  			if (settings.TabId500 > -1)//tabid specified for 500 error page' use that  			 {  				useDNNTab = true;  				errTabId = settings.TabId500;  			}  			errUrl = settings.Url500;  			errRH = "X-UrlRewriter-500";  			errRV = "500 Rewritten to {0} : {1}";  			statusCode = 500;  			status = "500 Internal Server Error";  		} else//output 404 error   		 {  			if (settings.TabId404 > -1)//if the tabid is specified for a 404 page' then use that  			 {  				useDNNTab = true;  				errTabId = settings.TabId404;  			}  			if (!String.IsNullOrEmpty (settings.Regex404))//with 404 errors' there's an option to catch certain urls and use an external url for extra processing.  			 {  				try {  					//944 : check the original Url in case the requested Url has been rewritten before discovering it's a 404 error  					string requestedUrl = request.Url.ToString ();  					if (result != null && !string.IsNullOrEmpty (result.OriginalPath)) {  						requestedUrl = result.OriginalPath;  					}  					if (Regex.IsMatch (requestedUrl' settings.Regex404' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  						useDNNTab = false;  						//if we have a match in the 404 regex value' then don't use the tabid  					}  				} catch (Exception regexEx) {  					//.some type of exception : output in response header' and go back to using the tabid   					response.AppendHeader ("X-UrlRewriter-404Exception"' regexEx.Message);  				}  			}  			errUrl = settings.Url404;  			errRH = "X-UrlRewriter-404";  			errRV = "404 Rewritten to {0} : {1} : Reason {2}";  			status = "404 Not Found";  			statusCode = 404;  		}  		// check for 404 logging  		if ((result == null || result.Action == ActionType.Output404)) {  			//Log 404 errors to Event Log  			UrlRewriterUtils.Log404 (request' settings' result);  		}  		//912 : use unhandled 404 switch  		string reason404 = null;  		bool unhandled404 = true;  		if (useDNNTab && errTabId > -1) {  			unhandled404 = false;  			//we're handling it here  			TabInfo errTab = TabController.Instance.GetTab (errTabId' result.PortalId' true);  			if (errTab != null) {  				bool redirect = false;  				//ok' valid tabid.  what we're going to do is to load up this tab via a rewrite of the url' and then change the output status  				string reason = "Not Found";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				response.AppendHeader (errRH' string.Format (errRV' "DNN Tab"' errTab.TabName + "(Tabid:" + errTabId.ToString () + ")"' reason));  				//show debug messages even if in debug mode  				if (context != null && response != null && result != null && showDebug) {  					ShowDebugData (context' result.OriginalPath' result' null);  				}  				if (!isPostback) {  					response.ClearContent ();  					response.StatusCode = statusCode;  					response.Status = status;  				} else {  					redirect = true;  					//redirect postbacks as you can't postback successfully to a server.transfer  				}  				errUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (errTab.TabID' "");  				//have to update the portal settings with the new tabid  				PortalSettings ps = null;  				if (context != null && context.Items != null) {  					if (context.Items.Contains ("PortalSettings")) {  						ps = (PortalSettings)context.Items ["PortalSettings"];  						context.Items.Remove ("PortalSettings");  						//nix it from the context  					}  				}  				if (ps != null && ps.PortalAlias != null) {  					ps = new PortalSettings (errTabId' ps.PortalAlias);  				} else {  					if (result.HttpAlias != null && result.PortalId > -1) {  						PortalAliasInfo pa = PortalAliasController.Instance.GetPortalAlias (result.HttpAlias' result.PortalId);  						ps = new PortalSettings (errTabId' pa);  					} else {  						//912 : handle 404 when no valid portal can be identified  						//results when iis is configured to handle portal alias' but   						//DNN isn't.  This always returns 404 because a multi-portal site  						//can't just show the 404 page of the host site.  						ArrayList portals = PortalController.Instance.GetPortals ();  						if (portals != null && portals.Count == 1) {  							//single portal install' load up portal settings for this portal  							var singlePortal = (PortalInfo)portals [0];  							//list of aliases from database  							var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (singlePortal.PortalID).ToList ();  							//list of aliases from Advanced Url settings  							List<string> chosen = aliases.GetAliasesForPortalId (singlePortal.PortalID);  							PortalAliasInfo useFor404 = null;  							//go through all aliases and either get the first valid one' or the first   							//as chosen in the advanced url management settings  							foreach (var pa in aliases) {  								if (useFor404 == null) {  									useFor404 = pa;  									//first one by default  								}  								//matching?  								if (chosen != null && chosen.Count > 0) {  									if (chosen.Contains (pa.HTTPAlias)) {  										useFor404 = pa;  									}  								} else {  									break;  									//no further checking  								}  							}  							//now configure that as the portal settings  							if (useFor404 != null) {  								//create portal settings context for identified portal alias in single portal install  								ps = new PortalSettings (errTabId' useFor404);  							}  						} else {  							reason404 = "Requested domain name is not configured as valid website";  							unhandled404 = true;  						}  					}  				}  				if (ps != null) {  					//re-add the context items portal settings back in  					context.Items.Add ("PortalSettings"' ps);  				}  				if (redirect) {  					errUrl = TestableGlobals.Instance.NavigateURL ();  					response.Redirect (errUrl' true);  					//redirect and end response.    					//It will mean the user will have to postback again' but it will work the second time  				} else {  					if (transfer) {  						//execute a server transfer to the default.aspx?tabid=xx url  						//767 : object not set error on extensionless 404 errors  						if (context.User == null) {  							context.User = Thread.CurrentPrincipal;  						}  						response.TrySkipIisCustomErrors = true;  						//881 : spoof the basePage object so that the client dependency framework  						//is satisfied it's working with a page-based handler  						IHttpHandler spoofPage = new CDefault ();  						context.Handler = spoofPage;  						server.Transfer ("~/" + errUrl' true);  					} else {  						context.RewritePath ("~/Default.aspx"' false);  						response.TrySkipIisCustomErrors = true;  						response.Status = "404 Not Found";  						response.StatusCode = 404;  					}  				}  			}  		}  		//912 : change to new if statement to handle cases where the TabId404 couldn't be handled correctly  		if (unhandled404) {  			//proces the error on the external Url by rewriting to the external url  			if (!String.IsNullOrEmpty (errUrl)) {  				response.ClearContent ();  				response.TrySkipIisCustomErrors = true;  				string reason = "Not Found";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				response.AppendHeader (errRH' string.Format (errRV' "Url"' errUrl' reason));  				if (reason404 != null) {  					response.AppendHeader ("X-Url-Master-404-Data"' reason404);  				}  				response.StatusCode = statusCode;  				response.Status = status;  				server.Transfer ("~/" + errUrl' true);  			} else {  				errorPageHtml.Write (status + "<br>The requested Url does not return any valid content.");  				if (reason404 != null) {  					errorPageHtml.Write (status + "<br>" + reason404);  				}  				errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  				errorPageHtml.Write ("<div>Change this message by configuring a specific 404 Error Page or Url for this website.</div>");  				//output a reason for the 404  				string reason = "";  				if (result != null) {  					reason = result.Reason.ToString ();  				}  				if (!string.IsNullOrEmpty (errRH) && !string.IsNullOrEmpty (reason)) {  					response.AppendHeader (errRH' reason);  				}  				response.StatusCode = statusCode;  				response.Status = status;  			}  		}  	} else {  		//fallback output if not valid settings  		if (result != null && result.Action == ActionType.Output404) {  			//don't restate the requested Url to prevent cross site scripting  			errorPageHtml.Write ("404 Not Found<br>The requested Url does not return any valid content.");  			response.StatusCode = 404;  			response.Status = "404 Not Found";  		} else {  			//error' especially if invalid result object  			errorPageHtml.Write ("500 Server Error<br><div style='font-weight:bolder'>An error occured during processing : if possible' check the event log of the server</div>");  			response.StatusCode = 500;  			response.Status = "500 Internal Server Error";  			if (result != null) {  				result.Action = ActionType.Output500;  			}  		}  	}  	if (ex != null) {  		if (context != null) {  			if (context.Items.Contains ("UrlRewrite:Exception") == false) {  				context.Items.Add ("UrlRewrite:Exception"' ex.Message);  				context.Items.Add ("UrlRewrite:StackTrace"' ex.StackTrace);  			}  		}  		if (ceSection != null && ceSection.Mode == CustomErrorsMode.Off) {  			errorPageHtml.Write (errorPageHtmlHeader);  			errorPageHtml.Write ("<div style='font-weight:bolder'>Exception:</div><div>" + ex.Message + "</div>");  			errorPageHtml.Write ("<div style='font-weight:bolder'>Stack Trace:</div><div>" + ex.StackTrace + "</div>");  			errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  			errorPageHtml.Write ("<div>You can see this exception because the customErrors attribute in the web.config is set to 'off'.  Change this value to 'on' or 'RemoteOnly' to show Error Handling</div>");  			try {  				if (errUrl != null && errUrl.StartsWith ("~")) {  					errUrl = VirtualPathUtility.ToAbsolute (errUrl);  				}  			} finally {  				if (errUrl != null) {  					errorPageHtml.Write ("<div>The error handling would have shown this page : <a href='" + errUrl + "'>" + errUrl + "</a></div>");  				} else {  					errorPageHtml.Write ("<div>The error handling could not determine the correct page to show.</div>");  				}  			}  		}  	}  	string errorPageHtmlBody = errorPageHtml.ToString ();  	if (errorPageHtmlBody.Length > 0) {  		response.Write (errorPageHtmlHeader);  		response.Write (errorPageHtmlBody);  		response.Write (errorPageHtmlFooter);  	}  	if (ex != null) {  		UrlRewriterUtils.LogExceptionInRequest (ex' status' result);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (settings != null) {  	if (request.RequestType == "POST") {  		isPostback = true;  	}  	if (result != null && ex != null) {  		result.DebugMessages.Add ("Exception: " + ex.Message);  		result.DebugMessages.Add ("Stack Trace: " + ex.StackTrace);  		if (ex.InnerException != null) {  			result.DebugMessages.Add ("Inner Ex : " + ex.InnerException.Message);  			result.DebugMessages.Add ("Stack Trace: " + ex.InnerException.StackTrace);  		} else {  			result.DebugMessages.Add ("Inner Ex : null");  		}  	}  	string errRH;  	string errRV;  	int statusCode;  	if (result != null && result.Action != ActionType.Output404) {  		//output everything but 404 (usually 500)  		if (settings.TabId500 > -1)//tabid specified for 500 error page' use that  		 {  			useDNNTab = true;  			errTabId = settings.TabId500;  		}  		errUrl = settings.Url500;  		errRH = "X-UrlRewriter-500";  		errRV = "500 Rewritten to {0} : {1}";  		statusCode = 500;  		status = "500 Internal Server Error";  	} else//output 404 error   	 {  		if (settings.TabId404 > -1)//if the tabid is specified for a 404 page' then use that  		 {  			useDNNTab = true;  			errTabId = settings.TabId404;  		}  		if (!String.IsNullOrEmpty (settings.Regex404))//with 404 errors' there's an option to catch certain urls and use an external url for extra processing.  		 {  			try {  				//944 : check the original Url in case the requested Url has been rewritten before discovering it's a 404 error  				string requestedUrl = request.Url.ToString ();  				if (result != null && !string.IsNullOrEmpty (result.OriginalPath)) {  					requestedUrl = result.OriginalPath;  				}  				if (Regex.IsMatch (requestedUrl' settings.Regex404' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  					useDNNTab = false;  					//if we have a match in the 404 regex value' then don't use the tabid  				}  			} catch (Exception regexEx) {  				//.some type of exception : output in response header' and go back to using the tabid   				response.AppendHeader ("X-UrlRewriter-404Exception"' regexEx.Message);  			}  		}  		errUrl = settings.Url404;  		errRH = "X-UrlRewriter-404";  		errRV = "404 Rewritten to {0} : {1} : Reason {2}";  		status = "404 Not Found";  		statusCode = 404;  	}  	// check for 404 logging  	if ((result == null || result.Action == ActionType.Output404)) {  		//Log 404 errors to Event Log  		UrlRewriterUtils.Log404 (request' settings' result);  	}  	//912 : use unhandled 404 switch  	string reason404 = null;  	bool unhandled404 = true;  	if (useDNNTab && errTabId > -1) {  		unhandled404 = false;  		//we're handling it here  		TabInfo errTab = TabController.Instance.GetTab (errTabId' result.PortalId' true);  		if (errTab != null) {  			bool redirect = false;  			//ok' valid tabid.  what we're going to do is to load up this tab via a rewrite of the url' and then change the output status  			string reason = "Not Found";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			response.AppendHeader (errRH' string.Format (errRV' "DNN Tab"' errTab.TabName + "(Tabid:" + errTabId.ToString () + ")"' reason));  			//show debug messages even if in debug mode  			if (context != null && response != null && result != null && showDebug) {  				ShowDebugData (context' result.OriginalPath' result' null);  			}  			if (!isPostback) {  				response.ClearContent ();  				response.StatusCode = statusCode;  				response.Status = status;  			} else {  				redirect = true;  				//redirect postbacks as you can't postback successfully to a server.transfer  			}  			errUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (errTab.TabID' "");  			//have to update the portal settings with the new tabid  			PortalSettings ps = null;  			if (context != null && context.Items != null) {  				if (context.Items.Contains ("PortalSettings")) {  					ps = (PortalSettings)context.Items ["PortalSettings"];  					context.Items.Remove ("PortalSettings");  					//nix it from the context  				}  			}  			if (ps != null && ps.PortalAlias != null) {  				ps = new PortalSettings (errTabId' ps.PortalAlias);  			} else {  				if (result.HttpAlias != null && result.PortalId > -1) {  					PortalAliasInfo pa = PortalAliasController.Instance.GetPortalAlias (result.HttpAlias' result.PortalId);  					ps = new PortalSettings (errTabId' pa);  				} else {  					//912 : handle 404 when no valid portal can be identified  					//results when iis is configured to handle portal alias' but   					//DNN isn't.  This always returns 404 because a multi-portal site  					//can't just show the 404 page of the host site.  					ArrayList portals = PortalController.Instance.GetPortals ();  					if (portals != null && portals.Count == 1) {  						//single portal install' load up portal settings for this portal  						var singlePortal = (PortalInfo)portals [0];  						//list of aliases from database  						var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (singlePortal.PortalID).ToList ();  						//list of aliases from Advanced Url settings  						List<string> chosen = aliases.GetAliasesForPortalId (singlePortal.PortalID);  						PortalAliasInfo useFor404 = null;  						//go through all aliases and either get the first valid one' or the first   						//as chosen in the advanced url management settings  						foreach (var pa in aliases) {  							if (useFor404 == null) {  								useFor404 = pa;  								//first one by default  							}  							//matching?  							if (chosen != null && chosen.Count > 0) {  								if (chosen.Contains (pa.HTTPAlias)) {  									useFor404 = pa;  								}  							} else {  								break;  								//no further checking  							}  						}  						//now configure that as the portal settings  						if (useFor404 != null) {  							//create portal settings context for identified portal alias in single portal install  							ps = new PortalSettings (errTabId' useFor404);  						}  					} else {  						reason404 = "Requested domain name is not configured as valid website";  						unhandled404 = true;  					}  				}  			}  			if (ps != null) {  				//re-add the context items portal settings back in  				context.Items.Add ("PortalSettings"' ps);  			}  			if (redirect) {  				errUrl = TestableGlobals.Instance.NavigateURL ();  				response.Redirect (errUrl' true);  				//redirect and end response.    				//It will mean the user will have to postback again' but it will work the second time  			} else {  				if (transfer) {  					//execute a server transfer to the default.aspx?tabid=xx url  					//767 : object not set error on extensionless 404 errors  					if (context.User == null) {  						context.User = Thread.CurrentPrincipal;  					}  					response.TrySkipIisCustomErrors = true;  					//881 : spoof the basePage object so that the client dependency framework  					//is satisfied it's working with a page-based handler  					IHttpHandler spoofPage = new CDefault ();  					context.Handler = spoofPage;  					server.Transfer ("~/" + errUrl' true);  				} else {  					context.RewritePath ("~/Default.aspx"' false);  					response.TrySkipIisCustomErrors = true;  					response.Status = "404 Not Found";  					response.StatusCode = 404;  				}  			}  		}  	}  	//912 : change to new if statement to handle cases where the TabId404 couldn't be handled correctly  	if (unhandled404) {  		//proces the error on the external Url by rewriting to the external url  		if (!String.IsNullOrEmpty (errUrl)) {  			response.ClearContent ();  			response.TrySkipIisCustomErrors = true;  			string reason = "Not Found";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			response.AppendHeader (errRH' string.Format (errRV' "Url"' errUrl' reason));  			if (reason404 != null) {  				response.AppendHeader ("X-Url-Master-404-Data"' reason404);  			}  			response.StatusCode = statusCode;  			response.Status = status;  			server.Transfer ("~/" + errUrl' true);  		} else {  			errorPageHtml.Write (status + "<br>The requested Url does not return any valid content.");  			if (reason404 != null) {  				errorPageHtml.Write (status + "<br>" + reason404);  			}  			errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  			errorPageHtml.Write ("<div>Change this message by configuring a specific 404 Error Page or Url for this website.</div>");  			//output a reason for the 404  			string reason = "";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			if (!string.IsNullOrEmpty (errRH) && !string.IsNullOrEmpty (reason)) {  				response.AppendHeader (errRH' reason);  			}  			response.StatusCode = statusCode;  			response.Status = status;  		}  	}  } else {  	//fallback output if not valid settings  	if (result != null && result.Action == ActionType.Output404) {  		//don't restate the requested Url to prevent cross site scripting  		errorPageHtml.Write ("404 Not Found<br>The requested Url does not return any valid content.");  		response.StatusCode = 404;  		response.Status = "404 Not Found";  	} else {  		//error' especially if invalid result object  		errorPageHtml.Write ("500 Server Error<br><div style='font-weight:bolder'>An error occured during processing : if possible' check the event log of the server</div>");  		response.StatusCode = 500;  		response.Status = "500 Internal Server Error";  		if (result != null) {  			result.Action = ActionType.Output500;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (settings != null) {  	if (request.RequestType == "POST") {  		isPostback = true;  	}  	if (result != null && ex != null) {  		result.DebugMessages.Add ("Exception: " + ex.Message);  		result.DebugMessages.Add ("Stack Trace: " + ex.StackTrace);  		if (ex.InnerException != null) {  			result.DebugMessages.Add ("Inner Ex : " + ex.InnerException.Message);  			result.DebugMessages.Add ("Stack Trace: " + ex.InnerException.StackTrace);  		} else {  			result.DebugMessages.Add ("Inner Ex : null");  		}  	}  	string errRH;  	string errRV;  	int statusCode;  	if (result != null && result.Action != ActionType.Output404) {  		//output everything but 404 (usually 500)  		if (settings.TabId500 > -1)//tabid specified for 500 error page' use that  		 {  			useDNNTab = true;  			errTabId = settings.TabId500;  		}  		errUrl = settings.Url500;  		errRH = "X-UrlRewriter-500";  		errRV = "500 Rewritten to {0} : {1}";  		statusCode = 500;  		status = "500 Internal Server Error";  	} else//output 404 error   	 {  		if (settings.TabId404 > -1)//if the tabid is specified for a 404 page' then use that  		 {  			useDNNTab = true;  			errTabId = settings.TabId404;  		}  		if (!String.IsNullOrEmpty (settings.Regex404))//with 404 errors' there's an option to catch certain urls and use an external url for extra processing.  		 {  			try {  				//944 : check the original Url in case the requested Url has been rewritten before discovering it's a 404 error  				string requestedUrl = request.Url.ToString ();  				if (result != null && !string.IsNullOrEmpty (result.OriginalPath)) {  					requestedUrl = result.OriginalPath;  				}  				if (Regex.IsMatch (requestedUrl' settings.Regex404' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  					useDNNTab = false;  					//if we have a match in the 404 regex value' then don't use the tabid  				}  			} catch (Exception regexEx) {  				//.some type of exception : output in response header' and go back to using the tabid   				response.AppendHeader ("X-UrlRewriter-404Exception"' regexEx.Message);  			}  		}  		errUrl = settings.Url404;  		errRH = "X-UrlRewriter-404";  		errRV = "404 Rewritten to {0} : {1} : Reason {2}";  		status = "404 Not Found";  		statusCode = 404;  	}  	// check for 404 logging  	if ((result == null || result.Action == ActionType.Output404)) {  		//Log 404 errors to Event Log  		UrlRewriterUtils.Log404 (request' settings' result);  	}  	//912 : use unhandled 404 switch  	string reason404 = null;  	bool unhandled404 = true;  	if (useDNNTab && errTabId > -1) {  		unhandled404 = false;  		//we're handling it here  		TabInfo errTab = TabController.Instance.GetTab (errTabId' result.PortalId' true);  		if (errTab != null) {  			bool redirect = false;  			//ok' valid tabid.  what we're going to do is to load up this tab via a rewrite of the url' and then change the output status  			string reason = "Not Found";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			response.AppendHeader (errRH' string.Format (errRV' "DNN Tab"' errTab.TabName + "(Tabid:" + errTabId.ToString () + ")"' reason));  			//show debug messages even if in debug mode  			if (context != null && response != null && result != null && showDebug) {  				ShowDebugData (context' result.OriginalPath' result' null);  			}  			if (!isPostback) {  				response.ClearContent ();  				response.StatusCode = statusCode;  				response.Status = status;  			} else {  				redirect = true;  				//redirect postbacks as you can't postback successfully to a server.transfer  			}  			errUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (errTab.TabID' "");  			//have to update the portal settings with the new tabid  			PortalSettings ps = null;  			if (context != null && context.Items != null) {  				if (context.Items.Contains ("PortalSettings")) {  					ps = (PortalSettings)context.Items ["PortalSettings"];  					context.Items.Remove ("PortalSettings");  					//nix it from the context  				}  			}  			if (ps != null && ps.PortalAlias != null) {  				ps = new PortalSettings (errTabId' ps.PortalAlias);  			} else {  				if (result.HttpAlias != null && result.PortalId > -1) {  					PortalAliasInfo pa = PortalAliasController.Instance.GetPortalAlias (result.HttpAlias' result.PortalId);  					ps = new PortalSettings (errTabId' pa);  				} else {  					//912 : handle 404 when no valid portal can be identified  					//results when iis is configured to handle portal alias' but   					//DNN isn't.  This always returns 404 because a multi-portal site  					//can't just show the 404 page of the host site.  					ArrayList portals = PortalController.Instance.GetPortals ();  					if (portals != null && portals.Count == 1) {  						//single portal install' load up portal settings for this portal  						var singlePortal = (PortalInfo)portals [0];  						//list of aliases from database  						var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (singlePortal.PortalID).ToList ();  						//list of aliases from Advanced Url settings  						List<string> chosen = aliases.GetAliasesForPortalId (singlePortal.PortalID);  						PortalAliasInfo useFor404 = null;  						//go through all aliases and either get the first valid one' or the first   						//as chosen in the advanced url management settings  						foreach (var pa in aliases) {  							if (useFor404 == null) {  								useFor404 = pa;  								//first one by default  							}  							//matching?  							if (chosen != null && chosen.Count > 0) {  								if (chosen.Contains (pa.HTTPAlias)) {  									useFor404 = pa;  								}  							} else {  								break;  								//no further checking  							}  						}  						//now configure that as the portal settings  						if (useFor404 != null) {  							//create portal settings context for identified portal alias in single portal install  							ps = new PortalSettings (errTabId' useFor404);  						}  					} else {  						reason404 = "Requested domain name is not configured as valid website";  						unhandled404 = true;  					}  				}  			}  			if (ps != null) {  				//re-add the context items portal settings back in  				context.Items.Add ("PortalSettings"' ps);  			}  			if (redirect) {  				errUrl = TestableGlobals.Instance.NavigateURL ();  				response.Redirect (errUrl' true);  				//redirect and end response.    				//It will mean the user will have to postback again' but it will work the second time  			} else {  				if (transfer) {  					//execute a server transfer to the default.aspx?tabid=xx url  					//767 : object not set error on extensionless 404 errors  					if (context.User == null) {  						context.User = Thread.CurrentPrincipal;  					}  					response.TrySkipIisCustomErrors = true;  					//881 : spoof the basePage object so that the client dependency framework  					//is satisfied it's working with a page-based handler  					IHttpHandler spoofPage = new CDefault ();  					context.Handler = spoofPage;  					server.Transfer ("~/" + errUrl' true);  				} else {  					context.RewritePath ("~/Default.aspx"' false);  					response.TrySkipIisCustomErrors = true;  					response.Status = "404 Not Found";  					response.StatusCode = 404;  				}  			}  		}  	}  	//912 : change to new if statement to handle cases where the TabId404 couldn't be handled correctly  	if (unhandled404) {  		//proces the error on the external Url by rewriting to the external url  		if (!String.IsNullOrEmpty (errUrl)) {  			response.ClearContent ();  			response.TrySkipIisCustomErrors = true;  			string reason = "Not Found";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			response.AppendHeader (errRH' string.Format (errRV' "Url"' errUrl' reason));  			if (reason404 != null) {  				response.AppendHeader ("X-Url-Master-404-Data"' reason404);  			}  			response.StatusCode = statusCode;  			response.Status = status;  			server.Transfer ("~/" + errUrl' true);  		} else {  			errorPageHtml.Write (status + "<br>The requested Url does not return any valid content.");  			if (reason404 != null) {  				errorPageHtml.Write (status + "<br>" + reason404);  			}  			errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  			errorPageHtml.Write ("<div>Change this message by configuring a specific 404 Error Page or Url for this website.</div>");  			//output a reason for the 404  			string reason = "";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			if (!string.IsNullOrEmpty (errRH) && !string.IsNullOrEmpty (reason)) {  				response.AppendHeader (errRH' reason);  			}  			response.StatusCode = statusCode;  			response.Status = status;  		}  	}  } else {  	//fallback output if not valid settings  	if (result != null && result.Action == ActionType.Output404) {  		//don't restate the requested Url to prevent cross site scripting  		errorPageHtml.Write ("404 Not Found<br>The requested Url does not return any valid content.");  		response.StatusCode = 404;  		response.Status = "404 Not Found";  	} else {  		//error' especially if invalid result object  		errorPageHtml.Write ("500 Server Error<br><div style='font-weight:bolder'>An error occured during processing : if possible' check the event log of the server</div>");  		response.StatusCode = 500;  		response.Status = "500 Internal Server Error";  		if (result != null) {  			result.Action = ActionType.Output500;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (settings != null) {  	if (request.RequestType == "POST") {  		isPostback = true;  	}  	if (result != null && ex != null) {  		result.DebugMessages.Add ("Exception: " + ex.Message);  		result.DebugMessages.Add ("Stack Trace: " + ex.StackTrace);  		if (ex.InnerException != null) {  			result.DebugMessages.Add ("Inner Ex : " + ex.InnerException.Message);  			result.DebugMessages.Add ("Stack Trace: " + ex.InnerException.StackTrace);  		} else {  			result.DebugMessages.Add ("Inner Ex : null");  		}  	}  	string errRH;  	string errRV;  	int statusCode;  	if (result != null && result.Action != ActionType.Output404) {  		//output everything but 404 (usually 500)  		if (settings.TabId500 > -1)//tabid specified for 500 error page' use that  		 {  			useDNNTab = true;  			errTabId = settings.TabId500;  		}  		errUrl = settings.Url500;  		errRH = "X-UrlRewriter-500";  		errRV = "500 Rewritten to {0} : {1}";  		statusCode = 500;  		status = "500 Internal Server Error";  	} else//output 404 error   	 {  		if (settings.TabId404 > -1)//if the tabid is specified for a 404 page' then use that  		 {  			useDNNTab = true;  			errTabId = settings.TabId404;  		}  		if (!String.IsNullOrEmpty (settings.Regex404))//with 404 errors' there's an option to catch certain urls and use an external url for extra processing.  		 {  			try {  				//944 : check the original Url in case the requested Url has been rewritten before discovering it's a 404 error  				string requestedUrl = request.Url.ToString ();  				if (result != null && !string.IsNullOrEmpty (result.OriginalPath)) {  					requestedUrl = result.OriginalPath;  				}  				if (Regex.IsMatch (requestedUrl' settings.Regex404' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  					useDNNTab = false;  					//if we have a match in the 404 regex value' then don't use the tabid  				}  			} catch (Exception regexEx) {  				//.some type of exception : output in response header' and go back to using the tabid   				response.AppendHeader ("X-UrlRewriter-404Exception"' regexEx.Message);  			}  		}  		errUrl = settings.Url404;  		errRH = "X-UrlRewriter-404";  		errRV = "404 Rewritten to {0} : {1} : Reason {2}";  		status = "404 Not Found";  		statusCode = 404;  	}  	// check for 404 logging  	if ((result == null || result.Action == ActionType.Output404)) {  		//Log 404 errors to Event Log  		UrlRewriterUtils.Log404 (request' settings' result);  	}  	//912 : use unhandled 404 switch  	string reason404 = null;  	bool unhandled404 = true;  	if (useDNNTab && errTabId > -1) {  		unhandled404 = false;  		//we're handling it here  		TabInfo errTab = TabController.Instance.GetTab (errTabId' result.PortalId' true);  		if (errTab != null) {  			bool redirect = false;  			//ok' valid tabid.  what we're going to do is to load up this tab via a rewrite of the url' and then change the output status  			string reason = "Not Found";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			response.AppendHeader (errRH' string.Format (errRV' "DNN Tab"' errTab.TabName + "(Tabid:" + errTabId.ToString () + ")"' reason));  			//show debug messages even if in debug mode  			if (context != null && response != null && result != null && showDebug) {  				ShowDebugData (context' result.OriginalPath' result' null);  			}  			if (!isPostback) {  				response.ClearContent ();  				response.StatusCode = statusCode;  				response.Status = status;  			} else {  				redirect = true;  				//redirect postbacks as you can't postback successfully to a server.transfer  			}  			errUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (errTab.TabID' "");  			//have to update the portal settings with the new tabid  			PortalSettings ps = null;  			if (context != null && context.Items != null) {  				if (context.Items.Contains ("PortalSettings")) {  					ps = (PortalSettings)context.Items ["PortalSettings"];  					context.Items.Remove ("PortalSettings");  					//nix it from the context  				}  			}  			if (ps != null && ps.PortalAlias != null) {  				ps = new PortalSettings (errTabId' ps.PortalAlias);  			} else {  				if (result.HttpAlias != null && result.PortalId > -1) {  					PortalAliasInfo pa = PortalAliasController.Instance.GetPortalAlias (result.HttpAlias' result.PortalId);  					ps = new PortalSettings (errTabId' pa);  				} else {  					//912 : handle 404 when no valid portal can be identified  					//results when iis is configured to handle portal alias' but   					//DNN isn't.  This always returns 404 because a multi-portal site  					//can't just show the 404 page of the host site.  					ArrayList portals = PortalController.Instance.GetPortals ();  					if (portals != null && portals.Count == 1) {  						//single portal install' load up portal settings for this portal  						var singlePortal = (PortalInfo)portals [0];  						//list of aliases from database  						var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (singlePortal.PortalID).ToList ();  						//list of aliases from Advanced Url settings  						List<string> chosen = aliases.GetAliasesForPortalId (singlePortal.PortalID);  						PortalAliasInfo useFor404 = null;  						//go through all aliases and either get the first valid one' or the first   						//as chosen in the advanced url management settings  						foreach (var pa in aliases) {  							if (useFor404 == null) {  								useFor404 = pa;  								//first one by default  							}  							//matching?  							if (chosen != null && chosen.Count > 0) {  								if (chosen.Contains (pa.HTTPAlias)) {  									useFor404 = pa;  								}  							} else {  								break;  								//no further checking  							}  						}  						//now configure that as the portal settings  						if (useFor404 != null) {  							//create portal settings context for identified portal alias in single portal install  							ps = new PortalSettings (errTabId' useFor404);  						}  					} else {  						reason404 = "Requested domain name is not configured as valid website";  						unhandled404 = true;  					}  				}  			}  			if (ps != null) {  				//re-add the context items portal settings back in  				context.Items.Add ("PortalSettings"' ps);  			}  			if (redirect) {  				errUrl = TestableGlobals.Instance.NavigateURL ();  				response.Redirect (errUrl' true);  				//redirect and end response.    				//It will mean the user will have to postback again' but it will work the second time  			} else {  				if (transfer) {  					//execute a server transfer to the default.aspx?tabid=xx url  					//767 : object not set error on extensionless 404 errors  					if (context.User == null) {  						context.User = Thread.CurrentPrincipal;  					}  					response.TrySkipIisCustomErrors = true;  					//881 : spoof the basePage object so that the client dependency framework  					//is satisfied it's working with a page-based handler  					IHttpHandler spoofPage = new CDefault ();  					context.Handler = spoofPage;  					server.Transfer ("~/" + errUrl' true);  				} else {  					context.RewritePath ("~/Default.aspx"' false);  					response.TrySkipIisCustomErrors = true;  					response.Status = "404 Not Found";  					response.StatusCode = 404;  				}  			}  		}  	}  	//912 : change to new if statement to handle cases where the TabId404 couldn't be handled correctly  	if (unhandled404) {  		//proces the error on the external Url by rewriting to the external url  		if (!String.IsNullOrEmpty (errUrl)) {  			response.ClearContent ();  			response.TrySkipIisCustomErrors = true;  			string reason = "Not Found";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			response.AppendHeader (errRH' string.Format (errRV' "Url"' errUrl' reason));  			if (reason404 != null) {  				response.AppendHeader ("X-Url-Master-404-Data"' reason404);  			}  			response.StatusCode = statusCode;  			response.Status = status;  			server.Transfer ("~/" + errUrl' true);  		} else {  			errorPageHtml.Write (status + "<br>The requested Url does not return any valid content.");  			if (reason404 != null) {  				errorPageHtml.Write (status + "<br>" + reason404);  			}  			errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  			errorPageHtml.Write ("<div>Change this message by configuring a specific 404 Error Page or Url for this website.</div>");  			//output a reason for the 404  			string reason = "";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			if (!string.IsNullOrEmpty (errRH) && !string.IsNullOrEmpty (reason)) {  				response.AppendHeader (errRH' reason);  			}  			response.StatusCode = statusCode;  			response.Status = status;  		}  	}  } else {  	//fallback output if not valid settings  	if (result != null && result.Action == ActionType.Output404) {  		//don't restate the requested Url to prevent cross site scripting  		errorPageHtml.Write ("404 Not Found<br>The requested Url does not return any valid content.");  		response.StatusCode = 404;  		response.Status = "404 Not Found";  	} else {  		//error' especially if invalid result object  		errorPageHtml.Write ("500 Server Error<br><div style='font-weight:bolder'>An error occured during processing : if possible' check the event log of the server</div>");  		response.StatusCode = 500;  		response.Status = "500 Internal Server Error";  		if (result != null) {  			result.Action = ActionType.Output500;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (settings != null) {  	if (request.RequestType == "POST") {  		isPostback = true;  	}  	if (result != null && ex != null) {  		result.DebugMessages.Add ("Exception: " + ex.Message);  		result.DebugMessages.Add ("Stack Trace: " + ex.StackTrace);  		if (ex.InnerException != null) {  			result.DebugMessages.Add ("Inner Ex : " + ex.InnerException.Message);  			result.DebugMessages.Add ("Stack Trace: " + ex.InnerException.StackTrace);  		} else {  			result.DebugMessages.Add ("Inner Ex : null");  		}  	}  	string errRH;  	string errRV;  	int statusCode;  	if (result != null && result.Action != ActionType.Output404) {  		//output everything but 404 (usually 500)  		if (settings.TabId500 > -1)//tabid specified for 500 error page' use that  		 {  			useDNNTab = true;  			errTabId = settings.TabId500;  		}  		errUrl = settings.Url500;  		errRH = "X-UrlRewriter-500";  		errRV = "500 Rewritten to {0} : {1}";  		statusCode = 500;  		status = "500 Internal Server Error";  	} else//output 404 error   	 {  		if (settings.TabId404 > -1)//if the tabid is specified for a 404 page' then use that  		 {  			useDNNTab = true;  			errTabId = settings.TabId404;  		}  		if (!String.IsNullOrEmpty (settings.Regex404))//with 404 errors' there's an option to catch certain urls and use an external url for extra processing.  		 {  			try {  				//944 : check the original Url in case the requested Url has been rewritten before discovering it's a 404 error  				string requestedUrl = request.Url.ToString ();  				if (result != null && !string.IsNullOrEmpty (result.OriginalPath)) {  					requestedUrl = result.OriginalPath;  				}  				if (Regex.IsMatch (requestedUrl' settings.Regex404' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  					useDNNTab = false;  					//if we have a match in the 404 regex value' then don't use the tabid  				}  			} catch (Exception regexEx) {  				//.some type of exception : output in response header' and go back to using the tabid   				response.AppendHeader ("X-UrlRewriter-404Exception"' regexEx.Message);  			}  		}  		errUrl = settings.Url404;  		errRH = "X-UrlRewriter-404";  		errRV = "404 Rewritten to {0} : {1} : Reason {2}";  		status = "404 Not Found";  		statusCode = 404;  	}  	// check for 404 logging  	if ((result == null || result.Action == ActionType.Output404)) {  		//Log 404 errors to Event Log  		UrlRewriterUtils.Log404 (request' settings' result);  	}  	//912 : use unhandled 404 switch  	string reason404 = null;  	bool unhandled404 = true;  	if (useDNNTab && errTabId > -1) {  		unhandled404 = false;  		//we're handling it here  		TabInfo errTab = TabController.Instance.GetTab (errTabId' result.PortalId' true);  		if (errTab != null) {  			bool redirect = false;  			//ok' valid tabid.  what we're going to do is to load up this tab via a rewrite of the url' and then change the output status  			string reason = "Not Found";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			response.AppendHeader (errRH' string.Format (errRV' "DNN Tab"' errTab.TabName + "(Tabid:" + errTabId.ToString () + ")"' reason));  			//show debug messages even if in debug mode  			if (context != null && response != null && result != null && showDebug) {  				ShowDebugData (context' result.OriginalPath' result' null);  			}  			if (!isPostback) {  				response.ClearContent ();  				response.StatusCode = statusCode;  				response.Status = status;  			} else {  				redirect = true;  				//redirect postbacks as you can't postback successfully to a server.transfer  			}  			errUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (errTab.TabID' "");  			//have to update the portal settings with the new tabid  			PortalSettings ps = null;  			if (context != null && context.Items != null) {  				if (context.Items.Contains ("PortalSettings")) {  					ps = (PortalSettings)context.Items ["PortalSettings"];  					context.Items.Remove ("PortalSettings");  					//nix it from the context  				}  			}  			if (ps != null && ps.PortalAlias != null) {  				ps = new PortalSettings (errTabId' ps.PortalAlias);  			} else {  				if (result.HttpAlias != null && result.PortalId > -1) {  					PortalAliasInfo pa = PortalAliasController.Instance.GetPortalAlias (result.HttpAlias' result.PortalId);  					ps = new PortalSettings (errTabId' pa);  				} else {  					//912 : handle 404 when no valid portal can be identified  					//results when iis is configured to handle portal alias' but   					//DNN isn't.  This always returns 404 because a multi-portal site  					//can't just show the 404 page of the host site.  					ArrayList portals = PortalController.Instance.GetPortals ();  					if (portals != null && portals.Count == 1) {  						//single portal install' load up portal settings for this portal  						var singlePortal = (PortalInfo)portals [0];  						//list of aliases from database  						var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (singlePortal.PortalID).ToList ();  						//list of aliases from Advanced Url settings  						List<string> chosen = aliases.GetAliasesForPortalId (singlePortal.PortalID);  						PortalAliasInfo useFor404 = null;  						//go through all aliases and either get the first valid one' or the first   						//as chosen in the advanced url management settings  						foreach (var pa in aliases) {  							if (useFor404 == null) {  								useFor404 = pa;  								//first one by default  							}  							//matching?  							if (chosen != null && chosen.Count > 0) {  								if (chosen.Contains (pa.HTTPAlias)) {  									useFor404 = pa;  								}  							} else {  								break;  								//no further checking  							}  						}  						//now configure that as the portal settings  						if (useFor404 != null) {  							//create portal settings context for identified portal alias in single portal install  							ps = new PortalSettings (errTabId' useFor404);  						}  					} else {  						reason404 = "Requested domain name is not configured as valid website";  						unhandled404 = true;  					}  				}  			}  			if (ps != null) {  				//re-add the context items portal settings back in  				context.Items.Add ("PortalSettings"' ps);  			}  			if (redirect) {  				errUrl = TestableGlobals.Instance.NavigateURL ();  				response.Redirect (errUrl' true);  				//redirect and end response.    				//It will mean the user will have to postback again' but it will work the second time  			} else {  				if (transfer) {  					//execute a server transfer to the default.aspx?tabid=xx url  					//767 : object not set error on extensionless 404 errors  					if (context.User == null) {  						context.User = Thread.CurrentPrincipal;  					}  					response.TrySkipIisCustomErrors = true;  					//881 : spoof the basePage object so that the client dependency framework  					//is satisfied it's working with a page-based handler  					IHttpHandler spoofPage = new CDefault ();  					context.Handler = spoofPage;  					server.Transfer ("~/" + errUrl' true);  				} else {  					context.RewritePath ("~/Default.aspx"' false);  					response.TrySkipIisCustomErrors = true;  					response.Status = "404 Not Found";  					response.StatusCode = 404;  				}  			}  		}  	}  	//912 : change to new if statement to handle cases where the TabId404 couldn't be handled correctly  	if (unhandled404) {  		//proces the error on the external Url by rewriting to the external url  		if (!String.IsNullOrEmpty (errUrl)) {  			response.ClearContent ();  			response.TrySkipIisCustomErrors = true;  			string reason = "Not Found";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			response.AppendHeader (errRH' string.Format (errRV' "Url"' errUrl' reason));  			if (reason404 != null) {  				response.AppendHeader ("X-Url-Master-404-Data"' reason404);  			}  			response.StatusCode = statusCode;  			response.Status = status;  			server.Transfer ("~/" + errUrl' true);  		} else {  			errorPageHtml.Write (status + "<br>The requested Url does not return any valid content.");  			if (reason404 != null) {  				errorPageHtml.Write (status + "<br>" + reason404);  			}  			errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  			errorPageHtml.Write ("<div>Change this message by configuring a specific 404 Error Page or Url for this website.</div>");  			//output a reason for the 404  			string reason = "";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			if (!string.IsNullOrEmpty (errRH) && !string.IsNullOrEmpty (reason)) {  				response.AppendHeader (errRH' reason);  			}  			response.StatusCode = statusCode;  			response.Status = status;  		}  	}  } else {  	//fallback output if not valid settings  	if (result != null && result.Action == ActionType.Output404) {  		//don't restate the requested Url to prevent cross site scripting  		errorPageHtml.Write ("404 Not Found<br>The requested Url does not return any valid content.");  		response.StatusCode = 404;  		response.Status = "404 Not Found";  	} else {  		//error' especially if invalid result object  		errorPageHtml.Write ("500 Server Error<br><div style='font-weight:bolder'>An error occured during processing : if possible' check the event log of the server</div>");  		response.StatusCode = 500;  		response.Status = "500 Internal Server Error";  		if (result != null) {  			result.Action = ActionType.Output500;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (settings != null) {  	if (request.RequestType == "POST") {  		isPostback = true;  	}  	if (result != null && ex != null) {  		result.DebugMessages.Add ("Exception: " + ex.Message);  		result.DebugMessages.Add ("Stack Trace: " + ex.StackTrace);  		if (ex.InnerException != null) {  			result.DebugMessages.Add ("Inner Ex : " + ex.InnerException.Message);  			result.DebugMessages.Add ("Stack Trace: " + ex.InnerException.StackTrace);  		} else {  			result.DebugMessages.Add ("Inner Ex : null");  		}  	}  	string errRH;  	string errRV;  	int statusCode;  	if (result != null && result.Action != ActionType.Output404) {  		//output everything but 404 (usually 500)  		if (settings.TabId500 > -1)//tabid specified for 500 error page' use that  		 {  			useDNNTab = true;  			errTabId = settings.TabId500;  		}  		errUrl = settings.Url500;  		errRH = "X-UrlRewriter-500";  		errRV = "500 Rewritten to {0} : {1}";  		statusCode = 500;  		status = "500 Internal Server Error";  	} else//output 404 error   	 {  		if (settings.TabId404 > -1)//if the tabid is specified for a 404 page' then use that  		 {  			useDNNTab = true;  			errTabId = settings.TabId404;  		}  		if (!String.IsNullOrEmpty (settings.Regex404))//with 404 errors' there's an option to catch certain urls and use an external url for extra processing.  		 {  			try {  				//944 : check the original Url in case the requested Url has been rewritten before discovering it's a 404 error  				string requestedUrl = request.Url.ToString ();  				if (result != null && !string.IsNullOrEmpty (result.OriginalPath)) {  					requestedUrl = result.OriginalPath;  				}  				if (Regex.IsMatch (requestedUrl' settings.Regex404' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  					useDNNTab = false;  					//if we have a match in the 404 regex value' then don't use the tabid  				}  			} catch (Exception regexEx) {  				//.some type of exception : output in response header' and go back to using the tabid   				response.AppendHeader ("X-UrlRewriter-404Exception"' regexEx.Message);  			}  		}  		errUrl = settings.Url404;  		errRH = "X-UrlRewriter-404";  		errRV = "404 Rewritten to {0} : {1} : Reason {2}";  		status = "404 Not Found";  		statusCode = 404;  	}  	// check for 404 logging  	if ((result == null || result.Action == ActionType.Output404)) {  		//Log 404 errors to Event Log  		UrlRewriterUtils.Log404 (request' settings' result);  	}  	//912 : use unhandled 404 switch  	string reason404 = null;  	bool unhandled404 = true;  	if (useDNNTab && errTabId > -1) {  		unhandled404 = false;  		//we're handling it here  		TabInfo errTab = TabController.Instance.GetTab (errTabId' result.PortalId' true);  		if (errTab != null) {  			bool redirect = false;  			//ok' valid tabid.  what we're going to do is to load up this tab via a rewrite of the url' and then change the output status  			string reason = "Not Found";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			response.AppendHeader (errRH' string.Format (errRV' "DNN Tab"' errTab.TabName + "(Tabid:" + errTabId.ToString () + ")"' reason));  			//show debug messages even if in debug mode  			if (context != null && response != null && result != null && showDebug) {  				ShowDebugData (context' result.OriginalPath' result' null);  			}  			if (!isPostback) {  				response.ClearContent ();  				response.StatusCode = statusCode;  				response.Status = status;  			} else {  				redirect = true;  				//redirect postbacks as you can't postback successfully to a server.transfer  			}  			errUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (errTab.TabID' "");  			//have to update the portal settings with the new tabid  			PortalSettings ps = null;  			if (context != null && context.Items != null) {  				if (context.Items.Contains ("PortalSettings")) {  					ps = (PortalSettings)context.Items ["PortalSettings"];  					context.Items.Remove ("PortalSettings");  					//nix it from the context  				}  			}  			if (ps != null && ps.PortalAlias != null) {  				ps = new PortalSettings (errTabId' ps.PortalAlias);  			} else {  				if (result.HttpAlias != null && result.PortalId > -1) {  					PortalAliasInfo pa = PortalAliasController.Instance.GetPortalAlias (result.HttpAlias' result.PortalId);  					ps = new PortalSettings (errTabId' pa);  				} else {  					//912 : handle 404 when no valid portal can be identified  					//results when iis is configured to handle portal alias' but   					//DNN isn't.  This always returns 404 because a multi-portal site  					//can't just show the 404 page of the host site.  					ArrayList portals = PortalController.Instance.GetPortals ();  					if (portals != null && portals.Count == 1) {  						//single portal install' load up portal settings for this portal  						var singlePortal = (PortalInfo)portals [0];  						//list of aliases from database  						var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (singlePortal.PortalID).ToList ();  						//list of aliases from Advanced Url settings  						List<string> chosen = aliases.GetAliasesForPortalId (singlePortal.PortalID);  						PortalAliasInfo useFor404 = null;  						//go through all aliases and either get the first valid one' or the first   						//as chosen in the advanced url management settings  						foreach (var pa in aliases) {  							if (useFor404 == null) {  								useFor404 = pa;  								//first one by default  							}  							//matching?  							if (chosen != null && chosen.Count > 0) {  								if (chosen.Contains (pa.HTTPAlias)) {  									useFor404 = pa;  								}  							} else {  								break;  								//no further checking  							}  						}  						//now configure that as the portal settings  						if (useFor404 != null) {  							//create portal settings context for identified portal alias in single portal install  							ps = new PortalSettings (errTabId' useFor404);  						}  					} else {  						reason404 = "Requested domain name is not configured as valid website";  						unhandled404 = true;  					}  				}  			}  			if (ps != null) {  				//re-add the context items portal settings back in  				context.Items.Add ("PortalSettings"' ps);  			}  			if (redirect) {  				errUrl = TestableGlobals.Instance.NavigateURL ();  				response.Redirect (errUrl' true);  				//redirect and end response.    				//It will mean the user will have to postback again' but it will work the second time  			} else {  				if (transfer) {  					//execute a server transfer to the default.aspx?tabid=xx url  					//767 : object not set error on extensionless 404 errors  					if (context.User == null) {  						context.User = Thread.CurrentPrincipal;  					}  					response.TrySkipIisCustomErrors = true;  					//881 : spoof the basePage object so that the client dependency framework  					//is satisfied it's working with a page-based handler  					IHttpHandler spoofPage = new CDefault ();  					context.Handler = spoofPage;  					server.Transfer ("~/" + errUrl' true);  				} else {  					context.RewritePath ("~/Default.aspx"' false);  					response.TrySkipIisCustomErrors = true;  					response.Status = "404 Not Found";  					response.StatusCode = 404;  				}  			}  		}  	}  	//912 : change to new if statement to handle cases where the TabId404 couldn't be handled correctly  	if (unhandled404) {  		//proces the error on the external Url by rewriting to the external url  		if (!String.IsNullOrEmpty (errUrl)) {  			response.ClearContent ();  			response.TrySkipIisCustomErrors = true;  			string reason = "Not Found";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			response.AppendHeader (errRH' string.Format (errRV' "Url"' errUrl' reason));  			if (reason404 != null) {  				response.AppendHeader ("X-Url-Master-404-Data"' reason404);  			}  			response.StatusCode = statusCode;  			response.Status = status;  			server.Transfer ("~/" + errUrl' true);  		} else {  			errorPageHtml.Write (status + "<br>The requested Url does not return any valid content.");  			if (reason404 != null) {  				errorPageHtml.Write (status + "<br>" + reason404);  			}  			errorPageHtml.Write ("<div style='font-weight:bolder'>Administrators</div>");  			errorPageHtml.Write ("<div>Change this message by configuring a specific 404 Error Page or Url for this website.</div>");  			//output a reason for the 404  			string reason = "";  			if (result != null) {  				reason = result.Reason.ToString ();  			}  			if (!string.IsNullOrEmpty (errRH) && !string.IsNullOrEmpty (reason)) {  				response.AppendHeader (errRH' reason);  			}  			response.StatusCode = statusCode;  			response.Status = status;  		}  	}  } else {  	//fallback output if not valid settings  	if (result != null && result.Action == ActionType.Output404) {  		//don't restate the requested Url to prevent cross site scripting  		errorPageHtml.Write ("404 Not Found<br>The requested Url does not return any valid content.");  		response.StatusCode = 404;  		response.Status = "404 Not Found";  	} else {  		//error' especially if invalid result object  		errorPageHtml.Write ("500 Server Error<br><div style='font-weight:bolder'>An error occured during processing : if possible' check the event log of the server</div>");  		response.StatusCode = 500;  		response.Status = "500 Internal Server Error";  		if (result != null) {  			result.Action = ActionType.Output500;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (result != null && result.Action != ActionType.Output404) {  	//output everything but 404 (usually 500)  	if (settings.TabId500 > -1)//tabid specified for 500 error page' use that  	 {  		useDNNTab = true;  		errTabId = settings.TabId500;  	}  	errUrl = settings.Url500;  	errRH = "X-UrlRewriter-500";  	errRV = "500 Rewritten to {0} : {1}";  	statusCode = 500;  	status = "500 Internal Server Error";  } else//output 404 error    {  	if (settings.TabId404 > -1)//if the tabid is specified for a 404 page' then use that  	 {  		useDNNTab = true;  		errTabId = settings.TabId404;  	}  	if (!String.IsNullOrEmpty (settings.Regex404))//with 404 errors' there's an option to catch certain urls and use an external url for extra processing.  	 {  		try {  			//944 : check the original Url in case the requested Url has been rewritten before discovering it's a 404 error  			string requestedUrl = request.Url.ToString ();  			if (result != null && !string.IsNullOrEmpty (result.OriginalPath)) {  				requestedUrl = result.OriginalPath;  			}  			if (Regex.IsMatch (requestedUrl' settings.Regex404' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  				useDNNTab = false;  				//if we have a match in the 404 regex value' then don't use the tabid  			}  		} catch (Exception regexEx) {  			//.some type of exception : output in response header' and go back to using the tabid   			response.AppendHeader ("X-UrlRewriter-404Exception"' regexEx.Message);  		}  	}  	errUrl = settings.Url404;  	errRH = "X-UrlRewriter-404";  	errRV = "404 Rewritten to {0} : {1} : Reason {2}";  	status = "404 Not Found";  	statusCode = 404;  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (result != null && result.Action != ActionType.Output404) {  	//output everything but 404 (usually 500)  	if (settings.TabId500 > -1)//tabid specified for 500 error page' use that  	 {  		useDNNTab = true;  		errTabId = settings.TabId500;  	}  	errUrl = settings.Url500;  	errRH = "X-UrlRewriter-500";  	errRV = "500 Rewritten to {0} : {1}";  	statusCode = 500;  	status = "500 Internal Server Error";  } else//output 404 error    {  	if (settings.TabId404 > -1)//if the tabid is specified for a 404 page' then use that  	 {  		useDNNTab = true;  		errTabId = settings.TabId404;  	}  	if (!String.IsNullOrEmpty (settings.Regex404))//with 404 errors' there's an option to catch certain urls and use an external url for extra processing.  	 {  		try {  			//944 : check the original Url in case the requested Url has been rewritten before discovering it's a 404 error  			string requestedUrl = request.Url.ToString ();  			if (result != null && !string.IsNullOrEmpty (result.OriginalPath)) {  				requestedUrl = result.OriginalPath;  			}  			if (Regex.IsMatch (requestedUrl' settings.Regex404' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  				useDNNTab = false;  				//if we have a match in the 404 regex value' then don't use the tabid  			}  		} catch (Exception regexEx) {  			//.some type of exception : output in response header' and go back to using the tabid   			response.AppendHeader ("X-UrlRewriter-404Exception"' regexEx.Message);  		}  	}  	errUrl = settings.Url404;  	errRH = "X-UrlRewriter-404";  	errRV = "404 Rewritten to {0} : {1} : Reason {2}";  	status = "404 Not Found";  	statusCode = 404;  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: statusCode = 500;  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: statusCode = 404;  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (useDNNTab && errTabId > -1) {  	unhandled404 = false;  	//we're handling it here  	TabInfo errTab = TabController.Instance.GetTab (errTabId' result.PortalId' true);  	if (errTab != null) {  		bool redirect = false;  		//ok' valid tabid.  what we're going to do is to load up this tab via a rewrite of the url' and then change the output status  		string reason = "Not Found";  		if (result != null) {  			reason = result.Reason.ToString ();  		}  		response.AppendHeader (errRH' string.Format (errRV' "DNN Tab"' errTab.TabName + "(Tabid:" + errTabId.ToString () + ")"' reason));  		//show debug messages even if in debug mode  		if (context != null && response != null && result != null && showDebug) {  			ShowDebugData (context' result.OriginalPath' result' null);  		}  		if (!isPostback) {  			response.ClearContent ();  			response.StatusCode = statusCode;  			response.Status = status;  		} else {  			redirect = true;  			//redirect postbacks as you can't postback successfully to a server.transfer  		}  		errUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (errTab.TabID' "");  		//have to update the portal settings with the new tabid  		PortalSettings ps = null;  		if (context != null && context.Items != null) {  			if (context.Items.Contains ("PortalSettings")) {  				ps = (PortalSettings)context.Items ["PortalSettings"];  				context.Items.Remove ("PortalSettings");  				//nix it from the context  			}  		}  		if (ps != null && ps.PortalAlias != null) {  			ps = new PortalSettings (errTabId' ps.PortalAlias);  		} else {  			if (result.HttpAlias != null && result.PortalId > -1) {  				PortalAliasInfo pa = PortalAliasController.Instance.GetPortalAlias (result.HttpAlias' result.PortalId);  				ps = new PortalSettings (errTabId' pa);  			} else {  				//912 : handle 404 when no valid portal can be identified  				//results when iis is configured to handle portal alias' but   				//DNN isn't.  This always returns 404 because a multi-portal site  				//can't just show the 404 page of the host site.  				ArrayList portals = PortalController.Instance.GetPortals ();  				if (portals != null && portals.Count == 1) {  					//single portal install' load up portal settings for this portal  					var singlePortal = (PortalInfo)portals [0];  					//list of aliases from database  					var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (singlePortal.PortalID).ToList ();  					//list of aliases from Advanced Url settings  					List<string> chosen = aliases.GetAliasesForPortalId (singlePortal.PortalID);  					PortalAliasInfo useFor404 = null;  					//go through all aliases and either get the first valid one' or the first   					//as chosen in the advanced url management settings  					foreach (var pa in aliases) {  						if (useFor404 == null) {  							useFor404 = pa;  							//first one by default  						}  						//matching?  						if (chosen != null && chosen.Count > 0) {  							if (chosen.Contains (pa.HTTPAlias)) {  								useFor404 = pa;  							}  						} else {  							break;  							//no further checking  						}  					}  					//now configure that as the portal settings  					if (useFor404 != null) {  						//create portal settings context for identified portal alias in single portal install  						ps = new PortalSettings (errTabId' useFor404);  					}  				} else {  					reason404 = "Requested domain name is not configured as valid website";  					unhandled404 = true;  				}  			}  		}  		if (ps != null) {  			//re-add the context items portal settings back in  			context.Items.Add ("PortalSettings"' ps);  		}  		if (redirect) {  			errUrl = TestableGlobals.Instance.NavigateURL ();  			response.Redirect (errUrl' true);  			//redirect and end response.    			//It will mean the user will have to postback again' but it will work the second time  		} else {  			if (transfer) {  				//execute a server transfer to the default.aspx?tabid=xx url  				//767 : object not set error on extensionless 404 errors  				if (context.User == null) {  					context.User = Thread.CurrentPrincipal;  				}  				response.TrySkipIisCustomErrors = true;  				//881 : spoof the basePage object so that the client dependency framework  				//is satisfied it's working with a page-based handler  				IHttpHandler spoofPage = new CDefault ();  				context.Handler = spoofPage;  				server.Transfer ("~/" + errUrl' true);  			} else {  				context.RewritePath ("~/Default.aspx"' false);  				response.TrySkipIisCustomErrors = true;  				response.Status = "404 Not Found";  				response.StatusCode = 404;  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (errTab != null) {  	bool redirect = false;  	//ok' valid tabid.  what we're going to do is to load up this tab via a rewrite of the url' and then change the output status  	string reason = "Not Found";  	if (result != null) {  		reason = result.Reason.ToString ();  	}  	response.AppendHeader (errRH' string.Format (errRV' "DNN Tab"' errTab.TabName + "(Tabid:" + errTabId.ToString () + ")"' reason));  	//show debug messages even if in debug mode  	if (context != null && response != null && result != null && showDebug) {  		ShowDebugData (context' result.OriginalPath' result' null);  	}  	if (!isPostback) {  		response.ClearContent ();  		response.StatusCode = statusCode;  		response.Status = status;  	} else {  		redirect = true;  		//redirect postbacks as you can't postback successfully to a server.transfer  	}  	errUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (errTab.TabID' "");  	//have to update the portal settings with the new tabid  	PortalSettings ps = null;  	if (context != null && context.Items != null) {  		if (context.Items.Contains ("PortalSettings")) {  			ps = (PortalSettings)context.Items ["PortalSettings"];  			context.Items.Remove ("PortalSettings");  			//nix it from the context  		}  	}  	if (ps != null && ps.PortalAlias != null) {  		ps = new PortalSettings (errTabId' ps.PortalAlias);  	} else {  		if (result.HttpAlias != null && result.PortalId > -1) {  			PortalAliasInfo pa = PortalAliasController.Instance.GetPortalAlias (result.HttpAlias' result.PortalId);  			ps = new PortalSettings (errTabId' pa);  		} else {  			//912 : handle 404 when no valid portal can be identified  			//results when iis is configured to handle portal alias' but   			//DNN isn't.  This always returns 404 because a multi-portal site  			//can't just show the 404 page of the host site.  			ArrayList portals = PortalController.Instance.GetPortals ();  			if (portals != null && portals.Count == 1) {  				//single portal install' load up portal settings for this portal  				var singlePortal = (PortalInfo)portals [0];  				//list of aliases from database  				var aliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (singlePortal.PortalID).ToList ();  				//list of aliases from Advanced Url settings  				List<string> chosen = aliases.GetAliasesForPortalId (singlePortal.PortalID);  				PortalAliasInfo useFor404 = null;  				//go through all aliases and either get the first valid one' or the first   				//as chosen in the advanced url management settings  				foreach (var pa in aliases) {  					if (useFor404 == null) {  						useFor404 = pa;  						//first one by default  					}  					//matching?  					if (chosen != null && chosen.Count > 0) {  						if (chosen.Contains (pa.HTTPAlias)) {  							useFor404 = pa;  						}  					} else {  						break;  						//no further checking  					}  				}  				//now configure that as the portal settings  				if (useFor404 != null) {  					//create portal settings context for identified portal alias in single portal install  					ps = new PortalSettings (errTabId' useFor404);  				}  			} else {  				reason404 = "Requested domain name is not configured as valid website";  				unhandled404 = true;  			}  		}  	}  	if (ps != null) {  		//re-add the context items portal settings back in  		context.Items.Add ("PortalSettings"' ps);  	}  	if (redirect) {  		errUrl = TestableGlobals.Instance.NavigateURL ();  		response.Redirect (errUrl' true);  		//redirect and end response.    		//It will mean the user will have to postback again' but it will work the second time  	} else {  		if (transfer) {  			//execute a server transfer to the default.aspx?tabid=xx url  			//767 : object not set error on extensionless 404 errors  			if (context.User == null) {  				context.User = Thread.CurrentPrincipal;  			}  			response.TrySkipIisCustomErrors = true;  			//881 : spoof the basePage object so that the client dependency framework  			//is satisfied it's working with a page-based handler  			IHttpHandler spoofPage = new CDefault ();  			context.Handler = spoofPage;  			server.Transfer ("~/" + errUrl' true);  		} else {  			context.RewritePath ("~/Default.aspx"' false);  			response.TrySkipIisCustomErrors = true;  			response.Status = "404 Not Found";  			response.StatusCode = 404;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (redirect) {  	errUrl = TestableGlobals.Instance.NavigateURL ();  	response.Redirect (errUrl' true);  	//redirect and end response.    	//It will mean the user will have to postback again' but it will work the second time  } else {  	if (transfer) {  		//execute a server transfer to the default.aspx?tabid=xx url  		//767 : object not set error on extensionless 404 errors  		if (context.User == null) {  			context.User = Thread.CurrentPrincipal;  		}  		response.TrySkipIisCustomErrors = true;  		//881 : spoof the basePage object so that the client dependency framework  		//is satisfied it's working with a page-based handler  		IHttpHandler spoofPage = new CDefault ();  		context.Handler = spoofPage;  		server.Transfer ("~/" + errUrl' true);  	} else {  		context.RewritePath ("~/Default.aspx"' false);  		response.TrySkipIisCustomErrors = true;  		response.Status = "404 Not Found";  		response.StatusCode = 404;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (transfer) {  	//execute a server transfer to the default.aspx?tabid=xx url  	//767 : object not set error on extensionless 404 errors  	if (context.User == null) {  		context.User = Thread.CurrentPrincipal;  	}  	response.TrySkipIisCustomErrors = true;  	//881 : spoof the basePage object so that the client dependency framework  	//is satisfied it's working with a page-based handler  	IHttpHandler spoofPage = new CDefault ();  	context.Handler = spoofPage;  	server.Transfer ("~/" + errUrl' true);  } else {  	context.RewritePath ("~/Default.aspx"' false);  	response.TrySkipIisCustomErrors = true;  	response.Status = "404 Not Found";  	response.StatusCode = 404;  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: response.StatusCode = 404;  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (result != null && result.Action == ActionType.Output404) {  	//don't restate the requested Url to prevent cross site scripting  	errorPageHtml.Write ("404 Not Found<br>The requested Url does not return any valid content.");  	response.StatusCode = 404;  	response.Status = "404 Not Found";  } else {  	//error' especially if invalid result object  	errorPageHtml.Write ("500 Server Error<br><div style='font-weight:bolder'>An error occured during processing : if possible' check the event log of the server</div>");  	response.StatusCode = 500;  	response.Status = "500 Internal Server Error";  	if (result != null) {  		result.Action = ActionType.Output500;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: if (result != null && result.Action == ActionType.Output404) {  	//don't restate the requested Url to prevent cross site scripting  	errorPageHtml.Write ("404 Not Found<br>The requested Url does not return any valid content.");  	response.StatusCode = 404;  	response.Status = "404 Not Found";  } else {  	//error' especially if invalid result object  	errorPageHtml.Write ("500 Server Error<br><div style='font-weight:bolder'>An error occured during processing : if possible' check the event log of the server</div>");  	response.StatusCode = 500;  	response.Status = "500 Internal Server Error";  	if (result != null) {  		result.Action = ActionType.Output500;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: response.StatusCode = 404;  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,Handle404OrException,The following statement contains a magic number: response.StatusCode = 500;  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IsPortalAliasIncorrect,The following statement contains a magic number: if (result.PortalId > -1)//portal has been identified   {  	var portalAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  	if (queryStringCol != null && queryStringCol ["forceAlias"] != "true") {  		if (portalAliases.Count > 0) {  			string checkAlias = result.HttpAlias;  			bool continueLoop = true;  			bool triedWWW = false;  			while (httpAlias == null && continueLoop) {  				if (portalAliases.ContainsAlias (result.PortalId' checkAlias)) {  					if (portalAliases.Count > 0) {  						//var cpa = portalAliases.GetAliasByPortalIdAndSettings(result);  						string url = requestUri.ToString ();  						RewriteController.CheckLanguageMatch (ref url' result);  						var cpa = portalAliases.GetAliasByPortalIdAndSettings (result.PortalId' result' result.CultureCode' result.BrowserType);  						if (cpa != null) {  							httpAlias = cpa.HTTPAlias;  							continueLoop = false;  						}  						if (String.IsNullOrEmpty (result.CultureCode) && cpa == null) {  							//if there is a specific culture for this portal alias' then check that  							string culture = portalAliases.GetCultureByPortalIdAndAlias (result.PortalId' result.HttpAlias);  							//if this matches the alias of the request' then we know we have the correct alias because it is a specific culture  							if (!string.IsNullOrEmpty (culture)) {  								continueLoop = false;  							}  						}  					}  				}  				//check whether to still go on or not  				if (continueLoop) {  					//this alias doesn't exist in the list  					//check if it has a www on it - if not' try adding' if it does' try removing  					if (!triedWWW) {  						triedWWW = true;  						//now tried adding/removing www  						if (checkAlias.ToLower ().StartsWith ("www.")) {  							checkAlias = checkAlias.Substring (4);  						} else {  							checkAlias = "www." + checkAlias;  						}  					} else {  						//last thing to try' get the default language and see if there is a portal alias for that  						//thus' any aliases not identified as belonging to a language are redirected back to the   						//alias named for the default language  						continueLoop = false;  						//735 : switch to custom method for getting portal  						PortalInfo pi = CacheController.GetPortal (result.PortalId' false);  						if (pi != null) {  							string cultureCode = pi.DefaultLanguage;  							if (!string.IsNullOrEmpty (cultureCode)) {  								var primaryPortalAlias = portalAliases.GetAliasByPortalIdAndSettings (result.PortalId' result' cultureCode' settings);  								if (primaryPortalAlias != null) {  									httpAlias = primaryPortalAlias.HTTPAlias;  								}  							}  						}  					}  				}  			}  		}  		//check to see if it is a custom tab alais - in that case' it is allowed to be requested for the tab  		if (CheckIfAliasIsCustomTabAlias (ref result' httpAlias' settings)) {  			//change the primary alias to the custom tab alias that has been requested.  			result.PrimaryAlias = result.PortalAlias;  		} else if (httpAlias != null && String.Compare (httpAlias' result.HttpAlias' StringComparison.OrdinalIgnoreCase) != 0) {  			incorrectAlias = true;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IsPortalAliasIncorrect,The following statement contains a magic number: if (queryStringCol != null && queryStringCol ["forceAlias"] != "true") {  	if (portalAliases.Count > 0) {  		string checkAlias = result.HttpAlias;  		bool continueLoop = true;  		bool triedWWW = false;  		while (httpAlias == null && continueLoop) {  			if (portalAliases.ContainsAlias (result.PortalId' checkAlias)) {  				if (portalAliases.Count > 0) {  					//var cpa = portalAliases.GetAliasByPortalIdAndSettings(result);  					string url = requestUri.ToString ();  					RewriteController.CheckLanguageMatch (ref url' result);  					var cpa = portalAliases.GetAliasByPortalIdAndSettings (result.PortalId' result' result.CultureCode' result.BrowserType);  					if (cpa != null) {  						httpAlias = cpa.HTTPAlias;  						continueLoop = false;  					}  					if (String.IsNullOrEmpty (result.CultureCode) && cpa == null) {  						//if there is a specific culture for this portal alias' then check that  						string culture = portalAliases.GetCultureByPortalIdAndAlias (result.PortalId' result.HttpAlias);  						//if this matches the alias of the request' then we know we have the correct alias because it is a specific culture  						if (!string.IsNullOrEmpty (culture)) {  							continueLoop = false;  						}  					}  				}  			}  			//check whether to still go on or not  			if (continueLoop) {  				//this alias doesn't exist in the list  				//check if it has a www on it - if not' try adding' if it does' try removing  				if (!triedWWW) {  					triedWWW = true;  					//now tried adding/removing www  					if (checkAlias.ToLower ().StartsWith ("www.")) {  						checkAlias = checkAlias.Substring (4);  					} else {  						checkAlias = "www." + checkAlias;  					}  				} else {  					//last thing to try' get the default language and see if there is a portal alias for that  					//thus' any aliases not identified as belonging to a language are redirected back to the   					//alias named for the default language  					continueLoop = false;  					//735 : switch to custom method for getting portal  					PortalInfo pi = CacheController.GetPortal (result.PortalId' false);  					if (pi != null) {  						string cultureCode = pi.DefaultLanguage;  						if (!string.IsNullOrEmpty (cultureCode)) {  							var primaryPortalAlias = portalAliases.GetAliasByPortalIdAndSettings (result.PortalId' result' cultureCode' settings);  							if (primaryPortalAlias != null) {  								httpAlias = primaryPortalAlias.HTTPAlias;  							}  						}  					}  				}  			}  		}  	}  	//check to see if it is a custom tab alais - in that case' it is allowed to be requested for the tab  	if (CheckIfAliasIsCustomTabAlias (ref result' httpAlias' settings)) {  		//change the primary alias to the custom tab alias that has been requested.  		result.PrimaryAlias = result.PortalAlias;  	} else if (httpAlias != null && String.Compare (httpAlias' result.HttpAlias' StringComparison.OrdinalIgnoreCase) != 0) {  		incorrectAlias = true;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IsPortalAliasIncorrect,The following statement contains a magic number: if (portalAliases.Count > 0) {  	string checkAlias = result.HttpAlias;  	bool continueLoop = true;  	bool triedWWW = false;  	while (httpAlias == null && continueLoop) {  		if (portalAliases.ContainsAlias (result.PortalId' checkAlias)) {  			if (portalAliases.Count > 0) {  				//var cpa = portalAliases.GetAliasByPortalIdAndSettings(result);  				string url = requestUri.ToString ();  				RewriteController.CheckLanguageMatch (ref url' result);  				var cpa = portalAliases.GetAliasByPortalIdAndSettings (result.PortalId' result' result.CultureCode' result.BrowserType);  				if (cpa != null) {  					httpAlias = cpa.HTTPAlias;  					continueLoop = false;  				}  				if (String.IsNullOrEmpty (result.CultureCode) && cpa == null) {  					//if there is a specific culture for this portal alias' then check that  					string culture = portalAliases.GetCultureByPortalIdAndAlias (result.PortalId' result.HttpAlias);  					//if this matches the alias of the request' then we know we have the correct alias because it is a specific culture  					if (!string.IsNullOrEmpty (culture)) {  						continueLoop = false;  					}  				}  			}  		}  		//check whether to still go on or not  		if (continueLoop) {  			//this alias doesn't exist in the list  			//check if it has a www on it - if not' try adding' if it does' try removing  			if (!triedWWW) {  				triedWWW = true;  				//now tried adding/removing www  				if (checkAlias.ToLower ().StartsWith ("www.")) {  					checkAlias = checkAlias.Substring (4);  				} else {  					checkAlias = "www." + checkAlias;  				}  			} else {  				//last thing to try' get the default language and see if there is a portal alias for that  				//thus' any aliases not identified as belonging to a language are redirected back to the   				//alias named for the default language  				continueLoop = false;  				//735 : switch to custom method for getting portal  				PortalInfo pi = CacheController.GetPortal (result.PortalId' false);  				if (pi != null) {  					string cultureCode = pi.DefaultLanguage;  					if (!string.IsNullOrEmpty (cultureCode)) {  						var primaryPortalAlias = portalAliases.GetAliasByPortalIdAndSettings (result.PortalId' result' cultureCode' settings);  						if (primaryPortalAlias != null) {  							httpAlias = primaryPortalAlias.HTTPAlias;  						}  					}  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IsPortalAliasIncorrect,The following statement contains a magic number: while (httpAlias == null && continueLoop) {  	if (portalAliases.ContainsAlias (result.PortalId' checkAlias)) {  		if (portalAliases.Count > 0) {  			//var cpa = portalAliases.GetAliasByPortalIdAndSettings(result);  			string url = requestUri.ToString ();  			RewriteController.CheckLanguageMatch (ref url' result);  			var cpa = portalAliases.GetAliasByPortalIdAndSettings (result.PortalId' result' result.CultureCode' result.BrowserType);  			if (cpa != null) {  				httpAlias = cpa.HTTPAlias;  				continueLoop = false;  			}  			if (String.IsNullOrEmpty (result.CultureCode) && cpa == null) {  				//if there is a specific culture for this portal alias' then check that  				string culture = portalAliases.GetCultureByPortalIdAndAlias (result.PortalId' result.HttpAlias);  				//if this matches the alias of the request' then we know we have the correct alias because it is a specific culture  				if (!string.IsNullOrEmpty (culture)) {  					continueLoop = false;  				}  			}  		}  	}  	//check whether to still go on or not  	if (continueLoop) {  		//this alias doesn't exist in the list  		//check if it has a www on it - if not' try adding' if it does' try removing  		if (!triedWWW) {  			triedWWW = true;  			//now tried adding/removing www  			if (checkAlias.ToLower ().StartsWith ("www.")) {  				checkAlias = checkAlias.Substring (4);  			} else {  				checkAlias = "www." + checkAlias;  			}  		} else {  			//last thing to try' get the default language and see if there is a portal alias for that  			//thus' any aliases not identified as belonging to a language are redirected back to the   			//alias named for the default language  			continueLoop = false;  			//735 : switch to custom method for getting portal  			PortalInfo pi = CacheController.GetPortal (result.PortalId' false);  			if (pi != null) {  				string cultureCode = pi.DefaultLanguage;  				if (!string.IsNullOrEmpty (cultureCode)) {  					var primaryPortalAlias = portalAliases.GetAliasByPortalIdAndSettings (result.PortalId' result' cultureCode' settings);  					if (primaryPortalAlias != null) {  						httpAlias = primaryPortalAlias.HTTPAlias;  					}  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IsPortalAliasIncorrect,The following statement contains a magic number: if (continueLoop) {  	//this alias doesn't exist in the list  	//check if it has a www on it - if not' try adding' if it does' try removing  	if (!triedWWW) {  		triedWWW = true;  		//now tried adding/removing www  		if (checkAlias.ToLower ().StartsWith ("www.")) {  			checkAlias = checkAlias.Substring (4);  		} else {  			checkAlias = "www." + checkAlias;  		}  	} else {  		//last thing to try' get the default language and see if there is a portal alias for that  		//thus' any aliases not identified as belonging to a language are redirected back to the   		//alias named for the default language  		continueLoop = false;  		//735 : switch to custom method for getting portal  		PortalInfo pi = CacheController.GetPortal (result.PortalId' false);  		if (pi != null) {  			string cultureCode = pi.DefaultLanguage;  			if (!string.IsNullOrEmpty (cultureCode)) {  				var primaryPortalAlias = portalAliases.GetAliasByPortalIdAndSettings (result.PortalId' result' cultureCode' settings);  				if (primaryPortalAlias != null) {  					httpAlias = primaryPortalAlias.HTTPAlias;  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IsPortalAliasIncorrect,The following statement contains a magic number: if (!triedWWW) {  	triedWWW = true;  	//now tried adding/removing www  	if (checkAlias.ToLower ().StartsWith ("www.")) {  		checkAlias = checkAlias.Substring (4);  	} else {  		checkAlias = "www." + checkAlias;  	}  } else {  	//last thing to try' get the default language and see if there is a portal alias for that  	//thus' any aliases not identified as belonging to a language are redirected back to the   	//alias named for the default language  	continueLoop = false;  	//735 : switch to custom method for getting portal  	PortalInfo pi = CacheController.GetPortal (result.PortalId' false);  	if (pi != null) {  		string cultureCode = pi.DefaultLanguage;  		if (!string.IsNullOrEmpty (cultureCode)) {  			var primaryPortalAlias = portalAliases.GetAliasByPortalIdAndSettings (result.PortalId' result' cultureCode' settings);  			if (primaryPortalAlias != null) {  				httpAlias = primaryPortalAlias.HTTPAlias;  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IsPortalAliasIncorrect,The following statement contains a magic number: if (checkAlias.ToLower ().StartsWith ("www.")) {  	checkAlias = checkAlias.Substring (4);  } else {  	checkAlias = "www." + checkAlias;  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IsPortalAliasIncorrect,The following statement contains a magic number: checkAlias = checkAlias.Substring (4);  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,IgnoreRequestForWebServer,The following statement contains a magic number: rootPath = rootPath.Substring (rootPath.IndexOf ("://"' StringComparison.Ordinal) + 3);  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,SecurityCheck,The following statement contains a magic number: if (UrlSlashesRegex.Match (strURL).Success || UrlSlashesRegex.Match (strDoubleDecodeURL).Success) {  	throw new HttpException (404' "Not Found");  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,SecurityCheck,The following statement contains a magic number: throw new HttpException (404' "Not Found");  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if (queryStringCol ["error"] == null && queryStringCol ["message"] == null && requestType != "POST") {  	//if the / is missing from an extension-less request' then check for a 301 redirect  	if (settings.PageExtensionUsageType == PageExtensionUsageType.Never) {  		//575 check on absolutePath instead of absoluteUri : this ignores query strings and fragments like #  		//610 don't always end with '/' - reverses previous setting  		//687 don't double-check 301 redirects.  'CheckFor301' is less concise than 'Redirect301'  		// DNN-21906: if the redirect is for splash page' then we should continue the 302 redirect.  		if (requestUri.AbsolutePath.EndsWith ("/") && result.Action != ActionType.Redirect301 && result.Reason != RedirectReason.Requested_SplashPage) {  			result.Action = ActionType.CheckFor301;  		}  	}  	if (settings.RedirectWrongCase && result.Action == ActionType.Continue) {  		result.Action = ActionType.CheckFor301;  	}  	string scheme = requestUri.Scheme + Uri.SchemeDelimiter;  	bool queryStringHas301Parm = (queryStringCol ["do301"] != null);  	//727 : keep a bool value if there is a do301 request in the querystring  	//check for a 301 request in the query string' or an explicit 301 or 302 request  	//2.0 - check for explicit do301=true instead of just do301 key  	string do301Val = queryStringCol ["do301"];  	if (result.TabId > -1 //valid tab  	&& (result.Action == ActionType.Redirect301 //specific 301 redirect  	|| (do301Val != null && do301Val == "true") //or rewrite hint for specific 301 redirect   	|| result.Action == ActionType.Redirect302))//or specific 302 redirect  	 {  		//we have ordered a 301 redirect earlier in the code  		//get the url for redirection by re-submitting the path into the Friendly Url Provider  		string pathOnly = RewriteController.GetRewriteOrRequestedPath (result' requestUri);  		//727 prevent redirectLoop with do301 in querystring  		if (result.Action == ActionType.Redirect301 || queryStringHas301Parm || result.Action == ActionType.Redirect302) {  			pathOnly = RedirectTokens.RemoveAnyRedirectTokens (pathOnly' queryStringCol);  		}  		//check for exclusion by regex for this url  		if (result.RedirectAllowed) {  			//get the tab so we know where to go  			TabInfo tab;  			bool checkRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  			if (checkRedirect) {  				if ((result.Reason == RedirectReason.Deleted_Page || result.Reason == RedirectReason.Disabled_Page) && portalHomeTabId > 0 && settings.DeletedTabHandlingType == DeletedTabHandlingType.Do301RedirectToPortalHome) {  					//redirecting to home page    					TabInfo homeTab = TabController.Instance.GetTab (portalHomeTabId' result.PortalId' false);  					if (homeTab != null) {  						string homePageUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (homeTab' pathOnly' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  						result.Action = ActionType.Redirect301;  						result.FinalUrl = homePageUrl;  						result.RewritePath = pathOnly;  						redirected = true;  					}  				} else {  					//get the rewrite or requested path in a clean format' suitable for input to the friendly url provider  					string cleanPath = RewriteController.GetRewriteOrRequestedPath (result' requestUri);  					//727 prevent redirectLoop with do301 in querystring  					//also check for existing in path of do301 token  					if (result.Action == ActionType.Redirect301 || do301Val != null || result.Action == ActionType.Redirect302) {  						cleanPath = RedirectTokens.RemoveAnyRedirectTokens (cleanPath' queryStringCol);  					}  					//get best friendly url from friendly url provider  					string bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  					//get what the friendly Url for this tab should be and stick it in as the redirect  					//727 : using boolean because we wanted to get rid of the do301 before calculating the correct url  					if (queryStringHas301Parm) {  						result.Action = ActionType.Redirect301;  						if (result.Reason == RedirectReason.Not_Redirected) {  							result.Reason = RedirectReason.Unfriendly_Url_1;  						}  					}  					result.FinalUrl = bestFriendlyUrl;  					result.RewritePath = pathOnly;  					redirected = true;  					//mark as redirected  				}  			} else {  				//redirect disallowed   				//618: dont' clear if 302 redirect selected  				if (result.Action != ActionType.Redirect302Now || result.Action != ActionType.Redirect302) {  					RedirectController.CancelRedirect (ref result' null' settings' "Redirect requested but cancelled because disallowed");  				}  			}  		}  	} else if (result.TabId > -1 && result.RedirectAllowed && result.Action == ActionType.CheckFor301) {  		//301 check was requested in earlier processing  		//get the tab controller and retrieve the tab the request is for   		//don't redirect unless allowed' the tab is valid' and it's not an admin or super tab   		if (settings.RedirectUnfriendly) {  			TabInfo tab;  			bool allowRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  			if (allowRedirect && tab != null) {  				//remove the http alias from the url. Do this by putting the url back together from the request and removing the alias   				string rewritePathOnly;  				if (result.DoRewrite) {  					rewritePathOnly = result.RewritePath;  					var pos = rewritePathOnly.IndexOf ("default.aspx"' StringComparison.OrdinalIgnoreCase);  					if (pos > Null.NullInteger) {  						rewritePathOnly = rewritePathOnly.Substring (pos);  					}  				} else {  					rewritePathOnly = requestUri.Host + requestUri.PathAndQuery;  				}  				//remove the http alias from the path   				var pathAliasEnd = rewritePathOnly.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase);  				var queryStringIndex = rewritePathOnly.IndexOf ("?"' StringComparison.InvariantCultureIgnoreCase);  				if (pathAliasEnd > Null.NullInteger && (queryStringIndex == Null.NullInteger || pathAliasEnd < queryStringIndex)) {  					rewritePathOnly = rewritePathOnly.Substring (pathAliasEnd + result.PortalAlias.HTTPAlias.Length);  				}  				//now check to see if need to remove /default.aspx from the end of the requested Url  				string requestedUrl = fullUrl;  				int requestedUrlAliasEnd = requestedUrl.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase) + (result.PortalAlias.HTTPAlias + "/").Length;  				if (requestedUrlAliasEnd > Null.NullInteger) {  					//818 : when a site root is used for a custom page Url' then check for max length within bounds  					if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  						requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  						//12 = default.aspx length  					}  				}  				//what happens here is that the request is reverse-engineered to see if it matches what the friendly Url shoudl have been   				//get what the friendly Url for this tab should be   				string bestFriendlyUrl;  				//819 : leaving /do301/check in Url because not using cleanPath to remove from  				string cleanPath = RedirectTokens.RemoveAnyRedirectTokensAndReasons (rewritePathOnly);  				//string cleanPath = rewritePathOnly.Replace("&do301=check"'"");//remove check parameter if it exists  				//cleanPath = cleanPath.Replace("&do301=true"' "");//don't pass through internal redirect check parameter  				cleanPath = cleanPath.Replace ("&_aumdebug=true"' "");  				//remove debug parameter if it exists  				Match match = RewritePathRx.Match (rewritePathOnly ?? "");  				if (match.Success) {  					//when the pathOnly value ends with '=' it means there is a query string pair with a key and no value  					//make the assumption that this was passed in as a page name OTHER than default page  					string pageName = match.Groups ["parm"].Value;  					//get the last parameter in the list  					cleanPath = cleanPath.Replace (match.Value' "");  					//remove the last parameter from the path  					//generate teh friendly URl name with the last parameter as the page name' not a query string parameter  					bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' pageName + settings.PageExtension' result.HttpAlias' false' settings' Guid.Empty);  				} else {  					bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  				}  				//if the incomign request doesn't match the 'most friendly' url' a 301 Moved Permanently status is returned' along with the friendly url   				//check the bestFriendlyUrl against either the url' or rawUrl (with and without host)   				//in each case' the aumdebug parameter will be searched for and replaced  				var urlDecode = HttpUtility.UrlDecode (requestedUrl);  				if (urlDecode != null) {  					string rawUrlWithHost = StripDebugParameter (urlDecode.ToLower ());  					//string rawUrlWithHost = StripDebugParameter(System.Web.HttpUtility.UrlDecode(scheme + requestUri.Host + requestUri.PathAndQuery).ToLower());  					string rawUrlWithHostNoScheme = StripDebugParameter (rawUrlWithHost.Replace (scheme' ""));  					string bestFriendlyNoScheme = StripDebugParameter (bestFriendlyUrl.ToLower ().Replace (scheme' ""));  					string requestedPathNoScheme = StripDebugParameter (requestUri.AbsoluteUri.Replace (scheme' "").ToLower ());  					string rawUrlLowerCase = StripDebugParameter (requestUri.AbsoluteUri.ToLower ());  					//check to see if just an alias redirect of an internal alias  					var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  					if (settings.InternalAliasList != null && settings.InternalAliasList.Count > 0 && primaryAliases.Count > 0) {  						var cpa = primaryAliases.GetAliasByPortalIdAndSettings (result);  						if (cpa != null) {  							string chosenAlias = cpa.HTTPAlias.ToLower ();  							foreach (InternalAlias ia in settings.InternalAliasList) {  								string internalAlias = ia.HttpAlias.ToLower ();  								if (requestedPathNoScheme.Contains (internalAlias)) {  									//an internal alias has been used.  									//replace this in the comparison charts to do a 'fair' comparison  									requestedPathNoScheme = requestedPathNoScheme.Replace (internalAlias' chosenAlias);  									rawUrlWithHost = rawUrlWithHost.Replace (scheme + internalAlias' scheme + chosenAlias);  									rawUrlWithHostNoScheme = rawUrlWithHostNoScheme.Replace (internalAlias' chosenAlias);  									rawUrlLowerCase = rawUrlLowerCase.Replace (internalAlias' chosenAlias);  									break;  								}  							}  						}  					}  					//DNN-9158: prevent SSL Offloading infinite redirects  					if (!result.IsSecureConnection && result.IsSSLOffloaded && bestFriendlyNoScheme.StartsWith ("https")) {  						bestFriendlyNoScheme = bestFriendlyNoScheme.Replace ("https://"' "http://");  					}  					if (!(bestFriendlyNoScheme == requestedPathNoScheme || bestFriendlyNoScheme == rawUrlWithHost || bestFriendlyNoScheme == rawUrlWithHostNoScheme || bestFriendlyNoScheme == HttpUtility.UrlDecode (requestedPathNoScheme) || bestFriendlyNoScheme == rawUrlLowerCase)) {  						redirected = true;  						result.Action = ActionType.Redirect301;  						result.FinalUrl = bestFriendlyUrl;  						if (result.Reason != RedirectReason.Custom_Tab_Alias && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  							result.Reason = RedirectReason.Unfriendly_Url_2;  						}  						result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + requestedPathNoScheme + " [requested with no scheme]");  						result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHost + " [requested with host and scheme]");  						result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHostNoScheme + " [requested with host' no scheme]");  						result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + HttpUtility.UrlDecode (requestedPathNoScheme) + " [requested and decoded]");  						result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlLowerCase + " [requested raw Url]");  					}  				}  			}  		}  	}  	if (result.RedirectAllowed && settings.RedirectWrongCase) {  		//check for redirects where a redirectToSubDomain is specified'   		//redirect for Wrong case is specified' and there is a valid tab and it's not already redirected somewhere else  		bool doRedirect = false;  		string redirectPath = redirected ? result.FinalUrl : requestUri.AbsoluteUri;  		string redirectPathOnly = redirectPath;  		if (redirectPathOnly.Contains ("?")) {  			redirectPathOnly = redirectPathOnly.Substring (0' redirectPathOnly.IndexOf ("?"' StringComparison.Ordinal));  		}  		// Thanks Etienne for the fix for Diacritic Characters Terminal Loop!  		// if the url contains url encoded characters' they appear here uppercase -> %C3%83%C2  		// decode the url to get back the original character and do proper casing comparison  		string urlDecodedRedirectPath = HttpUtility.UrlDecode (redirectPathOnly);  		//check for wrong case redirection  		if (urlDecodedRedirectPath != null && (settings.RedirectWrongCase && String.CompareOrdinal (urlDecodedRedirectPath' urlDecodedRedirectPath.ToLower ()) != 0)) {  			TabInfo tab;  			bool allowRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  			if (allowRedirect && !string.IsNullOrEmpty (settings.ForceLowerCaseRegex)) {  				//don't allow redirect if excluded from redirecting in the force lower case regex pattern (606)  				allowRedirect = !Regex.IsMatch (redirectPath' settings.ForceLowerCaseRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			}  			if (allowRedirect) {  				//special case : when IIS automatically places /default.aspx on the end of the string'  				//then don't try and redirect to the lower case /default.aspx' just let it through.  				//we don't know whether IIS appended /Default.aspx on the end' however' we can guess  				//if the redirectDefault.aspx is turned on (511)  				if (settings.RedirectDefaultPage == false && redirectPathOnly.EndsWith (Globals.glbDefaultPage' StringComparison.InvariantCultureIgnoreCase)) {  					//ignore this' because it's just a redirect of the /Default.aspx to /default.aspx  				} else {  					redirectPath = redirectPath.Replace (redirectPathOnly' redirectPathOnly.ToLower ());  					doRedirect = true;  					result.Reason = RedirectReason.Not_Lower_Case;  				}  			}  		}  		if (doRedirect) {  			result.Action = ActionType.Redirect301;  			result.FinalUrl = CheckForSiteRootRedirect (result.PortalAlias.HTTPAlias' redirectPath);  			redirected = true;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if (queryStringCol ["error"] == null && queryStringCol ["message"] == null && requestType != "POST") {  	//if the / is missing from an extension-less request' then check for a 301 redirect  	if (settings.PageExtensionUsageType == PageExtensionUsageType.Never) {  		//575 check on absolutePath instead of absoluteUri : this ignores query strings and fragments like #  		//610 don't always end with '/' - reverses previous setting  		//687 don't double-check 301 redirects.  'CheckFor301' is less concise than 'Redirect301'  		// DNN-21906: if the redirect is for splash page' then we should continue the 302 redirect.  		if (requestUri.AbsolutePath.EndsWith ("/") && result.Action != ActionType.Redirect301 && result.Reason != RedirectReason.Requested_SplashPage) {  			result.Action = ActionType.CheckFor301;  		}  	}  	if (settings.RedirectWrongCase && result.Action == ActionType.Continue) {  		result.Action = ActionType.CheckFor301;  	}  	string scheme = requestUri.Scheme + Uri.SchemeDelimiter;  	bool queryStringHas301Parm = (queryStringCol ["do301"] != null);  	//727 : keep a bool value if there is a do301 request in the querystring  	//check for a 301 request in the query string' or an explicit 301 or 302 request  	//2.0 - check for explicit do301=true instead of just do301 key  	string do301Val = queryStringCol ["do301"];  	if (result.TabId > -1 //valid tab  	&& (result.Action == ActionType.Redirect301 //specific 301 redirect  	|| (do301Val != null && do301Val == "true") //or rewrite hint for specific 301 redirect   	|| result.Action == ActionType.Redirect302))//or specific 302 redirect  	 {  		//we have ordered a 301 redirect earlier in the code  		//get the url for redirection by re-submitting the path into the Friendly Url Provider  		string pathOnly = RewriteController.GetRewriteOrRequestedPath (result' requestUri);  		//727 prevent redirectLoop with do301 in querystring  		if (result.Action == ActionType.Redirect301 || queryStringHas301Parm || result.Action == ActionType.Redirect302) {  			pathOnly = RedirectTokens.RemoveAnyRedirectTokens (pathOnly' queryStringCol);  		}  		//check for exclusion by regex for this url  		if (result.RedirectAllowed) {  			//get the tab so we know where to go  			TabInfo tab;  			bool checkRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  			if (checkRedirect) {  				if ((result.Reason == RedirectReason.Deleted_Page || result.Reason == RedirectReason.Disabled_Page) && portalHomeTabId > 0 && settings.DeletedTabHandlingType == DeletedTabHandlingType.Do301RedirectToPortalHome) {  					//redirecting to home page    					TabInfo homeTab = TabController.Instance.GetTab (portalHomeTabId' result.PortalId' false);  					if (homeTab != null) {  						string homePageUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (homeTab' pathOnly' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  						result.Action = ActionType.Redirect301;  						result.FinalUrl = homePageUrl;  						result.RewritePath = pathOnly;  						redirected = true;  					}  				} else {  					//get the rewrite or requested path in a clean format' suitable for input to the friendly url provider  					string cleanPath = RewriteController.GetRewriteOrRequestedPath (result' requestUri);  					//727 prevent redirectLoop with do301 in querystring  					//also check for existing in path of do301 token  					if (result.Action == ActionType.Redirect301 || do301Val != null || result.Action == ActionType.Redirect302) {  						cleanPath = RedirectTokens.RemoveAnyRedirectTokens (cleanPath' queryStringCol);  					}  					//get best friendly url from friendly url provider  					string bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  					//get what the friendly Url for this tab should be and stick it in as the redirect  					//727 : using boolean because we wanted to get rid of the do301 before calculating the correct url  					if (queryStringHas301Parm) {  						result.Action = ActionType.Redirect301;  						if (result.Reason == RedirectReason.Not_Redirected) {  							result.Reason = RedirectReason.Unfriendly_Url_1;  						}  					}  					result.FinalUrl = bestFriendlyUrl;  					result.RewritePath = pathOnly;  					redirected = true;  					//mark as redirected  				}  			} else {  				//redirect disallowed   				//618: dont' clear if 302 redirect selected  				if (result.Action != ActionType.Redirect302Now || result.Action != ActionType.Redirect302) {  					RedirectController.CancelRedirect (ref result' null' settings' "Redirect requested but cancelled because disallowed");  				}  			}  		}  	} else if (result.TabId > -1 && result.RedirectAllowed && result.Action == ActionType.CheckFor301) {  		//301 check was requested in earlier processing  		//get the tab controller and retrieve the tab the request is for   		//don't redirect unless allowed' the tab is valid' and it's not an admin or super tab   		if (settings.RedirectUnfriendly) {  			TabInfo tab;  			bool allowRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  			if (allowRedirect && tab != null) {  				//remove the http alias from the url. Do this by putting the url back together from the request and removing the alias   				string rewritePathOnly;  				if (result.DoRewrite) {  					rewritePathOnly = result.RewritePath;  					var pos = rewritePathOnly.IndexOf ("default.aspx"' StringComparison.OrdinalIgnoreCase);  					if (pos > Null.NullInteger) {  						rewritePathOnly = rewritePathOnly.Substring (pos);  					}  				} else {  					rewritePathOnly = requestUri.Host + requestUri.PathAndQuery;  				}  				//remove the http alias from the path   				var pathAliasEnd = rewritePathOnly.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase);  				var queryStringIndex = rewritePathOnly.IndexOf ("?"' StringComparison.InvariantCultureIgnoreCase);  				if (pathAliasEnd > Null.NullInteger && (queryStringIndex == Null.NullInteger || pathAliasEnd < queryStringIndex)) {  					rewritePathOnly = rewritePathOnly.Substring (pathAliasEnd + result.PortalAlias.HTTPAlias.Length);  				}  				//now check to see if need to remove /default.aspx from the end of the requested Url  				string requestedUrl = fullUrl;  				int requestedUrlAliasEnd = requestedUrl.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase) + (result.PortalAlias.HTTPAlias + "/").Length;  				if (requestedUrlAliasEnd > Null.NullInteger) {  					//818 : when a site root is used for a custom page Url' then check for max length within bounds  					if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  						requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  						//12 = default.aspx length  					}  				}  				//what happens here is that the request is reverse-engineered to see if it matches what the friendly Url shoudl have been   				//get what the friendly Url for this tab should be   				string bestFriendlyUrl;  				//819 : leaving /do301/check in Url because not using cleanPath to remove from  				string cleanPath = RedirectTokens.RemoveAnyRedirectTokensAndReasons (rewritePathOnly);  				//string cleanPath = rewritePathOnly.Replace("&do301=check"'"");//remove check parameter if it exists  				//cleanPath = cleanPath.Replace("&do301=true"' "");//don't pass through internal redirect check parameter  				cleanPath = cleanPath.Replace ("&_aumdebug=true"' "");  				//remove debug parameter if it exists  				Match match = RewritePathRx.Match (rewritePathOnly ?? "");  				if (match.Success) {  					//when the pathOnly value ends with '=' it means there is a query string pair with a key and no value  					//make the assumption that this was passed in as a page name OTHER than default page  					string pageName = match.Groups ["parm"].Value;  					//get the last parameter in the list  					cleanPath = cleanPath.Replace (match.Value' "");  					//remove the last parameter from the path  					//generate teh friendly URl name with the last parameter as the page name' not a query string parameter  					bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' pageName + settings.PageExtension' result.HttpAlias' false' settings' Guid.Empty);  				} else {  					bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  				}  				//if the incomign request doesn't match the 'most friendly' url' a 301 Moved Permanently status is returned' along with the friendly url   				//check the bestFriendlyUrl against either the url' or rawUrl (with and without host)   				//in each case' the aumdebug parameter will be searched for and replaced  				var urlDecode = HttpUtility.UrlDecode (requestedUrl);  				if (urlDecode != null) {  					string rawUrlWithHost = StripDebugParameter (urlDecode.ToLower ());  					//string rawUrlWithHost = StripDebugParameter(System.Web.HttpUtility.UrlDecode(scheme + requestUri.Host + requestUri.PathAndQuery).ToLower());  					string rawUrlWithHostNoScheme = StripDebugParameter (rawUrlWithHost.Replace (scheme' ""));  					string bestFriendlyNoScheme = StripDebugParameter (bestFriendlyUrl.ToLower ().Replace (scheme' ""));  					string requestedPathNoScheme = StripDebugParameter (requestUri.AbsoluteUri.Replace (scheme' "").ToLower ());  					string rawUrlLowerCase = StripDebugParameter (requestUri.AbsoluteUri.ToLower ());  					//check to see if just an alias redirect of an internal alias  					var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  					if (settings.InternalAliasList != null && settings.InternalAliasList.Count > 0 && primaryAliases.Count > 0) {  						var cpa = primaryAliases.GetAliasByPortalIdAndSettings (result);  						if (cpa != null) {  							string chosenAlias = cpa.HTTPAlias.ToLower ();  							foreach (InternalAlias ia in settings.InternalAliasList) {  								string internalAlias = ia.HttpAlias.ToLower ();  								if (requestedPathNoScheme.Contains (internalAlias)) {  									//an internal alias has been used.  									//replace this in the comparison charts to do a 'fair' comparison  									requestedPathNoScheme = requestedPathNoScheme.Replace (internalAlias' chosenAlias);  									rawUrlWithHost = rawUrlWithHost.Replace (scheme + internalAlias' scheme + chosenAlias);  									rawUrlWithHostNoScheme = rawUrlWithHostNoScheme.Replace (internalAlias' chosenAlias);  									rawUrlLowerCase = rawUrlLowerCase.Replace (internalAlias' chosenAlias);  									break;  								}  							}  						}  					}  					//DNN-9158: prevent SSL Offloading infinite redirects  					if (!result.IsSecureConnection && result.IsSSLOffloaded && bestFriendlyNoScheme.StartsWith ("https")) {  						bestFriendlyNoScheme = bestFriendlyNoScheme.Replace ("https://"' "http://");  					}  					if (!(bestFriendlyNoScheme == requestedPathNoScheme || bestFriendlyNoScheme == rawUrlWithHost || bestFriendlyNoScheme == rawUrlWithHostNoScheme || bestFriendlyNoScheme == HttpUtility.UrlDecode (requestedPathNoScheme) || bestFriendlyNoScheme == rawUrlLowerCase)) {  						redirected = true;  						result.Action = ActionType.Redirect301;  						result.FinalUrl = bestFriendlyUrl;  						if (result.Reason != RedirectReason.Custom_Tab_Alias && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  							result.Reason = RedirectReason.Unfriendly_Url_2;  						}  						result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + requestedPathNoScheme + " [requested with no scheme]");  						result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHost + " [requested with host and scheme]");  						result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHostNoScheme + " [requested with host' no scheme]");  						result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + HttpUtility.UrlDecode (requestedPathNoScheme) + " [requested and decoded]");  						result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlLowerCase + " [requested raw Url]");  					}  				}  			}  		}  	}  	if (result.RedirectAllowed && settings.RedirectWrongCase) {  		//check for redirects where a redirectToSubDomain is specified'   		//redirect for Wrong case is specified' and there is a valid tab and it's not already redirected somewhere else  		bool doRedirect = false;  		string redirectPath = redirected ? result.FinalUrl : requestUri.AbsoluteUri;  		string redirectPathOnly = redirectPath;  		if (redirectPathOnly.Contains ("?")) {  			redirectPathOnly = redirectPathOnly.Substring (0' redirectPathOnly.IndexOf ("?"' StringComparison.Ordinal));  		}  		// Thanks Etienne for the fix for Diacritic Characters Terminal Loop!  		// if the url contains url encoded characters' they appear here uppercase -> %C3%83%C2  		// decode the url to get back the original character and do proper casing comparison  		string urlDecodedRedirectPath = HttpUtility.UrlDecode (redirectPathOnly);  		//check for wrong case redirection  		if (urlDecodedRedirectPath != null && (settings.RedirectWrongCase && String.CompareOrdinal (urlDecodedRedirectPath' urlDecodedRedirectPath.ToLower ()) != 0)) {  			TabInfo tab;  			bool allowRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  			if (allowRedirect && !string.IsNullOrEmpty (settings.ForceLowerCaseRegex)) {  				//don't allow redirect if excluded from redirecting in the force lower case regex pattern (606)  				allowRedirect = !Regex.IsMatch (redirectPath' settings.ForceLowerCaseRegex' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			}  			if (allowRedirect) {  				//special case : when IIS automatically places /default.aspx on the end of the string'  				//then don't try and redirect to the lower case /default.aspx' just let it through.  				//we don't know whether IIS appended /Default.aspx on the end' however' we can guess  				//if the redirectDefault.aspx is turned on (511)  				if (settings.RedirectDefaultPage == false && redirectPathOnly.EndsWith (Globals.glbDefaultPage' StringComparison.InvariantCultureIgnoreCase)) {  					//ignore this' because it's just a redirect of the /Default.aspx to /default.aspx  				} else {  					redirectPath = redirectPath.Replace (redirectPathOnly' redirectPathOnly.ToLower ());  					doRedirect = true;  					result.Reason = RedirectReason.Not_Lower_Case;  				}  			}  		}  		if (doRedirect) {  			result.Action = ActionType.Redirect301;  			result.FinalUrl = CheckForSiteRootRedirect (result.PortalAlias.HTTPAlias' redirectPath);  			redirected = true;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if (result.TabId > -1 //valid tab  && (result.Action == ActionType.Redirect301 //specific 301 redirect  || (do301Val != null && do301Val == "true") //or rewrite hint for specific 301 redirect   || result.Action == ActionType.Redirect302))//or specific 302 redirect   {  	//we have ordered a 301 redirect earlier in the code  	//get the url for redirection by re-submitting the path into the Friendly Url Provider  	string pathOnly = RewriteController.GetRewriteOrRequestedPath (result' requestUri);  	//727 prevent redirectLoop with do301 in querystring  	if (result.Action == ActionType.Redirect301 || queryStringHas301Parm || result.Action == ActionType.Redirect302) {  		pathOnly = RedirectTokens.RemoveAnyRedirectTokens (pathOnly' queryStringCol);  	}  	//check for exclusion by regex for this url  	if (result.RedirectAllowed) {  		//get the tab so we know where to go  		TabInfo tab;  		bool checkRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  		if (checkRedirect) {  			if ((result.Reason == RedirectReason.Deleted_Page || result.Reason == RedirectReason.Disabled_Page) && portalHomeTabId > 0 && settings.DeletedTabHandlingType == DeletedTabHandlingType.Do301RedirectToPortalHome) {  				//redirecting to home page    				TabInfo homeTab = TabController.Instance.GetTab (portalHomeTabId' result.PortalId' false);  				if (homeTab != null) {  					string homePageUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (homeTab' pathOnly' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  					result.Action = ActionType.Redirect301;  					result.FinalUrl = homePageUrl;  					result.RewritePath = pathOnly;  					redirected = true;  				}  			} else {  				//get the rewrite or requested path in a clean format' suitable for input to the friendly url provider  				string cleanPath = RewriteController.GetRewriteOrRequestedPath (result' requestUri);  				//727 prevent redirectLoop with do301 in querystring  				//also check for existing in path of do301 token  				if (result.Action == ActionType.Redirect301 || do301Val != null || result.Action == ActionType.Redirect302) {  					cleanPath = RedirectTokens.RemoveAnyRedirectTokens (cleanPath' queryStringCol);  				}  				//get best friendly url from friendly url provider  				string bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  				//get what the friendly Url for this tab should be and stick it in as the redirect  				//727 : using boolean because we wanted to get rid of the do301 before calculating the correct url  				if (queryStringHas301Parm) {  					result.Action = ActionType.Redirect301;  					if (result.Reason == RedirectReason.Not_Redirected) {  						result.Reason = RedirectReason.Unfriendly_Url_1;  					}  				}  				result.FinalUrl = bestFriendlyUrl;  				result.RewritePath = pathOnly;  				redirected = true;  				//mark as redirected  			}  		} else {  			//redirect disallowed   			//618: dont' clear if 302 redirect selected  			if (result.Action != ActionType.Redirect302Now || result.Action != ActionType.Redirect302) {  				RedirectController.CancelRedirect (ref result' null' settings' "Redirect requested but cancelled because disallowed");  			}  		}  	}  } else if (result.TabId > -1 && result.RedirectAllowed && result.Action == ActionType.CheckFor301) {  	//301 check was requested in earlier processing  	//get the tab controller and retrieve the tab the request is for   	//don't redirect unless allowed' the tab is valid' and it's not an admin or super tab   	if (settings.RedirectUnfriendly) {  		TabInfo tab;  		bool allowRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  		if (allowRedirect && tab != null) {  			//remove the http alias from the url. Do this by putting the url back together from the request and removing the alias   			string rewritePathOnly;  			if (result.DoRewrite) {  				rewritePathOnly = result.RewritePath;  				var pos = rewritePathOnly.IndexOf ("default.aspx"' StringComparison.OrdinalIgnoreCase);  				if (pos > Null.NullInteger) {  					rewritePathOnly = rewritePathOnly.Substring (pos);  				}  			} else {  				rewritePathOnly = requestUri.Host + requestUri.PathAndQuery;  			}  			//remove the http alias from the path   			var pathAliasEnd = rewritePathOnly.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase);  			var queryStringIndex = rewritePathOnly.IndexOf ("?"' StringComparison.InvariantCultureIgnoreCase);  			if (pathAliasEnd > Null.NullInteger && (queryStringIndex == Null.NullInteger || pathAliasEnd < queryStringIndex)) {  				rewritePathOnly = rewritePathOnly.Substring (pathAliasEnd + result.PortalAlias.HTTPAlias.Length);  			}  			//now check to see if need to remove /default.aspx from the end of the requested Url  			string requestedUrl = fullUrl;  			int requestedUrlAliasEnd = requestedUrl.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase) + (result.PortalAlias.HTTPAlias + "/").Length;  			if (requestedUrlAliasEnd > Null.NullInteger) {  				//818 : when a site root is used for a custom page Url' then check for max length within bounds  				if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  					requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  					//12 = default.aspx length  				}  			}  			//what happens here is that the request is reverse-engineered to see if it matches what the friendly Url shoudl have been   			//get what the friendly Url for this tab should be   			string bestFriendlyUrl;  			//819 : leaving /do301/check in Url because not using cleanPath to remove from  			string cleanPath = RedirectTokens.RemoveAnyRedirectTokensAndReasons (rewritePathOnly);  			//string cleanPath = rewritePathOnly.Replace("&do301=check"'"");//remove check parameter if it exists  			//cleanPath = cleanPath.Replace("&do301=true"' "");//don't pass through internal redirect check parameter  			cleanPath = cleanPath.Replace ("&_aumdebug=true"' "");  			//remove debug parameter if it exists  			Match match = RewritePathRx.Match (rewritePathOnly ?? "");  			if (match.Success) {  				//when the pathOnly value ends with '=' it means there is a query string pair with a key and no value  				//make the assumption that this was passed in as a page name OTHER than default page  				string pageName = match.Groups ["parm"].Value;  				//get the last parameter in the list  				cleanPath = cleanPath.Replace (match.Value' "");  				//remove the last parameter from the path  				//generate teh friendly URl name with the last parameter as the page name' not a query string parameter  				bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' pageName + settings.PageExtension' result.HttpAlias' false' settings' Guid.Empty);  			} else {  				bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  			}  			//if the incomign request doesn't match the 'most friendly' url' a 301 Moved Permanently status is returned' along with the friendly url   			//check the bestFriendlyUrl against either the url' or rawUrl (with and without host)   			//in each case' the aumdebug parameter will be searched for and replaced  			var urlDecode = HttpUtility.UrlDecode (requestedUrl);  			if (urlDecode != null) {  				string rawUrlWithHost = StripDebugParameter (urlDecode.ToLower ());  				//string rawUrlWithHost = StripDebugParameter(System.Web.HttpUtility.UrlDecode(scheme + requestUri.Host + requestUri.PathAndQuery).ToLower());  				string rawUrlWithHostNoScheme = StripDebugParameter (rawUrlWithHost.Replace (scheme' ""));  				string bestFriendlyNoScheme = StripDebugParameter (bestFriendlyUrl.ToLower ().Replace (scheme' ""));  				string requestedPathNoScheme = StripDebugParameter (requestUri.AbsoluteUri.Replace (scheme' "").ToLower ());  				string rawUrlLowerCase = StripDebugParameter (requestUri.AbsoluteUri.ToLower ());  				//check to see if just an alias redirect of an internal alias  				var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  				if (settings.InternalAliasList != null && settings.InternalAliasList.Count > 0 && primaryAliases.Count > 0) {  					var cpa = primaryAliases.GetAliasByPortalIdAndSettings (result);  					if (cpa != null) {  						string chosenAlias = cpa.HTTPAlias.ToLower ();  						foreach (InternalAlias ia in settings.InternalAliasList) {  							string internalAlias = ia.HttpAlias.ToLower ();  							if (requestedPathNoScheme.Contains (internalAlias)) {  								//an internal alias has been used.  								//replace this in the comparison charts to do a 'fair' comparison  								requestedPathNoScheme = requestedPathNoScheme.Replace (internalAlias' chosenAlias);  								rawUrlWithHost = rawUrlWithHost.Replace (scheme + internalAlias' scheme + chosenAlias);  								rawUrlWithHostNoScheme = rawUrlWithHostNoScheme.Replace (internalAlias' chosenAlias);  								rawUrlLowerCase = rawUrlLowerCase.Replace (internalAlias' chosenAlias);  								break;  							}  						}  					}  				}  				//DNN-9158: prevent SSL Offloading infinite redirects  				if (!result.IsSecureConnection && result.IsSSLOffloaded && bestFriendlyNoScheme.StartsWith ("https")) {  					bestFriendlyNoScheme = bestFriendlyNoScheme.Replace ("https://"' "http://");  				}  				if (!(bestFriendlyNoScheme == requestedPathNoScheme || bestFriendlyNoScheme == rawUrlWithHost || bestFriendlyNoScheme == rawUrlWithHostNoScheme || bestFriendlyNoScheme == HttpUtility.UrlDecode (requestedPathNoScheme) || bestFriendlyNoScheme == rawUrlLowerCase)) {  					redirected = true;  					result.Action = ActionType.Redirect301;  					result.FinalUrl = bestFriendlyUrl;  					if (result.Reason != RedirectReason.Custom_Tab_Alias && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  						result.Reason = RedirectReason.Unfriendly_Url_2;  					}  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + requestedPathNoScheme + " [requested with no scheme]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHost + " [requested with host and scheme]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHostNoScheme + " [requested with host' no scheme]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + HttpUtility.UrlDecode (requestedPathNoScheme) + " [requested and decoded]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlLowerCase + " [requested raw Url]");  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if (result.TabId > -1 //valid tab  && (result.Action == ActionType.Redirect301 //specific 301 redirect  || (do301Val != null && do301Val == "true") //or rewrite hint for specific 301 redirect   || result.Action == ActionType.Redirect302))//or specific 302 redirect   {  	//we have ordered a 301 redirect earlier in the code  	//get the url for redirection by re-submitting the path into the Friendly Url Provider  	string pathOnly = RewriteController.GetRewriteOrRequestedPath (result' requestUri);  	//727 prevent redirectLoop with do301 in querystring  	if (result.Action == ActionType.Redirect301 || queryStringHas301Parm || result.Action == ActionType.Redirect302) {  		pathOnly = RedirectTokens.RemoveAnyRedirectTokens (pathOnly' queryStringCol);  	}  	//check for exclusion by regex for this url  	if (result.RedirectAllowed) {  		//get the tab so we know where to go  		TabInfo tab;  		bool checkRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  		if (checkRedirect) {  			if ((result.Reason == RedirectReason.Deleted_Page || result.Reason == RedirectReason.Disabled_Page) && portalHomeTabId > 0 && settings.DeletedTabHandlingType == DeletedTabHandlingType.Do301RedirectToPortalHome) {  				//redirecting to home page    				TabInfo homeTab = TabController.Instance.GetTab (portalHomeTabId' result.PortalId' false);  				if (homeTab != null) {  					string homePageUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (homeTab' pathOnly' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  					result.Action = ActionType.Redirect301;  					result.FinalUrl = homePageUrl;  					result.RewritePath = pathOnly;  					redirected = true;  				}  			} else {  				//get the rewrite or requested path in a clean format' suitable for input to the friendly url provider  				string cleanPath = RewriteController.GetRewriteOrRequestedPath (result' requestUri);  				//727 prevent redirectLoop with do301 in querystring  				//also check for existing in path of do301 token  				if (result.Action == ActionType.Redirect301 || do301Val != null || result.Action == ActionType.Redirect302) {  					cleanPath = RedirectTokens.RemoveAnyRedirectTokens (cleanPath' queryStringCol);  				}  				//get best friendly url from friendly url provider  				string bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  				//get what the friendly Url for this tab should be and stick it in as the redirect  				//727 : using boolean because we wanted to get rid of the do301 before calculating the correct url  				if (queryStringHas301Parm) {  					result.Action = ActionType.Redirect301;  					if (result.Reason == RedirectReason.Not_Redirected) {  						result.Reason = RedirectReason.Unfriendly_Url_1;  					}  				}  				result.FinalUrl = bestFriendlyUrl;  				result.RewritePath = pathOnly;  				redirected = true;  				//mark as redirected  			}  		} else {  			//redirect disallowed   			//618: dont' clear if 302 redirect selected  			if (result.Action != ActionType.Redirect302Now || result.Action != ActionType.Redirect302) {  				RedirectController.CancelRedirect (ref result' null' settings' "Redirect requested but cancelled because disallowed");  			}  		}  	}  } else if (result.TabId > -1 && result.RedirectAllowed && result.Action == ActionType.CheckFor301) {  	//301 check was requested in earlier processing  	//get the tab controller and retrieve the tab the request is for   	//don't redirect unless allowed' the tab is valid' and it's not an admin or super tab   	if (settings.RedirectUnfriendly) {  		TabInfo tab;  		bool allowRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  		if (allowRedirect && tab != null) {  			//remove the http alias from the url. Do this by putting the url back together from the request and removing the alias   			string rewritePathOnly;  			if (result.DoRewrite) {  				rewritePathOnly = result.RewritePath;  				var pos = rewritePathOnly.IndexOf ("default.aspx"' StringComparison.OrdinalIgnoreCase);  				if (pos > Null.NullInteger) {  					rewritePathOnly = rewritePathOnly.Substring (pos);  				}  			} else {  				rewritePathOnly = requestUri.Host + requestUri.PathAndQuery;  			}  			//remove the http alias from the path   			var pathAliasEnd = rewritePathOnly.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase);  			var queryStringIndex = rewritePathOnly.IndexOf ("?"' StringComparison.InvariantCultureIgnoreCase);  			if (pathAliasEnd > Null.NullInteger && (queryStringIndex == Null.NullInteger || pathAliasEnd < queryStringIndex)) {  				rewritePathOnly = rewritePathOnly.Substring (pathAliasEnd + result.PortalAlias.HTTPAlias.Length);  			}  			//now check to see if need to remove /default.aspx from the end of the requested Url  			string requestedUrl = fullUrl;  			int requestedUrlAliasEnd = requestedUrl.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase) + (result.PortalAlias.HTTPAlias + "/").Length;  			if (requestedUrlAliasEnd > Null.NullInteger) {  				//818 : when a site root is used for a custom page Url' then check for max length within bounds  				if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  					requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  					//12 = default.aspx length  				}  			}  			//what happens here is that the request is reverse-engineered to see if it matches what the friendly Url shoudl have been   			//get what the friendly Url for this tab should be   			string bestFriendlyUrl;  			//819 : leaving /do301/check in Url because not using cleanPath to remove from  			string cleanPath = RedirectTokens.RemoveAnyRedirectTokensAndReasons (rewritePathOnly);  			//string cleanPath = rewritePathOnly.Replace("&do301=check"'"");//remove check parameter if it exists  			//cleanPath = cleanPath.Replace("&do301=true"' "");//don't pass through internal redirect check parameter  			cleanPath = cleanPath.Replace ("&_aumdebug=true"' "");  			//remove debug parameter if it exists  			Match match = RewritePathRx.Match (rewritePathOnly ?? "");  			if (match.Success) {  				//when the pathOnly value ends with '=' it means there is a query string pair with a key and no value  				//make the assumption that this was passed in as a page name OTHER than default page  				string pageName = match.Groups ["parm"].Value;  				//get the last parameter in the list  				cleanPath = cleanPath.Replace (match.Value' "");  				//remove the last parameter from the path  				//generate teh friendly URl name with the last parameter as the page name' not a query string parameter  				bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' pageName + settings.PageExtension' result.HttpAlias' false' settings' Guid.Empty);  			} else {  				bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  			}  			//if the incomign request doesn't match the 'most friendly' url' a 301 Moved Permanently status is returned' along with the friendly url   			//check the bestFriendlyUrl against either the url' or rawUrl (with and without host)   			//in each case' the aumdebug parameter will be searched for and replaced  			var urlDecode = HttpUtility.UrlDecode (requestedUrl);  			if (urlDecode != null) {  				string rawUrlWithHost = StripDebugParameter (urlDecode.ToLower ());  				//string rawUrlWithHost = StripDebugParameter(System.Web.HttpUtility.UrlDecode(scheme + requestUri.Host + requestUri.PathAndQuery).ToLower());  				string rawUrlWithHostNoScheme = StripDebugParameter (rawUrlWithHost.Replace (scheme' ""));  				string bestFriendlyNoScheme = StripDebugParameter (bestFriendlyUrl.ToLower ().Replace (scheme' ""));  				string requestedPathNoScheme = StripDebugParameter (requestUri.AbsoluteUri.Replace (scheme' "").ToLower ());  				string rawUrlLowerCase = StripDebugParameter (requestUri.AbsoluteUri.ToLower ());  				//check to see if just an alias redirect of an internal alias  				var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  				if (settings.InternalAliasList != null && settings.InternalAliasList.Count > 0 && primaryAliases.Count > 0) {  					var cpa = primaryAliases.GetAliasByPortalIdAndSettings (result);  					if (cpa != null) {  						string chosenAlias = cpa.HTTPAlias.ToLower ();  						foreach (InternalAlias ia in settings.InternalAliasList) {  							string internalAlias = ia.HttpAlias.ToLower ();  							if (requestedPathNoScheme.Contains (internalAlias)) {  								//an internal alias has been used.  								//replace this in the comparison charts to do a 'fair' comparison  								requestedPathNoScheme = requestedPathNoScheme.Replace (internalAlias' chosenAlias);  								rawUrlWithHost = rawUrlWithHost.Replace (scheme + internalAlias' scheme + chosenAlias);  								rawUrlWithHostNoScheme = rawUrlWithHostNoScheme.Replace (internalAlias' chosenAlias);  								rawUrlLowerCase = rawUrlLowerCase.Replace (internalAlias' chosenAlias);  								break;  							}  						}  					}  				}  				//DNN-9158: prevent SSL Offloading infinite redirects  				if (!result.IsSecureConnection && result.IsSSLOffloaded && bestFriendlyNoScheme.StartsWith ("https")) {  					bestFriendlyNoScheme = bestFriendlyNoScheme.Replace ("https://"' "http://");  				}  				if (!(bestFriendlyNoScheme == requestedPathNoScheme || bestFriendlyNoScheme == rawUrlWithHost || bestFriendlyNoScheme == rawUrlWithHostNoScheme || bestFriendlyNoScheme == HttpUtility.UrlDecode (requestedPathNoScheme) || bestFriendlyNoScheme == rawUrlLowerCase)) {  					redirected = true;  					result.Action = ActionType.Redirect301;  					result.FinalUrl = bestFriendlyUrl;  					if (result.Reason != RedirectReason.Custom_Tab_Alias && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  						result.Reason = RedirectReason.Unfriendly_Url_2;  					}  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + requestedPathNoScheme + " [requested with no scheme]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHost + " [requested with host and scheme]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHostNoScheme + " [requested with host' no scheme]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + HttpUtility.UrlDecode (requestedPathNoScheme) + " [requested and decoded]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlLowerCase + " [requested raw Url]");  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if (result.TabId > -1 && result.RedirectAllowed && result.Action == ActionType.CheckFor301) {  	//301 check was requested in earlier processing  	//get the tab controller and retrieve the tab the request is for   	//don't redirect unless allowed' the tab is valid' and it's not an admin or super tab   	if (settings.RedirectUnfriendly) {  		TabInfo tab;  		bool allowRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  		if (allowRedirect && tab != null) {  			//remove the http alias from the url. Do this by putting the url back together from the request and removing the alias   			string rewritePathOnly;  			if (result.DoRewrite) {  				rewritePathOnly = result.RewritePath;  				var pos = rewritePathOnly.IndexOf ("default.aspx"' StringComparison.OrdinalIgnoreCase);  				if (pos > Null.NullInteger) {  					rewritePathOnly = rewritePathOnly.Substring (pos);  				}  			} else {  				rewritePathOnly = requestUri.Host + requestUri.PathAndQuery;  			}  			//remove the http alias from the path   			var pathAliasEnd = rewritePathOnly.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase);  			var queryStringIndex = rewritePathOnly.IndexOf ("?"' StringComparison.InvariantCultureIgnoreCase);  			if (pathAliasEnd > Null.NullInteger && (queryStringIndex == Null.NullInteger || pathAliasEnd < queryStringIndex)) {  				rewritePathOnly = rewritePathOnly.Substring (pathAliasEnd + result.PortalAlias.HTTPAlias.Length);  			}  			//now check to see if need to remove /default.aspx from the end of the requested Url  			string requestedUrl = fullUrl;  			int requestedUrlAliasEnd = requestedUrl.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase) + (result.PortalAlias.HTTPAlias + "/").Length;  			if (requestedUrlAliasEnd > Null.NullInteger) {  				//818 : when a site root is used for a custom page Url' then check for max length within bounds  				if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  					requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  					//12 = default.aspx length  				}  			}  			//what happens here is that the request is reverse-engineered to see if it matches what the friendly Url shoudl have been   			//get what the friendly Url for this tab should be   			string bestFriendlyUrl;  			//819 : leaving /do301/check in Url because not using cleanPath to remove from  			string cleanPath = RedirectTokens.RemoveAnyRedirectTokensAndReasons (rewritePathOnly);  			//string cleanPath = rewritePathOnly.Replace("&do301=check"'"");//remove check parameter if it exists  			//cleanPath = cleanPath.Replace("&do301=true"' "");//don't pass through internal redirect check parameter  			cleanPath = cleanPath.Replace ("&_aumdebug=true"' "");  			//remove debug parameter if it exists  			Match match = RewritePathRx.Match (rewritePathOnly ?? "");  			if (match.Success) {  				//when the pathOnly value ends with '=' it means there is a query string pair with a key and no value  				//make the assumption that this was passed in as a page name OTHER than default page  				string pageName = match.Groups ["parm"].Value;  				//get the last parameter in the list  				cleanPath = cleanPath.Replace (match.Value' "");  				//remove the last parameter from the path  				//generate teh friendly URl name with the last parameter as the page name' not a query string parameter  				bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' pageName + settings.PageExtension' result.HttpAlias' false' settings' Guid.Empty);  			} else {  				bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  			}  			//if the incomign request doesn't match the 'most friendly' url' a 301 Moved Permanently status is returned' along with the friendly url   			//check the bestFriendlyUrl against either the url' or rawUrl (with and without host)   			//in each case' the aumdebug parameter will be searched for and replaced  			var urlDecode = HttpUtility.UrlDecode (requestedUrl);  			if (urlDecode != null) {  				string rawUrlWithHost = StripDebugParameter (urlDecode.ToLower ());  				//string rawUrlWithHost = StripDebugParameter(System.Web.HttpUtility.UrlDecode(scheme + requestUri.Host + requestUri.PathAndQuery).ToLower());  				string rawUrlWithHostNoScheme = StripDebugParameter (rawUrlWithHost.Replace (scheme' ""));  				string bestFriendlyNoScheme = StripDebugParameter (bestFriendlyUrl.ToLower ().Replace (scheme' ""));  				string requestedPathNoScheme = StripDebugParameter (requestUri.AbsoluteUri.Replace (scheme' "").ToLower ());  				string rawUrlLowerCase = StripDebugParameter (requestUri.AbsoluteUri.ToLower ());  				//check to see if just an alias redirect of an internal alias  				var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  				if (settings.InternalAliasList != null && settings.InternalAliasList.Count > 0 && primaryAliases.Count > 0) {  					var cpa = primaryAliases.GetAliasByPortalIdAndSettings (result);  					if (cpa != null) {  						string chosenAlias = cpa.HTTPAlias.ToLower ();  						foreach (InternalAlias ia in settings.InternalAliasList) {  							string internalAlias = ia.HttpAlias.ToLower ();  							if (requestedPathNoScheme.Contains (internalAlias)) {  								//an internal alias has been used.  								//replace this in the comparison charts to do a 'fair' comparison  								requestedPathNoScheme = requestedPathNoScheme.Replace (internalAlias' chosenAlias);  								rawUrlWithHost = rawUrlWithHost.Replace (scheme + internalAlias' scheme + chosenAlias);  								rawUrlWithHostNoScheme = rawUrlWithHostNoScheme.Replace (internalAlias' chosenAlias);  								rawUrlLowerCase = rawUrlLowerCase.Replace (internalAlias' chosenAlias);  								break;  							}  						}  					}  				}  				//DNN-9158: prevent SSL Offloading infinite redirects  				if (!result.IsSecureConnection && result.IsSSLOffloaded && bestFriendlyNoScheme.StartsWith ("https")) {  					bestFriendlyNoScheme = bestFriendlyNoScheme.Replace ("https://"' "http://");  				}  				if (!(bestFriendlyNoScheme == requestedPathNoScheme || bestFriendlyNoScheme == rawUrlWithHost || bestFriendlyNoScheme == rawUrlWithHostNoScheme || bestFriendlyNoScheme == HttpUtility.UrlDecode (requestedPathNoScheme) || bestFriendlyNoScheme == rawUrlLowerCase)) {  					redirected = true;  					result.Action = ActionType.Redirect301;  					result.FinalUrl = bestFriendlyUrl;  					if (result.Reason != RedirectReason.Custom_Tab_Alias && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  						result.Reason = RedirectReason.Unfriendly_Url_2;  					}  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + requestedPathNoScheme + " [requested with no scheme]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHost + " [requested with host and scheme]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHostNoScheme + " [requested with host' no scheme]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + HttpUtility.UrlDecode (requestedPathNoScheme) + " [requested and decoded]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlLowerCase + " [requested raw Url]");  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if (result.TabId > -1 && result.RedirectAllowed && result.Action == ActionType.CheckFor301) {  	//301 check was requested in earlier processing  	//get the tab controller and retrieve the tab the request is for   	//don't redirect unless allowed' the tab is valid' and it's not an admin or super tab   	if (settings.RedirectUnfriendly) {  		TabInfo tab;  		bool allowRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  		if (allowRedirect && tab != null) {  			//remove the http alias from the url. Do this by putting the url back together from the request and removing the alias   			string rewritePathOnly;  			if (result.DoRewrite) {  				rewritePathOnly = result.RewritePath;  				var pos = rewritePathOnly.IndexOf ("default.aspx"' StringComparison.OrdinalIgnoreCase);  				if (pos > Null.NullInteger) {  					rewritePathOnly = rewritePathOnly.Substring (pos);  				}  			} else {  				rewritePathOnly = requestUri.Host + requestUri.PathAndQuery;  			}  			//remove the http alias from the path   			var pathAliasEnd = rewritePathOnly.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase);  			var queryStringIndex = rewritePathOnly.IndexOf ("?"' StringComparison.InvariantCultureIgnoreCase);  			if (pathAliasEnd > Null.NullInteger && (queryStringIndex == Null.NullInteger || pathAliasEnd < queryStringIndex)) {  				rewritePathOnly = rewritePathOnly.Substring (pathAliasEnd + result.PortalAlias.HTTPAlias.Length);  			}  			//now check to see if need to remove /default.aspx from the end of the requested Url  			string requestedUrl = fullUrl;  			int requestedUrlAliasEnd = requestedUrl.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase) + (result.PortalAlias.HTTPAlias + "/").Length;  			if (requestedUrlAliasEnd > Null.NullInteger) {  				//818 : when a site root is used for a custom page Url' then check for max length within bounds  				if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  					requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  					//12 = default.aspx length  				}  			}  			//what happens here is that the request is reverse-engineered to see if it matches what the friendly Url shoudl have been   			//get what the friendly Url for this tab should be   			string bestFriendlyUrl;  			//819 : leaving /do301/check in Url because not using cleanPath to remove from  			string cleanPath = RedirectTokens.RemoveAnyRedirectTokensAndReasons (rewritePathOnly);  			//string cleanPath = rewritePathOnly.Replace("&do301=check"'"");//remove check parameter if it exists  			//cleanPath = cleanPath.Replace("&do301=true"' "");//don't pass through internal redirect check parameter  			cleanPath = cleanPath.Replace ("&_aumdebug=true"' "");  			//remove debug parameter if it exists  			Match match = RewritePathRx.Match (rewritePathOnly ?? "");  			if (match.Success) {  				//when the pathOnly value ends with '=' it means there is a query string pair with a key and no value  				//make the assumption that this was passed in as a page name OTHER than default page  				string pageName = match.Groups ["parm"].Value;  				//get the last parameter in the list  				cleanPath = cleanPath.Replace (match.Value' "");  				//remove the last parameter from the path  				//generate teh friendly URl name with the last parameter as the page name' not a query string parameter  				bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' pageName + settings.PageExtension' result.HttpAlias' false' settings' Guid.Empty);  			} else {  				bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  			}  			//if the incomign request doesn't match the 'most friendly' url' a 301 Moved Permanently status is returned' along with the friendly url   			//check the bestFriendlyUrl against either the url' or rawUrl (with and without host)   			//in each case' the aumdebug parameter will be searched for and replaced  			var urlDecode = HttpUtility.UrlDecode (requestedUrl);  			if (urlDecode != null) {  				string rawUrlWithHost = StripDebugParameter (urlDecode.ToLower ());  				//string rawUrlWithHost = StripDebugParameter(System.Web.HttpUtility.UrlDecode(scheme + requestUri.Host + requestUri.PathAndQuery).ToLower());  				string rawUrlWithHostNoScheme = StripDebugParameter (rawUrlWithHost.Replace (scheme' ""));  				string bestFriendlyNoScheme = StripDebugParameter (bestFriendlyUrl.ToLower ().Replace (scheme' ""));  				string requestedPathNoScheme = StripDebugParameter (requestUri.AbsoluteUri.Replace (scheme' "").ToLower ());  				string rawUrlLowerCase = StripDebugParameter (requestUri.AbsoluteUri.ToLower ());  				//check to see if just an alias redirect of an internal alias  				var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  				if (settings.InternalAliasList != null && settings.InternalAliasList.Count > 0 && primaryAliases.Count > 0) {  					var cpa = primaryAliases.GetAliasByPortalIdAndSettings (result);  					if (cpa != null) {  						string chosenAlias = cpa.HTTPAlias.ToLower ();  						foreach (InternalAlias ia in settings.InternalAliasList) {  							string internalAlias = ia.HttpAlias.ToLower ();  							if (requestedPathNoScheme.Contains (internalAlias)) {  								//an internal alias has been used.  								//replace this in the comparison charts to do a 'fair' comparison  								requestedPathNoScheme = requestedPathNoScheme.Replace (internalAlias' chosenAlias);  								rawUrlWithHost = rawUrlWithHost.Replace (scheme + internalAlias' scheme + chosenAlias);  								rawUrlWithHostNoScheme = rawUrlWithHostNoScheme.Replace (internalAlias' chosenAlias);  								rawUrlLowerCase = rawUrlLowerCase.Replace (internalAlias' chosenAlias);  								break;  							}  						}  					}  				}  				//DNN-9158: prevent SSL Offloading infinite redirects  				if (!result.IsSecureConnection && result.IsSSLOffloaded && bestFriendlyNoScheme.StartsWith ("https")) {  					bestFriendlyNoScheme = bestFriendlyNoScheme.Replace ("https://"' "http://");  				}  				if (!(bestFriendlyNoScheme == requestedPathNoScheme || bestFriendlyNoScheme == rawUrlWithHost || bestFriendlyNoScheme == rawUrlWithHostNoScheme || bestFriendlyNoScheme == HttpUtility.UrlDecode (requestedPathNoScheme) || bestFriendlyNoScheme == rawUrlLowerCase)) {  					redirected = true;  					result.Action = ActionType.Redirect301;  					result.FinalUrl = bestFriendlyUrl;  					if (result.Reason != RedirectReason.Custom_Tab_Alias && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  						result.Reason = RedirectReason.Unfriendly_Url_2;  					}  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + requestedPathNoScheme + " [requested with no scheme]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHost + " [requested with host and scheme]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHostNoScheme + " [requested with host' no scheme]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + HttpUtility.UrlDecode (requestedPathNoScheme) + " [requested and decoded]");  					result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlLowerCase + " [requested raw Url]");  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if (settings.RedirectUnfriendly) {  	TabInfo tab;  	bool allowRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  	if (allowRedirect && tab != null) {  		//remove the http alias from the url. Do this by putting the url back together from the request and removing the alias   		string rewritePathOnly;  		if (result.DoRewrite) {  			rewritePathOnly = result.RewritePath;  			var pos = rewritePathOnly.IndexOf ("default.aspx"' StringComparison.OrdinalIgnoreCase);  			if (pos > Null.NullInteger) {  				rewritePathOnly = rewritePathOnly.Substring (pos);  			}  		} else {  			rewritePathOnly = requestUri.Host + requestUri.PathAndQuery;  		}  		//remove the http alias from the path   		var pathAliasEnd = rewritePathOnly.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase);  		var queryStringIndex = rewritePathOnly.IndexOf ("?"' StringComparison.InvariantCultureIgnoreCase);  		if (pathAliasEnd > Null.NullInteger && (queryStringIndex == Null.NullInteger || pathAliasEnd < queryStringIndex)) {  			rewritePathOnly = rewritePathOnly.Substring (pathAliasEnd + result.PortalAlias.HTTPAlias.Length);  		}  		//now check to see if need to remove /default.aspx from the end of the requested Url  		string requestedUrl = fullUrl;  		int requestedUrlAliasEnd = requestedUrl.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase) + (result.PortalAlias.HTTPAlias + "/").Length;  		if (requestedUrlAliasEnd > Null.NullInteger) {  			//818 : when a site root is used for a custom page Url' then check for max length within bounds  			if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  				requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  				//12 = default.aspx length  			}  		}  		//what happens here is that the request is reverse-engineered to see if it matches what the friendly Url shoudl have been   		//get what the friendly Url for this tab should be   		string bestFriendlyUrl;  		//819 : leaving /do301/check in Url because not using cleanPath to remove from  		string cleanPath = RedirectTokens.RemoveAnyRedirectTokensAndReasons (rewritePathOnly);  		//string cleanPath = rewritePathOnly.Replace("&do301=check"'"");//remove check parameter if it exists  		//cleanPath = cleanPath.Replace("&do301=true"' "");//don't pass through internal redirect check parameter  		cleanPath = cleanPath.Replace ("&_aumdebug=true"' "");  		//remove debug parameter if it exists  		Match match = RewritePathRx.Match (rewritePathOnly ?? "");  		if (match.Success) {  			//when the pathOnly value ends with '=' it means there is a query string pair with a key and no value  			//make the assumption that this was passed in as a page name OTHER than default page  			string pageName = match.Groups ["parm"].Value;  			//get the last parameter in the list  			cleanPath = cleanPath.Replace (match.Value' "");  			//remove the last parameter from the path  			//generate teh friendly URl name with the last parameter as the page name' not a query string parameter  			bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' pageName + settings.PageExtension' result.HttpAlias' false' settings' Guid.Empty);  		} else {  			bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  		}  		//if the incomign request doesn't match the 'most friendly' url' a 301 Moved Permanently status is returned' along with the friendly url   		//check the bestFriendlyUrl against either the url' or rawUrl (with and without host)   		//in each case' the aumdebug parameter will be searched for and replaced  		var urlDecode = HttpUtility.UrlDecode (requestedUrl);  		if (urlDecode != null) {  			string rawUrlWithHost = StripDebugParameter (urlDecode.ToLower ());  			//string rawUrlWithHost = StripDebugParameter(System.Web.HttpUtility.UrlDecode(scheme + requestUri.Host + requestUri.PathAndQuery).ToLower());  			string rawUrlWithHostNoScheme = StripDebugParameter (rawUrlWithHost.Replace (scheme' ""));  			string bestFriendlyNoScheme = StripDebugParameter (bestFriendlyUrl.ToLower ().Replace (scheme' ""));  			string requestedPathNoScheme = StripDebugParameter (requestUri.AbsoluteUri.Replace (scheme' "").ToLower ());  			string rawUrlLowerCase = StripDebugParameter (requestUri.AbsoluteUri.ToLower ());  			//check to see if just an alias redirect of an internal alias  			var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  			if (settings.InternalAliasList != null && settings.InternalAliasList.Count > 0 && primaryAliases.Count > 0) {  				var cpa = primaryAliases.GetAliasByPortalIdAndSettings (result);  				if (cpa != null) {  					string chosenAlias = cpa.HTTPAlias.ToLower ();  					foreach (InternalAlias ia in settings.InternalAliasList) {  						string internalAlias = ia.HttpAlias.ToLower ();  						if (requestedPathNoScheme.Contains (internalAlias)) {  							//an internal alias has been used.  							//replace this in the comparison charts to do a 'fair' comparison  							requestedPathNoScheme = requestedPathNoScheme.Replace (internalAlias' chosenAlias);  							rawUrlWithHost = rawUrlWithHost.Replace (scheme + internalAlias' scheme + chosenAlias);  							rawUrlWithHostNoScheme = rawUrlWithHostNoScheme.Replace (internalAlias' chosenAlias);  							rawUrlLowerCase = rawUrlLowerCase.Replace (internalAlias' chosenAlias);  							break;  						}  					}  				}  			}  			//DNN-9158: prevent SSL Offloading infinite redirects  			if (!result.IsSecureConnection && result.IsSSLOffloaded && bestFriendlyNoScheme.StartsWith ("https")) {  				bestFriendlyNoScheme = bestFriendlyNoScheme.Replace ("https://"' "http://");  			}  			if (!(bestFriendlyNoScheme == requestedPathNoScheme || bestFriendlyNoScheme == rawUrlWithHost || bestFriendlyNoScheme == rawUrlWithHostNoScheme || bestFriendlyNoScheme == HttpUtility.UrlDecode (requestedPathNoScheme) || bestFriendlyNoScheme == rawUrlLowerCase)) {  				redirected = true;  				result.Action = ActionType.Redirect301;  				result.FinalUrl = bestFriendlyUrl;  				if (result.Reason != RedirectReason.Custom_Tab_Alias && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  					result.Reason = RedirectReason.Unfriendly_Url_2;  				}  				result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + requestedPathNoScheme + " [requested with no scheme]");  				result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHost + " [requested with host and scheme]");  				result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHostNoScheme + " [requested with host' no scheme]");  				result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + HttpUtility.UrlDecode (requestedPathNoScheme) + " [requested and decoded]");  				result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlLowerCase + " [requested raw Url]");  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if (settings.RedirectUnfriendly) {  	TabInfo tab;  	bool allowRedirect = CheckFor301RedirectExclusion (result.TabId' result.PortalId' true' out tab' settings);  	if (allowRedirect && tab != null) {  		//remove the http alias from the url. Do this by putting the url back together from the request and removing the alias   		string rewritePathOnly;  		if (result.DoRewrite) {  			rewritePathOnly = result.RewritePath;  			var pos = rewritePathOnly.IndexOf ("default.aspx"' StringComparison.OrdinalIgnoreCase);  			if (pos > Null.NullInteger) {  				rewritePathOnly = rewritePathOnly.Substring (pos);  			}  		} else {  			rewritePathOnly = requestUri.Host + requestUri.PathAndQuery;  		}  		//remove the http alias from the path   		var pathAliasEnd = rewritePathOnly.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase);  		var queryStringIndex = rewritePathOnly.IndexOf ("?"' StringComparison.InvariantCultureIgnoreCase);  		if (pathAliasEnd > Null.NullInteger && (queryStringIndex == Null.NullInteger || pathAliasEnd < queryStringIndex)) {  			rewritePathOnly = rewritePathOnly.Substring (pathAliasEnd + result.PortalAlias.HTTPAlias.Length);  		}  		//now check to see if need to remove /default.aspx from the end of the requested Url  		string requestedUrl = fullUrl;  		int requestedUrlAliasEnd = requestedUrl.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase) + (result.PortalAlias.HTTPAlias + "/").Length;  		if (requestedUrlAliasEnd > Null.NullInteger) {  			//818 : when a site root is used for a custom page Url' then check for max length within bounds  			if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  				requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  				//12 = default.aspx length  			}  		}  		//what happens here is that the request is reverse-engineered to see if it matches what the friendly Url shoudl have been   		//get what the friendly Url for this tab should be   		string bestFriendlyUrl;  		//819 : leaving /do301/check in Url because not using cleanPath to remove from  		string cleanPath = RedirectTokens.RemoveAnyRedirectTokensAndReasons (rewritePathOnly);  		//string cleanPath = rewritePathOnly.Replace("&do301=check"'"");//remove check parameter if it exists  		//cleanPath = cleanPath.Replace("&do301=true"' "");//don't pass through internal redirect check parameter  		cleanPath = cleanPath.Replace ("&_aumdebug=true"' "");  		//remove debug parameter if it exists  		Match match = RewritePathRx.Match (rewritePathOnly ?? "");  		if (match.Success) {  			//when the pathOnly value ends with '=' it means there is a query string pair with a key and no value  			//make the assumption that this was passed in as a page name OTHER than default page  			string pageName = match.Groups ["parm"].Value;  			//get the last parameter in the list  			cleanPath = cleanPath.Replace (match.Value' "");  			//remove the last parameter from the path  			//generate teh friendly URl name with the last parameter as the page name' not a query string parameter  			bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' pageName + settings.PageExtension' result.HttpAlias' false' settings' Guid.Empty);  		} else {  			bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  		}  		//if the incomign request doesn't match the 'most friendly' url' a 301 Moved Permanently status is returned' along with the friendly url   		//check the bestFriendlyUrl against either the url' or rawUrl (with and without host)   		//in each case' the aumdebug parameter will be searched for and replaced  		var urlDecode = HttpUtility.UrlDecode (requestedUrl);  		if (urlDecode != null) {  			string rawUrlWithHost = StripDebugParameter (urlDecode.ToLower ());  			//string rawUrlWithHost = StripDebugParameter(System.Web.HttpUtility.UrlDecode(scheme + requestUri.Host + requestUri.PathAndQuery).ToLower());  			string rawUrlWithHostNoScheme = StripDebugParameter (rawUrlWithHost.Replace (scheme' ""));  			string bestFriendlyNoScheme = StripDebugParameter (bestFriendlyUrl.ToLower ().Replace (scheme' ""));  			string requestedPathNoScheme = StripDebugParameter (requestUri.AbsoluteUri.Replace (scheme' "").ToLower ());  			string rawUrlLowerCase = StripDebugParameter (requestUri.AbsoluteUri.ToLower ());  			//check to see if just an alias redirect of an internal alias  			var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  			if (settings.InternalAliasList != null && settings.InternalAliasList.Count > 0 && primaryAliases.Count > 0) {  				var cpa = primaryAliases.GetAliasByPortalIdAndSettings (result);  				if (cpa != null) {  					string chosenAlias = cpa.HTTPAlias.ToLower ();  					foreach (InternalAlias ia in settings.InternalAliasList) {  						string internalAlias = ia.HttpAlias.ToLower ();  						if (requestedPathNoScheme.Contains (internalAlias)) {  							//an internal alias has been used.  							//replace this in the comparison charts to do a 'fair' comparison  							requestedPathNoScheme = requestedPathNoScheme.Replace (internalAlias' chosenAlias);  							rawUrlWithHost = rawUrlWithHost.Replace (scheme + internalAlias' scheme + chosenAlias);  							rawUrlWithHostNoScheme = rawUrlWithHostNoScheme.Replace (internalAlias' chosenAlias);  							rawUrlLowerCase = rawUrlLowerCase.Replace (internalAlias' chosenAlias);  							break;  						}  					}  				}  			}  			//DNN-9158: prevent SSL Offloading infinite redirects  			if (!result.IsSecureConnection && result.IsSSLOffloaded && bestFriendlyNoScheme.StartsWith ("https")) {  				bestFriendlyNoScheme = bestFriendlyNoScheme.Replace ("https://"' "http://");  			}  			if (!(bestFriendlyNoScheme == requestedPathNoScheme || bestFriendlyNoScheme == rawUrlWithHost || bestFriendlyNoScheme == rawUrlWithHostNoScheme || bestFriendlyNoScheme == HttpUtility.UrlDecode (requestedPathNoScheme) || bestFriendlyNoScheme == rawUrlLowerCase)) {  				redirected = true;  				result.Action = ActionType.Redirect301;  				result.FinalUrl = bestFriendlyUrl;  				if (result.Reason != RedirectReason.Custom_Tab_Alias && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  					result.Reason = RedirectReason.Unfriendly_Url_2;  				}  				result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + requestedPathNoScheme + " [requested with no scheme]");  				result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHost + " [requested with host and scheme]");  				result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHostNoScheme + " [requested with host' no scheme]");  				result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + HttpUtility.UrlDecode (requestedPathNoScheme) + " [requested and decoded]");  				result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlLowerCase + " [requested raw Url]");  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if (allowRedirect && tab != null) {  	//remove the http alias from the url. Do this by putting the url back together from the request and removing the alias   	string rewritePathOnly;  	if (result.DoRewrite) {  		rewritePathOnly = result.RewritePath;  		var pos = rewritePathOnly.IndexOf ("default.aspx"' StringComparison.OrdinalIgnoreCase);  		if (pos > Null.NullInteger) {  			rewritePathOnly = rewritePathOnly.Substring (pos);  		}  	} else {  		rewritePathOnly = requestUri.Host + requestUri.PathAndQuery;  	}  	//remove the http alias from the path   	var pathAliasEnd = rewritePathOnly.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase);  	var queryStringIndex = rewritePathOnly.IndexOf ("?"' StringComparison.InvariantCultureIgnoreCase);  	if (pathAliasEnd > Null.NullInteger && (queryStringIndex == Null.NullInteger || pathAliasEnd < queryStringIndex)) {  		rewritePathOnly = rewritePathOnly.Substring (pathAliasEnd + result.PortalAlias.HTTPAlias.Length);  	}  	//now check to see if need to remove /default.aspx from the end of the requested Url  	string requestedUrl = fullUrl;  	int requestedUrlAliasEnd = requestedUrl.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase) + (result.PortalAlias.HTTPAlias + "/").Length;  	if (requestedUrlAliasEnd > Null.NullInteger) {  		//818 : when a site root is used for a custom page Url' then check for max length within bounds  		if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  			requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  			//12 = default.aspx length  		}  	}  	//what happens here is that the request is reverse-engineered to see if it matches what the friendly Url shoudl have been   	//get what the friendly Url for this tab should be   	string bestFriendlyUrl;  	//819 : leaving /do301/check in Url because not using cleanPath to remove from  	string cleanPath = RedirectTokens.RemoveAnyRedirectTokensAndReasons (rewritePathOnly);  	//string cleanPath = rewritePathOnly.Replace("&do301=check"'"");//remove check parameter if it exists  	//cleanPath = cleanPath.Replace("&do301=true"' "");//don't pass through internal redirect check parameter  	cleanPath = cleanPath.Replace ("&_aumdebug=true"' "");  	//remove debug parameter if it exists  	Match match = RewritePathRx.Match (rewritePathOnly ?? "");  	if (match.Success) {  		//when the pathOnly value ends with '=' it means there is a query string pair with a key and no value  		//make the assumption that this was passed in as a page name OTHER than default page  		string pageName = match.Groups ["parm"].Value;  		//get the last parameter in the list  		cleanPath = cleanPath.Replace (match.Value' "");  		//remove the last parameter from the path  		//generate teh friendly URl name with the last parameter as the page name' not a query string parameter  		bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' pageName + settings.PageExtension' result.HttpAlias' false' settings' Guid.Empty);  	} else {  		bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  	}  	//if the incomign request doesn't match the 'most friendly' url' a 301 Moved Permanently status is returned' along with the friendly url   	//check the bestFriendlyUrl against either the url' or rawUrl (with and without host)   	//in each case' the aumdebug parameter will be searched for and replaced  	var urlDecode = HttpUtility.UrlDecode (requestedUrl);  	if (urlDecode != null) {  		string rawUrlWithHost = StripDebugParameter (urlDecode.ToLower ());  		//string rawUrlWithHost = StripDebugParameter(System.Web.HttpUtility.UrlDecode(scheme + requestUri.Host + requestUri.PathAndQuery).ToLower());  		string rawUrlWithHostNoScheme = StripDebugParameter (rawUrlWithHost.Replace (scheme' ""));  		string bestFriendlyNoScheme = StripDebugParameter (bestFriendlyUrl.ToLower ().Replace (scheme' ""));  		string requestedPathNoScheme = StripDebugParameter (requestUri.AbsoluteUri.Replace (scheme' "").ToLower ());  		string rawUrlLowerCase = StripDebugParameter (requestUri.AbsoluteUri.ToLower ());  		//check to see if just an alias redirect of an internal alias  		var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  		if (settings.InternalAliasList != null && settings.InternalAliasList.Count > 0 && primaryAliases.Count > 0) {  			var cpa = primaryAliases.GetAliasByPortalIdAndSettings (result);  			if (cpa != null) {  				string chosenAlias = cpa.HTTPAlias.ToLower ();  				foreach (InternalAlias ia in settings.InternalAliasList) {  					string internalAlias = ia.HttpAlias.ToLower ();  					if (requestedPathNoScheme.Contains (internalAlias)) {  						//an internal alias has been used.  						//replace this in the comparison charts to do a 'fair' comparison  						requestedPathNoScheme = requestedPathNoScheme.Replace (internalAlias' chosenAlias);  						rawUrlWithHost = rawUrlWithHost.Replace (scheme + internalAlias' scheme + chosenAlias);  						rawUrlWithHostNoScheme = rawUrlWithHostNoScheme.Replace (internalAlias' chosenAlias);  						rawUrlLowerCase = rawUrlLowerCase.Replace (internalAlias' chosenAlias);  						break;  					}  				}  			}  		}  		//DNN-9158: prevent SSL Offloading infinite redirects  		if (!result.IsSecureConnection && result.IsSSLOffloaded && bestFriendlyNoScheme.StartsWith ("https")) {  			bestFriendlyNoScheme = bestFriendlyNoScheme.Replace ("https://"' "http://");  		}  		if (!(bestFriendlyNoScheme == requestedPathNoScheme || bestFriendlyNoScheme == rawUrlWithHost || bestFriendlyNoScheme == rawUrlWithHostNoScheme || bestFriendlyNoScheme == HttpUtility.UrlDecode (requestedPathNoScheme) || bestFriendlyNoScheme == rawUrlLowerCase)) {  			redirected = true;  			result.Action = ActionType.Redirect301;  			result.FinalUrl = bestFriendlyUrl;  			if (result.Reason != RedirectReason.Custom_Tab_Alias && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  				result.Reason = RedirectReason.Unfriendly_Url_2;  			}  			result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + requestedPathNoScheme + " [requested with no scheme]");  			result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHost + " [requested with host and scheme]");  			result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHostNoScheme + " [requested with host' no scheme]");  			result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + HttpUtility.UrlDecode (requestedPathNoScheme) + " [requested and decoded]");  			result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlLowerCase + " [requested raw Url]");  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if (allowRedirect && tab != null) {  	//remove the http alias from the url. Do this by putting the url back together from the request and removing the alias   	string rewritePathOnly;  	if (result.DoRewrite) {  		rewritePathOnly = result.RewritePath;  		var pos = rewritePathOnly.IndexOf ("default.aspx"' StringComparison.OrdinalIgnoreCase);  		if (pos > Null.NullInteger) {  			rewritePathOnly = rewritePathOnly.Substring (pos);  		}  	} else {  		rewritePathOnly = requestUri.Host + requestUri.PathAndQuery;  	}  	//remove the http alias from the path   	var pathAliasEnd = rewritePathOnly.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase);  	var queryStringIndex = rewritePathOnly.IndexOf ("?"' StringComparison.InvariantCultureIgnoreCase);  	if (pathAliasEnd > Null.NullInteger && (queryStringIndex == Null.NullInteger || pathAliasEnd < queryStringIndex)) {  		rewritePathOnly = rewritePathOnly.Substring (pathAliasEnd + result.PortalAlias.HTTPAlias.Length);  	}  	//now check to see if need to remove /default.aspx from the end of the requested Url  	string requestedUrl = fullUrl;  	int requestedUrlAliasEnd = requestedUrl.IndexOf (result.PortalAlias.HTTPAlias' StringComparison.InvariantCultureIgnoreCase) + (result.PortalAlias.HTTPAlias + "/").Length;  	if (requestedUrlAliasEnd > Null.NullInteger) {  		//818 : when a site root is used for a custom page Url' then check for max length within bounds  		if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  			requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  			//12 = default.aspx length  		}  	}  	//what happens here is that the request is reverse-engineered to see if it matches what the friendly Url shoudl have been   	//get what the friendly Url for this tab should be   	string bestFriendlyUrl;  	//819 : leaving /do301/check in Url because not using cleanPath to remove from  	string cleanPath = RedirectTokens.RemoveAnyRedirectTokensAndReasons (rewritePathOnly);  	//string cleanPath = rewritePathOnly.Replace("&do301=check"'"");//remove check parameter if it exists  	//cleanPath = cleanPath.Replace("&do301=true"' "");//don't pass through internal redirect check parameter  	cleanPath = cleanPath.Replace ("&_aumdebug=true"' "");  	//remove debug parameter if it exists  	Match match = RewritePathRx.Match (rewritePathOnly ?? "");  	if (match.Success) {  		//when the pathOnly value ends with '=' it means there is a query string pair with a key and no value  		//make the assumption that this was passed in as a page name OTHER than default page  		string pageName = match.Groups ["parm"].Value;  		//get the last parameter in the list  		cleanPath = cleanPath.Replace (match.Value' "");  		//remove the last parameter from the path  		//generate teh friendly URl name with the last parameter as the page name' not a query string parameter  		bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' pageName + settings.PageExtension' result.HttpAlias' false' settings' Guid.Empty);  	} else {  		bestFriendlyUrl = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' cleanPath' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  	}  	//if the incomign request doesn't match the 'most friendly' url' a 301 Moved Permanently status is returned' along with the friendly url   	//check the bestFriendlyUrl against either the url' or rawUrl (with and without host)   	//in each case' the aumdebug parameter will be searched for and replaced  	var urlDecode = HttpUtility.UrlDecode (requestedUrl);  	if (urlDecode != null) {  		string rawUrlWithHost = StripDebugParameter (urlDecode.ToLower ());  		//string rawUrlWithHost = StripDebugParameter(System.Web.HttpUtility.UrlDecode(scheme + requestUri.Host + requestUri.PathAndQuery).ToLower());  		string rawUrlWithHostNoScheme = StripDebugParameter (rawUrlWithHost.Replace (scheme' ""));  		string bestFriendlyNoScheme = StripDebugParameter (bestFriendlyUrl.ToLower ().Replace (scheme' ""));  		string requestedPathNoScheme = StripDebugParameter (requestUri.AbsoluteUri.Replace (scheme' "").ToLower ());  		string rawUrlLowerCase = StripDebugParameter (requestUri.AbsoluteUri.ToLower ());  		//check to see if just an alias redirect of an internal alias  		var primaryAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (result.PortalId).ToList ();  		if (settings.InternalAliasList != null && settings.InternalAliasList.Count > 0 && primaryAliases.Count > 0) {  			var cpa = primaryAliases.GetAliasByPortalIdAndSettings (result);  			if (cpa != null) {  				string chosenAlias = cpa.HTTPAlias.ToLower ();  				foreach (InternalAlias ia in settings.InternalAliasList) {  					string internalAlias = ia.HttpAlias.ToLower ();  					if (requestedPathNoScheme.Contains (internalAlias)) {  						//an internal alias has been used.  						//replace this in the comparison charts to do a 'fair' comparison  						requestedPathNoScheme = requestedPathNoScheme.Replace (internalAlias' chosenAlias);  						rawUrlWithHost = rawUrlWithHost.Replace (scheme + internalAlias' scheme + chosenAlias);  						rawUrlWithHostNoScheme = rawUrlWithHostNoScheme.Replace (internalAlias' chosenAlias);  						rawUrlLowerCase = rawUrlLowerCase.Replace (internalAlias' chosenAlias);  						break;  					}  				}  			}  		}  		//DNN-9158: prevent SSL Offloading infinite redirects  		if (!result.IsSecureConnection && result.IsSSLOffloaded && bestFriendlyNoScheme.StartsWith ("https")) {  			bestFriendlyNoScheme = bestFriendlyNoScheme.Replace ("https://"' "http://");  		}  		if (!(bestFriendlyNoScheme == requestedPathNoScheme || bestFriendlyNoScheme == rawUrlWithHost || bestFriendlyNoScheme == rawUrlWithHostNoScheme || bestFriendlyNoScheme == HttpUtility.UrlDecode (requestedPathNoScheme) || bestFriendlyNoScheme == rawUrlLowerCase)) {  			redirected = true;  			result.Action = ActionType.Redirect301;  			result.FinalUrl = bestFriendlyUrl;  			if (result.Reason != RedirectReason.Custom_Tab_Alias && result.Reason != RedirectReason.Deleted_Page && result.Reason != RedirectReason.Disabled_Page) {  				result.Reason = RedirectReason.Unfriendly_Url_2;  			}  			result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + requestedPathNoScheme + " [requested with no scheme]");  			result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHost + " [requested with host and scheme]");  			result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlWithHostNoScheme + " [requested with host' no scheme]");  			result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + HttpUtility.UrlDecode (requestedPathNoScheme) + " [requested and decoded]");  			result.DebugMessages.Add ("Compared :" + bestFriendlyNoScheme + " [generated] -> " + rawUrlLowerCase + " [requested raw Url]");  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if (requestedUrlAliasEnd > Null.NullInteger) {  	//818 : when a site root is used for a custom page Url' then check for max length within bounds  	if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  		requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  		//12 = default.aspx length  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if (requestedUrlAliasEnd > Null.NullInteger) {  	//818 : when a site root is used for a custom page Url' then check for max length within bounds  	if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  		requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  		//12 = default.aspx length  	}  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  	requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  	//12 = default.aspx length  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: if ((requestedUrl.Length - requestedUrlAliasEnd) >= 12 && requestedUrl.Substring (requestedUrlAliasEnd).ToLower () == "default.aspx") {  	requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  	//12 = default.aspx length  }  
Magic Number,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForRedirects,The following statement contains a magic number: requestedUrl = requestedUrl.Substring (0' requestedUrl.Length - 12);  
Magic Number,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,CheckPathLength,The following statement contains a magic number: if (friendlyPath.Length >= 260) {  	return Globals.ResolveUrl (originalpath);  }  
Magic Number,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,GetFriendlyQueryString,The following statement contains a magic number: if (!ReferenceEquals (queryStringMatch' Match.Empty)) {  	friendlyPath = queryStringMatch.Groups [1].Value;  	friendlyPath = DefaultPageRx.Replace (friendlyPath' "");  	string queryString = queryStringMatch.Groups [2].Value.Replace ("&amp;"' "&");  	if ((queryString.StartsWith ("?"))) {  		queryString = queryString.TrimStart (Convert.ToChar ("?"));  	}  	string[] nameValuePairs = queryString.Split (Convert.ToChar ("&"));  	for (int i = 0; i <= nameValuePairs.Length - 1; i++) {  		string pathToAppend = "";  		string[] pair = nameValuePairs [i].Split (Convert.ToChar ("="));  		//Add name part of name/value pair  		if ((friendlyPath.EndsWith ("/"))) {  			pathToAppend = pathToAppend + pair [0];  		} else {  			pathToAppend = pathToAppend + "/" + pair [0];  		}  		if ((pair.Length > 1)) {  			if ((!String.IsNullOrEmpty (pair [1]))) {  				if ((Regex.IsMatch (pair [1]' _regexMatch) == false)) {  					//Contains Non-AlphaNumeric Characters  					if ((pair [0].ToLower () == "tabid")) {  						if (Globals.NumberMatchRegex.IsMatch (pair [1])) {  							if (tab != null) {  								int tabId = Convert.ToInt32 (pair [1]);  								if ((tab.TabID == tabId)) {  									if ((string.IsNullOrEmpty (tab.TabPath) == false) && IncludePageName) {  										pathToAppend = tab.TabPath.Replace ("//"' "/").TrimStart ('/') + "/" + pathToAppend;  									}  								}  							}  						}  					}  					pathToAppend = pathToAppend + "/" + HttpUtility.UrlPathEncode (pair [1]);  				} else {  					//Rewrite into URL' contains only alphanumeric and the % or space  					if (String.IsNullOrEmpty (queryStringSpecialChars)) {  						queryStringSpecialChars = pair [0] + "=" + pair [1];  					} else {  						queryStringSpecialChars = queryStringSpecialChars + "&" + pair [0] + "=" + pair [1];  					}  					pathToAppend = "";  				}  			} else {  				pathToAppend = pathToAppend + "/" + HttpUtility.UrlPathEncode ((' ').ToString ());  			}  		}  		friendlyPath = friendlyPath + pathToAppend;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,GetQueryStringDictionary,The following statement contains a magic number: if ((parts.Length == 2)) {  	foreach (string part in parts [1].Split ('&')) {  		string[] keyvalue = part.Split ('=');  		if ((keyvalue.Length == 2)) {  			results [keyvalue [0]] = keyvalue [1];  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,GetQueryStringDictionary,The following statement contains a magic number: if ((parts.Length == 2)) {  	foreach (string part in parts [1].Split ('&')) {  		string[] keyvalue = part.Split ('=');  		if ((keyvalue.Length == 2)) {  			results [keyvalue [0]] = keyvalue [1];  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,GetQueryStringDictionary,The following statement contains a magic number: foreach (string part in parts [1].Split ('&')) {  	string[] keyvalue = part.Split ('=');  	if ((keyvalue.Length == 2)) {  		results [keyvalue [0]] = keyvalue [1];  	}  }  
Magic Number,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,GetQueryStringDictionary,The following statement contains a magic number: if ((keyvalue.Length == 2)) {  	results [keyvalue [0]] = keyvalue [1];  }  
Magic Number,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,FriendlyUrl,The following statement contains a magic number: if ((UrlFormat == UrlFormatType.HumanFriendly)) {  	if ((tab != null)) {  		Dictionary<string' string> queryStringDic = GetQueryStringDictionary (path);  		if ((queryStringDic.Count == 0 || (queryStringDic.Count == 1 && queryStringDic.ContainsKey ("tabid")))) {  			friendlyPath = GetFriendlyAlias ("~/" + tab.TabPath.Replace ("//"' "/").TrimStart ('/') + ".aspx"' portalAlias' true);  		} else if ((queryStringDic.Count == 2 && queryStringDic.ContainsKey ("tabid") && queryStringDic.ContainsKey ("language"))) {  			if (!tab.IsNeutralCulture) {  				friendlyPath = GetFriendlyAlias ("~/" + tab.CultureCode + "/" + tab.TabPath.Replace ("//"' "/").TrimStart ('/') + ".aspx"' portalAlias' true).ToLower ();  			} else {  				friendlyPath = GetFriendlyAlias ("~/" + queryStringDic ["language"] + "/" + tab.TabPath.Replace ("//"' "/").TrimStart ('/') + ".aspx"' portalAlias' true).ToLower ();  			}  		} else {  			if (queryStringDic.ContainsKey ("ctl") && !queryStringDic.ContainsKey ("language")) {  				switch (queryStringDic ["ctl"].ToLowerInvariant ()) {  				case "terms":  					friendlyPath = GetFriendlyAlias ("~/terms.aspx"' portalAlias' true);  					break;  				case "privacy":  					friendlyPath = GetFriendlyAlias ("~/privacy.aspx"' portalAlias' true);  					break;  				case "login":  					friendlyPath = (queryStringDic.ContainsKey ("returnurl")) ? GetFriendlyAlias ("~/login.aspx?ReturnUrl=" + queryStringDic ["returnurl"]' portalAlias' true) : GetFriendlyAlias ("~/login.aspx"' portalAlias' true);  					break;  				case "register":  					friendlyPath = (queryStringDic.ContainsKey ("returnurl")) ? GetFriendlyAlias ("~/register.aspx?returnurl=" + queryStringDic ["returnurl"]' portalAlias' true) : GetFriendlyAlias ("~/register.aspx"' portalAlias' true);  					break;  				default:  					//Return Search engine friendly version  					return GetFriendlyQueryString (tab' GetFriendlyAlias (path' portalAlias' true)' pageName);  				}  			} else {  				//Return Search engine friendly version  				return GetFriendlyQueryString (tab' GetFriendlyAlias (path' portalAlias' true)' pageName);  			}  		}  	}  } else {  	//Return Search engine friendly version  	friendlyPath = GetFriendlyQueryString (tab' GetFriendlyAlias (path' portalAlias' isPagePath)' pageName);  }  
Magic Number,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,FriendlyUrl,The following statement contains a magic number: if ((tab != null)) {  	Dictionary<string' string> queryStringDic = GetQueryStringDictionary (path);  	if ((queryStringDic.Count == 0 || (queryStringDic.Count == 1 && queryStringDic.ContainsKey ("tabid")))) {  		friendlyPath = GetFriendlyAlias ("~/" + tab.TabPath.Replace ("//"' "/").TrimStart ('/') + ".aspx"' portalAlias' true);  	} else if ((queryStringDic.Count == 2 && queryStringDic.ContainsKey ("tabid") && queryStringDic.ContainsKey ("language"))) {  		if (!tab.IsNeutralCulture) {  			friendlyPath = GetFriendlyAlias ("~/" + tab.CultureCode + "/" + tab.TabPath.Replace ("//"' "/").TrimStart ('/') + ".aspx"' portalAlias' true).ToLower ();  		} else {  			friendlyPath = GetFriendlyAlias ("~/" + queryStringDic ["language"] + "/" + tab.TabPath.Replace ("//"' "/").TrimStart ('/') + ".aspx"' portalAlias' true).ToLower ();  		}  	} else {  		if (queryStringDic.ContainsKey ("ctl") && !queryStringDic.ContainsKey ("language")) {  			switch (queryStringDic ["ctl"].ToLowerInvariant ()) {  			case "terms":  				friendlyPath = GetFriendlyAlias ("~/terms.aspx"' portalAlias' true);  				break;  			case "privacy":  				friendlyPath = GetFriendlyAlias ("~/privacy.aspx"' portalAlias' true);  				break;  			case "login":  				friendlyPath = (queryStringDic.ContainsKey ("returnurl")) ? GetFriendlyAlias ("~/login.aspx?ReturnUrl=" + queryStringDic ["returnurl"]' portalAlias' true) : GetFriendlyAlias ("~/login.aspx"' portalAlias' true);  				break;  			case "register":  				friendlyPath = (queryStringDic.ContainsKey ("returnurl")) ? GetFriendlyAlias ("~/register.aspx?returnurl=" + queryStringDic ["returnurl"]' portalAlias' true) : GetFriendlyAlias ("~/register.aspx"' portalAlias' true);  				break;  			default:  				//Return Search engine friendly version  				return GetFriendlyQueryString (tab' GetFriendlyAlias (path' portalAlias' true)' pageName);  			}  		} else {  			//Return Search engine friendly version  			return GetFriendlyQueryString (tab' GetFriendlyAlias (path' portalAlias' true)' pageName);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,FriendlyUrl,The following statement contains a magic number: if ((queryStringDic.Count == 0 || (queryStringDic.Count == 1 && queryStringDic.ContainsKey ("tabid")))) {  	friendlyPath = GetFriendlyAlias ("~/" + tab.TabPath.Replace ("//"' "/").TrimStart ('/') + ".aspx"' portalAlias' true);  } else if ((queryStringDic.Count == 2 && queryStringDic.ContainsKey ("tabid") && queryStringDic.ContainsKey ("language"))) {  	if (!tab.IsNeutralCulture) {  		friendlyPath = GetFriendlyAlias ("~/" + tab.CultureCode + "/" + tab.TabPath.Replace ("//"' "/").TrimStart ('/') + ".aspx"' portalAlias' true).ToLower ();  	} else {  		friendlyPath = GetFriendlyAlias ("~/" + queryStringDic ["language"] + "/" + tab.TabPath.Replace ("//"' "/").TrimStart ('/') + ".aspx"' portalAlias' true).ToLower ();  	}  } else {  	if (queryStringDic.ContainsKey ("ctl") && !queryStringDic.ContainsKey ("language")) {  		switch (queryStringDic ["ctl"].ToLowerInvariant ()) {  		case "terms":  			friendlyPath = GetFriendlyAlias ("~/terms.aspx"' portalAlias' true);  			break;  		case "privacy":  			friendlyPath = GetFriendlyAlias ("~/privacy.aspx"' portalAlias' true);  			break;  		case "login":  			friendlyPath = (queryStringDic.ContainsKey ("returnurl")) ? GetFriendlyAlias ("~/login.aspx?ReturnUrl=" + queryStringDic ["returnurl"]' portalAlias' true) : GetFriendlyAlias ("~/login.aspx"' portalAlias' true);  			break;  		case "register":  			friendlyPath = (queryStringDic.ContainsKey ("returnurl")) ? GetFriendlyAlias ("~/register.aspx?returnurl=" + queryStringDic ["returnurl"]' portalAlias' true) : GetFriendlyAlias ("~/register.aspx"' portalAlias' true);  			break;  		default:  			//Return Search engine friendly version  			return GetFriendlyQueryString (tab' GetFriendlyAlias (path' portalAlias' true)' pageName);  		}  	} else {  		//Return Search engine friendly version  		return GetFriendlyQueryString (tab' GetFriendlyAlias (path' portalAlias' true)' pageName);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,BasicFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\BasicFriendlyUrlProvider.cs,FriendlyUrl,The following statement contains a magic number: if ((queryStringDic.Count == 2 && queryStringDic.ContainsKey ("tabid") && queryStringDic.ContainsKey ("language"))) {  	if (!tab.IsNeutralCulture) {  		friendlyPath = GetFriendlyAlias ("~/" + tab.CultureCode + "/" + tab.TabPath.Replace ("//"' "/").TrimStart ('/') + ".aspx"' portalAlias' true).ToLower ();  	} else {  		friendlyPath = GetFriendlyAlias ("~/" + queryStringDic ["language"] + "/" + tab.TabPath.Replace ("//"' "/").TrimStart ('/') + ".aspx"' portalAlias' true).ToLower ();  	}  } else {  	if (queryStringDic.ContainsKey ("ctl") && !queryStringDic.ContainsKey ("language")) {  		switch (queryStringDic ["ctl"].ToLowerInvariant ()) {  		case "terms":  			friendlyPath = GetFriendlyAlias ("~/terms.aspx"' portalAlias' true);  			break;  		case "privacy":  			friendlyPath = GetFriendlyAlias ("~/privacy.aspx"' portalAlias' true);  			break;  		case "login":  			friendlyPath = (queryStringDic.ContainsKey ("returnurl")) ? GetFriendlyAlias ("~/login.aspx?ReturnUrl=" + queryStringDic ["returnurl"]' portalAlias' true) : GetFriendlyAlias ("~/login.aspx"' portalAlias' true);  			break;  		case "register":  			friendlyPath = (queryStringDic.ContainsKey ("returnurl")) ? GetFriendlyAlias ("~/register.aspx?returnurl=" + queryStringDic ["returnurl"]' portalAlias' true) : GetFriendlyAlias ("~/register.aspx"' portalAlias' true);  			break;  		default:  			//Return Search engine friendly version  			return GetFriendlyQueryString (tab' GetFriendlyAlias (path' portalAlias' true)' pageName);  		}  	} else {  		//Return Search engine friendly version  		return GetFriendlyQueryString (tab' GetFriendlyAlias (path' portalAlias' true)' pageName);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (File.Exists (fileName)) {  	var rdr = new XmlTextReader (fileName);  	while (rdr.Read ()) {  		switch (rdr.NodeType) {  		case XmlNodeType.Element:  			if (rdr.Name == "parameterRedirect") {  				var tabMessages = new List<string> ();  				int actionCount = 0;  				//now set up the action  				string portalIdRaw = rdr.GetAttribute ("rulePortalId");  				if (string.IsNullOrEmpty (portalIdRaw)) {  					portalIdRaw = rdr.GetAttribute ("portalId");  				}  				int rulePortalId = -1;  				if (portalIdRaw != null) {  					Int32.TryParse (portalIdRaw' out rulePortalId);  				}  				if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal  				 {  					string tabIdRaw = rdr.GetAttribute ("tabIds");  					string tabNames = rdr.GetAttribute ("tabNames");  					string name = rdr.GetAttribute ("name");  					string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  					string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  					string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  					bool fromDefault;  					bool fromSiteRoot;  					bool changeToSiteRoot;  					bool.TryParse (fromDefaultRaw' out fromDefault);  					bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  					bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  					List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  					foreach (int tabId in tabIds) {  						var action = new ParameterRedirectAction {  							PortalId = portalId'  							LookFor = rdr.GetAttribute ("lookFor")'  							RedirectTo = rdr.GetAttribute ("redirectTo")'  							Name = name'  							Action = rdr.GetAttribute ("action")'  							ChangeToSiteRoot = changeToSiteRoot'  							TabId = tabId  						};  						if (fromDefault) {  							//check for 'fromDefault' attribute  							action.ForDefaultPage = true;  							action.TabId = -2;  						} else {  							//or support the older convention' which was to include a tabid of -2  							action.ForDefaultPage = tabId == -2;  						}  						if (fromSiteRoot) {  							action.TabId = -3;  							//site root marker  						}  						List<ParameterRedirectAction> tabActionCol;  						if (actions.ContainsKey (action.TabId)) {  							tabActionCol = actions [action.TabId];  						} else {  							tabActionCol = new List<ParameterRedirectAction> ();  							actions.Add (action.TabId' tabActionCol);  						}  						tabActionCol.Add (action);  						actionCount++;  					}  					messages.Add (name + " redirect actions added:" + actionCount.ToString ());  				}  				if (tabMessages.Count > 0) {  					messages.AddRange (tabMessages);  				}  			}  			break;  		case XmlNodeType.EndElement:  			break;  		}  	}  	rdr.Close ();  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (File.Exists (fileName)) {  	var rdr = new XmlTextReader (fileName);  	while (rdr.Read ()) {  		switch (rdr.NodeType) {  		case XmlNodeType.Element:  			if (rdr.Name == "parameterRedirect") {  				var tabMessages = new List<string> ();  				int actionCount = 0;  				//now set up the action  				string portalIdRaw = rdr.GetAttribute ("rulePortalId");  				if (string.IsNullOrEmpty (portalIdRaw)) {  					portalIdRaw = rdr.GetAttribute ("portalId");  				}  				int rulePortalId = -1;  				if (portalIdRaw != null) {  					Int32.TryParse (portalIdRaw' out rulePortalId);  				}  				if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal  				 {  					string tabIdRaw = rdr.GetAttribute ("tabIds");  					string tabNames = rdr.GetAttribute ("tabNames");  					string name = rdr.GetAttribute ("name");  					string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  					string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  					string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  					bool fromDefault;  					bool fromSiteRoot;  					bool changeToSiteRoot;  					bool.TryParse (fromDefaultRaw' out fromDefault);  					bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  					bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  					List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  					foreach (int tabId in tabIds) {  						var action = new ParameterRedirectAction {  							PortalId = portalId'  							LookFor = rdr.GetAttribute ("lookFor")'  							RedirectTo = rdr.GetAttribute ("redirectTo")'  							Name = name'  							Action = rdr.GetAttribute ("action")'  							ChangeToSiteRoot = changeToSiteRoot'  							TabId = tabId  						};  						if (fromDefault) {  							//check for 'fromDefault' attribute  							action.ForDefaultPage = true;  							action.TabId = -2;  						} else {  							//or support the older convention' which was to include a tabid of -2  							action.ForDefaultPage = tabId == -2;  						}  						if (fromSiteRoot) {  							action.TabId = -3;  							//site root marker  						}  						List<ParameterRedirectAction> tabActionCol;  						if (actions.ContainsKey (action.TabId)) {  							tabActionCol = actions [action.TabId];  						} else {  							tabActionCol = new List<ParameterRedirectAction> ();  							actions.Add (action.TabId' tabActionCol);  						}  						tabActionCol.Add (action);  						actionCount++;  					}  					messages.Add (name + " redirect actions added:" + actionCount.ToString ());  				}  				if (tabMessages.Count > 0) {  					messages.AddRange (tabMessages);  				}  			}  			break;  		case XmlNodeType.EndElement:  			break;  		}  	}  	rdr.Close ();  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (File.Exists (fileName)) {  	var rdr = new XmlTextReader (fileName);  	while (rdr.Read ()) {  		switch (rdr.NodeType) {  		case XmlNodeType.Element:  			if (rdr.Name == "parameterRedirect") {  				var tabMessages = new List<string> ();  				int actionCount = 0;  				//now set up the action  				string portalIdRaw = rdr.GetAttribute ("rulePortalId");  				if (string.IsNullOrEmpty (portalIdRaw)) {  					portalIdRaw = rdr.GetAttribute ("portalId");  				}  				int rulePortalId = -1;  				if (portalIdRaw != null) {  					Int32.TryParse (portalIdRaw' out rulePortalId);  				}  				if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal  				 {  					string tabIdRaw = rdr.GetAttribute ("tabIds");  					string tabNames = rdr.GetAttribute ("tabNames");  					string name = rdr.GetAttribute ("name");  					string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  					string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  					string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  					bool fromDefault;  					bool fromSiteRoot;  					bool changeToSiteRoot;  					bool.TryParse (fromDefaultRaw' out fromDefault);  					bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  					bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  					List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  					foreach (int tabId in tabIds) {  						var action = new ParameterRedirectAction {  							PortalId = portalId'  							LookFor = rdr.GetAttribute ("lookFor")'  							RedirectTo = rdr.GetAttribute ("redirectTo")'  							Name = name'  							Action = rdr.GetAttribute ("action")'  							ChangeToSiteRoot = changeToSiteRoot'  							TabId = tabId  						};  						if (fromDefault) {  							//check for 'fromDefault' attribute  							action.ForDefaultPage = true;  							action.TabId = -2;  						} else {  							//or support the older convention' which was to include a tabid of -2  							action.ForDefaultPage = tabId == -2;  						}  						if (fromSiteRoot) {  							action.TabId = -3;  							//site root marker  						}  						List<ParameterRedirectAction> tabActionCol;  						if (actions.ContainsKey (action.TabId)) {  							tabActionCol = actions [action.TabId];  						} else {  							tabActionCol = new List<ParameterRedirectAction> ();  							actions.Add (action.TabId' tabActionCol);  						}  						tabActionCol.Add (action);  						actionCount++;  					}  					messages.Add (name + " redirect actions added:" + actionCount.ToString ());  				}  				if (tabMessages.Count > 0) {  					messages.AddRange (tabMessages);  				}  			}  			break;  		case XmlNodeType.EndElement:  			break;  		}  	}  	rdr.Close ();  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: while (rdr.Read ()) {  	switch (rdr.NodeType) {  	case XmlNodeType.Element:  		if (rdr.Name == "parameterRedirect") {  			var tabMessages = new List<string> ();  			int actionCount = 0;  			//now set up the action  			string portalIdRaw = rdr.GetAttribute ("rulePortalId");  			if (string.IsNullOrEmpty (portalIdRaw)) {  				portalIdRaw = rdr.GetAttribute ("portalId");  			}  			int rulePortalId = -1;  			if (portalIdRaw != null) {  				Int32.TryParse (portalIdRaw' out rulePortalId);  			}  			if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal  			 {  				string tabIdRaw = rdr.GetAttribute ("tabIds");  				string tabNames = rdr.GetAttribute ("tabNames");  				string name = rdr.GetAttribute ("name");  				string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  				string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  				string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  				bool fromDefault;  				bool fromSiteRoot;  				bool changeToSiteRoot;  				bool.TryParse (fromDefaultRaw' out fromDefault);  				bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  				bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  				List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  				foreach (int tabId in tabIds) {  					var action = new ParameterRedirectAction {  						PortalId = portalId'  						LookFor = rdr.GetAttribute ("lookFor")'  						RedirectTo = rdr.GetAttribute ("redirectTo")'  						Name = name'  						Action = rdr.GetAttribute ("action")'  						ChangeToSiteRoot = changeToSiteRoot'  						TabId = tabId  					};  					if (fromDefault) {  						//check for 'fromDefault' attribute  						action.ForDefaultPage = true;  						action.TabId = -2;  					} else {  						//or support the older convention' which was to include a tabid of -2  						action.ForDefaultPage = tabId == -2;  					}  					if (fromSiteRoot) {  						action.TabId = -3;  						//site root marker  					}  					List<ParameterRedirectAction> tabActionCol;  					if (actions.ContainsKey (action.TabId)) {  						tabActionCol = actions [action.TabId];  					} else {  						tabActionCol = new List<ParameterRedirectAction> ();  						actions.Add (action.TabId' tabActionCol);  					}  					tabActionCol.Add (action);  					actionCount++;  				}  				messages.Add (name + " redirect actions added:" + actionCount.ToString ());  			}  			if (tabMessages.Count > 0) {  				messages.AddRange (tabMessages);  			}  		}  		break;  	case XmlNodeType.EndElement:  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: while (rdr.Read ()) {  	switch (rdr.NodeType) {  	case XmlNodeType.Element:  		if (rdr.Name == "parameterRedirect") {  			var tabMessages = new List<string> ();  			int actionCount = 0;  			//now set up the action  			string portalIdRaw = rdr.GetAttribute ("rulePortalId");  			if (string.IsNullOrEmpty (portalIdRaw)) {  				portalIdRaw = rdr.GetAttribute ("portalId");  			}  			int rulePortalId = -1;  			if (portalIdRaw != null) {  				Int32.TryParse (portalIdRaw' out rulePortalId);  			}  			if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal  			 {  				string tabIdRaw = rdr.GetAttribute ("tabIds");  				string tabNames = rdr.GetAttribute ("tabNames");  				string name = rdr.GetAttribute ("name");  				string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  				string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  				string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  				bool fromDefault;  				bool fromSiteRoot;  				bool changeToSiteRoot;  				bool.TryParse (fromDefaultRaw' out fromDefault);  				bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  				bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  				List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  				foreach (int tabId in tabIds) {  					var action = new ParameterRedirectAction {  						PortalId = portalId'  						LookFor = rdr.GetAttribute ("lookFor")'  						RedirectTo = rdr.GetAttribute ("redirectTo")'  						Name = name'  						Action = rdr.GetAttribute ("action")'  						ChangeToSiteRoot = changeToSiteRoot'  						TabId = tabId  					};  					if (fromDefault) {  						//check for 'fromDefault' attribute  						action.ForDefaultPage = true;  						action.TabId = -2;  					} else {  						//or support the older convention' which was to include a tabid of -2  						action.ForDefaultPage = tabId == -2;  					}  					if (fromSiteRoot) {  						action.TabId = -3;  						//site root marker  					}  					List<ParameterRedirectAction> tabActionCol;  					if (actions.ContainsKey (action.TabId)) {  						tabActionCol = actions [action.TabId];  					} else {  						tabActionCol = new List<ParameterRedirectAction> ();  						actions.Add (action.TabId' tabActionCol);  					}  					tabActionCol.Add (action);  					actionCount++;  				}  				messages.Add (name + " redirect actions added:" + actionCount.ToString ());  			}  			if (tabMessages.Count > 0) {  				messages.AddRange (tabMessages);  			}  		}  		break;  	case XmlNodeType.EndElement:  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: while (rdr.Read ()) {  	switch (rdr.NodeType) {  	case XmlNodeType.Element:  		if (rdr.Name == "parameterRedirect") {  			var tabMessages = new List<string> ();  			int actionCount = 0;  			//now set up the action  			string portalIdRaw = rdr.GetAttribute ("rulePortalId");  			if (string.IsNullOrEmpty (portalIdRaw)) {  				portalIdRaw = rdr.GetAttribute ("portalId");  			}  			int rulePortalId = -1;  			if (portalIdRaw != null) {  				Int32.TryParse (portalIdRaw' out rulePortalId);  			}  			if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal  			 {  				string tabIdRaw = rdr.GetAttribute ("tabIds");  				string tabNames = rdr.GetAttribute ("tabNames");  				string name = rdr.GetAttribute ("name");  				string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  				string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  				string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  				bool fromDefault;  				bool fromSiteRoot;  				bool changeToSiteRoot;  				bool.TryParse (fromDefaultRaw' out fromDefault);  				bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  				bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  				List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  				foreach (int tabId in tabIds) {  					var action = new ParameterRedirectAction {  						PortalId = portalId'  						LookFor = rdr.GetAttribute ("lookFor")'  						RedirectTo = rdr.GetAttribute ("redirectTo")'  						Name = name'  						Action = rdr.GetAttribute ("action")'  						ChangeToSiteRoot = changeToSiteRoot'  						TabId = tabId  					};  					if (fromDefault) {  						//check for 'fromDefault' attribute  						action.ForDefaultPage = true;  						action.TabId = -2;  					} else {  						//or support the older convention' which was to include a tabid of -2  						action.ForDefaultPage = tabId == -2;  					}  					if (fromSiteRoot) {  						action.TabId = -3;  						//site root marker  					}  					List<ParameterRedirectAction> tabActionCol;  					if (actions.ContainsKey (action.TabId)) {  						tabActionCol = actions [action.TabId];  					} else {  						tabActionCol = new List<ParameterRedirectAction> ();  						actions.Add (action.TabId' tabActionCol);  					}  					tabActionCol.Add (action);  					actionCount++;  				}  				messages.Add (name + " redirect actions added:" + actionCount.ToString ());  			}  			if (tabMessages.Count > 0) {  				messages.AddRange (tabMessages);  			}  		}  		break;  	case XmlNodeType.EndElement:  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: switch (rdr.NodeType) {  case XmlNodeType.Element:  	if (rdr.Name == "parameterRedirect") {  		var tabMessages = new List<string> ();  		int actionCount = 0;  		//now set up the action  		string portalIdRaw = rdr.GetAttribute ("rulePortalId");  		if (string.IsNullOrEmpty (portalIdRaw)) {  			portalIdRaw = rdr.GetAttribute ("portalId");  		}  		int rulePortalId = -1;  		if (portalIdRaw != null) {  			Int32.TryParse (portalIdRaw' out rulePortalId);  		}  		if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal  		 {  			string tabIdRaw = rdr.GetAttribute ("tabIds");  			string tabNames = rdr.GetAttribute ("tabNames");  			string name = rdr.GetAttribute ("name");  			string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  			string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  			string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  			bool fromDefault;  			bool fromSiteRoot;  			bool changeToSiteRoot;  			bool.TryParse (fromDefaultRaw' out fromDefault);  			bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  			bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  			List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  			foreach (int tabId in tabIds) {  				var action = new ParameterRedirectAction {  					PortalId = portalId'  					LookFor = rdr.GetAttribute ("lookFor")'  					RedirectTo = rdr.GetAttribute ("redirectTo")'  					Name = name'  					Action = rdr.GetAttribute ("action")'  					ChangeToSiteRoot = changeToSiteRoot'  					TabId = tabId  				};  				if (fromDefault) {  					//check for 'fromDefault' attribute  					action.ForDefaultPage = true;  					action.TabId = -2;  				} else {  					//or support the older convention' which was to include a tabid of -2  					action.ForDefaultPage = tabId == -2;  				}  				if (fromSiteRoot) {  					action.TabId = -3;  					//site root marker  				}  				List<ParameterRedirectAction> tabActionCol;  				if (actions.ContainsKey (action.TabId)) {  					tabActionCol = actions [action.TabId];  				} else {  					tabActionCol = new List<ParameterRedirectAction> ();  					actions.Add (action.TabId' tabActionCol);  				}  				tabActionCol.Add (action);  				actionCount++;  			}  			messages.Add (name + " redirect actions added:" + actionCount.ToString ());  		}  		if (tabMessages.Count > 0) {  			messages.AddRange (tabMessages);  		}  	}  	break;  case XmlNodeType.EndElement:  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: switch (rdr.NodeType) {  case XmlNodeType.Element:  	if (rdr.Name == "parameterRedirect") {  		var tabMessages = new List<string> ();  		int actionCount = 0;  		//now set up the action  		string portalIdRaw = rdr.GetAttribute ("rulePortalId");  		if (string.IsNullOrEmpty (portalIdRaw)) {  			portalIdRaw = rdr.GetAttribute ("portalId");  		}  		int rulePortalId = -1;  		if (portalIdRaw != null) {  			Int32.TryParse (portalIdRaw' out rulePortalId);  		}  		if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal  		 {  			string tabIdRaw = rdr.GetAttribute ("tabIds");  			string tabNames = rdr.GetAttribute ("tabNames");  			string name = rdr.GetAttribute ("name");  			string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  			string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  			string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  			bool fromDefault;  			bool fromSiteRoot;  			bool changeToSiteRoot;  			bool.TryParse (fromDefaultRaw' out fromDefault);  			bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  			bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  			List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  			foreach (int tabId in tabIds) {  				var action = new ParameterRedirectAction {  					PortalId = portalId'  					LookFor = rdr.GetAttribute ("lookFor")'  					RedirectTo = rdr.GetAttribute ("redirectTo")'  					Name = name'  					Action = rdr.GetAttribute ("action")'  					ChangeToSiteRoot = changeToSiteRoot'  					TabId = tabId  				};  				if (fromDefault) {  					//check for 'fromDefault' attribute  					action.ForDefaultPage = true;  					action.TabId = -2;  				} else {  					//or support the older convention' which was to include a tabid of -2  					action.ForDefaultPage = tabId == -2;  				}  				if (fromSiteRoot) {  					action.TabId = -3;  					//site root marker  				}  				List<ParameterRedirectAction> tabActionCol;  				if (actions.ContainsKey (action.TabId)) {  					tabActionCol = actions [action.TabId];  				} else {  					tabActionCol = new List<ParameterRedirectAction> ();  					actions.Add (action.TabId' tabActionCol);  				}  				tabActionCol.Add (action);  				actionCount++;  			}  			messages.Add (name + " redirect actions added:" + actionCount.ToString ());  		}  		if (tabMessages.Count > 0) {  			messages.AddRange (tabMessages);  		}  	}  	break;  case XmlNodeType.EndElement:  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: switch (rdr.NodeType) {  case XmlNodeType.Element:  	if (rdr.Name == "parameterRedirect") {  		var tabMessages = new List<string> ();  		int actionCount = 0;  		//now set up the action  		string portalIdRaw = rdr.GetAttribute ("rulePortalId");  		if (string.IsNullOrEmpty (portalIdRaw)) {  			portalIdRaw = rdr.GetAttribute ("portalId");  		}  		int rulePortalId = -1;  		if (portalIdRaw != null) {  			Int32.TryParse (portalIdRaw' out rulePortalId);  		}  		if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal  		 {  			string tabIdRaw = rdr.GetAttribute ("tabIds");  			string tabNames = rdr.GetAttribute ("tabNames");  			string name = rdr.GetAttribute ("name");  			string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  			string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  			string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  			bool fromDefault;  			bool fromSiteRoot;  			bool changeToSiteRoot;  			bool.TryParse (fromDefaultRaw' out fromDefault);  			bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  			bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  			List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  			foreach (int tabId in tabIds) {  				var action = new ParameterRedirectAction {  					PortalId = portalId'  					LookFor = rdr.GetAttribute ("lookFor")'  					RedirectTo = rdr.GetAttribute ("redirectTo")'  					Name = name'  					Action = rdr.GetAttribute ("action")'  					ChangeToSiteRoot = changeToSiteRoot'  					TabId = tabId  				};  				if (fromDefault) {  					//check for 'fromDefault' attribute  					action.ForDefaultPage = true;  					action.TabId = -2;  				} else {  					//or support the older convention' which was to include a tabid of -2  					action.ForDefaultPage = tabId == -2;  				}  				if (fromSiteRoot) {  					action.TabId = -3;  					//site root marker  				}  				List<ParameterRedirectAction> tabActionCol;  				if (actions.ContainsKey (action.TabId)) {  					tabActionCol = actions [action.TabId];  				} else {  					tabActionCol = new List<ParameterRedirectAction> ();  					actions.Add (action.TabId' tabActionCol);  				}  				tabActionCol.Add (action);  				actionCount++;  			}  			messages.Add (name + " redirect actions added:" + actionCount.ToString ());  		}  		if (tabMessages.Count > 0) {  			messages.AddRange (tabMessages);  		}  	}  	break;  case XmlNodeType.EndElement:  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (rdr.Name == "parameterRedirect") {  	var tabMessages = new List<string> ();  	int actionCount = 0;  	//now set up the action  	string portalIdRaw = rdr.GetAttribute ("rulePortalId");  	if (string.IsNullOrEmpty (portalIdRaw)) {  		portalIdRaw = rdr.GetAttribute ("portalId");  	}  	int rulePortalId = -1;  	if (portalIdRaw != null) {  		Int32.TryParse (portalIdRaw' out rulePortalId);  	}  	if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal  	 {  		string tabIdRaw = rdr.GetAttribute ("tabIds");  		string tabNames = rdr.GetAttribute ("tabNames");  		string name = rdr.GetAttribute ("name");  		string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  		string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  		string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  		bool fromDefault;  		bool fromSiteRoot;  		bool changeToSiteRoot;  		bool.TryParse (fromDefaultRaw' out fromDefault);  		bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  		bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  		List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  		foreach (int tabId in tabIds) {  			var action = new ParameterRedirectAction {  				PortalId = portalId'  				LookFor = rdr.GetAttribute ("lookFor")'  				RedirectTo = rdr.GetAttribute ("redirectTo")'  				Name = name'  				Action = rdr.GetAttribute ("action")'  				ChangeToSiteRoot = changeToSiteRoot'  				TabId = tabId  			};  			if (fromDefault) {  				//check for 'fromDefault' attribute  				action.ForDefaultPage = true;  				action.TabId = -2;  			} else {  				//or support the older convention' which was to include a tabid of -2  				action.ForDefaultPage = tabId == -2;  			}  			if (fromSiteRoot) {  				action.TabId = -3;  				//site root marker  			}  			List<ParameterRedirectAction> tabActionCol;  			if (actions.ContainsKey (action.TabId)) {  				tabActionCol = actions [action.TabId];  			} else {  				tabActionCol = new List<ParameterRedirectAction> ();  				actions.Add (action.TabId' tabActionCol);  			}  			tabActionCol.Add (action);  			actionCount++;  		}  		messages.Add (name + " redirect actions added:" + actionCount.ToString ());  	}  	if (tabMessages.Count > 0) {  		messages.AddRange (tabMessages);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (rdr.Name == "parameterRedirect") {  	var tabMessages = new List<string> ();  	int actionCount = 0;  	//now set up the action  	string portalIdRaw = rdr.GetAttribute ("rulePortalId");  	if (string.IsNullOrEmpty (portalIdRaw)) {  		portalIdRaw = rdr.GetAttribute ("portalId");  	}  	int rulePortalId = -1;  	if (portalIdRaw != null) {  		Int32.TryParse (portalIdRaw' out rulePortalId);  	}  	if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal  	 {  		string tabIdRaw = rdr.GetAttribute ("tabIds");  		string tabNames = rdr.GetAttribute ("tabNames");  		string name = rdr.GetAttribute ("name");  		string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  		string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  		string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  		bool fromDefault;  		bool fromSiteRoot;  		bool changeToSiteRoot;  		bool.TryParse (fromDefaultRaw' out fromDefault);  		bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  		bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  		List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  		foreach (int tabId in tabIds) {  			var action = new ParameterRedirectAction {  				PortalId = portalId'  				LookFor = rdr.GetAttribute ("lookFor")'  				RedirectTo = rdr.GetAttribute ("redirectTo")'  				Name = name'  				Action = rdr.GetAttribute ("action")'  				ChangeToSiteRoot = changeToSiteRoot'  				TabId = tabId  			};  			if (fromDefault) {  				//check for 'fromDefault' attribute  				action.ForDefaultPage = true;  				action.TabId = -2;  			} else {  				//or support the older convention' which was to include a tabid of -2  				action.ForDefaultPage = tabId == -2;  			}  			if (fromSiteRoot) {  				action.TabId = -3;  				//site root marker  			}  			List<ParameterRedirectAction> tabActionCol;  			if (actions.ContainsKey (action.TabId)) {  				tabActionCol = actions [action.TabId];  			} else {  				tabActionCol = new List<ParameterRedirectAction> ();  				actions.Add (action.TabId' tabActionCol);  			}  			tabActionCol.Add (action);  			actionCount++;  		}  		messages.Add (name + " redirect actions added:" + actionCount.ToString ());  	}  	if (tabMessages.Count > 0) {  		messages.AddRange (tabMessages);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (rdr.Name == "parameterRedirect") {  	var tabMessages = new List<string> ();  	int actionCount = 0;  	//now set up the action  	string portalIdRaw = rdr.GetAttribute ("rulePortalId");  	if (string.IsNullOrEmpty (portalIdRaw)) {  		portalIdRaw = rdr.GetAttribute ("portalId");  	}  	int rulePortalId = -1;  	if (portalIdRaw != null) {  		Int32.TryParse (portalIdRaw' out rulePortalId);  	}  	if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal  	 {  		string tabIdRaw = rdr.GetAttribute ("tabIds");  		string tabNames = rdr.GetAttribute ("tabNames");  		string name = rdr.GetAttribute ("name");  		string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  		string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  		string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  		bool fromDefault;  		bool fromSiteRoot;  		bool changeToSiteRoot;  		bool.TryParse (fromDefaultRaw' out fromDefault);  		bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  		bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  		List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  		foreach (int tabId in tabIds) {  			var action = new ParameterRedirectAction {  				PortalId = portalId'  				LookFor = rdr.GetAttribute ("lookFor")'  				RedirectTo = rdr.GetAttribute ("redirectTo")'  				Name = name'  				Action = rdr.GetAttribute ("action")'  				ChangeToSiteRoot = changeToSiteRoot'  				TabId = tabId  			};  			if (fromDefault) {  				//check for 'fromDefault' attribute  				action.ForDefaultPage = true;  				action.TabId = -2;  			} else {  				//or support the older convention' which was to include a tabid of -2  				action.ForDefaultPage = tabId == -2;  			}  			if (fromSiteRoot) {  				action.TabId = -3;  				//site root marker  			}  			List<ParameterRedirectAction> tabActionCol;  			if (actions.ContainsKey (action.TabId)) {  				tabActionCol = actions [action.TabId];  			} else {  				tabActionCol = new List<ParameterRedirectAction> ();  				actions.Add (action.TabId' tabActionCol);  			}  			tabActionCol.Add (action);  			actionCount++;  		}  		messages.Add (name + " redirect actions added:" + actionCount.ToString ());  	}  	if (tabMessages.Count > 0) {  		messages.AddRange (tabMessages);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal   {  	string tabIdRaw = rdr.GetAttribute ("tabIds");  	string tabNames = rdr.GetAttribute ("tabNames");  	string name = rdr.GetAttribute ("name");  	string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  	string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  	string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  	bool fromDefault;  	bool fromSiteRoot;  	bool changeToSiteRoot;  	bool.TryParse (fromDefaultRaw' out fromDefault);  	bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  	bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  	List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  	foreach (int tabId in tabIds) {  		var action = new ParameterRedirectAction {  			PortalId = portalId'  			LookFor = rdr.GetAttribute ("lookFor")'  			RedirectTo = rdr.GetAttribute ("redirectTo")'  			Name = name'  			Action = rdr.GetAttribute ("action")'  			ChangeToSiteRoot = changeToSiteRoot'  			TabId = tabId  		};  		if (fromDefault) {  			//check for 'fromDefault' attribute  			action.ForDefaultPage = true;  			action.TabId = -2;  		} else {  			//or support the older convention' which was to include a tabid of -2  			action.ForDefaultPage = tabId == -2;  		}  		if (fromSiteRoot) {  			action.TabId = -3;  			//site root marker  		}  		List<ParameterRedirectAction> tabActionCol;  		if (actions.ContainsKey (action.TabId)) {  			tabActionCol = actions [action.TabId];  		} else {  			tabActionCol = new List<ParameterRedirectAction> ();  			actions.Add (action.TabId' tabActionCol);  		}  		tabActionCol.Add (action);  		actionCount++;  	}  	messages.Add (name + " redirect actions added:" + actionCount.ToString ());  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal   {  	string tabIdRaw = rdr.GetAttribute ("tabIds");  	string tabNames = rdr.GetAttribute ("tabNames");  	string name = rdr.GetAttribute ("name");  	string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  	string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  	string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  	bool fromDefault;  	bool fromSiteRoot;  	bool changeToSiteRoot;  	bool.TryParse (fromDefaultRaw' out fromDefault);  	bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  	bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  	List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  	foreach (int tabId in tabIds) {  		var action = new ParameterRedirectAction {  			PortalId = portalId'  			LookFor = rdr.GetAttribute ("lookFor")'  			RedirectTo = rdr.GetAttribute ("redirectTo")'  			Name = name'  			Action = rdr.GetAttribute ("action")'  			ChangeToSiteRoot = changeToSiteRoot'  			TabId = tabId  		};  		if (fromDefault) {  			//check for 'fromDefault' attribute  			action.ForDefaultPage = true;  			action.TabId = -2;  		} else {  			//or support the older convention' which was to include a tabid of -2  			action.ForDefaultPage = tabId == -2;  		}  		if (fromSiteRoot) {  			action.TabId = -3;  			//site root marker  		}  		List<ParameterRedirectAction> tabActionCol;  		if (actions.ContainsKey (action.TabId)) {  			tabActionCol = actions [action.TabId];  		} else {  			tabActionCol = new List<ParameterRedirectAction> ();  			actions.Add (action.TabId' tabActionCol);  		}  		tabActionCol.Add (action);  		actionCount++;  	}  	messages.Add (name + " redirect actions added:" + actionCount.ToString ());  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal   {  	string tabIdRaw = rdr.GetAttribute ("tabIds");  	string tabNames = rdr.GetAttribute ("tabNames");  	string name = rdr.GetAttribute ("name");  	string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  	string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  	string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  	bool fromDefault;  	bool fromSiteRoot;  	bool changeToSiteRoot;  	bool.TryParse (fromDefaultRaw' out fromDefault);  	bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  	bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  	List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  	foreach (int tabId in tabIds) {  		var action = new ParameterRedirectAction {  			PortalId = portalId'  			LookFor = rdr.GetAttribute ("lookFor")'  			RedirectTo = rdr.GetAttribute ("redirectTo")'  			Name = name'  			Action = rdr.GetAttribute ("action")'  			ChangeToSiteRoot = changeToSiteRoot'  			TabId = tabId  		};  		if (fromDefault) {  			//check for 'fromDefault' attribute  			action.ForDefaultPage = true;  			action.TabId = -2;  		} else {  			//or support the older convention' which was to include a tabid of -2  			action.ForDefaultPage = tabId == -2;  		}  		if (fromSiteRoot) {  			action.TabId = -3;  			//site root marker  		}  		List<ParameterRedirectAction> tabActionCol;  		if (actions.ContainsKey (action.TabId)) {  			tabActionCol = actions [action.TabId];  		} else {  			tabActionCol = new List<ParameterRedirectAction> ();  			actions.Add (action.TabId' tabActionCol);  		}  		tabActionCol.Add (action);  		actionCount++;  	}  	messages.Add (name + " redirect actions added:" + actionCount.ToString ());  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: foreach (int tabId in tabIds) {  	var action = new ParameterRedirectAction {  		PortalId = portalId'  		LookFor = rdr.GetAttribute ("lookFor")'  		RedirectTo = rdr.GetAttribute ("redirectTo")'  		Name = name'  		Action = rdr.GetAttribute ("action")'  		ChangeToSiteRoot = changeToSiteRoot'  		TabId = tabId  	};  	if (fromDefault) {  		//check for 'fromDefault' attribute  		action.ForDefaultPage = true;  		action.TabId = -2;  	} else {  		//or support the older convention' which was to include a tabid of -2  		action.ForDefaultPage = tabId == -2;  	}  	if (fromSiteRoot) {  		action.TabId = -3;  		//site root marker  	}  	List<ParameterRedirectAction> tabActionCol;  	if (actions.ContainsKey (action.TabId)) {  		tabActionCol = actions [action.TabId];  	} else {  		tabActionCol = new List<ParameterRedirectAction> ();  		actions.Add (action.TabId' tabActionCol);  	}  	tabActionCol.Add (action);  	actionCount++;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: foreach (int tabId in tabIds) {  	var action = new ParameterRedirectAction {  		PortalId = portalId'  		LookFor = rdr.GetAttribute ("lookFor")'  		RedirectTo = rdr.GetAttribute ("redirectTo")'  		Name = name'  		Action = rdr.GetAttribute ("action")'  		ChangeToSiteRoot = changeToSiteRoot'  		TabId = tabId  	};  	if (fromDefault) {  		//check for 'fromDefault' attribute  		action.ForDefaultPage = true;  		action.TabId = -2;  	} else {  		//or support the older convention' which was to include a tabid of -2  		action.ForDefaultPage = tabId == -2;  	}  	if (fromSiteRoot) {  		action.TabId = -3;  		//site root marker  	}  	List<ParameterRedirectAction> tabActionCol;  	if (actions.ContainsKey (action.TabId)) {  		tabActionCol = actions [action.TabId];  	} else {  		tabActionCol = new List<ParameterRedirectAction> ();  		actions.Add (action.TabId' tabActionCol);  	}  	tabActionCol.Add (action);  	actionCount++;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: foreach (int tabId in tabIds) {  	var action = new ParameterRedirectAction {  		PortalId = portalId'  		LookFor = rdr.GetAttribute ("lookFor")'  		RedirectTo = rdr.GetAttribute ("redirectTo")'  		Name = name'  		Action = rdr.GetAttribute ("action")'  		ChangeToSiteRoot = changeToSiteRoot'  		TabId = tabId  	};  	if (fromDefault) {  		//check for 'fromDefault' attribute  		action.ForDefaultPage = true;  		action.TabId = -2;  	} else {  		//or support the older convention' which was to include a tabid of -2  		action.ForDefaultPage = tabId == -2;  	}  	if (fromSiteRoot) {  		action.TabId = -3;  		//site root marker  	}  	List<ParameterRedirectAction> tabActionCol;  	if (actions.ContainsKey (action.TabId)) {  		tabActionCol = actions [action.TabId];  	} else {  		tabActionCol = new List<ParameterRedirectAction> ();  		actions.Add (action.TabId' tabActionCol);  	}  	tabActionCol.Add (action);  	actionCount++;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (fromDefault) {  	//check for 'fromDefault' attribute  	action.ForDefaultPage = true;  	action.TabId = -2;  } else {  	//or support the older convention' which was to include a tabid of -2  	action.ForDefaultPage = tabId == -2;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (fromDefault) {  	//check for 'fromDefault' attribute  	action.ForDefaultPage = true;  	action.TabId = -2;  } else {  	//or support the older convention' which was to include a tabid of -2  	action.ForDefaultPage = tabId == -2;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: action.TabId = -2;  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: action.ForDefaultPage = tabId == -2;  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (fromSiteRoot) {  	action.TabId = -3;  	//site root marker  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: action.TabId = -3;  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (File.Exists (fileName)) {  	var rdr = new XmlTextReader (fileName);  	while (rdr.Read ()) {  		switch (rdr.NodeType) {  		case XmlNodeType.Element:  			if (rdr.Name == "parameterRewrite") {  				string portalIdRaw = rdr.GetAttribute ("portalId");  				int rulePortalId = -1;  				int actionCount = 0;  				if (portalIdRaw != null) {  					Int32.TryParse (portalIdRaw' out rulePortalId);  				}  				if (rulePortalId == portalId || rulePortalId == -1 || portalId == -1 || portalSpecific) {  					//now set up the action  					string tabIdRaw = rdr.GetAttribute ("tabIds");  					string tabNames = rdr.GetAttribute ("tabNames");  					string name = rdr.GetAttribute ("name");  					string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  					bool fromSiteRoot;  					bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  					List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref messages);  					foreach (int tabId in tabIds) {  						var action = new ParameterRewriteAction {  							LookFor = rdr.GetAttribute ("lookFor")'  							RewriteTo = rdr.GetAttribute ("rewriteTo")'  							Name = name'  							TabId = tabId  						};  						if (fromSiteRoot) {  							action.ForSiteRoot = true;  							action.TabId = -3;  						} else {  							//older rule specified tabid -3 meant site root  							action.ForSiteRoot = tabId == -3;  						}  						action.PortalId = portalId;  						SharedList<ParameterRewriteAction> tabActionCol;  						if (actions.ContainsKey (action.TabId)) {  							tabActionCol = actions [action.TabId];  						} else {  							tabActionCol = new SharedList<ParameterRewriteAction> ();  							actions.Add (action.TabId' tabActionCol);  						}  						tabActionCol.Add (action);  						actionCount++;  					}  					messages.Add (name + " rewrite actions added:" + actionCount.ToString ());  				}  			}  			break;  		case XmlNodeType.EndElement:  			break;  		}  	}  	rdr.Close ();  } else {  	messages.Add ("Filename does not exist:" + fileName);  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (File.Exists (fileName)) {  	var rdr = new XmlTextReader (fileName);  	while (rdr.Read ()) {  		switch (rdr.NodeType) {  		case XmlNodeType.Element:  			if (rdr.Name == "parameterRewrite") {  				string portalIdRaw = rdr.GetAttribute ("portalId");  				int rulePortalId = -1;  				int actionCount = 0;  				if (portalIdRaw != null) {  					Int32.TryParse (portalIdRaw' out rulePortalId);  				}  				if (rulePortalId == portalId || rulePortalId == -1 || portalId == -1 || portalSpecific) {  					//now set up the action  					string tabIdRaw = rdr.GetAttribute ("tabIds");  					string tabNames = rdr.GetAttribute ("tabNames");  					string name = rdr.GetAttribute ("name");  					string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  					bool fromSiteRoot;  					bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  					List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref messages);  					foreach (int tabId in tabIds) {  						var action = new ParameterRewriteAction {  							LookFor = rdr.GetAttribute ("lookFor")'  							RewriteTo = rdr.GetAttribute ("rewriteTo")'  							Name = name'  							TabId = tabId  						};  						if (fromSiteRoot) {  							action.ForSiteRoot = true;  							action.TabId = -3;  						} else {  							//older rule specified tabid -3 meant site root  							action.ForSiteRoot = tabId == -3;  						}  						action.PortalId = portalId;  						SharedList<ParameterRewriteAction> tabActionCol;  						if (actions.ContainsKey (action.TabId)) {  							tabActionCol = actions [action.TabId];  						} else {  							tabActionCol = new SharedList<ParameterRewriteAction> ();  							actions.Add (action.TabId' tabActionCol);  						}  						tabActionCol.Add (action);  						actionCount++;  					}  					messages.Add (name + " rewrite actions added:" + actionCount.ToString ());  				}  			}  			break;  		case XmlNodeType.EndElement:  			break;  		}  	}  	rdr.Close ();  } else {  	messages.Add ("Filename does not exist:" + fileName);  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: while (rdr.Read ()) {  	switch (rdr.NodeType) {  	case XmlNodeType.Element:  		if (rdr.Name == "parameterRewrite") {  			string portalIdRaw = rdr.GetAttribute ("portalId");  			int rulePortalId = -1;  			int actionCount = 0;  			if (portalIdRaw != null) {  				Int32.TryParse (portalIdRaw' out rulePortalId);  			}  			if (rulePortalId == portalId || rulePortalId == -1 || portalId == -1 || portalSpecific) {  				//now set up the action  				string tabIdRaw = rdr.GetAttribute ("tabIds");  				string tabNames = rdr.GetAttribute ("tabNames");  				string name = rdr.GetAttribute ("name");  				string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  				bool fromSiteRoot;  				bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  				List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref messages);  				foreach (int tabId in tabIds) {  					var action = new ParameterRewriteAction {  						LookFor = rdr.GetAttribute ("lookFor")'  						RewriteTo = rdr.GetAttribute ("rewriteTo")'  						Name = name'  						TabId = tabId  					};  					if (fromSiteRoot) {  						action.ForSiteRoot = true;  						action.TabId = -3;  					} else {  						//older rule specified tabid -3 meant site root  						action.ForSiteRoot = tabId == -3;  					}  					action.PortalId = portalId;  					SharedList<ParameterRewriteAction> tabActionCol;  					if (actions.ContainsKey (action.TabId)) {  						tabActionCol = actions [action.TabId];  					} else {  						tabActionCol = new SharedList<ParameterRewriteAction> ();  						actions.Add (action.TabId' tabActionCol);  					}  					tabActionCol.Add (action);  					actionCount++;  				}  				messages.Add (name + " rewrite actions added:" + actionCount.ToString ());  			}  		}  		break;  	case XmlNodeType.EndElement:  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: while (rdr.Read ()) {  	switch (rdr.NodeType) {  	case XmlNodeType.Element:  		if (rdr.Name == "parameterRewrite") {  			string portalIdRaw = rdr.GetAttribute ("portalId");  			int rulePortalId = -1;  			int actionCount = 0;  			if (portalIdRaw != null) {  				Int32.TryParse (portalIdRaw' out rulePortalId);  			}  			if (rulePortalId == portalId || rulePortalId == -1 || portalId == -1 || portalSpecific) {  				//now set up the action  				string tabIdRaw = rdr.GetAttribute ("tabIds");  				string tabNames = rdr.GetAttribute ("tabNames");  				string name = rdr.GetAttribute ("name");  				string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  				bool fromSiteRoot;  				bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  				List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref messages);  				foreach (int tabId in tabIds) {  					var action = new ParameterRewriteAction {  						LookFor = rdr.GetAttribute ("lookFor")'  						RewriteTo = rdr.GetAttribute ("rewriteTo")'  						Name = name'  						TabId = tabId  					};  					if (fromSiteRoot) {  						action.ForSiteRoot = true;  						action.TabId = -3;  					} else {  						//older rule specified tabid -3 meant site root  						action.ForSiteRoot = tabId == -3;  					}  					action.PortalId = portalId;  					SharedList<ParameterRewriteAction> tabActionCol;  					if (actions.ContainsKey (action.TabId)) {  						tabActionCol = actions [action.TabId];  					} else {  						tabActionCol = new SharedList<ParameterRewriteAction> ();  						actions.Add (action.TabId' tabActionCol);  					}  					tabActionCol.Add (action);  					actionCount++;  				}  				messages.Add (name + " rewrite actions added:" + actionCount.ToString ());  			}  		}  		break;  	case XmlNodeType.EndElement:  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: switch (rdr.NodeType) {  case XmlNodeType.Element:  	if (rdr.Name == "parameterRewrite") {  		string portalIdRaw = rdr.GetAttribute ("portalId");  		int rulePortalId = -1;  		int actionCount = 0;  		if (portalIdRaw != null) {  			Int32.TryParse (portalIdRaw' out rulePortalId);  		}  		if (rulePortalId == portalId || rulePortalId == -1 || portalId == -1 || portalSpecific) {  			//now set up the action  			string tabIdRaw = rdr.GetAttribute ("tabIds");  			string tabNames = rdr.GetAttribute ("tabNames");  			string name = rdr.GetAttribute ("name");  			string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  			bool fromSiteRoot;  			bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  			List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref messages);  			foreach (int tabId in tabIds) {  				var action = new ParameterRewriteAction {  					LookFor = rdr.GetAttribute ("lookFor")'  					RewriteTo = rdr.GetAttribute ("rewriteTo")'  					Name = name'  					TabId = tabId  				};  				if (fromSiteRoot) {  					action.ForSiteRoot = true;  					action.TabId = -3;  				} else {  					//older rule specified tabid -3 meant site root  					action.ForSiteRoot = tabId == -3;  				}  				action.PortalId = portalId;  				SharedList<ParameterRewriteAction> tabActionCol;  				if (actions.ContainsKey (action.TabId)) {  					tabActionCol = actions [action.TabId];  				} else {  					tabActionCol = new SharedList<ParameterRewriteAction> ();  					actions.Add (action.TabId' tabActionCol);  				}  				tabActionCol.Add (action);  				actionCount++;  			}  			messages.Add (name + " rewrite actions added:" + actionCount.ToString ());  		}  	}  	break;  case XmlNodeType.EndElement:  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: switch (rdr.NodeType) {  case XmlNodeType.Element:  	if (rdr.Name == "parameterRewrite") {  		string portalIdRaw = rdr.GetAttribute ("portalId");  		int rulePortalId = -1;  		int actionCount = 0;  		if (portalIdRaw != null) {  			Int32.TryParse (portalIdRaw' out rulePortalId);  		}  		if (rulePortalId == portalId || rulePortalId == -1 || portalId == -1 || portalSpecific) {  			//now set up the action  			string tabIdRaw = rdr.GetAttribute ("tabIds");  			string tabNames = rdr.GetAttribute ("tabNames");  			string name = rdr.GetAttribute ("name");  			string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  			bool fromSiteRoot;  			bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  			List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref messages);  			foreach (int tabId in tabIds) {  				var action = new ParameterRewriteAction {  					LookFor = rdr.GetAttribute ("lookFor")'  					RewriteTo = rdr.GetAttribute ("rewriteTo")'  					Name = name'  					TabId = tabId  				};  				if (fromSiteRoot) {  					action.ForSiteRoot = true;  					action.TabId = -3;  				} else {  					//older rule specified tabid -3 meant site root  					action.ForSiteRoot = tabId == -3;  				}  				action.PortalId = portalId;  				SharedList<ParameterRewriteAction> tabActionCol;  				if (actions.ContainsKey (action.TabId)) {  					tabActionCol = actions [action.TabId];  				} else {  					tabActionCol = new SharedList<ParameterRewriteAction> ();  					actions.Add (action.TabId' tabActionCol);  				}  				tabActionCol.Add (action);  				actionCount++;  			}  			messages.Add (name + " rewrite actions added:" + actionCount.ToString ());  		}  	}  	break;  case XmlNodeType.EndElement:  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (rdr.Name == "parameterRewrite") {  	string portalIdRaw = rdr.GetAttribute ("portalId");  	int rulePortalId = -1;  	int actionCount = 0;  	if (portalIdRaw != null) {  		Int32.TryParse (portalIdRaw' out rulePortalId);  	}  	if (rulePortalId == portalId || rulePortalId == -1 || portalId == -1 || portalSpecific) {  		//now set up the action  		string tabIdRaw = rdr.GetAttribute ("tabIds");  		string tabNames = rdr.GetAttribute ("tabNames");  		string name = rdr.GetAttribute ("name");  		string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  		bool fromSiteRoot;  		bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  		List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref messages);  		foreach (int tabId in tabIds) {  			var action = new ParameterRewriteAction {  				LookFor = rdr.GetAttribute ("lookFor")'  				RewriteTo = rdr.GetAttribute ("rewriteTo")'  				Name = name'  				TabId = tabId  			};  			if (fromSiteRoot) {  				action.ForSiteRoot = true;  				action.TabId = -3;  			} else {  				//older rule specified tabid -3 meant site root  				action.ForSiteRoot = tabId == -3;  			}  			action.PortalId = portalId;  			SharedList<ParameterRewriteAction> tabActionCol;  			if (actions.ContainsKey (action.TabId)) {  				tabActionCol = actions [action.TabId];  			} else {  				tabActionCol = new SharedList<ParameterRewriteAction> ();  				actions.Add (action.TabId' tabActionCol);  			}  			tabActionCol.Add (action);  			actionCount++;  		}  		messages.Add (name + " rewrite actions added:" + actionCount.ToString ());  	}  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (rdr.Name == "parameterRewrite") {  	string portalIdRaw = rdr.GetAttribute ("portalId");  	int rulePortalId = -1;  	int actionCount = 0;  	if (portalIdRaw != null) {  		Int32.TryParse (portalIdRaw' out rulePortalId);  	}  	if (rulePortalId == portalId || rulePortalId == -1 || portalId == -1 || portalSpecific) {  		//now set up the action  		string tabIdRaw = rdr.GetAttribute ("tabIds");  		string tabNames = rdr.GetAttribute ("tabNames");  		string name = rdr.GetAttribute ("name");  		string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  		bool fromSiteRoot;  		bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  		List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref messages);  		foreach (int tabId in tabIds) {  			var action = new ParameterRewriteAction {  				LookFor = rdr.GetAttribute ("lookFor")'  				RewriteTo = rdr.GetAttribute ("rewriteTo")'  				Name = name'  				TabId = tabId  			};  			if (fromSiteRoot) {  				action.ForSiteRoot = true;  				action.TabId = -3;  			} else {  				//older rule specified tabid -3 meant site root  				action.ForSiteRoot = tabId == -3;  			}  			action.PortalId = portalId;  			SharedList<ParameterRewriteAction> tabActionCol;  			if (actions.ContainsKey (action.TabId)) {  				tabActionCol = actions [action.TabId];  			} else {  				tabActionCol = new SharedList<ParameterRewriteAction> ();  				actions.Add (action.TabId' tabActionCol);  			}  			tabActionCol.Add (action);  			actionCount++;  		}  		messages.Add (name + " rewrite actions added:" + actionCount.ToString ());  	}  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (rulePortalId == portalId || rulePortalId == -1 || portalId == -1 || portalSpecific) {  	//now set up the action  	string tabIdRaw = rdr.GetAttribute ("tabIds");  	string tabNames = rdr.GetAttribute ("tabNames");  	string name = rdr.GetAttribute ("name");  	string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  	bool fromSiteRoot;  	bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  	List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref messages);  	foreach (int tabId in tabIds) {  		var action = new ParameterRewriteAction {  			LookFor = rdr.GetAttribute ("lookFor")'  			RewriteTo = rdr.GetAttribute ("rewriteTo")'  			Name = name'  			TabId = tabId  		};  		if (fromSiteRoot) {  			action.ForSiteRoot = true;  			action.TabId = -3;  		} else {  			//older rule specified tabid -3 meant site root  			action.ForSiteRoot = tabId == -3;  		}  		action.PortalId = portalId;  		SharedList<ParameterRewriteAction> tabActionCol;  		if (actions.ContainsKey (action.TabId)) {  			tabActionCol = actions [action.TabId];  		} else {  			tabActionCol = new SharedList<ParameterRewriteAction> ();  			actions.Add (action.TabId' tabActionCol);  		}  		tabActionCol.Add (action);  		actionCount++;  	}  	messages.Add (name + " rewrite actions added:" + actionCount.ToString ());  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (rulePortalId == portalId || rulePortalId == -1 || portalId == -1 || portalSpecific) {  	//now set up the action  	string tabIdRaw = rdr.GetAttribute ("tabIds");  	string tabNames = rdr.GetAttribute ("tabNames");  	string name = rdr.GetAttribute ("name");  	string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  	bool fromSiteRoot;  	bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  	List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref messages);  	foreach (int tabId in tabIds) {  		var action = new ParameterRewriteAction {  			LookFor = rdr.GetAttribute ("lookFor")'  			RewriteTo = rdr.GetAttribute ("rewriteTo")'  			Name = name'  			TabId = tabId  		};  		if (fromSiteRoot) {  			action.ForSiteRoot = true;  			action.TabId = -3;  		} else {  			//older rule specified tabid -3 meant site root  			action.ForSiteRoot = tabId == -3;  		}  		action.PortalId = portalId;  		SharedList<ParameterRewriteAction> tabActionCol;  		if (actions.ContainsKey (action.TabId)) {  			tabActionCol = actions [action.TabId];  		} else {  			tabActionCol = new SharedList<ParameterRewriteAction> ();  			actions.Add (action.TabId' tabActionCol);  		}  		tabActionCol.Add (action);  		actionCount++;  	}  	messages.Add (name + " rewrite actions added:" + actionCount.ToString ());  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: foreach (int tabId in tabIds) {  	var action = new ParameterRewriteAction {  		LookFor = rdr.GetAttribute ("lookFor")'  		RewriteTo = rdr.GetAttribute ("rewriteTo")'  		Name = name'  		TabId = tabId  	};  	if (fromSiteRoot) {  		action.ForSiteRoot = true;  		action.TabId = -3;  	} else {  		//older rule specified tabid -3 meant site root  		action.ForSiteRoot = tabId == -3;  	}  	action.PortalId = portalId;  	SharedList<ParameterRewriteAction> tabActionCol;  	if (actions.ContainsKey (action.TabId)) {  		tabActionCol = actions [action.TabId];  	} else {  		tabActionCol = new SharedList<ParameterRewriteAction> ();  		actions.Add (action.TabId' tabActionCol);  	}  	tabActionCol.Add (action);  	actionCount++;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: foreach (int tabId in tabIds) {  	var action = new ParameterRewriteAction {  		LookFor = rdr.GetAttribute ("lookFor")'  		RewriteTo = rdr.GetAttribute ("rewriteTo")'  		Name = name'  		TabId = tabId  	};  	if (fromSiteRoot) {  		action.ForSiteRoot = true;  		action.TabId = -3;  	} else {  		//older rule specified tabid -3 meant site root  		action.ForSiteRoot = tabId == -3;  	}  	action.PortalId = portalId;  	SharedList<ParameterRewriteAction> tabActionCol;  	if (actions.ContainsKey (action.TabId)) {  		tabActionCol = actions [action.TabId];  	} else {  		tabActionCol = new SharedList<ParameterRewriteAction> ();  		actions.Add (action.TabId' tabActionCol);  	}  	tabActionCol.Add (action);  	actionCount++;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (fromSiteRoot) {  	action.ForSiteRoot = true;  	action.TabId = -3;  } else {  	//older rule specified tabid -3 meant site root  	action.ForSiteRoot = tabId == -3;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: if (fromSiteRoot) {  	action.ForSiteRoot = true;  	action.TabId = -3;  } else {  	//older rule specified tabid -3 meant site root  	action.ForSiteRoot = tabId == -3;  }  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: action.TabId = -3;  
Magic Number,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following statement contains a magic number: action.ForSiteRoot = tabId == -3;  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: try {  	int tabId = result.TabId;  	if (isSiteRootMatch) {  		tabId = RewriteController.SiteRootRewrite;  	}  	List<ExtensionUrlProvider> providersToCall = GetProvidersToCall (tabId' result.PortalId' settings' parentTraceId);  	if (providersToCall != null && providersToCall.Count > 0) {  		//now check for providers by calling the providers  		int upperBound = urlParms.GetUpperBound (0);  		//clean extension off parameters array  		var parms = new string[upperBound + 1];  		Array.ConstrainedCopy (urlParms' 0' parms' 0' upperBound + 1);  		if (upperBound >= 0) {  			bool replaced;  			parms [upperBound] = RewriteController.CleanExtension (parms [upperBound]' settings' out replaced);  		}  		//get options from current settings  		FriendlyUrlOptions options = UrlRewriterUtils.GetOptionsFromSettings (settings);  		foreach (ExtensionUrlProvider provider in providersToCall) {  			//set active provider for exception handling  			activeProvider = provider;  			//call down to specific providers and see if we get a rewrite  			string location;  			int status;  			string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  			if (status == 0 || status == 200)//either not set' or set to '200 OK'.  			 {  				if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  					rewriteDone = true;  					//check for duplicate tabIds.  					string qsRemainder = null;  					if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  						//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  						//pattern to determine which tab matches  						//look for any other querystirng information in the already rewritten Url (ie language parameters)  						Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  						if (rewrittenUrlMatch.Groups ["qs"].Success) {  							//keep any other querystring remainders  							qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  							//initialise  						}  						//supplied value overwrites existing value' so remove from the rewritten url  						rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  					}  					if (rewrittenUrl.Contains ("?") == false) {  						//use a leading ?' not a leading &  						queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  						queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  					} else {  						//use a leading &' not a leading ?  						queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  						queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  					}  					//add querystring onto rewritten Url  					rewrittenUrl += queryString;  					if (qsRemainder != null) {  						rewrittenUrl += qsRemainder;  					}  					break;  				}  			} else {  				switch (status) {  				case 301:  					result.Action = ActionType.Redirect301;  					result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  					result.FinalUrl = location;  					break;  				case 302:  					result.Action = ActionType.Redirect302;  					result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  					result.FinalUrl = location;  					break;  				case 404:  					result.Action = ActionType.Output404;  					break;  				case 500:  					result.Action = ActionType.Output500;  					break;  				}  				newAction = true;  				//not doing a 200 status  				break;  			}  		}  	}  } catch (Exception ex) {  	//log module provider exception  	LogModuleProviderExceptionInRequest (ex' "500 Internal Server Error"' activeProvider' result' messages);  	//reset values to initial  	rewriteDone = false;  	rewrittenUrl = newUrl;  	newAction = false;  	string providerName = "Unknown";  	if (activeProvider != null) {  		providerName = activeProvider.ProviderConfig.ProviderName;  	}  	if (result != null) {  		result.DebugMessages.Add ("Exception in provider [" + providerName + "] :" + ex.Message);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: try {  	int tabId = result.TabId;  	if (isSiteRootMatch) {  		tabId = RewriteController.SiteRootRewrite;  	}  	List<ExtensionUrlProvider> providersToCall = GetProvidersToCall (tabId' result.PortalId' settings' parentTraceId);  	if (providersToCall != null && providersToCall.Count > 0) {  		//now check for providers by calling the providers  		int upperBound = urlParms.GetUpperBound (0);  		//clean extension off parameters array  		var parms = new string[upperBound + 1];  		Array.ConstrainedCopy (urlParms' 0' parms' 0' upperBound + 1);  		if (upperBound >= 0) {  			bool replaced;  			parms [upperBound] = RewriteController.CleanExtension (parms [upperBound]' settings' out replaced);  		}  		//get options from current settings  		FriendlyUrlOptions options = UrlRewriterUtils.GetOptionsFromSettings (settings);  		foreach (ExtensionUrlProvider provider in providersToCall) {  			//set active provider for exception handling  			activeProvider = provider;  			//call down to specific providers and see if we get a rewrite  			string location;  			int status;  			string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  			if (status == 0 || status == 200)//either not set' or set to '200 OK'.  			 {  				if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  					rewriteDone = true;  					//check for duplicate tabIds.  					string qsRemainder = null;  					if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  						//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  						//pattern to determine which tab matches  						//look for any other querystirng information in the already rewritten Url (ie language parameters)  						Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  						if (rewrittenUrlMatch.Groups ["qs"].Success) {  							//keep any other querystring remainders  							qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  							//initialise  						}  						//supplied value overwrites existing value' so remove from the rewritten url  						rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  					}  					if (rewrittenUrl.Contains ("?") == false) {  						//use a leading ?' not a leading &  						queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  						queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  					} else {  						//use a leading &' not a leading ?  						queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  						queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  					}  					//add querystring onto rewritten Url  					rewrittenUrl += queryString;  					if (qsRemainder != null) {  						rewrittenUrl += qsRemainder;  					}  					break;  				}  			} else {  				switch (status) {  				case 301:  					result.Action = ActionType.Redirect301;  					result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  					result.FinalUrl = location;  					break;  				case 302:  					result.Action = ActionType.Redirect302;  					result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  					result.FinalUrl = location;  					break;  				case 404:  					result.Action = ActionType.Output404;  					break;  				case 500:  					result.Action = ActionType.Output500;  					break;  				}  				newAction = true;  				//not doing a 200 status  				break;  			}  		}  	}  } catch (Exception ex) {  	//log module provider exception  	LogModuleProviderExceptionInRequest (ex' "500 Internal Server Error"' activeProvider' result' messages);  	//reset values to initial  	rewriteDone = false;  	rewrittenUrl = newUrl;  	newAction = false;  	string providerName = "Unknown";  	if (activeProvider != null) {  		providerName = activeProvider.ProviderConfig.ProviderName;  	}  	if (result != null) {  		result.DebugMessages.Add ("Exception in provider [" + providerName + "] :" + ex.Message);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: try {  	int tabId = result.TabId;  	if (isSiteRootMatch) {  		tabId = RewriteController.SiteRootRewrite;  	}  	List<ExtensionUrlProvider> providersToCall = GetProvidersToCall (tabId' result.PortalId' settings' parentTraceId);  	if (providersToCall != null && providersToCall.Count > 0) {  		//now check for providers by calling the providers  		int upperBound = urlParms.GetUpperBound (0);  		//clean extension off parameters array  		var parms = new string[upperBound + 1];  		Array.ConstrainedCopy (urlParms' 0' parms' 0' upperBound + 1);  		if (upperBound >= 0) {  			bool replaced;  			parms [upperBound] = RewriteController.CleanExtension (parms [upperBound]' settings' out replaced);  		}  		//get options from current settings  		FriendlyUrlOptions options = UrlRewriterUtils.GetOptionsFromSettings (settings);  		foreach (ExtensionUrlProvider provider in providersToCall) {  			//set active provider for exception handling  			activeProvider = provider;  			//call down to specific providers and see if we get a rewrite  			string location;  			int status;  			string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  			if (status == 0 || status == 200)//either not set' or set to '200 OK'.  			 {  				if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  					rewriteDone = true;  					//check for duplicate tabIds.  					string qsRemainder = null;  					if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  						//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  						//pattern to determine which tab matches  						//look for any other querystirng information in the already rewritten Url (ie language parameters)  						Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  						if (rewrittenUrlMatch.Groups ["qs"].Success) {  							//keep any other querystring remainders  							qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  							//initialise  						}  						//supplied value overwrites existing value' so remove from the rewritten url  						rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  					}  					if (rewrittenUrl.Contains ("?") == false) {  						//use a leading ?' not a leading &  						queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  						queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  					} else {  						//use a leading &' not a leading ?  						queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  						queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  					}  					//add querystring onto rewritten Url  					rewrittenUrl += queryString;  					if (qsRemainder != null) {  						rewrittenUrl += qsRemainder;  					}  					break;  				}  			} else {  				switch (status) {  				case 301:  					result.Action = ActionType.Redirect301;  					result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  					result.FinalUrl = location;  					break;  				case 302:  					result.Action = ActionType.Redirect302;  					result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  					result.FinalUrl = location;  					break;  				case 404:  					result.Action = ActionType.Output404;  					break;  				case 500:  					result.Action = ActionType.Output500;  					break;  				}  				newAction = true;  				//not doing a 200 status  				break;  			}  		}  	}  } catch (Exception ex) {  	//log module provider exception  	LogModuleProviderExceptionInRequest (ex' "500 Internal Server Error"' activeProvider' result' messages);  	//reset values to initial  	rewriteDone = false;  	rewrittenUrl = newUrl;  	newAction = false;  	string providerName = "Unknown";  	if (activeProvider != null) {  		providerName = activeProvider.ProviderConfig.ProviderName;  	}  	if (result != null) {  		result.DebugMessages.Add ("Exception in provider [" + providerName + "] :" + ex.Message);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: try {  	int tabId = result.TabId;  	if (isSiteRootMatch) {  		tabId = RewriteController.SiteRootRewrite;  	}  	List<ExtensionUrlProvider> providersToCall = GetProvidersToCall (tabId' result.PortalId' settings' parentTraceId);  	if (providersToCall != null && providersToCall.Count > 0) {  		//now check for providers by calling the providers  		int upperBound = urlParms.GetUpperBound (0);  		//clean extension off parameters array  		var parms = new string[upperBound + 1];  		Array.ConstrainedCopy (urlParms' 0' parms' 0' upperBound + 1);  		if (upperBound >= 0) {  			bool replaced;  			parms [upperBound] = RewriteController.CleanExtension (parms [upperBound]' settings' out replaced);  		}  		//get options from current settings  		FriendlyUrlOptions options = UrlRewriterUtils.GetOptionsFromSettings (settings);  		foreach (ExtensionUrlProvider provider in providersToCall) {  			//set active provider for exception handling  			activeProvider = provider;  			//call down to specific providers and see if we get a rewrite  			string location;  			int status;  			string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  			if (status == 0 || status == 200)//either not set' or set to '200 OK'.  			 {  				if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  					rewriteDone = true;  					//check for duplicate tabIds.  					string qsRemainder = null;  					if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  						//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  						//pattern to determine which tab matches  						//look for any other querystirng information in the already rewritten Url (ie language parameters)  						Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  						if (rewrittenUrlMatch.Groups ["qs"].Success) {  							//keep any other querystring remainders  							qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  							//initialise  						}  						//supplied value overwrites existing value' so remove from the rewritten url  						rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  					}  					if (rewrittenUrl.Contains ("?") == false) {  						//use a leading ?' not a leading &  						queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  						queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  					} else {  						//use a leading &' not a leading ?  						queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  						queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  					}  					//add querystring onto rewritten Url  					rewrittenUrl += queryString;  					if (qsRemainder != null) {  						rewrittenUrl += qsRemainder;  					}  					break;  				}  			} else {  				switch (status) {  				case 301:  					result.Action = ActionType.Redirect301;  					result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  					result.FinalUrl = location;  					break;  				case 302:  					result.Action = ActionType.Redirect302;  					result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  					result.FinalUrl = location;  					break;  				case 404:  					result.Action = ActionType.Output404;  					break;  				case 500:  					result.Action = ActionType.Output500;  					break;  				}  				newAction = true;  				//not doing a 200 status  				break;  			}  		}  	}  } catch (Exception ex) {  	//log module provider exception  	LogModuleProviderExceptionInRequest (ex' "500 Internal Server Error"' activeProvider' result' messages);  	//reset values to initial  	rewriteDone = false;  	rewrittenUrl = newUrl;  	newAction = false;  	string providerName = "Unknown";  	if (activeProvider != null) {  		providerName = activeProvider.ProviderConfig.ProviderName;  	}  	if (result != null) {  		result.DebugMessages.Add ("Exception in provider [" + providerName + "] :" + ex.Message);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: try {  	int tabId = result.TabId;  	if (isSiteRootMatch) {  		tabId = RewriteController.SiteRootRewrite;  	}  	List<ExtensionUrlProvider> providersToCall = GetProvidersToCall (tabId' result.PortalId' settings' parentTraceId);  	if (providersToCall != null && providersToCall.Count > 0) {  		//now check for providers by calling the providers  		int upperBound = urlParms.GetUpperBound (0);  		//clean extension off parameters array  		var parms = new string[upperBound + 1];  		Array.ConstrainedCopy (urlParms' 0' parms' 0' upperBound + 1);  		if (upperBound >= 0) {  			bool replaced;  			parms [upperBound] = RewriteController.CleanExtension (parms [upperBound]' settings' out replaced);  		}  		//get options from current settings  		FriendlyUrlOptions options = UrlRewriterUtils.GetOptionsFromSettings (settings);  		foreach (ExtensionUrlProvider provider in providersToCall) {  			//set active provider for exception handling  			activeProvider = provider;  			//call down to specific providers and see if we get a rewrite  			string location;  			int status;  			string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  			if (status == 0 || status == 200)//either not set' or set to '200 OK'.  			 {  				if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  					rewriteDone = true;  					//check for duplicate tabIds.  					string qsRemainder = null;  					if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  						//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  						//pattern to determine which tab matches  						//look for any other querystirng information in the already rewritten Url (ie language parameters)  						Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  						if (rewrittenUrlMatch.Groups ["qs"].Success) {  							//keep any other querystring remainders  							qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  							//initialise  						}  						//supplied value overwrites existing value' so remove from the rewritten url  						rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  					}  					if (rewrittenUrl.Contains ("?") == false) {  						//use a leading ?' not a leading &  						queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  						queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  					} else {  						//use a leading &' not a leading ?  						queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  						queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  					}  					//add querystring onto rewritten Url  					rewrittenUrl += queryString;  					if (qsRemainder != null) {  						rewrittenUrl += qsRemainder;  					}  					break;  				}  			} else {  				switch (status) {  				case 301:  					result.Action = ActionType.Redirect301;  					result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  					result.FinalUrl = location;  					break;  				case 302:  					result.Action = ActionType.Redirect302;  					result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  					result.FinalUrl = location;  					break;  				case 404:  					result.Action = ActionType.Output404;  					break;  				case 500:  					result.Action = ActionType.Output500;  					break;  				}  				newAction = true;  				//not doing a 200 status  				break;  			}  		}  	}  } catch (Exception ex) {  	//log module provider exception  	LogModuleProviderExceptionInRequest (ex' "500 Internal Server Error"' activeProvider' result' messages);  	//reset values to initial  	rewriteDone = false;  	rewrittenUrl = newUrl;  	newAction = false;  	string providerName = "Unknown";  	if (activeProvider != null) {  		providerName = activeProvider.ProviderConfig.ProviderName;  	}  	if (result != null) {  		result.DebugMessages.Add ("Exception in provider [" + providerName + "] :" + ex.Message);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: if (providersToCall != null && providersToCall.Count > 0) {  	//now check for providers by calling the providers  	int upperBound = urlParms.GetUpperBound (0);  	//clean extension off parameters array  	var parms = new string[upperBound + 1];  	Array.ConstrainedCopy (urlParms' 0' parms' 0' upperBound + 1);  	if (upperBound >= 0) {  		bool replaced;  		parms [upperBound] = RewriteController.CleanExtension (parms [upperBound]' settings' out replaced);  	}  	//get options from current settings  	FriendlyUrlOptions options = UrlRewriterUtils.GetOptionsFromSettings (settings);  	foreach (ExtensionUrlProvider provider in providersToCall) {  		//set active provider for exception handling  		activeProvider = provider;  		//call down to specific providers and see if we get a rewrite  		string location;  		int status;  		string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  		if (status == 0 || status == 200)//either not set' or set to '200 OK'.  		 {  			if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  				rewriteDone = true;  				//check for duplicate tabIds.  				string qsRemainder = null;  				if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  					//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  					//pattern to determine which tab matches  					//look for any other querystirng information in the already rewritten Url (ie language parameters)  					Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  					if (rewrittenUrlMatch.Groups ["qs"].Success) {  						//keep any other querystring remainders  						qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  						//initialise  					}  					//supplied value overwrites existing value' so remove from the rewritten url  					rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  				}  				if (rewrittenUrl.Contains ("?") == false) {  					//use a leading ?' not a leading &  					queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  					queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  				} else {  					//use a leading &' not a leading ?  					queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  					queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  				}  				//add querystring onto rewritten Url  				rewrittenUrl += queryString;  				if (qsRemainder != null) {  					rewrittenUrl += qsRemainder;  				}  				break;  			}  		} else {  			switch (status) {  			case 301:  				result.Action = ActionType.Redirect301;  				result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  				result.FinalUrl = location;  				break;  			case 302:  				result.Action = ActionType.Redirect302;  				result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  				result.FinalUrl = location;  				break;  			case 404:  				result.Action = ActionType.Output404;  				break;  			case 500:  				result.Action = ActionType.Output500;  				break;  			}  			newAction = true;  			//not doing a 200 status  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: if (providersToCall != null && providersToCall.Count > 0) {  	//now check for providers by calling the providers  	int upperBound = urlParms.GetUpperBound (0);  	//clean extension off parameters array  	var parms = new string[upperBound + 1];  	Array.ConstrainedCopy (urlParms' 0' parms' 0' upperBound + 1);  	if (upperBound >= 0) {  		bool replaced;  		parms [upperBound] = RewriteController.CleanExtension (parms [upperBound]' settings' out replaced);  	}  	//get options from current settings  	FriendlyUrlOptions options = UrlRewriterUtils.GetOptionsFromSettings (settings);  	foreach (ExtensionUrlProvider provider in providersToCall) {  		//set active provider for exception handling  		activeProvider = provider;  		//call down to specific providers and see if we get a rewrite  		string location;  		int status;  		string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  		if (status == 0 || status == 200)//either not set' or set to '200 OK'.  		 {  			if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  				rewriteDone = true;  				//check for duplicate tabIds.  				string qsRemainder = null;  				if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  					//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  					//pattern to determine which tab matches  					//look for any other querystirng information in the already rewritten Url (ie language parameters)  					Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  					if (rewrittenUrlMatch.Groups ["qs"].Success) {  						//keep any other querystring remainders  						qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  						//initialise  					}  					//supplied value overwrites existing value' so remove from the rewritten url  					rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  				}  				if (rewrittenUrl.Contains ("?") == false) {  					//use a leading ?' not a leading &  					queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  					queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  				} else {  					//use a leading &' not a leading ?  					queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  					queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  				}  				//add querystring onto rewritten Url  				rewrittenUrl += queryString;  				if (qsRemainder != null) {  					rewrittenUrl += qsRemainder;  				}  				break;  			}  		} else {  			switch (status) {  			case 301:  				result.Action = ActionType.Redirect301;  				result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  				result.FinalUrl = location;  				break;  			case 302:  				result.Action = ActionType.Redirect302;  				result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  				result.FinalUrl = location;  				break;  			case 404:  				result.Action = ActionType.Output404;  				break;  			case 500:  				result.Action = ActionType.Output500;  				break;  			}  			newAction = true;  			//not doing a 200 status  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: if (providersToCall != null && providersToCall.Count > 0) {  	//now check for providers by calling the providers  	int upperBound = urlParms.GetUpperBound (0);  	//clean extension off parameters array  	var parms = new string[upperBound + 1];  	Array.ConstrainedCopy (urlParms' 0' parms' 0' upperBound + 1);  	if (upperBound >= 0) {  		bool replaced;  		parms [upperBound] = RewriteController.CleanExtension (parms [upperBound]' settings' out replaced);  	}  	//get options from current settings  	FriendlyUrlOptions options = UrlRewriterUtils.GetOptionsFromSettings (settings);  	foreach (ExtensionUrlProvider provider in providersToCall) {  		//set active provider for exception handling  		activeProvider = provider;  		//call down to specific providers and see if we get a rewrite  		string location;  		int status;  		string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  		if (status == 0 || status == 200)//either not set' or set to '200 OK'.  		 {  			if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  				rewriteDone = true;  				//check for duplicate tabIds.  				string qsRemainder = null;  				if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  					//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  					//pattern to determine which tab matches  					//look for any other querystirng information in the already rewritten Url (ie language parameters)  					Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  					if (rewrittenUrlMatch.Groups ["qs"].Success) {  						//keep any other querystring remainders  						qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  						//initialise  					}  					//supplied value overwrites existing value' so remove from the rewritten url  					rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  				}  				if (rewrittenUrl.Contains ("?") == false) {  					//use a leading ?' not a leading &  					queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  					queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  				} else {  					//use a leading &' not a leading ?  					queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  					queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  				}  				//add querystring onto rewritten Url  				rewrittenUrl += queryString;  				if (qsRemainder != null) {  					rewrittenUrl += qsRemainder;  				}  				break;  			}  		} else {  			switch (status) {  			case 301:  				result.Action = ActionType.Redirect301;  				result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  				result.FinalUrl = location;  				break;  			case 302:  				result.Action = ActionType.Redirect302;  				result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  				result.FinalUrl = location;  				break;  			case 404:  				result.Action = ActionType.Output404;  				break;  			case 500:  				result.Action = ActionType.Output500;  				break;  			}  			newAction = true;  			//not doing a 200 status  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: if (providersToCall != null && providersToCall.Count > 0) {  	//now check for providers by calling the providers  	int upperBound = urlParms.GetUpperBound (0);  	//clean extension off parameters array  	var parms = new string[upperBound + 1];  	Array.ConstrainedCopy (urlParms' 0' parms' 0' upperBound + 1);  	if (upperBound >= 0) {  		bool replaced;  		parms [upperBound] = RewriteController.CleanExtension (parms [upperBound]' settings' out replaced);  	}  	//get options from current settings  	FriendlyUrlOptions options = UrlRewriterUtils.GetOptionsFromSettings (settings);  	foreach (ExtensionUrlProvider provider in providersToCall) {  		//set active provider for exception handling  		activeProvider = provider;  		//call down to specific providers and see if we get a rewrite  		string location;  		int status;  		string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  		if (status == 0 || status == 200)//either not set' or set to '200 OK'.  		 {  			if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  				rewriteDone = true;  				//check for duplicate tabIds.  				string qsRemainder = null;  				if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  					//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  					//pattern to determine which tab matches  					//look for any other querystirng information in the already rewritten Url (ie language parameters)  					Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  					if (rewrittenUrlMatch.Groups ["qs"].Success) {  						//keep any other querystring remainders  						qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  						//initialise  					}  					//supplied value overwrites existing value' so remove from the rewritten url  					rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  				}  				if (rewrittenUrl.Contains ("?") == false) {  					//use a leading ?' not a leading &  					queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  					queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  				} else {  					//use a leading &' not a leading ?  					queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  					queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  				}  				//add querystring onto rewritten Url  				rewrittenUrl += queryString;  				if (qsRemainder != null) {  					rewrittenUrl += qsRemainder;  				}  				break;  			}  		} else {  			switch (status) {  			case 301:  				result.Action = ActionType.Redirect301;  				result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  				result.FinalUrl = location;  				break;  			case 302:  				result.Action = ActionType.Redirect302;  				result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  				result.FinalUrl = location;  				break;  			case 404:  				result.Action = ActionType.Output404;  				break;  			case 500:  				result.Action = ActionType.Output500;  				break;  			}  			newAction = true;  			//not doing a 200 status  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: if (providersToCall != null && providersToCall.Count > 0) {  	//now check for providers by calling the providers  	int upperBound = urlParms.GetUpperBound (0);  	//clean extension off parameters array  	var parms = new string[upperBound + 1];  	Array.ConstrainedCopy (urlParms' 0' parms' 0' upperBound + 1);  	if (upperBound >= 0) {  		bool replaced;  		parms [upperBound] = RewriteController.CleanExtension (parms [upperBound]' settings' out replaced);  	}  	//get options from current settings  	FriendlyUrlOptions options = UrlRewriterUtils.GetOptionsFromSettings (settings);  	foreach (ExtensionUrlProvider provider in providersToCall) {  		//set active provider for exception handling  		activeProvider = provider;  		//call down to specific providers and see if we get a rewrite  		string location;  		int status;  		string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  		if (status == 0 || status == 200)//either not set' or set to '200 OK'.  		 {  			if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  				rewriteDone = true;  				//check for duplicate tabIds.  				string qsRemainder = null;  				if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  					//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  					//pattern to determine which tab matches  					//look for any other querystirng information in the already rewritten Url (ie language parameters)  					Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  					if (rewrittenUrlMatch.Groups ["qs"].Success) {  						//keep any other querystring remainders  						qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  						//initialise  					}  					//supplied value overwrites existing value' so remove from the rewritten url  					rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  				}  				if (rewrittenUrl.Contains ("?") == false) {  					//use a leading ?' not a leading &  					queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  					queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  				} else {  					//use a leading &' not a leading ?  					queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  					queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  				}  				//add querystring onto rewritten Url  				rewrittenUrl += queryString;  				if (qsRemainder != null) {  					rewrittenUrl += qsRemainder;  				}  				break;  			}  		} else {  			switch (status) {  			case 301:  				result.Action = ActionType.Redirect301;  				result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  				result.FinalUrl = location;  				break;  			case 302:  				result.Action = ActionType.Redirect302;  				result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  				result.FinalUrl = location;  				break;  			case 404:  				result.Action = ActionType.Output404;  				break;  			case 500:  				result.Action = ActionType.Output500;  				break;  			}  			newAction = true;  			//not doing a 200 status  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: foreach (ExtensionUrlProvider provider in providersToCall) {  	//set active provider for exception handling  	activeProvider = provider;  	//call down to specific providers and see if we get a rewrite  	string location;  	int status;  	string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  	if (status == 0 || status == 200)//either not set' or set to '200 OK'.  	 {  		if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  			rewriteDone = true;  			//check for duplicate tabIds.  			string qsRemainder = null;  			if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  				//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  				//pattern to determine which tab matches  				//look for any other querystirng information in the already rewritten Url (ie language parameters)  				Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  				if (rewrittenUrlMatch.Groups ["qs"].Success) {  					//keep any other querystring remainders  					qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  					//initialise  				}  				//supplied value overwrites existing value' so remove from the rewritten url  				rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  			}  			if (rewrittenUrl.Contains ("?") == false) {  				//use a leading ?' not a leading &  				queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  				queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  			} else {  				//use a leading &' not a leading ?  				queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  				queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  			}  			//add querystring onto rewritten Url  			rewrittenUrl += queryString;  			if (qsRemainder != null) {  				rewrittenUrl += qsRemainder;  			}  			break;  		}  	} else {  		switch (status) {  		case 301:  			result.Action = ActionType.Redirect301;  			result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  			result.FinalUrl = location;  			break;  		case 302:  			result.Action = ActionType.Redirect302;  			result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  			result.FinalUrl = location;  			break;  		case 404:  			result.Action = ActionType.Output404;  			break;  		case 500:  			result.Action = ActionType.Output500;  			break;  		}  		newAction = true;  		//not doing a 200 status  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: foreach (ExtensionUrlProvider provider in providersToCall) {  	//set active provider for exception handling  	activeProvider = provider;  	//call down to specific providers and see if we get a rewrite  	string location;  	int status;  	string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  	if (status == 0 || status == 200)//either not set' or set to '200 OK'.  	 {  		if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  			rewriteDone = true;  			//check for duplicate tabIds.  			string qsRemainder = null;  			if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  				//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  				//pattern to determine which tab matches  				//look for any other querystirng information in the already rewritten Url (ie language parameters)  				Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  				if (rewrittenUrlMatch.Groups ["qs"].Success) {  					//keep any other querystring remainders  					qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  					//initialise  				}  				//supplied value overwrites existing value' so remove from the rewritten url  				rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  			}  			if (rewrittenUrl.Contains ("?") == false) {  				//use a leading ?' not a leading &  				queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  				queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  			} else {  				//use a leading &' not a leading ?  				queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  				queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  			}  			//add querystring onto rewritten Url  			rewrittenUrl += queryString;  			if (qsRemainder != null) {  				rewrittenUrl += qsRemainder;  			}  			break;  		}  	} else {  		switch (status) {  		case 301:  			result.Action = ActionType.Redirect301;  			result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  			result.FinalUrl = location;  			break;  		case 302:  			result.Action = ActionType.Redirect302;  			result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  			result.FinalUrl = location;  			break;  		case 404:  			result.Action = ActionType.Output404;  			break;  		case 500:  			result.Action = ActionType.Output500;  			break;  		}  		newAction = true;  		//not doing a 200 status  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: foreach (ExtensionUrlProvider provider in providersToCall) {  	//set active provider for exception handling  	activeProvider = provider;  	//call down to specific providers and see if we get a rewrite  	string location;  	int status;  	string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  	if (status == 0 || status == 200)//either not set' or set to '200 OK'.  	 {  		if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  			rewriteDone = true;  			//check for duplicate tabIds.  			string qsRemainder = null;  			if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  				//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  				//pattern to determine which tab matches  				//look for any other querystirng information in the already rewritten Url (ie language parameters)  				Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  				if (rewrittenUrlMatch.Groups ["qs"].Success) {  					//keep any other querystring remainders  					qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  					//initialise  				}  				//supplied value overwrites existing value' so remove from the rewritten url  				rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  			}  			if (rewrittenUrl.Contains ("?") == false) {  				//use a leading ?' not a leading &  				queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  				queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  			} else {  				//use a leading &' not a leading ?  				queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  				queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  			}  			//add querystring onto rewritten Url  			rewrittenUrl += queryString;  			if (qsRemainder != null) {  				rewrittenUrl += qsRemainder;  			}  			break;  		}  	} else {  		switch (status) {  		case 301:  			result.Action = ActionType.Redirect301;  			result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  			result.FinalUrl = location;  			break;  		case 302:  			result.Action = ActionType.Redirect302;  			result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  			result.FinalUrl = location;  			break;  		case 404:  			result.Action = ActionType.Output404;  			break;  		case 500:  			result.Action = ActionType.Output500;  			break;  		}  		newAction = true;  		//not doing a 200 status  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: foreach (ExtensionUrlProvider provider in providersToCall) {  	//set active provider for exception handling  	activeProvider = provider;  	//call down to specific providers and see if we get a rewrite  	string location;  	int status;  	string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  	if (status == 0 || status == 200)//either not set' or set to '200 OK'.  	 {  		if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  			rewriteDone = true;  			//check for duplicate tabIds.  			string qsRemainder = null;  			if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  				//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  				//pattern to determine which tab matches  				//look for any other querystirng information in the already rewritten Url (ie language parameters)  				Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  				if (rewrittenUrlMatch.Groups ["qs"].Success) {  					//keep any other querystring remainders  					qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  					//initialise  				}  				//supplied value overwrites existing value' so remove from the rewritten url  				rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  			}  			if (rewrittenUrl.Contains ("?") == false) {  				//use a leading ?' not a leading &  				queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  				queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  			} else {  				//use a leading &' not a leading ?  				queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  				queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  			}  			//add querystring onto rewritten Url  			rewrittenUrl += queryString;  			if (qsRemainder != null) {  				rewrittenUrl += qsRemainder;  			}  			break;  		}  	} else {  		switch (status) {  		case 301:  			result.Action = ActionType.Redirect301;  			result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  			result.FinalUrl = location;  			break;  		case 302:  			result.Action = ActionType.Redirect302;  			result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  			result.FinalUrl = location;  			break;  		case 404:  			result.Action = ActionType.Output404;  			break;  		case 500:  			result.Action = ActionType.Output500;  			break;  		}  		newAction = true;  		//not doing a 200 status  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: foreach (ExtensionUrlProvider provider in providersToCall) {  	//set active provider for exception handling  	activeProvider = provider;  	//call down to specific providers and see if we get a rewrite  	string location;  	int status;  	string queryString = provider.TransformFriendlyUrlToQueryString (parms' result.TabId' result.PortalId' options' result.CultureCode' result.PortalAlias' ref messages' out status' out location);  	if (status == 0 || status == 200)//either not set' or set to '200 OK'.  	 {  		if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  			rewriteDone = true;  			//check for duplicate tabIds.  			string qsRemainder = null;  			if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  				//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  				//pattern to determine which tab matches  				//look for any other querystirng information in the already rewritten Url (ie language parameters)  				Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  				if (rewrittenUrlMatch.Groups ["qs"].Success) {  					//keep any other querystring remainders  					qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  					//initialise  				}  				//supplied value overwrites existing value' so remove from the rewritten url  				rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  			}  			if (rewrittenUrl.Contains ("?") == false) {  				//use a leading ?' not a leading &  				queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  				queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  			} else {  				//use a leading &' not a leading ?  				queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  				queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  			}  			//add querystring onto rewritten Url  			rewrittenUrl += queryString;  			if (qsRemainder != null) {  				rewrittenUrl += qsRemainder;  			}  			break;  		}  	} else {  		switch (status) {  		case 301:  			result.Action = ActionType.Redirect301;  			result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  			result.FinalUrl = location;  			break;  		case 302:  			result.Action = ActionType.Redirect302;  			result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  			result.FinalUrl = location;  			break;  		case 404:  			result.Action = ActionType.Output404;  			break;  		case 500:  			result.Action = ActionType.Output500;  			break;  		}  		newAction = true;  		//not doing a 200 status  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: if (status == 0 || status == 200)//either not set' or set to '200 OK'.   {  	if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  		rewriteDone = true;  		//check for duplicate tabIds.  		string qsRemainder = null;  		if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  			//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  			//pattern to determine which tab matches  			//look for any other querystirng information in the already rewritten Url (ie language parameters)  			Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  			if (rewrittenUrlMatch.Groups ["qs"].Success) {  				//keep any other querystring remainders  				qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  				//initialise  			}  			//supplied value overwrites existing value' so remove from the rewritten url  			rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  		}  		if (rewrittenUrl.Contains ("?") == false) {  			//use a leading ?' not a leading &  			queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  			queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  		} else {  			//use a leading &' not a leading ?  			queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  			queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  		}  		//add querystring onto rewritten Url  		rewrittenUrl += queryString;  		if (qsRemainder != null) {  			rewrittenUrl += qsRemainder;  		}  		break;  	}  } else {  	switch (status) {  	case 301:  		result.Action = ActionType.Redirect301;  		result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  		result.FinalUrl = location;  		break;  	case 302:  		result.Action = ActionType.Redirect302;  		result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  		result.FinalUrl = location;  		break;  	case 404:  		result.Action = ActionType.Output404;  		break;  	case 500:  		result.Action = ActionType.Output500;  		break;  	}  	newAction = true;  	//not doing a 200 status  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: if (status == 0 || status == 200)//either not set' or set to '200 OK'.   {  	if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  		rewriteDone = true;  		//check for duplicate tabIds.  		string qsRemainder = null;  		if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  			//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  			//pattern to determine which tab matches  			//look for any other querystirng information in the already rewritten Url (ie language parameters)  			Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  			if (rewrittenUrlMatch.Groups ["qs"].Success) {  				//keep any other querystring remainders  				qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  				//initialise  			}  			//supplied value overwrites existing value' so remove from the rewritten url  			rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  		}  		if (rewrittenUrl.Contains ("?") == false) {  			//use a leading ?' not a leading &  			queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  			queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  		} else {  			//use a leading &' not a leading ?  			queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  			queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  		}  		//add querystring onto rewritten Url  		rewrittenUrl += queryString;  		if (qsRemainder != null) {  			rewrittenUrl += qsRemainder;  		}  		break;  	}  } else {  	switch (status) {  	case 301:  		result.Action = ActionType.Redirect301;  		result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  		result.FinalUrl = location;  		break;  	case 302:  		result.Action = ActionType.Redirect302;  		result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  		result.FinalUrl = location;  		break;  	case 404:  		result.Action = ActionType.Output404;  		break;  	case 500:  		result.Action = ActionType.Output500;  		break;  	}  	newAction = true;  	//not doing a 200 status  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: if (status == 0 || status == 200)//either not set' or set to '200 OK'.   {  	if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  		rewriteDone = true;  		//check for duplicate tabIds.  		string qsRemainder = null;  		if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  			//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  			//pattern to determine which tab matches  			//look for any other querystirng information in the already rewritten Url (ie language parameters)  			Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  			if (rewrittenUrlMatch.Groups ["qs"].Success) {  				//keep any other querystring remainders  				qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  				//initialise  			}  			//supplied value overwrites existing value' so remove from the rewritten url  			rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  		}  		if (rewrittenUrl.Contains ("?") == false) {  			//use a leading ?' not a leading &  			queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  			queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  		} else {  			//use a leading &' not a leading ?  			queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  			queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  		}  		//add querystring onto rewritten Url  		rewrittenUrl += queryString;  		if (qsRemainder != null) {  			rewrittenUrl += qsRemainder;  		}  		break;  	}  } else {  	switch (status) {  	case 301:  		result.Action = ActionType.Redirect301;  		result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  		result.FinalUrl = location;  		break;  	case 302:  		result.Action = ActionType.Redirect302;  		result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  		result.FinalUrl = location;  		break;  	case 404:  		result.Action = ActionType.Output404;  		break;  	case 500:  		result.Action = ActionType.Output500;  		break;  	}  	newAction = true;  	//not doing a 200 status  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: if (status == 0 || status == 200)//either not set' or set to '200 OK'.   {  	if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  		rewriteDone = true;  		//check for duplicate tabIds.  		string qsRemainder = null;  		if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  			//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  			//pattern to determine which tab matches  			//look for any other querystirng information in the already rewritten Url (ie language parameters)  			Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  			if (rewrittenUrlMatch.Groups ["qs"].Success) {  				//keep any other querystring remainders  				qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  				//initialise  			}  			//supplied value overwrites existing value' so remove from the rewritten url  			rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  		}  		if (rewrittenUrl.Contains ("?") == false) {  			//use a leading ?' not a leading &  			queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  			queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  		} else {  			//use a leading &' not a leading ?  			queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  			queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  		}  		//add querystring onto rewritten Url  		rewrittenUrl += queryString;  		if (qsRemainder != null) {  			rewrittenUrl += qsRemainder;  		}  		break;  	}  } else {  	switch (status) {  	case 301:  		result.Action = ActionType.Redirect301;  		result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  		result.FinalUrl = location;  		break;  	case 302:  		result.Action = ActionType.Redirect302;  		result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  		result.FinalUrl = location;  		break;  	case 404:  		result.Action = ActionType.Output404;  		break;  	case 500:  		result.Action = ActionType.Output500;  		break;  	}  	newAction = true;  	//not doing a 200 status  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: if (status == 0 || status == 200)//either not set' or set to '200 OK'.   {  	if (!string.IsNullOrEmpty (queryString) && queryString != newUrl) {  		rewriteDone = true;  		//check for duplicate tabIds.  		string qsRemainder = null;  		if (Regex.IsMatch (queryString' @"tabid=\d+"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) {  			//930 : look for other querystring information in the rewritten Url' or invalid rewritten urls can be created  			//pattern to determine which tab matches  			//look for any other querystirng information in the already rewritten Url (ie language parameters)  			Match rewrittenUrlMatch = RewrittenUrlRegex.Match (rewrittenUrl);  			if (rewrittenUrlMatch.Groups ["qs"].Success) {  				//keep any other querystring remainders  				qsRemainder = rewrittenUrlMatch.Groups ["qs"].Captures.Cast<Capture> ().Aggregate (""' (current' qsCapture) => current + qsCapture.Value);  				//initialise  			}  			//supplied value overwrites existing value' so remove from the rewritten url  			rewrittenUrl = RewrittenUrlRegex.Replace (rewrittenUrl' "");  		}  		if (rewrittenUrl.Contains ("?") == false) {  			//use a leading ?' not a leading &  			queryString = FriendlyUrlController.EnsureNotLeadingChar ("&"' queryString);  			queryString = FriendlyUrlController.EnsureLeadingChar ("?"' queryString);  		} else {  			//use a leading &' not a leading ?  			queryString = FriendlyUrlController.EnsureNotLeadingChar ("?"' queryString);  			queryString = FriendlyUrlController.EnsureLeadingChar ("&"' queryString);  		}  		//add querystring onto rewritten Url  		rewrittenUrl += queryString;  		if (qsRemainder != null) {  			rewrittenUrl += qsRemainder;  		}  		break;  	}  } else {  	switch (status) {  	case 301:  		result.Action = ActionType.Redirect301;  		result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  		result.FinalUrl = location;  		break;  	case 302:  		result.Action = ActionType.Redirect302;  		result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  		result.FinalUrl = location;  		break;  	case 404:  		result.Action = ActionType.Output404;  		break;  	case 500:  		result.Action = ActionType.Output500;  		break;  	}  	newAction = true;  	//not doing a 200 status  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: switch (status) {  case 301:  	result.Action = ActionType.Redirect301;  	result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  	result.FinalUrl = location;  	break;  case 302:  	result.Action = ActionType.Redirect302;  	result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  	result.FinalUrl = location;  	break;  case 404:  	result.Action = ActionType.Output404;  	break;  case 500:  	result.Action = ActionType.Output500;  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: switch (status) {  case 301:  	result.Action = ActionType.Redirect301;  	result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  	result.FinalUrl = location;  	break;  case 302:  	result.Action = ActionType.Redirect302;  	result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  	result.FinalUrl = location;  	break;  case 404:  	result.Action = ActionType.Output404;  	break;  case 500:  	result.Action = ActionType.Output500;  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: switch (status) {  case 301:  	result.Action = ActionType.Redirect301;  	result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  	result.FinalUrl = location;  	break;  case 302:  	result.Action = ActionType.Redirect302;  	result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  	result.FinalUrl = location;  	break;  case 404:  	result.Action = ActionType.Output404;  	break;  case 500:  	result.Action = ActionType.Output500;  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following statement contains a magic number: switch (status) {  case 301:  	result.Action = ActionType.Redirect301;  	result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  	result.FinalUrl = location;  	break;  case 302:  	result.Action = ActionType.Redirect302;  	result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  	result.FinalUrl = location;  	break;  case 404:  	result.Action = ActionType.Output404;  	break;  case 500:  	result.Action = ActionType.Output500;  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,GetOptionsFromSettings,The following statement contains a magic number: return new FriendlyUrlOptions {  	PunctuationReplacement = (settings.ReplaceSpaceWith != FriendlyUrlSettings.ReplaceSpaceWithNothing) ? settings.ReplaceSpaceWith : String.Empty'  	SpaceEncoding = settings.SpaceEncodingValue'  	MaxUrlPathLength = 200'  	ConvertDiacriticChars = settings.AutoAsciiConvert'  	RegexMatch = settings.RegexMatch'  	IllegalChars = settings.IllegalChars'  	ReplaceChars = settings.ReplaceChars'  	ReplaceDoubleChars = settings.ReplaceDoubleChars'  	ReplaceCharWithChar = settings.ReplaceCharacterDictionary'  	PageExtension = settings.PageExtensionUsageType == PageExtensionUsageType.Never ? "" : settings.PageExtension  };  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (redirectActions != null && redirectActions.Count > 0) {  	try {  		#region trycatch block  		string rewrittenUrl = result.RewritePath ?? result.RawUrl;  		List<ParameterRedirectAction> parmRedirects = null;  		//find the matching redirects for the tabid  		int tabId = result.TabId;  		if (tabId > -1) {  			if (redirectActions.ContainsKey (tabId)) {  				//find the right set of replaced actions for this tab  				parmRedirects = redirectActions [tabId];  			}  		}  		//check for 'all tabs' redirections  		if (redirectActions.ContainsKey (-1))//-1 means 'all tabs' - rewriting across all tabs  		 {  			//initialise to empty collection if there are no specific tab redirects  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			//add in the all redirects  			List<ParameterRedirectAction> allRedirects = redirectActions [-1];  			parmRedirects.AddRange (allRedirects);  			//add the 'all' range to the tab range  			tabId = result.TabId;  		}  		if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  			//for the default.aspx page  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  			parmRedirects.AddRange (defaultRedirects);  			//add the default.aspx redirects to the list  			tabId = result.TabId;  		}  		//726 : allow for site-root redirects' ie redirects where no page match  		if (redirectActions.ContainsKey (-3)) {  			//request is for site root  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  			parmRedirects.AddRange (siteRootRedirects);  			//add the site root redirects to the collection  		}  		//OK what we have now is a list of redirects for the currently requested tab (either because it was specified by tab id'  		// or because there is a replaced for 'all tabs'  		if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  			foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  				//regex test each replaced to see if there is a match between the parameter string  				//and the parmRedirect  				string compareWith = rewrittenUrl;  				var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  				Match regexMatch = redirectRegex.Match (compareWith);  				bool success = regexMatch.Success;  				bool siteRootTried = false;  				//if no match' but there is a site root redirect to try  				if (!success && parmRedirect.TabId == -3) {  					siteRootTried = true;  					compareWith = result.OriginalPathNoAlias;  					regexMatch = redirectRegex.Match (compareWith);  					success = regexMatch.Success;  				}  				if (!success) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  					if (siteRootTried) {  						result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  					}  				} else {  					//success! there was a match in the parameters  					string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  					if (siteRootTried) {  						result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  					} else {  						result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  					}  					string finalUrl = "";  					//now we need to generate the friendly Url  					//first check to see if the parameter replacement string has a destination tabid specified  					if (parms.ToLower ().Contains ("tabid/")) {  						//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   						//redirect the page as well as redirecting the parameter values  						string[] parmParts = parms.Split ('/');  						bool tabIdNext = false;  						foreach (string parmPart in parmParts) {  							if (tabIdNext) {  								//changes the tabid of page' effects a page redirect along with a parameter redirect  								Int32.TryParse (parmPart' out tabId);  								parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  								//remove the tabid/xx from the path  								break;  								//that's it' we're finished  							}  							if (parmPart.ToLower () == "tabid") {  								tabIdNext = true;  							}  						}  					} else if (tabId == -1) {  						//find the home tabid for this portal  						//735 : switch to custom method for getting portal  						PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  						tabId = portal.HomeTabId;  					}  					if (parmRedirect.ChangeToSiteRoot) {  						//when change to siteroot requested' new path goes directly off the portal alias  						//so set the finalUrl as the poratl alias  						finalUrl = result.Scheme + result.HttpAlias + "/";  					} else {  						//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  						if (tabId > -1) {  							TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  							if (tab != null) {  								string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  								string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  								if (friendlyUrlNoParms.EndsWith ("/") == false) {  									friendlyUrlNoParms += "/";  								}  								finalUrl = friendlyUrlNoParms;  							}  							if (tab == null) {  								result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  							} else {  								result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  							}  						}  					}  					if (parms.StartsWith ("//")) {  						parms = parms.Substring (2);  					}  					if (parms.StartsWith ("/")) {  						parms = parms.Substring (1);  					}  					if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  						if (parms.EndsWith ("/")) {  							parms = parms.TrimEnd ('/');  						}  						if (parms.Length > 0) {  							//we are adding more parms onto the end' so remove the page extension  							//from the parameter list  							//946 : exception when settings.PageExtension value is empty  							parms += settings.PageExtension;  							//816: if page extension is /' then don't do this  							if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  								finalUrl = finalUrl.Replace (settings.PageExtension' "");  							}  						} else {  							//we are removing all the parms altogether' so  							//the url needs to end in the page extension only  							//816: if page extension is /' then don't do this  							if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  								finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  							}  						}  					}  					//put the replaced parms back on the end  					finalUrl += parms;  					//set the final url  					result.FinalUrl = finalUrl;  					result.Reason = RedirectReason.Custom_Redirect;  					switch (parmRedirect.Action) {  					case "301":  						result.Action = ActionType.Redirect301;  						break;  					case "302":  						result.Action = ActionType.Redirect302;  						break;  					case "404":  						result.Action = ActionType.Output404;  						break;  					}  					redirect = true;  					break;  				}  			}  		}  		#endregion  	} catch (Exception ex) {  		Services.Exceptions.Exceptions.LogException (ex);  		messages.Add ("Exception: " + ex.Message + "\n" + ex.StackTrace);  	} finally {  		if (messages.Count > 0) {  			result.DebugMessages.AddRange (messages);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (redirectActions != null && redirectActions.Count > 0) {  	try {  		#region trycatch block  		string rewrittenUrl = result.RewritePath ?? result.RawUrl;  		List<ParameterRedirectAction> parmRedirects = null;  		//find the matching redirects for the tabid  		int tabId = result.TabId;  		if (tabId > -1) {  			if (redirectActions.ContainsKey (tabId)) {  				//find the right set of replaced actions for this tab  				parmRedirects = redirectActions [tabId];  			}  		}  		//check for 'all tabs' redirections  		if (redirectActions.ContainsKey (-1))//-1 means 'all tabs' - rewriting across all tabs  		 {  			//initialise to empty collection if there are no specific tab redirects  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			//add in the all redirects  			List<ParameterRedirectAction> allRedirects = redirectActions [-1];  			parmRedirects.AddRange (allRedirects);  			//add the 'all' range to the tab range  			tabId = result.TabId;  		}  		if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  			//for the default.aspx page  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  			parmRedirects.AddRange (defaultRedirects);  			//add the default.aspx redirects to the list  			tabId = result.TabId;  		}  		//726 : allow for site-root redirects' ie redirects where no page match  		if (redirectActions.ContainsKey (-3)) {  			//request is for site root  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  			parmRedirects.AddRange (siteRootRedirects);  			//add the site root redirects to the collection  		}  		//OK what we have now is a list of redirects for the currently requested tab (either because it was specified by tab id'  		// or because there is a replaced for 'all tabs'  		if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  			foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  				//regex test each replaced to see if there is a match between the parameter string  				//and the parmRedirect  				string compareWith = rewrittenUrl;  				var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  				Match regexMatch = redirectRegex.Match (compareWith);  				bool success = regexMatch.Success;  				bool siteRootTried = false;  				//if no match' but there is a site root redirect to try  				if (!success && parmRedirect.TabId == -3) {  					siteRootTried = true;  					compareWith = result.OriginalPathNoAlias;  					regexMatch = redirectRegex.Match (compareWith);  					success = regexMatch.Success;  				}  				if (!success) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  					if (siteRootTried) {  						result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  					}  				} else {  					//success! there was a match in the parameters  					string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  					if (siteRootTried) {  						result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  					} else {  						result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  					}  					string finalUrl = "";  					//now we need to generate the friendly Url  					//first check to see if the parameter replacement string has a destination tabid specified  					if (parms.ToLower ().Contains ("tabid/")) {  						//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   						//redirect the page as well as redirecting the parameter values  						string[] parmParts = parms.Split ('/');  						bool tabIdNext = false;  						foreach (string parmPart in parmParts) {  							if (tabIdNext) {  								//changes the tabid of page' effects a page redirect along with a parameter redirect  								Int32.TryParse (parmPart' out tabId);  								parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  								//remove the tabid/xx from the path  								break;  								//that's it' we're finished  							}  							if (parmPart.ToLower () == "tabid") {  								tabIdNext = true;  							}  						}  					} else if (tabId == -1) {  						//find the home tabid for this portal  						//735 : switch to custom method for getting portal  						PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  						tabId = portal.HomeTabId;  					}  					if (parmRedirect.ChangeToSiteRoot) {  						//when change to siteroot requested' new path goes directly off the portal alias  						//so set the finalUrl as the poratl alias  						finalUrl = result.Scheme + result.HttpAlias + "/";  					} else {  						//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  						if (tabId > -1) {  							TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  							if (tab != null) {  								string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  								string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  								if (friendlyUrlNoParms.EndsWith ("/") == false) {  									friendlyUrlNoParms += "/";  								}  								finalUrl = friendlyUrlNoParms;  							}  							if (tab == null) {  								result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  							} else {  								result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  							}  						}  					}  					if (parms.StartsWith ("//")) {  						parms = parms.Substring (2);  					}  					if (parms.StartsWith ("/")) {  						parms = parms.Substring (1);  					}  					if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  						if (parms.EndsWith ("/")) {  							parms = parms.TrimEnd ('/');  						}  						if (parms.Length > 0) {  							//we are adding more parms onto the end' so remove the page extension  							//from the parameter list  							//946 : exception when settings.PageExtension value is empty  							parms += settings.PageExtension;  							//816: if page extension is /' then don't do this  							if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  								finalUrl = finalUrl.Replace (settings.PageExtension' "");  							}  						} else {  							//we are removing all the parms altogether' so  							//the url needs to end in the page extension only  							//816: if page extension is /' then don't do this  							if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  								finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  							}  						}  					}  					//put the replaced parms back on the end  					finalUrl += parms;  					//set the final url  					result.FinalUrl = finalUrl;  					result.Reason = RedirectReason.Custom_Redirect;  					switch (parmRedirect.Action) {  					case "301":  						result.Action = ActionType.Redirect301;  						break;  					case "302":  						result.Action = ActionType.Redirect302;  						break;  					case "404":  						result.Action = ActionType.Output404;  						break;  					}  					redirect = true;  					break;  				}  			}  		}  		#endregion  	} catch (Exception ex) {  		Services.Exceptions.Exceptions.LogException (ex);  		messages.Add ("Exception: " + ex.Message + "\n" + ex.StackTrace);  	} finally {  		if (messages.Count > 0) {  			result.DebugMessages.AddRange (messages);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (redirectActions != null && redirectActions.Count > 0) {  	try {  		#region trycatch block  		string rewrittenUrl = result.RewritePath ?? result.RawUrl;  		List<ParameterRedirectAction> parmRedirects = null;  		//find the matching redirects for the tabid  		int tabId = result.TabId;  		if (tabId > -1) {  			if (redirectActions.ContainsKey (tabId)) {  				//find the right set of replaced actions for this tab  				parmRedirects = redirectActions [tabId];  			}  		}  		//check for 'all tabs' redirections  		if (redirectActions.ContainsKey (-1))//-1 means 'all tabs' - rewriting across all tabs  		 {  			//initialise to empty collection if there are no specific tab redirects  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			//add in the all redirects  			List<ParameterRedirectAction> allRedirects = redirectActions [-1];  			parmRedirects.AddRange (allRedirects);  			//add the 'all' range to the tab range  			tabId = result.TabId;  		}  		if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  			//for the default.aspx page  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  			parmRedirects.AddRange (defaultRedirects);  			//add the default.aspx redirects to the list  			tabId = result.TabId;  		}  		//726 : allow for site-root redirects' ie redirects where no page match  		if (redirectActions.ContainsKey (-3)) {  			//request is for site root  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  			parmRedirects.AddRange (siteRootRedirects);  			//add the site root redirects to the collection  		}  		//OK what we have now is a list of redirects for the currently requested tab (either because it was specified by tab id'  		// or because there is a replaced for 'all tabs'  		if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  			foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  				//regex test each replaced to see if there is a match between the parameter string  				//and the parmRedirect  				string compareWith = rewrittenUrl;  				var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  				Match regexMatch = redirectRegex.Match (compareWith);  				bool success = regexMatch.Success;  				bool siteRootTried = false;  				//if no match' but there is a site root redirect to try  				if (!success && parmRedirect.TabId == -3) {  					siteRootTried = true;  					compareWith = result.OriginalPathNoAlias;  					regexMatch = redirectRegex.Match (compareWith);  					success = regexMatch.Success;  				}  				if (!success) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  					if (siteRootTried) {  						result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  					}  				} else {  					//success! there was a match in the parameters  					string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  					if (siteRootTried) {  						result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  					} else {  						result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  					}  					string finalUrl = "";  					//now we need to generate the friendly Url  					//first check to see if the parameter replacement string has a destination tabid specified  					if (parms.ToLower ().Contains ("tabid/")) {  						//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   						//redirect the page as well as redirecting the parameter values  						string[] parmParts = parms.Split ('/');  						bool tabIdNext = false;  						foreach (string parmPart in parmParts) {  							if (tabIdNext) {  								//changes the tabid of page' effects a page redirect along with a parameter redirect  								Int32.TryParse (parmPart' out tabId);  								parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  								//remove the tabid/xx from the path  								break;  								//that's it' we're finished  							}  							if (parmPart.ToLower () == "tabid") {  								tabIdNext = true;  							}  						}  					} else if (tabId == -1) {  						//find the home tabid for this portal  						//735 : switch to custom method for getting portal  						PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  						tabId = portal.HomeTabId;  					}  					if (parmRedirect.ChangeToSiteRoot) {  						//when change to siteroot requested' new path goes directly off the portal alias  						//so set the finalUrl as the poratl alias  						finalUrl = result.Scheme + result.HttpAlias + "/";  					} else {  						//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  						if (tabId > -1) {  							TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  							if (tab != null) {  								string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  								string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  								if (friendlyUrlNoParms.EndsWith ("/") == false) {  									friendlyUrlNoParms += "/";  								}  								finalUrl = friendlyUrlNoParms;  							}  							if (tab == null) {  								result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  							} else {  								result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  							}  						}  					}  					if (parms.StartsWith ("//")) {  						parms = parms.Substring (2);  					}  					if (parms.StartsWith ("/")) {  						parms = parms.Substring (1);  					}  					if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  						if (parms.EndsWith ("/")) {  							parms = parms.TrimEnd ('/');  						}  						if (parms.Length > 0) {  							//we are adding more parms onto the end' so remove the page extension  							//from the parameter list  							//946 : exception when settings.PageExtension value is empty  							parms += settings.PageExtension;  							//816: if page extension is /' then don't do this  							if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  								finalUrl = finalUrl.Replace (settings.PageExtension' "");  							}  						} else {  							//we are removing all the parms altogether' so  							//the url needs to end in the page extension only  							//816: if page extension is /' then don't do this  							if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  								finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  							}  						}  					}  					//put the replaced parms back on the end  					finalUrl += parms;  					//set the final url  					result.FinalUrl = finalUrl;  					result.Reason = RedirectReason.Custom_Redirect;  					switch (parmRedirect.Action) {  					case "301":  						result.Action = ActionType.Redirect301;  						break;  					case "302":  						result.Action = ActionType.Redirect302;  						break;  					case "404":  						result.Action = ActionType.Output404;  						break;  					}  					redirect = true;  					break;  				}  			}  		}  		#endregion  	} catch (Exception ex) {  		Services.Exceptions.Exceptions.LogException (ex);  		messages.Add ("Exception: " + ex.Message + "\n" + ex.StackTrace);  	} finally {  		if (messages.Count > 0) {  			result.DebugMessages.AddRange (messages);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (redirectActions != null && redirectActions.Count > 0) {  	try {  		#region trycatch block  		string rewrittenUrl = result.RewritePath ?? result.RawUrl;  		List<ParameterRedirectAction> parmRedirects = null;  		//find the matching redirects for the tabid  		int tabId = result.TabId;  		if (tabId > -1) {  			if (redirectActions.ContainsKey (tabId)) {  				//find the right set of replaced actions for this tab  				parmRedirects = redirectActions [tabId];  			}  		}  		//check for 'all tabs' redirections  		if (redirectActions.ContainsKey (-1))//-1 means 'all tabs' - rewriting across all tabs  		 {  			//initialise to empty collection if there are no specific tab redirects  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			//add in the all redirects  			List<ParameterRedirectAction> allRedirects = redirectActions [-1];  			parmRedirects.AddRange (allRedirects);  			//add the 'all' range to the tab range  			tabId = result.TabId;  		}  		if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  			//for the default.aspx page  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  			parmRedirects.AddRange (defaultRedirects);  			//add the default.aspx redirects to the list  			tabId = result.TabId;  		}  		//726 : allow for site-root redirects' ie redirects where no page match  		if (redirectActions.ContainsKey (-3)) {  			//request is for site root  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  			parmRedirects.AddRange (siteRootRedirects);  			//add the site root redirects to the collection  		}  		//OK what we have now is a list of redirects for the currently requested tab (either because it was specified by tab id'  		// or because there is a replaced for 'all tabs'  		if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  			foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  				//regex test each replaced to see if there is a match between the parameter string  				//and the parmRedirect  				string compareWith = rewrittenUrl;  				var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  				Match regexMatch = redirectRegex.Match (compareWith);  				bool success = regexMatch.Success;  				bool siteRootTried = false;  				//if no match' but there is a site root redirect to try  				if (!success && parmRedirect.TabId == -3) {  					siteRootTried = true;  					compareWith = result.OriginalPathNoAlias;  					regexMatch = redirectRegex.Match (compareWith);  					success = regexMatch.Success;  				}  				if (!success) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  					if (siteRootTried) {  						result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  					}  				} else {  					//success! there was a match in the parameters  					string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  					if (siteRootTried) {  						result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  					} else {  						result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  					}  					string finalUrl = "";  					//now we need to generate the friendly Url  					//first check to see if the parameter replacement string has a destination tabid specified  					if (parms.ToLower ().Contains ("tabid/")) {  						//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   						//redirect the page as well as redirecting the parameter values  						string[] parmParts = parms.Split ('/');  						bool tabIdNext = false;  						foreach (string parmPart in parmParts) {  							if (tabIdNext) {  								//changes the tabid of page' effects a page redirect along with a parameter redirect  								Int32.TryParse (parmPart' out tabId);  								parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  								//remove the tabid/xx from the path  								break;  								//that's it' we're finished  							}  							if (parmPart.ToLower () == "tabid") {  								tabIdNext = true;  							}  						}  					} else if (tabId == -1) {  						//find the home tabid for this portal  						//735 : switch to custom method for getting portal  						PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  						tabId = portal.HomeTabId;  					}  					if (parmRedirect.ChangeToSiteRoot) {  						//when change to siteroot requested' new path goes directly off the portal alias  						//so set the finalUrl as the poratl alias  						finalUrl = result.Scheme + result.HttpAlias + "/";  					} else {  						//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  						if (tabId > -1) {  							TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  							if (tab != null) {  								string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  								string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  								if (friendlyUrlNoParms.EndsWith ("/") == false) {  									friendlyUrlNoParms += "/";  								}  								finalUrl = friendlyUrlNoParms;  							}  							if (tab == null) {  								result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  							} else {  								result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  							}  						}  					}  					if (parms.StartsWith ("//")) {  						parms = parms.Substring (2);  					}  					if (parms.StartsWith ("/")) {  						parms = parms.Substring (1);  					}  					if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  						if (parms.EndsWith ("/")) {  							parms = parms.TrimEnd ('/');  						}  						if (parms.Length > 0) {  							//we are adding more parms onto the end' so remove the page extension  							//from the parameter list  							//946 : exception when settings.PageExtension value is empty  							parms += settings.PageExtension;  							//816: if page extension is /' then don't do this  							if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  								finalUrl = finalUrl.Replace (settings.PageExtension' "");  							}  						} else {  							//we are removing all the parms altogether' so  							//the url needs to end in the page extension only  							//816: if page extension is /' then don't do this  							if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  								finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  							}  						}  					}  					//put the replaced parms back on the end  					finalUrl += parms;  					//set the final url  					result.FinalUrl = finalUrl;  					result.Reason = RedirectReason.Custom_Redirect;  					switch (parmRedirect.Action) {  					case "301":  						result.Action = ActionType.Redirect301;  						break;  					case "302":  						result.Action = ActionType.Redirect302;  						break;  					case "404":  						result.Action = ActionType.Output404;  						break;  					}  					redirect = true;  					break;  				}  			}  		}  		#endregion  	} catch (Exception ex) {  		Services.Exceptions.Exceptions.LogException (ex);  		messages.Add ("Exception: " + ex.Message + "\n" + ex.StackTrace);  	} finally {  		if (messages.Count > 0) {  			result.DebugMessages.AddRange (messages);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (redirectActions != null && redirectActions.Count > 0) {  	try {  		#region trycatch block  		string rewrittenUrl = result.RewritePath ?? result.RawUrl;  		List<ParameterRedirectAction> parmRedirects = null;  		//find the matching redirects for the tabid  		int tabId = result.TabId;  		if (tabId > -1) {  			if (redirectActions.ContainsKey (tabId)) {  				//find the right set of replaced actions for this tab  				parmRedirects = redirectActions [tabId];  			}  		}  		//check for 'all tabs' redirections  		if (redirectActions.ContainsKey (-1))//-1 means 'all tabs' - rewriting across all tabs  		 {  			//initialise to empty collection if there are no specific tab redirects  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			//add in the all redirects  			List<ParameterRedirectAction> allRedirects = redirectActions [-1];  			parmRedirects.AddRange (allRedirects);  			//add the 'all' range to the tab range  			tabId = result.TabId;  		}  		if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  			//for the default.aspx page  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  			parmRedirects.AddRange (defaultRedirects);  			//add the default.aspx redirects to the list  			tabId = result.TabId;  		}  		//726 : allow for site-root redirects' ie redirects where no page match  		if (redirectActions.ContainsKey (-3)) {  			//request is for site root  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  			parmRedirects.AddRange (siteRootRedirects);  			//add the site root redirects to the collection  		}  		//OK what we have now is a list of redirects for the currently requested tab (either because it was specified by tab id'  		// or because there is a replaced for 'all tabs'  		if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  			foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  				//regex test each replaced to see if there is a match between the parameter string  				//and the parmRedirect  				string compareWith = rewrittenUrl;  				var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  				Match regexMatch = redirectRegex.Match (compareWith);  				bool success = regexMatch.Success;  				bool siteRootTried = false;  				//if no match' but there is a site root redirect to try  				if (!success && parmRedirect.TabId == -3) {  					siteRootTried = true;  					compareWith = result.OriginalPathNoAlias;  					regexMatch = redirectRegex.Match (compareWith);  					success = regexMatch.Success;  				}  				if (!success) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  					if (siteRootTried) {  						result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  					}  				} else {  					//success! there was a match in the parameters  					string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  					if (siteRootTried) {  						result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  					} else {  						result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  					}  					string finalUrl = "";  					//now we need to generate the friendly Url  					//first check to see if the parameter replacement string has a destination tabid specified  					if (parms.ToLower ().Contains ("tabid/")) {  						//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   						//redirect the page as well as redirecting the parameter values  						string[] parmParts = parms.Split ('/');  						bool tabIdNext = false;  						foreach (string parmPart in parmParts) {  							if (tabIdNext) {  								//changes the tabid of page' effects a page redirect along with a parameter redirect  								Int32.TryParse (parmPart' out tabId);  								parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  								//remove the tabid/xx from the path  								break;  								//that's it' we're finished  							}  							if (parmPart.ToLower () == "tabid") {  								tabIdNext = true;  							}  						}  					} else if (tabId == -1) {  						//find the home tabid for this portal  						//735 : switch to custom method for getting portal  						PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  						tabId = portal.HomeTabId;  					}  					if (parmRedirect.ChangeToSiteRoot) {  						//when change to siteroot requested' new path goes directly off the portal alias  						//so set the finalUrl as the poratl alias  						finalUrl = result.Scheme + result.HttpAlias + "/";  					} else {  						//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  						if (tabId > -1) {  							TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  							if (tab != null) {  								string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  								string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  								if (friendlyUrlNoParms.EndsWith ("/") == false) {  									friendlyUrlNoParms += "/";  								}  								finalUrl = friendlyUrlNoParms;  							}  							if (tab == null) {  								result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  							} else {  								result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  							}  						}  					}  					if (parms.StartsWith ("//")) {  						parms = parms.Substring (2);  					}  					if (parms.StartsWith ("/")) {  						parms = parms.Substring (1);  					}  					if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  						if (parms.EndsWith ("/")) {  							parms = parms.TrimEnd ('/');  						}  						if (parms.Length > 0) {  							//we are adding more parms onto the end' so remove the page extension  							//from the parameter list  							//946 : exception when settings.PageExtension value is empty  							parms += settings.PageExtension;  							//816: if page extension is /' then don't do this  							if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  								finalUrl = finalUrl.Replace (settings.PageExtension' "");  							}  						} else {  							//we are removing all the parms altogether' so  							//the url needs to end in the page extension only  							//816: if page extension is /' then don't do this  							if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  								finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  							}  						}  					}  					//put the replaced parms back on the end  					finalUrl += parms;  					//set the final url  					result.FinalUrl = finalUrl;  					result.Reason = RedirectReason.Custom_Redirect;  					switch (parmRedirect.Action) {  					case "301":  						result.Action = ActionType.Redirect301;  						break;  					case "302":  						result.Action = ActionType.Redirect302;  						break;  					case "404":  						result.Action = ActionType.Output404;  						break;  					}  					redirect = true;  					break;  				}  			}  		}  		#endregion  	} catch (Exception ex) {  		Services.Exceptions.Exceptions.LogException (ex);  		messages.Add ("Exception: " + ex.Message + "\n" + ex.StackTrace);  	} finally {  		if (messages.Count > 0) {  			result.DebugMessages.AddRange (messages);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (redirectActions != null && redirectActions.Count > 0) {  	try {  		#region trycatch block  		string rewrittenUrl = result.RewritePath ?? result.RawUrl;  		List<ParameterRedirectAction> parmRedirects = null;  		//find the matching redirects for the tabid  		int tabId = result.TabId;  		if (tabId > -1) {  			if (redirectActions.ContainsKey (tabId)) {  				//find the right set of replaced actions for this tab  				parmRedirects = redirectActions [tabId];  			}  		}  		//check for 'all tabs' redirections  		if (redirectActions.ContainsKey (-1))//-1 means 'all tabs' - rewriting across all tabs  		 {  			//initialise to empty collection if there are no specific tab redirects  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			//add in the all redirects  			List<ParameterRedirectAction> allRedirects = redirectActions [-1];  			parmRedirects.AddRange (allRedirects);  			//add the 'all' range to the tab range  			tabId = result.TabId;  		}  		if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  			//for the default.aspx page  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  			parmRedirects.AddRange (defaultRedirects);  			//add the default.aspx redirects to the list  			tabId = result.TabId;  		}  		//726 : allow for site-root redirects' ie redirects where no page match  		if (redirectActions.ContainsKey (-3)) {  			//request is for site root  			if (parmRedirects == null) {  				parmRedirects = new List<ParameterRedirectAction> ();  			}  			List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  			parmRedirects.AddRange (siteRootRedirects);  			//add the site root redirects to the collection  		}  		//OK what we have now is a list of redirects for the currently requested tab (either because it was specified by tab id'  		// or because there is a replaced for 'all tabs'  		if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  			foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  				//regex test each replaced to see if there is a match between the parameter string  				//and the parmRedirect  				string compareWith = rewrittenUrl;  				var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  				Match regexMatch = redirectRegex.Match (compareWith);  				bool success = regexMatch.Success;  				bool siteRootTried = false;  				//if no match' but there is a site root redirect to try  				if (!success && parmRedirect.TabId == -3) {  					siteRootTried = true;  					compareWith = result.OriginalPathNoAlias;  					regexMatch = redirectRegex.Match (compareWith);  					success = regexMatch.Success;  				}  				if (!success) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  					if (siteRootTried) {  						result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  					}  				} else {  					//success! there was a match in the parameters  					string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  					if (siteRootTried) {  						result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  					} else {  						result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  					}  					string finalUrl = "";  					//now we need to generate the friendly Url  					//first check to see if the parameter replacement string has a destination tabid specified  					if (parms.ToLower ().Contains ("tabid/")) {  						//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   						//redirect the page as well as redirecting the parameter values  						string[] parmParts = parms.Split ('/');  						bool tabIdNext = false;  						foreach (string parmPart in parmParts) {  							if (tabIdNext) {  								//changes the tabid of page' effects a page redirect along with a parameter redirect  								Int32.TryParse (parmPart' out tabId);  								parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  								//remove the tabid/xx from the path  								break;  								//that's it' we're finished  							}  							if (parmPart.ToLower () == "tabid") {  								tabIdNext = true;  							}  						}  					} else if (tabId == -1) {  						//find the home tabid for this portal  						//735 : switch to custom method for getting portal  						PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  						tabId = portal.HomeTabId;  					}  					if (parmRedirect.ChangeToSiteRoot) {  						//when change to siteroot requested' new path goes directly off the portal alias  						//so set the finalUrl as the poratl alias  						finalUrl = result.Scheme + result.HttpAlias + "/";  					} else {  						//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  						if (tabId > -1) {  							TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  							if (tab != null) {  								string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  								string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  								if (friendlyUrlNoParms.EndsWith ("/") == false) {  									friendlyUrlNoParms += "/";  								}  								finalUrl = friendlyUrlNoParms;  							}  							if (tab == null) {  								result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  							} else {  								result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  							}  						}  					}  					if (parms.StartsWith ("//")) {  						parms = parms.Substring (2);  					}  					if (parms.StartsWith ("/")) {  						parms = parms.Substring (1);  					}  					if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  						if (parms.EndsWith ("/")) {  							parms = parms.TrimEnd ('/');  						}  						if (parms.Length > 0) {  							//we are adding more parms onto the end' so remove the page extension  							//from the parameter list  							//946 : exception when settings.PageExtension value is empty  							parms += settings.PageExtension;  							//816: if page extension is /' then don't do this  							if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  								finalUrl = finalUrl.Replace (settings.PageExtension' "");  							}  						} else {  							//we are removing all the parms altogether' so  							//the url needs to end in the page extension only  							//816: if page extension is /' then don't do this  							if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  								finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  							}  						}  					}  					//put the replaced parms back on the end  					finalUrl += parms;  					//set the final url  					result.FinalUrl = finalUrl;  					result.Reason = RedirectReason.Custom_Redirect;  					switch (parmRedirect.Action) {  					case "301":  						result.Action = ActionType.Redirect301;  						break;  					case "302":  						result.Action = ActionType.Redirect302;  						break;  					case "404":  						result.Action = ActionType.Output404;  						break;  					}  					redirect = true;  					break;  				}  			}  		}  		#endregion  	} catch (Exception ex) {  		Services.Exceptions.Exceptions.LogException (ex);  		messages.Add ("Exception: " + ex.Message + "\n" + ex.StackTrace);  	} finally {  		if (messages.Count > 0) {  			result.DebugMessages.AddRange (messages);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: try {  	#region trycatch block  	string rewrittenUrl = result.RewritePath ?? result.RawUrl;  	List<ParameterRedirectAction> parmRedirects = null;  	//find the matching redirects for the tabid  	int tabId = result.TabId;  	if (tabId > -1) {  		if (redirectActions.ContainsKey (tabId)) {  			//find the right set of replaced actions for this tab  			parmRedirects = redirectActions [tabId];  		}  	}  	//check for 'all tabs' redirections  	if (redirectActions.ContainsKey (-1))//-1 means 'all tabs' - rewriting across all tabs  	 {  		//initialise to empty collection if there are no specific tab redirects  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		//add in the all redirects  		List<ParameterRedirectAction> allRedirects = redirectActions [-1];  		parmRedirects.AddRange (allRedirects);  		//add the 'all' range to the tab range  		tabId = result.TabId;  	}  	if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  		//for the default.aspx page  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  		parmRedirects.AddRange (defaultRedirects);  		//add the default.aspx redirects to the list  		tabId = result.TabId;  	}  	//726 : allow for site-root redirects' ie redirects where no page match  	if (redirectActions.ContainsKey (-3)) {  		//request is for site root  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  		parmRedirects.AddRange (siteRootRedirects);  		//add the site root redirects to the collection  	}  	//OK what we have now is a list of redirects for the currently requested tab (either because it was specified by tab id'  	// or because there is a replaced for 'all tabs'  	if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  		foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  			//regex test each replaced to see if there is a match between the parameter string  			//and the parmRedirect  			string compareWith = rewrittenUrl;  			var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			Match regexMatch = redirectRegex.Match (compareWith);  			bool success = regexMatch.Success;  			bool siteRootTried = false;  			//if no match' but there is a site root redirect to try  			if (!success && parmRedirect.TabId == -3) {  				siteRootTried = true;  				compareWith = result.OriginalPathNoAlias;  				regexMatch = redirectRegex.Match (compareWith);  				success = regexMatch.Success;  			}  			if (!success) {  				result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  				if (siteRootTried) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  				}  			} else {  				//success! there was a match in the parameters  				string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  				if (siteRootTried) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  				} else {  					result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  				}  				string finalUrl = "";  				//now we need to generate the friendly Url  				//first check to see if the parameter replacement string has a destination tabid specified  				if (parms.ToLower ().Contains ("tabid/")) {  					//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   					//redirect the page as well as redirecting the parameter values  					string[] parmParts = parms.Split ('/');  					bool tabIdNext = false;  					foreach (string parmPart in parmParts) {  						if (tabIdNext) {  							//changes the tabid of page' effects a page redirect along with a parameter redirect  							Int32.TryParse (parmPart' out tabId);  							parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  							//remove the tabid/xx from the path  							break;  							//that's it' we're finished  						}  						if (parmPart.ToLower () == "tabid") {  							tabIdNext = true;  						}  					}  				} else if (tabId == -1) {  					//find the home tabid for this portal  					//735 : switch to custom method for getting portal  					PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  					tabId = portal.HomeTabId;  				}  				if (parmRedirect.ChangeToSiteRoot) {  					//when change to siteroot requested' new path goes directly off the portal alias  					//so set the finalUrl as the poratl alias  					finalUrl = result.Scheme + result.HttpAlias + "/";  				} else {  					//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  					if (tabId > -1) {  						TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  						if (tab != null) {  							string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  							string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  							if (friendlyUrlNoParms.EndsWith ("/") == false) {  								friendlyUrlNoParms += "/";  							}  							finalUrl = friendlyUrlNoParms;  						}  						if (tab == null) {  							result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  						} else {  							result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  						}  					}  				}  				if (parms.StartsWith ("//")) {  					parms = parms.Substring (2);  				}  				if (parms.StartsWith ("/")) {  					parms = parms.Substring (1);  				}  				if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  					if (parms.EndsWith ("/")) {  						parms = parms.TrimEnd ('/');  					}  					if (parms.Length > 0) {  						//we are adding more parms onto the end' so remove the page extension  						//from the parameter list  						//946 : exception when settings.PageExtension value is empty  						parms += settings.PageExtension;  						//816: if page extension is /' then don't do this  						if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  							finalUrl = finalUrl.Replace (settings.PageExtension' "");  						}  					} else {  						//we are removing all the parms altogether' so  						//the url needs to end in the page extension only  						//816: if page extension is /' then don't do this  						if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  							finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  						}  					}  				}  				//put the replaced parms back on the end  				finalUrl += parms;  				//set the final url  				result.FinalUrl = finalUrl;  				result.Reason = RedirectReason.Custom_Redirect;  				switch (parmRedirect.Action) {  				case "301":  					result.Action = ActionType.Redirect301;  					break;  				case "302":  					result.Action = ActionType.Redirect302;  					break;  				case "404":  					result.Action = ActionType.Output404;  					break;  				}  				redirect = true;  				break;  			}  		}  	}  	#endregion  } catch (Exception ex) {  	Services.Exceptions.Exceptions.LogException (ex);  	messages.Add ("Exception: " + ex.Message + "\n" + ex.StackTrace);  } finally {  	if (messages.Count > 0) {  		result.DebugMessages.AddRange (messages);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: try {  	#region trycatch block  	string rewrittenUrl = result.RewritePath ?? result.RawUrl;  	List<ParameterRedirectAction> parmRedirects = null;  	//find the matching redirects for the tabid  	int tabId = result.TabId;  	if (tabId > -1) {  		if (redirectActions.ContainsKey (tabId)) {  			//find the right set of replaced actions for this tab  			parmRedirects = redirectActions [tabId];  		}  	}  	//check for 'all tabs' redirections  	if (redirectActions.ContainsKey (-1))//-1 means 'all tabs' - rewriting across all tabs  	 {  		//initialise to empty collection if there are no specific tab redirects  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		//add in the all redirects  		List<ParameterRedirectAction> allRedirects = redirectActions [-1];  		parmRedirects.AddRange (allRedirects);  		//add the 'all' range to the tab range  		tabId = result.TabId;  	}  	if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  		//for the default.aspx page  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  		parmRedirects.AddRange (defaultRedirects);  		//add the default.aspx redirects to the list  		tabId = result.TabId;  	}  	//726 : allow for site-root redirects' ie redirects where no page match  	if (redirectActions.ContainsKey (-3)) {  		//request is for site root  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  		parmRedirects.AddRange (siteRootRedirects);  		//add the site root redirects to the collection  	}  	//OK what we have now is a list of redirects for the currently requested tab (either because it was specified by tab id'  	// or because there is a replaced for 'all tabs'  	if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  		foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  			//regex test each replaced to see if there is a match between the parameter string  			//and the parmRedirect  			string compareWith = rewrittenUrl;  			var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			Match regexMatch = redirectRegex.Match (compareWith);  			bool success = regexMatch.Success;  			bool siteRootTried = false;  			//if no match' but there is a site root redirect to try  			if (!success && parmRedirect.TabId == -3) {  				siteRootTried = true;  				compareWith = result.OriginalPathNoAlias;  				regexMatch = redirectRegex.Match (compareWith);  				success = regexMatch.Success;  			}  			if (!success) {  				result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  				if (siteRootTried) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  				}  			} else {  				//success! there was a match in the parameters  				string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  				if (siteRootTried) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  				} else {  					result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  				}  				string finalUrl = "";  				//now we need to generate the friendly Url  				//first check to see if the parameter replacement string has a destination tabid specified  				if (parms.ToLower ().Contains ("tabid/")) {  					//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   					//redirect the page as well as redirecting the parameter values  					string[] parmParts = parms.Split ('/');  					bool tabIdNext = false;  					foreach (string parmPart in parmParts) {  						if (tabIdNext) {  							//changes the tabid of page' effects a page redirect along with a parameter redirect  							Int32.TryParse (parmPart' out tabId);  							parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  							//remove the tabid/xx from the path  							break;  							//that's it' we're finished  						}  						if (parmPart.ToLower () == "tabid") {  							tabIdNext = true;  						}  					}  				} else if (tabId == -1) {  					//find the home tabid for this portal  					//735 : switch to custom method for getting portal  					PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  					tabId = portal.HomeTabId;  				}  				if (parmRedirect.ChangeToSiteRoot) {  					//when change to siteroot requested' new path goes directly off the portal alias  					//so set the finalUrl as the poratl alias  					finalUrl = result.Scheme + result.HttpAlias + "/";  				} else {  					//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  					if (tabId > -1) {  						TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  						if (tab != null) {  							string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  							string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  							if (friendlyUrlNoParms.EndsWith ("/") == false) {  								friendlyUrlNoParms += "/";  							}  							finalUrl = friendlyUrlNoParms;  						}  						if (tab == null) {  							result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  						} else {  							result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  						}  					}  				}  				if (parms.StartsWith ("//")) {  					parms = parms.Substring (2);  				}  				if (parms.StartsWith ("/")) {  					parms = parms.Substring (1);  				}  				if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  					if (parms.EndsWith ("/")) {  						parms = parms.TrimEnd ('/');  					}  					if (parms.Length > 0) {  						//we are adding more parms onto the end' so remove the page extension  						//from the parameter list  						//946 : exception when settings.PageExtension value is empty  						parms += settings.PageExtension;  						//816: if page extension is /' then don't do this  						if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  							finalUrl = finalUrl.Replace (settings.PageExtension' "");  						}  					} else {  						//we are removing all the parms altogether' so  						//the url needs to end in the page extension only  						//816: if page extension is /' then don't do this  						if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  							finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  						}  					}  				}  				//put the replaced parms back on the end  				finalUrl += parms;  				//set the final url  				result.FinalUrl = finalUrl;  				result.Reason = RedirectReason.Custom_Redirect;  				switch (parmRedirect.Action) {  				case "301":  					result.Action = ActionType.Redirect301;  					break;  				case "302":  					result.Action = ActionType.Redirect302;  					break;  				case "404":  					result.Action = ActionType.Output404;  					break;  				}  				redirect = true;  				break;  			}  		}  	}  	#endregion  } catch (Exception ex) {  	Services.Exceptions.Exceptions.LogException (ex);  	messages.Add ("Exception: " + ex.Message + "\n" + ex.StackTrace);  } finally {  	if (messages.Count > 0) {  		result.DebugMessages.AddRange (messages);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: try {  	#region trycatch block  	string rewrittenUrl = result.RewritePath ?? result.RawUrl;  	List<ParameterRedirectAction> parmRedirects = null;  	//find the matching redirects for the tabid  	int tabId = result.TabId;  	if (tabId > -1) {  		if (redirectActions.ContainsKey (tabId)) {  			//find the right set of replaced actions for this tab  			parmRedirects = redirectActions [tabId];  		}  	}  	//check for 'all tabs' redirections  	if (redirectActions.ContainsKey (-1))//-1 means 'all tabs' - rewriting across all tabs  	 {  		//initialise to empty collection if there are no specific tab redirects  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		//add in the all redirects  		List<ParameterRedirectAction> allRedirects = redirectActions [-1];  		parmRedirects.AddRange (allRedirects);  		//add the 'all' range to the tab range  		tabId = result.TabId;  	}  	if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  		//for the default.aspx page  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  		parmRedirects.AddRange (defaultRedirects);  		//add the default.aspx redirects to the list  		tabId = result.TabId;  	}  	//726 : allow for site-root redirects' ie redirects where no page match  	if (redirectActions.ContainsKey (-3)) {  		//request is for site root  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  		parmRedirects.AddRange (siteRootRedirects);  		//add the site root redirects to the collection  	}  	//OK what we have now is a list of redirects for the currently requested tab (either because it was specified by tab id'  	// or because there is a replaced for 'all tabs'  	if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  		foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  			//regex test each replaced to see if there is a match between the parameter string  			//and the parmRedirect  			string compareWith = rewrittenUrl;  			var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			Match regexMatch = redirectRegex.Match (compareWith);  			bool success = regexMatch.Success;  			bool siteRootTried = false;  			//if no match' but there is a site root redirect to try  			if (!success && parmRedirect.TabId == -3) {  				siteRootTried = true;  				compareWith = result.OriginalPathNoAlias;  				regexMatch = redirectRegex.Match (compareWith);  				success = regexMatch.Success;  			}  			if (!success) {  				result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  				if (siteRootTried) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  				}  			} else {  				//success! there was a match in the parameters  				string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  				if (siteRootTried) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  				} else {  					result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  				}  				string finalUrl = "";  				//now we need to generate the friendly Url  				//first check to see if the parameter replacement string has a destination tabid specified  				if (parms.ToLower ().Contains ("tabid/")) {  					//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   					//redirect the page as well as redirecting the parameter values  					string[] parmParts = parms.Split ('/');  					bool tabIdNext = false;  					foreach (string parmPart in parmParts) {  						if (tabIdNext) {  							//changes the tabid of page' effects a page redirect along with a parameter redirect  							Int32.TryParse (parmPart' out tabId);  							parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  							//remove the tabid/xx from the path  							break;  							//that's it' we're finished  						}  						if (parmPart.ToLower () == "tabid") {  							tabIdNext = true;  						}  					}  				} else if (tabId == -1) {  					//find the home tabid for this portal  					//735 : switch to custom method for getting portal  					PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  					tabId = portal.HomeTabId;  				}  				if (parmRedirect.ChangeToSiteRoot) {  					//when change to siteroot requested' new path goes directly off the portal alias  					//so set the finalUrl as the poratl alias  					finalUrl = result.Scheme + result.HttpAlias + "/";  				} else {  					//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  					if (tabId > -1) {  						TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  						if (tab != null) {  							string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  							string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  							if (friendlyUrlNoParms.EndsWith ("/") == false) {  								friendlyUrlNoParms += "/";  							}  							finalUrl = friendlyUrlNoParms;  						}  						if (tab == null) {  							result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  						} else {  							result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  						}  					}  				}  				if (parms.StartsWith ("//")) {  					parms = parms.Substring (2);  				}  				if (parms.StartsWith ("/")) {  					parms = parms.Substring (1);  				}  				if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  					if (parms.EndsWith ("/")) {  						parms = parms.TrimEnd ('/');  					}  					if (parms.Length > 0) {  						//we are adding more parms onto the end' so remove the page extension  						//from the parameter list  						//946 : exception when settings.PageExtension value is empty  						parms += settings.PageExtension;  						//816: if page extension is /' then don't do this  						if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  							finalUrl = finalUrl.Replace (settings.PageExtension' "");  						}  					} else {  						//we are removing all the parms altogether' so  						//the url needs to end in the page extension only  						//816: if page extension is /' then don't do this  						if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  							finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  						}  					}  				}  				//put the replaced parms back on the end  				finalUrl += parms;  				//set the final url  				result.FinalUrl = finalUrl;  				result.Reason = RedirectReason.Custom_Redirect;  				switch (parmRedirect.Action) {  				case "301":  					result.Action = ActionType.Redirect301;  					break;  				case "302":  					result.Action = ActionType.Redirect302;  					break;  				case "404":  					result.Action = ActionType.Output404;  					break;  				}  				redirect = true;  				break;  			}  		}  	}  	#endregion  } catch (Exception ex) {  	Services.Exceptions.Exceptions.LogException (ex);  	messages.Add ("Exception: " + ex.Message + "\n" + ex.StackTrace);  } finally {  	if (messages.Count > 0) {  		result.DebugMessages.AddRange (messages);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: try {  	#region trycatch block  	string rewrittenUrl = result.RewritePath ?? result.RawUrl;  	List<ParameterRedirectAction> parmRedirects = null;  	//find the matching redirects for the tabid  	int tabId = result.TabId;  	if (tabId > -1) {  		if (redirectActions.ContainsKey (tabId)) {  			//find the right set of replaced actions for this tab  			parmRedirects = redirectActions [tabId];  		}  	}  	//check for 'all tabs' redirections  	if (redirectActions.ContainsKey (-1))//-1 means 'all tabs' - rewriting across all tabs  	 {  		//initialise to empty collection if there are no specific tab redirects  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		//add in the all redirects  		List<ParameterRedirectAction> allRedirects = redirectActions [-1];  		parmRedirects.AddRange (allRedirects);  		//add the 'all' range to the tab range  		tabId = result.TabId;  	}  	if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  		//for the default.aspx page  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  		parmRedirects.AddRange (defaultRedirects);  		//add the default.aspx redirects to the list  		tabId = result.TabId;  	}  	//726 : allow for site-root redirects' ie redirects where no page match  	if (redirectActions.ContainsKey (-3)) {  		//request is for site root  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  		parmRedirects.AddRange (siteRootRedirects);  		//add the site root redirects to the collection  	}  	//OK what we have now is a list of redirects for the currently requested tab (either because it was specified by tab id'  	// or because there is a replaced for 'all tabs'  	if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  		foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  			//regex test each replaced to see if there is a match between the parameter string  			//and the parmRedirect  			string compareWith = rewrittenUrl;  			var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			Match regexMatch = redirectRegex.Match (compareWith);  			bool success = regexMatch.Success;  			bool siteRootTried = false;  			//if no match' but there is a site root redirect to try  			if (!success && parmRedirect.TabId == -3) {  				siteRootTried = true;  				compareWith = result.OriginalPathNoAlias;  				regexMatch = redirectRegex.Match (compareWith);  				success = regexMatch.Success;  			}  			if (!success) {  				result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  				if (siteRootTried) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  				}  			} else {  				//success! there was a match in the parameters  				string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  				if (siteRootTried) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  				} else {  					result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  				}  				string finalUrl = "";  				//now we need to generate the friendly Url  				//first check to see if the parameter replacement string has a destination tabid specified  				if (parms.ToLower ().Contains ("tabid/")) {  					//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   					//redirect the page as well as redirecting the parameter values  					string[] parmParts = parms.Split ('/');  					bool tabIdNext = false;  					foreach (string parmPart in parmParts) {  						if (tabIdNext) {  							//changes the tabid of page' effects a page redirect along with a parameter redirect  							Int32.TryParse (parmPart' out tabId);  							parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  							//remove the tabid/xx from the path  							break;  							//that's it' we're finished  						}  						if (parmPart.ToLower () == "tabid") {  							tabIdNext = true;  						}  					}  				} else if (tabId == -1) {  					//find the home tabid for this portal  					//735 : switch to custom method for getting portal  					PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  					tabId = portal.HomeTabId;  				}  				if (parmRedirect.ChangeToSiteRoot) {  					//when change to siteroot requested' new path goes directly off the portal alias  					//so set the finalUrl as the poratl alias  					finalUrl = result.Scheme + result.HttpAlias + "/";  				} else {  					//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  					if (tabId > -1) {  						TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  						if (tab != null) {  							string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  							string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  							if (friendlyUrlNoParms.EndsWith ("/") == false) {  								friendlyUrlNoParms += "/";  							}  							finalUrl = friendlyUrlNoParms;  						}  						if (tab == null) {  							result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  						} else {  							result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  						}  					}  				}  				if (parms.StartsWith ("//")) {  					parms = parms.Substring (2);  				}  				if (parms.StartsWith ("/")) {  					parms = parms.Substring (1);  				}  				if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  					if (parms.EndsWith ("/")) {  						parms = parms.TrimEnd ('/');  					}  					if (parms.Length > 0) {  						//we are adding more parms onto the end' so remove the page extension  						//from the parameter list  						//946 : exception when settings.PageExtension value is empty  						parms += settings.PageExtension;  						//816: if page extension is /' then don't do this  						if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  							finalUrl = finalUrl.Replace (settings.PageExtension' "");  						}  					} else {  						//we are removing all the parms altogether' so  						//the url needs to end in the page extension only  						//816: if page extension is /' then don't do this  						if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  							finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  						}  					}  				}  				//put the replaced parms back on the end  				finalUrl += parms;  				//set the final url  				result.FinalUrl = finalUrl;  				result.Reason = RedirectReason.Custom_Redirect;  				switch (parmRedirect.Action) {  				case "301":  					result.Action = ActionType.Redirect301;  					break;  				case "302":  					result.Action = ActionType.Redirect302;  					break;  				case "404":  					result.Action = ActionType.Output404;  					break;  				}  				redirect = true;  				break;  			}  		}  	}  	#endregion  } catch (Exception ex) {  	Services.Exceptions.Exceptions.LogException (ex);  	messages.Add ("Exception: " + ex.Message + "\n" + ex.StackTrace);  } finally {  	if (messages.Count > 0) {  		result.DebugMessages.AddRange (messages);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: try {  	#region trycatch block  	string rewrittenUrl = result.RewritePath ?? result.RawUrl;  	List<ParameterRedirectAction> parmRedirects = null;  	//find the matching redirects for the tabid  	int tabId = result.TabId;  	if (tabId > -1) {  		if (redirectActions.ContainsKey (tabId)) {  			//find the right set of replaced actions for this tab  			parmRedirects = redirectActions [tabId];  		}  	}  	//check for 'all tabs' redirections  	if (redirectActions.ContainsKey (-1))//-1 means 'all tabs' - rewriting across all tabs  	 {  		//initialise to empty collection if there are no specific tab redirects  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		//add in the all redirects  		List<ParameterRedirectAction> allRedirects = redirectActions [-1];  		parmRedirects.AddRange (allRedirects);  		//add the 'all' range to the tab range  		tabId = result.TabId;  	}  	if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  		//for the default.aspx page  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  		parmRedirects.AddRange (defaultRedirects);  		//add the default.aspx redirects to the list  		tabId = result.TabId;  	}  	//726 : allow for site-root redirects' ie redirects where no page match  	if (redirectActions.ContainsKey (-3)) {  		//request is for site root  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  		parmRedirects.AddRange (siteRootRedirects);  		//add the site root redirects to the collection  	}  	//OK what we have now is a list of redirects for the currently requested tab (either because it was specified by tab id'  	// or because there is a replaced for 'all tabs'  	if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  		foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  			//regex test each replaced to see if there is a match between the parameter string  			//and the parmRedirect  			string compareWith = rewrittenUrl;  			var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			Match regexMatch = redirectRegex.Match (compareWith);  			bool success = regexMatch.Success;  			bool siteRootTried = false;  			//if no match' but there is a site root redirect to try  			if (!success && parmRedirect.TabId == -3) {  				siteRootTried = true;  				compareWith = result.OriginalPathNoAlias;  				regexMatch = redirectRegex.Match (compareWith);  				success = regexMatch.Success;  			}  			if (!success) {  				result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  				if (siteRootTried) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  				}  			} else {  				//success! there was a match in the parameters  				string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  				if (siteRootTried) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  				} else {  					result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  				}  				string finalUrl = "";  				//now we need to generate the friendly Url  				//first check to see if the parameter replacement string has a destination tabid specified  				if (parms.ToLower ().Contains ("tabid/")) {  					//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   					//redirect the page as well as redirecting the parameter values  					string[] parmParts = parms.Split ('/');  					bool tabIdNext = false;  					foreach (string parmPart in parmParts) {  						if (tabIdNext) {  							//changes the tabid of page' effects a page redirect along with a parameter redirect  							Int32.TryParse (parmPart' out tabId);  							parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  							//remove the tabid/xx from the path  							break;  							//that's it' we're finished  						}  						if (parmPart.ToLower () == "tabid") {  							tabIdNext = true;  						}  					}  				} else if (tabId == -1) {  					//find the home tabid for this portal  					//735 : switch to custom method for getting portal  					PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  					tabId = portal.HomeTabId;  				}  				if (parmRedirect.ChangeToSiteRoot) {  					//when change to siteroot requested' new path goes directly off the portal alias  					//so set the finalUrl as the poratl alias  					finalUrl = result.Scheme + result.HttpAlias + "/";  				} else {  					//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  					if (tabId > -1) {  						TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  						if (tab != null) {  							string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  							string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  							if (friendlyUrlNoParms.EndsWith ("/") == false) {  								friendlyUrlNoParms += "/";  							}  							finalUrl = friendlyUrlNoParms;  						}  						if (tab == null) {  							result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  						} else {  							result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  						}  					}  				}  				if (parms.StartsWith ("//")) {  					parms = parms.Substring (2);  				}  				if (parms.StartsWith ("/")) {  					parms = parms.Substring (1);  				}  				if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  					if (parms.EndsWith ("/")) {  						parms = parms.TrimEnd ('/');  					}  					if (parms.Length > 0) {  						//we are adding more parms onto the end' so remove the page extension  						//from the parameter list  						//946 : exception when settings.PageExtension value is empty  						parms += settings.PageExtension;  						//816: if page extension is /' then don't do this  						if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  							finalUrl = finalUrl.Replace (settings.PageExtension' "");  						}  					} else {  						//we are removing all the parms altogether' so  						//the url needs to end in the page extension only  						//816: if page extension is /' then don't do this  						if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  							finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  						}  					}  				}  				//put the replaced parms back on the end  				finalUrl += parms;  				//set the final url  				result.FinalUrl = finalUrl;  				result.Reason = RedirectReason.Custom_Redirect;  				switch (parmRedirect.Action) {  				case "301":  					result.Action = ActionType.Redirect301;  					break;  				case "302":  					result.Action = ActionType.Redirect302;  					break;  				case "404":  					result.Action = ActionType.Output404;  					break;  				}  				redirect = true;  				break;  			}  		}  	}  	#endregion  } catch (Exception ex) {  	Services.Exceptions.Exceptions.LogException (ex);  	messages.Add ("Exception: " + ex.Message + "\n" + ex.StackTrace);  } finally {  	if (messages.Count > 0) {  		result.DebugMessages.AddRange (messages);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: try {  	#region trycatch block  	string rewrittenUrl = result.RewritePath ?? result.RawUrl;  	List<ParameterRedirectAction> parmRedirects = null;  	//find the matching redirects for the tabid  	int tabId = result.TabId;  	if (tabId > -1) {  		if (redirectActions.ContainsKey (tabId)) {  			//find the right set of replaced actions for this tab  			parmRedirects = redirectActions [tabId];  		}  	}  	//check for 'all tabs' redirections  	if (redirectActions.ContainsKey (-1))//-1 means 'all tabs' - rewriting across all tabs  	 {  		//initialise to empty collection if there are no specific tab redirects  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		//add in the all redirects  		List<ParameterRedirectAction> allRedirects = redirectActions [-1];  		parmRedirects.AddRange (allRedirects);  		//add the 'all' range to the tab range  		tabId = result.TabId;  	}  	if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  		//for the default.aspx page  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  		parmRedirects.AddRange (defaultRedirects);  		//add the default.aspx redirects to the list  		tabId = result.TabId;  	}  	//726 : allow for site-root redirects' ie redirects where no page match  	if (redirectActions.ContainsKey (-3)) {  		//request is for site root  		if (parmRedirects == null) {  			parmRedirects = new List<ParameterRedirectAction> ();  		}  		List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  		parmRedirects.AddRange (siteRootRedirects);  		//add the site root redirects to the collection  	}  	//OK what we have now is a list of redirects for the currently requested tab (either because it was specified by tab id'  	// or because there is a replaced for 'all tabs'  	if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  		foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  			//regex test each replaced to see if there is a match between the parameter string  			//and the parmRedirect  			string compareWith = rewrittenUrl;  			var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  			Match regexMatch = redirectRegex.Match (compareWith);  			bool success = regexMatch.Success;  			bool siteRootTried = false;  			//if no match' but there is a site root redirect to try  			if (!success && parmRedirect.TabId == -3) {  				siteRootTried = true;  				compareWith = result.OriginalPathNoAlias;  				regexMatch = redirectRegex.Match (compareWith);  				success = regexMatch.Success;  			}  			if (!success) {  				result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  				if (siteRootTried) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  				}  			} else {  				//success! there was a match in the parameters  				string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  				if (siteRootTried) {  					result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  				} else {  					result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  				}  				string finalUrl = "";  				//now we need to generate the friendly Url  				//first check to see if the parameter replacement string has a destination tabid specified  				if (parms.ToLower ().Contains ("tabid/")) {  					//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   					//redirect the page as well as redirecting the parameter values  					string[] parmParts = parms.Split ('/');  					bool tabIdNext = false;  					foreach (string parmPart in parmParts) {  						if (tabIdNext) {  							//changes the tabid of page' effects a page redirect along with a parameter redirect  							Int32.TryParse (parmPart' out tabId);  							parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  							//remove the tabid/xx from the path  							break;  							//that's it' we're finished  						}  						if (parmPart.ToLower () == "tabid") {  							tabIdNext = true;  						}  					}  				} else if (tabId == -1) {  					//find the home tabid for this portal  					//735 : switch to custom method for getting portal  					PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  					tabId = portal.HomeTabId;  				}  				if (parmRedirect.ChangeToSiteRoot) {  					//when change to siteroot requested' new path goes directly off the portal alias  					//so set the finalUrl as the poratl alias  					finalUrl = result.Scheme + result.HttpAlias + "/";  				} else {  					//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  					if (tabId > -1) {  						TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  						if (tab != null) {  							string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  							string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  							if (friendlyUrlNoParms.EndsWith ("/") == false) {  								friendlyUrlNoParms += "/";  							}  							finalUrl = friendlyUrlNoParms;  						}  						if (tab == null) {  							result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  						} else {  							result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  						}  					}  				}  				if (parms.StartsWith ("//")) {  					parms = parms.Substring (2);  				}  				if (parms.StartsWith ("/")) {  					parms = parms.Substring (1);  				}  				if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  					if (parms.EndsWith ("/")) {  						parms = parms.TrimEnd ('/');  					}  					if (parms.Length > 0) {  						//we are adding more parms onto the end' so remove the page extension  						//from the parameter list  						//946 : exception when settings.PageExtension value is empty  						parms += settings.PageExtension;  						//816: if page extension is /' then don't do this  						if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  							finalUrl = finalUrl.Replace (settings.PageExtension' "");  						}  					} else {  						//we are removing all the parms altogether' so  						//the url needs to end in the page extension only  						//816: if page extension is /' then don't do this  						if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  							finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  						}  					}  				}  				//put the replaced parms back on the end  				finalUrl += parms;  				//set the final url  				result.FinalUrl = finalUrl;  				result.Reason = RedirectReason.Custom_Redirect;  				switch (parmRedirect.Action) {  				case "301":  					result.Action = ActionType.Redirect301;  					break;  				case "302":  					result.Action = ActionType.Redirect302;  					break;  				case "404":  					result.Action = ActionType.Output404;  					break;  				}  				redirect = true;  				break;  			}  		}  	}  	#endregion  } catch (Exception ex) {  	Services.Exceptions.Exceptions.LogException (ex);  	messages.Add ("Exception: " + ex.Message + "\n" + ex.StackTrace);  } finally {  	if (messages.Count > 0) {  		result.DebugMessages.AddRange (messages);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  	//for the default.aspx page  	if (parmRedirects == null) {  		parmRedirects = new List<ParameterRedirectAction> ();  	}  	List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  	parmRedirects.AddRange (defaultRedirects);  	//add the default.aspx redirects to the list  	tabId = result.TabId;  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (redirectActions.ContainsKey (-2) && result.OriginalPath.ToLowerInvariant ().Contains ("default.aspx")) {  	//for the default.aspx page  	if (parmRedirects == null) {  		parmRedirects = new List<ParameterRedirectAction> ();  	}  	List<ParameterRedirectAction> defaultRedirects = redirectActions [-2];  	parmRedirects.AddRange (defaultRedirects);  	//add the default.aspx redirects to the list  	tabId = result.TabId;  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (redirectActions.ContainsKey (-3)) {  	//request is for site root  	if (parmRedirects == null) {  		parmRedirects = new List<ParameterRedirectAction> ();  	}  	List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  	parmRedirects.AddRange (siteRootRedirects);  	//add the site root redirects to the collection  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (redirectActions.ContainsKey (-3)) {  	//request is for site root  	if (parmRedirects == null) {  		parmRedirects = new List<ParameterRedirectAction> ();  	}  	List<ParameterRedirectAction> siteRootRedirects = redirectActions [-3];  	parmRedirects.AddRange (siteRootRedirects);  	//add the site root redirects to the collection  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  	foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  		//regex test each replaced to see if there is a match between the parameter string  		//and the parmRedirect  		string compareWith = rewrittenUrl;  		var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		Match regexMatch = redirectRegex.Match (compareWith);  		bool success = regexMatch.Success;  		bool siteRootTried = false;  		//if no match' but there is a site root redirect to try  		if (!success && parmRedirect.TabId == -3) {  			siteRootTried = true;  			compareWith = result.OriginalPathNoAlias;  			regexMatch = redirectRegex.Match (compareWith);  			success = regexMatch.Success;  		}  		if (!success) {  			result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  			if (siteRootTried) {  				result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  			}  		} else {  			//success! there was a match in the parameters  			string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  			if (siteRootTried) {  				result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  			} else {  				result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  			}  			string finalUrl = "";  			//now we need to generate the friendly Url  			//first check to see if the parameter replacement string has a destination tabid specified  			if (parms.ToLower ().Contains ("tabid/")) {  				//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   				//redirect the page as well as redirecting the parameter values  				string[] parmParts = parms.Split ('/');  				bool tabIdNext = false;  				foreach (string parmPart in parmParts) {  					if (tabIdNext) {  						//changes the tabid of page' effects a page redirect along with a parameter redirect  						Int32.TryParse (parmPart' out tabId);  						parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  						//remove the tabid/xx from the path  						break;  						//that's it' we're finished  					}  					if (parmPart.ToLower () == "tabid") {  						tabIdNext = true;  					}  				}  			} else if (tabId == -1) {  				//find the home tabid for this portal  				//735 : switch to custom method for getting portal  				PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  				tabId = portal.HomeTabId;  			}  			if (parmRedirect.ChangeToSiteRoot) {  				//when change to siteroot requested' new path goes directly off the portal alias  				//so set the finalUrl as the poratl alias  				finalUrl = result.Scheme + result.HttpAlias + "/";  			} else {  				//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  				if (tabId > -1) {  					TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  					if (tab != null) {  						string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  						string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  						if (friendlyUrlNoParms.EndsWith ("/") == false) {  							friendlyUrlNoParms += "/";  						}  						finalUrl = friendlyUrlNoParms;  					}  					if (tab == null) {  						result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  					} else {  						result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  					}  				}  			}  			if (parms.StartsWith ("//")) {  				parms = parms.Substring (2);  			}  			if (parms.StartsWith ("/")) {  				parms = parms.Substring (1);  			}  			if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  				if (parms.EndsWith ("/")) {  					parms = parms.TrimEnd ('/');  				}  				if (parms.Length > 0) {  					//we are adding more parms onto the end' so remove the page extension  					//from the parameter list  					//946 : exception when settings.PageExtension value is empty  					parms += settings.PageExtension;  					//816: if page extension is /' then don't do this  					if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  						finalUrl = finalUrl.Replace (settings.PageExtension' "");  					}  				} else {  					//we are removing all the parms altogether' so  					//the url needs to end in the page extension only  					//816: if page extension is /' then don't do this  					if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  						finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  					}  				}  			}  			//put the replaced parms back on the end  			finalUrl += parms;  			//set the final url  			result.FinalUrl = finalUrl;  			result.Reason = RedirectReason.Custom_Redirect;  			switch (parmRedirect.Action) {  			case "301":  				result.Action = ActionType.Redirect301;  				break;  			case "302":  				result.Action = ActionType.Redirect302;  				break;  			case "404":  				result.Action = ActionType.Output404;  				break;  			}  			redirect = true;  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (parmRedirects != null && parmRedirects.Count > 0 && rewrittenUrl != null) {  	foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  		//regex test each replaced to see if there is a match between the parameter string  		//and the parmRedirect  		string compareWith = rewrittenUrl;  		var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  		Match regexMatch = redirectRegex.Match (compareWith);  		bool success = regexMatch.Success;  		bool siteRootTried = false;  		//if no match' but there is a site root redirect to try  		if (!success && parmRedirect.TabId == -3) {  			siteRootTried = true;  			compareWith = result.OriginalPathNoAlias;  			regexMatch = redirectRegex.Match (compareWith);  			success = regexMatch.Success;  		}  		if (!success) {  			result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  			if (siteRootTried) {  				result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  			}  		} else {  			//success! there was a match in the parameters  			string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  			if (siteRootTried) {  				result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  			} else {  				result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  			}  			string finalUrl = "";  			//now we need to generate the friendly Url  			//first check to see if the parameter replacement string has a destination tabid specified  			if (parms.ToLower ().Contains ("tabid/")) {  				//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   				//redirect the page as well as redirecting the parameter values  				string[] parmParts = parms.Split ('/');  				bool tabIdNext = false;  				foreach (string parmPart in parmParts) {  					if (tabIdNext) {  						//changes the tabid of page' effects a page redirect along with a parameter redirect  						Int32.TryParse (parmPart' out tabId);  						parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  						//remove the tabid/xx from the path  						break;  						//that's it' we're finished  					}  					if (parmPart.ToLower () == "tabid") {  						tabIdNext = true;  					}  				}  			} else if (tabId == -1) {  				//find the home tabid for this portal  				//735 : switch to custom method for getting portal  				PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  				tabId = portal.HomeTabId;  			}  			if (parmRedirect.ChangeToSiteRoot) {  				//when change to siteroot requested' new path goes directly off the portal alias  				//so set the finalUrl as the poratl alias  				finalUrl = result.Scheme + result.HttpAlias + "/";  			} else {  				//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  				if (tabId > -1) {  					TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  					if (tab != null) {  						string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  						string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  						if (friendlyUrlNoParms.EndsWith ("/") == false) {  							friendlyUrlNoParms += "/";  						}  						finalUrl = friendlyUrlNoParms;  					}  					if (tab == null) {  						result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  					} else {  						result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  					}  				}  			}  			if (parms.StartsWith ("//")) {  				parms = parms.Substring (2);  			}  			if (parms.StartsWith ("/")) {  				parms = parms.Substring (1);  			}  			if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  				if (parms.EndsWith ("/")) {  					parms = parms.TrimEnd ('/');  				}  				if (parms.Length > 0) {  					//we are adding more parms onto the end' so remove the page extension  					//from the parameter list  					//946 : exception when settings.PageExtension value is empty  					parms += settings.PageExtension;  					//816: if page extension is /' then don't do this  					if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  						finalUrl = finalUrl.Replace (settings.PageExtension' "");  					}  				} else {  					//we are removing all the parms altogether' so  					//the url needs to end in the page extension only  					//816: if page extension is /' then don't do this  					if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  						finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  					}  				}  			}  			//put the replaced parms back on the end  			finalUrl += parms;  			//set the final url  			result.FinalUrl = finalUrl;  			result.Reason = RedirectReason.Custom_Redirect;  			switch (parmRedirect.Action) {  			case "301":  				result.Action = ActionType.Redirect301;  				break;  			case "302":  				result.Action = ActionType.Redirect302;  				break;  			case "404":  				result.Action = ActionType.Output404;  				break;  			}  			redirect = true;  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  	//regex test each replaced to see if there is a match between the parameter string  	//and the parmRedirect  	string compareWith = rewrittenUrl;  	var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	Match regexMatch = redirectRegex.Match (compareWith);  	bool success = regexMatch.Success;  	bool siteRootTried = false;  	//if no match' but there is a site root redirect to try  	if (!success && parmRedirect.TabId == -3) {  		siteRootTried = true;  		compareWith = result.OriginalPathNoAlias;  		regexMatch = redirectRegex.Match (compareWith);  		success = regexMatch.Success;  	}  	if (!success) {  		result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  		if (siteRootTried) {  			result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  		}  	} else {  		//success! there was a match in the parameters  		string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  		if (siteRootTried) {  			result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  		} else {  			result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  		}  		string finalUrl = "";  		//now we need to generate the friendly Url  		//first check to see if the parameter replacement string has a destination tabid specified  		if (parms.ToLower ().Contains ("tabid/")) {  			//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   			//redirect the page as well as redirecting the parameter values  			string[] parmParts = parms.Split ('/');  			bool tabIdNext = false;  			foreach (string parmPart in parmParts) {  				if (tabIdNext) {  					//changes the tabid of page' effects a page redirect along with a parameter redirect  					Int32.TryParse (parmPart' out tabId);  					parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  					//remove the tabid/xx from the path  					break;  					//that's it' we're finished  				}  				if (parmPart.ToLower () == "tabid") {  					tabIdNext = true;  				}  			}  		} else if (tabId == -1) {  			//find the home tabid for this portal  			//735 : switch to custom method for getting portal  			PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  			tabId = portal.HomeTabId;  		}  		if (parmRedirect.ChangeToSiteRoot) {  			//when change to siteroot requested' new path goes directly off the portal alias  			//so set the finalUrl as the poratl alias  			finalUrl = result.Scheme + result.HttpAlias + "/";  		} else {  			//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  			if (tabId > -1) {  				TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  				if (tab != null) {  					string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  					string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  					if (friendlyUrlNoParms.EndsWith ("/") == false) {  						friendlyUrlNoParms += "/";  					}  					finalUrl = friendlyUrlNoParms;  				}  				if (tab == null) {  					result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  				} else {  					result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  				}  			}  		}  		if (parms.StartsWith ("//")) {  			parms = parms.Substring (2);  		}  		if (parms.StartsWith ("/")) {  			parms = parms.Substring (1);  		}  		if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  			if (parms.EndsWith ("/")) {  				parms = parms.TrimEnd ('/');  			}  			if (parms.Length > 0) {  				//we are adding more parms onto the end' so remove the page extension  				//from the parameter list  				//946 : exception when settings.PageExtension value is empty  				parms += settings.PageExtension;  				//816: if page extension is /' then don't do this  				if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  					finalUrl = finalUrl.Replace (settings.PageExtension' "");  				}  			} else {  				//we are removing all the parms altogether' so  				//the url needs to end in the page extension only  				//816: if page extension is /' then don't do this  				if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  					finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  				}  			}  		}  		//put the replaced parms back on the end  		finalUrl += parms;  		//set the final url  		result.FinalUrl = finalUrl;  		result.Reason = RedirectReason.Custom_Redirect;  		switch (parmRedirect.Action) {  		case "301":  			result.Action = ActionType.Redirect301;  			break;  		case "302":  			result.Action = ActionType.Redirect302;  			break;  		case "404":  			result.Action = ActionType.Output404;  			break;  		}  		redirect = true;  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: foreach (ParameterRedirectAction parmRedirect in parmRedirects) {  	//regex test each replaced to see if there is a match between the parameter string  	//and the parmRedirect  	string compareWith = rewrittenUrl;  	var redirectRegex = RegexUtils.GetCachedRegex (parmRedirect.LookFor' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);  	Match regexMatch = redirectRegex.Match (compareWith);  	bool success = regexMatch.Success;  	bool siteRootTried = false;  	//if no match' but there is a site root redirect to try  	if (!success && parmRedirect.TabId == -3) {  		siteRootTried = true;  		compareWith = result.OriginalPathNoAlias;  		regexMatch = redirectRegex.Match (compareWith);  		success = regexMatch.Success;  	}  	if (!success) {  		result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  		if (siteRootTried) {  			result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  		}  	} else {  		//success! there was a match in the parameters  		string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  		if (siteRootTried) {  			result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  		} else {  			result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  		}  		string finalUrl = "";  		//now we need to generate the friendly Url  		//first check to see if the parameter replacement string has a destination tabid specified  		if (parms.ToLower ().Contains ("tabid/")) {  			//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   			//redirect the page as well as redirecting the parameter values  			string[] parmParts = parms.Split ('/');  			bool tabIdNext = false;  			foreach (string parmPart in parmParts) {  				if (tabIdNext) {  					//changes the tabid of page' effects a page redirect along with a parameter redirect  					Int32.TryParse (parmPart' out tabId);  					parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  					//remove the tabid/xx from the path  					break;  					//that's it' we're finished  				}  				if (parmPart.ToLower () == "tabid") {  					tabIdNext = true;  				}  			}  		} else if (tabId == -1) {  			//find the home tabid for this portal  			//735 : switch to custom method for getting portal  			PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  			tabId = portal.HomeTabId;  		}  		if (parmRedirect.ChangeToSiteRoot) {  			//when change to siteroot requested' new path goes directly off the portal alias  			//so set the finalUrl as the poratl alias  			finalUrl = result.Scheme + result.HttpAlias + "/";  		} else {  			//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  			if (tabId > -1) {  				TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  				if (tab != null) {  					string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  					string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  					if (friendlyUrlNoParms.EndsWith ("/") == false) {  						friendlyUrlNoParms += "/";  					}  					finalUrl = friendlyUrlNoParms;  				}  				if (tab == null) {  					result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  				} else {  					result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  				}  			}  		}  		if (parms.StartsWith ("//")) {  			parms = parms.Substring (2);  		}  		if (parms.StartsWith ("/")) {  			parms = parms.Substring (1);  		}  		if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  			if (parms.EndsWith ("/")) {  				parms = parms.TrimEnd ('/');  			}  			if (parms.Length > 0) {  				//we are adding more parms onto the end' so remove the page extension  				//from the parameter list  				//946 : exception when settings.PageExtension value is empty  				parms += settings.PageExtension;  				//816: if page extension is /' then don't do this  				if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  					finalUrl = finalUrl.Replace (settings.PageExtension' "");  				}  			} else {  				//we are removing all the parms altogether' so  				//the url needs to end in the page extension only  				//816: if page extension is /' then don't do this  				if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  					finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  				}  			}  		}  		//put the replaced parms back on the end  		finalUrl += parms;  		//set the final url  		result.FinalUrl = finalUrl;  		result.Reason = RedirectReason.Custom_Redirect;  		switch (parmRedirect.Action) {  		case "301":  			result.Action = ActionType.Redirect301;  			break;  		case "302":  			result.Action = ActionType.Redirect302;  			break;  		case "404":  			result.Action = ActionType.Output404;  			break;  		}  		redirect = true;  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (!success && parmRedirect.TabId == -3) {  	siteRootTried = true;  	compareWith = result.OriginalPathNoAlias;  	regexMatch = redirectRegex.Match (compareWith);  	success = regexMatch.Success;  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (!success) {  	result.DebugMessages.Add (parmRedirect.Name + " redirect not matched (" + rewrittenUrl + ")");  	if (siteRootTried) {  		result.DebugMessages.Add (parmRedirect.Name + " redirect not matched [site root] (" + result.OriginalPathNoAlias + ")");  	}  } else {  	//success! there was a match in the parameters  	string parms = redirectRegex.Replace (compareWith' parmRedirect.RedirectTo);  	if (siteRootTried) {  		result.DebugMessages.Add (parmRedirect.Name + " redirect matched [site root] with (" + result.OriginalPathNoAlias + ")' replaced with " + parms);  	} else {  		result.DebugMessages.Add (parmRedirect.Name + " redirect matched with (" + compareWith + ")' replaced with " + parms);  	}  	string finalUrl = "";  	//now we need to generate the friendly Url  	//first check to see if the parameter replacement string has a destination tabid specified  	if (parms.ToLower ().Contains ("tabid/")) {  		//if so' using a feature whereby the dest tabid can be changed within the parameters' which will   		//redirect the page as well as redirecting the parameter values  		string[] parmParts = parms.Split ('/');  		bool tabIdNext = false;  		foreach (string parmPart in parmParts) {  			if (tabIdNext) {  				//changes the tabid of page' effects a page redirect along with a parameter redirect  				Int32.TryParse (parmPart' out tabId);  				parms = parms.Replace ("tabid/" + tabId.ToString ()' "");  				//remove the tabid/xx from the path  				break;  				//that's it' we're finished  			}  			if (parmPart.ToLower () == "tabid") {  				tabIdNext = true;  			}  		}  	} else if (tabId == -1) {  		//find the home tabid for this portal  		//735 : switch to custom method for getting portal  		PortalInfo portal = CacheController.GetPortal (result.PortalId' true);  		tabId = portal.HomeTabId;  	}  	if (parmRedirect.ChangeToSiteRoot) {  		//when change to siteroot requested' new path goes directly off the portal alias  		//so set the finalUrl as the poratl alias  		finalUrl = result.Scheme + result.HttpAlias + "/";  	} else {  		//if the tabid has been supplied' do a friendly url provider lookup to get the correct format for the tab url  		if (tabId > -1) {  			TabInfo tab = TabController.Instance.GetTab (tabId' result.PortalId' false);  			if (tab != null) {  				string path = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tab.TabID' "");  				string friendlyUrlNoParms = AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl (tab' path' Globals.glbDefaultPage' result.HttpAlias' false' settings' Guid.Empty);  				if (friendlyUrlNoParms.EndsWith ("/") == false) {  					friendlyUrlNoParms += "/";  				}  				finalUrl = friendlyUrlNoParms;  			}  			if (tab == null) {  				result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab was not found");  			} else {  				result.DebugMessages.Add (parmRedirect.Name + " tabId in redirect rule (tabId:" + tabId.ToString () + "' portalId:" + result.PortalId.ToString () + " )' tab found : " + tab.TabName);  			}  		}  	}  	if (parms.StartsWith ("//")) {  		parms = parms.Substring (2);  	}  	if (parms.StartsWith ("/")) {  		parms = parms.Substring (1);  	}  	if (settings.PageExtensionUsageType != PageExtensionUsageType.Never) {  		if (parms.EndsWith ("/")) {  			parms = parms.TrimEnd ('/');  		}  		if (parms.Length > 0) {  			//we are adding more parms onto the end' so remove the page extension  			//from the parameter list  			//946 : exception when settings.PageExtension value is empty  			parms += settings.PageExtension;  			//816: if page extension is /' then don't do this  			if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  				finalUrl = finalUrl.Replace (settings.PageExtension' "");  			}  		} else {  			//we are removing all the parms altogether' so  			//the url needs to end in the page extension only  			//816: if page extension is /' then don't do this  			if (settings.PageExtension != "/" && string.IsNullOrEmpty (settings.PageExtension) == false) {  				finalUrl = finalUrl.Replace (settings.PageExtension + "/"' settings.PageExtension);  			}  		}  	}  	//put the replaced parms back on the end  	finalUrl += parms;  	//set the final url  	result.FinalUrl = finalUrl;  	result.Reason = RedirectReason.Custom_Redirect;  	switch (parmRedirect.Action) {  	case "301":  		result.Action = ActionType.Redirect301;  		break;  	case "302":  		result.Action = ActionType.Redirect302;  		break;  	case "404":  		result.Action = ActionType.Output404;  		break;  	}  	redirect = true;  	break;  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: if (parms.StartsWith ("//")) {  	parms = parms.Substring (2);  }  
Magic Number,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following statement contains a magic number: parms = parms.Substring (2);  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckIfPortalAlias,The following statement contains a magic number: if (portalAlias != null) {  	//special case : sometimes' some servers issue root/default.aspx when root/ was requested' sometimes not.  It depends  	//on other server software installed (apparently)  	//so check the raw Url and the url' and see if they are the same except for the /default.aspx  	string rawUrl = result.RawUrl;  	if (url.ToLower ().EndsWith (rawUrl + defaultPage.ToLower ())) {  		//special case - change the url to be equal to the raw Url  		url = url.Substring (0' url.Length - defaultPage.Length);  	}  	if (settings.RedirectDefaultPage && url.ToLower ().EndsWith ("/" + defaultPage) && result.RedirectAllowed) {  		result.Reason = RedirectReason.Site_Root_Home;  		result.FinalUrl = Globals.AddHTTP (portalAliasUrl + "/");  		result.Action = ActionType.Redirect301;  	} else {  		//special case -> look in the tabdict for a blank intercept  		//735 : switch to custom method for getting portal  		PortalInfo portal = CacheController.GetPortal (portalAlias.PortalID' true);  		if (portal.HomeTabId == -1) {  			string tabKey = url;  			if (tabKey.EndsWith ("/")) {  				tabKey = tabKey.TrimEnd ('/');  			}  			tabKey += "::";  			using (tabDict.GetReadLock ()) {  				if (tabDict.ContainsKey (tabKey)) {  					newUrl = tabDict [tabKey];  					reWritten = true;  				}  			}  			//if no home tab' but matched a portal alias' and no trailing /default.aspx  			//and no 'newUrl' value because not rewritten' then append the /default.aspx   			//and ask for a rewrite on that one.  			//DNNDEV-27291  			if (reWritten == false) {  				//Need to determine if this is a child alias  				newUrl = "/" + Globals.glbDefaultPage;  				reWritten = true;  			}  		} else {  			//set rewrite to home page of site  			//760: check for portal alias specific culture before choosing home tabid  			bool checkForCustomAlias = false;  			bool customTabAlias = false;  			//check for culture-specific aliases  			string culture = null;  			var portalAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (portal.PortalID).ToList ();  			//if there are chosen portal aliases' check to see if the found alias is one of them  			//if not' then will check for a custom alias per tab  			if (!portalAliases.ContainsAlias (portal.PortalID' portalAlias.HTTPAlias)) {  				checkForCustomAlias = true;  			} else {  				//check for a specific culture for the alias  				culture = portalAliases.GetCultureByPortalIdAndAlias (portal.PortalID' portalAlias.HTTPAlias);  			}  			if (checkForCustomAlias) {  				//ok' this isnt' a chosen portal alias' check the list of custom aliases  				List<string> customAliasesForTabs = TabIndexController.GetCustomPortalAliases (settings);  				if (customAliasesForTabs != null && customAliasesForTabs.Contains (portalAlias.HTTPAlias.ToLower ())) {  					//ok' the alias is used as a custom tab' so now look in the dictionary to see if it's used a 'root' context  					string tabKey = url.ToLower ();  					if (tabKey.EndsWith ("/")) {  						tabKey = tabKey.TrimEnd ('/');  					}  					if (tabKey.EndsWith ("/default.aspx")) {  						tabKey = tabKey.Substring (0' tabKey.Length - 13);  						//13 = "/default.aspx".length  					}  					tabKey += "::";  					using (tabDict.GetReadLock ()) {  						if (tabDict.ContainsKey (tabKey)) {  							newUrl = tabDict [tabKey];  							reWritten = true;  							customTabAlias = true;  							//this alias is used as the alias for a custom tab  						}  					}  				}  			}  			if (customTabAlias == false) {  				int tabId;  				if (!String.IsNullOrEmpty (querystringCol ["TabId"])) {  					tabId = Convert.ToInt32 (querystringCol ["TabId"]);  					result.Action = ActionType.CheckFor301;  				} else {  					//not a custom alias for a specific tab' so it must be the home page for the portal we identified'  					//if its first request and splash page defined' then redirec to splash page.  					if (portal.SplashTabId > Null.NullInteger && HttpContext.Current != null && !HttpContext.Current.Request.Cookies.AllKeys.Contains ("SplashPageView")) {  						tabId = portal.SplashTabId;  						HttpContext.Current.Response.Cookies.Add (new HttpCookie ("SplashPageView"' "true") {  							Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  						});  						result.Action = ActionType.Redirect302;  						result.Reason = RedirectReason.Requested_SplashPage;  					} else {  						tabId = portal.HomeTabId;  					}  					if (culture == null) {  						culture = portal.DefaultLanguage;  						//set culture to default if not found specifically  					} else {  						//if there is a specific culture for this alias' and it's different to the default language' then  						//go check for a specific culture home page (5.5 and later)  						tabId = TabPathHelper.GetHomePageTabIdForCulture (portal.DefaultLanguage' portal.PortalID' culture' tabId);  					}  				}  				//see if there is a skin for the alias/culture combination  				string skin = TabPathHelper.GetTabAliasSkinForTabAndAlias (portalAlias.PortalID' portalAlias.HTTPAlias' culture);  				if (string.IsNullOrEmpty (skin) == false) {  					newUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tabId' ""' "skinSrc=" + skin);  				} else {  					newUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tabId' "");  				}  				//DNN-3789 always call this method as culture is defined by GetPageLocale  				AddLanguageCodeToRewritePath (ref newUrl' culture);  				//add on language specified by current portal alias  				reWritten = true;  			}  		}  	}  	if (reWritten) {  		//check for replaced to site root from /default.aspx   		// 838  set redirect reason and action from result  		SetRewriteParameters (ref result' newUrl);  		ActionType action;  		RedirectReason reason;  		string resultingUrl;  		RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' true' settings' out resultingUrl' out reason' out action);  		newUrl = resultingUrl;  		result.Action = action;  		result.Reason = reason;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckIfPortalAlias,The following statement contains a magic number: if (settings.RedirectDefaultPage && url.ToLower ().EndsWith ("/" + defaultPage) && result.RedirectAllowed) {  	result.Reason = RedirectReason.Site_Root_Home;  	result.FinalUrl = Globals.AddHTTP (portalAliasUrl + "/");  	result.Action = ActionType.Redirect301;  } else {  	//special case -> look in the tabdict for a blank intercept  	//735 : switch to custom method for getting portal  	PortalInfo portal = CacheController.GetPortal (portalAlias.PortalID' true);  	if (portal.HomeTabId == -1) {  		string tabKey = url;  		if (tabKey.EndsWith ("/")) {  			tabKey = tabKey.TrimEnd ('/');  		}  		tabKey += "::";  		using (tabDict.GetReadLock ()) {  			if (tabDict.ContainsKey (tabKey)) {  				newUrl = tabDict [tabKey];  				reWritten = true;  			}  		}  		//if no home tab' but matched a portal alias' and no trailing /default.aspx  		//and no 'newUrl' value because not rewritten' then append the /default.aspx   		//and ask for a rewrite on that one.  		//DNNDEV-27291  		if (reWritten == false) {  			//Need to determine if this is a child alias  			newUrl = "/" + Globals.glbDefaultPage;  			reWritten = true;  		}  	} else {  		//set rewrite to home page of site  		//760: check for portal alias specific culture before choosing home tabid  		bool checkForCustomAlias = false;  		bool customTabAlias = false;  		//check for culture-specific aliases  		string culture = null;  		var portalAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (portal.PortalID).ToList ();  		//if there are chosen portal aliases' check to see if the found alias is one of them  		//if not' then will check for a custom alias per tab  		if (!portalAliases.ContainsAlias (portal.PortalID' portalAlias.HTTPAlias)) {  			checkForCustomAlias = true;  		} else {  			//check for a specific culture for the alias  			culture = portalAliases.GetCultureByPortalIdAndAlias (portal.PortalID' portalAlias.HTTPAlias);  		}  		if (checkForCustomAlias) {  			//ok' this isnt' a chosen portal alias' check the list of custom aliases  			List<string> customAliasesForTabs = TabIndexController.GetCustomPortalAliases (settings);  			if (customAliasesForTabs != null && customAliasesForTabs.Contains (portalAlias.HTTPAlias.ToLower ())) {  				//ok' the alias is used as a custom tab' so now look in the dictionary to see if it's used a 'root' context  				string tabKey = url.ToLower ();  				if (tabKey.EndsWith ("/")) {  					tabKey = tabKey.TrimEnd ('/');  				}  				if (tabKey.EndsWith ("/default.aspx")) {  					tabKey = tabKey.Substring (0' tabKey.Length - 13);  					//13 = "/default.aspx".length  				}  				tabKey += "::";  				using (tabDict.GetReadLock ()) {  					if (tabDict.ContainsKey (tabKey)) {  						newUrl = tabDict [tabKey];  						reWritten = true;  						customTabAlias = true;  						//this alias is used as the alias for a custom tab  					}  				}  			}  		}  		if (customTabAlias == false) {  			int tabId;  			if (!String.IsNullOrEmpty (querystringCol ["TabId"])) {  				tabId = Convert.ToInt32 (querystringCol ["TabId"]);  				result.Action = ActionType.CheckFor301;  			} else {  				//not a custom alias for a specific tab' so it must be the home page for the portal we identified'  				//if its first request and splash page defined' then redirec to splash page.  				if (portal.SplashTabId > Null.NullInteger && HttpContext.Current != null && !HttpContext.Current.Request.Cookies.AllKeys.Contains ("SplashPageView")) {  					tabId = portal.SplashTabId;  					HttpContext.Current.Response.Cookies.Add (new HttpCookie ("SplashPageView"' "true") {  						Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  					});  					result.Action = ActionType.Redirect302;  					result.Reason = RedirectReason.Requested_SplashPage;  				} else {  					tabId = portal.HomeTabId;  				}  				if (culture == null) {  					culture = portal.DefaultLanguage;  					//set culture to default if not found specifically  				} else {  					//if there is a specific culture for this alias' and it's different to the default language' then  					//go check for a specific culture home page (5.5 and later)  					tabId = TabPathHelper.GetHomePageTabIdForCulture (portal.DefaultLanguage' portal.PortalID' culture' tabId);  				}  			}  			//see if there is a skin for the alias/culture combination  			string skin = TabPathHelper.GetTabAliasSkinForTabAndAlias (portalAlias.PortalID' portalAlias.HTTPAlias' culture);  			if (string.IsNullOrEmpty (skin) == false) {  				newUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tabId' ""' "skinSrc=" + skin);  			} else {  				newUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tabId' "");  			}  			//DNN-3789 always call this method as culture is defined by GetPageLocale  			AddLanguageCodeToRewritePath (ref newUrl' culture);  			//add on language specified by current portal alias  			reWritten = true;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckIfPortalAlias,The following statement contains a magic number: if (portal.HomeTabId == -1) {  	string tabKey = url;  	if (tabKey.EndsWith ("/")) {  		tabKey = tabKey.TrimEnd ('/');  	}  	tabKey += "::";  	using (tabDict.GetReadLock ()) {  		if (tabDict.ContainsKey (tabKey)) {  			newUrl = tabDict [tabKey];  			reWritten = true;  		}  	}  	//if no home tab' but matched a portal alias' and no trailing /default.aspx  	//and no 'newUrl' value because not rewritten' then append the /default.aspx   	//and ask for a rewrite on that one.  	//DNNDEV-27291  	if (reWritten == false) {  		//Need to determine if this is a child alias  		newUrl = "/" + Globals.glbDefaultPage;  		reWritten = true;  	}  } else {  	//set rewrite to home page of site  	//760: check for portal alias specific culture before choosing home tabid  	bool checkForCustomAlias = false;  	bool customTabAlias = false;  	//check for culture-specific aliases  	string culture = null;  	var portalAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (portal.PortalID).ToList ();  	//if there are chosen portal aliases' check to see if the found alias is one of them  	//if not' then will check for a custom alias per tab  	if (!portalAliases.ContainsAlias (portal.PortalID' portalAlias.HTTPAlias)) {  		checkForCustomAlias = true;  	} else {  		//check for a specific culture for the alias  		culture = portalAliases.GetCultureByPortalIdAndAlias (portal.PortalID' portalAlias.HTTPAlias);  	}  	if (checkForCustomAlias) {  		//ok' this isnt' a chosen portal alias' check the list of custom aliases  		List<string> customAliasesForTabs = TabIndexController.GetCustomPortalAliases (settings);  		if (customAliasesForTabs != null && customAliasesForTabs.Contains (portalAlias.HTTPAlias.ToLower ())) {  			//ok' the alias is used as a custom tab' so now look in the dictionary to see if it's used a 'root' context  			string tabKey = url.ToLower ();  			if (tabKey.EndsWith ("/")) {  				tabKey = tabKey.TrimEnd ('/');  			}  			if (tabKey.EndsWith ("/default.aspx")) {  				tabKey = tabKey.Substring (0' tabKey.Length - 13);  				//13 = "/default.aspx".length  			}  			tabKey += "::";  			using (tabDict.GetReadLock ()) {  				if (tabDict.ContainsKey (tabKey)) {  					newUrl = tabDict [tabKey];  					reWritten = true;  					customTabAlias = true;  					//this alias is used as the alias for a custom tab  				}  			}  		}  	}  	if (customTabAlias == false) {  		int tabId;  		if (!String.IsNullOrEmpty (querystringCol ["TabId"])) {  			tabId = Convert.ToInt32 (querystringCol ["TabId"]);  			result.Action = ActionType.CheckFor301;  		} else {  			//not a custom alias for a specific tab' so it must be the home page for the portal we identified'  			//if its first request and splash page defined' then redirec to splash page.  			if (portal.SplashTabId > Null.NullInteger && HttpContext.Current != null && !HttpContext.Current.Request.Cookies.AllKeys.Contains ("SplashPageView")) {  				tabId = portal.SplashTabId;  				HttpContext.Current.Response.Cookies.Add (new HttpCookie ("SplashPageView"' "true") {  					Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  				});  				result.Action = ActionType.Redirect302;  				result.Reason = RedirectReason.Requested_SplashPage;  			} else {  				tabId = portal.HomeTabId;  			}  			if (culture == null) {  				culture = portal.DefaultLanguage;  				//set culture to default if not found specifically  			} else {  				//if there is a specific culture for this alias' and it's different to the default language' then  				//go check for a specific culture home page (5.5 and later)  				tabId = TabPathHelper.GetHomePageTabIdForCulture (portal.DefaultLanguage' portal.PortalID' culture' tabId);  			}  		}  		//see if there is a skin for the alias/culture combination  		string skin = TabPathHelper.GetTabAliasSkinForTabAndAlias (portalAlias.PortalID' portalAlias.HTTPAlias' culture);  		if (string.IsNullOrEmpty (skin) == false) {  			newUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tabId' ""' "skinSrc=" + skin);  		} else {  			newUrl = Globals.glbDefaultPage + TabIndexController.CreateRewritePath (tabId' "");  		}  		//DNN-3789 always call this method as culture is defined by GetPageLocale  		AddLanguageCodeToRewritePath (ref newUrl' culture);  		//add on language specified by current portal alias  		reWritten = true;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckIfPortalAlias,The following statement contains a magic number: if (checkForCustomAlias) {  	//ok' this isnt' a chosen portal alias' check the list of custom aliases  	List<string> customAliasesForTabs = TabIndexController.GetCustomPortalAliases (settings);  	if (customAliasesForTabs != null && customAliasesForTabs.Contains (portalAlias.HTTPAlias.ToLower ())) {  		//ok' the alias is used as a custom tab' so now look in the dictionary to see if it's used a 'root' context  		string tabKey = url.ToLower ();  		if (tabKey.EndsWith ("/")) {  			tabKey = tabKey.TrimEnd ('/');  		}  		if (tabKey.EndsWith ("/default.aspx")) {  			tabKey = tabKey.Substring (0' tabKey.Length - 13);  			//13 = "/default.aspx".length  		}  		tabKey += "::";  		using (tabDict.GetReadLock ()) {  			if (tabDict.ContainsKey (tabKey)) {  				newUrl = tabDict [tabKey];  				reWritten = true;  				customTabAlias = true;  				//this alias is used as the alias for a custom tab  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckIfPortalAlias,The following statement contains a magic number: if (customAliasesForTabs != null && customAliasesForTabs.Contains (portalAlias.HTTPAlias.ToLower ())) {  	//ok' the alias is used as a custom tab' so now look in the dictionary to see if it's used a 'root' context  	string tabKey = url.ToLower ();  	if (tabKey.EndsWith ("/")) {  		tabKey = tabKey.TrimEnd ('/');  	}  	if (tabKey.EndsWith ("/default.aspx")) {  		tabKey = tabKey.Substring (0' tabKey.Length - 13);  		//13 = "/default.aspx".length  	}  	tabKey += "::";  	using (tabDict.GetReadLock ()) {  		if (tabDict.ContainsKey (tabKey)) {  			newUrl = tabDict [tabKey];  			reWritten = true;  			customTabAlias = true;  			//this alias is used as the alias for a custom tab  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckIfPortalAlias,The following statement contains a magic number: if (tabKey.EndsWith ("/default.aspx")) {  	tabKey = tabKey.Substring (0' tabKey.Length - 13);  	//13 = "/default.aspx".length  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CheckIfPortalAlias,The following statement contains a magic number: tabKey = tabKey.Substring (0' tabKey.Length - 13);  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CleanExtension,The following statement contains a magic number: if (result.ToLower ().EndsWith (ext) && ext != "") {  	result = result.Substring (0' result.Length - ext.Length);  	replaced = true;  } else {  	if (result.ToLower ().EndsWith (".aspx")) {  		result = result.Substring (0' result.Length - 5);  		replaced = true;  	} else {  		//object not set errors when language parameters used  		if (string.IsNullOrEmpty (langParms) == false) {  			//safely remove .aspx from the language path without doing a full .aspx -> "" replace on the entire path  			if (string.IsNullOrEmpty (result) == false && result.ToLower ().EndsWith (".aspx" + langParms.ToLower ())) {  				result = result.Substring (0' result.Length - (5 + langParms.Length)) + langParms;  				replaced = true;  			}  		} else if (result.EndsWith ("/")) {  			result = result.Substring (0' result.Length - 1);  			replaced = true;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CleanExtension,The following statement contains a magic number: if (result.ToLower ().EndsWith (ext) && ext != "") {  	result = result.Substring (0' result.Length - ext.Length);  	replaced = true;  } else {  	if (result.ToLower ().EndsWith (".aspx")) {  		result = result.Substring (0' result.Length - 5);  		replaced = true;  	} else {  		//object not set errors when language parameters used  		if (string.IsNullOrEmpty (langParms) == false) {  			//safely remove .aspx from the language path without doing a full .aspx -> "" replace on the entire path  			if (string.IsNullOrEmpty (result) == false && result.ToLower ().EndsWith (".aspx" + langParms.ToLower ())) {  				result = result.Substring (0' result.Length - (5 + langParms.Length)) + langParms;  				replaced = true;  			}  		} else if (result.EndsWith ("/")) {  			result = result.Substring (0' result.Length - 1);  			replaced = true;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CleanExtension,The following statement contains a magic number: if (result.ToLower ().EndsWith (".aspx")) {  	result = result.Substring (0' result.Length - 5);  	replaced = true;  } else {  	//object not set errors when language parameters used  	if (string.IsNullOrEmpty (langParms) == false) {  		//safely remove .aspx from the language path without doing a full .aspx -> "" replace on the entire path  		if (string.IsNullOrEmpty (result) == false && result.ToLower ().EndsWith (".aspx" + langParms.ToLower ())) {  			result = result.Substring (0' result.Length - (5 + langParms.Length)) + langParms;  			replaced = true;  		}  	} else if (result.EndsWith ("/")) {  		result = result.Substring (0' result.Length - 1);  		replaced = true;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CleanExtension,The following statement contains a magic number: if (result.ToLower ().EndsWith (".aspx")) {  	result = result.Substring (0' result.Length - 5);  	replaced = true;  } else {  	//object not set errors when language parameters used  	if (string.IsNullOrEmpty (langParms) == false) {  		//safely remove .aspx from the language path without doing a full .aspx -> "" replace on the entire path  		if (string.IsNullOrEmpty (result) == false && result.ToLower ().EndsWith (".aspx" + langParms.ToLower ())) {  			result = result.Substring (0' result.Length - (5 + langParms.Length)) + langParms;  			replaced = true;  		}  	} else if (result.EndsWith ("/")) {  		result = result.Substring (0' result.Length - 1);  		replaced = true;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CleanExtension,The following statement contains a magic number: result = result.Substring (0' result.Length - 5);  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CleanExtension,The following statement contains a magic number: if (string.IsNullOrEmpty (langParms) == false) {  	//safely remove .aspx from the language path without doing a full .aspx -> "" replace on the entire path  	if (string.IsNullOrEmpty (result) == false && result.ToLower ().EndsWith (".aspx" + langParms.ToLower ())) {  		result = result.Substring (0' result.Length - (5 + langParms.Length)) + langParms;  		replaced = true;  	}  } else if (result.EndsWith ("/")) {  	result = result.Substring (0' result.Length - 1);  	replaced = true;  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CleanExtension,The following statement contains a magic number: if (string.IsNullOrEmpty (result) == false && result.ToLower ().EndsWith (".aspx" + langParms.ToLower ())) {  	result = result.Substring (0' result.Length - (5 + langParms.Length)) + langParms;  	replaced = true;  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,CleanExtension,The following statement contains a magic number: result = result.Substring (0' result.Length - (5 + langParms.Length)) + langParms;  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The following statement contains a magic number: while (finished == false) {  	//first' try forming up a key based on alias/tabpath   	int lastIndex = splitUrl.GetUpperBound (0);  	int arraySize = lastIndex + 1;  	int totalDepth = maxAliasPathDepth + 1 + maxTabPathDepth + 1;  	//the maximum depth of segments of a valid url   	for (int i = lastIndex; i >= 0; i += -1) {  		//only start checking the url when it is in the range of the min->max number of segments   		if ((i > minAliasPathDepth & i <= totalDepth)) {  			//join all the tab path sections together   			//flag to remember if the incoming path had a .aspx or other pageAndExtension on it   			int tabPathStart = curAliasPathDepth + 1;  			int tabPathLength = i - curAliasPathDepth;  			if ((tabPathStart + tabPathLength) <= arraySize) {  				string tabPath = "";  				if ((tabPathLength > -1)) {  					tabPath = string.Join ("/"' splitUrl' tabPathStart' tabPathLength);  				}  				string aliasPath;  				if ((curAliasPathDepth <= lastIndex)) {  					aliasPath = string.Join ("/"' splitUrl' 0' curAliasPathDepth + 1);  				} else {  					finished = true;  					break;  				}  				int parmsSize = lastIndex - i;  				int parmStart = i + 1;  				//determine if any parameters on this value  				//make up the index that is looked for in the Tab Dictionary  				string urlPart = aliasPath + "::" + tabPath;  				//the :: allows separation of pagename and portal alias  				string tabKeyVal = urlPart.ToLower ();  				//force lower case lookup' all keys are lower case  				//Try with querystring first If last Index  				bool found = false;  				if (querystringCol.Count > 0) {  					found = CheckTabPath (tabKeyVal.Replace (" "' settings.SpaceEncodingValue) + "?" + querystringCol.ToString ().Split ('&') [0].ToLowerInvariant ()' result' settings' tabDict' ref newUrl);  				}  				if (!found) {  					found = CheckTabPath (tabKeyVal.Replace (" "' settings.SpaceEncodingValue)' result' settings' tabDict' ref newUrl);  				}  				bool isSiteRootMatch = false;  				if (!found && tabPathLength == 1) {  					//look for special case where the site root has a * value  					string siteRootLookup = aliasPath + "::" + "*";  					using (tabDict.GetReadLock ()) {  						found = tabDict.ContainsKey (siteRootLookup);  						if (found) {  							isSiteRootMatch = true;  							newUrl = tabDict [siteRootLookup];  							parmsSize++;  							//re-increase the parameter size  							parmStart--;  							//shift the point of the parms starting back one  						}  					}  				}  				if (found) {  					if (settings.ProcessRequestList != null) {  						newUrl = ReplaceDefaultPage (newUrl' url' settings.ProcessRequestList);  					}  					//look for a plain match on the default.aspx page which indicates no more rewriting needs to be done  					if (!isSiteRootMatch && (newUrl == Globals.glbDefaultPage || newUrl == Globals.glbDefaultPage + "[UseBase]")) {  						//the [UseBase] moniker is a shortcut hack.  It's used to recognise pages which have been excluded   						//from using Friendly Urls.  The request will go on to be processed by the dnn siteurls.config processing.  						//this stops the loop and exits the function  						newUrl = newUrl.Replace ("[UseBase]"' "");  						//get rid of usebase hack pattern  						SetRewriteParameters (ref result' newUrl);  						//set result   						finished = true;  					} else {  						//708 : move result rewrite set so that downstream functions know the tabid  						SetRewriteParameters (ref result' newUrl);  						//found the correct rewrite page' now investigate whether there   						//is part of the url path that needs to be converted to tab id's   						//  Multi Language Urls not being rewritten   						if (parmsSize > 0) {  							bool rewriteParms = false;  							//determine the url action and reason from embedded rewriting tokens  							ActionType action;  							RedirectReason reason;  							string resultingUrl;  							RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' true' settings' out resultingUrl' out reason' out action);  							newUrl = resultingUrl;  							result.Action = action;  							result.Reason = reason;  							//copy the parms into a separate array   							var urlParms = new string[parmsSize];  							Array.ConstrainedCopy (splitUrl' parmStart' urlParms' 0' parmsSize);  							if (!isSiteRootMatch && result.Reason == RedirectReason.User_Profile_Url) {  								result.Reason = RedirectReason.Not_Redirected;  								newUrl = RedirectTokens.RemoveAnyRedirectTokensAndReasons (newUrl);  							}  							//738 : check for custom module providers  							//894 : allow disable of custom url providers functionality  							if (!rewriteParms && settings.EnableCustomProviders) {  								bool newAction;  								//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  								//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  								List<string> messages = result.DebugMessages;  								newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  								result.DebugMessages = messages;  								if (newAction) {  									finished = true;  								}  							}  							//do a rewrite on the parameters from the stored parameter regex rewrites   							if (!rewriteParms) {  								newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' out rewriteParms' parentTraceId);  							}  							if (rewriteParms && isSiteRootMatch) {  								//set rewrite parameters to take tabid for site root matches  								SetRewriteParameters (ref result' newUrl);  							}  							//if the parms weren't rewritten by means of a regex' then process them normally  							if (!rewriteParms && !isSiteRootMatch)//can only try other matches if it wasn't a site root match  							 {  								//put those parms on the back of the url as a query string   								string cultureCode;  								newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' result' langParms' settings' out cultureCode);  								if (cultureCode != null)//set culture code if not already set  								 {  									result.CultureCode = cultureCode;  								}  							}  							//now check if the request involved a page pageAndExtension' (.aspx) and shouldn't have   							if (!finished) {  								//944 : don't switch to 301 redirect if action already set to 404  								if ((settings.PageExtensionUsageType == PageExtensionUsageType.Never || settings.PageExtensionUsageType == PageExtensionUsageType.PageOnly) & hadExtension) {  									//948 : use new 'no downgrade' method  									result.SetActionWithNoDowngrade (ActionType.CheckFor301);  								} else//866 : redirect back from no extension to extension if it didn't have one  								if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  									//948 : use new 'no downgrade' method  									result.SetActionWithNoDowngrade (ActionType.CheckFor301);  								}  							}  							if (isSiteRootMatch && !finished)//when it was a site root match' this must be matched with a custom parameter regex  							 {  								//only finished if the parms were rewritten by means of a regex rewrite  								reWritten = rewriteParms;  								finished = rewriteParms;  							} else {  								//rewriting done  								reWritten = true;  								finished = true;  							}  						} else {  							//determine the url action and redirect reason from embedded tokens in the url rewrite path  							string resultUrl;  							RedirectReason reason;  							ActionType action;  							//add back language parameters if they were there  							if (string.IsNullOrEmpty (langParms) == false) {  								string[] parms = langParms.Split ('/');  								if (parms.GetUpperBound (0) >= 1) {  									if (parms [0] == "" && parms.GetUpperBound (0) > 1) {  										newUrl += "&" + parms [1] + "=" + parms [2];  									} else {  										newUrl += "&" + parms [0] + "=" + parms [1];  									}  								}  							}  							RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' false' settings' out resultUrl' out reason' out action);  							newUrl = resultUrl;  							result.Reason = reason;  							result.Action = action;  							if (settings.EnableCustomProviders && ExtensionUrlProviderController.CheckForAlwaysCallProviders (result.PortalId' result.TabId' settings' parentTraceId)) {  								bool newAction;  								//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  								//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  								string[] urlParms = (new List<string> ()).ToArray ();  								//empty parm array  								if (string.IsNullOrEmpty (langParms) == false) {  									urlParms = langParms.Split ('/');  									//split the lang parms into the url Parms  								}  								bool rewriteParms;  								List<string> messages = result.DebugMessages;  								newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  								result.DebugMessages = messages;  							}  							//this is a page only' no parameters to deal with   							//944 : don't downgrade to redirect if the current action is a 404 (see 948 for new solution to 944)  							if (settings.PageExtensionUsageType == PageExtensionUsageType.Never & hadExtension) {  								//potentially a 301 replaced because shouldn't be using page extensions   								//948 : check to prevent action downgrade' in case already set to redirect  								result.SetActionWithNoDowngrade (ActionType.CheckFor301);  							} else {  								//866 : redirect back from no extension to extension if it didn't have one  								if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  									result.SetActionWithNoDowngrade (ActionType.CheckFor301);  								}  							}  							//rewriting done  							reWritten = true;  							finished = true;  						}  					}  					if (finished) {  						break;  					}  				}  			}  		}  	}  	//next' try forming up a key based on alias1/alias2/tabpath   	if (!finished) {  		curAliasPathDepth += 1;  		//gone too deep   		if ((curAliasPathDepth > maxAliasPathDepth) & (reWritten == false)) {  			// no hope of finding it then   			if (triedFixingSubdomain == false && false) {  				//resplit the new url   				splitUrl = newUrl.Split (Convert.ToChar ("/"));  				curAliasPathDepth = minAliasPathDepth;  				if (result.RedirectAllowed) {  					result.Action = ActionType.Redirect301;  				}  				//this should be redirected   				triedFixingSubdomain = true;  			} else {  				if (!Globals.ServicesFrameworkRegex.IsMatch (url) && result.RedirectAllowed) {  					//nothing left to try   					result.Action = (settings.DeletedTabHandlingType == DeletedTabHandlingType.Do404Error) ? ActionType.Output404 : ActionType.Redirect301;  					if (result.Action == ActionType.Redirect301) {  						result.Reason = RedirectReason.Deleted_Page;  						result.DoRewrite = true;  						result.FinalUrl = Globals.AddHTTP (result.PortalAlias.HTTPAlias + "/");  						reWritten = true;  					}  					break;  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The following statement contains a magic number: for (int i = lastIndex; i >= 0; i += -1) {  	//only start checking the url when it is in the range of the min->max number of segments   	if ((i > minAliasPathDepth & i <= totalDepth)) {  		//join all the tab path sections together   		//flag to remember if the incoming path had a .aspx or other pageAndExtension on it   		int tabPathStart = curAliasPathDepth + 1;  		int tabPathLength = i - curAliasPathDepth;  		if ((tabPathStart + tabPathLength) <= arraySize) {  			string tabPath = "";  			if ((tabPathLength > -1)) {  				tabPath = string.Join ("/"' splitUrl' tabPathStart' tabPathLength);  			}  			string aliasPath;  			if ((curAliasPathDepth <= lastIndex)) {  				aliasPath = string.Join ("/"' splitUrl' 0' curAliasPathDepth + 1);  			} else {  				finished = true;  				break;  			}  			int parmsSize = lastIndex - i;  			int parmStart = i + 1;  			//determine if any parameters on this value  			//make up the index that is looked for in the Tab Dictionary  			string urlPart = aliasPath + "::" + tabPath;  			//the :: allows separation of pagename and portal alias  			string tabKeyVal = urlPart.ToLower ();  			//force lower case lookup' all keys are lower case  			//Try with querystring first If last Index  			bool found = false;  			if (querystringCol.Count > 0) {  				found = CheckTabPath (tabKeyVal.Replace (" "' settings.SpaceEncodingValue) + "?" + querystringCol.ToString ().Split ('&') [0].ToLowerInvariant ()' result' settings' tabDict' ref newUrl);  			}  			if (!found) {  				found = CheckTabPath (tabKeyVal.Replace (" "' settings.SpaceEncodingValue)' result' settings' tabDict' ref newUrl);  			}  			bool isSiteRootMatch = false;  			if (!found && tabPathLength == 1) {  				//look for special case where the site root has a * value  				string siteRootLookup = aliasPath + "::" + "*";  				using (tabDict.GetReadLock ()) {  					found = tabDict.ContainsKey (siteRootLookup);  					if (found) {  						isSiteRootMatch = true;  						newUrl = tabDict [siteRootLookup];  						parmsSize++;  						//re-increase the parameter size  						parmStart--;  						//shift the point of the parms starting back one  					}  				}  			}  			if (found) {  				if (settings.ProcessRequestList != null) {  					newUrl = ReplaceDefaultPage (newUrl' url' settings.ProcessRequestList);  				}  				//look for a plain match on the default.aspx page which indicates no more rewriting needs to be done  				if (!isSiteRootMatch && (newUrl == Globals.glbDefaultPage || newUrl == Globals.glbDefaultPage + "[UseBase]")) {  					//the [UseBase] moniker is a shortcut hack.  It's used to recognise pages which have been excluded   					//from using Friendly Urls.  The request will go on to be processed by the dnn siteurls.config processing.  					//this stops the loop and exits the function  					newUrl = newUrl.Replace ("[UseBase]"' "");  					//get rid of usebase hack pattern  					SetRewriteParameters (ref result' newUrl);  					//set result   					finished = true;  				} else {  					//708 : move result rewrite set so that downstream functions know the tabid  					SetRewriteParameters (ref result' newUrl);  					//found the correct rewrite page' now investigate whether there   					//is part of the url path that needs to be converted to tab id's   					//  Multi Language Urls not being rewritten   					if (parmsSize > 0) {  						bool rewriteParms = false;  						//determine the url action and reason from embedded rewriting tokens  						ActionType action;  						RedirectReason reason;  						string resultingUrl;  						RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' true' settings' out resultingUrl' out reason' out action);  						newUrl = resultingUrl;  						result.Action = action;  						result.Reason = reason;  						//copy the parms into a separate array   						var urlParms = new string[parmsSize];  						Array.ConstrainedCopy (splitUrl' parmStart' urlParms' 0' parmsSize);  						if (!isSiteRootMatch && result.Reason == RedirectReason.User_Profile_Url) {  							result.Reason = RedirectReason.Not_Redirected;  							newUrl = RedirectTokens.RemoveAnyRedirectTokensAndReasons (newUrl);  						}  						//738 : check for custom module providers  						//894 : allow disable of custom url providers functionality  						if (!rewriteParms && settings.EnableCustomProviders) {  							bool newAction;  							//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  							//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  							List<string> messages = result.DebugMessages;  							newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  							result.DebugMessages = messages;  							if (newAction) {  								finished = true;  							}  						}  						//do a rewrite on the parameters from the stored parameter regex rewrites   						if (!rewriteParms) {  							newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' out rewriteParms' parentTraceId);  						}  						if (rewriteParms && isSiteRootMatch) {  							//set rewrite parameters to take tabid for site root matches  							SetRewriteParameters (ref result' newUrl);  						}  						//if the parms weren't rewritten by means of a regex' then process them normally  						if (!rewriteParms && !isSiteRootMatch)//can only try other matches if it wasn't a site root match  						 {  							//put those parms on the back of the url as a query string   							string cultureCode;  							newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' result' langParms' settings' out cultureCode);  							if (cultureCode != null)//set culture code if not already set  							 {  								result.CultureCode = cultureCode;  							}  						}  						//now check if the request involved a page pageAndExtension' (.aspx) and shouldn't have   						if (!finished) {  							//944 : don't switch to 301 redirect if action already set to 404  							if ((settings.PageExtensionUsageType == PageExtensionUsageType.Never || settings.PageExtensionUsageType == PageExtensionUsageType.PageOnly) & hadExtension) {  								//948 : use new 'no downgrade' method  								result.SetActionWithNoDowngrade (ActionType.CheckFor301);  							} else//866 : redirect back from no extension to extension if it didn't have one  							if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  								//948 : use new 'no downgrade' method  								result.SetActionWithNoDowngrade (ActionType.CheckFor301);  							}  						}  						if (isSiteRootMatch && !finished)//when it was a site root match' this must be matched with a custom parameter regex  						 {  							//only finished if the parms were rewritten by means of a regex rewrite  							reWritten = rewriteParms;  							finished = rewriteParms;  						} else {  							//rewriting done  							reWritten = true;  							finished = true;  						}  					} else {  						//determine the url action and redirect reason from embedded tokens in the url rewrite path  						string resultUrl;  						RedirectReason reason;  						ActionType action;  						//add back language parameters if they were there  						if (string.IsNullOrEmpty (langParms) == false) {  							string[] parms = langParms.Split ('/');  							if (parms.GetUpperBound (0) >= 1) {  								if (parms [0] == "" && parms.GetUpperBound (0) > 1) {  									newUrl += "&" + parms [1] + "=" + parms [2];  								} else {  									newUrl += "&" + parms [0] + "=" + parms [1];  								}  							}  						}  						RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' false' settings' out resultUrl' out reason' out action);  						newUrl = resultUrl;  						result.Reason = reason;  						result.Action = action;  						if (settings.EnableCustomProviders && ExtensionUrlProviderController.CheckForAlwaysCallProviders (result.PortalId' result.TabId' settings' parentTraceId)) {  							bool newAction;  							//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  							//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  							string[] urlParms = (new List<string> ()).ToArray ();  							//empty parm array  							if (string.IsNullOrEmpty (langParms) == false) {  								urlParms = langParms.Split ('/');  								//split the lang parms into the url Parms  							}  							bool rewriteParms;  							List<string> messages = result.DebugMessages;  							newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  							result.DebugMessages = messages;  						}  						//this is a page only' no parameters to deal with   						//944 : don't downgrade to redirect if the current action is a 404 (see 948 for new solution to 944)  						if (settings.PageExtensionUsageType == PageExtensionUsageType.Never & hadExtension) {  							//potentially a 301 replaced because shouldn't be using page extensions   							//948 : check to prevent action downgrade' in case already set to redirect  							result.SetActionWithNoDowngrade (ActionType.CheckFor301);  						} else {  							//866 : redirect back from no extension to extension if it didn't have one  							if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  								result.SetActionWithNoDowngrade (ActionType.CheckFor301);  							}  						}  						//rewriting done  						reWritten = true;  						finished = true;  					}  				}  				if (finished) {  					break;  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The following statement contains a magic number: if ((i > minAliasPathDepth & i <= totalDepth)) {  	//join all the tab path sections together   	//flag to remember if the incoming path had a .aspx or other pageAndExtension on it   	int tabPathStart = curAliasPathDepth + 1;  	int tabPathLength = i - curAliasPathDepth;  	if ((tabPathStart + tabPathLength) <= arraySize) {  		string tabPath = "";  		if ((tabPathLength > -1)) {  			tabPath = string.Join ("/"' splitUrl' tabPathStart' tabPathLength);  		}  		string aliasPath;  		if ((curAliasPathDepth <= lastIndex)) {  			aliasPath = string.Join ("/"' splitUrl' 0' curAliasPathDepth + 1);  		} else {  			finished = true;  			break;  		}  		int parmsSize = lastIndex - i;  		int parmStart = i + 1;  		//determine if any parameters on this value  		//make up the index that is looked for in the Tab Dictionary  		string urlPart = aliasPath + "::" + tabPath;  		//the :: allows separation of pagename and portal alias  		string tabKeyVal = urlPart.ToLower ();  		//force lower case lookup' all keys are lower case  		//Try with querystring first If last Index  		bool found = false;  		if (querystringCol.Count > 0) {  			found = CheckTabPath (tabKeyVal.Replace (" "' settings.SpaceEncodingValue) + "?" + querystringCol.ToString ().Split ('&') [0].ToLowerInvariant ()' result' settings' tabDict' ref newUrl);  		}  		if (!found) {  			found = CheckTabPath (tabKeyVal.Replace (" "' settings.SpaceEncodingValue)' result' settings' tabDict' ref newUrl);  		}  		bool isSiteRootMatch = false;  		if (!found && tabPathLength == 1) {  			//look for special case where the site root has a * value  			string siteRootLookup = aliasPath + "::" + "*";  			using (tabDict.GetReadLock ()) {  				found = tabDict.ContainsKey (siteRootLookup);  				if (found) {  					isSiteRootMatch = true;  					newUrl = tabDict [siteRootLookup];  					parmsSize++;  					//re-increase the parameter size  					parmStart--;  					//shift the point of the parms starting back one  				}  			}  		}  		if (found) {  			if (settings.ProcessRequestList != null) {  				newUrl = ReplaceDefaultPage (newUrl' url' settings.ProcessRequestList);  			}  			//look for a plain match on the default.aspx page which indicates no more rewriting needs to be done  			if (!isSiteRootMatch && (newUrl == Globals.glbDefaultPage || newUrl == Globals.glbDefaultPage + "[UseBase]")) {  				//the [UseBase] moniker is a shortcut hack.  It's used to recognise pages which have been excluded   				//from using Friendly Urls.  The request will go on to be processed by the dnn siteurls.config processing.  				//this stops the loop and exits the function  				newUrl = newUrl.Replace ("[UseBase]"' "");  				//get rid of usebase hack pattern  				SetRewriteParameters (ref result' newUrl);  				//set result   				finished = true;  			} else {  				//708 : move result rewrite set so that downstream functions know the tabid  				SetRewriteParameters (ref result' newUrl);  				//found the correct rewrite page' now investigate whether there   				//is part of the url path that needs to be converted to tab id's   				//  Multi Language Urls not being rewritten   				if (parmsSize > 0) {  					bool rewriteParms = false;  					//determine the url action and reason from embedded rewriting tokens  					ActionType action;  					RedirectReason reason;  					string resultingUrl;  					RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' true' settings' out resultingUrl' out reason' out action);  					newUrl = resultingUrl;  					result.Action = action;  					result.Reason = reason;  					//copy the parms into a separate array   					var urlParms = new string[parmsSize];  					Array.ConstrainedCopy (splitUrl' parmStart' urlParms' 0' parmsSize);  					if (!isSiteRootMatch && result.Reason == RedirectReason.User_Profile_Url) {  						result.Reason = RedirectReason.Not_Redirected;  						newUrl = RedirectTokens.RemoveAnyRedirectTokensAndReasons (newUrl);  					}  					//738 : check for custom module providers  					//894 : allow disable of custom url providers functionality  					if (!rewriteParms && settings.EnableCustomProviders) {  						bool newAction;  						//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  						//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  						List<string> messages = result.DebugMessages;  						newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  						result.DebugMessages = messages;  						if (newAction) {  							finished = true;  						}  					}  					//do a rewrite on the parameters from the stored parameter regex rewrites   					if (!rewriteParms) {  						newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' out rewriteParms' parentTraceId);  					}  					if (rewriteParms && isSiteRootMatch) {  						//set rewrite parameters to take tabid for site root matches  						SetRewriteParameters (ref result' newUrl);  					}  					//if the parms weren't rewritten by means of a regex' then process them normally  					if (!rewriteParms && !isSiteRootMatch)//can only try other matches if it wasn't a site root match  					 {  						//put those parms on the back of the url as a query string   						string cultureCode;  						newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' result' langParms' settings' out cultureCode);  						if (cultureCode != null)//set culture code if not already set  						 {  							result.CultureCode = cultureCode;  						}  					}  					//now check if the request involved a page pageAndExtension' (.aspx) and shouldn't have   					if (!finished) {  						//944 : don't switch to 301 redirect if action already set to 404  						if ((settings.PageExtensionUsageType == PageExtensionUsageType.Never || settings.PageExtensionUsageType == PageExtensionUsageType.PageOnly) & hadExtension) {  							//948 : use new 'no downgrade' method  							result.SetActionWithNoDowngrade (ActionType.CheckFor301);  						} else//866 : redirect back from no extension to extension if it didn't have one  						if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  							//948 : use new 'no downgrade' method  							result.SetActionWithNoDowngrade (ActionType.CheckFor301);  						}  					}  					if (isSiteRootMatch && !finished)//when it was a site root match' this must be matched with a custom parameter regex  					 {  						//only finished if the parms were rewritten by means of a regex rewrite  						reWritten = rewriteParms;  						finished = rewriteParms;  					} else {  						//rewriting done  						reWritten = true;  						finished = true;  					}  				} else {  					//determine the url action and redirect reason from embedded tokens in the url rewrite path  					string resultUrl;  					RedirectReason reason;  					ActionType action;  					//add back language parameters if they were there  					if (string.IsNullOrEmpty (langParms) == false) {  						string[] parms = langParms.Split ('/');  						if (parms.GetUpperBound (0) >= 1) {  							if (parms [0] == "" && parms.GetUpperBound (0) > 1) {  								newUrl += "&" + parms [1] + "=" + parms [2];  							} else {  								newUrl += "&" + parms [0] + "=" + parms [1];  							}  						}  					}  					RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' false' settings' out resultUrl' out reason' out action);  					newUrl = resultUrl;  					result.Reason = reason;  					result.Action = action;  					if (settings.EnableCustomProviders && ExtensionUrlProviderController.CheckForAlwaysCallProviders (result.PortalId' result.TabId' settings' parentTraceId)) {  						bool newAction;  						//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  						//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  						string[] urlParms = (new List<string> ()).ToArray ();  						//empty parm array  						if (string.IsNullOrEmpty (langParms) == false) {  							urlParms = langParms.Split ('/');  							//split the lang parms into the url Parms  						}  						bool rewriteParms;  						List<string> messages = result.DebugMessages;  						newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  						result.DebugMessages = messages;  					}  					//this is a page only' no parameters to deal with   					//944 : don't downgrade to redirect if the current action is a 404 (see 948 for new solution to 944)  					if (settings.PageExtensionUsageType == PageExtensionUsageType.Never & hadExtension) {  						//potentially a 301 replaced because shouldn't be using page extensions   						//948 : check to prevent action downgrade' in case already set to redirect  						result.SetActionWithNoDowngrade (ActionType.CheckFor301);  					} else {  						//866 : redirect back from no extension to extension if it didn't have one  						if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  							result.SetActionWithNoDowngrade (ActionType.CheckFor301);  						}  					}  					//rewriting done  					reWritten = true;  					finished = true;  				}  			}  			if (finished) {  				break;  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The following statement contains a magic number: if ((tabPathStart + tabPathLength) <= arraySize) {  	string tabPath = "";  	if ((tabPathLength > -1)) {  		tabPath = string.Join ("/"' splitUrl' tabPathStart' tabPathLength);  	}  	string aliasPath;  	if ((curAliasPathDepth <= lastIndex)) {  		aliasPath = string.Join ("/"' splitUrl' 0' curAliasPathDepth + 1);  	} else {  		finished = true;  		break;  	}  	int parmsSize = lastIndex - i;  	int parmStart = i + 1;  	//determine if any parameters on this value  	//make up the index that is looked for in the Tab Dictionary  	string urlPart = aliasPath + "::" + tabPath;  	//the :: allows separation of pagename and portal alias  	string tabKeyVal = urlPart.ToLower ();  	//force lower case lookup' all keys are lower case  	//Try with querystring first If last Index  	bool found = false;  	if (querystringCol.Count > 0) {  		found = CheckTabPath (tabKeyVal.Replace (" "' settings.SpaceEncodingValue) + "?" + querystringCol.ToString ().Split ('&') [0].ToLowerInvariant ()' result' settings' tabDict' ref newUrl);  	}  	if (!found) {  		found = CheckTabPath (tabKeyVal.Replace (" "' settings.SpaceEncodingValue)' result' settings' tabDict' ref newUrl);  	}  	bool isSiteRootMatch = false;  	if (!found && tabPathLength == 1) {  		//look for special case where the site root has a * value  		string siteRootLookup = aliasPath + "::" + "*";  		using (tabDict.GetReadLock ()) {  			found = tabDict.ContainsKey (siteRootLookup);  			if (found) {  				isSiteRootMatch = true;  				newUrl = tabDict [siteRootLookup];  				parmsSize++;  				//re-increase the parameter size  				parmStart--;  				//shift the point of the parms starting back one  			}  		}  	}  	if (found) {  		if (settings.ProcessRequestList != null) {  			newUrl = ReplaceDefaultPage (newUrl' url' settings.ProcessRequestList);  		}  		//look for a plain match on the default.aspx page which indicates no more rewriting needs to be done  		if (!isSiteRootMatch && (newUrl == Globals.glbDefaultPage || newUrl == Globals.glbDefaultPage + "[UseBase]")) {  			//the [UseBase] moniker is a shortcut hack.  It's used to recognise pages which have been excluded   			//from using Friendly Urls.  The request will go on to be processed by the dnn siteurls.config processing.  			//this stops the loop and exits the function  			newUrl = newUrl.Replace ("[UseBase]"' "");  			//get rid of usebase hack pattern  			SetRewriteParameters (ref result' newUrl);  			//set result   			finished = true;  		} else {  			//708 : move result rewrite set so that downstream functions know the tabid  			SetRewriteParameters (ref result' newUrl);  			//found the correct rewrite page' now investigate whether there   			//is part of the url path that needs to be converted to tab id's   			//  Multi Language Urls not being rewritten   			if (parmsSize > 0) {  				bool rewriteParms = false;  				//determine the url action and reason from embedded rewriting tokens  				ActionType action;  				RedirectReason reason;  				string resultingUrl;  				RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' true' settings' out resultingUrl' out reason' out action);  				newUrl = resultingUrl;  				result.Action = action;  				result.Reason = reason;  				//copy the parms into a separate array   				var urlParms = new string[parmsSize];  				Array.ConstrainedCopy (splitUrl' parmStart' urlParms' 0' parmsSize);  				if (!isSiteRootMatch && result.Reason == RedirectReason.User_Profile_Url) {  					result.Reason = RedirectReason.Not_Redirected;  					newUrl = RedirectTokens.RemoveAnyRedirectTokensAndReasons (newUrl);  				}  				//738 : check for custom module providers  				//894 : allow disable of custom url providers functionality  				if (!rewriteParms && settings.EnableCustomProviders) {  					bool newAction;  					//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  					//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  					List<string> messages = result.DebugMessages;  					newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  					result.DebugMessages = messages;  					if (newAction) {  						finished = true;  					}  				}  				//do a rewrite on the parameters from the stored parameter regex rewrites   				if (!rewriteParms) {  					newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' out rewriteParms' parentTraceId);  				}  				if (rewriteParms && isSiteRootMatch) {  					//set rewrite parameters to take tabid for site root matches  					SetRewriteParameters (ref result' newUrl);  				}  				//if the parms weren't rewritten by means of a regex' then process them normally  				if (!rewriteParms && !isSiteRootMatch)//can only try other matches if it wasn't a site root match  				 {  					//put those parms on the back of the url as a query string   					string cultureCode;  					newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' result' langParms' settings' out cultureCode);  					if (cultureCode != null)//set culture code if not already set  					 {  						result.CultureCode = cultureCode;  					}  				}  				//now check if the request involved a page pageAndExtension' (.aspx) and shouldn't have   				if (!finished) {  					//944 : don't switch to 301 redirect if action already set to 404  					if ((settings.PageExtensionUsageType == PageExtensionUsageType.Never || settings.PageExtensionUsageType == PageExtensionUsageType.PageOnly) & hadExtension) {  						//948 : use new 'no downgrade' method  						result.SetActionWithNoDowngrade (ActionType.CheckFor301);  					} else//866 : redirect back from no extension to extension if it didn't have one  					if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  						//948 : use new 'no downgrade' method  						result.SetActionWithNoDowngrade (ActionType.CheckFor301);  					}  				}  				if (isSiteRootMatch && !finished)//when it was a site root match' this must be matched with a custom parameter regex  				 {  					//only finished if the parms were rewritten by means of a regex rewrite  					reWritten = rewriteParms;  					finished = rewriteParms;  				} else {  					//rewriting done  					reWritten = true;  					finished = true;  				}  			} else {  				//determine the url action and redirect reason from embedded tokens in the url rewrite path  				string resultUrl;  				RedirectReason reason;  				ActionType action;  				//add back language parameters if they were there  				if (string.IsNullOrEmpty (langParms) == false) {  					string[] parms = langParms.Split ('/');  					if (parms.GetUpperBound (0) >= 1) {  						if (parms [0] == "" && parms.GetUpperBound (0) > 1) {  							newUrl += "&" + parms [1] + "=" + parms [2];  						} else {  							newUrl += "&" + parms [0] + "=" + parms [1];  						}  					}  				}  				RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' false' settings' out resultUrl' out reason' out action);  				newUrl = resultUrl;  				result.Reason = reason;  				result.Action = action;  				if (settings.EnableCustomProviders && ExtensionUrlProviderController.CheckForAlwaysCallProviders (result.PortalId' result.TabId' settings' parentTraceId)) {  					bool newAction;  					//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  					//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  					string[] urlParms = (new List<string> ()).ToArray ();  					//empty parm array  					if (string.IsNullOrEmpty (langParms) == false) {  						urlParms = langParms.Split ('/');  						//split the lang parms into the url Parms  					}  					bool rewriteParms;  					List<string> messages = result.DebugMessages;  					newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  					result.DebugMessages = messages;  				}  				//this is a page only' no parameters to deal with   				//944 : don't downgrade to redirect if the current action is a 404 (see 948 for new solution to 944)  				if (settings.PageExtensionUsageType == PageExtensionUsageType.Never & hadExtension) {  					//potentially a 301 replaced because shouldn't be using page extensions   					//948 : check to prevent action downgrade' in case already set to redirect  					result.SetActionWithNoDowngrade (ActionType.CheckFor301);  				} else {  					//866 : redirect back from no extension to extension if it didn't have one  					if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  						result.SetActionWithNoDowngrade (ActionType.CheckFor301);  					}  				}  				//rewriting done  				reWritten = true;  				finished = true;  			}  		}  		if (finished) {  			break;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The following statement contains a magic number: if (found) {  	if (settings.ProcessRequestList != null) {  		newUrl = ReplaceDefaultPage (newUrl' url' settings.ProcessRequestList);  	}  	//look for a plain match on the default.aspx page which indicates no more rewriting needs to be done  	if (!isSiteRootMatch && (newUrl == Globals.glbDefaultPage || newUrl == Globals.glbDefaultPage + "[UseBase]")) {  		//the [UseBase] moniker is a shortcut hack.  It's used to recognise pages which have been excluded   		//from using Friendly Urls.  The request will go on to be processed by the dnn siteurls.config processing.  		//this stops the loop and exits the function  		newUrl = newUrl.Replace ("[UseBase]"' "");  		//get rid of usebase hack pattern  		SetRewriteParameters (ref result' newUrl);  		//set result   		finished = true;  	} else {  		//708 : move result rewrite set so that downstream functions know the tabid  		SetRewriteParameters (ref result' newUrl);  		//found the correct rewrite page' now investigate whether there   		//is part of the url path that needs to be converted to tab id's   		//  Multi Language Urls not being rewritten   		if (parmsSize > 0) {  			bool rewriteParms = false;  			//determine the url action and reason from embedded rewriting tokens  			ActionType action;  			RedirectReason reason;  			string resultingUrl;  			RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' true' settings' out resultingUrl' out reason' out action);  			newUrl = resultingUrl;  			result.Action = action;  			result.Reason = reason;  			//copy the parms into a separate array   			var urlParms = new string[parmsSize];  			Array.ConstrainedCopy (splitUrl' parmStart' urlParms' 0' parmsSize);  			if (!isSiteRootMatch && result.Reason == RedirectReason.User_Profile_Url) {  				result.Reason = RedirectReason.Not_Redirected;  				newUrl = RedirectTokens.RemoveAnyRedirectTokensAndReasons (newUrl);  			}  			//738 : check for custom module providers  			//894 : allow disable of custom url providers functionality  			if (!rewriteParms && settings.EnableCustomProviders) {  				bool newAction;  				//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  				//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  				List<string> messages = result.DebugMessages;  				newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  				result.DebugMessages = messages;  				if (newAction) {  					finished = true;  				}  			}  			//do a rewrite on the parameters from the stored parameter regex rewrites   			if (!rewriteParms) {  				newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' out rewriteParms' parentTraceId);  			}  			if (rewriteParms && isSiteRootMatch) {  				//set rewrite parameters to take tabid for site root matches  				SetRewriteParameters (ref result' newUrl);  			}  			//if the parms weren't rewritten by means of a regex' then process them normally  			if (!rewriteParms && !isSiteRootMatch)//can only try other matches if it wasn't a site root match  			 {  				//put those parms on the back of the url as a query string   				string cultureCode;  				newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' result' langParms' settings' out cultureCode);  				if (cultureCode != null)//set culture code if not already set  				 {  					result.CultureCode = cultureCode;  				}  			}  			//now check if the request involved a page pageAndExtension' (.aspx) and shouldn't have   			if (!finished) {  				//944 : don't switch to 301 redirect if action already set to 404  				if ((settings.PageExtensionUsageType == PageExtensionUsageType.Never || settings.PageExtensionUsageType == PageExtensionUsageType.PageOnly) & hadExtension) {  					//948 : use new 'no downgrade' method  					result.SetActionWithNoDowngrade (ActionType.CheckFor301);  				} else//866 : redirect back from no extension to extension if it didn't have one  				if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  					//948 : use new 'no downgrade' method  					result.SetActionWithNoDowngrade (ActionType.CheckFor301);  				}  			}  			if (isSiteRootMatch && !finished)//when it was a site root match' this must be matched with a custom parameter regex  			 {  				//only finished if the parms were rewritten by means of a regex rewrite  				reWritten = rewriteParms;  				finished = rewriteParms;  			} else {  				//rewriting done  				reWritten = true;  				finished = true;  			}  		} else {  			//determine the url action and redirect reason from embedded tokens in the url rewrite path  			string resultUrl;  			RedirectReason reason;  			ActionType action;  			//add back language parameters if they were there  			if (string.IsNullOrEmpty (langParms) == false) {  				string[] parms = langParms.Split ('/');  				if (parms.GetUpperBound (0) >= 1) {  					if (parms [0] == "" && parms.GetUpperBound (0) > 1) {  						newUrl += "&" + parms [1] + "=" + parms [2];  					} else {  						newUrl += "&" + parms [0] + "=" + parms [1];  					}  				}  			}  			RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' false' settings' out resultUrl' out reason' out action);  			newUrl = resultUrl;  			result.Reason = reason;  			result.Action = action;  			if (settings.EnableCustomProviders && ExtensionUrlProviderController.CheckForAlwaysCallProviders (result.PortalId' result.TabId' settings' parentTraceId)) {  				bool newAction;  				//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  				//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  				string[] urlParms = (new List<string> ()).ToArray ();  				//empty parm array  				if (string.IsNullOrEmpty (langParms) == false) {  					urlParms = langParms.Split ('/');  					//split the lang parms into the url Parms  				}  				bool rewriteParms;  				List<string> messages = result.DebugMessages;  				newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  				result.DebugMessages = messages;  			}  			//this is a page only' no parameters to deal with   			//944 : don't downgrade to redirect if the current action is a 404 (see 948 for new solution to 944)  			if (settings.PageExtensionUsageType == PageExtensionUsageType.Never & hadExtension) {  				//potentially a 301 replaced because shouldn't be using page extensions   				//948 : check to prevent action downgrade' in case already set to redirect  				result.SetActionWithNoDowngrade (ActionType.CheckFor301);  			} else {  				//866 : redirect back from no extension to extension if it didn't have one  				if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  					result.SetActionWithNoDowngrade (ActionType.CheckFor301);  				}  			}  			//rewriting done  			reWritten = true;  			finished = true;  		}  	}  	if (finished) {  		break;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The following statement contains a magic number: if (!isSiteRootMatch && (newUrl == Globals.glbDefaultPage || newUrl == Globals.glbDefaultPage + "[UseBase]")) {  	//the [UseBase] moniker is a shortcut hack.  It's used to recognise pages which have been excluded   	//from using Friendly Urls.  The request will go on to be processed by the dnn siteurls.config processing.  	//this stops the loop and exits the function  	newUrl = newUrl.Replace ("[UseBase]"' "");  	//get rid of usebase hack pattern  	SetRewriteParameters (ref result' newUrl);  	//set result   	finished = true;  } else {  	//708 : move result rewrite set so that downstream functions know the tabid  	SetRewriteParameters (ref result' newUrl);  	//found the correct rewrite page' now investigate whether there   	//is part of the url path that needs to be converted to tab id's   	//  Multi Language Urls not being rewritten   	if (parmsSize > 0) {  		bool rewriteParms = false;  		//determine the url action and reason from embedded rewriting tokens  		ActionType action;  		RedirectReason reason;  		string resultingUrl;  		RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' true' settings' out resultingUrl' out reason' out action);  		newUrl = resultingUrl;  		result.Action = action;  		result.Reason = reason;  		//copy the parms into a separate array   		var urlParms = new string[parmsSize];  		Array.ConstrainedCopy (splitUrl' parmStart' urlParms' 0' parmsSize);  		if (!isSiteRootMatch && result.Reason == RedirectReason.User_Profile_Url) {  			result.Reason = RedirectReason.Not_Redirected;  			newUrl = RedirectTokens.RemoveAnyRedirectTokensAndReasons (newUrl);  		}  		//738 : check for custom module providers  		//894 : allow disable of custom url providers functionality  		if (!rewriteParms && settings.EnableCustomProviders) {  			bool newAction;  			//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  			//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  			List<string> messages = result.DebugMessages;  			newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  			result.DebugMessages = messages;  			if (newAction) {  				finished = true;  			}  		}  		//do a rewrite on the parameters from the stored parameter regex rewrites   		if (!rewriteParms) {  			newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' out rewriteParms' parentTraceId);  		}  		if (rewriteParms && isSiteRootMatch) {  			//set rewrite parameters to take tabid for site root matches  			SetRewriteParameters (ref result' newUrl);  		}  		//if the parms weren't rewritten by means of a regex' then process them normally  		if (!rewriteParms && !isSiteRootMatch)//can only try other matches if it wasn't a site root match  		 {  			//put those parms on the back of the url as a query string   			string cultureCode;  			newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' result' langParms' settings' out cultureCode);  			if (cultureCode != null)//set culture code if not already set  			 {  				result.CultureCode = cultureCode;  			}  		}  		//now check if the request involved a page pageAndExtension' (.aspx) and shouldn't have   		if (!finished) {  			//944 : don't switch to 301 redirect if action already set to 404  			if ((settings.PageExtensionUsageType == PageExtensionUsageType.Never || settings.PageExtensionUsageType == PageExtensionUsageType.PageOnly) & hadExtension) {  				//948 : use new 'no downgrade' method  				result.SetActionWithNoDowngrade (ActionType.CheckFor301);  			} else//866 : redirect back from no extension to extension if it didn't have one  			if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  				//948 : use new 'no downgrade' method  				result.SetActionWithNoDowngrade (ActionType.CheckFor301);  			}  		}  		if (isSiteRootMatch && !finished)//when it was a site root match' this must be matched with a custom parameter regex  		 {  			//only finished if the parms were rewritten by means of a regex rewrite  			reWritten = rewriteParms;  			finished = rewriteParms;  		} else {  			//rewriting done  			reWritten = true;  			finished = true;  		}  	} else {  		//determine the url action and redirect reason from embedded tokens in the url rewrite path  		string resultUrl;  		RedirectReason reason;  		ActionType action;  		//add back language parameters if they were there  		if (string.IsNullOrEmpty (langParms) == false) {  			string[] parms = langParms.Split ('/');  			if (parms.GetUpperBound (0) >= 1) {  				if (parms [0] == "" && parms.GetUpperBound (0) > 1) {  					newUrl += "&" + parms [1] + "=" + parms [2];  				} else {  					newUrl += "&" + parms [0] + "=" + parms [1];  				}  			}  		}  		RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' false' settings' out resultUrl' out reason' out action);  		newUrl = resultUrl;  		result.Reason = reason;  		result.Action = action;  		if (settings.EnableCustomProviders && ExtensionUrlProviderController.CheckForAlwaysCallProviders (result.PortalId' result.TabId' settings' parentTraceId)) {  			bool newAction;  			//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  			//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  			string[] urlParms = (new List<string> ()).ToArray ();  			//empty parm array  			if (string.IsNullOrEmpty (langParms) == false) {  				urlParms = langParms.Split ('/');  				//split the lang parms into the url Parms  			}  			bool rewriteParms;  			List<string> messages = result.DebugMessages;  			newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  			result.DebugMessages = messages;  		}  		//this is a page only' no parameters to deal with   		//944 : don't downgrade to redirect if the current action is a 404 (see 948 for new solution to 944)  		if (settings.PageExtensionUsageType == PageExtensionUsageType.Never & hadExtension) {  			//potentially a 301 replaced because shouldn't be using page extensions   			//948 : check to prevent action downgrade' in case already set to redirect  			result.SetActionWithNoDowngrade (ActionType.CheckFor301);  		} else {  			//866 : redirect back from no extension to extension if it didn't have one  			if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  				result.SetActionWithNoDowngrade (ActionType.CheckFor301);  			}  		}  		//rewriting done  		reWritten = true;  		finished = true;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The following statement contains a magic number: if (parmsSize > 0) {  	bool rewriteParms = false;  	//determine the url action and reason from embedded rewriting tokens  	ActionType action;  	RedirectReason reason;  	string resultingUrl;  	RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' true' settings' out resultingUrl' out reason' out action);  	newUrl = resultingUrl;  	result.Action = action;  	result.Reason = reason;  	//copy the parms into a separate array   	var urlParms = new string[parmsSize];  	Array.ConstrainedCopy (splitUrl' parmStart' urlParms' 0' parmsSize);  	if (!isSiteRootMatch && result.Reason == RedirectReason.User_Profile_Url) {  		result.Reason = RedirectReason.Not_Redirected;  		newUrl = RedirectTokens.RemoveAnyRedirectTokensAndReasons (newUrl);  	}  	//738 : check for custom module providers  	//894 : allow disable of custom url providers functionality  	if (!rewriteParms && settings.EnableCustomProviders) {  		bool newAction;  		//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  		//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  		List<string> messages = result.DebugMessages;  		newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  		result.DebugMessages = messages;  		if (newAction) {  			finished = true;  		}  	}  	//do a rewrite on the parameters from the stored parameter regex rewrites   	if (!rewriteParms) {  		newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' out rewriteParms' parentTraceId);  	}  	if (rewriteParms && isSiteRootMatch) {  		//set rewrite parameters to take tabid for site root matches  		SetRewriteParameters (ref result' newUrl);  	}  	//if the parms weren't rewritten by means of a regex' then process them normally  	if (!rewriteParms && !isSiteRootMatch)//can only try other matches if it wasn't a site root match  	 {  		//put those parms on the back of the url as a query string   		string cultureCode;  		newUrl = RewriteParameters (newUrl' tabKeyVal' urlParms' result' langParms' settings' out cultureCode);  		if (cultureCode != null)//set culture code if not already set  		 {  			result.CultureCode = cultureCode;  		}  	}  	//now check if the request involved a page pageAndExtension' (.aspx) and shouldn't have   	if (!finished) {  		//944 : don't switch to 301 redirect if action already set to 404  		if ((settings.PageExtensionUsageType == PageExtensionUsageType.Never || settings.PageExtensionUsageType == PageExtensionUsageType.PageOnly) & hadExtension) {  			//948 : use new 'no downgrade' method  			result.SetActionWithNoDowngrade (ActionType.CheckFor301);  		} else//866 : redirect back from no extension to extension if it didn't have one  		if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  			//948 : use new 'no downgrade' method  			result.SetActionWithNoDowngrade (ActionType.CheckFor301);  		}  	}  	if (isSiteRootMatch && !finished)//when it was a site root match' this must be matched with a custom parameter regex  	 {  		//only finished if the parms were rewritten by means of a regex rewrite  		reWritten = rewriteParms;  		finished = rewriteParms;  	} else {  		//rewriting done  		reWritten = true;  		finished = true;  	}  } else {  	//determine the url action and redirect reason from embedded tokens in the url rewrite path  	string resultUrl;  	RedirectReason reason;  	ActionType action;  	//add back language parameters if they were there  	if (string.IsNullOrEmpty (langParms) == false) {  		string[] parms = langParms.Split ('/');  		if (parms.GetUpperBound (0) >= 1) {  			if (parms [0] == "" && parms.GetUpperBound (0) > 1) {  				newUrl += "&" + parms [1] + "=" + parms [2];  			} else {  				newUrl += "&" + parms [0] + "=" + parms [1];  			}  		}  	}  	RedirectTokens.DetermineRedirectReasonAndAction (newUrl' result' false' settings' out resultUrl' out reason' out action);  	newUrl = resultUrl;  	result.Reason = reason;  	result.Action = action;  	if (settings.EnableCustomProviders && ExtensionUrlProviderController.CheckForAlwaysCallProviders (result.PortalId' result.TabId' settings' parentTraceId)) {  		bool newAction;  		//newAction tracks whether or not a new 'action' (ie 301' 404' etc) has been requested.  		//call the module friendly url providers. Note that the rewriteParms value will be changed if there is a rewrite.  		string[] urlParms = (new List<string> ()).ToArray ();  		//empty parm array  		if (string.IsNullOrEmpty (langParms) == false) {  			urlParms = langParms.Split ('/');  			//split the lang parms into the url Parms  		}  		bool rewriteParms;  		List<string> messages = result.DebugMessages;  		newUrl = RewriteParametersFromModuleProvider (newUrl' tabKeyVal' urlParms' isSiteRootMatch' result' settings' out rewriteParms' out newAction' ref messages' parentTraceId);  		result.DebugMessages = messages;  	}  	//this is a page only' no parameters to deal with   	//944 : don't downgrade to redirect if the current action is a 404 (see 948 for new solution to 944)  	if (settings.PageExtensionUsageType == PageExtensionUsageType.Never & hadExtension) {  		//potentially a 301 replaced because shouldn't be using page extensions   		//948 : check to prevent action downgrade' in case already set to redirect  		result.SetActionWithNoDowngrade (ActionType.CheckFor301);  	} else {  		//866 : redirect back from no extension to extension if it didn't have one  		if (settings.PageExtensionUsageType != PageExtensionUsageType.Never && hadExtension == false) {  			result.SetActionWithNoDowngrade (ActionType.CheckFor301);  		}  	}  	//rewriting done  	reWritten = true;  	finished = true;  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The following statement contains a magic number: if (string.IsNullOrEmpty (langParms) == false) {  	string[] parms = langParms.Split ('/');  	if (parms.GetUpperBound (0) >= 1) {  		if (parms [0] == "" && parms.GetUpperBound (0) > 1) {  			newUrl += "&" + parms [1] + "=" + parms [2];  		} else {  			newUrl += "&" + parms [0] + "=" + parms [1];  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The following statement contains a magic number: if (parms.GetUpperBound (0) >= 1) {  	if (parms [0] == "" && parms.GetUpperBound (0) > 1) {  		newUrl += "&" + parms [1] + "=" + parms [2];  	} else {  		newUrl += "&" + parms [0] + "=" + parms [1];  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The following statement contains a magic number: if (parms [0] == "" && parms.GetUpperBound (0) > 1) {  	newUrl += "&" + parms [1] + "=" + parms [2];  } else {  	newUrl += "&" + parms [0] + "=" + parms [1];  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,GetTabFromDictionary,The following statement contains a magic number: newUrl += "&" + parms [1] + "=" + parms [2];  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,IdentifyByRegEx,The following statement contains a magic number: if (rewriterConfig != null) {  	var url = absoluteUri;  	//get local copy because it gets hacked around  	// Remove querystring if exists..   	if (queryString != "") {  		url = url.Replace (queryString' "");  	}  	var rules = rewriterConfig.Rules;  	if (rules == null) {  		throw new NullReferenceException ("DotNetNuke.HttpModules.Config.RewriterRuleCollection is null");  	}  	for (var i = 0; i <= rules.Count - 1; i++) {  		//iterate the Config Rules looking for a match  		var re = rules [i].GetRuleRegex (applicationPath);  		if (re.IsMatch (url)) {  			var sendTo = rules [i].SendTo;  			//get a new rewritePath location   			var rewritePath = RewriterUtils.ResolveUrl (applicationPath' re.Replace (url' sendTo));  			//no rewrite path unless we match by regex the intended tab  			var sesMatch = re.Match (url);  			var sesUrlParams = sesMatch.Groups [2].Value;  			//a match by regex means it's probably not a 'friendly' Url' so assume at this stage that this request will end up a 301  			if (settings.UrlFormat == "advanced" && settings.RedirectUnfriendly) {  				result.Action = ActionType.CheckFor301;  			}  			//if a match is found here' there is the potential for a 'friendlier' url   			if ((sesUrlParams.Trim ().Length > 0)) {  				sesUrlParams = sesUrlParams.Replace ("\\"' "/");  				var urlParams = sesUrlParams.Split ('/');  				for (var x = 1; x <= urlParams.Length - 1; x++) {  					if (urlParams [x].Trim ().Length > 0 && urlParams [x].ToLower () != Globals.glbDefaultPage.ToLower ()) {  						rewritePath = rewritePath + "&" + urlParams [x].Replace (".aspx"' "").Trim () + "=";  						if ((x < (urlParams.Length - 1))) {  							x += 1;  							if ((urlParams [x].Trim () != "")) {  								rewritePath = rewritePath + urlParams [x].Replace (".aspx"' "");  							}  						}  					}  				}  			}  			//add back the query string if it was there  			rewritePath = AddQueryStringToRewritePath (rewritePath' queryString);  			//832 : check for leading ~ - if not there' then redirect  			if (sendTo.StartsWith ("~")) {  				doRewrite = true;  				SetRewriteParameters (ref result' rewritePath);  				RedirectTokens.SetRedirectReasonAndAction (ref result' settings);  				result.DoRewrite = true;  			} else {  				//we'll assume it's a 301 instead of a 302  				result.Action = ActionType.Redirect301;  				result.DoRewrite = false;  				result.Reason = RedirectReason.SiteUrls_Config_Rule;  				result.FinalUrl = rewritePath;  			}  			break;  			//exit loop' match found  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,IdentifyByRegEx,The following statement contains a magic number: for (var i = 0; i <= rules.Count - 1; i++) {  	//iterate the Config Rules looking for a match  	var re = rules [i].GetRuleRegex (applicationPath);  	if (re.IsMatch (url)) {  		var sendTo = rules [i].SendTo;  		//get a new rewritePath location   		var rewritePath = RewriterUtils.ResolveUrl (applicationPath' re.Replace (url' sendTo));  		//no rewrite path unless we match by regex the intended tab  		var sesMatch = re.Match (url);  		var sesUrlParams = sesMatch.Groups [2].Value;  		//a match by regex means it's probably not a 'friendly' Url' so assume at this stage that this request will end up a 301  		if (settings.UrlFormat == "advanced" && settings.RedirectUnfriendly) {  			result.Action = ActionType.CheckFor301;  		}  		//if a match is found here' there is the potential for a 'friendlier' url   		if ((sesUrlParams.Trim ().Length > 0)) {  			sesUrlParams = sesUrlParams.Replace ("\\"' "/");  			var urlParams = sesUrlParams.Split ('/');  			for (var x = 1; x <= urlParams.Length - 1; x++) {  				if (urlParams [x].Trim ().Length > 0 && urlParams [x].ToLower () != Globals.glbDefaultPage.ToLower ()) {  					rewritePath = rewritePath + "&" + urlParams [x].Replace (".aspx"' "").Trim () + "=";  					if ((x < (urlParams.Length - 1))) {  						x += 1;  						if ((urlParams [x].Trim () != "")) {  							rewritePath = rewritePath + urlParams [x].Replace (".aspx"' "");  						}  					}  				}  			}  		}  		//add back the query string if it was there  		rewritePath = AddQueryStringToRewritePath (rewritePath' queryString);  		//832 : check for leading ~ - if not there' then redirect  		if (sendTo.StartsWith ("~")) {  			doRewrite = true;  			SetRewriteParameters (ref result' rewritePath);  			RedirectTokens.SetRedirectReasonAndAction (ref result' settings);  			result.DoRewrite = true;  		} else {  			//we'll assume it's a 301 instead of a 302  			result.Action = ActionType.Redirect301;  			result.DoRewrite = false;  			result.Reason = RedirectReason.SiteUrls_Config_Rule;  			result.FinalUrl = rewritePath;  		}  		break;  		//exit loop' match found  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,IdentifyByRegEx,The following statement contains a magic number: if (re.IsMatch (url)) {  	var sendTo = rules [i].SendTo;  	//get a new rewritePath location   	var rewritePath = RewriterUtils.ResolveUrl (applicationPath' re.Replace (url' sendTo));  	//no rewrite path unless we match by regex the intended tab  	var sesMatch = re.Match (url);  	var sesUrlParams = sesMatch.Groups [2].Value;  	//a match by regex means it's probably not a 'friendly' Url' so assume at this stage that this request will end up a 301  	if (settings.UrlFormat == "advanced" && settings.RedirectUnfriendly) {  		result.Action = ActionType.CheckFor301;  	}  	//if a match is found here' there is the potential for a 'friendlier' url   	if ((sesUrlParams.Trim ().Length > 0)) {  		sesUrlParams = sesUrlParams.Replace ("\\"' "/");  		var urlParams = sesUrlParams.Split ('/');  		for (var x = 1; x <= urlParams.Length - 1; x++) {  			if (urlParams [x].Trim ().Length > 0 && urlParams [x].ToLower () != Globals.glbDefaultPage.ToLower ()) {  				rewritePath = rewritePath + "&" + urlParams [x].Replace (".aspx"' "").Trim () + "=";  				if ((x < (urlParams.Length - 1))) {  					x += 1;  					if ((urlParams [x].Trim () != "")) {  						rewritePath = rewritePath + urlParams [x].Replace (".aspx"' "");  					}  				}  			}  		}  	}  	//add back the query string if it was there  	rewritePath = AddQueryStringToRewritePath (rewritePath' queryString);  	//832 : check for leading ~ - if not there' then redirect  	if (sendTo.StartsWith ("~")) {  		doRewrite = true;  		SetRewriteParameters (ref result' rewritePath);  		RedirectTokens.SetRedirectReasonAndAction (ref result' settings);  		result.DoRewrite = true;  	} else {  		//we'll assume it's a 301 instead of a 302  		result.Action = ActionType.Redirect301;  		result.DoRewrite = false;  		result.Reason = RedirectReason.SiteUrls_Config_Rule;  		result.FinalUrl = rewritePath;  	}  	break;  	//exit loop' match found  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParameters,The following statement contains a magic number: if (urlParms != null) {  	//determine page extension value and usage  	string pageExtension = settings.PageExtension;  	var parmString = new StringBuilder ();  	bool valueField = false;  	bool stripLoneParm = false;  	int lastParmToProcessTo;  	string userIdParm = null;  	var thisPortal = PortalController.Instance.GetPortal (result.PortalId);  	//check if there is more than one parm' and keep the value of the primary (first) parm  	if (thisPortal.UserTabId == result.TabId || thisPortal.UserTabId == -1) {  		//719 : shift to only remove last parm on pages with 'all' match  		stripLoneParm = true;  		//710 : don't put in username into rewritten parameters   		userIdParm = "UserId";  	}  	//recheck firstParmLast - just because it is set to be that way in the config doesn't   	//mean that the url will come in that way.   	//first strip out any language parameters  	if (langParms != null) {  		string[] langValues = langParms.TrimStart ('/').Split ('/');  		if (langValues.GetUpperBound (0) == 1) {  			int pos1 = -1' pos2 = -1;  			for (int i = 0; i < urlParms.GetUpperBound (0); i++) {  				//match this part of the urlParms with the language parms  				if (urlParms [i] == langValues [0] && urlParms [i + 1] == langValues [1]) {  					pos1 = i;  					pos2 = i + 1;  					break;  				}  			}  			if (pos1 > -1 && pos2 > -1) {  				//this hacky operation removes the language urls from the array  				var temp = new List<string> (urlParms);  				temp.RemoveAt (pos2);  				temp.RemoveAt (pos1);  				urlParms = temp.ToArray ();  				//656 : don't allow forced lower case of the culture identifier - always convert the case to aa-AA to match the standard  				string cultureId = langValues [1];  				Match cultureMatch = CultureMatchRegex.Match (cultureId);  				if (cultureMatch.Success) {  					cultureId = cultureMatch.Groups [1].Value + "-" + cultureMatch.Groups [2].ToString ().ToUpper ();  				}  				//set procedure level culture code' which indicates a language was found in the path  				cultureCode = cultureId;  			}  		}  	}  	lastParmToProcessTo = urlParms.GetUpperBound (0);  	//build up the parameters rewrite string by iterating through the key/value pairs in the Url  	//and turn them into &key=value pairs.  	string keyName = null;  	bool skip = false;  	bool isUserParm = false;  	for (int i = 0; i <= lastParmToProcessTo; i++) {  		string thisParm = urlParms [i];  		//here's the thing - we either take the last one and put it at the start' or just go two-by-two   		if (thisParm.ToLower () != Globals.glbDefaultPage.ToLower ()) {  			if (thisParm.ToLower () == "tabid") {  				skip = true;  				//discovering the tabid in the list of parameters means that   				//it was likely a request for an old-style tab url that   				//found a retVal due to match in the tab path.    				//while this may mean a 301' we definitely don't want to force a 301'  				//just investigate it and let the 301 redirect logic work it out  				//we also want to skip the next parameter' because it is the tabid value  				if (result.Reason != RedirectReason.Custom_Redirect) {  					//only reason not to let this one through and count on the   					//friendly url checking code is if it was a custom redirect set up  					result.Reason = RedirectReason.Not_Redirected;  					result.Action = ActionType.CheckFor301;  					//set the value field back to false' because' even if the parameter handling is  					//first parm last' this was an old style URl desitned to be redirected.  					//and we would expect old-style urls to have the correct parameter order  					//note this assumes tabid is the first parm in the list.  					valueField = false;  				}  			} else if (!skip) {  				bool extReplaced;  				string urlParm = CleanExtension (thisParm' pageExtension' out extReplaced);  				if (extReplaced && pageExtension == "")//replacing a .aspx extension  				 {  					result.Action = ActionType.CheckFor301;  				}  				if (valueField) {  					//this parameter is going into the value half of a &key=value pair  					parmString.Append ("=");  					parmString.Append (urlParm);  					valueField = false;  					if (isUserParm) {  						int userIdVal;  						int.TryParse (urlParm' out userIdVal);  						isUserParm = false;  					}  					//786 : redirect ctl/terms etc  					if (keyName != null && keyName.ToLower () == "ctl") {  						RequestRedirectOnBuiltInUrl (urlParm' parmString.ToString ()' result);  					}  				} else {  					//this parameter is going into the key half of a &key=value pair  					keyName = urlParm;  					parmString.Append ("&");  					parmString.Append (urlParm);  					valueField = true;  					//if we are looking for a userid parameter in this querystring' check for a match  					if (userIdParm != null) {  						if (String.Compare (keyName' userIdParm' StringComparison.OrdinalIgnoreCase) == 0) {  							isUserParm = true;  						}  					}  				}  			} else if (skip) {  				skip = false;  			}  		}  	}  	//add back language parameters if they were found  	AddLanguageCodeToRewritePath (ref newUrl' cultureCode);  	//add on the parameter string  	newUrl += parmString.ToString ();  	if (stripLoneParm) {  		newUrl = UrlParamsRegex.Replace (newUrl' "&");  		if (newUrl.EndsWith ("&")) {  			newUrl = newUrl.Substring (0' newUrl.Length - 1);  		}  	}  	//chop the last char off if it is an empty parameter   	if ((newUrl [newUrl.Length - 1] == '&')) {  		newUrl = newUrl.Substring (0' newUrl.Length - 1);  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParameters,The following statement contains a magic number: if (langParms != null) {  	string[] langValues = langParms.TrimStart ('/').Split ('/');  	if (langValues.GetUpperBound (0) == 1) {  		int pos1 = -1' pos2 = -1;  		for (int i = 0; i < urlParms.GetUpperBound (0); i++) {  			//match this part of the urlParms with the language parms  			if (urlParms [i] == langValues [0] && urlParms [i + 1] == langValues [1]) {  				pos1 = i;  				pos2 = i + 1;  				break;  			}  		}  		if (pos1 > -1 && pos2 > -1) {  			//this hacky operation removes the language urls from the array  			var temp = new List<string> (urlParms);  			temp.RemoveAt (pos2);  			temp.RemoveAt (pos1);  			urlParms = temp.ToArray ();  			//656 : don't allow forced lower case of the culture identifier - always convert the case to aa-AA to match the standard  			string cultureId = langValues [1];  			Match cultureMatch = CultureMatchRegex.Match (cultureId);  			if (cultureMatch.Success) {  				cultureId = cultureMatch.Groups [1].Value + "-" + cultureMatch.Groups [2].ToString ().ToUpper ();  			}  			//set procedure level culture code' which indicates a language was found in the path  			cultureCode = cultureId;  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParameters,The following statement contains a magic number: if (langValues.GetUpperBound (0) == 1) {  	int pos1 = -1' pos2 = -1;  	for (int i = 0; i < urlParms.GetUpperBound (0); i++) {  		//match this part of the urlParms with the language parms  		if (urlParms [i] == langValues [0] && urlParms [i + 1] == langValues [1]) {  			pos1 = i;  			pos2 = i + 1;  			break;  		}  	}  	if (pos1 > -1 && pos2 > -1) {  		//this hacky operation removes the language urls from the array  		var temp = new List<string> (urlParms);  		temp.RemoveAt (pos2);  		temp.RemoveAt (pos1);  		urlParms = temp.ToArray ();  		//656 : don't allow forced lower case of the culture identifier - always convert the case to aa-AA to match the standard  		string cultureId = langValues [1];  		Match cultureMatch = CultureMatchRegex.Match (cultureId);  		if (cultureMatch.Success) {  			cultureId = cultureMatch.Groups [1].Value + "-" + cultureMatch.Groups [2].ToString ().ToUpper ();  		}  		//set procedure level culture code' which indicates a language was found in the path  		cultureCode = cultureId;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParameters,The following statement contains a magic number: if (pos1 > -1 && pos2 > -1) {  	//this hacky operation removes the language urls from the array  	var temp = new List<string> (urlParms);  	temp.RemoveAt (pos2);  	temp.RemoveAt (pos1);  	urlParms = temp.ToArray ();  	//656 : don't allow forced lower case of the culture identifier - always convert the case to aa-AA to match the standard  	string cultureId = langValues [1];  	Match cultureMatch = CultureMatchRegex.Match (cultureId);  	if (cultureMatch.Success) {  		cultureId = cultureMatch.Groups [1].Value + "-" + cultureMatch.Groups [2].ToString ().ToUpper ();  	}  	//set procedure level culture code' which indicates a language was found in the path  	cultureCode = cultureId;  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParameters,The following statement contains a magic number: if (cultureMatch.Success) {  	cultureId = cultureMatch.Groups [1].Value + "-" + cultureMatch.Groups [2].ToString ().ToUpper ();  }  
Magic Number,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,RewriteParameters,The following statement contains a magic number: cultureId = cultureMatch.Groups [1].Value + "-" + cultureMatch.Groups [2].ToString ().ToUpper ();  
Magic Number,DotNetNuke.Entities.Urls,RewriterUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriterUtils.cs,ResolveUrl,The following statement contains a magic number: if (seperatorChar == '/' || seperatorChar == '\\') {  	//Url looks like ~/ or ~\  	if ((appPath.Length > 1)) {  		return appPath + "/" + url.Substring (2);  	}  	return "/" + url.Substring (2);  }  
Magic Number,DotNetNuke.Entities.Urls,RewriterUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriterUtils.cs,ResolveUrl,The following statement contains a magic number: if (seperatorChar == '/' || seperatorChar == '\\') {  	//Url looks like ~/ or ~\  	if ((appPath.Length > 1)) {  		return appPath + "/" + url.Substring (2);  	}  	return "/" + url.Substring (2);  }  
Magic Number,DotNetNuke.Entities.Urls,RewriterUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriterUtils.cs,ResolveUrl,The following statement contains a magic number: if ((appPath.Length > 1)) {  	return appPath + "/" + url.Substring (2);  }  
Magic Number,DotNetNuke.Entities.Urls,RewriterUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriterUtils.cs,ResolveUrl,The following statement contains a magic number: return appPath + "/" + url.Substring (2);  
Magic Number,DotNetNuke.Entities.Urls,RewriterUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriterUtils.cs,ResolveUrl,The following statement contains a magic number: return "/" + url.Substring (2);  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildPortalAliasesRegexDictionary,The following statement contains a magic number: foreach (string aliasKey in aliases.Keys) {  	PortalAliasInfo alias = aliases [aliasKey];  	//regex escape the portal alias for inclusion into a regex pattern  	string plainAlias = alias.HTTPAlias;  	string escapedAlias = Regex.Escape (plainAlias);  	var aliasesToAdd = new List<string> {  		escapedAlias  	};  	//check for existence of www. version of domain' if it doesn't have a www.  	if (plainAlias.ToLower ().StartsWith ("www.")) {  		if (plainAlias.Length > 4) {  			string noWWWVersion = plainAlias.Substring (4);  			if (!aliases.Contains (noWWWVersion)) {  				//there is no no-www version of the alias  				aliasesToAdd.Add (Regex.Escape (noWWWVersion));  			}  		}  	} else {  		string wwwVersion = "www." + plainAlias;  		if (!aliases.Contains (wwwVersion)) {  			aliasesToAdd.Add (Regex.Escape (wwwVersion));  		}  	}  	int count = 0;  	foreach (string aliasToAdd in aliasesToAdd) {  		//set flag on object to know whether to redirect or not  		count++;  		var aliasObject = new PortalAliasInfo (alias) {  			Redirect = count != 1  		};  		//format up the regex pattern by replacing the alias portion with the portal alias name  		string regexPattern = aliasRegexPattern.Replace ("_ALIAS_"' aliasToAdd);  		//work out how many path separators there are in the portalAlias (ie myalias/mychild = 1 path)  		int pathLength = plainAlias.Split ('/').GetUpperBound (0);  		//now work out where in the list we should put this portalAlias regex pattern  		//the list is to be sorted so that those aliases with the most paths   		//are at the front of the list : ie' they are tested first  		int insertPoint = pathLengths.Count - 1;  		//walk through the existing list of path lengths'  		//and ascertain where in the list this one falls  		//if they are all the same path length' then place them in portal alias order  		for (int i = 0; i < pathLengths.Count; i++) {  			insertPoint = i;  			if (pathLength > pathLengths [i]) {  				//larger than this position' insert at this value  				break;  			}  			insertPoint++;  			//next one along (if at end' means add)  		}  		if (pathLengths.Count > 0 && insertPoint <= pathLengths.Count - 1) {  			//put the new regex pattern into the correct position  			regexList.Insert (insertPoint' regexPattern' aliasObject);  			pathLengths.Insert (insertPoint' pathLength);  		} else {  			//put the new regex pattern on the end of the list  			regexList.Add (regexPattern' aliasObject);  			pathLengths.Add (pathLength);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildPortalAliasesRegexDictionary,The following statement contains a magic number: foreach (string aliasKey in aliases.Keys) {  	PortalAliasInfo alias = aliases [aliasKey];  	//regex escape the portal alias for inclusion into a regex pattern  	string plainAlias = alias.HTTPAlias;  	string escapedAlias = Regex.Escape (plainAlias);  	var aliasesToAdd = new List<string> {  		escapedAlias  	};  	//check for existence of www. version of domain' if it doesn't have a www.  	if (plainAlias.ToLower ().StartsWith ("www.")) {  		if (plainAlias.Length > 4) {  			string noWWWVersion = plainAlias.Substring (4);  			if (!aliases.Contains (noWWWVersion)) {  				//there is no no-www version of the alias  				aliasesToAdd.Add (Regex.Escape (noWWWVersion));  			}  		}  	} else {  		string wwwVersion = "www." + plainAlias;  		if (!aliases.Contains (wwwVersion)) {  			aliasesToAdd.Add (Regex.Escape (wwwVersion));  		}  	}  	int count = 0;  	foreach (string aliasToAdd in aliasesToAdd) {  		//set flag on object to know whether to redirect or not  		count++;  		var aliasObject = new PortalAliasInfo (alias) {  			Redirect = count != 1  		};  		//format up the regex pattern by replacing the alias portion with the portal alias name  		string regexPattern = aliasRegexPattern.Replace ("_ALIAS_"' aliasToAdd);  		//work out how many path separators there are in the portalAlias (ie myalias/mychild = 1 path)  		int pathLength = plainAlias.Split ('/').GetUpperBound (0);  		//now work out where in the list we should put this portalAlias regex pattern  		//the list is to be sorted so that those aliases with the most paths   		//are at the front of the list : ie' they are tested first  		int insertPoint = pathLengths.Count - 1;  		//walk through the existing list of path lengths'  		//and ascertain where in the list this one falls  		//if they are all the same path length' then place them in portal alias order  		for (int i = 0; i < pathLengths.Count; i++) {  			insertPoint = i;  			if (pathLength > pathLengths [i]) {  				//larger than this position' insert at this value  				break;  			}  			insertPoint++;  			//next one along (if at end' means add)  		}  		if (pathLengths.Count > 0 && insertPoint <= pathLengths.Count - 1) {  			//put the new regex pattern into the correct position  			regexList.Insert (insertPoint' regexPattern' aliasObject);  			pathLengths.Insert (insertPoint' pathLength);  		} else {  			//put the new regex pattern on the end of the list  			regexList.Add (regexPattern' aliasObject);  			pathLengths.Add (pathLength);  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildPortalAliasesRegexDictionary,The following statement contains a magic number: if (plainAlias.ToLower ().StartsWith ("www.")) {  	if (plainAlias.Length > 4) {  		string noWWWVersion = plainAlias.Substring (4);  		if (!aliases.Contains (noWWWVersion)) {  			//there is no no-www version of the alias  			aliasesToAdd.Add (Regex.Escape (noWWWVersion));  		}  	}  } else {  	string wwwVersion = "www." + plainAlias;  	if (!aliases.Contains (wwwVersion)) {  		aliasesToAdd.Add (Regex.Escape (wwwVersion));  	}  }  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildPortalAliasesRegexDictionary,The following statement contains a magic number: if (plainAlias.ToLower ().StartsWith ("www.")) {  	if (plainAlias.Length > 4) {  		string noWWWVersion = plainAlias.Substring (4);  		if (!aliases.Contains (noWWWVersion)) {  			//there is no no-www version of the alias  			aliasesToAdd.Add (Regex.Escape (noWWWVersion));  		}  	}  } else {  	string wwwVersion = "www." + plainAlias;  	if (!aliases.Contains (wwwVersion)) {  		aliasesToAdd.Add (Regex.Escape (wwwVersion));  	}  }  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildPortalAliasesRegexDictionary,The following statement contains a magic number: if (plainAlias.Length > 4) {  	string noWWWVersion = plainAlias.Substring (4);  	if (!aliases.Contains (noWWWVersion)) {  		//there is no no-www version of the alias  		aliasesToAdd.Add (Regex.Escape (noWWWVersion));  	}  }  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildPortalAliasesRegexDictionary,The following statement contains a magic number: if (plainAlias.Length > 4) {  	string noWWWVersion = plainAlias.Substring (4);  	if (!aliases.Contains (noWWWVersion)) {  		//there is no no-www version of the alias  		aliasesToAdd.Add (Regex.Escape (noWWWVersion));  	}  }  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,The following statement contains a magic number: pathSizes = new PathSizes {  	MinAliasDepth = 10'  	MinTabPathDepth = 10'  	MaxAliasDepth = 0'  	MaxTabPathDepth = 0  };  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,BuildTabDictionary,The following statement contains a magic number: pathSizes = new PathSizes {  	MinAliasDepth = 10'  	MinTabPathDepth = 10'  	MaxAliasDepth = 0'  	MaxTabPathDepth = 0  };  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,FetchTabDictionary,The following statement contains a magic number: if (dict != null && portalDepths != null && forceRebuild == false && bypassCache == false) {  	PathSizes depthInfo;  	bool changed = false;  	using (portalDepths.GetWriteLock ()) {  		if (!portalDepths.ContainsKey (portalId)) {  			reason += "Portal " + portalId.ToString () + " added to index;";  			//tab dictionary built' but portal not in it  			dict = BuildTabDictionary (out depthInfo' settings' portalId' dict' out homePageSkins' out portalTabPathDictionary' parentTraceId);  			//recheck portal add' when running with locks can get duplicate key exceptions  			if (portalDepths.ContainsKey (portalId) == false) {  				portalDepths.Add (portalId' depthInfo);  				changed = true;  			}  			cc.StoreTabPathsInCache (portalId' portalTabPathDictionary' settings);  			CacheController.StoreHomePageSkinsInCache (portalId' homePageSkins);  		} else {  			depthInfo = portalDepths [portalId];  		}  	}  	if (changed) {  		//restash dictionary  		cc.StorePageIndexInCache (dict' portalDepths' settings' reason);  	}  	if (depthInfo != null) {  		minTabPathDepth = depthInfo.MinTabPathDepth;  		maxTabPathDepth = depthInfo.MaxTabPathDepth;  		minAliasPathDepth = depthInfo.MinAliasDepth;  		maxAliasPathDepth = depthInfo.MaxAliasDepth;  	} else {  		//fallback values' should never get here: mainly for compiler wranings  		minTabPathDepth = 1;  		maxTabPathDepth = 10;  		minAliasPathDepth = 1;  		maxAliasPathDepth = 4;  	}  } else {  	//the cached dictionary was null or forceRebuild = true or bypassCache = true' so go get a new dictionary  	PathSizes depthInfo;  	dict = BuildTabDictionary (out depthInfo' settings' portalId' null' out homePageSkins' out portalTabPathDictionary' parentTraceId);  	//store the fact that this portal has been built  	portalDepths = new SharedDictionary<int' PathSizes> ();  	using (portalDepths.GetWriteLock ()) {  		portalDepths.Add (portalId' depthInfo);  	}  	if (bypassCache == false)//only cache if bypass not switched on  	 {  		cc.StorePageIndexInCache (dict' portalDepths' settings' reason);  	}  	cc.StoreTabPathsInCache (portalId' portalTabPathDictionary' settings);  	CacheController.StoreHomePageSkinsInCache (portalId' homePageSkins);  	minTabPathDepth = depthInfo.MinTabPathDepth;  	maxTabPathDepth = depthInfo.MaxTabPathDepth;  	minAliasPathDepth = depthInfo.MinAliasDepth;  	maxAliasPathDepth = depthInfo.MaxAliasDepth;  }  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,FetchTabDictionary,The following statement contains a magic number: if (dict != null && portalDepths != null && forceRebuild == false && bypassCache == false) {  	PathSizes depthInfo;  	bool changed = false;  	using (portalDepths.GetWriteLock ()) {  		if (!portalDepths.ContainsKey (portalId)) {  			reason += "Portal " + portalId.ToString () + " added to index;";  			//tab dictionary built' but portal not in it  			dict = BuildTabDictionary (out depthInfo' settings' portalId' dict' out homePageSkins' out portalTabPathDictionary' parentTraceId);  			//recheck portal add' when running with locks can get duplicate key exceptions  			if (portalDepths.ContainsKey (portalId) == false) {  				portalDepths.Add (portalId' depthInfo);  				changed = true;  			}  			cc.StoreTabPathsInCache (portalId' portalTabPathDictionary' settings);  			CacheController.StoreHomePageSkinsInCache (portalId' homePageSkins);  		} else {  			depthInfo = portalDepths [portalId];  		}  	}  	if (changed) {  		//restash dictionary  		cc.StorePageIndexInCache (dict' portalDepths' settings' reason);  	}  	if (depthInfo != null) {  		minTabPathDepth = depthInfo.MinTabPathDepth;  		maxTabPathDepth = depthInfo.MaxTabPathDepth;  		minAliasPathDepth = depthInfo.MinAliasDepth;  		maxAliasPathDepth = depthInfo.MaxAliasDepth;  	} else {  		//fallback values' should never get here: mainly for compiler wranings  		minTabPathDepth = 1;  		maxTabPathDepth = 10;  		minAliasPathDepth = 1;  		maxAliasPathDepth = 4;  	}  } else {  	//the cached dictionary was null or forceRebuild = true or bypassCache = true' so go get a new dictionary  	PathSizes depthInfo;  	dict = BuildTabDictionary (out depthInfo' settings' portalId' null' out homePageSkins' out portalTabPathDictionary' parentTraceId);  	//store the fact that this portal has been built  	portalDepths = new SharedDictionary<int' PathSizes> ();  	using (portalDepths.GetWriteLock ()) {  		portalDepths.Add (portalId' depthInfo);  	}  	if (bypassCache == false)//only cache if bypass not switched on  	 {  		cc.StorePageIndexInCache (dict' portalDepths' settings' reason);  	}  	cc.StoreTabPathsInCache (portalId' portalTabPathDictionary' settings);  	CacheController.StoreHomePageSkinsInCache (portalId' homePageSkins);  	minTabPathDepth = depthInfo.MinTabPathDepth;  	maxTabPathDepth = depthInfo.MaxTabPathDepth;  	minAliasPathDepth = depthInfo.MinAliasDepth;  	maxAliasPathDepth = depthInfo.MaxAliasDepth;  }  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,FetchTabDictionary,The following statement contains a magic number: if (depthInfo != null) {  	minTabPathDepth = depthInfo.MinTabPathDepth;  	maxTabPathDepth = depthInfo.MaxTabPathDepth;  	minAliasPathDepth = depthInfo.MinAliasDepth;  	maxAliasPathDepth = depthInfo.MaxAliasDepth;  } else {  	//fallback values' should never get here: mainly for compiler wranings  	minTabPathDepth = 1;  	maxTabPathDepth = 10;  	minAliasPathDepth = 1;  	maxAliasPathDepth = 4;  }  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,FetchTabDictionary,The following statement contains a magic number: if (depthInfo != null) {  	minTabPathDepth = depthInfo.MinTabPathDepth;  	maxTabPathDepth = depthInfo.MaxTabPathDepth;  	minAliasPathDepth = depthInfo.MinAliasDepth;  	maxAliasPathDepth = depthInfo.MaxAliasDepth;  } else {  	//fallback values' should never get here: mainly for compiler wranings  	minTabPathDepth = 1;  	maxTabPathDepth = 10;  	minAliasPathDepth = 1;  	maxAliasPathDepth = 4;  }  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,FetchTabDictionary,The following statement contains a magic number: maxTabPathDepth = 10;  
Magic Number,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,FetchTabDictionary,The following statement contains a magic number: maxAliasPathDepth = 4;  
Magic Number,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,GetTabPath,The following statement contains a magic number: if (homePageSiteRoot && isHomeTab && !hasPath)// && !isDefaultCultureCode - not working for non-language specifc custom root urls   {  	newTabPath = "/";  	//site root for home page  } else {  	//build the tab path and check for space replacement  	string baseTabPath = TabIndexController.GetTabPath (tab' options' parentTraceId);  	//this is the new tab path  	newTabPath = baseTabPath;  	//871 : case insensitive compare for culture code' all lookups done on lower case  	string cultureCodeKey = "";  	if (cultureCode != null) {  		cultureCodeKey = cultureCode.ToLower ();  	}  	bool checkForCustomHttpAlias = false;  	//get a custom tab name if redirects are being used  	SharedDictionary<string' string> customAliasForTabs = null;  	SharedDictionary<int' SharedDictionary<string' string>> urlDict;  	//886 : don't fetch custom urls for host tabs (host tabs can't have redirects or custom Urls)  	if (tab.PortalID > -1) {  		urlDict = CustomUrlDictController.FetchCustomUrlDictionary (tab.PortalID' false' false' settings' out customAliasForTabs' parentTraceId);  	} else {  		urlDict = new SharedDictionary<int' SharedDictionary<string' string>> ();  		//create dummy dictionary for this tab  	}  	if (ignoreCustomRedirects == false) {  		//if not ignoring the custom redirects' look for the Url of the page in this list  		//this will be used as the page path if there is one.  		using (urlDict.GetReadLock ()) {  			if (urlDict.ContainsKey (tab.TabID)) {  				//we want the custom value  				string customTabPath = null;  				SharedDictionary<string' string> tabpaths = urlDict [tab.TabID];  				using (tabpaths.GetReadLock ()) {  					if (tabpaths.ContainsKey (cultureCodeKey)) {  						customTabPath = tabpaths [cultureCodeKey];  						dropLangParms = true;  						//the url is based on a custom value which has embedded language parms' therefore don't need them in the url  					} else {  						if (isDefaultCultureCode && tabpaths.ContainsKey ("")) {  							customTabPath = tabpaths [""];  							//dropLangParms = true;//drop the language parms if they exist' because this is the default language  						}  					}  				}  				if (customTabPath != null) {  					//770 : pull out custom http alias if in string  					int aliasSeparator = customTabPath.IndexOf ("::"' StringComparison.Ordinal);  					if (aliasSeparator > 0) {  						customHttpAlias = customTabPath.Substring (0' aliasSeparator);  						newTabPath = customTabPath.Substring (aliasSeparator + 2);  					} else {  						newTabPath = customTabPath;  					}  				}  				if (newTabPath == "" && hasPath) {  					//can't pass back a custom path which is blank if there are path segments to the requested final Url  					newTabPath = baseTabPath;  					//revert back to the standard DNN page path  				} else {  					isCustomPath = true;  					//we are providing a custom Url   				}  			} else {  				checkForCustomHttpAlias = true;  			}  		}  	} else {  		checkForCustomHttpAlias = true;  		//always want to check for custom alias' even when we don't want to see any custom redirects  	}  	//770 : check for custom alias in these tabs  	if (checkForCustomHttpAlias && customAliasForTabs != null) {  		string key = tab.TabID.ToString () + ":" + cultureCodeKey;  		using (customAliasForTabs.GetReadLock ()) {  			if (customAliasForTabs.ContainsKey (key)) {  				//this tab uses a custom alias  				customHttpAlias = customAliasForTabs [key];  				isCustomPath = true;  				//using custom alias  			}  		}  	}  	if (!dropLangParms) {  		string tabCultureCode = tab.CultureCode;  		if (!string.IsNullOrEmpty (tabCultureCode)) {  			dropLangParms = true;  			//if the tab has a specified culture code' then drop the language parameters from the friendly Url  		}  	}  	//make lower case if necessary  	newTabPath = AdvancedFriendlyUrlProvider.ForceLowerCaseIfAllowed (tab' newTabPath' settings);  }  
Magic Number,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,GetTabPath,The following statement contains a magic number: if (ignoreCustomRedirects == false) {  	//if not ignoring the custom redirects' look for the Url of the page in this list  	//this will be used as the page path if there is one.  	using (urlDict.GetReadLock ()) {  		if (urlDict.ContainsKey (tab.TabID)) {  			//we want the custom value  			string customTabPath = null;  			SharedDictionary<string' string> tabpaths = urlDict [tab.TabID];  			using (tabpaths.GetReadLock ()) {  				if (tabpaths.ContainsKey (cultureCodeKey)) {  					customTabPath = tabpaths [cultureCodeKey];  					dropLangParms = true;  					//the url is based on a custom value which has embedded language parms' therefore don't need them in the url  				} else {  					if (isDefaultCultureCode && tabpaths.ContainsKey ("")) {  						customTabPath = tabpaths [""];  						//dropLangParms = true;//drop the language parms if they exist' because this is the default language  					}  				}  			}  			if (customTabPath != null) {  				//770 : pull out custom http alias if in string  				int aliasSeparator = customTabPath.IndexOf ("::"' StringComparison.Ordinal);  				if (aliasSeparator > 0) {  					customHttpAlias = customTabPath.Substring (0' aliasSeparator);  					newTabPath = customTabPath.Substring (aliasSeparator + 2);  				} else {  					newTabPath = customTabPath;  				}  			}  			if (newTabPath == "" && hasPath) {  				//can't pass back a custom path which is blank if there are path segments to the requested final Url  				newTabPath = baseTabPath;  				//revert back to the standard DNN page path  			} else {  				isCustomPath = true;  				//we are providing a custom Url   			}  		} else {  			checkForCustomHttpAlias = true;  		}  	}  } else {  	checkForCustomHttpAlias = true;  	//always want to check for custom alias' even when we don't want to see any custom redirects  }  
Magic Number,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,GetTabPath,The following statement contains a magic number: using (urlDict.GetReadLock ()) {  	if (urlDict.ContainsKey (tab.TabID)) {  		//we want the custom value  		string customTabPath = null;  		SharedDictionary<string' string> tabpaths = urlDict [tab.TabID];  		using (tabpaths.GetReadLock ()) {  			if (tabpaths.ContainsKey (cultureCodeKey)) {  				customTabPath = tabpaths [cultureCodeKey];  				dropLangParms = true;  				//the url is based on a custom value which has embedded language parms' therefore don't need them in the url  			} else {  				if (isDefaultCultureCode && tabpaths.ContainsKey ("")) {  					customTabPath = tabpaths [""];  					//dropLangParms = true;//drop the language parms if they exist' because this is the default language  				}  			}  		}  		if (customTabPath != null) {  			//770 : pull out custom http alias if in string  			int aliasSeparator = customTabPath.IndexOf ("::"' StringComparison.Ordinal);  			if (aliasSeparator > 0) {  				customHttpAlias = customTabPath.Substring (0' aliasSeparator);  				newTabPath = customTabPath.Substring (aliasSeparator + 2);  			} else {  				newTabPath = customTabPath;  			}  		}  		if (newTabPath == "" && hasPath) {  			//can't pass back a custom path which is blank if there are path segments to the requested final Url  			newTabPath = baseTabPath;  			//revert back to the standard DNN page path  		} else {  			isCustomPath = true;  			//we are providing a custom Url   		}  	} else {  		checkForCustomHttpAlias = true;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,GetTabPath,The following statement contains a magic number: if (urlDict.ContainsKey (tab.TabID)) {  	//we want the custom value  	string customTabPath = null;  	SharedDictionary<string' string> tabpaths = urlDict [tab.TabID];  	using (tabpaths.GetReadLock ()) {  		if (tabpaths.ContainsKey (cultureCodeKey)) {  			customTabPath = tabpaths [cultureCodeKey];  			dropLangParms = true;  			//the url is based on a custom value which has embedded language parms' therefore don't need them in the url  		} else {  			if (isDefaultCultureCode && tabpaths.ContainsKey ("")) {  				customTabPath = tabpaths [""];  				//dropLangParms = true;//drop the language parms if they exist' because this is the default language  			}  		}  	}  	if (customTabPath != null) {  		//770 : pull out custom http alias if in string  		int aliasSeparator = customTabPath.IndexOf ("::"' StringComparison.Ordinal);  		if (aliasSeparator > 0) {  			customHttpAlias = customTabPath.Substring (0' aliasSeparator);  			newTabPath = customTabPath.Substring (aliasSeparator + 2);  		} else {  			newTabPath = customTabPath;  		}  	}  	if (newTabPath == "" && hasPath) {  		//can't pass back a custom path which is blank if there are path segments to the requested final Url  		newTabPath = baseTabPath;  		//revert back to the standard DNN page path  	} else {  		isCustomPath = true;  		//we are providing a custom Url   	}  } else {  	checkForCustomHttpAlias = true;  }  
Magic Number,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,GetTabPath,The following statement contains a magic number: if (customTabPath != null) {  	//770 : pull out custom http alias if in string  	int aliasSeparator = customTabPath.IndexOf ("::"' StringComparison.Ordinal);  	if (aliasSeparator > 0) {  		customHttpAlias = customTabPath.Substring (0' aliasSeparator);  		newTabPath = customTabPath.Substring (aliasSeparator + 2);  	} else {  		newTabPath = customTabPath;  	}  }  
Magic Number,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,GetTabPath,The following statement contains a magic number: if (aliasSeparator > 0) {  	customHttpAlias = customTabPath.Substring (0' aliasSeparator);  	newTabPath = customTabPath.Substring (aliasSeparator + 2);  } else {  	newTabPath = customTabPath;  }  
Magic Number,DotNetNuke.Entities.Urls,TabPathHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabPathController.cs,GetTabPath,The following statement contains a magic number: newTabPath = customTabPath.Substring (aliasSeparator + 2);  
Magic Number,DotNetNuke.Entities.Urls,XmlHelpers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\XmlHelpers.cs,TabIdsFromAttributes,The following statement contains a magic number: if (tabNames != null) {  	//get the portal by name  	if (tabNames == "All") {  		tabIds.Add (-1);  	} else {  		//loop through all specified tab names  		foreach (string tabName in tabNames.Split (';')) {  			if (String.Compare (tabName' "default.aspx"' StringComparison.OrdinalIgnoreCase) == 0) {  				//default.aspx is marked with a -2 tabid  				tabIds.Add (-2);  			} else {  				//593 : add in site root rewriting processing  				if (tabName == "/") {  					//site root marked with a -3 tabid  					tabIds.Add (-3);  				} else {  					//portal id specified : specific portal  					TabInfo tab = TabController.Instance.GetTabByName (tabName' portalId);  					if (tab != null) {  						tabIds.Add (tab.TabID);  					} else {  						messages.Add ("TabName " + tabName + " not found for portalId " + portalId.ToString ());  					}  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,XmlHelpers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\XmlHelpers.cs,TabIdsFromAttributes,The following statement contains a magic number: if (tabNames != null) {  	//get the portal by name  	if (tabNames == "All") {  		tabIds.Add (-1);  	} else {  		//loop through all specified tab names  		foreach (string tabName in tabNames.Split (';')) {  			if (String.Compare (tabName' "default.aspx"' StringComparison.OrdinalIgnoreCase) == 0) {  				//default.aspx is marked with a -2 tabid  				tabIds.Add (-2);  			} else {  				//593 : add in site root rewriting processing  				if (tabName == "/") {  					//site root marked with a -3 tabid  					tabIds.Add (-3);  				} else {  					//portal id specified : specific portal  					TabInfo tab = TabController.Instance.GetTabByName (tabName' portalId);  					if (tab != null) {  						tabIds.Add (tab.TabID);  					} else {  						messages.Add ("TabName " + tabName + " not found for portalId " + portalId.ToString ());  					}  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,XmlHelpers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\XmlHelpers.cs,TabIdsFromAttributes,The following statement contains a magic number: if (tabNames == "All") {  	tabIds.Add (-1);  } else {  	//loop through all specified tab names  	foreach (string tabName in tabNames.Split (';')) {  		if (String.Compare (tabName' "default.aspx"' StringComparison.OrdinalIgnoreCase) == 0) {  			//default.aspx is marked with a -2 tabid  			tabIds.Add (-2);  		} else {  			//593 : add in site root rewriting processing  			if (tabName == "/") {  				//site root marked with a -3 tabid  				tabIds.Add (-3);  			} else {  				//portal id specified : specific portal  				TabInfo tab = TabController.Instance.GetTabByName (tabName' portalId);  				if (tab != null) {  					tabIds.Add (tab.TabID);  				} else {  					messages.Add ("TabName " + tabName + " not found for portalId " + portalId.ToString ());  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,XmlHelpers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\XmlHelpers.cs,TabIdsFromAttributes,The following statement contains a magic number: if (tabNames == "All") {  	tabIds.Add (-1);  } else {  	//loop through all specified tab names  	foreach (string tabName in tabNames.Split (';')) {  		if (String.Compare (tabName' "default.aspx"' StringComparison.OrdinalIgnoreCase) == 0) {  			//default.aspx is marked with a -2 tabid  			tabIds.Add (-2);  		} else {  			//593 : add in site root rewriting processing  			if (tabName == "/") {  				//site root marked with a -3 tabid  				tabIds.Add (-3);  			} else {  				//portal id specified : specific portal  				TabInfo tab = TabController.Instance.GetTabByName (tabName' portalId);  				if (tab != null) {  					tabIds.Add (tab.TabID);  				} else {  					messages.Add ("TabName " + tabName + " not found for portalId " + portalId.ToString ());  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,XmlHelpers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\XmlHelpers.cs,TabIdsFromAttributes,The following statement contains a magic number: foreach (string tabName in tabNames.Split (';')) {  	if (String.Compare (tabName' "default.aspx"' StringComparison.OrdinalIgnoreCase) == 0) {  		//default.aspx is marked with a -2 tabid  		tabIds.Add (-2);  	} else {  		//593 : add in site root rewriting processing  		if (tabName == "/") {  			//site root marked with a -3 tabid  			tabIds.Add (-3);  		} else {  			//portal id specified : specific portal  			TabInfo tab = TabController.Instance.GetTabByName (tabName' portalId);  			if (tab != null) {  				tabIds.Add (tab.TabID);  			} else {  				messages.Add ("TabName " + tabName + " not found for portalId " + portalId.ToString ());  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,XmlHelpers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\XmlHelpers.cs,TabIdsFromAttributes,The following statement contains a magic number: foreach (string tabName in tabNames.Split (';')) {  	if (String.Compare (tabName' "default.aspx"' StringComparison.OrdinalIgnoreCase) == 0) {  		//default.aspx is marked with a -2 tabid  		tabIds.Add (-2);  	} else {  		//593 : add in site root rewriting processing  		if (tabName == "/") {  			//site root marked with a -3 tabid  			tabIds.Add (-3);  		} else {  			//portal id specified : specific portal  			TabInfo tab = TabController.Instance.GetTabByName (tabName' portalId);  			if (tab != null) {  				tabIds.Add (tab.TabID);  			} else {  				messages.Add ("TabName " + tabName + " not found for portalId " + portalId.ToString ());  			}  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,XmlHelpers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\XmlHelpers.cs,TabIdsFromAttributes,The following statement contains a magic number: if (String.Compare (tabName' "default.aspx"' StringComparison.OrdinalIgnoreCase) == 0) {  	//default.aspx is marked with a -2 tabid  	tabIds.Add (-2);  } else {  	//593 : add in site root rewriting processing  	if (tabName == "/") {  		//site root marked with a -3 tabid  		tabIds.Add (-3);  	} else {  		//portal id specified : specific portal  		TabInfo tab = TabController.Instance.GetTabByName (tabName' portalId);  		if (tab != null) {  			tabIds.Add (tab.TabID);  		} else {  			messages.Add ("TabName " + tabName + " not found for portalId " + portalId.ToString ());  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,XmlHelpers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\XmlHelpers.cs,TabIdsFromAttributes,The following statement contains a magic number: if (String.Compare (tabName' "default.aspx"' StringComparison.OrdinalIgnoreCase) == 0) {  	//default.aspx is marked with a -2 tabid  	tabIds.Add (-2);  } else {  	//593 : add in site root rewriting processing  	if (tabName == "/") {  		//site root marked with a -3 tabid  		tabIds.Add (-3);  	} else {  		//portal id specified : specific portal  		TabInfo tab = TabController.Instance.GetTabByName (tabName' portalId);  		if (tab != null) {  			tabIds.Add (tab.TabID);  		} else {  			messages.Add ("TabName " + tabName + " not found for portalId " + portalId.ToString ());  		}  	}  }  
Magic Number,DotNetNuke.Entities.Urls,XmlHelpers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\XmlHelpers.cs,TabIdsFromAttributes,The following statement contains a magic number: tabIds.Add (-2);  
Magic Number,DotNetNuke.Entities.Urls,XmlHelpers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\XmlHelpers.cs,TabIdsFromAttributes,The following statement contains a magic number: if (tabName == "/") {  	//site root marked with a -3 tabid  	tabIds.Add (-3);  } else {  	//portal id specified : specific portal  	TabInfo tab = TabController.Instance.GetTabByName (tabName' portalId);  	if (tab != null) {  		tabIds.Add (tab.TabID);  	} else {  		messages.Add ("TabName " + tabName + " not found for portalId " + portalId.ToString ());  	}  }  
Magic Number,DotNetNuke.Entities.Urls,XmlHelpers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\XmlHelpers.cs,TabIdsFromAttributes,The following statement contains a magic number: tabIds.Add (-3);  
Magic Number,DotNetNuke.Entities.Users.Membership,MembershipPasswordController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPasswordController.cs,AddPasswordHistory,The following statement contains a magic number: using (HashAlgorithm ha = HashAlgorithm.Create ()) {  	byte[] newSalt = GetRandomSaltValue ();  	byte[] bytePassword = Encoding.Unicode.GetBytes (password);  	var inputBuffer = new byte[bytePassword.Length + 16];  	Buffer.BlockCopy (bytePassword' 0' inputBuffer' 0' bytePassword.Length);  	Buffer.BlockCopy (newSalt' 0' inputBuffer' bytePassword.Length' 16);  	byte[] bhashedPassword = ha.ComputeHash (inputBuffer);  	string hashedPassword = Convert.ToBase64String (bhashedPassword);  	_dataProvider.AddPasswordHistory (userId' hashedPassword' Convert.ToBase64String (newSalt)' retained);  }  
Magic Number,DotNetNuke.Entities.Users.Membership,MembershipPasswordController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPasswordController.cs,AddPasswordHistory,The following statement contains a magic number: using (HashAlgorithm ha = HashAlgorithm.Create ()) {  	byte[] newSalt = GetRandomSaltValue ();  	byte[] bytePassword = Encoding.Unicode.GetBytes (password);  	var inputBuffer = new byte[bytePassword.Length + 16];  	Buffer.BlockCopy (bytePassword' 0' inputBuffer' 0' bytePassword.Length);  	Buffer.BlockCopy (newSalt' 0' inputBuffer' bytePassword.Length' 16);  	byte[] bhashedPassword = ha.ComputeHash (inputBuffer);  	string hashedPassword = Convert.ToBase64String (bhashedPassword);  	_dataProvider.AddPasswordHistory (userId' hashedPassword' Convert.ToBase64String (newSalt)' retained);  }  
Magic Number,DotNetNuke.Entities.Users.Membership,MembershipPasswordController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPasswordController.cs,AddPasswordHistory,The following statement contains a magic number: Buffer.BlockCopy (newSalt' 0' inputBuffer' bytePassword.Length' 16);  
Magic Number,DotNetNuke.Entities.Users.Membership,MembershipPasswordController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPasswordController.cs,GetRandomSaltValue,The following statement contains a magic number: using (var rcsp = new RNGCryptoServiceProvider ()) {  	var bSalt = new byte[16];  	rcsp.GetBytes (bSalt);  	return bSalt;  }  
Magic Number,DotNetNuke.Entities.Users.Membership,MembershipPasswordController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPasswordController.cs,IsPasswordPreviouslyUsed,The following statement contains a magic number: using (HashAlgorithm ha = HashAlgorithm.Create ()) {  	List<PasswordHistory> history = GetPasswordHistory (userId);  	foreach (PasswordHistory ph in history) {  		string oldEncodedPassword = ph.Password;  		string oldEncodedSalt = ph.PasswordSalt;  		byte[] oldSalt = Convert.FromBase64String (oldEncodedSalt);  		byte[] bytePassword = Encoding.Unicode.GetBytes (password);  		var inputBuffer = new byte[bytePassword.Length + 16];  		Buffer.BlockCopy (bytePassword' 0' inputBuffer' 0' bytePassword.Length);  		Buffer.BlockCopy (oldSalt' 0' inputBuffer' bytePassword.Length' 16);  		byte[] bhashedPassword = ha.ComputeHash (inputBuffer);  		string hashedPassword = Convert.ToBase64String (bhashedPassword);  		if (hashedPassword == oldEncodedPassword)  			foundMatch = true;  	}  }  
Magic Number,DotNetNuke.Entities.Users.Membership,MembershipPasswordController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPasswordController.cs,IsPasswordPreviouslyUsed,The following statement contains a magic number: using (HashAlgorithm ha = HashAlgorithm.Create ()) {  	List<PasswordHistory> history = GetPasswordHistory (userId);  	foreach (PasswordHistory ph in history) {  		string oldEncodedPassword = ph.Password;  		string oldEncodedSalt = ph.PasswordSalt;  		byte[] oldSalt = Convert.FromBase64String (oldEncodedSalt);  		byte[] bytePassword = Encoding.Unicode.GetBytes (password);  		var inputBuffer = new byte[bytePassword.Length + 16];  		Buffer.BlockCopy (bytePassword' 0' inputBuffer' 0' bytePassword.Length);  		Buffer.BlockCopy (oldSalt' 0' inputBuffer' bytePassword.Length' 16);  		byte[] bhashedPassword = ha.ComputeHash (inputBuffer);  		string hashedPassword = Convert.ToBase64String (bhashedPassword);  		if (hashedPassword == oldEncodedPassword)  			foundMatch = true;  	}  }  
Magic Number,DotNetNuke.Entities.Users.Membership,MembershipPasswordController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPasswordController.cs,IsPasswordPreviouslyUsed,The following statement contains a magic number: foreach (PasswordHistory ph in history) {  	string oldEncodedPassword = ph.Password;  	string oldEncodedSalt = ph.PasswordSalt;  	byte[] oldSalt = Convert.FromBase64String (oldEncodedSalt);  	byte[] bytePassword = Encoding.Unicode.GetBytes (password);  	var inputBuffer = new byte[bytePassword.Length + 16];  	Buffer.BlockCopy (bytePassword' 0' inputBuffer' 0' bytePassword.Length);  	Buffer.BlockCopy (oldSalt' 0' inputBuffer' bytePassword.Length' 16);  	byte[] bhashedPassword = ha.ComputeHash (inputBuffer);  	string hashedPassword = Convert.ToBase64String (bhashedPassword);  	if (hashedPassword == oldEncodedPassword)  		foundMatch = true;  }  
Magic Number,DotNetNuke.Entities.Users.Membership,MembershipPasswordController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPasswordController.cs,IsPasswordPreviouslyUsed,The following statement contains a magic number: foreach (PasswordHistory ph in history) {  	string oldEncodedPassword = ph.Password;  	string oldEncodedSalt = ph.PasswordSalt;  	byte[] oldSalt = Convert.FromBase64String (oldEncodedSalt);  	byte[] bytePassword = Encoding.Unicode.GetBytes (password);  	var inputBuffer = new byte[bytePassword.Length + 16];  	Buffer.BlockCopy (bytePassword' 0' inputBuffer' 0' bytePassword.Length);  	Buffer.BlockCopy (oldSalt' 0' inputBuffer' bytePassword.Length' 16);  	byte[] bhashedPassword = ha.ComputeHash (inputBuffer);  	string hashedPassword = Convert.ToBase64String (bhashedPassword);  	if (hashedPassword == oldEncodedPassword)  		foundMatch = true;  }  
Magic Number,DotNetNuke.Entities.Users.Membership,MembershipPasswordController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPasswordController.cs,IsPasswordPreviouslyUsed,The following statement contains a magic number: Buffer.BlockCopy (oldSalt' 0' inputBuffer' bytePassword.Length' 16);  
Magic Number,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,GetScriptPath,The following statement contains a magic number: return ("~/Resources/libraries/" + js.LibraryName + "/" + Globals.FormatVersion (js.Version' "00"' 3' "_") + "/" + js.FileName);  
Magic Number,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RegisterScript,The following statement contains a magic number: if (Host.CdnEnabled && !String.IsNullOrEmpty (jsl.ObjectName)) {  	string pagePortion;  	switch (jsl.PreferredScriptLocation) {  	case ScriptLocation.PageHead:  		pagePortion = "ClientDependencyHeadJs";  		break;  	case ScriptLocation.BodyBottom:  		pagePortion = "ClientResourcesFormBottom";  		break;  	case ScriptLocation.BodyTop:  		pagePortion = "BodySCRIPTS";  		break;  	default:  		pagePortion = "BodySCRIPTS";  		break;  	}  	Control scriptloader = page.FindControl (pagePortion);  	var fallback = new DnnJsIncludeFallback (jsl.ObjectName' VirtualPathUtility.ToAbsolute ("~/Resources/libraries/" + jsl.LibraryName + "/" + Globals.FormatVersion (jsl.Version' "00"' 3' "_") + "/" + jsl.FileName));  	if (scriptloader != null) {  		//add the fallback control after script loader.  		var index = scriptloader.Parent.Controls.IndexOf (scriptloader);  		scriptloader.Parent.Controls.AddAt (index + 1' fallback);  	}  }  
Magic Number,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RegisterClientReference,The following statement contains a magic number: switch (reference) {  case ClientAPI.ClientNamespaceReferences.dnn:  case ClientAPI.ClientNamespaceReferences.dnn_dom:  	if (HttpContextSource.Current.Items.Contains (LegacyPrefix + "dnn.js")) {  		break;  	}  	ClientResourceManager.RegisterScript (page' ClientAPI.ScriptPath + "dnn.js"' 12);  	HttpContextSource.Current.Items.Add (LegacyPrefix + "dnn.js"' true);  	page.ClientScript.RegisterClientScriptBlock (page.GetType ()' "dnn.js"' "");  	if (!ClientAPI.BrowserSupportsFunctionality (ClientAPI.ClientFunctionality.SingleCharDelimiters)) {  		ClientAPI.RegisterClientVariable (page' "__scdoff"' "1"' true);  	}  	if (!ClientAPI.UseExternalScripts) {  		ClientAPI.RegisterEmbeddedResource (page' "dnn.scripts.js"' typeof(ClientAPI));  	}  	break;  case ClientAPI.ClientNamespaceReferences.dnn_dom_positioning:  	RegisterClientReference (page' ClientAPI.ClientNamespaceReferences.dnn);  	ClientResourceManager.RegisterScript (page' ClientAPI.ScriptPath + "dnn.dom.positioning.js"' 13);  	break;  }  
Magic Number,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RegisterClientReference,The following statement contains a magic number: switch (reference) {  case ClientAPI.ClientNamespaceReferences.dnn:  case ClientAPI.ClientNamespaceReferences.dnn_dom:  	if (HttpContextSource.Current.Items.Contains (LegacyPrefix + "dnn.js")) {  		break;  	}  	ClientResourceManager.RegisterScript (page' ClientAPI.ScriptPath + "dnn.js"' 12);  	HttpContextSource.Current.Items.Add (LegacyPrefix + "dnn.js"' true);  	page.ClientScript.RegisterClientScriptBlock (page.GetType ()' "dnn.js"' "");  	if (!ClientAPI.BrowserSupportsFunctionality (ClientAPI.ClientFunctionality.SingleCharDelimiters)) {  		ClientAPI.RegisterClientVariable (page' "__scdoff"' "1"' true);  	}  	if (!ClientAPI.UseExternalScripts) {  		ClientAPI.RegisterEmbeddedResource (page' "dnn.scripts.js"' typeof(ClientAPI));  	}  	break;  case ClientAPI.ClientNamespaceReferences.dnn_dom_positioning:  	RegisterClientReference (page' ClientAPI.ClientNamespaceReferences.dnn);  	ClientResourceManager.RegisterScript (page' ClientAPI.ScriptPath + "dnn.dom.positioning.js"' 13);  	break;  }  
Magic Number,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RegisterClientReference,The following statement contains a magic number: ClientResourceManager.RegisterScript (page' ClientAPI.ScriptPath + "dnn.js"' 12);  
Magic Number,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RegisterClientReference,The following statement contains a magic number: ClientResourceManager.RegisterScript (page' ClientAPI.ScriptPath + "dnn.dom.positioning.js"' 13);  
Magic Number,DotNetNuke.Framework.JavaScriptLibraries,JavaScriptLibraryController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScriptLibraryController.cs,SaveLibrary,The following statement contains a magic number: library.JavaScriptLibraryID = DataProvider.Instance ().ExecuteScalar<int> ("SaveJavaScriptLibrary"' library.JavaScriptLibraryID' library.PackageID' library.LibraryName' library.Version.ToString (3)' library.FileName' library.ObjectName' library.PreferredScriptLocation' library.CDNPath);  
Magic Number,DotNetNuke.Framework,jQuery,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\jQuery.cs,KeepAlive,The following statement contains a magic number: if (cookieTimeout > 5) {  	cookieTimeout = 5;  	// ping server in 5 minutes to make sure the server is not IDLE.  }  
Magic Number,DotNetNuke.Framework,jQuery,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\jQuery.cs,KeepAlive,The following statement contains a magic number: if (cookieTimeout > 5) {  	cookieTimeout = 5;  	// ping server in 5 minutes to make sure the server is not IDLE.  }  
Magic Number,DotNetNuke.Framework,jQuery,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\jQuery.cs,KeepAlive,The following statement contains a magic number: cookieTimeout = 5;  
Magic Number,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,OnError,The following statement contains a magic number: if (exc is HttpException && !IsViewStateFailure (exc)) {  	try {  		//if the exception's status code set to 404' we need display 404 page if defined or show no found info.  		var statusCode = (exc as HttpException).GetHttpCode ();  		if (statusCode == 404) {  			UrlUtils.Handle404Exception (Response' PortalSettings);  		}  		if (PortalSettings.ErrorPage500 != -1) {  			var url = GetErrorUrl (string.Concat ("~/Default.aspx?tabid="' PortalSettings.ErrorPage500)' exc' false);  			HttpContext.Current.Response.Redirect (url);  		} else {  			HttpContext.Current.Response.Clear ();  			HttpContext.Current.Server.Transfer ("~/ErrorPage.aspx");  		}  	} catch (Exception) {  		HttpContext.Current.Response.Clear ();  		var errorMessage = HttpUtility.UrlEncode (Localization.GetString ("NoSitesForThisInstallation.Error"' Localization.GlobalResourceFile));  		HttpContext.Current.Server.Transfer ("~/ErrorPage.aspx?status=503&error=" + errorMessage);  	}  }  
Magic Number,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,OnError,The following statement contains a magic number: try {  	//if the exception's status code set to 404' we need display 404 page if defined or show no found info.  	var statusCode = (exc as HttpException).GetHttpCode ();  	if (statusCode == 404) {  		UrlUtils.Handle404Exception (Response' PortalSettings);  	}  	if (PortalSettings.ErrorPage500 != -1) {  		var url = GetErrorUrl (string.Concat ("~/Default.aspx?tabid="' PortalSettings.ErrorPage500)' exc' false);  		HttpContext.Current.Response.Redirect (url);  	} else {  		HttpContext.Current.Response.Clear ();  		HttpContext.Current.Server.Transfer ("~/ErrorPage.aspx");  	}  } catch (Exception) {  	HttpContext.Current.Response.Clear ();  	var errorMessage = HttpUtility.UrlEncode (Localization.GetString ("NoSitesForThisInstallation.Error"' Localization.GlobalResourceFile));  	HttpContext.Current.Server.Transfer ("~/ErrorPage.aspx?status=503&error=" + errorMessage);  }  
Magic Number,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,OnError,The following statement contains a magic number: if (statusCode == 404) {  	UrlUtils.Handle404Exception (Response' PortalSettings);  }  
Magic Number,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,LocalizeControl,The following statement contains a magic number: if (linkButton != null) {  	var imgMatches = LinkItemMatchRegex.Matches (value);  	foreach (Match match in imgMatches) {  		if ((match.Groups [match.Groups.Count - 2].Value.IndexOf ("~"' StringComparison.Ordinal) == -1))  			continue;  		var resolvedUrl = Page.ResolveUrl (match.Groups [match.Groups.Count - 2].Value);  		value = value.Replace (match.Groups [match.Groups.Count - 2].Value' resolvedUrl);  	}  	linkButton.Text = value;  	if (string.IsNullOrEmpty (linkButton.ToolTip)) {  		linkButton.ToolTip = value;  	}  	return;  }  
Magic Number,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,LocalizeControl,The following statement contains a magic number: if (linkButton != null) {  	var imgMatches = LinkItemMatchRegex.Matches (value);  	foreach (Match match in imgMatches) {  		if ((match.Groups [match.Groups.Count - 2].Value.IndexOf ("~"' StringComparison.Ordinal) == -1))  			continue;  		var resolvedUrl = Page.ResolveUrl (match.Groups [match.Groups.Count - 2].Value);  		value = value.Replace (match.Groups [match.Groups.Count - 2].Value' resolvedUrl);  	}  	linkButton.Text = value;  	if (string.IsNullOrEmpty (linkButton.ToolTip)) {  		linkButton.ToolTip = value;  	}  	return;  }  
Magic Number,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,LocalizeControl,The following statement contains a magic number: if (linkButton != null) {  	var imgMatches = LinkItemMatchRegex.Matches (value);  	foreach (Match match in imgMatches) {  		if ((match.Groups [match.Groups.Count - 2].Value.IndexOf ("~"' StringComparison.Ordinal) == -1))  			continue;  		var resolvedUrl = Page.ResolveUrl (match.Groups [match.Groups.Count - 2].Value);  		value = value.Replace (match.Groups [match.Groups.Count - 2].Value' resolvedUrl);  	}  	linkButton.Text = value;  	if (string.IsNullOrEmpty (linkButton.ToolTip)) {  		linkButton.ToolTip = value;  	}  	return;  }  
Magic Number,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,LocalizeControl,The following statement contains a magic number: foreach (Match match in imgMatches) {  	if ((match.Groups [match.Groups.Count - 2].Value.IndexOf ("~"' StringComparison.Ordinal) == -1))  		continue;  	var resolvedUrl = Page.ResolveUrl (match.Groups [match.Groups.Count - 2].Value);  	value = value.Replace (match.Groups [match.Groups.Count - 2].Value' resolvedUrl);  }  
Magic Number,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,LocalizeControl,The following statement contains a magic number: foreach (Match match in imgMatches) {  	if ((match.Groups [match.Groups.Count - 2].Value.IndexOf ("~"' StringComparison.Ordinal) == -1))  		continue;  	var resolvedUrl = Page.ResolveUrl (match.Groups [match.Groups.Count - 2].Value);  	value = value.Replace (match.Groups [match.Groups.Count - 2].Value' resolvedUrl);  }  
Magic Number,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,LocalizeControl,The following statement contains a magic number: foreach (Match match in imgMatches) {  	if ((match.Groups [match.Groups.Count - 2].Value.IndexOf ("~"' StringComparison.Ordinal) == -1))  		continue;  	var resolvedUrl = Page.ResolveUrl (match.Groups [match.Groups.Count - 2].Value);  	value = value.Replace (match.Groups [match.Groups.Count - 2].Value' resolvedUrl);  }  
Magic Number,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,LocalizeControl,The following statement contains a magic number: if ((match.Groups [match.Groups.Count - 2].Value.IndexOf ("~"' StringComparison.Ordinal) == -1))  	continue;  
Magic Number,DotNetNuke.Framework,PageBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\PageBase.cs,LocalizeControl,The following statement contains a magic number: value = value.Replace (match.Groups [match.Groups.Count - 2].Value' resolvedUrl);  
Magic Number,DotNetNuke.Security,FIPSCompliant,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\FIPSCompliant.cs,EncryptAES,The following statement contains a magic number: using (var aesProvider = new AesCryptoServiceProvider ()) {  	var derivedBytes = new Rfc2898DeriveBytes (passPhrase' saltBytes' iterations);  	Byte[] derivedKey = derivedBytes.GetBytes (32);  	// 256 bits  	Byte[] derivedInitVector = derivedBytes.GetBytes (16);  	// 128 bits  	Byte[] plainTextBytes = Encoding.UTF8.GetBytes (plainText);  	aesProvider.KeySize = 256;  	aesProvider.Padding = PaddingMode.ISO10126;  	aesProvider.Mode = CipherMode.CBC;  	ICryptoTransform encryptor = aesProvider.CreateEncryptor (derivedKey' derivedInitVector);  	using (var memStream = new MemoryStream ())  		using (var cryptoStream = new CryptoStream (memStream' encryptor' CryptoStreamMode.Write)) {  			cryptoStream.Write (plainTextBytes' 0' plainTextBytes.Length);  			cryptoStream.FlushFinalBlock ();  			Byte[] cipherTextBytes = memStream.ToArray ();  			memStream.Close ();  			cryptoStream.Close ();  			return Convert.ToBase64String (cipherTextBytes);  		}  }  
Magic Number,DotNetNuke.Security,FIPSCompliant,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\FIPSCompliant.cs,EncryptAES,The following statement contains a magic number: using (var aesProvider = new AesCryptoServiceProvider ()) {  	var derivedBytes = new Rfc2898DeriveBytes (passPhrase' saltBytes' iterations);  	Byte[] derivedKey = derivedBytes.GetBytes (32);  	// 256 bits  	Byte[] derivedInitVector = derivedBytes.GetBytes (16);  	// 128 bits  	Byte[] plainTextBytes = Encoding.UTF8.GetBytes (plainText);  	aesProvider.KeySize = 256;  	aesProvider.Padding = PaddingMode.ISO10126;  	aesProvider.Mode = CipherMode.CBC;  	ICryptoTransform encryptor = aesProvider.CreateEncryptor (derivedKey' derivedInitVector);  	using (var memStream = new MemoryStream ())  		using (var cryptoStream = new CryptoStream (memStream' encryptor' CryptoStreamMode.Write)) {  			cryptoStream.Write (plainTextBytes' 0' plainTextBytes.Length);  			cryptoStream.FlushFinalBlock ();  			Byte[] cipherTextBytes = memStream.ToArray ();  			memStream.Close ();  			cryptoStream.Close ();  			return Convert.ToBase64String (cipherTextBytes);  		}  }  
Magic Number,DotNetNuke.Security,FIPSCompliant,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\FIPSCompliant.cs,EncryptAES,The following statement contains a magic number: using (var aesProvider = new AesCryptoServiceProvider ()) {  	var derivedBytes = new Rfc2898DeriveBytes (passPhrase' saltBytes' iterations);  	Byte[] derivedKey = derivedBytes.GetBytes (32);  	// 256 bits  	Byte[] derivedInitVector = derivedBytes.GetBytes (16);  	// 128 bits  	Byte[] plainTextBytes = Encoding.UTF8.GetBytes (plainText);  	aesProvider.KeySize = 256;  	aesProvider.Padding = PaddingMode.ISO10126;  	aesProvider.Mode = CipherMode.CBC;  	ICryptoTransform encryptor = aesProvider.CreateEncryptor (derivedKey' derivedInitVector);  	using (var memStream = new MemoryStream ())  		using (var cryptoStream = new CryptoStream (memStream' encryptor' CryptoStreamMode.Write)) {  			cryptoStream.Write (plainTextBytes' 0' plainTextBytes.Length);  			cryptoStream.FlushFinalBlock ();  			Byte[] cipherTextBytes = memStream.ToArray ();  			memStream.Close ();  			cryptoStream.Close ();  			return Convert.ToBase64String (cipherTextBytes);  		}  }  
Magic Number,DotNetNuke.Security,FIPSCompliant,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\FIPSCompliant.cs,EncryptAES,The following statement contains a magic number: aesProvider.KeySize = 256;  
Magic Number,DotNetNuke.Security,FIPSCompliant,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\FIPSCompliant.cs,VerifyAesSettings,The following statement contains a magic number: if (passPhrase.Length < 8)  	throw new CryptographicException ("Passphrase must be at least 8 characters long.");  
Magic Number,DotNetNuke.Security,FIPSCompliant,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\FIPSCompliant.cs,VerifyAesSettings,The following statement contains a magic number: if (salt.Length < 8)  	throw new CryptographicException ("Salt must be at least 8 characters long.");  
Magic Number,DotNetNuke.Security,FIPSCompliant,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\FIPSCompliant.cs,DecryptAES,The following statement contains a magic number: aesProvider.KeySize = 256;  
Magic Number,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,SignOut,The following statement contains a magic number: if (domainCookie == null) {  	//Forms Authentication's Logout  	FormsAuthentication.SignOut ();  } else {  	//clear custom domain cookie  	var domain = domainCookie.Value;  	//Create a new Cookie  	var str = String.Empty;  	if (HttpContext.Current.Request.Browser ["supportsEmptyStringInCookieValue"] == "false") {  		str = "NoCookie";  	}  	var authCookie = new HttpCookie (FormsAuthentication.FormsCookieName' str) {  		Expires = new DateTime (1999' 1' 1)'  		Domain = domain'  		Path = FormsAuthentication.FormsCookiePath'  		Secure = FormsAuthentication.RequireSSL  	};  	HttpContext.Current.Response.Cookies.Set (authCookie);  	var siteGroupCookie = new HttpCookie ("SiteGroup"' str) {  		Expires = new DateTime (1999' 1' 1)'  		Domain = domain'  		Path = FormsAuthentication.FormsCookiePath'  		Secure = FormsAuthentication.RequireSSL  	};  	HttpContext.Current.Response.Cookies.Set (siteGroupCookie);  }  
Magic Number,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,SignOut,The following statement contains a magic number: if (domainCookie == null) {  	//Forms Authentication's Logout  	FormsAuthentication.SignOut ();  } else {  	//clear custom domain cookie  	var domain = domainCookie.Value;  	//Create a new Cookie  	var str = String.Empty;  	if (HttpContext.Current.Request.Browser ["supportsEmptyStringInCookieValue"] == "false") {  		str = "NoCookie";  	}  	var authCookie = new HttpCookie (FormsAuthentication.FormsCookieName' str) {  		Expires = new DateTime (1999' 1' 1)'  		Domain = domain'  		Path = FormsAuthentication.FormsCookiePath'  		Secure = FormsAuthentication.RequireSSL  	};  	HttpContext.Current.Response.Cookies.Set (authCookie);  	var siteGroupCookie = new HttpCookie ("SiteGroup"' str) {  		Expires = new DateTime (1999' 1' 1)'  		Domain = domain'  		Path = FormsAuthentication.FormsCookiePath'  		Secure = FormsAuthentication.RequireSSL  	};  	HttpContext.Current.Response.Cookies.Set (siteGroupCookie);  }  
Magic Number,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,SignOut,The following statement contains a magic number: if (cookie != null) {  	cookie.Value = null;  	cookie.Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/");  	cookie.Expires = DateTime.Now.AddYears (-30);  }  
Magic Number,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,SignOut,The following statement contains a magic number: cookie.Expires = DateTime.Now.AddYears (-30);  
Magic Number,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,SignOut,The following statement contains a magic number: if (cookie != null) {  	cookie.Value = null;  	cookie.Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/");  	cookie.Expires = DateTime.Now.AddYears (-30);  }  
Magic Number,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,SignOut,The following statement contains a magic number: cookie.Expires = DateTime.Now.AddYears (-30);  
Magic Number,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,SignOut,The following statement contains a magic number: foreach (var authCookie in authCookies) {  	if (authCookie.EndsWith ("UserToken")) {  		var auth = HttpContext.Current.Response.Cookies [authCookie];  		if (auth != null) {  			auth.Value = null;  			auth.Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/");  			auth.Expires = DateTime.Now.AddYears (-30);  		}  	}  }  
Magic Number,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,SignOut,The following statement contains a magic number: if (authCookie.EndsWith ("UserToken")) {  	var auth = HttpContext.Current.Response.Cookies [authCookie];  	if (auth != null) {  		auth.Value = null;  		auth.Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/");  		auth.Expires = DateTime.Now.AddYears (-30);  	}  }  
Magic Number,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,SignOut,The following statement contains a magic number: if (auth != null) {  	auth.Value = null;  	auth.Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/");  	auth.Expires = DateTime.Now.AddYears (-30);  }  
Magic Number,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,SignOut,The following statement contains a magic number: auth.Expires = DateTime.Now.AddYears (-30);  
Magic Number,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,ClearRoles,The following statement contains a magic number: if (httpCookie != null) {  	httpCookie.Value = null;  	httpCookie.Path = Globals.ApplicationPath;  	httpCookie.Expires = DateTime.Now.AddYears (-30);  }  
Magic Number,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,ClearRoles,The following statement contains a magic number: httpCookie.Expires = DateTime.Now.AddYears (-30);  
Magic Number,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,GeneratePassword,The following statement contains a magic number: return GeneratePassword (MinPasswordLength + 4);  
Magic Number,DotNetNuke.Services.Assets,SortProperties,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\SortProperties.cs,Parse,The following statement contains a magic number: if (!string.IsNullOrEmpty (sortExpression)) {  	var se = sortExpression.Split (' ');  	if (se.Length == 2) {  		sortProperties.Column = se [0];  		sortProperties.Ascending = se [1] == "ASC";  	}  }  
Magic Number,DotNetNuke.Services.Assets,SortProperties,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Assets\SortProperties.cs,Parse,The following statement contains a magic number: if (se.Length == 2) {  	sortProperties.Column = se [0];  	sortProperties.Ascending = se [1] == "ASC";  }  
Magic Number,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,OAuthClientBase,The following statement contains a magic number: AuthTokenExpiry = new TimeSpan (14' 0' 0' 0);  
Magic Number,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))) {  	normalizedUrl += ":" + url.Port;  }  
Magic Number,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))) {  	normalizedUrl += ":" + url.Port;  }  
Magic Number,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,GenerateNonce,The following statement contains a magic number: return random.Next (123400' 9999999).ToString (CultureInfo.InvariantCulture);  
Magic Number,DotNetNuke.Services.Authentication.OAuth,OAuthClientBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthClientBase.cs,GenerateNonce,The following statement contains a magic number: return random.Next (123400' 9999999).ToString (CultureInfo.InvariantCulture);  
Magic Number,DotNetNuke.Services.Authentication.OAuth,OAuthLoginBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthLoginBase.cs,OnLoad,The following statement contains a magic number: if (!IsPostBack) {  	//Save the return Url in the cookie  	HttpContext.Current.Response.Cookies.Set (new HttpCookie ("returnurl"' RedirectURL) {  		Expires = DateTime.Now.AddMinutes (5)'  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	});  }  
Magic Number,DotNetNuke.Services.Authentication.OAuth,OAuthLoginBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Authentication\OAuth\OAuthLoginBase.cs,OnLoad,The following statement contains a magic number: HttpContext.Current.Response.Cookies.Set (new HttpCookie ("returnurl"' RedirectURL) {  	Expires = DateTime.Now.AddMinutes (5)'  	Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  });  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,EncryptParameter,The following statement contains a magic number: if (!String.IsNullOrEmpty (passphrase)) {  	//convert key to 16 characters for simplicity  	if (passphrase.Length < 16) {  		passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  	} else {  		passphrase = passphrase.Substring (0' 16);  	}  	//create encryption keys  	byte[] byteKey = Encoding.UTF8.GetBytes (passphrase.Substring (0' 8));  	byte[] byteVector = Encoding.UTF8.GetBytes (passphrase.Substring (passphrase.Length - 8' 8));  	//convert data to byte array  	byte[] byteData = Encoding.UTF8.GetBytes (message);  	//encrypt   	using (var objDes = new DESCryptoServiceProvider ())  		using (var objMemoryStream = new MemoryStream ())  			using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateEncryptor (byteKey' byteVector)' CryptoStreamMode.Write)) {  				objCryptoStream.Write (byteData' 0' byteData.Length);  				objCryptoStream.FlushFinalBlock ();  				//convert to string and Base64 encode  				value = Convert.ToBase64String (objMemoryStream.ToArray ());  			}  } else {  	value = message;  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,EncryptParameter,The following statement contains a magic number: if (!String.IsNullOrEmpty (passphrase)) {  	//convert key to 16 characters for simplicity  	if (passphrase.Length < 16) {  		passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  	} else {  		passphrase = passphrase.Substring (0' 16);  	}  	//create encryption keys  	byte[] byteKey = Encoding.UTF8.GetBytes (passphrase.Substring (0' 8));  	byte[] byteVector = Encoding.UTF8.GetBytes (passphrase.Substring (passphrase.Length - 8' 8));  	//convert data to byte array  	byte[] byteData = Encoding.UTF8.GetBytes (message);  	//encrypt   	using (var objDes = new DESCryptoServiceProvider ())  		using (var objMemoryStream = new MemoryStream ())  			using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateEncryptor (byteKey' byteVector)' CryptoStreamMode.Write)) {  				objCryptoStream.Write (byteData' 0' byteData.Length);  				objCryptoStream.FlushFinalBlock ();  				//convert to string and Base64 encode  				value = Convert.ToBase64String (objMemoryStream.ToArray ());  			}  } else {  	value = message;  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,EncryptParameter,The following statement contains a magic number: if (!String.IsNullOrEmpty (passphrase)) {  	//convert key to 16 characters for simplicity  	if (passphrase.Length < 16) {  		passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  	} else {  		passphrase = passphrase.Substring (0' 16);  	}  	//create encryption keys  	byte[] byteKey = Encoding.UTF8.GetBytes (passphrase.Substring (0' 8));  	byte[] byteVector = Encoding.UTF8.GetBytes (passphrase.Substring (passphrase.Length - 8' 8));  	//convert data to byte array  	byte[] byteData = Encoding.UTF8.GetBytes (message);  	//encrypt   	using (var objDes = new DESCryptoServiceProvider ())  		using (var objMemoryStream = new MemoryStream ())  			using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateEncryptor (byteKey' byteVector)' CryptoStreamMode.Write)) {  				objCryptoStream.Write (byteData' 0' byteData.Length);  				objCryptoStream.FlushFinalBlock ();  				//convert to string and Base64 encode  				value = Convert.ToBase64String (objMemoryStream.ToArray ());  			}  } else {  	value = message;  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,EncryptParameter,The following statement contains a magic number: if (!String.IsNullOrEmpty (passphrase)) {  	//convert key to 16 characters for simplicity  	if (passphrase.Length < 16) {  		passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  	} else {  		passphrase = passphrase.Substring (0' 16);  	}  	//create encryption keys  	byte[] byteKey = Encoding.UTF8.GetBytes (passphrase.Substring (0' 8));  	byte[] byteVector = Encoding.UTF8.GetBytes (passphrase.Substring (passphrase.Length - 8' 8));  	//convert data to byte array  	byte[] byteData = Encoding.UTF8.GetBytes (message);  	//encrypt   	using (var objDes = new DESCryptoServiceProvider ())  		using (var objMemoryStream = new MemoryStream ())  			using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateEncryptor (byteKey' byteVector)' CryptoStreamMode.Write)) {  				objCryptoStream.Write (byteData' 0' byteData.Length);  				objCryptoStream.FlushFinalBlock ();  				//convert to string and Base64 encode  				value = Convert.ToBase64String (objMemoryStream.ToArray ());  			}  } else {  	value = message;  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,EncryptParameter,The following statement contains a magic number: if (!String.IsNullOrEmpty (passphrase)) {  	//convert key to 16 characters for simplicity  	if (passphrase.Length < 16) {  		passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  	} else {  		passphrase = passphrase.Substring (0' 16);  	}  	//create encryption keys  	byte[] byteKey = Encoding.UTF8.GetBytes (passphrase.Substring (0' 8));  	byte[] byteVector = Encoding.UTF8.GetBytes (passphrase.Substring (passphrase.Length - 8' 8));  	//convert data to byte array  	byte[] byteData = Encoding.UTF8.GetBytes (message);  	//encrypt   	using (var objDes = new DESCryptoServiceProvider ())  		using (var objMemoryStream = new MemoryStream ())  			using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateEncryptor (byteKey' byteVector)' CryptoStreamMode.Write)) {  				objCryptoStream.Write (byteData' 0' byteData.Length);  				objCryptoStream.FlushFinalBlock ();  				//convert to string and Base64 encode  				value = Convert.ToBase64String (objMemoryStream.ToArray ());  			}  } else {  	value = message;  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,EncryptParameter,The following statement contains a magic number: if (!String.IsNullOrEmpty (passphrase)) {  	//convert key to 16 characters for simplicity  	if (passphrase.Length < 16) {  		passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  	} else {  		passphrase = passphrase.Substring (0' 16);  	}  	//create encryption keys  	byte[] byteKey = Encoding.UTF8.GetBytes (passphrase.Substring (0' 8));  	byte[] byteVector = Encoding.UTF8.GetBytes (passphrase.Substring (passphrase.Length - 8' 8));  	//convert data to byte array  	byte[] byteData = Encoding.UTF8.GetBytes (message);  	//encrypt   	using (var objDes = new DESCryptoServiceProvider ())  		using (var objMemoryStream = new MemoryStream ())  			using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateEncryptor (byteKey' byteVector)' CryptoStreamMode.Write)) {  				objCryptoStream.Write (byteData' 0' byteData.Length);  				objCryptoStream.FlushFinalBlock ();  				//convert to string and Base64 encode  				value = Convert.ToBase64String (objMemoryStream.ToArray ());  			}  } else {  	value = message;  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,EncryptParameter,The following statement contains a magic number: if (passphrase.Length < 16) {  	passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  } else {  	passphrase = passphrase.Substring (0' 16);  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,EncryptParameter,The following statement contains a magic number: if (passphrase.Length < 16) {  	passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  } else {  	passphrase = passphrase.Substring (0' 16);  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,EncryptParameter,The following statement contains a magic number: if (passphrase.Length < 16) {  	passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  } else {  	passphrase = passphrase.Substring (0' 16);  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,EncryptParameter,The following statement contains a magic number: passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,EncryptParameter,The following statement contains a magic number: passphrase = passphrase.Substring (0' 16);  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,DecryptParameter,The following statement contains a magic number: if (!String.IsNullOrEmpty (passphrase)) {  	//convert key to 16 characters for simplicity  	if (passphrase.Length < 16) {  		passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  	} else {  		passphrase = passphrase.Substring (0' 16);  	}  	//create encryption keys  	byte[] byteKey = Encoding.UTF8.GetBytes (passphrase.Substring (0' 8));  	byte[] byteVector = Encoding.UTF8.GetBytes (passphrase.Substring (passphrase.Length - 8' 8));  	//convert data to byte array and Base64 decode  	var byteData = new byte[message.Length];  	try {  		byteData = Convert.FromBase64String (message);  	} catch//invalid length  	 {  		strValue = message;  	}  	if (String.IsNullOrEmpty (strValue)) {  		try {  			//decrypt  			using (var objDes = new DESCryptoServiceProvider ())  				using (var objMemoryStream = new MemoryStream ())  					using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateDecryptor (byteKey' byteVector)' CryptoStreamMode.Write)) {  						objCryptoStream.Write (byteData' 0' byteData.Length);  						objCryptoStream.FlushFinalBlock ();  						//convert to string  						Encoding objEncoding = Encoding.UTF8;  						strValue = objEncoding.GetString (objMemoryStream.ToArray ());  					}  		} catch//decryption error  		 {  			strValue = "";  		}  	}  } else {  	strValue = message;  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,DecryptParameter,The following statement contains a magic number: if (!String.IsNullOrEmpty (passphrase)) {  	//convert key to 16 characters for simplicity  	if (passphrase.Length < 16) {  		passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  	} else {  		passphrase = passphrase.Substring (0' 16);  	}  	//create encryption keys  	byte[] byteKey = Encoding.UTF8.GetBytes (passphrase.Substring (0' 8));  	byte[] byteVector = Encoding.UTF8.GetBytes (passphrase.Substring (passphrase.Length - 8' 8));  	//convert data to byte array and Base64 decode  	var byteData = new byte[message.Length];  	try {  		byteData = Convert.FromBase64String (message);  	} catch//invalid length  	 {  		strValue = message;  	}  	if (String.IsNullOrEmpty (strValue)) {  		try {  			//decrypt  			using (var objDes = new DESCryptoServiceProvider ())  				using (var objMemoryStream = new MemoryStream ())  					using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateDecryptor (byteKey' byteVector)' CryptoStreamMode.Write)) {  						objCryptoStream.Write (byteData' 0' byteData.Length);  						objCryptoStream.FlushFinalBlock ();  						//convert to string  						Encoding objEncoding = Encoding.UTF8;  						strValue = objEncoding.GetString (objMemoryStream.ToArray ());  					}  		} catch//decryption error  		 {  			strValue = "";  		}  	}  } else {  	strValue = message;  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,DecryptParameter,The following statement contains a magic number: if (!String.IsNullOrEmpty (passphrase)) {  	//convert key to 16 characters for simplicity  	if (passphrase.Length < 16) {  		passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  	} else {  		passphrase = passphrase.Substring (0' 16);  	}  	//create encryption keys  	byte[] byteKey = Encoding.UTF8.GetBytes (passphrase.Substring (0' 8));  	byte[] byteVector = Encoding.UTF8.GetBytes (passphrase.Substring (passphrase.Length - 8' 8));  	//convert data to byte array and Base64 decode  	var byteData = new byte[message.Length];  	try {  		byteData = Convert.FromBase64String (message);  	} catch//invalid length  	 {  		strValue = message;  	}  	if (String.IsNullOrEmpty (strValue)) {  		try {  			//decrypt  			using (var objDes = new DESCryptoServiceProvider ())  				using (var objMemoryStream = new MemoryStream ())  					using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateDecryptor (byteKey' byteVector)' CryptoStreamMode.Write)) {  						objCryptoStream.Write (byteData' 0' byteData.Length);  						objCryptoStream.FlushFinalBlock ();  						//convert to string  						Encoding objEncoding = Encoding.UTF8;  						strValue = objEncoding.GetString (objMemoryStream.ToArray ());  					}  		} catch//decryption error  		 {  			strValue = "";  		}  	}  } else {  	strValue = message;  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,DecryptParameter,The following statement contains a magic number: if (!String.IsNullOrEmpty (passphrase)) {  	//convert key to 16 characters for simplicity  	if (passphrase.Length < 16) {  		passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  	} else {  		passphrase = passphrase.Substring (0' 16);  	}  	//create encryption keys  	byte[] byteKey = Encoding.UTF8.GetBytes (passphrase.Substring (0' 8));  	byte[] byteVector = Encoding.UTF8.GetBytes (passphrase.Substring (passphrase.Length - 8' 8));  	//convert data to byte array and Base64 decode  	var byteData = new byte[message.Length];  	try {  		byteData = Convert.FromBase64String (message);  	} catch//invalid length  	 {  		strValue = message;  	}  	if (String.IsNullOrEmpty (strValue)) {  		try {  			//decrypt  			using (var objDes = new DESCryptoServiceProvider ())  				using (var objMemoryStream = new MemoryStream ())  					using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateDecryptor (byteKey' byteVector)' CryptoStreamMode.Write)) {  						objCryptoStream.Write (byteData' 0' byteData.Length);  						objCryptoStream.FlushFinalBlock ();  						//convert to string  						Encoding objEncoding = Encoding.UTF8;  						strValue = objEncoding.GetString (objMemoryStream.ToArray ());  					}  		} catch//decryption error  		 {  			strValue = "";  		}  	}  } else {  	strValue = message;  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,DecryptParameter,The following statement contains a magic number: if (!String.IsNullOrEmpty (passphrase)) {  	//convert key to 16 characters for simplicity  	if (passphrase.Length < 16) {  		passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  	} else {  		passphrase = passphrase.Substring (0' 16);  	}  	//create encryption keys  	byte[] byteKey = Encoding.UTF8.GetBytes (passphrase.Substring (0' 8));  	byte[] byteVector = Encoding.UTF8.GetBytes (passphrase.Substring (passphrase.Length - 8' 8));  	//convert data to byte array and Base64 decode  	var byteData = new byte[message.Length];  	try {  		byteData = Convert.FromBase64String (message);  	} catch//invalid length  	 {  		strValue = message;  	}  	if (String.IsNullOrEmpty (strValue)) {  		try {  			//decrypt  			using (var objDes = new DESCryptoServiceProvider ())  				using (var objMemoryStream = new MemoryStream ())  					using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateDecryptor (byteKey' byteVector)' CryptoStreamMode.Write)) {  						objCryptoStream.Write (byteData' 0' byteData.Length);  						objCryptoStream.FlushFinalBlock ();  						//convert to string  						Encoding objEncoding = Encoding.UTF8;  						strValue = objEncoding.GetString (objMemoryStream.ToArray ());  					}  		} catch//decryption error  		 {  			strValue = "";  		}  	}  } else {  	strValue = message;  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,DecryptParameter,The following statement contains a magic number: if (!String.IsNullOrEmpty (passphrase)) {  	//convert key to 16 characters for simplicity  	if (passphrase.Length < 16) {  		passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  	} else {  		passphrase = passphrase.Substring (0' 16);  	}  	//create encryption keys  	byte[] byteKey = Encoding.UTF8.GetBytes (passphrase.Substring (0' 8));  	byte[] byteVector = Encoding.UTF8.GetBytes (passphrase.Substring (passphrase.Length - 8' 8));  	//convert data to byte array and Base64 decode  	var byteData = new byte[message.Length];  	try {  		byteData = Convert.FromBase64String (message);  	} catch//invalid length  	 {  		strValue = message;  	}  	if (String.IsNullOrEmpty (strValue)) {  		try {  			//decrypt  			using (var objDes = new DESCryptoServiceProvider ())  				using (var objMemoryStream = new MemoryStream ())  					using (var objCryptoStream = new CryptoStream (objMemoryStream' objDes.CreateDecryptor (byteKey' byteVector)' CryptoStreamMode.Write)) {  						objCryptoStream.Write (byteData' 0' byteData.Length);  						objCryptoStream.FlushFinalBlock ();  						//convert to string  						Encoding objEncoding = Encoding.UTF8;  						strValue = objEncoding.GetString (objMemoryStream.ToArray ());  					}  		} catch//decryption error  		 {  			strValue = "";  		}  	}  } else {  	strValue = message;  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,DecryptParameter,The following statement contains a magic number: if (passphrase.Length < 16) {  	passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  } else {  	passphrase = passphrase.Substring (0' 16);  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,DecryptParameter,The following statement contains a magic number: if (passphrase.Length < 16) {  	passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  } else {  	passphrase = passphrase.Substring (0' 16);  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,DecryptParameter,The following statement contains a magic number: if (passphrase.Length < 16) {  	passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  } else {  	passphrase = passphrase.Substring (0' 16);  }  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,DecryptParameter,The following statement contains a magic number: passphrase = passphrase + "XXXXXXXXXXXXXXXX".Substring (0' 16 - passphrase.Length);  
Magic Number,DotNetNuke.Services.Cryptography,CoreCryptographyProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cryptography\CoreCryptographyProvider.cs,DecryptParameter,The following statement contains a magic number: passphrase = passphrase.Substring (0' 16);  
Magic Number,DotNetNuke.Services.Exceptions,BasePortalException,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\BasePortalException.cs,InitializePrivateVariables,The following statement contains a magic number: try {  	var context = HttpContext.Current;  	var portalSettings = PortalController.Instance.GetCurrentPortalSettings ();  	var innerException = new Exception (Message' this);  	while (innerException.InnerException != null) {  		innerException = innerException.InnerException;  	}  	var exceptionInfo = Exceptions.GetExceptionInfo (innerException);  	AssemblyVersion = DotNetNukeContext.Current.Application.Version.ToString (3);  	if (portalSettings != null) {  		PortalID = portalSettings.PortalId;  		PortalName = portalSettings.PortalName;  		ActiveTabID = portalSettings.ActiveTab.TabID;  		ActiveTabName = portalSettings.ActiveTab.TabName;  	} else {  		PortalID = -1;  		PortalName = "";  		ActiveTabID = -1;  		ActiveTabName = "";  	}  	var currentUserInfo = UserController.Instance.GetCurrentUserInfo ();  	UserID = (currentUserInfo != null) ? currentUserInfo.UserID : -1;  	if (UserID != -1) {  		currentUserInfo = UserController.GetUserById (PortalID' UserID);  		UserName = currentUserInfo != null ? currentUserInfo.Username : "";  	} else {  		UserName = "";  	}  	if (context != null) {  		RawURL = context.Request.RawUrl;  		AbsoluteURL = context.Request.Url.AbsolutePath;  		if (context.Request.UrlReferrer != null) {  			AbsoluteURLReferrer = context.Request.UrlReferrer.AbsoluteUri;  		}  		UserAgent = context.Request.UserAgent;  	} else {  		RawURL = "";  		AbsoluteURL = "";  		AbsoluteURLReferrer = "";  		UserAgent = "";  	}  	try {  		ProviderConfiguration objProviderConfiguration = ProviderConfiguration.GetProviderConfiguration ("data");  		string strTypeName = ((Provider)objProviderConfiguration.Providers [objProviderConfiguration.DefaultProvider]).Type;  		DefaultDataProvider = strTypeName;  	} catch (Exception exc) {  		Logger.Error (exc);  		DefaultDataProvider = "";  	}  	ExceptionGUID = Guid.NewGuid ().ToString ();  	if (exceptionInfo != null) {  		FileName = exceptionInfo.FileName;  		FileLineNumber = exceptionInfo.FileLineNumber;  		FileColumnNumber = exceptionInfo.FileColumnNumber;  		Method = exceptionInfo.Method;  	} else {  		FileName = "";  		FileLineNumber = -1;  		FileColumnNumber = -1;  		Method = "";  	}  	try {  		m_StackTrace = StackTrace;  	} catch (Exception exc) {  		Logger.Error (exc);  		m_StackTrace = "";  	}  	try {  		m_Message = Message;  	} catch (Exception exc) {  		Logger.Error (exc);  		m_Message = "";  	}  	try {  		m_Source = Source;  	} catch (Exception exc) {  		Logger.Error (exc);  		m_Source = "";  	}  } catch (Exception exc) {  	PortalID = -1;  	UserID = -1;  	AssemblyVersion = "-1";  	ActiveTabID = -1;  	ActiveTabName = "";  	RawURL = "";  	AbsoluteURL = "";  	AbsoluteURLReferrer = "";  	UserAgent = "";  	DefaultDataProvider = "";  	ExceptionGUID = "";  	FileName = "";  	FileLineNumber = -1;  	FileColumnNumber = -1;  	Method = "";  	m_StackTrace = "";  	m_Message = "";  	m_Source = "";  	Logger.Error (exc);  }  
Magic Number,DotNetNuke.Services.Exceptions,BasePortalException,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\BasePortalException.cs,InitializePrivateVariables,The following statement contains a magic number: AssemblyVersion = DotNetNukeContext.Current.Application.Version.ToString (3);  
Magic Number,DotNetNuke.Services.FileSystem,FileVersionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileVersionController.cs,AddFileVersion,The following statement contains a magic number: if (content != null) {  	var buffer = new byte[16 * 1024];  	using (var ms = new MemoryStream ()) {  		int read;  		while ((read = content.Read (buffer' 0' buffer.Length)) > 0) {  			ms.Write (buffer' 0' read);  		}  		fileContent = ms.ToArray ();  	}  }  
Magic Number,DotNetNuke.Services.FileSystem,FileVersionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileVersionController.cs,AddFileVersion,The following statement contains a magic number: if (content != null) {  	var buffer = new byte[16 * 1024];  	using (var ms = new MemoryStream ()) {  		int read;  		while ((read = content.Read (buffer' 0' buffer.Length)) > 0) {  			ms.Write (buffer' 0' read);  		}  		fileContent = ms.ToArray ();  	}  }  
Magic Number,DotNetNuke.Services.FileSystem,FileVersionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileVersionController.cs,MaxFileVersions,The following statement contains a magic number: return PortalController.GetPortalSettingAsInteger ("MaxFileVersions"' portalId' 5);  
Magic Number,DotNetNuke.Services.FileSystem,DatabaseFolderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Providers\DatabaseFolderProvider.cs,UpdateFileInternal,The following statement contains a magic number: if (content != null) {  	var restorePosition = content.CanSeek;  	long originalPosition = Null.NullInteger;  	if (restorePosition) {  		originalPosition = content.Position;  		content.Position = 0;  	}  	var buffer = new byte[16 * 1024];  	using (var ms = new MemoryStream ()) {  		int read;  		while ((read = content.Read (buffer' 0' buffer.Length)) > 0) {  			ms.Write (buffer' 0' read);  		}  		fileContent = ms.ToArray ();  	}  	if (restorePosition) {  		content.Position = originalPosition;  	}  }  
Magic Number,DotNetNuke.Services.FileSystem,DatabaseFolderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Providers\DatabaseFolderProvider.cs,UpdateFileInternal,The following statement contains a magic number: if (content != null) {  	var restorePosition = content.CanSeek;  	long originalPosition = Null.NullInteger;  	if (restorePosition) {  		originalPosition = content.Position;  		content.Position = 0;  	}  	var buffer = new byte[16 * 1024];  	using (var ms = new MemoryStream ()) {  		int read;  		while ((read = content.Read (buffer' 0' buffer.Length)) > 0) {  			ms.Write (buffer' 0' read);  		}  		fileContent = ms.ToArray ();  	}  	if (restorePosition) {  		content.Position = originalPosition;  	}  }  
Magic Number,DotNetNuke.Services.FileSystem,DatabaseFolderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Providers\DatabaseFolderProvider.cs,UpdateFileContent,The following statement contains a magic number: if (content != null) {  	byte[] fileContent;  	var buffer = new byte[16 * 1024];  	using (var ms = new MemoryStream ()) {  		int read;  		while ((read = content.Read (buffer' 0' buffer.Length)) > 0) {  			ms.Write (buffer' 0' read);  		}  		fileContent = ms.ToArray ();  	}  	UpdateFileContent (fileId' fileContent);  } else {  	ClearFileContent (fileId);  }  
Magic Number,DotNetNuke.Services.FileSystem,DatabaseFolderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\Providers\DatabaseFolderProvider.cs,UpdateFileContent,The following statement contains a magic number: if (content != null) {  	byte[] fileContent;  	var buffer = new byte[16 * 1024];  	using (var ms = new MemoryStream ()) {  		int read;  		while ((read = content.Read (buffer' 0' buffer.Length)) > 0) {  			ms.Write (buffer' 0' read);  		}  		fileContent = ms.ToArray ();  	}  	UpdateFileContent (fileId' fileContent);  } else {  	ClearFileContent (fileId);  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,RotateFlipImage,The following statement contains a magic number: try {  	using (var image = GetImageFromStream (content)) {  		if (!image.PropertyIdList.Any (x => x == 274))  			return;  		var orientation = image.GetPropertyItem (274);  		//Find rotation/flip meta property  		if (orientation == null)  			return;  		var flip = OrientationToFlipType (orientation.Value [0].ToString ());  		if (flip == RotateFlipType.RotateNoneFlipNone)  			return;  		//No rotation or flip required  		image.RotateFlip (flip);  		var newOrientation = new byte[2];  		newOrientation [0] = 1;  		// little Endian  		newOrientation [1] = 0;  		orientation.Value = newOrientation;  		image.SetPropertyItem (orientation);  		content = ToStream (image' GetImageFormat (image));  	}  } catch (Exception ex) {  	Logger.Error (ex);  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,RotateFlipImage,The following statement contains a magic number: try {  	using (var image = GetImageFromStream (content)) {  		if (!image.PropertyIdList.Any (x => x == 274))  			return;  		var orientation = image.GetPropertyItem (274);  		//Find rotation/flip meta property  		if (orientation == null)  			return;  		var flip = OrientationToFlipType (orientation.Value [0].ToString ());  		if (flip == RotateFlipType.RotateNoneFlipNone)  			return;  		//No rotation or flip required  		image.RotateFlip (flip);  		var newOrientation = new byte[2];  		newOrientation [0] = 1;  		// little Endian  		newOrientation [1] = 0;  		orientation.Value = newOrientation;  		image.SetPropertyItem (orientation);  		content = ToStream (image' GetImageFormat (image));  	}  } catch (Exception ex) {  	Logger.Error (ex);  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,RotateFlipImage,The following statement contains a magic number: try {  	using (var image = GetImageFromStream (content)) {  		if (!image.PropertyIdList.Any (x => x == 274))  			return;  		var orientation = image.GetPropertyItem (274);  		//Find rotation/flip meta property  		if (orientation == null)  			return;  		var flip = OrientationToFlipType (orientation.Value [0].ToString ());  		if (flip == RotateFlipType.RotateNoneFlipNone)  			return;  		//No rotation or flip required  		image.RotateFlip (flip);  		var newOrientation = new byte[2];  		newOrientation [0] = 1;  		// little Endian  		newOrientation [1] = 0;  		orientation.Value = newOrientation;  		image.SetPropertyItem (orientation);  		content = ToStream (image' GetImageFormat (image));  	}  } catch (Exception ex) {  	Logger.Error (ex);  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,RotateFlipImage,The following statement contains a magic number: using (var image = GetImageFromStream (content)) {  	if (!image.PropertyIdList.Any (x => x == 274))  		return;  	var orientation = image.GetPropertyItem (274);  	//Find rotation/flip meta property  	if (orientation == null)  		return;  	var flip = OrientationToFlipType (orientation.Value [0].ToString ());  	if (flip == RotateFlipType.RotateNoneFlipNone)  		return;  	//No rotation or flip required  	image.RotateFlip (flip);  	var newOrientation = new byte[2];  	newOrientation [0] = 1;  	// little Endian  	newOrientation [1] = 0;  	orientation.Value = newOrientation;  	image.SetPropertyItem (orientation);  	content = ToStream (image' GetImageFormat (image));  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,RotateFlipImage,The following statement contains a magic number: using (var image = GetImageFromStream (content)) {  	if (!image.PropertyIdList.Any (x => x == 274))  		return;  	var orientation = image.GetPropertyItem (274);  	//Find rotation/flip meta property  	if (orientation == null)  		return;  	var flip = OrientationToFlipType (orientation.Value [0].ToString ());  	if (flip == RotateFlipType.RotateNoneFlipNone)  		return;  	//No rotation or flip required  	image.RotateFlip (flip);  	var newOrientation = new byte[2];  	newOrientation [0] = 1;  	// little Endian  	newOrientation [1] = 0;  	orientation.Value = newOrientation;  	image.SetPropertyItem (orientation);  	content = ToStream (image' GetImageFormat (image));  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,RotateFlipImage,The following statement contains a magic number: using (var image = GetImageFromStream (content)) {  	if (!image.PropertyIdList.Any (x => x == 274))  		return;  	var orientation = image.GetPropertyItem (274);  	//Find rotation/flip meta property  	if (orientation == null)  		return;  	var flip = OrientationToFlipType (orientation.Value [0].ToString ());  	if (flip == RotateFlipType.RotateNoneFlipNone)  		return;  	//No rotation or flip required  	image.RotateFlip (flip);  	var newOrientation = new byte[2];  	newOrientation [0] = 1;  	// little Endian  	newOrientation [1] = 0;  	orientation.Value = newOrientation;  	image.SetPropertyItem (orientation);  	content = ToStream (image' GetImageFormat (image));  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,RotateFlipImage,The following statement contains a magic number: if (!image.PropertyIdList.Any (x => x == 274))  	return;  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation)) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation)) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation)) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation)) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation)) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation)) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,OrientationToFlipType,The following statement contains a magic number: switch (int.Parse (orientation)) {  case 1:  	return RotateFlipType.RotateNoneFlipNone;  case 2:  	return RotateFlipType.RotateNoneFlipX;  case 3:  	return RotateFlipType.Rotate180FlipNone;  case 4:  	return RotateFlipType.Rotate180FlipX;  case 5:  	return RotateFlipType.Rotate90FlipX;  case 6:  	return RotateFlipType.Rotate90FlipNone;  case 7:  	return RotateFlipType.Rotate270FlipX;  case 8:  	return RotateFlipType.Rotate270FlipNone;  default:  	return RotateFlipType.RotateNoneFlipNone;  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,GetFile,The following statement contains a magic number: if (file == null) {  	file = CBO.Instance.FillObject<FileInfo> (DataProvider.Instance ().GetFileById (fileID' retrieveUnpublishedFiles));  	if (file != null) {  		var intCacheTimeout = 20 * Convert.ToInt32 (GetPerformanceSetting ());  		DataCache.SetCache (strCacheKey' file' TimeSpan.FromMinutes (intCacheTimeout));  	}  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,GetFile,The following statement contains a magic number: if (file != null) {  	var intCacheTimeout = 20 * Convert.ToInt32 (GetPerformanceSetting ());  	DataCache.SetCache (strCacheKey' file' TimeSpan.FromMinutes (intCacheTimeout));  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,WriteFile,The following statement contains a magic number: using (var srcStream = GetFileContent (file)) {  	const int bufferSize = 4096;  	var buffer = new byte[bufferSize];  	int bytesRead;  	while ((bytesRead = srcStream.Read (buffer' 0' bufferSize)) > 0) {  		stream.Write (buffer' 0' bytesRead);  	}  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,WriteStream,The following statement contains a magic number: try {  	if (objResponse.IsClientConnected) {  		var intLength = objStream.Read (bytBuffer' 0' 10000);  		while (objResponse.IsClientConnected && intLength > 0) {  			objResponse.OutputStream.Write (bytBuffer' 0' intLength);  			objResponse.Flush ();  			intLength = objStream.Read (bytBuffer' 0' 10000);  		}  	}  } catch (Exception ex) {  	Logger.Error (ex);  	objResponse.Write ("Error : " + ex.Message);  } finally {  	if (objStream != null) {  		objStream.Close ();  		objStream.Dispose ();  	}  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,WriteStream,The following statement contains a magic number: try {  	if (objResponse.IsClientConnected) {  		var intLength = objStream.Read (bytBuffer' 0' 10000);  		while (objResponse.IsClientConnected && intLength > 0) {  			objResponse.OutputStream.Write (bytBuffer' 0' intLength);  			objResponse.Flush ();  			intLength = objStream.Read (bytBuffer' 0' 10000);  		}  	}  } catch (Exception ex) {  	Logger.Error (ex);  	objResponse.Write ("Error : " + ex.Message);  } finally {  	if (objStream != null) {  		objStream.Close ();  		objStream.Dispose ();  	}  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,WriteStream,The following statement contains a magic number: if (objResponse.IsClientConnected) {  	var intLength = objStream.Read (bytBuffer' 0' 10000);  	while (objResponse.IsClientConnected && intLength > 0) {  		objResponse.OutputStream.Write (bytBuffer' 0' intLength);  		objResponse.Flush ();  		intLength = objStream.Read (bytBuffer' 0' 10000);  	}  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,WriteStream,The following statement contains a magic number: if (objResponse.IsClientConnected) {  	var intLength = objStream.Read (bytBuffer' 0' 10000);  	while (objResponse.IsClientConnected && intLength > 0) {  		objResponse.OutputStream.Write (bytBuffer' 0' intLength);  		objResponse.Flush ();  		intLength = objStream.Read (bytBuffer' 0' 10000);  	}  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,WriteStream,The following statement contains a magic number: while (objResponse.IsClientConnected && intLength > 0) {  	objResponse.OutputStream.Write (bytBuffer' 0' intLength);  	objResponse.Flush ();  	intLength = objStream.Read (bytBuffer' 0' 10000);  }  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,WriteStream,The following statement contains a magic number: intLength = objStream.Read (bytBuffer' 0' 10000);  
Magic Number,DotNetNuke.Services.FileSystem,FileManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FileManager.cs,ValidMetadata,The following statement contains a magic number: if (!string.IsNullOrEmpty (file.Title) && file.Title.Length > 256) {  	exceptionMessage = Localization.Localization.GetExceptionMessage ("MaxLengthExceeded"' "The maximum length of the field {0} has been exceeded"' DefaultMetadataNames.Title);  	return false;  }  
Magic Number,DotNetNuke.Services.FileSystem,FolderMappingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\FileSystem\FolderMappings\FolderMappingController.cs,GetFolderMappingSettings,The following statement contains a magic number: if (objSettings == null) {  	objSettings = new Hashtable ();  	IDataReader dr = null;  	try {  		dr = dataProvider.GetFolderMappingSettings (folderMappingID);  		while (dr.Read ()) {  			if (!dr.IsDBNull (1)) {  				objSettings [dr.GetString (0)] = dr.GetString (1);  			} else {  				objSettings [dr.GetString (0)] = string.Empty;  			}  		}  	} catch (Exception ex) {  		Exceptions.Exceptions.LogException (ex);  	} finally {  		CBO.CloseDataReader (dr' true);  	}  	var intCacheTimeout = 20 * Convert.ToInt32 (Host.PerformanceSetting);  	DataCache.SetCache (strCacheKey' objSettings' TimeSpan.FromMinutes (intCacheTimeout));  }  
Magic Number,DotNetNuke.Services.GeneratedImage,IPCount,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\IPCount.cs,IPCount,The following statement contains a magic number: PurgeInterval = new TimeSpan (0' 10' 0);  
Magic Number,DotNetNuke.Services.GeneratedImage,IPCount,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\IPCount.cs,IPCount,The following statement contains a magic number: MaxCount = 500;  
Magic Number,DotNetNuke.Services.GeneratedImage,DiskImageStore,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DiskImageStore.cs,DiskImageStore,The following statement contains a magic number: PurgeInterval = new TimeSpan (0' 5' 0);  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,DnnImageHandler,The following statement contains a magic number: ImageCompression = 95;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,DnnImageHandler,The following statement contains a magic number: DiskImageStore.PurgeInterval = new TimeSpan (0' 3' 0);  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,DnnImageHandler,The following statement contains a magic number: IPCountPurgeInterval = new TimeSpan (0' 5' 0);  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,DnnImageHandler,The following statement contains a magic number: IPCountMaxCount = 500;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,DnnImageHandler,The following statement contains a magic number: ClientCacheExpiration = new TimeSpan (0' 10' 0);  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (mode != "placeholder") {  	int width' height;  	TryParseDimension (parameters ["w"]' out width);  	TryParseDimension (parameters ["h"]' out height);  	var size = string.IsNullOrEmpty (parameters ["size"]) ? "" : parameters ["size"];  	switch (size) {  	case "xxs":  		width = 16;  		height = 16;  		break;  	case "xs":  		width = 32;  		height = 32;  		break;  	case "s":  		width = 50;  		height = 50;  		break;  	case "l":  		width = 64;  		height = 64;  		break;  	case "xl":  		width = 128;  		height = 128;  		break;  	case "xxl":  		width = 256;  		height = 256;  		break;  	}  	if (mode == "profilepic") {  		resizeMode = ImageResizeMode.FitSquare;  		if (width > 0 && height > 0 && width != height) {  			resizeMode = ImageResizeMode.Fill;  		}  	}  	if (width > 0 || height > 0) {  		var resizeTrans = new ImageResizeTransform {  			Mode = resizeMode'  			BackColor = backColor'  			Width = width'  			Height = height'  			MaxWidth = maxWidth'  			MaxHeight = maxHeight'  			Border = border  		};  		ImageTransforms.Add (resizeTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (mode != "placeholder") {  	int width' height;  	TryParseDimension (parameters ["w"]' out width);  	TryParseDimension (parameters ["h"]' out height);  	var size = string.IsNullOrEmpty (parameters ["size"]) ? "" : parameters ["size"];  	switch (size) {  	case "xxs":  		width = 16;  		height = 16;  		break;  	case "xs":  		width = 32;  		height = 32;  		break;  	case "s":  		width = 50;  		height = 50;  		break;  	case "l":  		width = 64;  		height = 64;  		break;  	case "xl":  		width = 128;  		height = 128;  		break;  	case "xxl":  		width = 256;  		height = 256;  		break;  	}  	if (mode == "profilepic") {  		resizeMode = ImageResizeMode.FitSquare;  		if (width > 0 && height > 0 && width != height) {  			resizeMode = ImageResizeMode.Fill;  		}  	}  	if (width > 0 || height > 0) {  		var resizeTrans = new ImageResizeTransform {  			Mode = resizeMode'  			BackColor = backColor'  			Width = width'  			Height = height'  			MaxWidth = maxWidth'  			MaxHeight = maxHeight'  			Border = border  		};  		ImageTransforms.Add (resizeTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (mode != "placeholder") {  	int width' height;  	TryParseDimension (parameters ["w"]' out width);  	TryParseDimension (parameters ["h"]' out height);  	var size = string.IsNullOrEmpty (parameters ["size"]) ? "" : parameters ["size"];  	switch (size) {  	case "xxs":  		width = 16;  		height = 16;  		break;  	case "xs":  		width = 32;  		height = 32;  		break;  	case "s":  		width = 50;  		height = 50;  		break;  	case "l":  		width = 64;  		height = 64;  		break;  	case "xl":  		width = 128;  		height = 128;  		break;  	case "xxl":  		width = 256;  		height = 256;  		break;  	}  	if (mode == "profilepic") {  		resizeMode = ImageResizeMode.FitSquare;  		if (width > 0 && height > 0 && width != height) {  			resizeMode = ImageResizeMode.Fill;  		}  	}  	if (width > 0 || height > 0) {  		var resizeTrans = new ImageResizeTransform {  			Mode = resizeMode'  			BackColor = backColor'  			Width = width'  			Height = height'  			MaxWidth = maxWidth'  			MaxHeight = maxHeight'  			Border = border  		};  		ImageTransforms.Add (resizeTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (mode != "placeholder") {  	int width' height;  	TryParseDimension (parameters ["w"]' out width);  	TryParseDimension (parameters ["h"]' out height);  	var size = string.IsNullOrEmpty (parameters ["size"]) ? "" : parameters ["size"];  	switch (size) {  	case "xxs":  		width = 16;  		height = 16;  		break;  	case "xs":  		width = 32;  		height = 32;  		break;  	case "s":  		width = 50;  		height = 50;  		break;  	case "l":  		width = 64;  		height = 64;  		break;  	case "xl":  		width = 128;  		height = 128;  		break;  	case "xxl":  		width = 256;  		height = 256;  		break;  	}  	if (mode == "profilepic") {  		resizeMode = ImageResizeMode.FitSquare;  		if (width > 0 && height > 0 && width != height) {  			resizeMode = ImageResizeMode.Fill;  		}  	}  	if (width > 0 || height > 0) {  		var resizeTrans = new ImageResizeTransform {  			Mode = resizeMode'  			BackColor = backColor'  			Width = width'  			Height = height'  			MaxWidth = maxWidth'  			MaxHeight = maxHeight'  			Border = border  		};  		ImageTransforms.Add (resizeTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (mode != "placeholder") {  	int width' height;  	TryParseDimension (parameters ["w"]' out width);  	TryParseDimension (parameters ["h"]' out height);  	var size = string.IsNullOrEmpty (parameters ["size"]) ? "" : parameters ["size"];  	switch (size) {  	case "xxs":  		width = 16;  		height = 16;  		break;  	case "xs":  		width = 32;  		height = 32;  		break;  	case "s":  		width = 50;  		height = 50;  		break;  	case "l":  		width = 64;  		height = 64;  		break;  	case "xl":  		width = 128;  		height = 128;  		break;  	case "xxl":  		width = 256;  		height = 256;  		break;  	}  	if (mode == "profilepic") {  		resizeMode = ImageResizeMode.FitSquare;  		if (width > 0 && height > 0 && width != height) {  			resizeMode = ImageResizeMode.Fill;  		}  	}  	if (width > 0 || height > 0) {  		var resizeTrans = new ImageResizeTransform {  			Mode = resizeMode'  			BackColor = backColor'  			Width = width'  			Height = height'  			MaxWidth = maxWidth'  			MaxHeight = maxHeight'  			Border = border  		};  		ImageTransforms.Add (resizeTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (mode != "placeholder") {  	int width' height;  	TryParseDimension (parameters ["w"]' out width);  	TryParseDimension (parameters ["h"]' out height);  	var size = string.IsNullOrEmpty (parameters ["size"]) ? "" : parameters ["size"];  	switch (size) {  	case "xxs":  		width = 16;  		height = 16;  		break;  	case "xs":  		width = 32;  		height = 32;  		break;  	case "s":  		width = 50;  		height = 50;  		break;  	case "l":  		width = 64;  		height = 64;  		break;  	case "xl":  		width = 128;  		height = 128;  		break;  	case "xxl":  		width = 256;  		height = 256;  		break;  	}  	if (mode == "profilepic") {  		resizeMode = ImageResizeMode.FitSquare;  		if (width > 0 && height > 0 && width != height) {  			resizeMode = ImageResizeMode.Fill;  		}  	}  	if (width > 0 || height > 0) {  		var resizeTrans = new ImageResizeTransform {  			Mode = resizeMode'  			BackColor = backColor'  			Width = width'  			Height = height'  			MaxWidth = maxWidth'  			MaxHeight = maxHeight'  			Border = border  		};  		ImageTransforms.Add (resizeTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (mode != "placeholder") {  	int width' height;  	TryParseDimension (parameters ["w"]' out width);  	TryParseDimension (parameters ["h"]' out height);  	var size = string.IsNullOrEmpty (parameters ["size"]) ? "" : parameters ["size"];  	switch (size) {  	case "xxs":  		width = 16;  		height = 16;  		break;  	case "xs":  		width = 32;  		height = 32;  		break;  	case "s":  		width = 50;  		height = 50;  		break;  	case "l":  		width = 64;  		height = 64;  		break;  	case "xl":  		width = 128;  		height = 128;  		break;  	case "xxl":  		width = 256;  		height = 256;  		break;  	}  	if (mode == "profilepic") {  		resizeMode = ImageResizeMode.FitSquare;  		if (width > 0 && height > 0 && width != height) {  			resizeMode = ImageResizeMode.Fill;  		}  	}  	if (width > 0 || height > 0) {  		var resizeTrans = new ImageResizeTransform {  			Mode = resizeMode'  			BackColor = backColor'  			Width = width'  			Height = height'  			MaxWidth = maxWidth'  			MaxHeight = maxHeight'  			Border = border  		};  		ImageTransforms.Add (resizeTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (mode != "placeholder") {  	int width' height;  	TryParseDimension (parameters ["w"]' out width);  	TryParseDimension (parameters ["h"]' out height);  	var size = string.IsNullOrEmpty (parameters ["size"]) ? "" : parameters ["size"];  	switch (size) {  	case "xxs":  		width = 16;  		height = 16;  		break;  	case "xs":  		width = 32;  		height = 32;  		break;  	case "s":  		width = 50;  		height = 50;  		break;  	case "l":  		width = 64;  		height = 64;  		break;  	case "xl":  		width = 128;  		height = 128;  		break;  	case "xxl":  		width = 256;  		height = 256;  		break;  	}  	if (mode == "profilepic") {  		resizeMode = ImageResizeMode.FitSquare;  		if (width > 0 && height > 0 && width != height) {  			resizeMode = ImageResizeMode.Fill;  		}  	}  	if (width > 0 || height > 0) {  		var resizeTrans = new ImageResizeTransform {  			Mode = resizeMode'  			BackColor = backColor'  			Width = width'  			Height = height'  			MaxWidth = maxWidth'  			MaxHeight = maxHeight'  			Border = border  		};  		ImageTransforms.Add (resizeTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (mode != "placeholder") {  	int width' height;  	TryParseDimension (parameters ["w"]' out width);  	TryParseDimension (parameters ["h"]' out height);  	var size = string.IsNullOrEmpty (parameters ["size"]) ? "" : parameters ["size"];  	switch (size) {  	case "xxs":  		width = 16;  		height = 16;  		break;  	case "xs":  		width = 32;  		height = 32;  		break;  	case "s":  		width = 50;  		height = 50;  		break;  	case "l":  		width = 64;  		height = 64;  		break;  	case "xl":  		width = 128;  		height = 128;  		break;  	case "xxl":  		width = 256;  		height = 256;  		break;  	}  	if (mode == "profilepic") {  		resizeMode = ImageResizeMode.FitSquare;  		if (width > 0 && height > 0 && width != height) {  			resizeMode = ImageResizeMode.Fill;  		}  	}  	if (width > 0 || height > 0) {  		var resizeTrans = new ImageResizeTransform {  			Mode = resizeMode'  			BackColor = backColor'  			Width = width'  			Height = height'  			MaxWidth = maxWidth'  			MaxHeight = maxHeight'  			Border = border  		};  		ImageTransforms.Add (resizeTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (mode != "placeholder") {  	int width' height;  	TryParseDimension (parameters ["w"]' out width);  	TryParseDimension (parameters ["h"]' out height);  	var size = string.IsNullOrEmpty (parameters ["size"]) ? "" : parameters ["size"];  	switch (size) {  	case "xxs":  		width = 16;  		height = 16;  		break;  	case "xs":  		width = 32;  		height = 32;  		break;  	case "s":  		width = 50;  		height = 50;  		break;  	case "l":  		width = 64;  		height = 64;  		break;  	case "xl":  		width = 128;  		height = 128;  		break;  	case "xxl":  		width = 256;  		height = 256;  		break;  	}  	if (mode == "profilepic") {  		resizeMode = ImageResizeMode.FitSquare;  		if (width > 0 && height > 0 && width != height) {  			resizeMode = ImageResizeMode.Fill;  		}  	}  	if (width > 0 || height > 0) {  		var resizeTrans = new ImageResizeTransform {  			Mode = resizeMode'  			BackColor = backColor'  			Width = width'  			Height = height'  			MaxWidth = maxWidth'  			MaxHeight = maxHeight'  			Border = border  		};  		ImageTransforms.Add (resizeTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (mode != "placeholder") {  	int width' height;  	TryParseDimension (parameters ["w"]' out width);  	TryParseDimension (parameters ["h"]' out height);  	var size = string.IsNullOrEmpty (parameters ["size"]) ? "" : parameters ["size"];  	switch (size) {  	case "xxs":  		width = 16;  		height = 16;  		break;  	case "xs":  		width = 32;  		height = 32;  		break;  	case "s":  		width = 50;  		height = 50;  		break;  	case "l":  		width = 64;  		height = 64;  		break;  	case "xl":  		width = 128;  		height = 128;  		break;  	case "xxl":  		width = 256;  		height = 256;  		break;  	}  	if (mode == "profilepic") {  		resizeMode = ImageResizeMode.FitSquare;  		if (width > 0 && height > 0 && width != height) {  			resizeMode = ImageResizeMode.Fill;  		}  	}  	if (width > 0 || height > 0) {  		var resizeTrans = new ImageResizeTransform {  			Mode = resizeMode'  			BackColor = backColor'  			Width = width'  			Height = height'  			MaxWidth = maxWidth'  			MaxHeight = maxHeight'  			Border = border  		};  		ImageTransforms.Add (resizeTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (mode != "placeholder") {  	int width' height;  	TryParseDimension (parameters ["w"]' out width);  	TryParseDimension (parameters ["h"]' out height);  	var size = string.IsNullOrEmpty (parameters ["size"]) ? "" : parameters ["size"];  	switch (size) {  	case "xxs":  		width = 16;  		height = 16;  		break;  	case "xs":  		width = 32;  		height = 32;  		break;  	case "s":  		width = 50;  		height = 50;  		break;  	case "l":  		width = 64;  		height = 64;  		break;  	case "xl":  		width = 128;  		height = 128;  		break;  	case "xxl":  		width = 256;  		height = 256;  		break;  	}  	if (mode == "profilepic") {  		resizeMode = ImageResizeMode.FitSquare;  		if (width > 0 && height > 0 && width != height) {  			resizeMode = ImageResizeMode.Fill;  		}  	}  	if (width > 0 || height > 0) {  		var resizeTrans = new ImageResizeTransform {  			Mode = resizeMode'  			BackColor = backColor'  			Width = width'  			Height = height'  			MaxWidth = maxWidth'  			MaxHeight = maxHeight'  			Border = border  		};  		ImageTransforms.Add (resizeTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: switch (size) {  case "xxs":  	width = 16;  	height = 16;  	break;  case "xs":  	width = 32;  	height = 32;  	break;  case "s":  	width = 50;  	height = 50;  	break;  case "l":  	width = 64;  	height = 64;  	break;  case "xl":  	width = 128;  	height = 128;  	break;  case "xxl":  	width = 256;  	height = 256;  	break;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: switch (size) {  case "xxs":  	width = 16;  	height = 16;  	break;  case "xs":  	width = 32;  	height = 32;  	break;  case "s":  	width = 50;  	height = 50;  	break;  case "l":  	width = 64;  	height = 64;  	break;  case "xl":  	width = 128;  	height = 128;  	break;  case "xxl":  	width = 256;  	height = 256;  	break;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: switch (size) {  case "xxs":  	width = 16;  	height = 16;  	break;  case "xs":  	width = 32;  	height = 32;  	break;  case "s":  	width = 50;  	height = 50;  	break;  case "l":  	width = 64;  	height = 64;  	break;  case "xl":  	width = 128;  	height = 128;  	break;  case "xxl":  	width = 256;  	height = 256;  	break;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: switch (size) {  case "xxs":  	width = 16;  	height = 16;  	break;  case "xs":  	width = 32;  	height = 32;  	break;  case "s":  	width = 50;  	height = 50;  	break;  case "l":  	width = 64;  	height = 64;  	break;  case "xl":  	width = 128;  	height = 128;  	break;  case "xxl":  	width = 256;  	height = 256;  	break;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: switch (size) {  case "xxs":  	width = 16;  	height = 16;  	break;  case "xs":  	width = 32;  	height = 32;  	break;  case "s":  	width = 50;  	height = 50;  	break;  case "l":  	width = 64;  	height = 64;  	break;  case "xl":  	width = 128;  	height = 128;  	break;  case "xxl":  	width = 256;  	height = 256;  	break;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: switch (size) {  case "xxs":  	width = 16;  	height = 16;  	break;  case "xs":  	width = 32;  	height = 32;  	break;  case "s":  	width = 50;  	height = 50;  	break;  case "l":  	width = 64;  	height = 64;  	break;  case "xl":  	width = 128;  	height = 128;  	break;  case "xxl":  	width = 256;  	height = 256;  	break;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: switch (size) {  case "xxs":  	width = 16;  	height = 16;  	break;  case "xs":  	width = 32;  	height = 32;  	break;  case "s":  	width = 50;  	height = 50;  	break;  case "l":  	width = 64;  	height = 64;  	break;  case "xl":  	width = 128;  	height = 128;  	break;  case "xxl":  	width = 256;  	height = 256;  	break;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: switch (size) {  case "xxs":  	width = 16;  	height = 16;  	break;  case "xs":  	width = 32;  	height = 32;  	break;  case "s":  	width = 50;  	height = 50;  	break;  case "l":  	width = 64;  	height = 64;  	break;  case "xl":  	width = 128;  	height = 128;  	break;  case "xxl":  	width = 256;  	height = 256;  	break;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: switch (size) {  case "xxs":  	width = 16;  	height = 16;  	break;  case "xs":  	width = 32;  	height = 32;  	break;  case "s":  	width = 50;  	height = 50;  	break;  case "l":  	width = 64;  	height = 64;  	break;  case "xl":  	width = 128;  	height = 128;  	break;  case "xxl":  	width = 256;  	height = 256;  	break;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: switch (size) {  case "xxs":  	width = 16;  	height = 16;  	break;  case "xs":  	width = 32;  	height = 32;  	break;  case "s":  	width = 50;  	height = 50;  	break;  case "l":  	width = 64;  	height = 64;  	break;  case "xl":  	width = 128;  	height = 128;  	break;  case "xxl":  	width = 256;  	height = 256;  	break;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: switch (size) {  case "xxs":  	width = 16;  	height = 16;  	break;  case "xs":  	width = 32;  	height = 32;  	break;  case "s":  	width = 50;  	height = 50;  	break;  case "l":  	width = 64;  	height = 64;  	break;  case "xl":  	width = 128;  	height = 128;  	break;  case "xxl":  	width = 256;  	height = 256;  	break;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: switch (size) {  case "xxs":  	width = 16;  	height = 16;  	break;  case "xs":  	width = 32;  	height = 32;  	break;  case "s":  	width = 50;  	height = 50;  	break;  case "l":  	width = 64;  	height = 64;  	break;  case "xl":  	width = 128;  	height = 128;  	break;  case "xxl":  	width = 256;  	height = 256;  	break;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: width = 16;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: height = 16;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: width = 32;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: height = 32;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: width = 50;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: height = 50;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: width = 64;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: height = 64;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: width = 128;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: height = 128;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: width = 256;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: height = 256;  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (!string.IsNullOrEmpty (parameters ["Gamma"])) {  	var gammaTrans = new ImageGammaTransform ();  	double gamma;  	if (double.TryParse (parameters ["Gamma"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out gamma) && gamma >= 0.2 && gamma <= 5) {  		gammaTrans.Gamma = gamma;  		ImageTransforms.Add (gammaTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (!string.IsNullOrEmpty (parameters ["Gamma"])) {  	var gammaTrans = new ImageGammaTransform ();  	double gamma;  	if (double.TryParse (parameters ["Gamma"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out gamma) && gamma >= 0.2 && gamma <= 5) {  		gammaTrans.Gamma = gamma;  		ImageTransforms.Add (gammaTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (double.TryParse (parameters ["Gamma"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out gamma) && gamma >= 0.2 && gamma <= 5) {  	gammaTrans.Gamma = gamma;  	ImageTransforms.Add (gammaTrans);  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (double.TryParse (parameters ["Gamma"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out gamma) && gamma >= 0.2 && gamma <= 5) {  	gammaTrans.Gamma = gamma;  	ImageTransforms.Add (gammaTrans);  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (!string.IsNullOrEmpty (parameters ["Contrast"])) {  	var contrastTrans = new ImageContrastTransform ();  	double contrast;  	if (double.TryParse (parameters ["Contrast"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out contrast) && (contrast >= -100 && contrast <= 100)) {  		contrastTrans.Contrast = contrast;  		ImageTransforms.Add (contrastTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (!string.IsNullOrEmpty (parameters ["Contrast"])) {  	var contrastTrans = new ImageContrastTransform ();  	double contrast;  	if (double.TryParse (parameters ["Contrast"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out contrast) && (contrast >= -100 && contrast <= 100)) {  		contrastTrans.Contrast = contrast;  		ImageTransforms.Add (contrastTrans);  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (double.TryParse (parameters ["Contrast"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out contrast) && (contrast >= -100 && contrast <= 100)) {  	contrastTrans.Contrast = contrast;  	ImageTransforms.Add (contrastTrans);  }  
Magic Number,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following statement contains a magic number: if (double.TryParse (parameters ["Contrast"]' NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out contrast) && (contrast >= -100 && contrast <= 100)) {  	contrastTrans.Contrast = contrast;  	ImageTransforms.Add (contrastTrans);  }  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,ImageHandlerInternal,The following statement contains a magic number: ImageCompression = 95;  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: if (!AllowStandalone && context.Request.UrlReferrer == null && !context.Request.IsLocal) {  	string message = "Not allowed to use standalone";  	if (LogSecurity) {  		EventLogController logController = new EventLogController ();  		var logInfo = new LogInfo {  			LogUserID = PortalSettings.Current.UserId'  			LogPortalID = PortalSettings.Current.PortalId'  			LogTypeKey = EventLogController.EventLogType.ADMIN_ALERT.ToString ()  		};  		logInfo.AddProperty ("DnnImageHandler"' message);  		logInfo.AddProperty ("IP"' ipAddress);  		logController.AddLog (logInfo);  	}  	context.Response.StatusCode = 403;  	context.Response.StatusDescription = message;  	context.Response.End ();  	return;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: context.Response.StatusCode = 403;  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: if (!string.IsNullOrEmpty (AllowedDomains [0]) && context.Request.UrlReferrer != null && context.Request.UrlReferrer.Host.ToLower () != context.Request.Url.Host.ToLower ()) {  	bool allowed = false;  	string allowedDomains = "";  	foreach (string allowedDomain in AllowedDomains) {  		if (!string.IsNullOrEmpty (allowedDomain)) {  			allowedDomains += allowedDomain + "'";  			if (context.Request.UrlReferrer.Host.ToLower ().Contains (allowedDomain.ToLower ()))  				allowed = true;  		}  	}  	if (!allowed) {  		string message;  		if (LogSecurity) {  			EventLogController logController = new EventLogController ();  			var logInfo = new LogInfo {  				LogUserID = PortalSettings.Current.UserId'  				LogPortalID = PortalSettings.Current.PortalId'  				LogTypeKey = EventLogController.EventLogType.ADMIN_ALERT.ToString ()  			};  			logInfo.AddProperty ("DnnImageHandler"' message);  			logInfo.AddProperty ("IP"' ipAddress);  			logInfo.AddProperty ("AllowedDomains"' allowedDomains);  			logController.AddLog (logInfo);  		}  		context.Response.StatusCode = 403;  		context.Response.StatusDescription = "Forbidden";  		context.Response.End ();  		return;  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: if (!allowed) {  	string message;  	if (LogSecurity) {  		EventLogController logController = new EventLogController ();  		var logInfo = new LogInfo {  			LogUserID = PortalSettings.Current.UserId'  			LogPortalID = PortalSettings.Current.PortalId'  			LogTypeKey = EventLogController.EventLogType.ADMIN_ALERT.ToString ()  		};  		logInfo.AddProperty ("DnnImageHandler"' message);  		logInfo.AddProperty ("IP"' ipAddress);  		logInfo.AddProperty ("AllowedDomains"' allowedDomains);  		logController.AddLog (logInfo);  	}  	context.Response.StatusCode = 403;  	context.Response.StatusDescription = "Forbidden";  	context.Response.End ();  	return;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: context.Response.StatusCode = 403;  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: if (EnableClientCache) {  	if (!string.IsNullOrEmpty (context.Request.Headers ["If-Modified-Since"]) && !string.IsNullOrEmpty (context.Request.Headers ["If-None-Match"])) {  		var provider = CultureInfo.InvariantCulture;  		var lastMod = DateTime.ParseExact (context.Request.Headers ["If-Modified-Since"]' "r"' provider).ToLocalTime ();  		var etag = context.Request.Headers ["If-None-Match"];  		if (lastMod + ClientCacheExpiration > DateTime_Now && etag == cacheId) {  			context.Response.StatusCode = 304;  			context.Response.StatusDescription = "Not Modified";  			context.Response.End ();  			return;  		}  	}  	cachePolicy.SetCacheability (HttpCacheability.Public);  	cachePolicy.SetLastModified (DateTime_Now);  	cachePolicy.SetExpires (DateTime_Now + ClientCacheExpiration);  	cachePolicy.SetETag (cacheId);  }  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: if (!string.IsNullOrEmpty (context.Request.Headers ["If-Modified-Since"]) && !string.IsNullOrEmpty (context.Request.Headers ["If-None-Match"])) {  	var provider = CultureInfo.InvariantCulture;  	var lastMod = DateTime.ParseExact (context.Request.Headers ["If-Modified-Since"]' "r"' provider).ToLocalTime ();  	var etag = context.Request.Headers ["If-None-Match"];  	if (lastMod + ClientCacheExpiration > DateTime_Now && etag == cacheId) {  		context.Response.StatusCode = 304;  		context.Response.StatusDescription = "Not Modified";  		context.Response.End ();  		return;  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: if (lastMod + ClientCacheExpiration > DateTime_Now && etag == cacheId) {  	context.Response.StatusCode = 304;  	context.Response.StatusDescription = "Not Modified";  	context.Response.End ();  	return;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: context.Response.StatusCode = 304;  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: if (EnableIPCount) {  	if (!IPCount.CheckIp (ipAddress)) {  		string message = "Too many requests";  		if (LogSecurity) {  			EventLogController logController = new EventLogController ();  			var logInfo = new LogInfo {  				LogUserID = PortalSettings.Current.UserId'  				LogPortalID = PortalSettings.Current.PortalId'  				LogTypeKey = EventLogController.EventLogType.ADMIN_ALERT.ToString ()  			};  			logInfo.AddProperty ("DnnImageHandler"' message);  			logInfo.AddProperty ("IP"' ipAddress);  			logController.AddLog (logInfo);  		}  		context.Response.StatusCode = 429;  		context.Response.StatusDescription = message;  		context.Response.End ();  		return;  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: if (!IPCount.CheckIp (ipAddress)) {  	string message = "Too many requests";  	if (LogSecurity) {  		EventLogController logController = new EventLogController ();  		var logInfo = new LogInfo {  			LogUserID = PortalSettings.Current.UserId'  			LogPortalID = PortalSettings.Current.PortalId'  			LogTypeKey = EventLogController.EventLogType.ADMIN_ALERT.ToString ()  		};  		logInfo.AddProperty ("DnnImageHandler"' message);  		logInfo.AddProperty ("IP"' ipAddress);  		logController.AddLog (logInfo);  	}  	context.Response.StatusCode = 429;  	context.Response.StatusDescription = message;  	context.Response.End ();  	return;  }  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,HandleImageRequest,The following statement contains a magic number: context.Response.StatusCode = 429;  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,RenderImage,The following statement contains a magic number: try {  	if (ContentType == ImageFormat.Gif) {  		var quantizer = new OctreeQuantizer (255' 8);  		using (var quantized = quantizer.Quantize (image)) {  			quantized.Save (outStream' ImageFormat.Gif);  		}  	} else {  		var eps = new EncoderParameters (1) {  			Param =  {  				 = new EncoderParameter (System.Drawing.Imaging.Encoder.Quality' ImageCompression)  			}  		};  		var ici = GetEncoderInfo (GetImageMimeType (ContentType));  		image.Save (outStream' ici' eps);  	}  } finally {  	image.Dispose ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,RenderImage,The following statement contains a magic number: try {  	if (ContentType == ImageFormat.Gif) {  		var quantizer = new OctreeQuantizer (255' 8);  		using (var quantized = quantizer.Quantize (image)) {  			quantized.Save (outStream' ImageFormat.Gif);  		}  	} else {  		var eps = new EncoderParameters (1) {  			Param =  {  				 = new EncoderParameter (System.Drawing.Imaging.Encoder.Quality' ImageCompression)  			}  		};  		var ici = GetEncoderInfo (GetImageMimeType (ContentType));  		image.Save (outStream' ici' eps);  	}  } finally {  	image.Dispose ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,RenderImage,The following statement contains a magic number: if (ContentType == ImageFormat.Gif) {  	var quantizer = new OctreeQuantizer (255' 8);  	using (var quantized = quantizer.Quantize (image)) {  		quantized.Save (outStream' ImageFormat.Gif);  	}  } else {  	var eps = new EncoderParameters (1) {  		Param =  {  			 = new EncoderParameter (System.Drawing.Imaging.Encoder.Quality' ImageCompression)  		}  	};  	var ici = GetEncoderInfo (GetImageMimeType (ContentType));  	image.Save (outStream' ici' eps);  }  
Magic Number,DotNetNuke.Services.GeneratedImage,ImageHandlerInternal,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageHandlerInternal.cs,RenderImage,The following statement contains a magic number: if (ContentType == ImageFormat.Gif) {  	var quantizer = new OctreeQuantizer (255' 8);  	using (var quantized = quantizer.Quantize (image)) {  		quantized.Save (outStream' ImageFormat.Gif);  	}  } else {  	var eps = new EncoderParameters (1) {  		Param =  {  			 = new EncoderParameter (System.Drawing.Imaging.Encoder.Quality' ImageCompression)  		}  	};  	var ici = GetEncoderInfo (GetImageMimeType (ContentType));  	image.Save (outStream' ici' eps);  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (Brightness < -255)  	Brightness = -255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (Brightness < -255)  	Brightness = -255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: Brightness = -255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (Brightness > 255)  	Brightness = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (Brightness > 255)  	Brightness = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: Brightness = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		int cR = c.R + Brightness;  		int cG = c.G + Brightness;  		int cB = c.B + Brightness;  		if (cR < 0)  			cR = 1;  		if (cR > 255)  			cR = 255;  		if (cG < 0)  			cG = 1;  		if (cG > 255)  			cG = 255;  		if (cB < 0)  			cB = 1;  		if (cB > 255)  			cB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		int cR = c.R + Brightness;  		int cG = c.G + Brightness;  		int cB = c.B + Brightness;  		if (cR < 0)  			cR = 1;  		if (cR > 255)  			cR = 255;  		if (cG < 0)  			cG = 1;  		if (cG > 255)  			cG = 255;  		if (cB < 0)  			cB = 1;  		if (cB > 255)  			cB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		int cR = c.R + Brightness;  		int cG = c.G + Brightness;  		int cB = c.B + Brightness;  		if (cR < 0)  			cR = 1;  		if (cR > 255)  			cR = 255;  		if (cG < 0)  			cG = 1;  		if (cG > 255)  			cG = 255;  		if (cB < 0)  			cB = 1;  		if (cB > 255)  			cB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		int cR = c.R + Brightness;  		int cG = c.G + Brightness;  		int cB = c.B + Brightness;  		if (cR < 0)  			cR = 1;  		if (cR > 255)  			cR = 255;  		if (cG < 0)  			cG = 1;  		if (cG > 255)  			cG = 255;  		if (cB < 0)  			cB = 1;  		if (cB > 255)  			cB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		int cR = c.R + Brightness;  		int cG = c.G + Brightness;  		int cB = c.B + Brightness;  		if (cR < 0)  			cR = 1;  		if (cR > 255)  			cR = 255;  		if (cG < 0)  			cG = 1;  		if (cG > 255)  			cG = 255;  		if (cB < 0)  			cB = 1;  		if (cB > 255)  			cB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		int cR = c.R + Brightness;  		int cG = c.G + Brightness;  		int cB = c.B + Brightness;  		if (cR < 0)  			cR = 1;  		if (cR > 255)  			cR = 255;  		if (cG < 0)  			cG = 1;  		if (cG > 255)  			cG = 255;  		if (cB < 0)  			cB = 1;  		if (cB > 255)  			cB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	int cR = c.R + Brightness;  	int cG = c.G + Brightness;  	int cB = c.B + Brightness;  	if (cR < 0)  		cR = 1;  	if (cR > 255)  		cR = 255;  	if (cG < 0)  		cG = 1;  	if (cG > 255)  		cG = 255;  	if (cB < 0)  		cB = 1;  	if (cB > 255)  		cB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	int cR = c.R + Brightness;  	int cG = c.G + Brightness;  	int cB = c.B + Brightness;  	if (cR < 0)  		cR = 1;  	if (cR > 255)  		cR = 255;  	if (cG < 0)  		cG = 1;  	if (cG > 255)  		cG = 255;  	if (cB < 0)  		cB = 1;  	if (cB > 255)  		cB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	int cR = c.R + Brightness;  	int cG = c.G + Brightness;  	int cB = c.B + Brightness;  	if (cR < 0)  		cR = 1;  	if (cR > 255)  		cR = 255;  	if (cG < 0)  		cG = 1;  	if (cG > 255)  		cG = 255;  	if (cB < 0)  		cB = 1;  	if (cB > 255)  		cB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	int cR = c.R + Brightness;  	int cG = c.G + Brightness;  	int cB = c.B + Brightness;  	if (cR < 0)  		cR = 1;  	if (cR > 255)  		cR = 255;  	if (cG < 0)  		cG = 1;  	if (cG > 255)  		cG = 255;  	if (cB < 0)  		cB = 1;  	if (cB > 255)  		cB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	int cR = c.R + Brightness;  	int cG = c.G + Brightness;  	int cB = c.B + Brightness;  	if (cR < 0)  		cR = 1;  	if (cR > 255)  		cR = 255;  	if (cG < 0)  		cG = 1;  	if (cG > 255)  		cG = 255;  	if (cB < 0)  		cB = 1;  	if (cB > 255)  		cB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	int cR = c.R + Brightness;  	int cG = c.G + Brightness;  	int cB = c.B + Brightness;  	if (cR < 0)  		cR = 1;  	if (cR > 255)  		cR = 255;  	if (cG < 0)  		cG = 1;  	if (cG > 255)  		cG = 255;  	if (cB < 0)  		cB = 1;  	if (cB > 255)  		cB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)cR' (byte)cG' (byte)cB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (cR > 255)  	cR = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (cR > 255)  	cR = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: cR = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (cG > 255)  	cG = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (cG > 255)  	cG = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: cG = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (cB > 255)  	cB = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: if (cB > 255)  	cB = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageBrightnessTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageBrightnessTransform.cs,ProcessImage,The following statement contains a magic number: cB = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (Contrast < -100)  	Contrast = -100;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (Contrast < -100)  	Contrast = -100;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: Contrast = -100;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (Contrast > 100)  	Contrast = 100;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (Contrast > 100)  	Contrast = 100;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: Contrast = 100;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: Contrast = (100.0 + Contrast) / 100.0;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: Contrast = (100.0 + Contrast) / 100.0;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		double pR = c.R / 255.0;  		pR -= 0.5;  		pR *= Contrast;  		pR += 0.5;  		pR *= 255;  		if (pR < 0)  			pR = 0;  		if (pR > 255)  			pR = 255;  		double pG = c.G / 255.0;  		pG -= 0.5;  		pG *= Contrast;  		pG += 0.5;  		pG *= 255;  		if (pG < 0)  			pG = 0;  		if (pG > 255)  			pG = 255;  		double pB = c.B / 255.0;  		pB -= 0.5;  		pB *= Contrast;  		pB += 0.5;  		pB *= 255;  		if (pB < 0)  			pB = 0;  		if (pB > 255)  			pB = 255;  		bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	double pR = c.R / 255.0;  	pR -= 0.5;  	pR *= Contrast;  	pR += 0.5;  	pR *= 255;  	if (pR < 0)  		pR = 0;  	if (pR > 255)  		pR = 255;  	double pG = c.G / 255.0;  	pG -= 0.5;  	pG *= Contrast;  	pG += 0.5;  	pG *= 255;  	if (pG < 0)  		pG = 0;  	if (pG > 255)  		pG = 255;  	double pB = c.B / 255.0;  	pB -= 0.5;  	pB *= Contrast;  	pB += 0.5;  	pB *= 255;  	if (pB < 0)  		pB = 0;  	if (pB > 255)  		pB = 255;  	bmap.SetPixel (i' j' Color.FromArgb ((byte)pR' (byte)pG' (byte)pB));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pR -= 0.5;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pR += 0.5;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pR *= 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (pR > 255)  	pR = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (pR > 255)  	pR = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pR = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pG -= 0.5;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pG += 0.5;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pG *= 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (pG > 255)  	pG = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (pG > 255)  	pG = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pG = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pB -= 0.5;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pB += 0.5;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pB *= 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (pB > 255)  	pB = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: if (pB > 255)  	pB = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageContrastTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageContrastTransform.cs,ProcessImage,The following statement contains a magic number: pB = 255;  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGammaTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: for (var i = 0; i < 256; ++i) {  	gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGammaTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: for (var i = 0; i < 256; ++i) {  	gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGammaTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: for (var i = 0; i < 256; ++i) {  	gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGammaTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: for (var i = 0; i < 256; ++i) {  	gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGammaTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: for (var i = 0; i < 256; ++i) {  	gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGammaTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGammaTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGammaTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGammaTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGammaTransform.cs,ProcessImage,The following statement contains a magic number: gammaArray [i] = (byte)Math.Min (255' (int)((255.0 * Math.Pow (i / 255.0' 1.0 / Gamma)) + 0.5));  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGreyScaleTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGreyscaleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		byte gray = (byte)(.299 * c.R + .587 * c.G + .114 * c.B);  		bmap.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGreyScaleTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGreyscaleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		byte gray = (byte)(.299 * c.R + .587 * c.G + .114 * c.B);  		bmap.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGreyScaleTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGreyscaleTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		byte gray = (byte)(.299 * c.R + .587 * c.G + .114 * c.B);  		bmap.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGreyScaleTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGreyscaleTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	byte gray = (byte)(.299 * c.R + .587 * c.G + .114 * c.B);  	bmap.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGreyScaleTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGreyscaleTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	byte gray = (byte)(.299 * c.R + .587 * c.G + .114 * c.B);  	bmap.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageGreyScaleTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageGreyscaleTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	byte gray = (byte)(.299 * c.R + .587 * c.G + .114 * c.B);  	bmap.SetPixel (i' j' Color.FromArgb (gray' gray' gray));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageInvertTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageInvertTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageInvertTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: for (int i = 0; i < bmap.Width; i++) {  	for (int j = 0; j < bmap.Height; j++) {  		c = bmap.GetPixel (i' j);  		bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  	}  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageInvertTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageInvertTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageInvertTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: for (int j = 0; j < bmap.Height; j++) {  	c = bmap.GetPixel (i' j);  	bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  }  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageInvertTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageInvertTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageInvertTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageInvertTransform.cs,ProcessImage,The following statement contains a magic number: bmap.SetPixel (i' j' Color.FromArgb (255 - c.R' 255 - c.G' 255 - c.B));  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageResizeTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageResizeTransform.cs,FitImage,The following statement contains a magic number: graphics.FillRectangle (new SolidBrush (BackColor)' new Rectangle (0' 0' resizeWidth + 2 * _border' resizeHeight + 2 * _border));  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageResizeTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageResizeTransform.cs,FitImage,The following statement contains a magic number: graphics.FillRectangle (new SolidBrush (BackColor)' new Rectangle (0' 0' resizeWidth + 2 * _border' resizeHeight + 2 * _border));  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageResizeTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageResizeTransform.cs,FitSquareImage,The following statement contains a magic number: graphics.FillRectangle (new SolidBrush (BackColor)' new Rectangle (0' 0' newDim + 2 * _border' newDim + 2 * _border));  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageResizeTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageResizeTransform.cs,FitSquareImage,The following statement contains a magic number: graphics.FillRectangle (new SolidBrush (BackColor)' new Rectangle (0' 0' newDim + 2 * _border' newDim + 2 * _border));  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageResizeTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageResizeTransform.cs,FitSquareImage,The following statement contains a magic number: graphics.DrawImage (img' (newDim - resizeWidth) / 2 + _border' (newDim - resizeHeight) / 2 + _border' resizeWidth' resizeHeight);  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageResizeTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageResizeTransform.cs,FitSquareImage,The following statement contains a magic number: graphics.DrawImage (img' (newDim - resizeWidth) / 2 + _border' (newDim - resizeHeight) / 2 + _border' resizeWidth' resizeHeight);  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageResizeTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageResizeTransform.cs,CropImage,The following statement contains a magic number: graphics.DrawImage (img' (Width - resizeWidth) / 2' (Height - resizeHeight) / 2' resizeWidth' resizeHeight);  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageResizeTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageResizeTransform.cs,CropImage,The following statement contains a magic number: graphics.DrawImage (img' (Width - resizeWidth) / 2' (Height - resizeHeight) / 2' resizeWidth' resizeHeight);  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageResizeTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageResizeTransform.cs,FillImage,The following statement contains a magic number: graphics.DrawImage (img' (Width - resizeWidth) / 2' (Height - resizeHeight) / 2' resizeWidth' resizeHeight);  
Magic Number,DotNetNuke.Services.GeneratedImage.FilterTransform,ImageResizeTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\FilterTransform\ImageResizeTransform.cs,FillImage,The following statement contains a magic number: graphics.DrawImage (img' (Width - resizeWidth) / 2' (Height - resizeHeight) / 2' resizeWidth' resizeHeight);  
Magic Number,DotNetNuke.Services.GeneratedImage.ImageQuantization,GrayscaleQuantizer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageQuantization\GrayscaleQuantizer.cs,GrayscaleQuantizer,The following statement contains a magic number: _colors = new Color[256];  
Magic Number,DotNetNuke.Services.GeneratedImage.ImageQuantization,OctreeQuantizer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageQuantization\OctreeQuantizer.cs,OctreeQuantizer,The following statement contains a magic number: if (maxColors > 255)  	throw new ArgumentOutOfRangeException (nameof (maxColors)' maxColors' "The number of colors should be less than 256");  
Magic Number,DotNetNuke.Services.GeneratedImage.ImageQuantization,OctreeQuantizer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\ImageQuantization\OctreeQuantizer.cs,OctreeQuantizer,The following statement contains a magic number: if ((maxColorBits < 1) | (maxColorBits > 8))  	throw new ArgumentOutOfRangeException (nameof (maxColorBits)' maxColorBits' "This should be between 1 and 8");  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: using (var objGraphics = Graphics.FromImage (bitmap)) {  	objGraphics.Clear (Color.White);  	objGraphics.SmoothingMode = SmoothingMode.AntiAlias;  	objGraphics.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  	objGraphics.FillRectangle (backColorBrush' 0' 0' Width' Height);  	objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  	var fontSize = 13;  	if (Width < 101)  		fontSize = 8;  	else if (Width < 151)  		fontSize = 10;  	else if (Width < 201)  		fontSize = 12;  	else if (Width < 301)  		fontSize = 14;  	else  		fontSize = 24;  	var font = new Font ("Arial"' fontSize' FontStyle.Bold);  	var stringFormat = new StringFormat {  		Alignment = StringAlignment.Center'  		LineAlignment = StringAlignment.Center  	};  	var rectangle = new Rectangle (5' 5' Width - 10' Height - 10);  	objGraphics.DrawString (text' font' colorBrush' rectangle' stringFormat);  	objGraphics.Flush ();  }  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: objGraphics.DrawRectangle (colorPen' 1' 1' Width - 3' Height - 3);  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 101)  	fontSize = 8;  else if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: fontSize = 8;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 151)  	fontSize = 10;  else if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: fontSize = 10;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 201)  	fontSize = 12;  else if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: fontSize = 12;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: if (Width < 301)  	fontSize = 14;  else  	fontSize = 24;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: fontSize = 14;  
Magic Number,DotNetNuke.Services.GeneratedImage.StartTransform,PlaceholderTransform,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\StartTransform\PlaceHolderTransform.cs,ProcessImage,The following statement contains a magic number: fontSize = 24;  
Magic Number,DotNetNuke.Services.Installer.Installers,JavaScriptFileInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\JavaScriptFileInstaller.cs,ReadCustomManifest,The following statement contains a magic number: if (libraryNav != null) {  	BasePath = String.Format ("Resources\\Libraries\\{0}\\{1}"' libraryNav.Value' Globals.FormatVersion (Package.Version' "00"' 3' "_"));  }  
Magic Number,DotNetNuke.Services.Installer.Installers,JavaScriptFileInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\JavaScriptFileInstaller.cs,ReadCustomManifest,The following statement contains a magic number: BasePath = String.Format ("Resources\\Libraries\\{0}\\{1}"' libraryNav.Value' Globals.FormatVersion (Package.Version' "00"' 3' "_"));  
Magic Number,DotNetNuke.Services.Installer.Installers,AssemblyInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AssemblyInstaller.cs,InstallFile,The following statement contains a magic number: if (file.Action == "UnRegister") {  	DeleteFile (file);  } else {  	//Attempt to register assembly this will return False if the assembly exists and true if it does not or is older  	int returnCode = DataProvider.Instance ().RegisterAssembly (Package.PackageID' file.Name' file.Version.ToString (3));  	switch (returnCode) {  	case 0:  		//Assembly Does Not Exist  		Log.AddInfo (Util.ASSEMBLY_Added + " - " + file.FullName);  		break;  	case 1:  		//Older version of Assembly Exists  		Log.AddInfo (Util.ASSEMBLY_Updated + " - " + file.FullName);  		break;  	case 2:  	case 3:  		//Assembly already Registered  		Log.AddInfo (Util.ASSEMBLY_Registered + " - " + file.FullName);  		break;  	}  	//If assembly not registered' is newer (or is the same version and we are in repair mode)  	if (returnCode < 2 || (returnCode == 2 && file.InstallerInfo.RepairInstall)) {  		//Call base class version to copy file to \bin  		bSuccess = base.InstallFile (file);  		AddOrUpdateBindingRedirect (file);  	}  }  
Magic Number,DotNetNuke.Services.Installer.Installers,AssemblyInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AssemblyInstaller.cs,InstallFile,The following statement contains a magic number: if (file.Action == "UnRegister") {  	DeleteFile (file);  } else {  	//Attempt to register assembly this will return False if the assembly exists and true if it does not or is older  	int returnCode = DataProvider.Instance ().RegisterAssembly (Package.PackageID' file.Name' file.Version.ToString (3));  	switch (returnCode) {  	case 0:  		//Assembly Does Not Exist  		Log.AddInfo (Util.ASSEMBLY_Added + " - " + file.FullName);  		break;  	case 1:  		//Older version of Assembly Exists  		Log.AddInfo (Util.ASSEMBLY_Updated + " - " + file.FullName);  		break;  	case 2:  	case 3:  		//Assembly already Registered  		Log.AddInfo (Util.ASSEMBLY_Registered + " - " + file.FullName);  		break;  	}  	//If assembly not registered' is newer (or is the same version and we are in repair mode)  	if (returnCode < 2 || (returnCode == 2 && file.InstallerInfo.RepairInstall)) {  		//Call base class version to copy file to \bin  		bSuccess = base.InstallFile (file);  		AddOrUpdateBindingRedirect (file);  	}  }  
Magic Number,DotNetNuke.Services.Installer.Installers,AssemblyInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AssemblyInstaller.cs,InstallFile,The following statement contains a magic number: if (file.Action == "UnRegister") {  	DeleteFile (file);  } else {  	//Attempt to register assembly this will return False if the assembly exists and true if it does not or is older  	int returnCode = DataProvider.Instance ().RegisterAssembly (Package.PackageID' file.Name' file.Version.ToString (3));  	switch (returnCode) {  	case 0:  		//Assembly Does Not Exist  		Log.AddInfo (Util.ASSEMBLY_Added + " - " + file.FullName);  		break;  	case 1:  		//Older version of Assembly Exists  		Log.AddInfo (Util.ASSEMBLY_Updated + " - " + file.FullName);  		break;  	case 2:  	case 3:  		//Assembly already Registered  		Log.AddInfo (Util.ASSEMBLY_Registered + " - " + file.FullName);  		break;  	}  	//If assembly not registered' is newer (or is the same version and we are in repair mode)  	if (returnCode < 2 || (returnCode == 2 && file.InstallerInfo.RepairInstall)) {  		//Call base class version to copy file to \bin  		bSuccess = base.InstallFile (file);  		AddOrUpdateBindingRedirect (file);  	}  }  
Magic Number,DotNetNuke.Services.Installer.Installers,AssemblyInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AssemblyInstaller.cs,InstallFile,The following statement contains a magic number: if (file.Action == "UnRegister") {  	DeleteFile (file);  } else {  	//Attempt to register assembly this will return False if the assembly exists and true if it does not or is older  	int returnCode = DataProvider.Instance ().RegisterAssembly (Package.PackageID' file.Name' file.Version.ToString (3));  	switch (returnCode) {  	case 0:  		//Assembly Does Not Exist  		Log.AddInfo (Util.ASSEMBLY_Added + " - " + file.FullName);  		break;  	case 1:  		//Older version of Assembly Exists  		Log.AddInfo (Util.ASSEMBLY_Updated + " - " + file.FullName);  		break;  	case 2:  	case 3:  		//Assembly already Registered  		Log.AddInfo (Util.ASSEMBLY_Registered + " - " + file.FullName);  		break;  	}  	//If assembly not registered' is newer (or is the same version and we are in repair mode)  	if (returnCode < 2 || (returnCode == 2 && file.InstallerInfo.RepairInstall)) {  		//Call base class version to copy file to \bin  		bSuccess = base.InstallFile (file);  		AddOrUpdateBindingRedirect (file);  	}  }  
Magic Number,DotNetNuke.Services.Installer.Installers,AssemblyInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AssemblyInstaller.cs,InstallFile,The following statement contains a magic number: if (file.Action == "UnRegister") {  	DeleteFile (file);  } else {  	//Attempt to register assembly this will return False if the assembly exists and true if it does not or is older  	int returnCode = DataProvider.Instance ().RegisterAssembly (Package.PackageID' file.Name' file.Version.ToString (3));  	switch (returnCode) {  	case 0:  		//Assembly Does Not Exist  		Log.AddInfo (Util.ASSEMBLY_Added + " - " + file.FullName);  		break;  	case 1:  		//Older version of Assembly Exists  		Log.AddInfo (Util.ASSEMBLY_Updated + " - " + file.FullName);  		break;  	case 2:  	case 3:  		//Assembly already Registered  		Log.AddInfo (Util.ASSEMBLY_Registered + " - " + file.FullName);  		break;  	}  	//If assembly not registered' is newer (or is the same version and we are in repair mode)  	if (returnCode < 2 || (returnCode == 2 && file.InstallerInfo.RepairInstall)) {  		//Call base class version to copy file to \bin  		bSuccess = base.InstallFile (file);  		AddOrUpdateBindingRedirect (file);  	}  }  
Magic Number,DotNetNuke.Services.Installer.Installers,AssemblyInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AssemblyInstaller.cs,InstallFile,The following statement contains a magic number: switch (returnCode) {  case 0:  	//Assembly Does Not Exist  	Log.AddInfo (Util.ASSEMBLY_Added + " - " + file.FullName);  	break;  case 1:  	//Older version of Assembly Exists  	Log.AddInfo (Util.ASSEMBLY_Updated + " - " + file.FullName);  	break;  case 2:  case 3:  	//Assembly already Registered  	Log.AddInfo (Util.ASSEMBLY_Registered + " - " + file.FullName);  	break;  }  
Magic Number,DotNetNuke.Services.Installer.Installers,AssemblyInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AssemblyInstaller.cs,InstallFile,The following statement contains a magic number: switch (returnCode) {  case 0:  	//Assembly Does Not Exist  	Log.AddInfo (Util.ASSEMBLY_Added + " - " + file.FullName);  	break;  case 1:  	//Older version of Assembly Exists  	Log.AddInfo (Util.ASSEMBLY_Updated + " - " + file.FullName);  	break;  case 2:  case 3:  	//Assembly already Registered  	Log.AddInfo (Util.ASSEMBLY_Registered + " - " + file.FullName);  	break;  }  
Magic Number,DotNetNuke.Services.Installer.Installers,AssemblyInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AssemblyInstaller.cs,InstallFile,The following statement contains a magic number: if (returnCode < 2 || (returnCode == 2 && file.InstallerInfo.RepairInstall)) {  	//Call base class version to copy file to \bin  	bSuccess = base.InstallFile (file);  	AddOrUpdateBindingRedirect (file);  }  
Magic Number,DotNetNuke.Services.Installer.Installers,AssemblyInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AssemblyInstaller.cs,InstallFile,The following statement contains a magic number: if (returnCode < 2 || (returnCode == 2 && file.InstallerInfo.RepairInstall)) {  	//Call base class version to copy file to \bin  	bSuccess = base.InstallFile (file);  	AddOrUpdateBindingRedirect (file);  }  
Magic Number,DotNetNuke.Services.Installer.Installers,CleanupInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\CleanupInstaller.cs,ProcessCleanupFile,The following statement contains a magic number: Log.AddInfo (string.Format (Util.CLEANUP_Processing' Version.ToString (3)));  
Magic Number,DotNetNuke.Services.Installer.Installers,CleanupInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\CleanupInstaller.cs,ProcessCleanupFile,The following statement contains a magic number: Log.AddInfo (string.Format (Util.CLEANUP_ProcessComplete' Version.ToString (3)));  
Magic Number,DotNetNuke.Services.Installer.Installers,ConfigInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ConfigInstaller.cs,Install,The following statement contains a magic number: try {  	if (string.IsNullOrEmpty (_FileName)) {  		//First backup the config file  		Util.BackupFile (TargetFile' PhysicalSitePath' Log);  		//Create an XmlDocument for the config file  		_TargetConfig = new XmlDocument ();  		TargetConfig.Load (Path.Combine (PhysicalSitePath' TargetFile.FullName));  		//Create XmlMerge instance from InstallConfig source  		var merge = new XmlMerge (new StringReader (InstallConfig)' Package.Version.ToString ()' Package.Name);  		//Update the Config file - Note that this method does not save the file - we will save it in Commit  		merge.UpdateConfig (TargetConfig);  		Completed = true;  		Log.AddInfo (Util.CONFIG_Updated + " - " + TargetFile.Name);  	} else {  		//Process external file  		string strConfigFile = Path.Combine (Package.InstallerInfo.TempInstallFolder' _FileName);  		if (File.Exists (strConfigFile)) {  			//Create XmlMerge instance from config file source  			using (var stream = File.OpenText (strConfigFile)) {  				_xmlMerge = new XmlMerge (stream' Package.Version.ToString (3)' Package.Name + " Install");  				//Process merge  				_xmlMerge.UpdateConfigs (false);  			}  			Completed = true;  			Log.AddInfo (Util.CONFIG_Updated);  		}  	}  } catch (Exception ex) {  	Log.AddFailure (Util.EXCEPTION + " - " + ex.Message);  }  
Magic Number,DotNetNuke.Services.Installer.Installers,ConfigInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ConfigInstaller.cs,Install,The following statement contains a magic number: if (string.IsNullOrEmpty (_FileName)) {  	//First backup the config file  	Util.BackupFile (TargetFile' PhysicalSitePath' Log);  	//Create an XmlDocument for the config file  	_TargetConfig = new XmlDocument ();  	TargetConfig.Load (Path.Combine (PhysicalSitePath' TargetFile.FullName));  	//Create XmlMerge instance from InstallConfig source  	var merge = new XmlMerge (new StringReader (InstallConfig)' Package.Version.ToString ()' Package.Name);  	//Update the Config file - Note that this method does not save the file - we will save it in Commit  	merge.UpdateConfig (TargetConfig);  	Completed = true;  	Log.AddInfo (Util.CONFIG_Updated + " - " + TargetFile.Name);  } else {  	//Process external file  	string strConfigFile = Path.Combine (Package.InstallerInfo.TempInstallFolder' _FileName);  	if (File.Exists (strConfigFile)) {  		//Create XmlMerge instance from config file source  		using (var stream = File.OpenText (strConfigFile)) {  			_xmlMerge = new XmlMerge (stream' Package.Version.ToString (3)' Package.Name + " Install");  			//Process merge  			_xmlMerge.UpdateConfigs (false);  		}  		Completed = true;  		Log.AddInfo (Util.CONFIG_Updated);  	}  }  
Magic Number,DotNetNuke.Services.Installer.Installers,ConfigInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ConfigInstaller.cs,Install,The following statement contains a magic number: if (File.Exists (strConfigFile)) {  	//Create XmlMerge instance from config file source  	using (var stream = File.OpenText (strConfigFile)) {  		_xmlMerge = new XmlMerge (stream' Package.Version.ToString (3)' Package.Name + " Install");  		//Process merge  		_xmlMerge.UpdateConfigs (false);  	}  	Completed = true;  	Log.AddInfo (Util.CONFIG_Updated);  }  
Magic Number,DotNetNuke.Services.Installer.Installers,ConfigInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ConfigInstaller.cs,Install,The following statement contains a magic number: using (var stream = File.OpenText (strConfigFile)) {  	_xmlMerge = new XmlMerge (stream' Package.Version.ToString (3)' Package.Name + " Install");  	//Process merge  	_xmlMerge.UpdateConfigs (false);  }  
Magic Number,DotNetNuke.Services.Installer.Installers,ConfigInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ConfigInstaller.cs,Install,The following statement contains a magic number: _xmlMerge = new XmlMerge (stream' Package.Version.ToString (3)' Package.Name + " Install");  
Magic Number,DotNetNuke.Services.Installer.Installers,ConfigInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ConfigInstaller.cs,UnInstall,The following statement contains a magic number: if (string.IsNullOrEmpty (_UninstallFileName)) {  	if (!string.IsNullOrEmpty (UnInstallConfig)) {  		//Create an XmlDocument for the config file  		_TargetConfig = new XmlDocument ();  		TargetConfig.Load (Path.Combine (PhysicalSitePath' TargetFile.FullName));  		//Create XmlMerge instance from UnInstallConfig source  		var merge = new XmlMerge (new StringReader (UnInstallConfig)' Package.Version.ToString ()' Package.Name);  		//Update the Config file - Note that this method does save the file  		merge.UpdateConfig (TargetConfig' TargetFile.FullName);  	}  } else {  	//Process external file  	string strConfigFile = Path.Combine (Package.InstallerInfo.TempInstallFolder' _UninstallFileName);  	if (File.Exists (strConfigFile)) {  		//Create XmlMerge instance from config file source  		StreamReader stream = File.OpenText (strConfigFile);  		var merge = new XmlMerge (stream' Package.Version.ToString (3)' Package.Name + " UnInstall");  		//Process merge  		merge.UpdateConfigs ();  		//Close stream  		stream.Close ();  	}  }  
Magic Number,DotNetNuke.Services.Installer.Installers,ConfigInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\ConfigInstaller.cs,UnInstall,The following statement contains a magic number: if (File.Exists (strConfigFile)) {  	//Create XmlMerge instance from config file source  	StreamReader stream = File.OpenText (strConfigFile);  	var merge = new XmlMerge (stream' Package.Version.ToString (3)' Package.Name + " UnInstall");  	//Process merge  	merge.UpdateConfigs ();  	//Close stream  	stream.Close ();  }  
Magic Number,DotNetNuke.Services.Installer.Installers,LanguageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\LanguageInstaller.cs,ReadCustomManifest,The following statement contains a magic number: if (LanguagePackType == LanguagePackType.Core) {  	LanguagePack.DependentPackageID = -2;  } else {  	string packageName = Util.ReadElement (nav' "package");  	PackageInfo package = PackageController.Instance.GetExtensionPackage (Null.NullInteger' p => p.Name == packageName);  	if (package != null) {  		LanguagePack.DependentPackageID = package.PackageID;  	}  }  
Magic Number,DotNetNuke.Services.Installer.Installers,LanguageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\LanguageInstaller.cs,ReadCustomManifest,The following statement contains a magic number: LanguagePack.DependentPackageID = -2;  
Magic Number,DotNetNuke.Services.Installer.Installers,PackageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\PackageInstaller.cs,ReadManifest,The following statement contains a magic number: if (_installedPackage != null) {  	Package.InstalledVersion = _installedPackage.Version;  	Package.InstallerInfo.PackageID = _installedPackage.PackageID;  	if (Package.InstalledVersion > Package.Version) {  		Log.AddFailure (Util.INSTALL_Version + " - " + Package.InstalledVersion.ToString (3));  		IsValid = false;  	} else if (Package.InstalledVersion == Package.Version) {  		Package.InstallerInfo.Installed = true;  		Package.InstallerInfo.PortalID = _installedPackage.PortalID;  	}  }  
Magic Number,DotNetNuke.Services.Installer.Installers,PackageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\PackageInstaller.cs,ReadManifest,The following statement contains a magic number: if (Package.InstalledVersion > Package.Version) {  	Log.AddFailure (Util.INSTALL_Version + " - " + Package.InstalledVersion.ToString (3));  	IsValid = false;  } else if (Package.InstalledVersion == Package.Version) {  	Package.InstallerInfo.Installed = true;  	Package.InstallerInfo.PortalID = _installedPackage.PortalID;  }  
Magic Number,DotNetNuke.Services.Installer.Installers,PackageInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\PackageInstaller.cs,ReadManifest,The following statement contains a magic number: Log.AddFailure (Util.INSTALL_Version + " - " + Package.InstalledVersion.ToString (3));  
Magic Number,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,AddPackageInternal,The following statement contains a magic number: package.PackageID = provider.AddPackage (package.PortalID' package.Name' package.FriendlyName' package.Description' package.PackageType' package.Version.ToString (3)' package.License' package.Manifest' package.Owner' package.Organization' package.Url' package.Email' package.ReleaseNotes' package.IsSystemPackage' UserController.Instance.GetCurrentUserInfo ().UserID' package.FolderName' package.IconFile);  
Magic Number,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,UpdatePackageInternal,The following statement contains a magic number: provider.UpdatePackage (package.PackageID' package.PortalID' package.FriendlyName' package.Description' package.PackageType' package.Version.ToString (3)' package.License' package.Manifest' package.Owner' package.Organization' package.Url' package.Email' package.ReleaseNotes' package.IsSystemPackage' UserController.Instance.GetCurrentUserInfo ().UserID' package.FolderName' package.IconFile);  
Magic Number,DotNetNuke.Services.Localization,LocalizationExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationExtensions.cs,GetLocaleCodeFromFileName,The following statement contains a magic number: return m.Success ? m.Groups [2].Value : string.Empty;  
Magic Number,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileName,The following statement contains a magic number: if (resourceFileRoot != null) {  	if (language == Localization.SystemLocale.ToLower () || String.IsNullOrEmpty (language)) {  		switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  		case ".resx":  			resourceFile = resourceFileRoot;  			break;  		case ".ascx":  			resourceFile = resourceFileRoot + ".resx";  			break;  		case ".aspx":  			resourceFile = resourceFileRoot + ".resx";  			break;  		default:  			resourceFile = resourceFileRoot + ".ascx.resx";  			//a portal module  			break;  		}  	} else {  		switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  		case ".resx":  			resourceFile = resourceFileRoot.Replace (".resx"' "." + language + ".resx");  			break;  		case ".ascx":  			resourceFile = resourceFileRoot.Replace (".ascx"' ".ascx." + language + ".resx");  			break;  		case ".aspx":  			resourceFile = resourceFileRoot.Replace (".aspx"' ".aspx." + language + ".resx");  			break;  		default:  			resourceFile = resourceFileRoot + ".ascx." + language + ".resx";  			break;  		}  	}  } else {  	if (language == Localization.SystemLocale.ToLower () || String.IsNullOrEmpty (language)) {  		resourceFile = Localization.SharedResourceFile;  	} else {  		resourceFile = Localization.SharedResourceFile.Replace (".resx"' "." + language + ".resx");  	}  }  
Magic Number,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileName,The following statement contains a magic number: if (resourceFileRoot != null) {  	if (language == Localization.SystemLocale.ToLower () || String.IsNullOrEmpty (language)) {  		switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  		case ".resx":  			resourceFile = resourceFileRoot;  			break;  		case ".ascx":  			resourceFile = resourceFileRoot + ".resx";  			break;  		case ".aspx":  			resourceFile = resourceFileRoot + ".resx";  			break;  		default:  			resourceFile = resourceFileRoot + ".ascx.resx";  			//a portal module  			break;  		}  	} else {  		switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  		case ".resx":  			resourceFile = resourceFileRoot.Replace (".resx"' "." + language + ".resx");  			break;  		case ".ascx":  			resourceFile = resourceFileRoot.Replace (".ascx"' ".ascx." + language + ".resx");  			break;  		case ".aspx":  			resourceFile = resourceFileRoot.Replace (".aspx"' ".aspx." + language + ".resx");  			break;  		default:  			resourceFile = resourceFileRoot + ".ascx." + language + ".resx";  			break;  		}  	}  } else {  	if (language == Localization.SystemLocale.ToLower () || String.IsNullOrEmpty (language)) {  		resourceFile = Localization.SharedResourceFile;  	} else {  		resourceFile = Localization.SharedResourceFile.Replace (".resx"' "." + language + ".resx");  	}  }  
Magic Number,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileName,The following statement contains a magic number: if (resourceFileRoot != null) {  	if (language == Localization.SystemLocale.ToLower () || String.IsNullOrEmpty (language)) {  		switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  		case ".resx":  			resourceFile = resourceFileRoot;  			break;  		case ".ascx":  			resourceFile = resourceFileRoot + ".resx";  			break;  		case ".aspx":  			resourceFile = resourceFileRoot + ".resx";  			break;  		default:  			resourceFile = resourceFileRoot + ".ascx.resx";  			//a portal module  			break;  		}  	} else {  		switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  		case ".resx":  			resourceFile = resourceFileRoot.Replace (".resx"' "." + language + ".resx");  			break;  		case ".ascx":  			resourceFile = resourceFileRoot.Replace (".ascx"' ".ascx." + language + ".resx");  			break;  		case ".aspx":  			resourceFile = resourceFileRoot.Replace (".aspx"' ".aspx." + language + ".resx");  			break;  		default:  			resourceFile = resourceFileRoot + ".ascx." + language + ".resx";  			break;  		}  	}  } else {  	if (language == Localization.SystemLocale.ToLower () || String.IsNullOrEmpty (language)) {  		resourceFile = Localization.SharedResourceFile;  	} else {  		resourceFile = Localization.SharedResourceFile.Replace (".resx"' "." + language + ".resx");  	}  }  
Magic Number,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileName,The following statement contains a magic number: if (resourceFileRoot != null) {  	if (language == Localization.SystemLocale.ToLower () || String.IsNullOrEmpty (language)) {  		switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  		case ".resx":  			resourceFile = resourceFileRoot;  			break;  		case ".ascx":  			resourceFile = resourceFileRoot + ".resx";  			break;  		case ".aspx":  			resourceFile = resourceFileRoot + ".resx";  			break;  		default:  			resourceFile = resourceFileRoot + ".ascx.resx";  			//a portal module  			break;  		}  	} else {  		switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  		case ".resx":  			resourceFile = resourceFileRoot.Replace (".resx"' "." + language + ".resx");  			break;  		case ".ascx":  			resourceFile = resourceFileRoot.Replace (".ascx"' ".ascx." + language + ".resx");  			break;  		case ".aspx":  			resourceFile = resourceFileRoot.Replace (".aspx"' ".aspx." + language + ".resx");  			break;  		default:  			resourceFile = resourceFileRoot + ".ascx." + language + ".resx";  			break;  		}  	}  } else {  	if (language == Localization.SystemLocale.ToLower () || String.IsNullOrEmpty (language)) {  		resourceFile = Localization.SharedResourceFile;  	} else {  		resourceFile = Localization.SharedResourceFile.Replace (".resx"' "." + language + ".resx");  	}  }  
Magic Number,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileName,The following statement contains a magic number: if (language == Localization.SystemLocale.ToLower () || String.IsNullOrEmpty (language)) {  	switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  	case ".resx":  		resourceFile = resourceFileRoot;  		break;  	case ".ascx":  		resourceFile = resourceFileRoot + ".resx";  		break;  	case ".aspx":  		resourceFile = resourceFileRoot + ".resx";  		break;  	default:  		resourceFile = resourceFileRoot + ".ascx.resx";  		//a portal module  		break;  	}  } else {  	switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  	case ".resx":  		resourceFile = resourceFileRoot.Replace (".resx"' "." + language + ".resx");  		break;  	case ".ascx":  		resourceFile = resourceFileRoot.Replace (".ascx"' ".ascx." + language + ".resx");  		break;  	case ".aspx":  		resourceFile = resourceFileRoot.Replace (".aspx"' ".aspx." + language + ".resx");  		break;  	default:  		resourceFile = resourceFileRoot + ".ascx." + language + ".resx";  		break;  	}  }  
Magic Number,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileName,The following statement contains a magic number: if (language == Localization.SystemLocale.ToLower () || String.IsNullOrEmpty (language)) {  	switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  	case ".resx":  		resourceFile = resourceFileRoot;  		break;  	case ".ascx":  		resourceFile = resourceFileRoot + ".resx";  		break;  	case ".aspx":  		resourceFile = resourceFileRoot + ".resx";  		break;  	default:  		resourceFile = resourceFileRoot + ".ascx.resx";  		//a portal module  		break;  	}  } else {  	switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  	case ".resx":  		resourceFile = resourceFileRoot.Replace (".resx"' "." + language + ".resx");  		break;  	case ".ascx":  		resourceFile = resourceFileRoot.Replace (".ascx"' ".ascx." + language + ".resx");  		break;  	case ".aspx":  		resourceFile = resourceFileRoot.Replace (".aspx"' ".aspx." + language + ".resx");  		break;  	default:  		resourceFile = resourceFileRoot + ".ascx." + language + ".resx";  		break;  	}  }  
Magic Number,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileName,The following statement contains a magic number: if (language == Localization.SystemLocale.ToLower () || String.IsNullOrEmpty (language)) {  	switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  	case ".resx":  		resourceFile = resourceFileRoot;  		break;  	case ".ascx":  		resourceFile = resourceFileRoot + ".resx";  		break;  	case ".aspx":  		resourceFile = resourceFileRoot + ".resx";  		break;  	default:  		resourceFile = resourceFileRoot + ".ascx.resx";  		//a portal module  		break;  	}  } else {  	switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  	case ".resx":  		resourceFile = resourceFileRoot.Replace (".resx"' "." + language + ".resx");  		break;  	case ".ascx":  		resourceFile = resourceFileRoot.Replace (".ascx"' ".ascx." + language + ".resx");  		break;  	case ".aspx":  		resourceFile = resourceFileRoot.Replace (".aspx"' ".aspx." + language + ".resx");  		break;  	default:  		resourceFile = resourceFileRoot + ".ascx." + language + ".resx";  		break;  	}  }  
Magic Number,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileName,The following statement contains a magic number: if (language == Localization.SystemLocale.ToLower () || String.IsNullOrEmpty (language)) {  	switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  	case ".resx":  		resourceFile = resourceFileRoot;  		break;  	case ".ascx":  		resourceFile = resourceFileRoot + ".resx";  		break;  	case ".aspx":  		resourceFile = resourceFileRoot + ".resx";  		break;  	default:  		resourceFile = resourceFileRoot + ".ascx.resx";  		//a portal module  		break;  	}  } else {  	switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  	case ".resx":  		resourceFile = resourceFileRoot.Replace (".resx"' "." + language + ".resx");  		break;  	case ".ascx":  		resourceFile = resourceFileRoot.Replace (".ascx"' ".ascx." + language + ".resx");  		break;  	case ".aspx":  		resourceFile = resourceFileRoot.Replace (".aspx"' ".aspx." + language + ".resx");  		break;  	default:  		resourceFile = resourceFileRoot + ".ascx." + language + ".resx";  		break;  	}  }  
Magic Number,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileName,The following statement contains a magic number: switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  case ".resx":  	resourceFile = resourceFileRoot;  	break;  case ".ascx":  	resourceFile = resourceFileRoot + ".resx";  	break;  case ".aspx":  	resourceFile = resourceFileRoot + ".resx";  	break;  default:  	resourceFile = resourceFileRoot + ".ascx.resx";  	//a portal module  	break;  }  
Magic Number,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileName,The following statement contains a magic number: switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  case ".resx":  	resourceFile = resourceFileRoot;  	break;  case ".ascx":  	resourceFile = resourceFileRoot + ".resx";  	break;  case ".aspx":  	resourceFile = resourceFileRoot + ".resx";  	break;  default:  	resourceFile = resourceFileRoot + ".ascx.resx";  	//a portal module  	break;  }  
Magic Number,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileName,The following statement contains a magic number: switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  case ".resx":  	resourceFile = resourceFileRoot.Replace (".resx"' "." + language + ".resx");  	break;  case ".ascx":  	resourceFile = resourceFileRoot.Replace (".ascx"' ".ascx." + language + ".resx");  	break;  case ".aspx":  	resourceFile = resourceFileRoot.Replace (".aspx"' ".aspx." + language + ".resx");  	break;  default:  	resourceFile = resourceFileRoot + ".ascx." + language + ".resx";  	break;  }  
Magic Number,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,GetResourceFileName,The following statement contains a magic number: switch (resourceFileRoot.Substring (resourceFileRoot.Length - 5' 5).ToLower ()) {  case ".resx":  	resourceFile = resourceFileRoot.Replace (".resx"' "." + language + ".resx");  	break;  case ".ascx":  	resourceFile = resourceFileRoot.Replace (".ascx"' ".ascx." + language + ".resx");  	break;  case ".aspx":  	resourceFile = resourceFileRoot.Replace (".aspx"' ".aspx." + language + ".resx");  	break;  default:  	resourceFile = resourceFileRoot + ".ascx." + language + ".resx";  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,AddLanguageToPortal,The following statement contains a magic number: if (newLocale != null) {  	// check if locale has not been added to portal already  	var portalLocale = LocaleController.Instance.GetLocale (portalID' newLocale.Code);  	// locale needs to be added  	if (portalLocale == null) {  		//We need to add a translator role for the language  		bool contentLocalizationEnabled = PortalController.GetPortalSettingAsBoolean ("ContentLocalizationEnabled"' portalID' false);  		if (contentLocalizationEnabled) {  			//Create new Translator Role  			AddTranslatorRole (portalID' newLocale);  		}  		DataProvider.Instance ().AddPortalLanguage (portalID' languageID' false' UserController.Instance.GetCurrentUserInfo ().UserID);  		string cacheKey = string.Format (DataCache.LocalesCacheKey' portalID);  		DataCache.RemoveCache (cacheKey);  		EventLogController.Instance.AddLog ("portalID/languageID"' portalID + "/" + languageID' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.LANGUAGETOPORTAL_CREATED);  		var portalInfo = PortalController.Instance.GetPortal (portalID);  		if (portalInfo != null && newLocale.Code != portalInfo.DefaultLanguage) {  			// check to see if this is the first extra language being added to the portal  			var portalLocales = LocaleController.Instance.GetLocales (portalID);  			var firstExtraLanguage = (portalLocales != null) && portalLocales.Count == 2;  			if (firstExtraLanguage) {  				AddLanguageHttpAlias (portalID' LocaleController.Instance.GetLocale (portalID' portalInfo.DefaultLanguage));  			}  			AddLanguageHttpAlias (portalID' newLocale);  		}  		if (clearCache) {  			DataCache.ClearPortalCache (portalID' false);  		}  	}  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,AddLanguageToPortal,The following statement contains a magic number: if (portalLocale == null) {  	//We need to add a translator role for the language  	bool contentLocalizationEnabled = PortalController.GetPortalSettingAsBoolean ("ContentLocalizationEnabled"' portalID' false);  	if (contentLocalizationEnabled) {  		//Create new Translator Role  		AddTranslatorRole (portalID' newLocale);  	}  	DataProvider.Instance ().AddPortalLanguage (portalID' languageID' false' UserController.Instance.GetCurrentUserInfo ().UserID);  	string cacheKey = string.Format (DataCache.LocalesCacheKey' portalID);  	DataCache.RemoveCache (cacheKey);  	EventLogController.Instance.AddLog ("portalID/languageID"' portalID + "/" + languageID' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.LANGUAGETOPORTAL_CREATED);  	var portalInfo = PortalController.Instance.GetPortal (portalID);  	if (portalInfo != null && newLocale.Code != portalInfo.DefaultLanguage) {  		// check to see if this is the first extra language being added to the portal  		var portalLocales = LocaleController.Instance.GetLocales (portalID);  		var firstExtraLanguage = (portalLocales != null) && portalLocales.Count == 2;  		if (firstExtraLanguage) {  			AddLanguageHttpAlias (portalID' LocaleController.Instance.GetLocale (portalID' portalInfo.DefaultLanguage));  		}  		AddLanguageHttpAlias (portalID' newLocale);  	}  	if (clearCache) {  		DataCache.ClearPortalCache (portalID' false);  	}  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,AddLanguageToPortal,The following statement contains a magic number: if (portalInfo != null && newLocale.Code != portalInfo.DefaultLanguage) {  	// check to see if this is the first extra language being added to the portal  	var portalLocales = LocaleController.Instance.GetLocales (portalID);  	var firstExtraLanguage = (portalLocales != null) && portalLocales.Count == 2;  	if (firstExtraLanguage) {  		AddLanguageHttpAlias (portalID' LocaleController.Instance.GetLocale (portalID' portalInfo.DefaultLanguage));  	}  	AddLanguageHttpAlias (portalID' newLocale);  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: switch (timeZoneOffsetInMinutes) {  case -720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Dateline Standard Time");  	break;  case -660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Samoa Standard Time");  	break;  case -600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Hawaiian Standard Time");  	break;  case -540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Alaskan Standard Time");  	break;  case -480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pacific Standard Time");  	break;  case -420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mountain Standard Time");  	break;  case -360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Standard Time");  	break;  case -300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Eastern Standard Time");  	break;  case -240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Atlantic Standard Time");  	break;  case -210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Newfoundland Standard Time");  	break;  case -180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Argentina Standard Time");  	break;  case -120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Mid-Atlantic Standard Time");  	break;  case -60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cape Verde Standard Time");  	break;  case 0:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GMT Standard Time");  	break;  case 60:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("W. Europe Standard Time");  	break;  case 120:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("GTB Standard Time");  	break;  case 180:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Russian Standard Time");  	break;  case 210:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Iran Standard Time");  	break;  case 240:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Arabian Standard Time");  	break;  case 270:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Afghanistan Standard Time");  	break;  case 300:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Pakistan Standard Time");  	break;  case 330:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("India Standard Time");  	break;  case 345:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Nepal Standard Time");  	break;  case 360:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Central Asia Standard Time");  	break;  case 390:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Myanmar Standard Time");  	break;  case 420:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("SE Asia Standard Time");  	break;  case 480:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("China Standard Time");  	break;  case 540:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tokyo Standard Time");  	break;  case 570:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Cen. Australia Standard Time");  	break;  case 600:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("AUS Eastern Standard Time");  	break;  case 660:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Magadan Standard Time");  	break;  case 720:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("New Zealand Standard Time");  	break;  case 780:  	timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById ("Tonga Standard Time");  	break;  default:  	foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  		if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  			timeZoneInfo = timeZone;  			break;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: foreach (TimeZoneInfo timeZone in TimeZoneInfo.GetSystemTimeZones ()) {  	if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  		timeZoneInfo = timeZone;  		break;  	}  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,ConvertLegacyTimeZoneOffsetToTimeZoneInfo,The following statement contains a magic number: if (Math.Abs (timeZone.BaseUtcOffset.TotalMinutes - timeZoneOffsetInMinutes) < 0.001) {  	timeZoneInfo = timeZone;  	break;  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetResourceFileName,The following statement contains a magic number: if (language != SystemLocale) {  	if (resourceFileName.ToLowerInvariant ().EndsWith (".en-us.resx")) {  		resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 11) + "." + language + ".resx";  	} else {  		resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 5) + "." + language + ".resx";  	}  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetResourceFileName,The following statement contains a magic number: if (language != SystemLocale) {  	if (resourceFileName.ToLowerInvariant ().EndsWith (".en-us.resx")) {  		resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 11) + "." + language + ".resx";  	} else {  		resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 5) + "." + language + ".resx";  	}  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetResourceFileName,The following statement contains a magic number: if (resourceFileName.ToLowerInvariant ().EndsWith (".en-us.resx")) {  	resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 11) + "." + language + ".resx";  } else {  	resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 5) + "." + language + ".resx";  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetResourceFileName,The following statement contains a magic number: if (resourceFileName.ToLowerInvariant ().EndsWith (".en-us.resx")) {  	resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 11) + "." + language + ".resx";  } else {  	resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 5) + "." + language + ".resx";  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetResourceFileName,The following statement contains a magic number: resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 11) + "." + language + ".resx";  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetResourceFileName,The following statement contains a magic number: resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 5) + "." + language + ".resx";  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetResourceFileName,The following statement contains a magic number: if (mode == "Host") {  	resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 5) + "." + "Host.resx";  } else if (mode == "Portal") {  	resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 5) + "." + "Portal-" + portalId + ".resx";  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetResourceFileName,The following statement contains a magic number: if (mode == "Host") {  	resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 5) + "." + "Host.resx";  } else if (mode == "Portal") {  	resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 5) + "." + "Portal-" + portalId + ".resx";  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetResourceFileName,The following statement contains a magic number: resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 5) + "." + "Host.resx";  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetResourceFileName,The following statement contains a magic number: if (mode == "Portal") {  	resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 5) + "." + "Portal-" + portalId + ".resx";  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,GetResourceFileName,The following statement contains a magic number: resourceFileName = resourceFileName.Substring (0' resourceFileName.Length - 5) + "." + "Portal-" + portalId + ".resx";  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,RemoveLanguageFromPortal,The following statement contains a magic number: if (language != null) {  	if (Config.GetFriendlyUrlProvider () == "advanced") {  		// only do this with Advanced URL Management  		var portalInfo = PortalController.Instance.GetPortal (portalID);  		if (portalInfo != null) {  			// check to see if this is the last extra language being added to the portal  			var lastLanguage = LocaleController.Instance.GetLocales (portalID).Count == 2;  			var portalAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (portalID).ToList ();  			foreach (var portalAliasInfo in portalAliases) {  				if (portalAliasInfo.CultureCode == language.Code) {  					PortalAliasController.Instance.DeletePortalAlias (portalAliasInfo);  				}  				if (lastLanguage && portalAliasInfo.CultureCode == portalInfo.DefaultLanguage) {  					PortalAliasController.Instance.DeletePortalAlias (portalAliasInfo);  					//Fix PortalSettings for the rest of this request  					var newDefaultAlias = portalAliases.SingleOrDefault (a => a.IsPrimary && a.CultureCode == String.Empty);  					if (newDefaultAlias != null) {  						var settings = PortalController.Instance.GetCurrentPortalSettings ();  						if (settings != null) {  							settings.PortalAlias = newDefaultAlias;  						}  					}  				}  			}  		}  	}  	//Get Translator Role  	string roleName = string.Format ("Translator ({0})"' language.Code);  	RoleInfo role = RoleController.Instance.GetRole (portalID' r => r.RoleName == roleName);  	if (role != null) {  		//Remove Translator Role from Portal  		RoleController.Instance.DeleteRole (role);  	}  	DataProvider.Instance ().DeletePortalLanguages (portalID' languageID);  	EventLogController.Instance.AddLog ("portalID/languageID"' portalID + "/" + languageID' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.LANGUAGETOPORTAL_DELETED);  	DataCache.ClearPortalCache (portalID' false);  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,RemoveLanguageFromPortal,The following statement contains a magic number: if (Config.GetFriendlyUrlProvider () == "advanced") {  	// only do this with Advanced URL Management  	var portalInfo = PortalController.Instance.GetPortal (portalID);  	if (portalInfo != null) {  		// check to see if this is the last extra language being added to the portal  		var lastLanguage = LocaleController.Instance.GetLocales (portalID).Count == 2;  		var portalAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (portalID).ToList ();  		foreach (var portalAliasInfo in portalAliases) {  			if (portalAliasInfo.CultureCode == language.Code) {  				PortalAliasController.Instance.DeletePortalAlias (portalAliasInfo);  			}  			if (lastLanguage && portalAliasInfo.CultureCode == portalInfo.DefaultLanguage) {  				PortalAliasController.Instance.DeletePortalAlias (portalAliasInfo);  				//Fix PortalSettings for the rest of this request  				var newDefaultAlias = portalAliases.SingleOrDefault (a => a.IsPrimary && a.CultureCode == String.Empty);  				if (newDefaultAlias != null) {  					var settings = PortalController.Instance.GetCurrentPortalSettings ();  					if (settings != null) {  						settings.PortalAlias = newDefaultAlias;  					}  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Services.Localization,Localization,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Localization.cs,RemoveLanguageFromPortal,The following statement contains a magic number: if (portalInfo != null) {  	// check to see if this is the last extra language being added to the portal  	var lastLanguage = LocaleController.Instance.GetLocales (portalID).Count == 2;  	var portalAliases = PortalAliasController.Instance.GetPortalAliasesByPortalId (portalID).ToList ();  	foreach (var portalAliasInfo in portalAliases) {  		if (portalAliasInfo.CultureCode == language.Code) {  			PortalAliasController.Instance.DeletePortalAlias (portalAliasInfo);  		}  		if (lastLanguage && portalAliasInfo.CultureCode == portalInfo.DefaultLanguage) {  			PortalAliasController.Instance.DeletePortalAlias (portalAliasInfo);  			//Fix PortalSettings for the rest of this request  			var newDefaultAlias = portalAliases.SingleOrDefault (a => a.IsPrimary && a.CultureCode == String.Empty);  			if (newDefaultAlias != null) {  				var settings = PortalController.Instance.GetCurrentPortalSettings ();  				if (settings != null) {  					settings.PortalAlias = newDefaultAlias;  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeCache,The following statement contains a magic number: foreach (string file in Directory.GetFiles (folder' "*.resources")) {  	if (!(FileSystemUtils.DeleteFileWithWait (file' 100' 200))) {  		filesNotDeleted.Append (file + ";");  	} else {  		i += 1;  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeCache,The following statement contains a magic number: foreach (string file in Directory.GetFiles (folder' "*.resources")) {  	if (!(FileSystemUtils.DeleteFileWithWait (file' 100' 200))) {  		filesNotDeleted.Append (file + ";");  	} else {  		i += 1;  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeCache,The following statement contains a magic number: if (!(FileSystemUtils.DeleteFileWithWait (file' 100' 200))) {  	filesNotDeleted.Append (file + ";");  } else {  	i += 1;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeCache,The following statement contains a magic number: if (!(FileSystemUtils.DeleteFileWithWait (file' 100' 200))) {  	filesNotDeleted.Append (file + ";");  } else {  	i += 1;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: if (!(string.IsNullOrEmpty (cacheFolder))) {  	foreach (string file in Directory.GetFiles (cacheFolder' "*" + AttribFileExtension)) {  		if (IsFileExpired (file)) {  			string fileToDelete = file.Replace (AttribFileExtension' DataFileExtension);  			if (!(FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200))) {  				filesNotDeleted.Append (fileToDelete + ";");  			} else {  				i += 1;  			}  		}  	}  	if (filesNotDeleted.Length > 0) {  		throw new IOException ("Deleted " + i + " files' however' some files are locked.  Could not delete the following files: " + filesNotDeleted);  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: if (!(string.IsNullOrEmpty (cacheFolder))) {  	foreach (string file in Directory.GetFiles (cacheFolder' "*" + AttribFileExtension)) {  		if (IsFileExpired (file)) {  			string fileToDelete = file.Replace (AttribFileExtension' DataFileExtension);  			if (!(FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200))) {  				filesNotDeleted.Append (fileToDelete + ";");  			} else {  				i += 1;  			}  		}  	}  	if (filesNotDeleted.Length > 0) {  		throw new IOException ("Deleted " + i + " files' however' some files are locked.  Could not delete the following files: " + filesNotDeleted);  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: foreach (string file in Directory.GetFiles (cacheFolder' "*" + AttribFileExtension)) {  	if (IsFileExpired (file)) {  		string fileToDelete = file.Replace (AttribFileExtension' DataFileExtension);  		if (!(FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200))) {  			filesNotDeleted.Append (fileToDelete + ";");  		} else {  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: foreach (string file in Directory.GetFiles (cacheFolder' "*" + AttribFileExtension)) {  	if (IsFileExpired (file)) {  		string fileToDelete = file.Replace (AttribFileExtension' DataFileExtension);  		if (!(FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200))) {  			filesNotDeleted.Append (fileToDelete + ";");  		} else {  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: if (IsFileExpired (file)) {  	string fileToDelete = file.Replace (AttribFileExtension' DataFileExtension);  	if (!(FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200))) {  		filesNotDeleted.Append (fileToDelete + ";");  	} else {  		i += 1;  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: if (IsFileExpired (file)) {  	string fileToDelete = file.Replace (AttribFileExtension' DataFileExtension);  	if (!(FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200))) {  		filesNotDeleted.Append (fileToDelete + ";");  	} else {  		i += 1;  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: if (!(FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200))) {  	filesNotDeleted.Append (fileToDelete + ";");  } else {  	i += 1;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: if (!(FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200))) {  	filesNotDeleted.Append (fileToDelete + ";");  } else {  	i += 1;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,Remove,The following statement contains a magic number: if (portals.ContainsKey (tabId) && portals [tabId] > Null.NullInteger) {  	var filesNotDeleted = new StringBuilder ();  	int i = 0;  	string cacheFolder = GetCacheFolder (portals [tabId]);  	if (!(string.IsNullOrEmpty (cacheFolder))) {  		foreach (string file in Directory.GetFiles (cacheFolder' string.Concat (tabId' "_*.*"))) {  			if (!(FileSystemUtils.DeleteFileWithWait (file' 100' 200))) {  				filesNotDeleted.Append (string.Concat (file' ";"));  			} else {  				i += 1;  			}  		}  		if (filesNotDeleted.Length > 0) {  			var log = new LogInfo {  				LogTypeKey = EventLogController.EventLogType.HOST_ALERT.ToString ()  			};  			var logDetail = new LogDetailInfo {  				PropertyName = "FileOutputCacheProvider"'  				PropertyValue = string.Format ("Deleted {0} files' however' some files are locked.  Could not delete the following files: {1}"' i' filesNotDeleted)  			};  			var properties = new LogProperties {  				logDetail  			};  			log.LogProperties = properties;  			LogController.Instance.AddLog (log);  		}  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,Remove,The following statement contains a magic number: if (portals.ContainsKey (tabId) && portals [tabId] > Null.NullInteger) {  	var filesNotDeleted = new StringBuilder ();  	int i = 0;  	string cacheFolder = GetCacheFolder (portals [tabId]);  	if (!(string.IsNullOrEmpty (cacheFolder))) {  		foreach (string file in Directory.GetFiles (cacheFolder' string.Concat (tabId' "_*.*"))) {  			if (!(FileSystemUtils.DeleteFileWithWait (file' 100' 200))) {  				filesNotDeleted.Append (string.Concat (file' ";"));  			} else {  				i += 1;  			}  		}  		if (filesNotDeleted.Length > 0) {  			var log = new LogInfo {  				LogTypeKey = EventLogController.EventLogType.HOST_ALERT.ToString ()  			};  			var logDetail = new LogDetailInfo {  				PropertyName = "FileOutputCacheProvider"'  				PropertyValue = string.Format ("Deleted {0} files' however' some files are locked.  Could not delete the following files: {1}"' i' filesNotDeleted)  			};  			var properties = new LogProperties {  				logDetail  			};  			log.LogProperties = properties;  			LogController.Instance.AddLog (log);  		}  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,Remove,The following statement contains a magic number: if (!(string.IsNullOrEmpty (cacheFolder))) {  	foreach (string file in Directory.GetFiles (cacheFolder' string.Concat (tabId' "_*.*"))) {  		if (!(FileSystemUtils.DeleteFileWithWait (file' 100' 200))) {  			filesNotDeleted.Append (string.Concat (file' ";"));  		} else {  			i += 1;  		}  	}  	if (filesNotDeleted.Length > 0) {  		var log = new LogInfo {  			LogTypeKey = EventLogController.EventLogType.HOST_ALERT.ToString ()  		};  		var logDetail = new LogDetailInfo {  			PropertyName = "FileOutputCacheProvider"'  			PropertyValue = string.Format ("Deleted {0} files' however' some files are locked.  Could not delete the following files: {1}"' i' filesNotDeleted)  		};  		var properties = new LogProperties {  			logDetail  		};  		log.LogProperties = properties;  		LogController.Instance.AddLog (log);  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,Remove,The following statement contains a magic number: if (!(string.IsNullOrEmpty (cacheFolder))) {  	foreach (string file in Directory.GetFiles (cacheFolder' string.Concat (tabId' "_*.*"))) {  		if (!(FileSystemUtils.DeleteFileWithWait (file' 100' 200))) {  			filesNotDeleted.Append (string.Concat (file' ";"));  		} else {  			i += 1;  		}  	}  	if (filesNotDeleted.Length > 0) {  		var log = new LogInfo {  			LogTypeKey = EventLogController.EventLogType.HOST_ALERT.ToString ()  		};  		var logDetail = new LogDetailInfo {  			PropertyName = "FileOutputCacheProvider"'  			PropertyValue = string.Format ("Deleted {0} files' however' some files are locked.  Could not delete the following files: {1}"' i' filesNotDeleted)  		};  		var properties = new LogProperties {  			logDetail  		};  		log.LogProperties = properties;  		LogController.Instance.AddLog (log);  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,Remove,The following statement contains a magic number: foreach (string file in Directory.GetFiles (cacheFolder' string.Concat (tabId' "_*.*"))) {  	if (!(FileSystemUtils.DeleteFileWithWait (file' 100' 200))) {  		filesNotDeleted.Append (string.Concat (file' ";"));  	} else {  		i += 1;  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,Remove,The following statement contains a magic number: foreach (string file in Directory.GetFiles (cacheFolder' string.Concat (tabId' "_*.*"))) {  	if (!(FileSystemUtils.DeleteFileWithWait (file' 100' 200))) {  		filesNotDeleted.Append (string.Concat (file' ";"));  	} else {  		i += 1;  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,Remove,The following statement contains a magic number: if (!(FileSystemUtils.DeleteFileWithWait (file' 100' 200))) {  	filesNotDeleted.Append (string.Concat (file' ";"));  } else {  	i += 1;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,Remove,The following statement contains a magic number: if (!(FileSystemUtils.DeleteFileWithWait (file' 100' 200))) {  	filesNotDeleted.Append (string.Concat (file' ";"));  } else {  	i += 1;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,SetOutput,The following statement contains a magic number: try {  	if (File.Exists (cachedOutputFile)) {  		FileSystemUtils.DeleteFileWithWait (cachedOutputFile' 100' 200);  	}  	using (var captureStream = new FileStream (cachedOutputFile' FileMode.CreateNew' FileAccess.Write)) {  		captureStream.Write (output' 0' output.Length);  		captureStream.Close ();  	}  	using (var oWrite = File.CreateText (attribFile)) {  		oWrite.WriteLine (DateTime.UtcNow.Add (duration).ToString ());  		oWrite.Close ();  	}  } catch (Exception ex) {  	// TODO: Need to implement multi-threading.    	// The current code is not thread safe and threw error if two threads tried creating cache file  	// A thread could create a file between the time another thread deleted it and tried to create new cache file.  	// This would result in a system.IO.IOException.  Also' there was no error handling in place so the   	// Error would bubble up to the user and provide details on the file structure of the site.  	Exceptions.Exceptions.LogException (ex);  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,SetOutput,The following statement contains a magic number: try {  	if (File.Exists (cachedOutputFile)) {  		FileSystemUtils.DeleteFileWithWait (cachedOutputFile' 100' 200);  	}  	using (var captureStream = new FileStream (cachedOutputFile' FileMode.CreateNew' FileAccess.Write)) {  		captureStream.Write (output' 0' output.Length);  		captureStream.Close ();  	}  	using (var oWrite = File.CreateText (attribFile)) {  		oWrite.WriteLine (DateTime.UtcNow.Add (duration).ToString ());  		oWrite.Close ();  	}  } catch (Exception ex) {  	// TODO: Need to implement multi-threading.    	// The current code is not thread safe and threw error if two threads tried creating cache file  	// A thread could create a file between the time another thread deleted it and tried to create new cache file.  	// This would result in a system.IO.IOException.  Also' there was no error handling in place so the   	// Error would bubble up to the user and provide details on the file structure of the site.  	Exceptions.Exceptions.LogException (ex);  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,SetOutput,The following statement contains a magic number: if (File.Exists (cachedOutputFile)) {  	FileSystemUtils.DeleteFileWithWait (cachedOutputFile' 100' 200);  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,SetOutput,The following statement contains a magic number: if (File.Exists (cachedOutputFile)) {  	FileSystemUtils.DeleteFileWithWait (cachedOutputFile' 100' 200);  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,SetOutput,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (cachedOutputFile' 100' 200);  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,SetOutput,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (cachedOutputFile' 100' 200);  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,StreamOutput,The following statement contains a magic number: try {  	string attribFile = GetAttribFileName (tabId' cacheKey);  	string captureFile = GetCachedOutputFileName (tabId' cacheKey);  	StreamReader oRead = File.OpenText (attribFile);  	DateTime expires = Convert.ToDateTime (oRead.ReadLine ());  	oRead.Close ();  	if (expires < DateTime.UtcNow) {  		FileSystemUtils.DeleteFileWithWait (attribFile' 100' 200);  		FileSystemUtils.DeleteFileWithWait (captureFile' 100' 200);  		return false;  	}  	context.Response.WriteFile (captureFile);  	foundFile = true;  } catch (FileNotFoundException) {  	foundFile = false;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,StreamOutput,The following statement contains a magic number: try {  	string attribFile = GetAttribFileName (tabId' cacheKey);  	string captureFile = GetCachedOutputFileName (tabId' cacheKey);  	StreamReader oRead = File.OpenText (attribFile);  	DateTime expires = Convert.ToDateTime (oRead.ReadLine ());  	oRead.Close ();  	if (expires < DateTime.UtcNow) {  		FileSystemUtils.DeleteFileWithWait (attribFile' 100' 200);  		FileSystemUtils.DeleteFileWithWait (captureFile' 100' 200);  		return false;  	}  	context.Response.WriteFile (captureFile);  	foundFile = true;  } catch (FileNotFoundException) {  	foundFile = false;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,StreamOutput,The following statement contains a magic number: try {  	string attribFile = GetAttribFileName (tabId' cacheKey);  	string captureFile = GetCachedOutputFileName (tabId' cacheKey);  	StreamReader oRead = File.OpenText (attribFile);  	DateTime expires = Convert.ToDateTime (oRead.ReadLine ());  	oRead.Close ();  	if (expires < DateTime.UtcNow) {  		FileSystemUtils.DeleteFileWithWait (attribFile' 100' 200);  		FileSystemUtils.DeleteFileWithWait (captureFile' 100' 200);  		return false;  	}  	context.Response.WriteFile (captureFile);  	foundFile = true;  } catch (FileNotFoundException) {  	foundFile = false;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,StreamOutput,The following statement contains a magic number: try {  	string attribFile = GetAttribFileName (tabId' cacheKey);  	string captureFile = GetCachedOutputFileName (tabId' cacheKey);  	StreamReader oRead = File.OpenText (attribFile);  	DateTime expires = Convert.ToDateTime (oRead.ReadLine ());  	oRead.Close ();  	if (expires < DateTime.UtcNow) {  		FileSystemUtils.DeleteFileWithWait (attribFile' 100' 200);  		FileSystemUtils.DeleteFileWithWait (captureFile' 100' 200);  		return false;  	}  	context.Response.WriteFile (captureFile);  	foundFile = true;  } catch (FileNotFoundException) {  	foundFile = false;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,StreamOutput,The following statement contains a magic number: if (expires < DateTime.UtcNow) {  	FileSystemUtils.DeleteFileWithWait (attribFile' 100' 200);  	FileSystemUtils.DeleteFileWithWait (captureFile' 100' 200);  	return false;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,StreamOutput,The following statement contains a magic number: if (expires < DateTime.UtcNow) {  	FileSystemUtils.DeleteFileWithWait (attribFile' 100' 200);  	FileSystemUtils.DeleteFileWithWait (captureFile' 100' 200);  	return false;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,StreamOutput,The following statement contains a magic number: if (expires < DateTime.UtcNow) {  	FileSystemUtils.DeleteFileWithWait (attribFile' 100' 200);  	FileSystemUtils.DeleteFileWithWait (captureFile' 100' 200);  	return false;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,StreamOutput,The following statement contains a magic number: if (expires < DateTime.UtcNow) {  	FileSystemUtils.DeleteFileWithWait (attribFile' 100' 200);  	FileSystemUtils.DeleteFileWithWait (captureFile' 100' 200);  	return false;  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,StreamOutput,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (attribFile' 100' 200);  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,StreamOutput,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (attribFile' 100' 200);  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,StreamOutput,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (captureFile' 100' 200);  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileProvider.cs,StreamOutput,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (captureFile' 100' 200);  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,FileResponseFilter,The following statement contains a magic number: if (File.Exists (CachedOutputTempFileName)) {  	bool fileDeleted = FileSystemUtils.DeleteFileWithWait (CachedOutputTempFileName' 100' 200);  	if (fileDeleted == false) {  		HasErrored = true;  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,FileResponseFilter,The following statement contains a magic number: if (File.Exists (CachedOutputTempFileName)) {  	bool fileDeleted = FileSystemUtils.DeleteFileWithWait (CachedOutputTempFileName' 100' 200);  	if (fileDeleted == false) {  		HasErrored = true;  	}  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: if ((CaptureStream) != null) {  	CaptureStream.Close ();  	if (File.Exists (CachedOutputFileName)) {  		FileSystemUtils.DeleteFileWithWait (CachedOutputFileName' 100' 200);  	}  	File.Move (CachedOutputTempFileName' CachedOutputFileName);  	StreamWriter oWrite = File.CreateText (CachedOutputAttribFileName);  	oWrite.WriteLine (_cacheExpiration.ToString ());  	oWrite.Close ();  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: if ((CaptureStream) != null) {  	CaptureStream.Close ();  	if (File.Exists (CachedOutputFileName)) {  		FileSystemUtils.DeleteFileWithWait (CachedOutputFileName' 100' 200);  	}  	File.Move (CachedOutputTempFileName' CachedOutputFileName);  	StreamWriter oWrite = File.CreateText (CachedOutputAttribFileName);  	oWrite.WriteLine (_cacheExpiration.ToString ());  	oWrite.Close ();  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: if (File.Exists (CachedOutputFileName)) {  	FileSystemUtils.DeleteFileWithWait (CachedOutputFileName' 100' 200);  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: if (File.Exists (CachedOutputFileName)) {  	FileSystemUtils.DeleteFileWithWait (CachedOutputFileName' 100' 200);  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (CachedOutputFileName' 100' 200);  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (CachedOutputFileName' 100' 200);  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: if (deleteData) {  	FileSystemUtils.DeleteFileWithWait (CachedOutputFileName' 100' 200);  	FileSystemUtils.DeleteFileWithWait (CachedOutputAttribFileName' 100' 200);  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: if (deleteData) {  	FileSystemUtils.DeleteFileWithWait (CachedOutputFileName' 100' 200);  	FileSystemUtils.DeleteFileWithWait (CachedOutputAttribFileName' 100' 200);  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: if (deleteData) {  	FileSystemUtils.DeleteFileWithWait (CachedOutputFileName' 100' 200);  	FileSystemUtils.DeleteFileWithWait (CachedOutputAttribFileName' 100' 200);  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: if (deleteData) {  	FileSystemUtils.DeleteFileWithWait (CachedOutputFileName' 100' 200);  	FileSystemUtils.DeleteFileWithWait (CachedOutputAttribFileName' 100' 200);  }  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (CachedOutputFileName' 100' 200);  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (CachedOutputFileName' 100' 200);  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (CachedOutputAttribFileName' 100' 200);  
Magic Number,DotNetNuke.Services.OutputCache.Providers,FileResponseFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\OutputCache\Providers\FileResponseFilter.cs,StopFiltering,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (CachedOutputAttribFileName' 100' 200);  
Magic Number,DotNetNuke.Services.Search.Controllers,UserResultController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Controllers\UserResultController.cs,HasViewPermission,The following statement contains a magic number: if (searchResult.UniqueKey.Contains ("friendsandgroups")) {  	var extendedVisibility = searchResult.UniqueKey.IndexOf ("_") != searchResult.UniqueKey.LastIndexOf ("_") ? searchResult.UniqueKey.Split ('_') [2] : string.Empty;  	return HasSocialReplationship (userInSearchResult' UserController.Instance.GetCurrentUserInfo ()' extendedVisibility);  }  
Magic Number,DotNetNuke.Services.Search.Entities,SearchQuery,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Entities\SearchQuery.cs,SearchQuery,The following statement contains a magic number: TitleSnippetLength = 60;  
Magic Number,DotNetNuke.Services.Search.Entities,SearchQuery,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Entities\SearchQuery.cs,SearchQuery,The following statement contains a magic number: BodySnippetLength = 100;  
Magic Number,DotNetNuke.Services.Search.Entities,SearchQuery,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Entities\SearchQuery.cs,SearchQuery,The following statement contains a magic number: PageSize = 10;  
Magic Number,DotNetNuke.Services.Search.Internals,LuceneQuery,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneQuery.cs,LuceneQuery,The following statement contains a magic number: TitleSnippetLength = 60;  
Magic Number,DotNetNuke.Services.Search.Internals,LuceneQuery,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneQuery.cs,LuceneQuery,The following statement contains a magic number: BodySnippetLength = 100;  
Magic Number,DotNetNuke.Services.Search.Internals,LuceneQuery,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneQuery.cs,LuceneQuery,The following statement contains a magic number: PageSize = 10;  
Magic Number,DotNetNuke.Services.Search.Internals,SearchQueryStringParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchQueryStringParser.cs,GetLastModifiedDate,The following statement contains a magic number: if (!string.IsNullOrEmpty (date)) {  	switch (date.ToLower ()) {  	case "day":  		result = DateTime.UtcNow.AddDays (-1);  		break;  	case "week":  		result = DateTime.UtcNow.AddDays (-7);  		break;  	case "month":  		result = DateTime.UtcNow.AddMonths (-1);  		break;  	case "quarter":  		result = DateTime.UtcNow.AddMonths (-3);  		break;  	case "year":  		result = DateTime.UtcNow.AddYears (-1);  		break;  	}  }  
Magic Number,DotNetNuke.Services.Search.Internals,SearchQueryStringParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchQueryStringParser.cs,GetLastModifiedDate,The following statement contains a magic number: if (!string.IsNullOrEmpty (date)) {  	switch (date.ToLower ()) {  	case "day":  		result = DateTime.UtcNow.AddDays (-1);  		break;  	case "week":  		result = DateTime.UtcNow.AddDays (-7);  		break;  	case "month":  		result = DateTime.UtcNow.AddMonths (-1);  		break;  	case "quarter":  		result = DateTime.UtcNow.AddMonths (-3);  		break;  	case "year":  		result = DateTime.UtcNow.AddYears (-1);  		break;  	}  }  
Magic Number,DotNetNuke.Services.Search.Internals,SearchQueryStringParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchQueryStringParser.cs,GetLastModifiedDate,The following statement contains a magic number: switch (date.ToLower ()) {  case "day":  	result = DateTime.UtcNow.AddDays (-1);  	break;  case "week":  	result = DateTime.UtcNow.AddDays (-7);  	break;  case "month":  	result = DateTime.UtcNow.AddMonths (-1);  	break;  case "quarter":  	result = DateTime.UtcNow.AddMonths (-3);  	break;  case "year":  	result = DateTime.UtcNow.AddYears (-1);  	break;  }  
Magic Number,DotNetNuke.Services.Search.Internals,SearchQueryStringParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchQueryStringParser.cs,GetLastModifiedDate,The following statement contains a magic number: switch (date.ToLower ()) {  case "day":  	result = DateTime.UtcNow.AddDays (-1);  	break;  case "week":  	result = DateTime.UtcNow.AddDays (-7);  	break;  case "month":  	result = DateTime.UtcNow.AddMonths (-1);  	break;  case "quarter":  	result = DateTime.UtcNow.AddMonths (-3);  	break;  case "year":  	result = DateTime.UtcNow.AddYears (-1);  	break;  }  
Magic Number,DotNetNuke.Services.Search.Internals,SearchQueryStringParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchQueryStringParser.cs,GetLastModifiedDate,The following statement contains a magic number: result = DateTime.UtcNow.AddDays (-7);  
Magic Number,DotNetNuke.Services.Search.Internals,SearchQueryStringParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchQueryStringParser.cs,GetLastModifiedDate,The following statement contains a magic number: result = DateTime.UtcNow.AddMonths (-3);  
Magic Number,DotNetNuke.Services.Search.Internals,SearchSecurityTrimmer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchSecurityTrimmer.cs,SearchSecurityTrimmer,The following statement contains a magic number: _hitDocs = new List<ScoreDoc> (16);  
Magic Number,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocuments,The following statement contains a magic number: if (searchDocs.Any ()) {  	const int commitBatchSize = 1024 * 16;  	var idx = 0;  	//var added = false;  	foreach (var searchDoc in searchDocs) {  		try {  			AddSearchDocumentInternal (searchDoc' (++idx % commitBatchSize) == 0);  			//added = true;  		} catch (Exception ex) {  			Logger.ErrorFormat ("Search Document error: {0}{1}{2}"' searchDoc' Environment.NewLine' ex);  		}  	}  	//Note: modified to do commit only once at the end of scheduler job  	// check so we don't commit again  	//if (added && (idx % commitBatchSize) != 0)  	//{  	//    Commit();  	//}  }  
Magic Number,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocuments,The following statement contains a magic number: if (searchDocs.Any ()) {  	const int commitBatchSize = 1024 * 16;  	var idx = 0;  	//var added = false;  	foreach (var searchDoc in searchDocs) {  		try {  			AddSearchDocumentInternal (searchDoc' (++idx % commitBatchSize) == 0);  			//added = true;  		} catch (Exception ex) {  			Logger.ErrorFormat ("Search Document error: {0}{1}{2}"' searchDoc' Environment.NewLine' ex);  		}  	}  	//Note: modified to do commit only once at the end of scheduler job  	// check so we don't commit again  	//if (added && (idx % commitBatchSize) != 0)  	//{  	//    Commit();  	//}  }  
Magic Number,DotNetNuke.Services.Search.Internals,LuceneControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneControllerImpl.cs,OptimizeSearchIndex,The following statement contains a magic number: if (writer != null && writer.HasDeletions ()) {  	if (doWait) {  		Logger.Debug ("Compacting Search Index - started");  	}  	CheckDisposed ();  	//optimize down to "> 1 segments" for better performance than down to 1  	_writer.Optimize (4' doWait);  	if (doWait) {  		Commit ();  		Logger.Debug ("Compacting Search Index - finished");  	}  	return true;  }  
Magic Number,DotNetNuke.Services.Search.Internals,LuceneControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\LuceneControllerImpl.cs,OptimizeSearchIndex,The following statement contains a magic number: _writer.Optimize (4' doWait);  
Magic Number,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,FindModifiedUsers,The following statement contains a magic number: using (var reader = DataProvider.Instance ().GetAvailableUsersForIndex (portalId' startDateLocal' startUserId' BatchSize)) {  	while (reader.Read ()) {  		var userSearch = GetUserSearch (reader);  		if (userSearch == null)  			continue;  		AddBasicInformation (searchDocuments' indexedUsers' userSearch' portalId);  		//log the userid so that it can get the correct user collection next time.  		if (userSearch.UserId > startUserId) {  			startUserId = userSearch.UserId;  		}  		foreach (var definition in profileDefinitions) {  			var propertyName = definition.PropertyName;  			if (!ContainsColumn (propertyName' reader)) {  				continue;  			}  			var propertyValue = reader [propertyName].ToString ();  			if (string.IsNullOrEmpty (propertyValue) || !propertyValue.Contains (ValueSplitFlag)) {  				continue;  			}  			var splitValues = Regex.Split (propertyValue' Regex.Escape (ValueSplitFlag));  			propertyValue = splitValues [0];  			var visibilityMode = ((UserVisibilityMode)Convert.ToInt32 (splitValues [1]));  			var extendedVisibility = splitValues [2];  			var modifiedTime = Convert.ToDateTime (splitValues [3]).ToUniversalTime ();  			if (string.IsNullOrEmpty (propertyValue)) {  				continue;  			}  			//DNN-5740 / DNN-9040: replace split flag if it included in property value.  			propertyValue = propertyValue.Replace ("[$]"' "$");  			var uniqueKey = string.Format ("{0}_{1}"' userSearch.UserId' visibilityMode).ToLowerInvariant ();  			if (visibilityMode == UserVisibilityMode.FriendsAndGroups) {  				uniqueKey = string.Format ("{0}_{1}"' uniqueKey' extendedVisibility);  			}  			if (searchDocuments.ContainsKey (uniqueKey)) {  				var document = searchDocuments [uniqueKey];  				document.Keywords.Add (propertyName' propertyValue);  				if (modifiedTime > document.ModifiedTimeUtc) {  					document.ModifiedTimeUtc = modifiedTime;  				}  			} else {  				//Need remove use exists index for all visibilities.  				if (!indexedUsers.Contains (userSearch.UserId)) {  					indexedUsers.Add (userSearch.UserId);  				}  				if (!string.IsNullOrEmpty (propertyValue)) {  					var searchDoc = new SearchDocument {  						SearchTypeId = UserSearchTypeId'  						UniqueKey = uniqueKey'  						PortalId = portalId'  						ModifiedTimeUtc = modifiedTime'  						Description = userSearch.FirstName'  						Title = userSearch.DisplayName  					};  					searchDoc.Keywords.Add (propertyName' propertyValue);  					searchDoc.NumericKeys.Add ("superuser"' Convert.ToInt32 (userSearch.SuperUser));  					searchDocuments.Add (uniqueKey' searchDoc);  				}  			}  		}  		rowsAffected++;  	}  }  
Magic Number,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,FindModifiedUsers,The following statement contains a magic number: using (var reader = DataProvider.Instance ().GetAvailableUsersForIndex (portalId' startDateLocal' startUserId' BatchSize)) {  	while (reader.Read ()) {  		var userSearch = GetUserSearch (reader);  		if (userSearch == null)  			continue;  		AddBasicInformation (searchDocuments' indexedUsers' userSearch' portalId);  		//log the userid so that it can get the correct user collection next time.  		if (userSearch.UserId > startUserId) {  			startUserId = userSearch.UserId;  		}  		foreach (var definition in profileDefinitions) {  			var propertyName = definition.PropertyName;  			if (!ContainsColumn (propertyName' reader)) {  				continue;  			}  			var propertyValue = reader [propertyName].ToString ();  			if (string.IsNullOrEmpty (propertyValue) || !propertyValue.Contains (ValueSplitFlag)) {  				continue;  			}  			var splitValues = Regex.Split (propertyValue' Regex.Escape (ValueSplitFlag));  			propertyValue = splitValues [0];  			var visibilityMode = ((UserVisibilityMode)Convert.ToInt32 (splitValues [1]));  			var extendedVisibility = splitValues [2];  			var modifiedTime = Convert.ToDateTime (splitValues [3]).ToUniversalTime ();  			if (string.IsNullOrEmpty (propertyValue)) {  				continue;  			}  			//DNN-5740 / DNN-9040: replace split flag if it included in property value.  			propertyValue = propertyValue.Replace ("[$]"' "$");  			var uniqueKey = string.Format ("{0}_{1}"' userSearch.UserId' visibilityMode).ToLowerInvariant ();  			if (visibilityMode == UserVisibilityMode.FriendsAndGroups) {  				uniqueKey = string.Format ("{0}_{1}"' uniqueKey' extendedVisibility);  			}  			if (searchDocuments.ContainsKey (uniqueKey)) {  				var document = searchDocuments [uniqueKey];  				document.Keywords.Add (propertyName' propertyValue);  				if (modifiedTime > document.ModifiedTimeUtc) {  					document.ModifiedTimeUtc = modifiedTime;  				}  			} else {  				//Need remove use exists index for all visibilities.  				if (!indexedUsers.Contains (userSearch.UserId)) {  					indexedUsers.Add (userSearch.UserId);  				}  				if (!string.IsNullOrEmpty (propertyValue)) {  					var searchDoc = new SearchDocument {  						SearchTypeId = UserSearchTypeId'  						UniqueKey = uniqueKey'  						PortalId = portalId'  						ModifiedTimeUtc = modifiedTime'  						Description = userSearch.FirstName'  						Title = userSearch.DisplayName  					};  					searchDoc.Keywords.Add (propertyName' propertyValue);  					searchDoc.NumericKeys.Add ("superuser"' Convert.ToInt32 (userSearch.SuperUser));  					searchDocuments.Add (uniqueKey' searchDoc);  				}  			}  		}  		rowsAffected++;  	}  }  
Magic Number,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,FindModifiedUsers,The following statement contains a magic number: while (reader.Read ()) {  	var userSearch = GetUserSearch (reader);  	if (userSearch == null)  		continue;  	AddBasicInformation (searchDocuments' indexedUsers' userSearch' portalId);  	//log the userid so that it can get the correct user collection next time.  	if (userSearch.UserId > startUserId) {  		startUserId = userSearch.UserId;  	}  	foreach (var definition in profileDefinitions) {  		var propertyName = definition.PropertyName;  		if (!ContainsColumn (propertyName' reader)) {  			continue;  		}  		var propertyValue = reader [propertyName].ToString ();  		if (string.IsNullOrEmpty (propertyValue) || !propertyValue.Contains (ValueSplitFlag)) {  			continue;  		}  		var splitValues = Regex.Split (propertyValue' Regex.Escape (ValueSplitFlag));  		propertyValue = splitValues [0];  		var visibilityMode = ((UserVisibilityMode)Convert.ToInt32 (splitValues [1]));  		var extendedVisibility = splitValues [2];  		var modifiedTime = Convert.ToDateTime (splitValues [3]).ToUniversalTime ();  		if (string.IsNullOrEmpty (propertyValue)) {  			continue;  		}  		//DNN-5740 / DNN-9040: replace split flag if it included in property value.  		propertyValue = propertyValue.Replace ("[$]"' "$");  		var uniqueKey = string.Format ("{0}_{1}"' userSearch.UserId' visibilityMode).ToLowerInvariant ();  		if (visibilityMode == UserVisibilityMode.FriendsAndGroups) {  			uniqueKey = string.Format ("{0}_{1}"' uniqueKey' extendedVisibility);  		}  		if (searchDocuments.ContainsKey (uniqueKey)) {  			var document = searchDocuments [uniqueKey];  			document.Keywords.Add (propertyName' propertyValue);  			if (modifiedTime > document.ModifiedTimeUtc) {  				document.ModifiedTimeUtc = modifiedTime;  			}  		} else {  			//Need remove use exists index for all visibilities.  			if (!indexedUsers.Contains (userSearch.UserId)) {  				indexedUsers.Add (userSearch.UserId);  			}  			if (!string.IsNullOrEmpty (propertyValue)) {  				var searchDoc = new SearchDocument {  					SearchTypeId = UserSearchTypeId'  					UniqueKey = uniqueKey'  					PortalId = portalId'  					ModifiedTimeUtc = modifiedTime'  					Description = userSearch.FirstName'  					Title = userSearch.DisplayName  				};  				searchDoc.Keywords.Add (propertyName' propertyValue);  				searchDoc.NumericKeys.Add ("superuser"' Convert.ToInt32 (userSearch.SuperUser));  				searchDocuments.Add (uniqueKey' searchDoc);  			}  		}  	}  	rowsAffected++;  }  
Magic Number,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,FindModifiedUsers,The following statement contains a magic number: while (reader.Read ()) {  	var userSearch = GetUserSearch (reader);  	if (userSearch == null)  		continue;  	AddBasicInformation (searchDocuments' indexedUsers' userSearch' portalId);  	//log the userid so that it can get the correct user collection next time.  	if (userSearch.UserId > startUserId) {  		startUserId = userSearch.UserId;  	}  	foreach (var definition in profileDefinitions) {  		var propertyName = definition.PropertyName;  		if (!ContainsColumn (propertyName' reader)) {  			continue;  		}  		var propertyValue = reader [propertyName].ToString ();  		if (string.IsNullOrEmpty (propertyValue) || !propertyValue.Contains (ValueSplitFlag)) {  			continue;  		}  		var splitValues = Regex.Split (propertyValue' Regex.Escape (ValueSplitFlag));  		propertyValue = splitValues [0];  		var visibilityMode = ((UserVisibilityMode)Convert.ToInt32 (splitValues [1]));  		var extendedVisibility = splitValues [2];  		var modifiedTime = Convert.ToDateTime (splitValues [3]).ToUniversalTime ();  		if (string.IsNullOrEmpty (propertyValue)) {  			continue;  		}  		//DNN-5740 / DNN-9040: replace split flag if it included in property value.  		propertyValue = propertyValue.Replace ("[$]"' "$");  		var uniqueKey = string.Format ("{0}_{1}"' userSearch.UserId' visibilityMode).ToLowerInvariant ();  		if (visibilityMode == UserVisibilityMode.FriendsAndGroups) {  			uniqueKey = string.Format ("{0}_{1}"' uniqueKey' extendedVisibility);  		}  		if (searchDocuments.ContainsKey (uniqueKey)) {  			var document = searchDocuments [uniqueKey];  			document.Keywords.Add (propertyName' propertyValue);  			if (modifiedTime > document.ModifiedTimeUtc) {  				document.ModifiedTimeUtc = modifiedTime;  			}  		} else {  			//Need remove use exists index for all visibilities.  			if (!indexedUsers.Contains (userSearch.UserId)) {  				indexedUsers.Add (userSearch.UserId);  			}  			if (!string.IsNullOrEmpty (propertyValue)) {  				var searchDoc = new SearchDocument {  					SearchTypeId = UserSearchTypeId'  					UniqueKey = uniqueKey'  					PortalId = portalId'  					ModifiedTimeUtc = modifiedTime'  					Description = userSearch.FirstName'  					Title = userSearch.DisplayName  				};  				searchDoc.Keywords.Add (propertyName' propertyValue);  				searchDoc.NumericKeys.Add ("superuser"' Convert.ToInt32 (userSearch.SuperUser));  				searchDocuments.Add (uniqueKey' searchDoc);  			}  		}  	}  	rowsAffected++;  }  
Magic Number,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,FindModifiedUsers,The following statement contains a magic number: foreach (var definition in profileDefinitions) {  	var propertyName = definition.PropertyName;  	if (!ContainsColumn (propertyName' reader)) {  		continue;  	}  	var propertyValue = reader [propertyName].ToString ();  	if (string.IsNullOrEmpty (propertyValue) || !propertyValue.Contains (ValueSplitFlag)) {  		continue;  	}  	var splitValues = Regex.Split (propertyValue' Regex.Escape (ValueSplitFlag));  	propertyValue = splitValues [0];  	var visibilityMode = ((UserVisibilityMode)Convert.ToInt32 (splitValues [1]));  	var extendedVisibility = splitValues [2];  	var modifiedTime = Convert.ToDateTime (splitValues [3]).ToUniversalTime ();  	if (string.IsNullOrEmpty (propertyValue)) {  		continue;  	}  	//DNN-5740 / DNN-9040: replace split flag if it included in property value.  	propertyValue = propertyValue.Replace ("[$]"' "$");  	var uniqueKey = string.Format ("{0}_{1}"' userSearch.UserId' visibilityMode).ToLowerInvariant ();  	if (visibilityMode == UserVisibilityMode.FriendsAndGroups) {  		uniqueKey = string.Format ("{0}_{1}"' uniqueKey' extendedVisibility);  	}  	if (searchDocuments.ContainsKey (uniqueKey)) {  		var document = searchDocuments [uniqueKey];  		document.Keywords.Add (propertyName' propertyValue);  		if (modifiedTime > document.ModifiedTimeUtc) {  			document.ModifiedTimeUtc = modifiedTime;  		}  	} else {  		//Need remove use exists index for all visibilities.  		if (!indexedUsers.Contains (userSearch.UserId)) {  			indexedUsers.Add (userSearch.UserId);  		}  		if (!string.IsNullOrEmpty (propertyValue)) {  			var searchDoc = new SearchDocument {  				SearchTypeId = UserSearchTypeId'  				UniqueKey = uniqueKey'  				PortalId = portalId'  				ModifiedTimeUtc = modifiedTime'  				Description = userSearch.FirstName'  				Title = userSearch.DisplayName  			};  			searchDoc.Keywords.Add (propertyName' propertyValue);  			searchDoc.NumericKeys.Add ("superuser"' Convert.ToInt32 (userSearch.SuperUser));  			searchDocuments.Add (uniqueKey' searchDoc);  		}  	}  }  
Magic Number,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,FindModifiedUsers,The following statement contains a magic number: foreach (var definition in profileDefinitions) {  	var propertyName = definition.PropertyName;  	if (!ContainsColumn (propertyName' reader)) {  		continue;  	}  	var propertyValue = reader [propertyName].ToString ();  	if (string.IsNullOrEmpty (propertyValue) || !propertyValue.Contains (ValueSplitFlag)) {  		continue;  	}  	var splitValues = Regex.Split (propertyValue' Regex.Escape (ValueSplitFlag));  	propertyValue = splitValues [0];  	var visibilityMode = ((UserVisibilityMode)Convert.ToInt32 (splitValues [1]));  	var extendedVisibility = splitValues [2];  	var modifiedTime = Convert.ToDateTime (splitValues [3]).ToUniversalTime ();  	if (string.IsNullOrEmpty (propertyValue)) {  		continue;  	}  	//DNN-5740 / DNN-9040: replace split flag if it included in property value.  	propertyValue = propertyValue.Replace ("[$]"' "$");  	var uniqueKey = string.Format ("{0}_{1}"' userSearch.UserId' visibilityMode).ToLowerInvariant ();  	if (visibilityMode == UserVisibilityMode.FriendsAndGroups) {  		uniqueKey = string.Format ("{0}_{1}"' uniqueKey' extendedVisibility);  	}  	if (searchDocuments.ContainsKey (uniqueKey)) {  		var document = searchDocuments [uniqueKey];  		document.Keywords.Add (propertyName' propertyValue);  		if (modifiedTime > document.ModifiedTimeUtc) {  			document.ModifiedTimeUtc = modifiedTime;  		}  	} else {  		//Need remove use exists index for all visibilities.  		if (!indexedUsers.Contains (userSearch.UserId)) {  			indexedUsers.Add (userSearch.UserId);  		}  		if (!string.IsNullOrEmpty (propertyValue)) {  			var searchDoc = new SearchDocument {  				SearchTypeId = UserSearchTypeId'  				UniqueKey = uniqueKey'  				PortalId = portalId'  				ModifiedTimeUtc = modifiedTime'  				Description = userSearch.FirstName'  				Title = userSearch.DisplayName  			};  			searchDoc.Keywords.Add (propertyName' propertyValue);  			searchDoc.NumericKeys.Add ("superuser"' Convert.ToInt32 (userSearch.SuperUser));  			searchDocuments.Add (uniqueKey' searchDoc);  		}  	}  }  
Magic Number,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,DeleteDocuments,The following statement contains a magic number: foreach (var item in values) {  	var keyword = new StringBuilder ("(");  	foreach (var userId in usersList) {  		var mode = Enum.GetName (typeof(UserVisibilityMode)' item);  		keyword.AppendFormat ("{2} {0}_{1} OR {0}_{1}* "' userId' mode' keyword.Length > 1 ? "OR " : string.Empty);  		clauseCount += 2;  		if (clauseCount >= ClauseMaxCount)//max cluaseCount is 1024' if reach the max value' perform a delete action.   		 {  			keyword.Append (")");  			PerformDelete (portalId' keyword.ToString ().ToLowerInvariant ());  			keyword.Clear ().Append ("(");  			clauseCount = 0;  		}  	}  	if (keyword.Length > 1) {  		keyword.Append (")");  		PerformDelete (portalId' keyword.ToString ().ToLowerInvariant ());  	}  }  
Magic Number,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,DeleteDocuments,The following statement contains a magic number: foreach (var userId in usersList) {  	var mode = Enum.GetName (typeof(UserVisibilityMode)' item);  	keyword.AppendFormat ("{2} {0}_{1} OR {0}_{1}* "' userId' mode' keyword.Length > 1 ? "OR " : string.Empty);  	clauseCount += 2;  	if (clauseCount >= ClauseMaxCount)//max cluaseCount is 1024' if reach the max value' perform a delete action.   	 {  		keyword.Append (")");  		PerformDelete (portalId' keyword.ToString ().ToLowerInvariant ());  		keyword.Clear ().Append ("(");  		clauseCount = 0;  	}  }  
Magic Number,DotNetNuke.Services.Search,UserIndexer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\UserIndexer.cs,DeleteDocuments,The following statement contains a magic number: clauseCount += 2;  
Magic Number,DotNetNuke.Services.Search,SearchEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchEngine.cs,GetAndStoreSearchDocuments,The following statement contains a magic number: foreach (var portal in portals.Cast<PortalInfo> ()) {  	indexSince = FixedIndexingStartDate (portal.PortalID);  	try {  		indexedCount += indexer.IndexSearchDocuments (portal.PortalID' SchedulerItem' indexSince' StoreSearchDocuments);  	} catch (NotImplementedException) {  		#pragma  		searchDocs = indexer.GetSearchDocuments (portal.PortalID' indexSince).ToList ();  		#pragma  		StoreSearchDocuments (searchDocs);  		indexedCount += searchDocs.Count ();  	}  }  
Magic Number,DotNetNuke.Services.Search,SearchEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchEngine.cs,GetAndStoreSearchDocuments,The following statement contains a magic number: foreach (var portal in portals.Cast<PortalInfo> ()) {  	indexSince = FixedIndexingStartDate (portal.PortalID);  	try {  		indexedCount += indexer.IndexSearchDocuments (portal.PortalID' SchedulerItem' indexSince' StoreSearchDocuments);  	} catch (NotImplementedException) {  		#pragma  		searchDocs = indexer.GetSearchDocuments (portal.PortalID' indexSince).ToList ();  		#pragma  		StoreSearchDocuments (searchDocs);  		indexedCount += searchDocs.Count ();  	}  }  
Magic Number,DotNetNuke.Services.Search,SearchEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchEngine.cs,GetAndStoreSearchDocuments,The following statement contains a magic number: try {  	indexedCount += indexer.IndexSearchDocuments (portal.PortalID' SchedulerItem' indexSince' StoreSearchDocuments);  } catch (NotImplementedException) {  	#pragma  	searchDocs = indexer.GetSearchDocuments (portal.PortalID' indexSince).ToList ();  	#pragma  	StoreSearchDocuments (searchDocs);  	indexedCount += searchDocs.Count ();  }  
Magic Number,DotNetNuke.Services.Search,SearchEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchEngine.cs,GetAndStoreSearchDocuments,The following statement contains a magic number: try {  	indexedCount += indexer.IndexSearchDocuments (portal.PortalID' SchedulerItem' indexSince' StoreSearchDocuments);  } catch (NotImplementedException) {  	#pragma  	searchDocs = indexer.GetSearchDocuments (portal.PortalID' indexSince).ToList ();  	#pragma  	StoreSearchDocuments (searchDocs);  	indexedCount += searchDocs.Count ();  }  
Magic Number,DotNetNuke.Services.Search,SearchEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchEngine.cs,GetAndStoreSearchDocuments,The following statement contains a magic number: try {  	indexedCount += indexer.IndexSearchDocuments (Null.NullInteger' SchedulerItem' indexSince' StoreSearchDocuments);  } catch (NotImplementedException) {  	#pragma  	searchDocs = indexer.GetSearchDocuments (-1' indexSince).ToList ();  	#pragma  	StoreSearchDocuments (searchDocs);  	indexedCount += searchDocs.Count ();  }  
Magic Number,DotNetNuke.Services.Search,SearchEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\SearchEngine.cs,GetAndStoreSearchDocuments,The following statement contains a magic number: try {  	indexedCount += indexer.IndexSearchDocuments (Null.NullInteger' SchedulerItem' indexSince' StoreSearchDocuments);  } catch (NotImplementedException) {  	#pragma  	searchDocs = indexer.GetSearchDocuments (-1' indexSince).ToList ();  	#pragma  	StoreSearchDocuments (searchDocs);  	indexedCount += searchDocs.Count ();  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ExecuteScript,The following statement contains a magic number: if (writeFeedback) {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' Localization.Localization.GetString ("ExecutingScript"' Localization.Localization.GlobalResourceFile) + ":" + Path.GetFileName (scriptFile));  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ExecuteScript,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' Localization.Localization.GetString ("ExecutingScript"' Localization.Localization.GlobalResourceFile) + ":" + Path.GetFileName (scriptFile));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallMemberRoleProviderScript,The following statement contains a magic number: if (writeFeedback) {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "Executing Script: " + scriptFile + "<br>");  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallMemberRoleProviderScript,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "Executing Script: " + scriptFile + "<br>");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The following statement contains a magic number: ProfileController.AddDefaultDefinition (Null.NullInteger' "Preferences"' "Photo"' "Image"' 0' properties.Count * 2 + 2' UserVisibilityMode.AllUsers' dataTypes);  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The following statement contains a magic number: ProfileController.AddDefaultDefinition (Null.NullInteger' "Preferences"' "Photo"' "Image"' 0' properties.Count * 2 + 2' UserVisibilityMode.AllUsers' dataTypes);  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The following statement contains a magic number: if (File.Exists (hostTemplateFile)) {  	ArrayList portals = PortalController.Instance.GetPortals ();  	foreach (PortalInfo portal in portals) {  		properties = ProfileController.GetPropertyDefinitionsByPortal (portal.PortalID);  		//Add new Photo Profile field to Portal  		ProfileController.AddDefaultDefinition (portal.PortalID' "Preferences"' "Photo"' "Image"' 0' properties.Count * 2 + 2' UserVisibilityMode.AllUsers' dataTypes);  		//Rename old Default Page template  		string defaultPageTemplatePath = string.Format ("{0}Templates\\Default.page.template"' portal.HomeDirectoryMapPath);  		if (File.Exists (defaultPageTemplatePath)) {  			File.Move (defaultPageTemplatePath' String.Format ("{0}Templates\\Default_old.page.template"' portal.HomeDirectoryMapPath));  		}  		//Update Default profile template in every portal  		PortalController.Instance.CopyPageTemplate ("Default.page.template"' portal.HomeDirectoryMapPath);  		//Add User profile template to every portal  		PortalController.Instance.CopyPageTemplate ("UserProfile.page.template"' portal.HomeDirectoryMapPath);  		//Synchronize the Templates folder to ensure the templates are accessible  		FolderManager.Instance.Synchronize (portal.PortalID' "Templates/"' false' true);  		var xmlDoc = new XmlDocument ();  		try {  			// open the XML file  			xmlDoc.Load (hostTemplateFile);  		} catch (Exception ex) {  			Exceptions.Exceptions.LogException (ex);  		}  		XmlNode userTabNode = xmlDoc.SelectSingleNode ("//portal/tabs/tab");  		if (userTabNode != null) {  			string tabName = XmlUtils.GetNodeValue (userTabNode.CreateNavigator ()' "name");  			var userTab = TabController.Instance.GetTabByName (tabName' portal.PortalID) ?? TabController.DeserializeTab (userTabNode' null' portal.PortalID' PortalTemplateModuleAction.Merge);  			//Update SiteSettings to point to the new page  			if (portal.UserTabId > Null.NullInteger) {  				portal.RegisterTabId = portal.UserTabId;  			} else {  				portal.UserTabId = userTab.TabID;  			}  		}  		PortalController.Instance.UpdatePortalInfo (portal);  		//Add Users folder to every portal  		string usersFolder = string.Format ("{0}Users\\"' portal.HomeDirectoryMapPath);  		if (!Directory.Exists (usersFolder)) {  			//Create Users folder  			Directory.CreateDirectory (usersFolder);  			//Synchronize the Users folder to ensure the user folder is accessible  			FolderManager.Instance.Synchronize (portal.PortalID' "Users/"' false' true);  		}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The following statement contains a magic number: if (File.Exists (hostTemplateFile)) {  	ArrayList portals = PortalController.Instance.GetPortals ();  	foreach (PortalInfo portal in portals) {  		properties = ProfileController.GetPropertyDefinitionsByPortal (portal.PortalID);  		//Add new Photo Profile field to Portal  		ProfileController.AddDefaultDefinition (portal.PortalID' "Preferences"' "Photo"' "Image"' 0' properties.Count * 2 + 2' UserVisibilityMode.AllUsers' dataTypes);  		//Rename old Default Page template  		string defaultPageTemplatePath = string.Format ("{0}Templates\\Default.page.template"' portal.HomeDirectoryMapPath);  		if (File.Exists (defaultPageTemplatePath)) {  			File.Move (defaultPageTemplatePath' String.Format ("{0}Templates\\Default_old.page.template"' portal.HomeDirectoryMapPath));  		}  		//Update Default profile template in every portal  		PortalController.Instance.CopyPageTemplate ("Default.page.template"' portal.HomeDirectoryMapPath);  		//Add User profile template to every portal  		PortalController.Instance.CopyPageTemplate ("UserProfile.page.template"' portal.HomeDirectoryMapPath);  		//Synchronize the Templates folder to ensure the templates are accessible  		FolderManager.Instance.Synchronize (portal.PortalID' "Templates/"' false' true);  		var xmlDoc = new XmlDocument ();  		try {  			// open the XML file  			xmlDoc.Load (hostTemplateFile);  		} catch (Exception ex) {  			Exceptions.Exceptions.LogException (ex);  		}  		XmlNode userTabNode = xmlDoc.SelectSingleNode ("//portal/tabs/tab");  		if (userTabNode != null) {  			string tabName = XmlUtils.GetNodeValue (userTabNode.CreateNavigator ()' "name");  			var userTab = TabController.Instance.GetTabByName (tabName' portal.PortalID) ?? TabController.DeserializeTab (userTabNode' null' portal.PortalID' PortalTemplateModuleAction.Merge);  			//Update SiteSettings to point to the new page  			if (portal.UserTabId > Null.NullInteger) {  				portal.RegisterTabId = portal.UserTabId;  			} else {  				portal.UserTabId = userTab.TabID;  			}  		}  		PortalController.Instance.UpdatePortalInfo (portal);  		//Add Users folder to every portal  		string usersFolder = string.Format ("{0}Users\\"' portal.HomeDirectoryMapPath);  		if (!Directory.Exists (usersFolder)) {  			//Create Users folder  			Directory.CreateDirectory (usersFolder);  			//Synchronize the Users folder to ensure the user folder is accessible  			FolderManager.Instance.Synchronize (portal.PortalID' "Users/"' false' true);  		}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The following statement contains a magic number: foreach (PortalInfo portal in portals) {  	properties = ProfileController.GetPropertyDefinitionsByPortal (portal.PortalID);  	//Add new Photo Profile field to Portal  	ProfileController.AddDefaultDefinition (portal.PortalID' "Preferences"' "Photo"' "Image"' 0' properties.Count * 2 + 2' UserVisibilityMode.AllUsers' dataTypes);  	//Rename old Default Page template  	string defaultPageTemplatePath = string.Format ("{0}Templates\\Default.page.template"' portal.HomeDirectoryMapPath);  	if (File.Exists (defaultPageTemplatePath)) {  		File.Move (defaultPageTemplatePath' String.Format ("{0}Templates\\Default_old.page.template"' portal.HomeDirectoryMapPath));  	}  	//Update Default profile template in every portal  	PortalController.Instance.CopyPageTemplate ("Default.page.template"' portal.HomeDirectoryMapPath);  	//Add User profile template to every portal  	PortalController.Instance.CopyPageTemplate ("UserProfile.page.template"' portal.HomeDirectoryMapPath);  	//Synchronize the Templates folder to ensure the templates are accessible  	FolderManager.Instance.Synchronize (portal.PortalID' "Templates/"' false' true);  	var xmlDoc = new XmlDocument ();  	try {  		// open the XML file  		xmlDoc.Load (hostTemplateFile);  	} catch (Exception ex) {  		Exceptions.Exceptions.LogException (ex);  	}  	XmlNode userTabNode = xmlDoc.SelectSingleNode ("//portal/tabs/tab");  	if (userTabNode != null) {  		string tabName = XmlUtils.GetNodeValue (userTabNode.CreateNavigator ()' "name");  		var userTab = TabController.Instance.GetTabByName (tabName' portal.PortalID) ?? TabController.DeserializeTab (userTabNode' null' portal.PortalID' PortalTemplateModuleAction.Merge);  		//Update SiteSettings to point to the new page  		if (portal.UserTabId > Null.NullInteger) {  			portal.RegisterTabId = portal.UserTabId;  		} else {  			portal.UserTabId = userTab.TabID;  		}  	}  	PortalController.Instance.UpdatePortalInfo (portal);  	//Add Users folder to every portal  	string usersFolder = string.Format ("{0}Users\\"' portal.HomeDirectoryMapPath);  	if (!Directory.Exists (usersFolder)) {  		//Create Users folder  		Directory.CreateDirectory (usersFolder);  		//Synchronize the Users folder to ensure the user folder is accessible  		FolderManager.Instance.Synchronize (portal.PortalID' "Users/"' false' true);  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The following statement contains a magic number: foreach (PortalInfo portal in portals) {  	properties = ProfileController.GetPropertyDefinitionsByPortal (portal.PortalID);  	//Add new Photo Profile field to Portal  	ProfileController.AddDefaultDefinition (portal.PortalID' "Preferences"' "Photo"' "Image"' 0' properties.Count * 2 + 2' UserVisibilityMode.AllUsers' dataTypes);  	//Rename old Default Page template  	string defaultPageTemplatePath = string.Format ("{0}Templates\\Default.page.template"' portal.HomeDirectoryMapPath);  	if (File.Exists (defaultPageTemplatePath)) {  		File.Move (defaultPageTemplatePath' String.Format ("{0}Templates\\Default_old.page.template"' portal.HomeDirectoryMapPath));  	}  	//Update Default profile template in every portal  	PortalController.Instance.CopyPageTemplate ("Default.page.template"' portal.HomeDirectoryMapPath);  	//Add User profile template to every portal  	PortalController.Instance.CopyPageTemplate ("UserProfile.page.template"' portal.HomeDirectoryMapPath);  	//Synchronize the Templates folder to ensure the templates are accessible  	FolderManager.Instance.Synchronize (portal.PortalID' "Templates/"' false' true);  	var xmlDoc = new XmlDocument ();  	try {  		// open the XML file  		xmlDoc.Load (hostTemplateFile);  	} catch (Exception ex) {  		Exceptions.Exceptions.LogException (ex);  	}  	XmlNode userTabNode = xmlDoc.SelectSingleNode ("//portal/tabs/tab");  	if (userTabNode != null) {  		string tabName = XmlUtils.GetNodeValue (userTabNode.CreateNavigator ()' "name");  		var userTab = TabController.Instance.GetTabByName (tabName' portal.PortalID) ?? TabController.DeserializeTab (userTabNode' null' portal.PortalID' PortalTemplateModuleAction.Merge);  		//Update SiteSettings to point to the new page  		if (portal.UserTabId > Null.NullInteger) {  			portal.RegisterTabId = portal.UserTabId;  		} else {  			portal.UserTabId = userTab.TabID;  		}  	}  	PortalController.Instance.UpdatePortalInfo (portal);  	//Add Users folder to every portal  	string usersFolder = string.Format ("{0}Users\\"' portal.HomeDirectoryMapPath);  	if (!Directory.Exists (usersFolder)) {  		//Create Users folder  		Directory.CreateDirectory (usersFolder);  		//Synchronize the Users folder to ensure the user folder is accessible  		FolderManager.Instance.Synchronize (portal.PortalID' "Users/"' false' true);  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The following statement contains a magic number: ProfileController.AddDefaultDefinition (portal.PortalID' "Preferences"' "Photo"' "Image"' 0' properties.Count * 2 + 2' UserVisibilityMode.AllUsers' dataTypes);  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion530,The following statement contains a magic number: ProfileController.AddDefaultDefinition (portal.PortalID' "Preferences"' "Photo"' "Image"' 0' properties.Count * 2 + 2' UserVisibilityMode.AllUsers' dataTypes);  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The following statement contains a magic number: ProfileController.AddDefaultDefinition (Null.NullInteger' "Preferences"' "Photo"' "Image"' 0' properties.Count * 2 + 2' UserVisibilityMode.AllUsers' dataTypes);  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion562,The following statement contains a magic number: ProfileController.AddDefaultDefinition (Null.NullInteger' "Preferences"' "Photo"' "Image"' 0' properties.Count * 2 + 2' UserVisibilityMode.AllUsers' dataTypes);  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion600,The following statement contains a magic number: foreach (PortalInfo portal in PortalController.Instance.GetPortals ()) {  	//update timezoneinfo  	#pragma  	TimeZoneInfo timeZoneInfo = Localization.Localization.ConvertLegacyTimeZoneOffsetToTimeZoneInfo (portal.TimeZoneOffset);  	#pragma  	PortalController.UpdatePortalSetting (portal.PortalID' "TimeZone"' timeZoneInfo.Id' false);  	//6.0 requires the old TimeZone property to be marked as Deleted - Delete for Portals  	ProfilePropertyDefinition ppdTimeZone = ProfileController.GetPropertyDefinitionByName (portal.PortalID' "TimeZone");  	if (ppdTimeZone != null) {  		ProfileController.DeletePropertyDefinition (ppdTimeZone);  	}  	var adminTab = TabController.Instance.GetTab (portal.AdminTabId' portal.PortalID' false);  	adminTab.IsVisible = false;  	TabController.Instance.UpdateTab (adminTab);  	foreach (var module in ModuleController.Instance.GetTabModules (portal.AdminTabId).Values) {  		ModuleController.Instance.UpdateTabModuleSetting (module.TabModuleID' "hideadminborder"' "true");  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion600,The following statement contains a magic number: foreach (PortalInfo portal in PortalController.Instance.GetPortals ()) {  	//update timezoneinfo  	#pragma  	TimeZoneInfo timeZoneInfo = Localization.Localization.ConvertLegacyTimeZoneOffsetToTimeZoneInfo (portal.TimeZoneOffset);  	#pragma  	PortalController.UpdatePortalSetting (portal.PortalID' "TimeZone"' timeZoneInfo.Id' false);  	//6.0 requires the old TimeZone property to be marked as Deleted - Delete for Portals  	ProfilePropertyDefinition ppdTimeZone = ProfileController.GetPropertyDefinitionByName (portal.PortalID' "TimeZone");  	if (ppdTimeZone != null) {  		ProfileController.DeletePropertyDefinition (ppdTimeZone);  	}  	var adminTab = TabController.Instance.GetTab (portal.AdminTabId' portal.PortalID' false);  	adminTab.IsVisible = false;  	TabController.Instance.UpdateTab (adminTab);  	foreach (var module in ModuleController.Instance.GetTabModules (portal.AdminTabId).Values) {  		ModuleController.Instance.UpdateTabModuleSetting (module.TabModuleID' "hideadminborder"' "true");  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion600,The following statement contains a magic number: foreach (PortalInfo portal in PortalController.Instance.GetPortals ()) {  	//update timezoneinfo  	#pragma  	TimeZoneInfo timeZoneInfo = Localization.Localization.ConvertLegacyTimeZoneOffsetToTimeZoneInfo (portal.TimeZoneOffset);  	#pragma  	PortalController.UpdatePortalSetting (portal.PortalID' "TimeZone"' timeZoneInfo.Id' false);  	//6.0 requires the old TimeZone property to be marked as Deleted - Delete for Portals  	ProfilePropertyDefinition ppdTimeZone = ProfileController.GetPropertyDefinitionByName (portal.PortalID' "TimeZone");  	if (ppdTimeZone != null) {  		ProfileController.DeletePropertyDefinition (ppdTimeZone);  	}  	var adminTab = TabController.Instance.GetTab (portal.AdminTabId' portal.PortalID' false);  	adminTab.IsVisible = false;  	TabController.Instance.UpdateTab (adminTab);  	foreach (var module in ModuleController.Instance.GetTabModules (portal.AdminTabId).Values) {  		ModuleController.Instance.UpdateTabModuleSetting (module.TabModuleID' "hideadminborder"' "true");  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeToVersion600,The following statement contains a magic number: foreach (PortalInfo portal in PortalController.Instance.GetPortals ()) {  	//update timezoneinfo  	#pragma  	TimeZoneInfo timeZoneInfo = Localization.Localization.ConvertLegacyTimeZoneOffsetToTimeZoneInfo (portal.TimeZoneOffset);  	#pragma  	PortalController.UpdatePortalSetting (portal.PortalID' "TimeZone"' timeZoneInfo.Id' false);  	//6.0 requires the old TimeZone property to be marked as Deleted - Delete for Portals  	ProfilePropertyDefinition ppdTimeZone = ProfileController.GetPropertyDefinitionByName (portal.PortalID' "TimeZone");  	if (ppdTimeZone != null) {  		ProfileController.DeletePropertyDefinition (ppdTimeZone);  	}  	var adminTab = TabController.Instance.GetTab (portal.AdminTabId' portal.PortalID' false);  	adminTab.IsVisible = false;  	TabController.Instance.UpdateTab (adminTab);  	foreach (var module in ModuleController.Instance.GetTabModules (portal.AdminTabId).Values) {  		ModuleController.Instance.UpdateTabModuleSetting (module.TabModuleID' "hideadminborder"' "true");  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateFoldersForParentId,The following statement contains a magic number: if (foldersRemaining > 0) {  	//Create an empty line  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<br/>"' false);  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateFoldersForParentId,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<br/>"' false);  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateFoldersForParentId,The following statement contains a magic number: while (foldersRemaining > 0) {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' string.Format ("Converting old Folders to new format. Total: {0} [Remaining: {1}]<br/>"' foldersToConvert' foldersRemaining));  	try {  		using (DataProvider.Instance ().UpdateLegacyFolders ()) {  		}  	} catch (Exception ex) {  		Exceptions.Exceptions.LogException (ex);  	}  	foldersRemaining = DataProvider.Instance ().GetLegacyFolderCount ();  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateFoldersForParentId,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' string.Format ("Converting old Folders to new format. Total: {0} [Remaining: {1}]<br/>"' foldersToConvert' foldersRemaining));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateFoldersForParentId,The following statement contains a magic number: if (foldersToConvert > 0) {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' string.Format ("Conversion of old Folders Completed. Total Converted: {0}<br/>"' foldersToConvert));  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateFoldersForParentId,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' string.Format ("Conversion of old Folders Completed. Total Converted: {0}<br/>"' foldersToConvert));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ConvertOldMessages,The following statement contains a magic number: if (messagesRemaining > 0) {  	//Create an empty line  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<br/>"' false);  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ConvertOldMessages,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<br/>"' false);  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ConvertOldMessages,The following statement contains a magic number: while (messagesRemaining > 0) {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' string.Format ("Converting old Messages to new format. Total: {0} [Remaining: {1}]<br/>"' messagesToConvert' messagesRemaining));  	try {  		InternalMessagingController.Instance.ConvertLegacyMessages (0' batchSize);  	} catch (Exception ex) {  		Exceptions.Exceptions.LogException (ex);  	}  	messagesRemaining -= batchSize;  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ConvertOldMessages,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' string.Format ("Converting old Messages to new format. Total: {0} [Remaining: {1}]<br/>"' messagesToConvert' messagesRemaining));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ConvertOldMessages,The following statement contains a magic number: if (messagesToConvert > 0) {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' string.Format ("Conversion of old Messages Completed. Total Converted: {0}<br/>"' messagesToConvert));  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ConvertOldMessages,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' string.Format ("Conversion of old Messages Completed. Total Converted: {0}<br/>"' messagesToConvert));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,MovePhotoProperty,The following statement contains a magic number: foreach (PortalInfo portal in PortalController.Instance.GetPortals ()) {  	var properties = ProfileController.GetPropertyDefinitionsByPortal (portal.PortalID).Cast<ProfilePropertyDefinition> ();  	var propPhoto = properties.FirstOrDefault (p => p.PropertyName == "Photo");  	if (propPhoto != null) {  		var maxOrder = properties.Max (p => p.ViewOrder);  		if (propPhoto.ViewOrder != maxOrder) {  			properties.Where (p => p.ViewOrder > propPhoto.ViewOrder).ToList ().ForEach (p => {  				p.ViewOrder -= 2;  				ProfileController.UpdatePropertyDefinition (p);  			});  			propPhoto.ViewOrder = maxOrder;  			ProfileController.UpdatePropertyDefinition (propPhoto);  		}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,MovePhotoProperty,The following statement contains a magic number: if (propPhoto != null) {  	var maxOrder = properties.Max (p => p.ViewOrder);  	if (propPhoto.ViewOrder != maxOrder) {  		properties.Where (p => p.ViewOrder > propPhoto.ViewOrder).ToList ().ForEach (p => {  			p.ViewOrder -= 2;  			ProfileController.UpdatePropertyDefinition (p);  		});  		propPhoto.ViewOrder = maxOrder;  		ProfileController.UpdatePropertyDefinition (propPhoto);  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,MovePhotoProperty,The following statement contains a magic number: if (propPhoto.ViewOrder != maxOrder) {  	properties.Where (p => p.ViewOrder > propPhoto.ViewOrder).ToList ().ForEach (p => {  		p.ViewOrder -= 2;  		ProfileController.UpdatePropertyDefinition (p);  	});  	propPhoto.ViewOrder = maxOrder;  	ProfileController.UpdatePropertyDefinition (propPhoto);  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,MovePhotoProperty,The following statement contains a magic number: properties.Where (p => p.ViewOrder > propPhoto.ViewOrder).ToList ().ForEach (p => {  	p.ViewOrder -= 2;  	ProfileController.UpdatePropertyDefinition (p);  });  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,MovePhotoProperty,The following statement contains a magic number: p.ViewOrder -= 2;  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,FindBestTemplate,The following statement contains a magic number: if (match == null) {  	match = defaultTemplates.FirstOrDefault (x => x.CultureCode.ToLower ().StartsWith (currentCulture.Substring (0' 2)));  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,FindBestTemplate,The following statement contains a magic number: match = defaultTemplates.FirstOrDefault (x => x.CultureCode.ToLower ().StartsWith (currentCulture.Substring (0' 2)));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,BuildUserTable,The following statement contains a magic number: while (dr.Read ()) {  	hasRows = true;  	stringBuilder.Append ("<tr>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetInt32 (0) + "</td>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetString (1) + "</td>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetString (2) + "</td>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetString (3) + "</td>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetString (4) + "</td>");  	stringBuilder.Append ("</tr>");  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,BuildUserTable,The following statement contains a magic number: while (dr.Read ()) {  	hasRows = true;  	stringBuilder.Append ("<tr>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetInt32 (0) + "</td>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetString (1) + "</td>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetString (2) + "</td>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetString (3) + "</td>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetString (4) + "</td>");  	stringBuilder.Append ("</tr>");  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,BuildUserTable,The following statement contains a magic number: while (dr.Read ()) {  	hasRows = true;  	stringBuilder.Append ("<tr>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetInt32 (0) + "</td>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetString (1) + "</td>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetString (2) + "</td>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetString (3) + "</td>");  	stringBuilder.Append ("<td class='Norma'>" + dr.GetString (4) + "</td>");  	stringBuilder.Append ("</tr>");  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,BuildUserTable,The following statement contains a magic number: stringBuilder.Append ("<td class='Norma'>" + dr.GetString (2) + "</td>");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,BuildUserTable,The following statement contains a magic number: stringBuilder.Append ("<td class='Norma'>" + dr.GetString (3) + "</td>");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,BuildUserTable,The following statement contains a magic number: stringBuilder.Append ("<td class='Norma'>" + dr.GetString (4) + "</td>");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,CheckUpgrade,The following statement contains a magic number: try {  	using (dr = dataProvider.ExecuteReader ("GetUserCount")) {  		dr.Read ();  		int userCount = dr.GetInt32 (0);  		// ReSharper disable PossibleLossOfFraction  		double time = userCount / 10834;  		// ReSharper restore PossibleLossOfFraction  		if (userCount > 1000) {  			warnings += "<br/><h3>More than 1000 Users</h3><p>This DotNetNuke Database has " + userCount + " users. As the users and their profiles are transferred to a new format' it is estimated that the script will take ~" + time.ToString ("F2") + " minutes to execute.</p>";  		}  	}  } catch (Exception ex) {  	Logger.Error (ex);  	warnings += Environment.NewLine + Environment.NewLine + ex.Message;  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,CheckUpgrade,The following statement contains a magic number: try {  	using (dr = dataProvider.ExecuteReader ("GetUserCount")) {  		dr.Read ();  		int userCount = dr.GetInt32 (0);  		// ReSharper disable PossibleLossOfFraction  		double time = userCount / 10834;  		// ReSharper restore PossibleLossOfFraction  		if (userCount > 1000) {  			warnings += "<br/><h3>More than 1000 Users</h3><p>This DotNetNuke Database has " + userCount + " users. As the users and their profiles are transferred to a new format' it is estimated that the script will take ~" + time.ToString ("F2") + " minutes to execute.</p>";  		}  	}  } catch (Exception ex) {  	Logger.Error (ex);  	warnings += Environment.NewLine + Environment.NewLine + ex.Message;  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,CheckUpgrade,The following statement contains a magic number: using (dr = dataProvider.ExecuteReader ("GetUserCount")) {  	dr.Read ();  	int userCount = dr.GetInt32 (0);  	// ReSharper disable PossibleLossOfFraction  	double time = userCount / 10834;  	// ReSharper restore PossibleLossOfFraction  	if (userCount > 1000) {  		warnings += "<br/><h3>More than 1000 Users</h3><p>This DotNetNuke Database has " + userCount + " users. As the users and their profiles are transferred to a new format' it is estimated that the script will take ~" + time.ToString ("F2") + " minutes to execute.</p>";  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,CheckUpgrade,The following statement contains a magic number: using (dr = dataProvider.ExecuteReader ("GetUserCount")) {  	dr.Read ();  	int userCount = dr.GetInt32 (0);  	// ReSharper disable PossibleLossOfFraction  	double time = userCount / 10834;  	// ReSharper restore PossibleLossOfFraction  	if (userCount > 1000) {  		warnings += "<br/><h3>More than 1000 Users</h3><p>This DotNetNuke Database has " + userCount + " users. As the users and their profiles are transferred to a new format' it is estimated that the script will take ~" + time.ToString ("F2") + " minutes to execute.</p>";  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,CheckUpgrade,The following statement contains a magic number: if (userCount > 1000) {  	warnings += "<br/><h3>More than 1000 Users</h3><p>This DotNetNuke Database has " + userCount + " users. As the users and their profiles are transferred to a new format' it is estimated that the script will take ~" + time.ToString ("F2") + " minutes to execute.</p>";  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,DeleteFiles,The following statement contains a magic number: if (writeFeedback) {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "Cleaning Up Files: " + stringVersion);  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,DeleteFiles,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "Cleaning Up Files: " + stringVersion);  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetStringVersion,The following statement contains a magic number: versionArray [2] = version.Build;  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetStringVersion,The following statement contains a magic number: for (int i = 0; i <= 2; i++) {  	if (versionArray [i] == 0) {  		stringVersion += "00";  	} else if (versionArray [i] >= 1 && versionArray [i] <= 9) {  		stringVersion += "0" + versionArray [i];  	} else {  		stringVersion += versionArray [i].ToString ();  	}  	if (i < 2) {  		stringVersion += ".";  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetStringVersion,The following statement contains a magic number: for (int i = 0; i <= 2; i++) {  	if (versionArray [i] == 0) {  		stringVersion += "00";  	} else if (versionArray [i] >= 1 && versionArray [i] <= 9) {  		stringVersion += "0" + versionArray [i];  	} else {  		stringVersion += versionArray [i].ToString ();  	}  	if (i < 2) {  		stringVersion += ".";  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetStringVersion,The following statement contains a magic number: for (int i = 0; i <= 2; i++) {  	if (versionArray [i] == 0) {  		stringVersion += "00";  	} else if (versionArray [i] >= 1 && versionArray [i] <= 9) {  		stringVersion += "0" + versionArray [i];  	} else {  		stringVersion += versionArray [i].ToString ();  	}  	if (i < 2) {  		stringVersion += ".";  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetStringVersion,The following statement contains a magic number: if (versionArray [i] == 0) {  	stringVersion += "00";  } else if (versionArray [i] >= 1 && versionArray [i] <= 9) {  	stringVersion += "0" + versionArray [i];  } else {  	stringVersion += versionArray [i].ToString ();  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetStringVersion,The following statement contains a magic number: if (versionArray [i] >= 1 && versionArray [i] <= 9) {  	stringVersion += "0" + versionArray [i];  } else {  	stringVersion += versionArray [i].ToString ();  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetStringVersion,The following statement contains a magic number: if (i < 2) {  	stringVersion += ".";  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The following statement contains a magic number: foreach (string file in files) {  	// script file name must conform to ##.##.##.DefaultProviderName   	if (file != null) {  		if (GetFileName (file).Length == 9 + DefaultProvider.Length) {  			var version = new Version (GetFileNameWithoutExtension (file));  			// check if script file is relevant for upgrade  			if (version > databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  				scriptFiles.Add (file);  				//check if any incrementals exist  				var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  				if (incrementalfiles != null) {  					scriptFiles.AddRange (incrementalfiles);  				}  				Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  			}  			if (version == databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  				var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  				if (incrementalfiles != null) {  					scriptFiles.AddRange (incrementalfiles);  				}  				Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  			}  			//else  			//{  			//    Logger.TraceFormat("GetUpgradedScripts excluding {0}"' file);  			//}  		}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The following statement contains a magic number: foreach (string file in files) {  	// script file name must conform to ##.##.##.DefaultProviderName   	if (file != null) {  		if (GetFileName (file).Length == 9 + DefaultProvider.Length) {  			var version = new Version (GetFileNameWithoutExtension (file));  			// check if script file is relevant for upgrade  			if (version > databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  				scriptFiles.Add (file);  				//check if any incrementals exist  				var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  				if (incrementalfiles != null) {  					scriptFiles.AddRange (incrementalfiles);  				}  				Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  			}  			if (version == databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  				var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  				if (incrementalfiles != null) {  					scriptFiles.AddRange (incrementalfiles);  				}  				Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  			}  			//else  			//{  			//    Logger.TraceFormat("GetUpgradedScripts excluding {0}"' file);  			//}  		}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The following statement contains a magic number: foreach (string file in files) {  	// script file name must conform to ##.##.##.DefaultProviderName   	if (file != null) {  		if (GetFileName (file).Length == 9 + DefaultProvider.Length) {  			var version = new Version (GetFileNameWithoutExtension (file));  			// check if script file is relevant for upgrade  			if (version > databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  				scriptFiles.Add (file);  				//check if any incrementals exist  				var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  				if (incrementalfiles != null) {  					scriptFiles.AddRange (incrementalfiles);  				}  				Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  			}  			if (version == databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  				var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  				if (incrementalfiles != null) {  					scriptFiles.AddRange (incrementalfiles);  				}  				Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  			}  			//else  			//{  			//    Logger.TraceFormat("GetUpgradedScripts excluding {0}"' file);  			//}  		}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The following statement contains a magic number: if (file != null) {  	if (GetFileName (file).Length == 9 + DefaultProvider.Length) {  		var version = new Version (GetFileNameWithoutExtension (file));  		// check if script file is relevant for upgrade  		if (version > databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  			scriptFiles.Add (file);  			//check if any incrementals exist  			var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  			if (incrementalfiles != null) {  				scriptFiles.AddRange (incrementalfiles);  			}  			Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  		}  		if (version == databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  			var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  			if (incrementalfiles != null) {  				scriptFiles.AddRange (incrementalfiles);  			}  			Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  		}  		//else  		//{  		//    Logger.TraceFormat("GetUpgradedScripts excluding {0}"' file);  		//}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The following statement contains a magic number: if (file != null) {  	if (GetFileName (file).Length == 9 + DefaultProvider.Length) {  		var version = new Version (GetFileNameWithoutExtension (file));  		// check if script file is relevant for upgrade  		if (version > databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  			scriptFiles.Add (file);  			//check if any incrementals exist  			var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  			if (incrementalfiles != null) {  				scriptFiles.AddRange (incrementalfiles);  			}  			Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  		}  		if (version == databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  			var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  			if (incrementalfiles != null) {  				scriptFiles.AddRange (incrementalfiles);  			}  			Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  		}  		//else  		//{  		//    Logger.TraceFormat("GetUpgradedScripts excluding {0}"' file);  		//}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The following statement contains a magic number: if (file != null) {  	if (GetFileName (file).Length == 9 + DefaultProvider.Length) {  		var version = new Version (GetFileNameWithoutExtension (file));  		// check if script file is relevant for upgrade  		if (version > databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  			scriptFiles.Add (file);  			//check if any incrementals exist  			var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  			if (incrementalfiles != null) {  				scriptFiles.AddRange (incrementalfiles);  			}  			Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  		}  		if (version == databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  			var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  			if (incrementalfiles != null) {  				scriptFiles.AddRange (incrementalfiles);  			}  			Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  		}  		//else  		//{  		//    Logger.TraceFormat("GetUpgradedScripts excluding {0}"' file);  		//}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The following statement contains a magic number: if (GetFileName (file).Length == 9 + DefaultProvider.Length) {  	var version = new Version (GetFileNameWithoutExtension (file));  	// check if script file is relevant for upgrade  	if (version > databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  		scriptFiles.Add (file);  		//check if any incrementals exist  		var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  		if (incrementalfiles != null) {  			scriptFiles.AddRange (incrementalfiles);  		}  		Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  	}  	if (version == databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  		var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  		if (incrementalfiles != null) {  			scriptFiles.AddRange (incrementalfiles);  		}  		Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  	}  	//else  	//{  	//    Logger.TraceFormat("GetUpgradedScripts excluding {0}"' file);  	//}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The following statement contains a magic number: if (GetFileName (file).Length == 9 + DefaultProvider.Length) {  	var version = new Version (GetFileNameWithoutExtension (file));  	// check if script file is relevant for upgrade  	if (version > databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  		scriptFiles.Add (file);  		//check if any incrementals exist  		var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  		if (incrementalfiles != null) {  			scriptFiles.AddRange (incrementalfiles);  		}  		Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  	}  	if (version == databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  		var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  		if (incrementalfiles != null) {  			scriptFiles.AddRange (incrementalfiles);  		}  		Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  	}  	//else  	//{  	//    Logger.TraceFormat("GetUpgradedScripts excluding {0}"' file);  	//}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The following statement contains a magic number: if (GetFileName (file).Length == 9 + DefaultProvider.Length) {  	var version = new Version (GetFileNameWithoutExtension (file));  	// check if script file is relevant for upgrade  	if (version > databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  		scriptFiles.Add (file);  		//check if any incrementals exist  		var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  		if (incrementalfiles != null) {  			scriptFiles.AddRange (incrementalfiles);  		}  		Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  	}  	if (version == databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  		var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  		if (incrementalfiles != null) {  			scriptFiles.AddRange (incrementalfiles);  		}  		Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  	}  	//else  	//{  	//    Logger.TraceFormat("GetUpgradedScripts excluding {0}"' file);  	//}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The following statement contains a magic number: if (version > databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  	scriptFiles.Add (file);  	//check if any incrementals exist  	var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  	if (incrementalfiles != null) {  		scriptFiles.AddRange (incrementalfiles);  	}  	Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,GetUpgradeScripts,The following statement contains a magic number: if (version == databaseVersion && version <= ApplicationVersion && GetFileName (file).Length == 9 + DefaultProvider.Length) {  	var incrementalfiles = AddAvailableIncrementalFiles (providerPath' version);  	if (incrementalfiles != null) {  		scriptFiles.AddRange (incrementalfiles);  	}  	Logger.TraceFormat ("GetUpgradedScripts including {0}"' file);  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,AddAvailableIncrementalFiles,The following statement contains a magic number: if (version.Major < 8) {  	return null;  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: if (string.IsNullOrEmpty (errorMessage)) {  	//get base version  	Version baseVersion = GetInstallVersion (xmlDoc);  	//Install Base Version  	InstallDatabase (baseVersion' strProviderPath' xmlDoc' true);  	//Call Upgrade with the current DB Version to carry out any incremental upgrades  	UpgradeDNN (strProviderPath' baseVersion);  	// parse Host Settings if available  	InitialiseHostSettings (xmlDoc' true);  	//Create SuperUser only when it's not there (even soft deleted)  	var superUsers = UserController.GetUsers (true' true' Null.NullInteger);  	if (superUsers == null || superUsers.Count == 0) {  		// parse SuperUser if Available  		UserInfo superUser = GetSuperUser (xmlDoc' true);  		UserController.CreateUser (ref superUser);  	}  	// parse File List if available  	InstallFiles (xmlDoc' true);  	//Run any addition scripts in the Scripts folder  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 0' "Executing Additional Scripts:<br>");  	ExecuteScripts (strProviderPath);  	//Install optional resources if present  	var packages = GetInstallPackages ();  	foreach (var package in packages) {  		InstallPackage (package.Key' package.Value.PackageType' true);  	}  	//Set Status to None  	Globals.SetStatus (Globals.UpgradeStatus.None);  	//download LP (and templates) if not using en-us  	IInstallationStep ensureLpAndTemplate = new UpdateLanguagePackStep ();  	ensureLpAndTemplate.Execute ();  	//install LP that contains templates if installing in a different language     	var installConfig = InstallController.Instance.GetInstallConfig ();  	string culture = installConfig.InstallCulture;  	if (!culture.Equals ("en-us"' StringComparison.InvariantCultureIgnoreCase)) {  		string installFolder = HttpContext.Current.Server.MapPath ("~/Install/language");  		string lpAndTemplates = installFolder + "\\installlanguage.resources";  		if (File.Exists (lpAndTemplates)) {  			InstallPackage (lpAndTemplates' "Language"' false);  		}  	}  	// parse portal(s) if available  	XmlNodeList nodes = xmlDoc.SelectNodes ("//dotnetnuke/portals/portal");  	if (nodes != null) {  		foreach (XmlNode node in nodes) {  			if ((node != null)) {  				//add item to identity install from install wizard.  				if (HttpContext.Current != null) {  					HttpContext.Current.Items.Add ("InstallFromWizard"' true);  				}  				int portalId = AddPortal (node' true' 2);  				if (portalId > -1) {  					HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  				} else {  					HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  				}  			}  		}  	}  } else {  	//500 Error - Redirect to ErrorPage  	if ((HttpContext.Current != null)) {  		string url = "~/ErrorPage.aspx?status=500&error=" + errorMessage;  		HttpContext.Current.Response.Clear ();  		HttpContext.Current.Server.Transfer (url);  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: if (string.IsNullOrEmpty (errorMessage)) {  	//get base version  	Version baseVersion = GetInstallVersion (xmlDoc);  	//Install Base Version  	InstallDatabase (baseVersion' strProviderPath' xmlDoc' true);  	//Call Upgrade with the current DB Version to carry out any incremental upgrades  	UpgradeDNN (strProviderPath' baseVersion);  	// parse Host Settings if available  	InitialiseHostSettings (xmlDoc' true);  	//Create SuperUser only when it's not there (even soft deleted)  	var superUsers = UserController.GetUsers (true' true' Null.NullInteger);  	if (superUsers == null || superUsers.Count == 0) {  		// parse SuperUser if Available  		UserInfo superUser = GetSuperUser (xmlDoc' true);  		UserController.CreateUser (ref superUser);  	}  	// parse File List if available  	InstallFiles (xmlDoc' true);  	//Run any addition scripts in the Scripts folder  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 0' "Executing Additional Scripts:<br>");  	ExecuteScripts (strProviderPath);  	//Install optional resources if present  	var packages = GetInstallPackages ();  	foreach (var package in packages) {  		InstallPackage (package.Key' package.Value.PackageType' true);  	}  	//Set Status to None  	Globals.SetStatus (Globals.UpgradeStatus.None);  	//download LP (and templates) if not using en-us  	IInstallationStep ensureLpAndTemplate = new UpdateLanguagePackStep ();  	ensureLpAndTemplate.Execute ();  	//install LP that contains templates if installing in a different language     	var installConfig = InstallController.Instance.GetInstallConfig ();  	string culture = installConfig.InstallCulture;  	if (!culture.Equals ("en-us"' StringComparison.InvariantCultureIgnoreCase)) {  		string installFolder = HttpContext.Current.Server.MapPath ("~/Install/language");  		string lpAndTemplates = installFolder + "\\installlanguage.resources";  		if (File.Exists (lpAndTemplates)) {  			InstallPackage (lpAndTemplates' "Language"' false);  		}  	}  	// parse portal(s) if available  	XmlNodeList nodes = xmlDoc.SelectNodes ("//dotnetnuke/portals/portal");  	if (nodes != null) {  		foreach (XmlNode node in nodes) {  			if ((node != null)) {  				//add item to identity install from install wizard.  				if (HttpContext.Current != null) {  					HttpContext.Current.Items.Add ("InstallFromWizard"' true);  				}  				int portalId = AddPortal (node' true' 2);  				if (portalId > -1) {  					HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  				} else {  					HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  				}  			}  		}  	}  } else {  	//500 Error - Redirect to ErrorPage  	if ((HttpContext.Current != null)) {  		string url = "~/ErrorPage.aspx?status=500&error=" + errorMessage;  		HttpContext.Current.Response.Clear ();  		HttpContext.Current.Server.Transfer (url);  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: if (string.IsNullOrEmpty (errorMessage)) {  	//get base version  	Version baseVersion = GetInstallVersion (xmlDoc);  	//Install Base Version  	InstallDatabase (baseVersion' strProviderPath' xmlDoc' true);  	//Call Upgrade with the current DB Version to carry out any incremental upgrades  	UpgradeDNN (strProviderPath' baseVersion);  	// parse Host Settings if available  	InitialiseHostSettings (xmlDoc' true);  	//Create SuperUser only when it's not there (even soft deleted)  	var superUsers = UserController.GetUsers (true' true' Null.NullInteger);  	if (superUsers == null || superUsers.Count == 0) {  		// parse SuperUser if Available  		UserInfo superUser = GetSuperUser (xmlDoc' true);  		UserController.CreateUser (ref superUser);  	}  	// parse File List if available  	InstallFiles (xmlDoc' true);  	//Run any addition scripts in the Scripts folder  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 0' "Executing Additional Scripts:<br>");  	ExecuteScripts (strProviderPath);  	//Install optional resources if present  	var packages = GetInstallPackages ();  	foreach (var package in packages) {  		InstallPackage (package.Key' package.Value.PackageType' true);  	}  	//Set Status to None  	Globals.SetStatus (Globals.UpgradeStatus.None);  	//download LP (and templates) if not using en-us  	IInstallationStep ensureLpAndTemplate = new UpdateLanguagePackStep ();  	ensureLpAndTemplate.Execute ();  	//install LP that contains templates if installing in a different language     	var installConfig = InstallController.Instance.GetInstallConfig ();  	string culture = installConfig.InstallCulture;  	if (!culture.Equals ("en-us"' StringComparison.InvariantCultureIgnoreCase)) {  		string installFolder = HttpContext.Current.Server.MapPath ("~/Install/language");  		string lpAndTemplates = installFolder + "\\installlanguage.resources";  		if (File.Exists (lpAndTemplates)) {  			InstallPackage (lpAndTemplates' "Language"' false);  		}  	}  	// parse portal(s) if available  	XmlNodeList nodes = xmlDoc.SelectNodes ("//dotnetnuke/portals/portal");  	if (nodes != null) {  		foreach (XmlNode node in nodes) {  			if ((node != null)) {  				//add item to identity install from install wizard.  				if (HttpContext.Current != null) {  					HttpContext.Current.Items.Add ("InstallFromWizard"' true);  				}  				int portalId = AddPortal (node' true' 2);  				if (portalId > -1) {  					HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  				} else {  					HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  				}  			}  		}  	}  } else {  	//500 Error - Redirect to ErrorPage  	if ((HttpContext.Current != null)) {  		string url = "~/ErrorPage.aspx?status=500&error=" + errorMessage;  		HttpContext.Current.Response.Clear ();  		HttpContext.Current.Server.Transfer (url);  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: if (nodes != null) {  	foreach (XmlNode node in nodes) {  		if ((node != null)) {  			//add item to identity install from install wizard.  			if (HttpContext.Current != null) {  				HttpContext.Current.Items.Add ("InstallFromWizard"' true);  			}  			int portalId = AddPortal (node' true' 2);  			if (portalId > -1) {  				HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  			} else {  				HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  			}  		}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: if (nodes != null) {  	foreach (XmlNode node in nodes) {  		if ((node != null)) {  			//add item to identity install from install wizard.  			if (HttpContext.Current != null) {  				HttpContext.Current.Items.Add ("InstallFromWizard"' true);  			}  			int portalId = AddPortal (node' true' 2);  			if (portalId > -1) {  				HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  			} else {  				HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  			}  		}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: if (nodes != null) {  	foreach (XmlNode node in nodes) {  		if ((node != null)) {  			//add item to identity install from install wizard.  			if (HttpContext.Current != null) {  				HttpContext.Current.Items.Add ("InstallFromWizard"' true);  			}  			int portalId = AddPortal (node' true' 2);  			if (portalId > -1) {  				HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  			} else {  				HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  			}  		}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: foreach (XmlNode node in nodes) {  	if ((node != null)) {  		//add item to identity install from install wizard.  		if (HttpContext.Current != null) {  			HttpContext.Current.Items.Add ("InstallFromWizard"' true);  		}  		int portalId = AddPortal (node' true' 2);  		if (portalId > -1) {  			HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  		} else {  			HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  		}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: foreach (XmlNode node in nodes) {  	if ((node != null)) {  		//add item to identity install from install wizard.  		if (HttpContext.Current != null) {  			HttpContext.Current.Items.Add ("InstallFromWizard"' true);  		}  		int portalId = AddPortal (node' true' 2);  		if (portalId > -1) {  			HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  		} else {  			HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  		}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: foreach (XmlNode node in nodes) {  	if ((node != null)) {  		//add item to identity install from install wizard.  		if (HttpContext.Current != null) {  			HttpContext.Current.Items.Add ("InstallFromWizard"' true);  		}  		int portalId = AddPortal (node' true' 2);  		if (portalId > -1) {  			HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  		} else {  			HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  		}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: if ((node != null)) {  	//add item to identity install from install wizard.  	if (HttpContext.Current != null) {  		HttpContext.Current.Items.Add ("InstallFromWizard"' true);  	}  	int portalId = AddPortal (node' true' 2);  	if (portalId > -1) {  		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  	} else {  		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: if ((node != null)) {  	//add item to identity install from install wizard.  	if (HttpContext.Current != null) {  		HttpContext.Current.Items.Add ("InstallFromWizard"' true);  	}  	int portalId = AddPortal (node' true' 2);  	if (portalId > -1) {  		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  	} else {  		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: if ((node != null)) {  	//add item to identity install from install wizard.  	if (HttpContext.Current != null) {  		HttpContext.Current.Items.Add ("InstallFromWizard"' true);  	}  	int portalId = AddPortal (node' true' 2);  	if (portalId > -1) {  		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  	} else {  		HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: if (portalId > -1) {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  } else {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: if (portalId > -1) {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  } else {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='green'>Successfully Installed Site " + portalId + ":</font><br>");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallDNN,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "<font color='red'>Site failed to install:Error!</font><br>");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallPackage,The following statement contains a magic number: if (writeFeedback) {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "Installing Package File " + Path.GetFileNameWithoutExtension (file) + ": ");  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InstallPackage,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' "Installing Package File " + Path.GetFileNameWithoutExtension (file) + ": ");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,TryUpgradeNETFramework,The following statement contains a magic number: switch (Globals.NETFrameworkVersion.ToString (2)) {  case "3.5":  	if (!IsNETFrameworkCurrent ("3.5")) {  		//Upgrade to .NET 3.5  		string upgradeFile = string.Format ("{0}\\Config\\Net35.config"' Globals.InstallMapPath);  		string message = UpdateConfig (upgradeFile' ApplicationVersion' ".NET 3.5 Upgrade");  		if (string.IsNullOrEmpty (message)) {  			//Remove old AJAX file  			FileSystemUtils.DeleteFile (Path.Combine (Globals.ApplicationMapPath' "bin\\System.Web.Extensions.dll"));  			//Log Upgrade  			EventLogController.Instance.AddLog ("UpgradeNet"' "Upgraded Site to .NET 3.5"' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.HOST_ALERT);  		} else {  			//Log Failed Upgrade  			EventLogController.Instance.AddLog ("UpgradeNet"' string.Format ("Upgrade to .NET 3.5 failed. Error reported during attempt to update:{0}"' message)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.HOST_ALERT);  		}  	}  	break;  case "4.0":  	if (!IsNETFrameworkCurrent ("4.0")) {  		//Upgrade to .NET 4.0  		string upgradeFile = string.Format ("{0}\\Config\\Net40.config"' Globals.InstallMapPath);  		string strMessage = UpdateConfig (upgradeFile' ApplicationVersion' ".NET 4.0 Upgrade");  		EventLogController.Instance.AddLog ("UpgradeNet"' string.IsNullOrEmpty (strMessage) ? "Upgraded Site to .NET 4.0" : string.Format ("Upgrade to .NET 4.0 failed. Error reported during attempt to update:{0}"' strMessage)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.HOST_ALERT);  	}  	break;  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following statement contains a magic number: DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + Localization.Localization.GetString ("ApplicationUpgrades"' Localization.Localization.GlobalResourceFile) + ": " + version.ToString (3));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following statement contains a magic number: if (writeFeedback) {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' Localization.Localization.GetString ("ApplicationUpgrades"' Localization.Localization.GlobalResourceFile) + " : " + GetStringVersionWithRevision (version));  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' Localization.Localization.GetString ("ApplicationUpgrades"' Localization.Localization.GlobalResourceFile) + " : " + GetStringVersionWithRevision (version));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following statement contains a magic number: try {  	if (version.Revision == -1) {  		switch (version.ToString (3)) {  		case "3.2.3":  			UpgradeToVersion323 ();  			break;  		case "4.4.0":  			UpgradeToVersion440 ();  			break;  		case "4.7.0":  			UpgradeToVersion470 ();  			break;  		case "4.8.2":  			UpgradeToVersion482 ();  			break;  		case "5.0.0":  			UpgradeToVersion500 ();  			break;  		case "5.0.1":  			UpgradeToVersion501 ();  			break;  		case "5.1.0":  			UpgradeToVersion510 ();  			break;  		case "5.1.1.0":  			UpgradeToVersion511 ();  			break;  		case "5.1.3":  			UpgradeToVersion513 ();  			break;  		case "5.2.0":  			UpgradeToVersion520 ();  			break;  		case "5.2.1":  			UpgradeToVersion521 ();  			break;  		case "5.3.0":  			UpgradeToVersion530 ();  			break;  		case "5.4.0":  			UpgradeToVersion540 ();  			break;  		case "5.4.3":  			UpgradeToVersion543 ();  			break;  		case "5.5.0":  			UpgradeToVersion550 ();  			break;  		case "5.6.0":  			UpgradeToVersion560 ();  			break;  		case "5.6.2":  			UpgradeToVersion562 ();  			break;  		case "6.0.0":  			UpgradeToVersion600 ();  			break;  		case "6.0.1":  			UpgradeToVersion601 ();  			break;  		case "6.0.2":  			UpgradeToVersion602 ();  			break;  		case "6.1.0":  			UpgradeToVersion610 ();  			break;  		case "6.1.2":  			UpgradeToVersion612 ();  			break;  		case "6.1.3":  			UpgradeToVersion613 ();  			break;  		case "6.2.0":  			UpgradeToVersion620 ();  			break;  		case "6.2.1":  			UpgradeToVersion621 ();  			break;  		case "6.2.3":  			UpgradeToVersion623 ();  			break;  		case "6.2.4":  			UpgradeToVersion624 ();  			break;  		case "7.0.0":  			UpgradeToVersion700 ();  			break;  		case "7.1.0":  			UpgradeToVersion710 ();  			break;  		case "7.1.1":  			UpgradeToVersion711 ();  			break;  		case "7.1.2":  			UpgradeToVersion712 ();  			break;  		case "7.2.0":  			UpgradeToVersion720 ();  			break;  		case "7.2.1":  			UpgradeToVersion721 ();  			break;  		case "7.2.2":  			UpgradeToVersion722 ();  			break;  		case "7.3.0":  			UpgradeToVersion730 ();  			break;  		case "7.3.2":  			UpgradeToVersion732 ();  			break;  		case "7.3.3":  			UpgradeToVersion733 ();  			break;  		case "7.4.0":  			UpgradeToVersion740 ();  			break;  		case "7.4.2":  			UpgradeToVersion742 ();  			break;  		case "9.1.0":  			UpgradeToVersion910 ();  			break;  		}  	} else {  		//Incremental  		switch (version.ToString (4)) {  		case "8.0.0.6":  			UpgradeToVersion8006 ();  			break;  		case "8.0.0.7":  			UpgradeToVersion8007 ();  			break;  		case "8.0.0.13":  			UpgradeToVersion80013 ();  			break;  		case "8.0.0.16":  			UpgradeToVersion80016 ();  			break;  		case "8.0.0.26":  			UpgradeToVersion80026 ();  			break;  		case "8.0.0.27":  			UpgradeToVersion80027 ();  			break;  		}  	}  } catch (Exception ex) {  	Logger.Error (ex);  	exceptions += string.Format ("Error: {0}{1}"' ex.Message + ex.StackTrace' Environment.NewLine);  	// log the results  	if (string.IsNullOrEmpty (exceptions)) {  		DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + Localization.Localization.GetString ("ApplicationUpgrades"' Localization.Localization.GlobalResourceFile) + ": " + version.ToString (3));  	} else {  		DnnInstallLogger.InstallLogError (exceptions);  	}  	try {  		using (StreamWriter streamWriter = File.CreateText (providerPath + Globals.FormatVersion (version) + "_Application.log.resources")) {  			streamWriter.WriteLine (exceptions);  			streamWriter.Close ();  		}  	} catch (Exception exc) {  		Logger.Error (exc);  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following statement contains a magic number: try {  	if (version.Revision == -1) {  		switch (version.ToString (3)) {  		case "3.2.3":  			UpgradeToVersion323 ();  			break;  		case "4.4.0":  			UpgradeToVersion440 ();  			break;  		case "4.7.0":  			UpgradeToVersion470 ();  			break;  		case "4.8.2":  			UpgradeToVersion482 ();  			break;  		case "5.0.0":  			UpgradeToVersion500 ();  			break;  		case "5.0.1":  			UpgradeToVersion501 ();  			break;  		case "5.1.0":  			UpgradeToVersion510 ();  			break;  		case "5.1.1.0":  			UpgradeToVersion511 ();  			break;  		case "5.1.3":  			UpgradeToVersion513 ();  			break;  		case "5.2.0":  			UpgradeToVersion520 ();  			break;  		case "5.2.1":  			UpgradeToVersion521 ();  			break;  		case "5.3.0":  			UpgradeToVersion530 ();  			break;  		case "5.4.0":  			UpgradeToVersion540 ();  			break;  		case "5.4.3":  			UpgradeToVersion543 ();  			break;  		case "5.5.0":  			UpgradeToVersion550 ();  			break;  		case "5.6.0":  			UpgradeToVersion560 ();  			break;  		case "5.6.2":  			UpgradeToVersion562 ();  			break;  		case "6.0.0":  			UpgradeToVersion600 ();  			break;  		case "6.0.1":  			UpgradeToVersion601 ();  			break;  		case "6.0.2":  			UpgradeToVersion602 ();  			break;  		case "6.1.0":  			UpgradeToVersion610 ();  			break;  		case "6.1.2":  			UpgradeToVersion612 ();  			break;  		case "6.1.3":  			UpgradeToVersion613 ();  			break;  		case "6.2.0":  			UpgradeToVersion620 ();  			break;  		case "6.2.1":  			UpgradeToVersion621 ();  			break;  		case "6.2.3":  			UpgradeToVersion623 ();  			break;  		case "6.2.4":  			UpgradeToVersion624 ();  			break;  		case "7.0.0":  			UpgradeToVersion700 ();  			break;  		case "7.1.0":  			UpgradeToVersion710 ();  			break;  		case "7.1.1":  			UpgradeToVersion711 ();  			break;  		case "7.1.2":  			UpgradeToVersion712 ();  			break;  		case "7.2.0":  			UpgradeToVersion720 ();  			break;  		case "7.2.1":  			UpgradeToVersion721 ();  			break;  		case "7.2.2":  			UpgradeToVersion722 ();  			break;  		case "7.3.0":  			UpgradeToVersion730 ();  			break;  		case "7.3.2":  			UpgradeToVersion732 ();  			break;  		case "7.3.3":  			UpgradeToVersion733 ();  			break;  		case "7.4.0":  			UpgradeToVersion740 ();  			break;  		case "7.4.2":  			UpgradeToVersion742 ();  			break;  		case "9.1.0":  			UpgradeToVersion910 ();  			break;  		}  	} else {  		//Incremental  		switch (version.ToString (4)) {  		case "8.0.0.6":  			UpgradeToVersion8006 ();  			break;  		case "8.0.0.7":  			UpgradeToVersion8007 ();  			break;  		case "8.0.0.13":  			UpgradeToVersion80013 ();  			break;  		case "8.0.0.16":  			UpgradeToVersion80016 ();  			break;  		case "8.0.0.26":  			UpgradeToVersion80026 ();  			break;  		case "8.0.0.27":  			UpgradeToVersion80027 ();  			break;  		}  	}  } catch (Exception ex) {  	Logger.Error (ex);  	exceptions += string.Format ("Error: {0}{1}"' ex.Message + ex.StackTrace' Environment.NewLine);  	// log the results  	if (string.IsNullOrEmpty (exceptions)) {  		DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + Localization.Localization.GetString ("ApplicationUpgrades"' Localization.Localization.GlobalResourceFile) + ": " + version.ToString (3));  	} else {  		DnnInstallLogger.InstallLogError (exceptions);  	}  	try {  		using (StreamWriter streamWriter = File.CreateText (providerPath + Globals.FormatVersion (version) + "_Application.log.resources")) {  			streamWriter.WriteLine (exceptions);  			streamWriter.Close ();  		}  	} catch (Exception exc) {  		Logger.Error (exc);  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following statement contains a magic number: try {  	if (version.Revision == -1) {  		switch (version.ToString (3)) {  		case "3.2.3":  			UpgradeToVersion323 ();  			break;  		case "4.4.0":  			UpgradeToVersion440 ();  			break;  		case "4.7.0":  			UpgradeToVersion470 ();  			break;  		case "4.8.2":  			UpgradeToVersion482 ();  			break;  		case "5.0.0":  			UpgradeToVersion500 ();  			break;  		case "5.0.1":  			UpgradeToVersion501 ();  			break;  		case "5.1.0":  			UpgradeToVersion510 ();  			break;  		case "5.1.1.0":  			UpgradeToVersion511 ();  			break;  		case "5.1.3":  			UpgradeToVersion513 ();  			break;  		case "5.2.0":  			UpgradeToVersion520 ();  			break;  		case "5.2.1":  			UpgradeToVersion521 ();  			break;  		case "5.3.0":  			UpgradeToVersion530 ();  			break;  		case "5.4.0":  			UpgradeToVersion540 ();  			break;  		case "5.4.3":  			UpgradeToVersion543 ();  			break;  		case "5.5.0":  			UpgradeToVersion550 ();  			break;  		case "5.6.0":  			UpgradeToVersion560 ();  			break;  		case "5.6.2":  			UpgradeToVersion562 ();  			break;  		case "6.0.0":  			UpgradeToVersion600 ();  			break;  		case "6.0.1":  			UpgradeToVersion601 ();  			break;  		case "6.0.2":  			UpgradeToVersion602 ();  			break;  		case "6.1.0":  			UpgradeToVersion610 ();  			break;  		case "6.1.2":  			UpgradeToVersion612 ();  			break;  		case "6.1.3":  			UpgradeToVersion613 ();  			break;  		case "6.2.0":  			UpgradeToVersion620 ();  			break;  		case "6.2.1":  			UpgradeToVersion621 ();  			break;  		case "6.2.3":  			UpgradeToVersion623 ();  			break;  		case "6.2.4":  			UpgradeToVersion624 ();  			break;  		case "7.0.0":  			UpgradeToVersion700 ();  			break;  		case "7.1.0":  			UpgradeToVersion710 ();  			break;  		case "7.1.1":  			UpgradeToVersion711 ();  			break;  		case "7.1.2":  			UpgradeToVersion712 ();  			break;  		case "7.2.0":  			UpgradeToVersion720 ();  			break;  		case "7.2.1":  			UpgradeToVersion721 ();  			break;  		case "7.2.2":  			UpgradeToVersion722 ();  			break;  		case "7.3.0":  			UpgradeToVersion730 ();  			break;  		case "7.3.2":  			UpgradeToVersion732 ();  			break;  		case "7.3.3":  			UpgradeToVersion733 ();  			break;  		case "7.4.0":  			UpgradeToVersion740 ();  			break;  		case "7.4.2":  			UpgradeToVersion742 ();  			break;  		case "9.1.0":  			UpgradeToVersion910 ();  			break;  		}  	} else {  		//Incremental  		switch (version.ToString (4)) {  		case "8.0.0.6":  			UpgradeToVersion8006 ();  			break;  		case "8.0.0.7":  			UpgradeToVersion8007 ();  			break;  		case "8.0.0.13":  			UpgradeToVersion80013 ();  			break;  		case "8.0.0.16":  			UpgradeToVersion80016 ();  			break;  		case "8.0.0.26":  			UpgradeToVersion80026 ();  			break;  		case "8.0.0.27":  			UpgradeToVersion80027 ();  			break;  		}  	}  } catch (Exception ex) {  	Logger.Error (ex);  	exceptions += string.Format ("Error: {0}{1}"' ex.Message + ex.StackTrace' Environment.NewLine);  	// log the results  	if (string.IsNullOrEmpty (exceptions)) {  		DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + Localization.Localization.GetString ("ApplicationUpgrades"' Localization.Localization.GlobalResourceFile) + ": " + version.ToString (3));  	} else {  		DnnInstallLogger.InstallLogError (exceptions);  	}  	try {  		using (StreamWriter streamWriter = File.CreateText (providerPath + Globals.FormatVersion (version) + "_Application.log.resources")) {  			streamWriter.WriteLine (exceptions);  			streamWriter.Close ();  		}  	} catch (Exception exc) {  		Logger.Error (exc);  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following statement contains a magic number: if (version.Revision == -1) {  	switch (version.ToString (3)) {  	case "3.2.3":  		UpgradeToVersion323 ();  		break;  	case "4.4.0":  		UpgradeToVersion440 ();  		break;  	case "4.7.0":  		UpgradeToVersion470 ();  		break;  	case "4.8.2":  		UpgradeToVersion482 ();  		break;  	case "5.0.0":  		UpgradeToVersion500 ();  		break;  	case "5.0.1":  		UpgradeToVersion501 ();  		break;  	case "5.1.0":  		UpgradeToVersion510 ();  		break;  	case "5.1.1.0":  		UpgradeToVersion511 ();  		break;  	case "5.1.3":  		UpgradeToVersion513 ();  		break;  	case "5.2.0":  		UpgradeToVersion520 ();  		break;  	case "5.2.1":  		UpgradeToVersion521 ();  		break;  	case "5.3.0":  		UpgradeToVersion530 ();  		break;  	case "5.4.0":  		UpgradeToVersion540 ();  		break;  	case "5.4.3":  		UpgradeToVersion543 ();  		break;  	case "5.5.0":  		UpgradeToVersion550 ();  		break;  	case "5.6.0":  		UpgradeToVersion560 ();  		break;  	case "5.6.2":  		UpgradeToVersion562 ();  		break;  	case "6.0.0":  		UpgradeToVersion600 ();  		break;  	case "6.0.1":  		UpgradeToVersion601 ();  		break;  	case "6.0.2":  		UpgradeToVersion602 ();  		break;  	case "6.1.0":  		UpgradeToVersion610 ();  		break;  	case "6.1.2":  		UpgradeToVersion612 ();  		break;  	case "6.1.3":  		UpgradeToVersion613 ();  		break;  	case "6.2.0":  		UpgradeToVersion620 ();  		break;  	case "6.2.1":  		UpgradeToVersion621 ();  		break;  	case "6.2.3":  		UpgradeToVersion623 ();  		break;  	case "6.2.4":  		UpgradeToVersion624 ();  		break;  	case "7.0.0":  		UpgradeToVersion700 ();  		break;  	case "7.1.0":  		UpgradeToVersion710 ();  		break;  	case "7.1.1":  		UpgradeToVersion711 ();  		break;  	case "7.1.2":  		UpgradeToVersion712 ();  		break;  	case "7.2.0":  		UpgradeToVersion720 ();  		break;  	case "7.2.1":  		UpgradeToVersion721 ();  		break;  	case "7.2.2":  		UpgradeToVersion722 ();  		break;  	case "7.3.0":  		UpgradeToVersion730 ();  		break;  	case "7.3.2":  		UpgradeToVersion732 ();  		break;  	case "7.3.3":  		UpgradeToVersion733 ();  		break;  	case "7.4.0":  		UpgradeToVersion740 ();  		break;  	case "7.4.2":  		UpgradeToVersion742 ();  		break;  	case "9.1.0":  		UpgradeToVersion910 ();  		break;  	}  } else {  	//Incremental  	switch (version.ToString (4)) {  	case "8.0.0.6":  		UpgradeToVersion8006 ();  		break;  	case "8.0.0.7":  		UpgradeToVersion8007 ();  		break;  	case "8.0.0.13":  		UpgradeToVersion80013 ();  		break;  	case "8.0.0.16":  		UpgradeToVersion80016 ();  		break;  	case "8.0.0.26":  		UpgradeToVersion80026 ();  		break;  	case "8.0.0.27":  		UpgradeToVersion80027 ();  		break;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following statement contains a magic number: if (version.Revision == -1) {  	switch (version.ToString (3)) {  	case "3.2.3":  		UpgradeToVersion323 ();  		break;  	case "4.4.0":  		UpgradeToVersion440 ();  		break;  	case "4.7.0":  		UpgradeToVersion470 ();  		break;  	case "4.8.2":  		UpgradeToVersion482 ();  		break;  	case "5.0.0":  		UpgradeToVersion500 ();  		break;  	case "5.0.1":  		UpgradeToVersion501 ();  		break;  	case "5.1.0":  		UpgradeToVersion510 ();  		break;  	case "5.1.1.0":  		UpgradeToVersion511 ();  		break;  	case "5.1.3":  		UpgradeToVersion513 ();  		break;  	case "5.2.0":  		UpgradeToVersion520 ();  		break;  	case "5.2.1":  		UpgradeToVersion521 ();  		break;  	case "5.3.0":  		UpgradeToVersion530 ();  		break;  	case "5.4.0":  		UpgradeToVersion540 ();  		break;  	case "5.4.3":  		UpgradeToVersion543 ();  		break;  	case "5.5.0":  		UpgradeToVersion550 ();  		break;  	case "5.6.0":  		UpgradeToVersion560 ();  		break;  	case "5.6.2":  		UpgradeToVersion562 ();  		break;  	case "6.0.0":  		UpgradeToVersion600 ();  		break;  	case "6.0.1":  		UpgradeToVersion601 ();  		break;  	case "6.0.2":  		UpgradeToVersion602 ();  		break;  	case "6.1.0":  		UpgradeToVersion610 ();  		break;  	case "6.1.2":  		UpgradeToVersion612 ();  		break;  	case "6.1.3":  		UpgradeToVersion613 ();  		break;  	case "6.2.0":  		UpgradeToVersion620 ();  		break;  	case "6.2.1":  		UpgradeToVersion621 ();  		break;  	case "6.2.3":  		UpgradeToVersion623 ();  		break;  	case "6.2.4":  		UpgradeToVersion624 ();  		break;  	case "7.0.0":  		UpgradeToVersion700 ();  		break;  	case "7.1.0":  		UpgradeToVersion710 ();  		break;  	case "7.1.1":  		UpgradeToVersion711 ();  		break;  	case "7.1.2":  		UpgradeToVersion712 ();  		break;  	case "7.2.0":  		UpgradeToVersion720 ();  		break;  	case "7.2.1":  		UpgradeToVersion721 ();  		break;  	case "7.2.2":  		UpgradeToVersion722 ();  		break;  	case "7.3.0":  		UpgradeToVersion730 ();  		break;  	case "7.3.2":  		UpgradeToVersion732 ();  		break;  	case "7.3.3":  		UpgradeToVersion733 ();  		break;  	case "7.4.0":  		UpgradeToVersion740 ();  		break;  	case "7.4.2":  		UpgradeToVersion742 ();  		break;  	case "9.1.0":  		UpgradeToVersion910 ();  		break;  	}  } else {  	//Incremental  	switch (version.ToString (4)) {  	case "8.0.0.6":  		UpgradeToVersion8006 ();  		break;  	case "8.0.0.7":  		UpgradeToVersion8007 ();  		break;  	case "8.0.0.13":  		UpgradeToVersion80013 ();  		break;  	case "8.0.0.16":  		UpgradeToVersion80016 ();  		break;  	case "8.0.0.26":  		UpgradeToVersion80026 ();  		break;  	case "8.0.0.27":  		UpgradeToVersion80027 ();  		break;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following statement contains a magic number: switch (version.ToString (3)) {  case "3.2.3":  	UpgradeToVersion323 ();  	break;  case "4.4.0":  	UpgradeToVersion440 ();  	break;  case "4.7.0":  	UpgradeToVersion470 ();  	break;  case "4.8.2":  	UpgradeToVersion482 ();  	break;  case "5.0.0":  	UpgradeToVersion500 ();  	break;  case "5.0.1":  	UpgradeToVersion501 ();  	break;  case "5.1.0":  	UpgradeToVersion510 ();  	break;  case "5.1.1.0":  	UpgradeToVersion511 ();  	break;  case "5.1.3":  	UpgradeToVersion513 ();  	break;  case "5.2.0":  	UpgradeToVersion520 ();  	break;  case "5.2.1":  	UpgradeToVersion521 ();  	break;  case "5.3.0":  	UpgradeToVersion530 ();  	break;  case "5.4.0":  	UpgradeToVersion540 ();  	break;  case "5.4.3":  	UpgradeToVersion543 ();  	break;  case "5.5.0":  	UpgradeToVersion550 ();  	break;  case "5.6.0":  	UpgradeToVersion560 ();  	break;  case "5.6.2":  	UpgradeToVersion562 ();  	break;  case "6.0.0":  	UpgradeToVersion600 ();  	break;  case "6.0.1":  	UpgradeToVersion601 ();  	break;  case "6.0.2":  	UpgradeToVersion602 ();  	break;  case "6.1.0":  	UpgradeToVersion610 ();  	break;  case "6.1.2":  	UpgradeToVersion612 ();  	break;  case "6.1.3":  	UpgradeToVersion613 ();  	break;  case "6.2.0":  	UpgradeToVersion620 ();  	break;  case "6.2.1":  	UpgradeToVersion621 ();  	break;  case "6.2.3":  	UpgradeToVersion623 ();  	break;  case "6.2.4":  	UpgradeToVersion624 ();  	break;  case "7.0.0":  	UpgradeToVersion700 ();  	break;  case "7.1.0":  	UpgradeToVersion710 ();  	break;  case "7.1.1":  	UpgradeToVersion711 ();  	break;  case "7.1.2":  	UpgradeToVersion712 ();  	break;  case "7.2.0":  	UpgradeToVersion720 ();  	break;  case "7.2.1":  	UpgradeToVersion721 ();  	break;  case "7.2.2":  	UpgradeToVersion722 ();  	break;  case "7.3.0":  	UpgradeToVersion730 ();  	break;  case "7.3.2":  	UpgradeToVersion732 ();  	break;  case "7.3.3":  	UpgradeToVersion733 ();  	break;  case "7.4.0":  	UpgradeToVersion740 ();  	break;  case "7.4.2":  	UpgradeToVersion742 ();  	break;  case "9.1.0":  	UpgradeToVersion910 ();  	break;  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following statement contains a magic number: switch (version.ToString (4)) {  case "8.0.0.6":  	UpgradeToVersion8006 ();  	break;  case "8.0.0.7":  	UpgradeToVersion8007 ();  	break;  case "8.0.0.13":  	UpgradeToVersion80013 ();  	break;  case "8.0.0.16":  	UpgradeToVersion80016 ();  	break;  case "8.0.0.26":  	UpgradeToVersion80026 ();  	break;  case "8.0.0.27":  	UpgradeToVersion80027 ();  	break;  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following statement contains a magic number: if (string.IsNullOrEmpty (exceptions)) {  	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + Localization.Localization.GetString ("ApplicationUpgrades"' Localization.Localization.GlobalResourceFile) + ": " + version.ToString (3));  } else {  	DnnInstallLogger.InstallLogError (exceptions);  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following statement contains a magic number: DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + Localization.Localization.GetString ("ApplicationUpgrades"' Localization.Localization.GlobalResourceFile) + ": " + version.ToString (3));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The following statement contains a magic number: if (writeFeedback) {  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2);  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2);  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The following statement contains a magic number: DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "UpdateConfig:" + version.ToString (3));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The following statement contains a magic number: if (File.Exists (configFile)) {  	//Create XmlMerge instance from config file source  	StreamReader stream = File.OpenText (configFile);  	try {  		var merge = new XmlMerge (stream' version.ToString (3)' reason);  		//Process merge  		merge.UpdateConfigs ();  	} catch (Exception ex) {  		exceptions += String.Format ("Error: {0}{1}"' ex.Message + ex.StackTrace' Environment.NewLine);  		Exceptions.Exceptions.LogException (ex);  	} finally {  		//Close stream  		stream.Close ();  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The following statement contains a magic number: try {  	var merge = new XmlMerge (stream' version.ToString (3)' reason);  	//Process merge  	merge.UpdateConfigs ();  } catch (Exception ex) {  	exceptions += String.Format ("Error: {0}{1}"' ex.Message + ex.StackTrace' Environment.NewLine);  	Exceptions.Exceptions.LogException (ex);  } finally {  	//Close stream  	stream.Close ();  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The following statement contains a magic number: if (string.IsNullOrEmpty (exceptions)) {  	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + "UpdateConfig:" + version.ToString (3));  } else {  	DnnInstallLogger.InstallLogError (exceptions);  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The following statement contains a magic number: DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + "UpdateConfig:" + version.ToString (3));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The following statement contains a magic number: DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogStart"' Localization.Localization.GlobalResourceFile) + "UpdateConfig:" + version.ToString (3));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The following statement contains a magic number: if (File.Exists (configFile)) {  	//Create XmlMerge instance from config file source  	StreamReader stream = File.OpenText (configFile);  	try {  		var merge = new XmlMerge (stream' version.ToString (3)' reason);  		//Process merge  		merge.UpdateConfigs ();  	} catch (Exception ex) {  		Logger.Error (ex);  		exceptions += string.Format ("Error: {0}{1}"' ex.Message + ex.StackTrace' Environment.NewLine);  		// log the results  		try {  			using (StreamWriter streamWriter = File.CreateText (providerPath + Globals.FormatVersion (version) + "_Config.log")) {  				streamWriter.WriteLine (exceptions);  				streamWriter.Close ();  			}  		} catch (Exception exc) {  			Logger.Error (exc);  		}  	} finally {  		//Close stream  		stream.Close ();  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The following statement contains a magic number: try {  	var merge = new XmlMerge (stream' version.ToString (3)' reason);  	//Process merge  	merge.UpdateConfigs ();  } catch (Exception ex) {  	Logger.Error (ex);  	exceptions += string.Format ("Error: {0}{1}"' ex.Message + ex.StackTrace' Environment.NewLine);  	// log the results  	try {  		using (StreamWriter streamWriter = File.CreateText (providerPath + Globals.FormatVersion (version) + "_Config.log")) {  			streamWriter.WriteLine (exceptions);  			streamWriter.Close ();  		}  	} catch (Exception exc) {  		Logger.Error (exc);  	}  } finally {  	//Close stream  	stream.Close ();  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The following statement contains a magic number: if (string.IsNullOrEmpty (exceptions)) {  	DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + "UpdateConfig:" + version.ToString (3));  } else {  	DnnInstallLogger.InstallLogError (exceptions);  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpdateConfig,The following statement contains a magic number: DnnInstallLogger.InstallLogInfo (Localization.Localization.GetString ("LogEnd"' Localization.Localization.GlobalResourceFile) + "UpdateConfig:" + version.ToString (3));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The following statement contains a magic number: if (Host.CheckUpgrade && version != new Version (0' 0' 0)) {  	url = DotNetNukeContext.Current.Application.UpgradeUrl + "/update.aspx";  	//use network path reference so it works in ssl-offload scenarios  	url = url.Replace ("http://"' "//");  	url += "?core=" + Globals.FormatVersion (Assembly.GetExecutingAssembly ().GetName ().Version' "00"' 3' "");  	url += "&version=" + Globals.FormatVersion (version' "00"' 3' "");  	url += "&type=" + packageType;  	url += "&name=" + packageName;  	if (packageType.ToLowerInvariant () == "module") {  		var moduleType = (from m in InstalledModulesController.GetInstalledModules ()  		where m.ModuleName == packageName  		select m).SingleOrDefault ();  		if (moduleType != null) {  			url += "&no=" + moduleType.Instances;  		}  	}  	url += "&id=" + Host.GUID;  	if (packageType.ToUpper () == DotNetNukeContext.Current.Application.Type.ToUpper ()) {  		if (!String.IsNullOrEmpty (HostController.Instance.GetString ("NewsletterSubscribeEmail"))) {  			url += "&email=" + HttpUtility.UrlEncode (HostController.Instance.GetString ("NewsletterSubscribeEmail"));  		}  		var portals = PortalController.Instance.GetPortals ();  		url += "&no=" + portals.Count;  		url += "&os=" + Globals.FormatVersion (Globals.OperatingSystemVersion' "00"' 2' "");  		url += "&net=" + Globals.FormatVersion (Globals.NETFrameworkVersion' "00"' 2' "");  		url += "&db=" + Globals.FormatVersion (Globals.DatabaseEngineVersion' "00"' 2' "");  		var source = Config.GetSetting ("Source");  		if (!string.IsNullOrEmpty (source)) {  			url += "&src=" + source;  		}  	}  	if (!string.IsNullOrEmpty (culture)) {  		url += "&culture=" + culture;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The following statement contains a magic number: if (Host.CheckUpgrade && version != new Version (0' 0' 0)) {  	url = DotNetNukeContext.Current.Application.UpgradeUrl + "/update.aspx";  	//use network path reference so it works in ssl-offload scenarios  	url = url.Replace ("http://"' "//");  	url += "?core=" + Globals.FormatVersion (Assembly.GetExecutingAssembly ().GetName ().Version' "00"' 3' "");  	url += "&version=" + Globals.FormatVersion (version' "00"' 3' "");  	url += "&type=" + packageType;  	url += "&name=" + packageName;  	if (packageType.ToLowerInvariant () == "module") {  		var moduleType = (from m in InstalledModulesController.GetInstalledModules ()  		where m.ModuleName == packageName  		select m).SingleOrDefault ();  		if (moduleType != null) {  			url += "&no=" + moduleType.Instances;  		}  	}  	url += "&id=" + Host.GUID;  	if (packageType.ToUpper () == DotNetNukeContext.Current.Application.Type.ToUpper ()) {  		if (!String.IsNullOrEmpty (HostController.Instance.GetString ("NewsletterSubscribeEmail"))) {  			url += "&email=" + HttpUtility.UrlEncode (HostController.Instance.GetString ("NewsletterSubscribeEmail"));  		}  		var portals = PortalController.Instance.GetPortals ();  		url += "&no=" + portals.Count;  		url += "&os=" + Globals.FormatVersion (Globals.OperatingSystemVersion' "00"' 2' "");  		url += "&net=" + Globals.FormatVersion (Globals.NETFrameworkVersion' "00"' 2' "");  		url += "&db=" + Globals.FormatVersion (Globals.DatabaseEngineVersion' "00"' 2' "");  		var source = Config.GetSetting ("Source");  		if (!string.IsNullOrEmpty (source)) {  			url += "&src=" + source;  		}  	}  	if (!string.IsNullOrEmpty (culture)) {  		url += "&culture=" + culture;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The following statement contains a magic number: if (Host.CheckUpgrade && version != new Version (0' 0' 0)) {  	url = DotNetNukeContext.Current.Application.UpgradeUrl + "/update.aspx";  	//use network path reference so it works in ssl-offload scenarios  	url = url.Replace ("http://"' "//");  	url += "?core=" + Globals.FormatVersion (Assembly.GetExecutingAssembly ().GetName ().Version' "00"' 3' "");  	url += "&version=" + Globals.FormatVersion (version' "00"' 3' "");  	url += "&type=" + packageType;  	url += "&name=" + packageName;  	if (packageType.ToLowerInvariant () == "module") {  		var moduleType = (from m in InstalledModulesController.GetInstalledModules ()  		where m.ModuleName == packageName  		select m).SingleOrDefault ();  		if (moduleType != null) {  			url += "&no=" + moduleType.Instances;  		}  	}  	url += "&id=" + Host.GUID;  	if (packageType.ToUpper () == DotNetNukeContext.Current.Application.Type.ToUpper ()) {  		if (!String.IsNullOrEmpty (HostController.Instance.GetString ("NewsletterSubscribeEmail"))) {  			url += "&email=" + HttpUtility.UrlEncode (HostController.Instance.GetString ("NewsletterSubscribeEmail"));  		}  		var portals = PortalController.Instance.GetPortals ();  		url += "&no=" + portals.Count;  		url += "&os=" + Globals.FormatVersion (Globals.OperatingSystemVersion' "00"' 2' "");  		url += "&net=" + Globals.FormatVersion (Globals.NETFrameworkVersion' "00"' 2' "");  		url += "&db=" + Globals.FormatVersion (Globals.DatabaseEngineVersion' "00"' 2' "");  		var source = Config.GetSetting ("Source");  		if (!string.IsNullOrEmpty (source)) {  			url += "&src=" + source;  		}  	}  	if (!string.IsNullOrEmpty (culture)) {  		url += "&culture=" + culture;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The following statement contains a magic number: if (Host.CheckUpgrade && version != new Version (0' 0' 0)) {  	url = DotNetNukeContext.Current.Application.UpgradeUrl + "/update.aspx";  	//use network path reference so it works in ssl-offload scenarios  	url = url.Replace ("http://"' "//");  	url += "?core=" + Globals.FormatVersion (Assembly.GetExecutingAssembly ().GetName ().Version' "00"' 3' "");  	url += "&version=" + Globals.FormatVersion (version' "00"' 3' "");  	url += "&type=" + packageType;  	url += "&name=" + packageName;  	if (packageType.ToLowerInvariant () == "module") {  		var moduleType = (from m in InstalledModulesController.GetInstalledModules ()  		where m.ModuleName == packageName  		select m).SingleOrDefault ();  		if (moduleType != null) {  			url += "&no=" + moduleType.Instances;  		}  	}  	url += "&id=" + Host.GUID;  	if (packageType.ToUpper () == DotNetNukeContext.Current.Application.Type.ToUpper ()) {  		if (!String.IsNullOrEmpty (HostController.Instance.GetString ("NewsletterSubscribeEmail"))) {  			url += "&email=" + HttpUtility.UrlEncode (HostController.Instance.GetString ("NewsletterSubscribeEmail"));  		}  		var portals = PortalController.Instance.GetPortals ();  		url += "&no=" + portals.Count;  		url += "&os=" + Globals.FormatVersion (Globals.OperatingSystemVersion' "00"' 2' "");  		url += "&net=" + Globals.FormatVersion (Globals.NETFrameworkVersion' "00"' 2' "");  		url += "&db=" + Globals.FormatVersion (Globals.DatabaseEngineVersion' "00"' 2' "");  		var source = Config.GetSetting ("Source");  		if (!string.IsNullOrEmpty (source)) {  			url += "&src=" + source;  		}  	}  	if (!string.IsNullOrEmpty (culture)) {  		url += "&culture=" + culture;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The following statement contains a magic number: if (Host.CheckUpgrade && version != new Version (0' 0' 0)) {  	url = DotNetNukeContext.Current.Application.UpgradeUrl + "/update.aspx";  	//use network path reference so it works in ssl-offload scenarios  	url = url.Replace ("http://"' "//");  	url += "?core=" + Globals.FormatVersion (Assembly.GetExecutingAssembly ().GetName ().Version' "00"' 3' "");  	url += "&version=" + Globals.FormatVersion (version' "00"' 3' "");  	url += "&type=" + packageType;  	url += "&name=" + packageName;  	if (packageType.ToLowerInvariant () == "module") {  		var moduleType = (from m in InstalledModulesController.GetInstalledModules ()  		where m.ModuleName == packageName  		select m).SingleOrDefault ();  		if (moduleType != null) {  			url += "&no=" + moduleType.Instances;  		}  	}  	url += "&id=" + Host.GUID;  	if (packageType.ToUpper () == DotNetNukeContext.Current.Application.Type.ToUpper ()) {  		if (!String.IsNullOrEmpty (HostController.Instance.GetString ("NewsletterSubscribeEmail"))) {  			url += "&email=" + HttpUtility.UrlEncode (HostController.Instance.GetString ("NewsletterSubscribeEmail"));  		}  		var portals = PortalController.Instance.GetPortals ();  		url += "&no=" + portals.Count;  		url += "&os=" + Globals.FormatVersion (Globals.OperatingSystemVersion' "00"' 2' "");  		url += "&net=" + Globals.FormatVersion (Globals.NETFrameworkVersion' "00"' 2' "");  		url += "&db=" + Globals.FormatVersion (Globals.DatabaseEngineVersion' "00"' 2' "");  		var source = Config.GetSetting ("Source");  		if (!string.IsNullOrEmpty (source)) {  			url += "&src=" + source;  		}  	}  	if (!string.IsNullOrEmpty (culture)) {  		url += "&culture=" + culture;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The following statement contains a magic number: url += "?core=" + Globals.FormatVersion (Assembly.GetExecutingAssembly ().GetName ().Version' "00"' 3' "");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The following statement contains a magic number: url += "&version=" + Globals.FormatVersion (version' "00"' 3' "");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The following statement contains a magic number: if (packageType.ToUpper () == DotNetNukeContext.Current.Application.Type.ToUpper ()) {  	if (!String.IsNullOrEmpty (HostController.Instance.GetString ("NewsletterSubscribeEmail"))) {  		url += "&email=" + HttpUtility.UrlEncode (HostController.Instance.GetString ("NewsletterSubscribeEmail"));  	}  	var portals = PortalController.Instance.GetPortals ();  	url += "&no=" + portals.Count;  	url += "&os=" + Globals.FormatVersion (Globals.OperatingSystemVersion' "00"' 2' "");  	url += "&net=" + Globals.FormatVersion (Globals.NETFrameworkVersion' "00"' 2' "");  	url += "&db=" + Globals.FormatVersion (Globals.DatabaseEngineVersion' "00"' 2' "");  	var source = Config.GetSetting ("Source");  	if (!string.IsNullOrEmpty (source)) {  		url += "&src=" + source;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The following statement contains a magic number: if (packageType.ToUpper () == DotNetNukeContext.Current.Application.Type.ToUpper ()) {  	if (!String.IsNullOrEmpty (HostController.Instance.GetString ("NewsletterSubscribeEmail"))) {  		url += "&email=" + HttpUtility.UrlEncode (HostController.Instance.GetString ("NewsletterSubscribeEmail"));  	}  	var portals = PortalController.Instance.GetPortals ();  	url += "&no=" + portals.Count;  	url += "&os=" + Globals.FormatVersion (Globals.OperatingSystemVersion' "00"' 2' "");  	url += "&net=" + Globals.FormatVersion (Globals.NETFrameworkVersion' "00"' 2' "");  	url += "&db=" + Globals.FormatVersion (Globals.DatabaseEngineVersion' "00"' 2' "");  	var source = Config.GetSetting ("Source");  	if (!string.IsNullOrEmpty (source)) {  		url += "&src=" + source;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The following statement contains a magic number: if (packageType.ToUpper () == DotNetNukeContext.Current.Application.Type.ToUpper ()) {  	if (!String.IsNullOrEmpty (HostController.Instance.GetString ("NewsletterSubscribeEmail"))) {  		url += "&email=" + HttpUtility.UrlEncode (HostController.Instance.GetString ("NewsletterSubscribeEmail"));  	}  	var portals = PortalController.Instance.GetPortals ();  	url += "&no=" + portals.Count;  	url += "&os=" + Globals.FormatVersion (Globals.OperatingSystemVersion' "00"' 2' "");  	url += "&net=" + Globals.FormatVersion (Globals.NETFrameworkVersion' "00"' 2' "");  	url += "&db=" + Globals.FormatVersion (Globals.DatabaseEngineVersion' "00"' 2' "");  	var source = Config.GetSetting ("Source");  	if (!string.IsNullOrEmpty (source)) {  		url += "&src=" + source;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The following statement contains a magic number: url += "&os=" + Globals.FormatVersion (Globals.OperatingSystemVersion' "00"' 2' "");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The following statement contains a magic number: url += "&net=" + Globals.FormatVersion (Globals.NETFrameworkVersion' "00"' 2' "");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeIndicator,The following statement contains a magic number: url += "&db=" + Globals.FormatVersion (Globals.DatabaseEngineVersion' "00"' 2' "");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeRedirect,The following statement contains a magic number: if (!string.IsNullOrEmpty (Config.GetSetting ("UpdateServiceRedirect"))) {  	url = Config.GetSetting ("UpdateServiceRedirect");  } else {  	url = DotNetNukeContext.Current.Application.UpgradeUrl + "/redirect.aspx";  	url += "?core=" + Globals.FormatVersion (Assembly.GetExecutingAssembly ().GetName ().Version' "00"' 3' "");  	url += "&version=" + Globals.FormatVersion (version' "00"' 3' "");  	url += "&type=" + packageType;  	url += "&name=" + packageName;  	if (!string.IsNullOrEmpty (culture)) {  		url += "&culture=" + culture;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeRedirect,The following statement contains a magic number: if (!string.IsNullOrEmpty (Config.GetSetting ("UpdateServiceRedirect"))) {  	url = Config.GetSetting ("UpdateServiceRedirect");  } else {  	url = DotNetNukeContext.Current.Application.UpgradeUrl + "/redirect.aspx";  	url += "?core=" + Globals.FormatVersion (Assembly.GetExecutingAssembly ().GetName ().Version' "00"' 3' "");  	url += "&version=" + Globals.FormatVersion (version' "00"' 3' "");  	url += "&type=" + packageType;  	url += "&name=" + packageName;  	if (!string.IsNullOrEmpty (culture)) {  		url += "&culture=" + culture;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeRedirect,The following statement contains a magic number: url += "?core=" + Globals.FormatVersion (Assembly.GetExecutingAssembly ().GetName ().Version' "00"' 3' "");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeRedirect,The following statement contains a magic number: url += "&version=" + Globals.FormatVersion (version' "00"' 3' "");  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ActivateLicense,The following statement contains a magic number: if (isLicensable) {  	var sku = File.Exists (HttpContext.Current.Server.MapPath ("~\\bin\\DotNetNuke.Enterprise.dll")) ? "DNNENT" : "DNNPRO";  	HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' Localization.Localization.GetString ("ActivatingLicense"' Localization.Localization.GlobalResourceFile));  	var installConfig = InstallController.Instance.GetInstallConfig ();  	var licenseConfig = (installConfig != null) ? installConfig.License : null;  	if (licenseConfig != null) {  		dynamic licenseActivation = Reflection.CreateObject (Reflection.CreateType ("DotNetNuke.Professional.LicenseActivation.ViewLicx"));  		licenseActivation.AutoActivation (licenseConfig.AccountEmail' licenseConfig.InvoiceNumber' licenseConfig.WebServer' licenseConfig.LicenseType' sku);  		activationResult = licenseActivation.LicenseResult;  		//Log Event to Event Log  		EventLogController.Instance.AddLog ("License Activation"' "License Activated during install for: " + licenseConfig.AccountEmail + " | invoice: " + licenseConfig.InvoiceNumber' EventLogController.EventLogType.HOST_ALERT);  	}  }  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,ActivateLicense,The following statement contains a magic number: HtmlUtils.WriteFeedback (HttpContext.Current.Response' 2' Localization.Localization.GetString ("ActivatingLicense"' Localization.Localization.GlobalResourceFile));  
Magic Number,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,FindLocalizedContent,The following statement contains a magic number: if (xmlDocument != null) {  	var key = field.Substring (1' field.Length - 2);  	var localizedTitleNode = xmlDocument.SelectSingleNode ("//data[@name=\"" + key + "\"]");  	if (localizedTitleNode != null) {  		var valueNode = localizedTitleNode.SelectSingleNode ("value");  		if (valueNode != null) {  			var content = valueNode.InnerText;  			if (!string.IsNullOrEmpty (content)) {  				return content;  			}  		}  	}  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: try {  	sqlConnection.Open ();  	string serverVersion = sqlConnection.ServerVersion;  	if (serverVersion != null) {  		string[] serverVersionDetails = serverVersion.Split (new[] {  			"."  		}' StringSplitOptions.None);  		int versionNumber = int.Parse (serverVersionDetails [0]);  		switch (versionNumber) {  		case 8:  		//sql 2000  		case 9:  			//sql 2005  			isValidVersion = false;  			break;  		case 10:  		//sql 2008  		case 11:  		//sql 2010  		case 12:  			//sql 2012  			isValidVersion = true;  			break;  		default:  			//covers unknown versions and later releases  			isValidVersion = true;  			break;  		}  	}  } catch (Exception) {  	//cannot connect with the details  	isValidVersion = false;  } finally {  	sqlConnection.Close ();  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: try {  	sqlConnection.Open ();  	string serverVersion = sqlConnection.ServerVersion;  	if (serverVersion != null) {  		string[] serverVersionDetails = serverVersion.Split (new[] {  			"."  		}' StringSplitOptions.None);  		int versionNumber = int.Parse (serverVersionDetails [0]);  		switch (versionNumber) {  		case 8:  		//sql 2000  		case 9:  			//sql 2005  			isValidVersion = false;  			break;  		case 10:  		//sql 2008  		case 11:  		//sql 2010  		case 12:  			//sql 2012  			isValidVersion = true;  			break;  		default:  			//covers unknown versions and later releases  			isValidVersion = true;  			break;  		}  	}  } catch (Exception) {  	//cannot connect with the details  	isValidVersion = false;  } finally {  	sqlConnection.Close ();  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: try {  	sqlConnection.Open ();  	string serverVersion = sqlConnection.ServerVersion;  	if (serverVersion != null) {  		string[] serverVersionDetails = serverVersion.Split (new[] {  			"."  		}' StringSplitOptions.None);  		int versionNumber = int.Parse (serverVersionDetails [0]);  		switch (versionNumber) {  		case 8:  		//sql 2000  		case 9:  			//sql 2005  			isValidVersion = false;  			break;  		case 10:  		//sql 2008  		case 11:  		//sql 2010  		case 12:  			//sql 2012  			isValidVersion = true;  			break;  		default:  			//covers unknown versions and later releases  			isValidVersion = true;  			break;  		}  	}  } catch (Exception) {  	//cannot connect with the details  	isValidVersion = false;  } finally {  	sqlConnection.Close ();  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: try {  	sqlConnection.Open ();  	string serverVersion = sqlConnection.ServerVersion;  	if (serverVersion != null) {  		string[] serverVersionDetails = serverVersion.Split (new[] {  			"."  		}' StringSplitOptions.None);  		int versionNumber = int.Parse (serverVersionDetails [0]);  		switch (versionNumber) {  		case 8:  		//sql 2000  		case 9:  			//sql 2005  			isValidVersion = false;  			break;  		case 10:  		//sql 2008  		case 11:  		//sql 2010  		case 12:  			//sql 2012  			isValidVersion = true;  			break;  		default:  			//covers unknown versions and later releases  			isValidVersion = true;  			break;  		}  	}  } catch (Exception) {  	//cannot connect with the details  	isValidVersion = false;  } finally {  	sqlConnection.Close ();  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: try {  	sqlConnection.Open ();  	string serverVersion = sqlConnection.ServerVersion;  	if (serverVersion != null) {  		string[] serverVersionDetails = serverVersion.Split (new[] {  			"."  		}' StringSplitOptions.None);  		int versionNumber = int.Parse (serverVersionDetails [0]);  		switch (versionNumber) {  		case 8:  		//sql 2000  		case 9:  			//sql 2005  			isValidVersion = false;  			break;  		case 10:  		//sql 2008  		case 11:  		//sql 2010  		case 12:  			//sql 2012  			isValidVersion = true;  			break;  		default:  			//covers unknown versions and later releases  			isValidVersion = true;  			break;  		}  	}  } catch (Exception) {  	//cannot connect with the details  	isValidVersion = false;  } finally {  	sqlConnection.Close ();  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: if (serverVersion != null) {  	string[] serverVersionDetails = serverVersion.Split (new[] {  		"."  	}' StringSplitOptions.None);  	int versionNumber = int.Parse (serverVersionDetails [0]);  	switch (versionNumber) {  	case 8:  	//sql 2000  	case 9:  		//sql 2005  		isValidVersion = false;  		break;  	case 10:  	//sql 2008  	case 11:  	//sql 2010  	case 12:  		//sql 2012  		isValidVersion = true;  		break;  	default:  		//covers unknown versions and later releases  		isValidVersion = true;  		break;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: if (serverVersion != null) {  	string[] serverVersionDetails = serverVersion.Split (new[] {  		"."  	}' StringSplitOptions.None);  	int versionNumber = int.Parse (serverVersionDetails [0]);  	switch (versionNumber) {  	case 8:  	//sql 2000  	case 9:  		//sql 2005  		isValidVersion = false;  		break;  	case 10:  	//sql 2008  	case 11:  	//sql 2010  	case 12:  		//sql 2012  		isValidVersion = true;  		break;  	default:  		//covers unknown versions and later releases  		isValidVersion = true;  		break;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: if (serverVersion != null) {  	string[] serverVersionDetails = serverVersion.Split (new[] {  		"."  	}' StringSplitOptions.None);  	int versionNumber = int.Parse (serverVersionDetails [0]);  	switch (versionNumber) {  	case 8:  	//sql 2000  	case 9:  		//sql 2005  		isValidVersion = false;  		break;  	case 10:  	//sql 2008  	case 11:  	//sql 2010  	case 12:  		//sql 2012  		isValidVersion = true;  		break;  	default:  		//covers unknown versions and later releases  		isValidVersion = true;  		break;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: if (serverVersion != null) {  	string[] serverVersionDetails = serverVersion.Split (new[] {  		"."  	}' StringSplitOptions.None);  	int versionNumber = int.Parse (serverVersionDetails [0]);  	switch (versionNumber) {  	case 8:  	//sql 2000  	case 9:  		//sql 2005  		isValidVersion = false;  		break;  	case 10:  	//sql 2008  	case 11:  	//sql 2010  	case 12:  		//sql 2012  		isValidVersion = true;  		break;  	default:  		//covers unknown versions and later releases  		isValidVersion = true;  		break;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: if (serverVersion != null) {  	string[] serverVersionDetails = serverVersion.Split (new[] {  		"."  	}' StringSplitOptions.None);  	int versionNumber = int.Parse (serverVersionDetails [0]);  	switch (versionNumber) {  	case 8:  	//sql 2000  	case 9:  		//sql 2005  		isValidVersion = false;  		break;  	case 10:  	//sql 2008  	case 11:  	//sql 2010  	case 12:  		//sql 2012  		isValidVersion = true;  		break;  	default:  		//covers unknown versions and later releases  		isValidVersion = true;  		break;  	}  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: switch (versionNumber) {  case 8:  //sql 2000  case 9:  	//sql 2005  	isValidVersion = false;  	break;  case 10:  //sql 2008  case 11:  //sql 2010  case 12:  	//sql 2012  	isValidVersion = true;  	break;  default:  	//covers unknown versions and later releases  	isValidVersion = true;  	break;  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: switch (versionNumber) {  case 8:  //sql 2000  case 9:  	//sql 2005  	isValidVersion = false;  	break;  case 10:  //sql 2008  case 11:  //sql 2010  case 12:  	//sql 2012  	isValidVersion = true;  	break;  default:  	//covers unknown versions and later releases  	isValidVersion = true;  	break;  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: switch (versionNumber) {  case 8:  //sql 2000  case 9:  	//sql 2005  	isValidVersion = false;  	break;  case 10:  //sql 2008  case 11:  //sql 2010  case 12:  	//sql 2012  	isValidVersion = true;  	break;  default:  	//covers unknown versions and later releases  	isValidVersion = true;  	break;  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: switch (versionNumber) {  case 8:  //sql 2000  case 9:  	//sql 2005  	isValidVersion = false;  	break;  case 10:  //sql 2008  case 11:  //sql 2010  case 12:  	//sql 2012  	isValidVersion = true;  	break;  default:  	//covers unknown versions and later releases  	isValidVersion = true;  	break;  }  
Magic Number,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,IsValidSqlServerVersion,The following statement contains a magic number: switch (versionNumber) {  case 8:  //sql 2000  case 9:  	//sql 2005  	isValidVersion = false;  	break;  case 10:  //sql 2008  case 11:  //sql 2010  case 12:  	//sql 2012  	isValidVersion = true;  	break;  default:  	//covers unknown versions and later releases  	isValidVersion = true;  	break;  }  
Magic Number,DotNetNuke.Services.Cache,FBCachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\FBCachingProvider.cs,PurgeCacheFiles,The following statement contains a magic number: for (i = 0; i <= f.Length - 1; i++) {  	//get last write time for file  	DateTime dtLastWrite;  	dtLastWrite = File.GetLastWriteTime (f [i]);  	//if the cache file is more than 2 hours old ( no point in checking most recent cache files )  	if (dtLastWrite < DateTime.Now.Subtract (new TimeSpan (2' 0' 0))) {  		//get cachekey  		string strCacheKey = Path.GetFileNameWithoutExtension (f [i]);  		//if the cache key does not exist in memory  		if (DataCache.GetCache (strCacheKey) == null) {  			try {  				//delete the file  				File.Delete (f [i]);  				PurgedFiles += 1;  			} catch (Exception exc) {  				//an error occurred  				Logger.Error (exc);  				PurgeErrors += 1;  			}  		}  	}  }  
Magic Number,DotNetNuke.Services.Cache,FBCachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\FBCachingProvider.cs,PurgeCacheFiles,The following statement contains a magic number: if (dtLastWrite < DateTime.Now.Subtract (new TimeSpan (2' 0' 0))) {  	//get cachekey  	string strCacheKey = Path.GetFileNameWithoutExtension (f [i]);  	//if the cache key does not exist in memory  	if (DataCache.GetCache (strCacheKey) == null) {  		try {  			//delete the file  			File.Delete (f [i]);  			PurgedFiles += 1;  		} catch (Exception exc) {  			//an error occurred  			Logger.Error (exc);  			PurgeErrors += 1;  		}  	}  }  
Magic Number,DotNetNuke.Services.Localization.Internal,LocalizationImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Internal\LocalizationImpl.cs,BestCultureCodeBasedOnBrowserLanguages,The following statement contains a magic number: foreach (string langHeader in HttpContextSource.Current.Request.UserLanguages ?? new string[0]) {  	string lang = langHeader;  	//strip any ;q=xx  	lang = lang.Split (';') [0];  	//check for exact match e.g. de-DE == de-DE  	if (lang.Contains ('-')) {  		var match = values.FirstOrDefault (x => x == lang);  		if (match != null) {  			return match;  		}  	}  	//only keep the initial language value  	if (lang.Length > 1) {  		lang = lang.Substring (0' 2);  		//check for language match e.g. en-GB == en-US because en == en  		var match = values.FirstOrDefault (x => x.StartsWith (lang));  		if (match != null) {  			return match;  		}  	}  }  
Magic Number,DotNetNuke.Services.Localization.Internal,LocalizationImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Internal\LocalizationImpl.cs,BestCultureCodeBasedOnBrowserLanguages,The following statement contains a magic number: if (lang.Length > 1) {  	lang = lang.Substring (0' 2);  	//check for language match e.g. en-GB == en-US because en == en  	var match = values.FirstOrDefault (x => x.StartsWith (lang));  	if (match != null) {  		return match;  	}  }  
Magic Number,DotNetNuke.Services.Localization.Internal,LocalizationImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\Internal\LocalizationImpl.cs,BestCultureCodeBasedOnBrowserLanguages,The following statement contains a magic number: lang = lang.Substring (0' 2);  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeCache,The following statement contains a magic number: foreach (string File in Directory.GetFiles (folder' "*.resources")) {  	if (!FileSystemUtils.DeleteFileWithWait (File' 100' 200)) {  		filesNotDeleted.Append (String.Format ("{0};"' File));  	} else {  		i += 1;  	}  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeCache,The following statement contains a magic number: foreach (string File in Directory.GetFiles (folder' "*.resources")) {  	if (!FileSystemUtils.DeleteFileWithWait (File' 100' 200)) {  		filesNotDeleted.Append (String.Format ("{0};"' File));  	} else {  		i += 1;  	}  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeCache,The following statement contains a magic number: if (!FileSystemUtils.DeleteFileWithWait (File' 100' 200)) {  	filesNotDeleted.Append (String.Format ("{0};"' File));  } else {  	i += 1;  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeCache,The following statement contains a magic number: if (!FileSystemUtils.DeleteFileWithWait (File' 100' 200)) {  	filesNotDeleted.Append (String.Format ("{0};"' File));  } else {  	i += 1;  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: if (Directory.Exists (cacheFolder) && IsPathInApplication (cacheFolder)) {  	foreach (string File in Directory.GetFiles (cacheFolder' String.Format ("*{0}"' AttribFileExtension))) {  		if (IsFileExpired (File)) {  			string fileToDelete = File.Replace (AttribFileExtension' DataFileExtension);  			if (!FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200)) {  				filesNotDeleted.Append (String.Format ("{0};"' fileToDelete));  			} else {  				i += 1;  			}  		}  	}  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: if (Directory.Exists (cacheFolder) && IsPathInApplication (cacheFolder)) {  	foreach (string File in Directory.GetFiles (cacheFolder' String.Format ("*{0}"' AttribFileExtension))) {  		if (IsFileExpired (File)) {  			string fileToDelete = File.Replace (AttribFileExtension' DataFileExtension);  			if (!FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200)) {  				filesNotDeleted.Append (String.Format ("{0};"' fileToDelete));  			} else {  				i += 1;  			}  		}  	}  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: foreach (string File in Directory.GetFiles (cacheFolder' String.Format ("*{0}"' AttribFileExtension))) {  	if (IsFileExpired (File)) {  		string fileToDelete = File.Replace (AttribFileExtension' DataFileExtension);  		if (!FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200)) {  			filesNotDeleted.Append (String.Format ("{0};"' fileToDelete));  		} else {  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: foreach (string File in Directory.GetFiles (cacheFolder' String.Format ("*{0}"' AttribFileExtension))) {  	if (IsFileExpired (File)) {  		string fileToDelete = File.Replace (AttribFileExtension' DataFileExtension);  		if (!FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200)) {  			filesNotDeleted.Append (String.Format ("{0};"' fileToDelete));  		} else {  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: if (IsFileExpired (File)) {  	string fileToDelete = File.Replace (AttribFileExtension' DataFileExtension);  	if (!FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200)) {  		filesNotDeleted.Append (String.Format ("{0};"' fileToDelete));  	} else {  		i += 1;  	}  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: if (IsFileExpired (File)) {  	string fileToDelete = File.Replace (AttribFileExtension' DataFileExtension);  	if (!FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200)) {  		filesNotDeleted.Append (String.Format ("{0};"' fileToDelete));  	} else {  		i += 1;  	}  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: if (!FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200)) {  	filesNotDeleted.Append (String.Format ("{0};"' fileToDelete));  } else {  	i += 1;  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,PurgeExpiredItems,The following statement contains a magic number: if (!FileSystemUtils.DeleteFileWithWait (fileToDelete' 100' 200)) {  	filesNotDeleted.Append (String.Format ("{0};"' fileToDelete));  } else {  	i += 1;  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,SetModule,The following statement contains a magic number: try {  	string cachedOutputFile = GetCachedOutputFileName (tabModuleId' cacheKey);  	if (File.Exists (cachedOutputFile)) {  		FileSystemUtils.DeleteFileWithWait (cachedOutputFile' 100' 200);  	}  	string attribFile = GetAttribFileName (tabModuleId' cacheKey);  	File.WriteAllBytes (cachedOutputFile' output);  	File.WriteAllLines (attribFile' new[] {  		DateTime.UtcNow.Add (duration).ToString (CultureInfo.InvariantCulture)  	});  } catch (Exception ex) {  	Exceptions.Exceptions.LogException (ex);  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,SetModule,The following statement contains a magic number: try {  	string cachedOutputFile = GetCachedOutputFileName (tabModuleId' cacheKey);  	if (File.Exists (cachedOutputFile)) {  		FileSystemUtils.DeleteFileWithWait (cachedOutputFile' 100' 200);  	}  	string attribFile = GetAttribFileName (tabModuleId' cacheKey);  	File.WriteAllBytes (cachedOutputFile' output);  	File.WriteAllLines (attribFile' new[] {  		DateTime.UtcNow.Add (duration).ToString (CultureInfo.InvariantCulture)  	});  } catch (Exception ex) {  	Exceptions.Exceptions.LogException (ex);  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,SetModule,The following statement contains a magic number: if (File.Exists (cachedOutputFile)) {  	FileSystemUtils.DeleteFileWithWait (cachedOutputFile' 100' 200);  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,SetModule,The following statement contains a magic number: if (File.Exists (cachedOutputFile)) {  	FileSystemUtils.DeleteFileWithWait (cachedOutputFile' 100' 200);  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,SetModule,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (cachedOutputFile' 100' 200);  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,SetModule,The following statement contains a magic number: FileSystemUtils.DeleteFileWithWait (cachedOutputFile' 100' 200);  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,Remove,The following statement contains a magic number: foreach (string File in Directory.GetFiles (cacheFolder' tabModuleId + "_*.*")) {  	if (!FileSystemUtils.DeleteFileWithWait (File' 100' 200)) {  		filesNotDeleted.Append (File + ";");  	} else {  		i += 1;  	}  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,Remove,The following statement contains a magic number: foreach (string File in Directory.GetFiles (cacheFolder' tabModuleId + "_*.*")) {  	if (!FileSystemUtils.DeleteFileWithWait (File' 100' 200)) {  		filesNotDeleted.Append (File + ";");  	} else {  		i += 1;  	}  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,Remove,The following statement contains a magic number: if (!FileSystemUtils.DeleteFileWithWait (File' 100' 200)) {  	filesNotDeleted.Append (File + ";");  } else {  	i += 1;  }  
Magic Number,DotNetNuke.Services.ModuleCache,FileProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ModuleCache\FileProvider.cs,Remove,The following statement contains a magic number: if (!FileSystemUtils.DeleteFileWithWait (File' 100' 200)) {  	filesNotDeleted.Append (File + ";");  } else {  	i += 1;  }  
Magic Number,DotNetNuke.Services.Scheduling,DNNScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\DNNScheduler.cs,StartAndWaitForResponse,The following statement contains a magic number: if (Enabled) {  	var newThread = new Thread (Start) {  		IsBackground = true  	};  	newThread.Start ();  	//wait for up to 30 seconds for thread  	//to start up  	for (int i = 0; i <= 30; i++) {  		if (GetScheduleStatus () != ScheduleStatus.STOPPED) {  			return;  		}  		Thread.Sleep (1000);  	}  }  
Magic Number,DotNetNuke.Services.Scheduling,DNNScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\DNNScheduler.cs,StartAndWaitForResponse,The following statement contains a magic number: if (Enabled) {  	var newThread = new Thread (Start) {  		IsBackground = true  	};  	newThread.Start ();  	//wait for up to 30 seconds for thread  	//to start up  	for (int i = 0; i <= 30; i++) {  		if (GetScheduleStatus () != ScheduleStatus.STOPPED) {  			return;  		}  		Thread.Sleep (1000);  	}  }  
Magic Number,DotNetNuke.Services.Scheduling,DNNScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\DNNScheduler.cs,StartAndWaitForResponse,The following statement contains a magic number: for (int i = 0; i <= 30; i++) {  	if (GetScheduleStatus () != ScheduleStatus.STOPPED) {  		return;  	}  	Thread.Sleep (1000);  }  
Magic Number,DotNetNuke.Services.Scheduling,DNNScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\DNNScheduler.cs,StartAndWaitForResponse,The following statement contains a magic number: for (int i = 0; i <= 30; i++) {  	if (GetScheduleStatus () != ScheduleStatus.STOPPED) {  		return;  	}  	Thread.Sleep (1000);  }  
Magic Number,DotNetNuke.Services.Scheduling,DNNScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\DNNScheduler.cs,StartAndWaitForResponse,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,DotNetNuke.Services.Scheduling,SchedulingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingProvider.cs,SchedulingProvider,The following statement contains a magic number: if (settings != null) {  	ProviderPath = settings ["providerPath"];  	string str;  	bool dbg;  	if (settings.TryGetValue ("debug"' out str) && bool.TryParse (str' out dbg)) {  		Debug = dbg;  	}  	int value;  	if (!settings.TryGetValue ("maxThreads"' out str) || !int.TryParse (str' out value)) {  		value = 1;  	}  	MaxThreads = value;  	//if (!settings.TryGetValue("delayAtAppStart"' out str) || !int.TryParse(str' out value))  	//{  	//    value = 60;  	//}  	if (DotNetNuke.Common.Globals.Status != Globals.UpgradeStatus.Install) {  		DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  	} else {  		DelayAtAppStart = 60;  	}  } else {  	MaxThreads = 1;  	if (DotNetNuke.Common.Globals.Status != Globals.UpgradeStatus.Install) {  		DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  	} else {  		DelayAtAppStart = 60;  	}  }  
Magic Number,DotNetNuke.Services.Scheduling,SchedulingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingProvider.cs,SchedulingProvider,The following statement contains a magic number: if (settings != null) {  	ProviderPath = settings ["providerPath"];  	string str;  	bool dbg;  	if (settings.TryGetValue ("debug"' out str) && bool.TryParse (str' out dbg)) {  		Debug = dbg;  	}  	int value;  	if (!settings.TryGetValue ("maxThreads"' out str) || !int.TryParse (str' out value)) {  		value = 1;  	}  	MaxThreads = value;  	//if (!settings.TryGetValue("delayAtAppStart"' out str) || !int.TryParse(str' out value))  	//{  	//    value = 60;  	//}  	if (DotNetNuke.Common.Globals.Status != Globals.UpgradeStatus.Install) {  		DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  	} else {  		DelayAtAppStart = 60;  	}  } else {  	MaxThreads = 1;  	if (DotNetNuke.Common.Globals.Status != Globals.UpgradeStatus.Install) {  		DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  	} else {  		DelayAtAppStart = 60;  	}  }  
Magic Number,DotNetNuke.Services.Scheduling,SchedulingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingProvider.cs,SchedulingProvider,The following statement contains a magic number: if (settings != null) {  	ProviderPath = settings ["providerPath"];  	string str;  	bool dbg;  	if (settings.TryGetValue ("debug"' out str) && bool.TryParse (str' out dbg)) {  		Debug = dbg;  	}  	int value;  	if (!settings.TryGetValue ("maxThreads"' out str) || !int.TryParse (str' out value)) {  		value = 1;  	}  	MaxThreads = value;  	//if (!settings.TryGetValue("delayAtAppStart"' out str) || !int.TryParse(str' out value))  	//{  	//    value = 60;  	//}  	if (DotNetNuke.Common.Globals.Status != Globals.UpgradeStatus.Install) {  		DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  	} else {  		DelayAtAppStart = 60;  	}  } else {  	MaxThreads = 1;  	if (DotNetNuke.Common.Globals.Status != Globals.UpgradeStatus.Install) {  		DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  	} else {  		DelayAtAppStart = 60;  	}  }  
Magic Number,DotNetNuke.Services.Scheduling,SchedulingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingProvider.cs,SchedulingProvider,The following statement contains a magic number: if (settings != null) {  	ProviderPath = settings ["providerPath"];  	string str;  	bool dbg;  	if (settings.TryGetValue ("debug"' out str) && bool.TryParse (str' out dbg)) {  		Debug = dbg;  	}  	int value;  	if (!settings.TryGetValue ("maxThreads"' out str) || !int.TryParse (str' out value)) {  		value = 1;  	}  	MaxThreads = value;  	//if (!settings.TryGetValue("delayAtAppStart"' out str) || !int.TryParse(str' out value))  	//{  	//    value = 60;  	//}  	if (DotNetNuke.Common.Globals.Status != Globals.UpgradeStatus.Install) {  		DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  	} else {  		DelayAtAppStart = 60;  	}  } else {  	MaxThreads = 1;  	if (DotNetNuke.Common.Globals.Status != Globals.UpgradeStatus.Install) {  		DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  	} else {  		DelayAtAppStart = 60;  	}  }  
Magic Number,DotNetNuke.Services.Scheduling,SchedulingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingProvider.cs,SchedulingProvider,The following statement contains a magic number: if (DotNetNuke.Common.Globals.Status != Globals.UpgradeStatus.Install) {  	DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  } else {  	DelayAtAppStart = 60;  }  
Magic Number,DotNetNuke.Services.Scheduling,SchedulingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingProvider.cs,SchedulingProvider,The following statement contains a magic number: if (DotNetNuke.Common.Globals.Status != Globals.UpgradeStatus.Install) {  	DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  } else {  	DelayAtAppStart = 60;  }  
Magic Number,DotNetNuke.Services.Scheduling,SchedulingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingProvider.cs,SchedulingProvider,The following statement contains a magic number: DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  
Magic Number,DotNetNuke.Services.Scheduling,SchedulingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingProvider.cs,SchedulingProvider,The following statement contains a magic number: DelayAtAppStart = 60;  
Magic Number,DotNetNuke.Services.Scheduling,SchedulingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingProvider.cs,SchedulingProvider,The following statement contains a magic number: if (DotNetNuke.Common.Globals.Status != Globals.UpgradeStatus.Install) {  	DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  } else {  	DelayAtAppStart = 60;  }  
Magic Number,DotNetNuke.Services.Scheduling,SchedulingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingProvider.cs,SchedulingProvider,The following statement contains a magic number: if (DotNetNuke.Common.Globals.Status != Globals.UpgradeStatus.Install) {  	DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  } else {  	DelayAtAppStart = 60;  }  
Magic Number,DotNetNuke.Services.Scheduling,SchedulingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingProvider.cs,SchedulingProvider,The following statement contains a magic number: DelayAtAppStart = HostController.Instance.GetInteger ("SchedulerdelayAtAppStart"' 1) * 60;  
Magic Number,DotNetNuke.Services.Scheduling,SchedulingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Scheduling\SchedulingProvider.cs,SchedulingProvider,The following statement contains a magic number: DelayAtAppStart = 60;  
Magic Number,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetPriority,The following statement contains a magic number: if (useLevelBasedPagePriority) {  	if (objTab.Level >= 9) {  		priority = 0.1F;  	} else {  		priority = Convert.ToSingle (1 - (objTab.Level * 0.1));  	}  	if (priority < minPagePriority) {  		priority = minPagePriority;  	}  }  
Magic Number,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetPriority,The following statement contains a magic number: if (useLevelBasedPagePriority) {  	if (objTab.Level >= 9) {  		priority = 0.1F;  	} else {  		priority = Convert.ToSingle (1 - (objTab.Level * 0.1));  	}  	if (priority < minPagePriority) {  		priority = minPagePriority;  	}  }  
Magic Number,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetPriority,The following statement contains a magic number: if (objTab.Level >= 9) {  	priority = 0.1F;  } else {  	priority = Convert.ToSingle (1 - (objTab.Level * 0.1));  }  
Magic Number,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetPriority,The following statement contains a magic number: if (objTab.Level >= 9) {  	priority = 0.1F;  } else {  	priority = Convert.ToSingle (1 - (objTab.Level * 0.1));  }  
Magic Number,DotNetNuke.Services.Sitemap,CoreSitemapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\CoreSitemapProvider.cs,GetPriority,The following statement contains a magic number: priority = Convert.ToSingle (1 - (objTab.Level * 0.1));  
Magic Number,DotNetNuke.Services.Sitemap,SitemapBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\SitemapBuilder.cs,BuildSiteMap,The following statement contains a magic number: foreach (SitemapProvider _provider in Providers) {  	isProviderEnabled = bool.Parse (PortalController.GetPortalSetting (_provider.Name + "Enabled"' PortalSettings.PortalId' "True"));  	if (isProviderEnabled) {  		// check if we should override the priorities  		isProviderPriorityOverrided = bool.Parse (PortalController.GetPortalSetting (_provider.Name + "Override"' PortalSettings.PortalId' "False"));  		// stored as an integer (pr * 100) to prevent from translating errors with the decimal point  		providerPriorityValue = float.Parse (PortalController.GetPortalSetting (_provider.Name + "Value"' PortalSettings.PortalId' "50")) / 100;  		// Get all urls from provider  		List<SitemapUrl> urls = new List<SitemapUrl> ();  		try {  			urls = _provider.GetUrls (PortalSettings.PortalId' PortalSettings' SITEMAP_VERSION);  		} catch (Exception ex) {  			Services.Exceptions.Exceptions.LogException (new Exception (Localization.Localization.GetExceptionMessage ("SitemapProviderError"' "URL sitemap provider '{0}' failed with error: {1}"' _provider.Name' ex.Message)));  		}  		foreach (SitemapUrl url in urls) {  			if (isProviderPriorityOverrided) {  				url.Priority = providerPriorityValue;  			}  			if (url.Priority > 0 && url.Priority >= excludePriority)//#RS# a valid sitemap needs priorities larger then 0' otherwise the sitemap will be rejected by google as invalid  			 {  				allUrls.Add (url);  			}  		}  	}  }  
Magic Number,DotNetNuke.Services.Sitemap,SitemapBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\SitemapBuilder.cs,BuildSiteMap,The following statement contains a magic number: if (isProviderEnabled) {  	// check if we should override the priorities  	isProviderPriorityOverrided = bool.Parse (PortalController.GetPortalSetting (_provider.Name + "Override"' PortalSettings.PortalId' "False"));  	// stored as an integer (pr * 100) to prevent from translating errors with the decimal point  	providerPriorityValue = float.Parse (PortalController.GetPortalSetting (_provider.Name + "Value"' PortalSettings.PortalId' "50")) / 100;  	// Get all urls from provider  	List<SitemapUrl> urls = new List<SitemapUrl> ();  	try {  		urls = _provider.GetUrls (PortalSettings.PortalId' PortalSettings' SITEMAP_VERSION);  	} catch (Exception ex) {  		Services.Exceptions.Exceptions.LogException (new Exception (Localization.Localization.GetExceptionMessage ("SitemapProviderError"' "URL sitemap provider '{0}' failed with error: {1}"' _provider.Name' ex.Message)));  	}  	foreach (SitemapUrl url in urls) {  		if (isProviderPriorityOverrided) {  			url.Priority = providerPriorityValue;  		}  		if (url.Priority > 0 && url.Priority >= excludePriority)//#RS# a valid sitemap needs priorities larger then 0' otherwise the sitemap will be rejected by google as invalid  		 {  			allUrls.Add (url);  		}  	}  }  
Magic Number,DotNetNuke.Services.Sitemap,SitemapBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Sitemap\SitemapBuilder.cs,BuildSiteMap,The following statement contains a magic number: providerPriorityValue = float.Parse (PortalController.GetPortalSetting (_provider.Name + "Value"' PortalSettings.PortalId' "50")) / 100;  
Magic Number,DotNetNuke.Services.Social.Messaging.Internal,InternalMessagingControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Internal\InternalMessagingControllerImpl.cs,RecipientLimit,The following statement contains a magic number: return GetPortalSettingAsInteger ("MessagingRecipientLimit"' portalId' 5);  
Magic Number,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetEmailItemContent,The following statement contains a magic number: if (messageDetails.NotificationTypeID == 3) {  	var toUser = UserController.Instance.GetUser (messageDetails.PortalID' message.UserID);  	var defaultLanguage = toUser.Profile.PreferredLocale;  	var acceptUrl = GetRelationshipAcceptRequestUrl (portalSettings' authorId' "FollowBack");  	var profileUrl = GetProfileUrl (portalSettings' authorId);  	var linkContent = GetFollowRequestActionsTemplate (defaultLanguage);  	emailItemContent = emailItemContent.Replace ("[FOLLOWREQUESTACTIONS]"' string.Format (linkContent' acceptUrl' profileUrl));  }  
Magic Number,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetProfilePicUrl,The following statement contains a magic number: return string.Format ("http://{0}/DnnImageHandler.ashx?mode=profilepic&userId={1}&h={2}&w={3}"' portalSettings.DefaultPortalAlias' userId' 64' 64);  
Magic Number,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetProfilePicUrl,The following statement contains a magic number: return string.Format ("http://{0}/DnnImageHandler.ashx?mode=profilepic&userId={1}&h={2}&w={3}"' portalSettings.DefaultPortalAlias' userId' 64' 64);  
Magic Number,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetNotificationUrl,The following statement contains a magic number: if (messageTabId <= 0) {  	messageTabId = portalSettings.UserTabId;  	var profileTab = TabController.Instance.GetTab (portalSettings.UserTabId' portalSettings.PortalId' false);  	if (profileTab != null) {  		var childTabs = TabController.Instance.GetTabsByPortal (profileTab.PortalID).DescendentsOf (profileTab.TabID);  		foreach (var tab in childTabs) {  			foreach (var kvp in ModuleController.Instance.GetTabModules (tab.TabID)) {  				var module = kvp.Value;  				if (module.DesktopModule.FriendlyName == "Message Center") {  					messageTabId = tab.TabID;  					break;  				}  			}  		}  	}  	DataCache.SetCache (cacheKey' messageTabId' TimeSpan.FromMinutes (20));  }  
Magic Number,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,GetNotificationUrl,The following statement contains a magic number: DataCache.SetCache (cacheKey' messageTabId' TimeSpan.FromMinutes (20));  
Magic Number,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,HandleFrequentDigests,The following statement contains a magic number: handledMessages = this.HandleFrequencyDigest (DateTime.Now.AddDays (-7)' SettingLastWeeklyRun' Frequency.Weekly' schedulerInstance' remainingMessages);  
Magic Number,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,HandleFrequentDigests,The following statement contains a magic number: this.HandleFrequencyDigest (DateTime.Now.AddDays (-30)' SettingLastMonthlyRun' Frequency.Monthly' schedulerInstance' remainingMessages);  
Magic Number,DotNetNuke.Services.Social.Messaging.Scheduler,CoreMessagingScheduler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Scheduler\CoreMessagingScheduler.cs,ResolveUrl,The following statement contains a magic number: foreach (Match match in matches) {  	var link = match.Groups [2].Value;  	var defaultAlias = portalSettings.DefaultPortalAlias;  	var domain = Globals.AddHTTP (defaultAlias);  	if (defaultAlias.Contains ("/")) {  		var subDomain = defaultAlias.Substring (defaultAlias.IndexOf ("/"' StringComparison.InvariantCultureIgnoreCase));  		if (link.StartsWith (subDomain' StringComparison.InvariantCultureIgnoreCase)) {  			link = link.Substring (subDomain.Length);  		}  	}  	template = template.Replace (match.Value);  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,DesktopModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\DesktopModulePermissionsGrid.cs,ParseKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (Settings [2])) {  	objDesktopModulePermission.DesktopModulePermissionID = -1;  } else {  	objDesktopModulePermission.DesktopModulePermissionID = Convert.ToInt32 (Settings [2]);  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,DesktopModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\DesktopModulePermissionsGrid.cs,ParseKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (Settings [2])) {  	objDesktopModulePermission.DesktopModulePermissionID = -1;  } else {  	objDesktopModulePermission.DesktopModulePermissionID = Convert.ToInt32 (Settings [2]);  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,DesktopModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\DesktopModulePermissionsGrid.cs,ParseKeys,The following statement contains a magic number: objDesktopModulePermission.DesktopModulePermissionID = Convert.ToInt32 (Settings [2]);  
Magic Number,DotNetNuke.Security.Permissions.Controls,DesktopModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\DesktopModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (savedState != null) {  	//Load State from the array of objects that was saved with SaveViewState.  	var myState = (object[])savedState;  	//Load Base Controls ViewState  	if (myState [0] != null) {  		base.LoadViewState (myState [0]);  	}  	//Load DesktopModuleId  	if (myState [1] != null) {  		PortalDesktopModuleID = Convert.ToInt32 (myState [1]);  	}  	//Load DesktopModulePermissions  	if (myState [2] != null) {  		_DesktopModulePermissions = new DesktopModulePermissionCollection ();  		string state = Convert.ToString (myState [2]);  		if (!String.IsNullOrEmpty (state)) {  			//First Break the String into individual Keys  			string[] permissionKeys = state.Split (new[] {  				"##"  			}' StringSplitOptions.None);  			foreach (string key in permissionKeys) {  				string[] Settings = key.Split ('|');  				_DesktopModulePermissions.Add (ParseKeys (Settings));  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,DesktopModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\DesktopModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (savedState != null) {  	//Load State from the array of objects that was saved with SaveViewState.  	var myState = (object[])savedState;  	//Load Base Controls ViewState  	if (myState [0] != null) {  		base.LoadViewState (myState [0]);  	}  	//Load DesktopModuleId  	if (myState [1] != null) {  		PortalDesktopModuleID = Convert.ToInt32 (myState [1]);  	}  	//Load DesktopModulePermissions  	if (myState [2] != null) {  		_DesktopModulePermissions = new DesktopModulePermissionCollection ();  		string state = Convert.ToString (myState [2]);  		if (!String.IsNullOrEmpty (state)) {  			//First Break the String into individual Keys  			string[] permissionKeys = state.Split (new[] {  				"##"  			}' StringSplitOptions.None);  			foreach (string key in permissionKeys) {  				string[] Settings = key.Split ('|');  				_DesktopModulePermissions.Add (ParseKeys (Settings));  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,DesktopModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\DesktopModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (myState [2] != null) {  	_DesktopModulePermissions = new DesktopModulePermissionCollection ();  	string state = Convert.ToString (myState [2]);  	if (!String.IsNullOrEmpty (state)) {  		//First Break the String into individual Keys  		string[] permissionKeys = state.Split (new[] {  			"##"  		}' StringSplitOptions.None);  		foreach (string key in permissionKeys) {  			string[] Settings = key.Split ('|');  			_DesktopModulePermissions.Add (ParseKeys (Settings));  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,DesktopModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\DesktopModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (myState [2] != null) {  	_DesktopModulePermissions = new DesktopModulePermissionCollection ();  	string state = Convert.ToString (myState [2]);  	if (!String.IsNullOrEmpty (state)) {  		//First Break the String into individual Keys  		string[] permissionKeys = state.Split (new[] {  			"##"  		}' StringSplitOptions.None);  		foreach (string key in permissionKeys) {  			string[] Settings = key.Split ('|');  			_DesktopModulePermissions.Add (ParseKeys (Settings));  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,DesktopModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\DesktopModulePermissionsGrid.cs,SaveViewState,The following statement contains a magic number: allStates [2] = sb.ToString ();  
Magic Number,DotNetNuke.Security.Permissions.Controls,FolderPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\FolderPermissionsGrid.cs,ParseKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (settings [2])) {  	objFolderPermission.FolderPermissionID = -1;  } else {  	objFolderPermission.FolderPermissionID = Convert.ToInt32 (settings [2]);  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,FolderPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\FolderPermissionsGrid.cs,ParseKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (settings [2])) {  	objFolderPermission.FolderPermissionID = -1;  } else {  	objFolderPermission.FolderPermissionID = Convert.ToInt32 (settings [2]);  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,FolderPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\FolderPermissionsGrid.cs,ParseKeys,The following statement contains a magic number: objFolderPermission.FolderPermissionID = Convert.ToInt32 (settings [2]);  
Magic Number,DotNetNuke.Security.Permissions.Controls,FolderPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\FolderPermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (savedState != null) {  	//Load State from the array of objects that was saved with SaveViewState.  	var myState = (object[])savedState;  	//Load Base Controls ViewState  	if (myState [0] != null) {  		base.LoadViewState (myState [0]);  	}  	//Load FolderPath  	if (myState [1] != null) {  		_folderPath = Convert.ToString (myState [1]);  	}  	//Load FolderPermissions  	if (myState [2] != null) {  		FolderPermissions = new FolderPermissionCollection ();  		string state = Convert.ToString (myState [2]);  		if (!String.IsNullOrEmpty (state)) {  			//First Break the String into individual Keys  			string[] permissionKeys = state.Split (new[] {  				"##"  			}' StringSplitOptions.None);  			foreach (string key in permissionKeys) {  				string[] settings = key.Split ('|');  				FolderPermissions.Add (ParseKeys (settings));  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,FolderPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\FolderPermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (savedState != null) {  	//Load State from the array of objects that was saved with SaveViewState.  	var myState = (object[])savedState;  	//Load Base Controls ViewState  	if (myState [0] != null) {  		base.LoadViewState (myState [0]);  	}  	//Load FolderPath  	if (myState [1] != null) {  		_folderPath = Convert.ToString (myState [1]);  	}  	//Load FolderPermissions  	if (myState [2] != null) {  		FolderPermissions = new FolderPermissionCollection ();  		string state = Convert.ToString (myState [2]);  		if (!String.IsNullOrEmpty (state)) {  			//First Break the String into individual Keys  			string[] permissionKeys = state.Split (new[] {  				"##"  			}' StringSplitOptions.None);  			foreach (string key in permissionKeys) {  				string[] settings = key.Split ('|');  				FolderPermissions.Add (ParseKeys (settings));  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,FolderPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\FolderPermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (myState [2] != null) {  	FolderPermissions = new FolderPermissionCollection ();  	string state = Convert.ToString (myState [2]);  	if (!String.IsNullOrEmpty (state)) {  		//First Break the String into individual Keys  		string[] permissionKeys = state.Split (new[] {  			"##"  		}' StringSplitOptions.None);  		foreach (string key in permissionKeys) {  			string[] settings = key.Split ('|');  			FolderPermissions.Add (ParseKeys (settings));  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,FolderPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\FolderPermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (myState [2] != null) {  	FolderPermissions = new FolderPermissionCollection ();  	string state = Convert.ToString (myState [2]);  	if (!String.IsNullOrEmpty (state)) {  		//First Break the String into individual Keys  		string[] permissionKeys = state.Split (new[] {  			"##"  		}' StringSplitOptions.None);  		foreach (string key in permissionKeys) {  			string[] settings = key.Split ('|');  			FolderPermissions.Add (ParseKeys (settings));  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,FolderPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\FolderPermissionsGrid.cs,SaveViewState,The following statement contains a magic number: allStates [2] = sb.ToString ();  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,ParseKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (Settings [2])) {  	objModulePermission.ModulePermissionID = -1;  } else {  	objModulePermission.ModulePermissionID = Convert.ToInt32 (Settings [2]);  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,ParseKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (Settings [2])) {  	objModulePermission.ModulePermissionID = -1;  } else {  	objModulePermission.ModulePermissionID = Convert.ToInt32 (Settings [2]);  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,ParseKeys,The following statement contains a magic number: objModulePermission.ModulePermissionID = Convert.ToInt32 (Settings [2]);  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (savedState != null) {  	//Load State from the array of objects that was saved with SaveViewState.  	var myState = (object[])savedState;  	//Load Base Controls ViewState  	if (myState [0] != null) {  		base.LoadViewState (myState [0]);  	}  	//Load ModuleID  	if (myState [1] != null) {  		ModuleID = Convert.ToInt32 (myState [1]);  	}  	//Load TabId  	if (myState [2] != null) {  		TabId = Convert.ToInt32 (myState [2]);  	}  	//Load InheritViewPermissionsFromTab  	if (myState [3] != null) {  		InheritViewPermissionsFromTab = Convert.ToBoolean (myState [3]);  	}  	//Load ModulePermissions  	if (myState [4] != null) {  		_ModulePermissions = new ModulePermissionCollection ();  		string state = Convert.ToString (myState [4]);  		if (!String.IsNullOrEmpty (state)) {  			//First Break the String into individual Keys  			string[] permissionKeys = state.Split (new[] {  				"##"  			}' StringSplitOptions.None);  			foreach (string key in permissionKeys) {  				string[] Settings = key.Split ('|');  				_ModulePermissions.Add (ParseKeys (Settings));  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (savedState != null) {  	//Load State from the array of objects that was saved with SaveViewState.  	var myState = (object[])savedState;  	//Load Base Controls ViewState  	if (myState [0] != null) {  		base.LoadViewState (myState [0]);  	}  	//Load ModuleID  	if (myState [1] != null) {  		ModuleID = Convert.ToInt32 (myState [1]);  	}  	//Load TabId  	if (myState [2] != null) {  		TabId = Convert.ToInt32 (myState [2]);  	}  	//Load InheritViewPermissionsFromTab  	if (myState [3] != null) {  		InheritViewPermissionsFromTab = Convert.ToBoolean (myState [3]);  	}  	//Load ModulePermissions  	if (myState [4] != null) {  		_ModulePermissions = new ModulePermissionCollection ();  		string state = Convert.ToString (myState [4]);  		if (!String.IsNullOrEmpty (state)) {  			//First Break the String into individual Keys  			string[] permissionKeys = state.Split (new[] {  				"##"  			}' StringSplitOptions.None);  			foreach (string key in permissionKeys) {  				string[] Settings = key.Split ('|');  				_ModulePermissions.Add (ParseKeys (Settings));  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (savedState != null) {  	//Load State from the array of objects that was saved with SaveViewState.  	var myState = (object[])savedState;  	//Load Base Controls ViewState  	if (myState [0] != null) {  		base.LoadViewState (myState [0]);  	}  	//Load ModuleID  	if (myState [1] != null) {  		ModuleID = Convert.ToInt32 (myState [1]);  	}  	//Load TabId  	if (myState [2] != null) {  		TabId = Convert.ToInt32 (myState [2]);  	}  	//Load InheritViewPermissionsFromTab  	if (myState [3] != null) {  		InheritViewPermissionsFromTab = Convert.ToBoolean (myState [3]);  	}  	//Load ModulePermissions  	if (myState [4] != null) {  		_ModulePermissions = new ModulePermissionCollection ();  		string state = Convert.ToString (myState [4]);  		if (!String.IsNullOrEmpty (state)) {  			//First Break the String into individual Keys  			string[] permissionKeys = state.Split (new[] {  				"##"  			}' StringSplitOptions.None);  			foreach (string key in permissionKeys) {  				string[] Settings = key.Split ('|');  				_ModulePermissions.Add (ParseKeys (Settings));  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (savedState != null) {  	//Load State from the array of objects that was saved with SaveViewState.  	var myState = (object[])savedState;  	//Load Base Controls ViewState  	if (myState [0] != null) {  		base.LoadViewState (myState [0]);  	}  	//Load ModuleID  	if (myState [1] != null) {  		ModuleID = Convert.ToInt32 (myState [1]);  	}  	//Load TabId  	if (myState [2] != null) {  		TabId = Convert.ToInt32 (myState [2]);  	}  	//Load InheritViewPermissionsFromTab  	if (myState [3] != null) {  		InheritViewPermissionsFromTab = Convert.ToBoolean (myState [3]);  	}  	//Load ModulePermissions  	if (myState [4] != null) {  		_ModulePermissions = new ModulePermissionCollection ();  		string state = Convert.ToString (myState [4]);  		if (!String.IsNullOrEmpty (state)) {  			//First Break the String into individual Keys  			string[] permissionKeys = state.Split (new[] {  				"##"  			}' StringSplitOptions.None);  			foreach (string key in permissionKeys) {  				string[] Settings = key.Split ('|');  				_ModulePermissions.Add (ParseKeys (Settings));  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (savedState != null) {  	//Load State from the array of objects that was saved with SaveViewState.  	var myState = (object[])savedState;  	//Load Base Controls ViewState  	if (myState [0] != null) {  		base.LoadViewState (myState [0]);  	}  	//Load ModuleID  	if (myState [1] != null) {  		ModuleID = Convert.ToInt32 (myState [1]);  	}  	//Load TabId  	if (myState [2] != null) {  		TabId = Convert.ToInt32 (myState [2]);  	}  	//Load InheritViewPermissionsFromTab  	if (myState [3] != null) {  		InheritViewPermissionsFromTab = Convert.ToBoolean (myState [3]);  	}  	//Load ModulePermissions  	if (myState [4] != null) {  		_ModulePermissions = new ModulePermissionCollection ();  		string state = Convert.ToString (myState [4]);  		if (!String.IsNullOrEmpty (state)) {  			//First Break the String into individual Keys  			string[] permissionKeys = state.Split (new[] {  				"##"  			}' StringSplitOptions.None);  			foreach (string key in permissionKeys) {  				string[] Settings = key.Split ('|');  				_ModulePermissions.Add (ParseKeys (Settings));  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (savedState != null) {  	//Load State from the array of objects that was saved with SaveViewState.  	var myState = (object[])savedState;  	//Load Base Controls ViewState  	if (myState [0] != null) {  		base.LoadViewState (myState [0]);  	}  	//Load ModuleID  	if (myState [1] != null) {  		ModuleID = Convert.ToInt32 (myState [1]);  	}  	//Load TabId  	if (myState [2] != null) {  		TabId = Convert.ToInt32 (myState [2]);  	}  	//Load InheritViewPermissionsFromTab  	if (myState [3] != null) {  		InheritViewPermissionsFromTab = Convert.ToBoolean (myState [3]);  	}  	//Load ModulePermissions  	if (myState [4] != null) {  		_ModulePermissions = new ModulePermissionCollection ();  		string state = Convert.ToString (myState [4]);  		if (!String.IsNullOrEmpty (state)) {  			//First Break the String into individual Keys  			string[] permissionKeys = state.Split (new[] {  				"##"  			}' StringSplitOptions.None);  			foreach (string key in permissionKeys) {  				string[] Settings = key.Split ('|');  				_ModulePermissions.Add (ParseKeys (Settings));  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (myState [2] != null) {  	TabId = Convert.ToInt32 (myState [2]);  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (myState [2] != null) {  	TabId = Convert.ToInt32 (myState [2]);  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: TabId = Convert.ToInt32 (myState [2]);  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (myState [3] != null) {  	InheritViewPermissionsFromTab = Convert.ToBoolean (myState [3]);  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (myState [3] != null) {  	InheritViewPermissionsFromTab = Convert.ToBoolean (myState [3]);  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: InheritViewPermissionsFromTab = Convert.ToBoolean (myState [3]);  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (myState [4] != null) {  	_ModulePermissions = new ModulePermissionCollection ();  	string state = Convert.ToString (myState [4]);  	if (!String.IsNullOrEmpty (state)) {  		//First Break the String into individual Keys  		string[] permissionKeys = state.Split (new[] {  			"##"  		}' StringSplitOptions.None);  		foreach (string key in permissionKeys) {  			string[] Settings = key.Split ('|');  			_ModulePermissions.Add (ParseKeys (Settings));  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (myState [4] != null) {  	_ModulePermissions = new ModulePermissionCollection ();  	string state = Convert.ToString (myState [4]);  	if (!String.IsNullOrEmpty (state)) {  		//First Break the String into individual Keys  		string[] permissionKeys = state.Split (new[] {  			"##"  		}' StringSplitOptions.None);  		foreach (string key in permissionKeys) {  			string[] Settings = key.Split ('|');  			_ModulePermissions.Add (ParseKeys (Settings));  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,SaveViewState,The following statement contains a magic number: allStates [2] = TabId;  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,SaveViewState,The following statement contains a magic number: allStates [3] = InheritViewPermissionsFromTab;  
Magic Number,DotNetNuke.Security.Permissions.Controls,ModulePermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\ModulePermissionsGrid.cs,SaveViewState,The following statement contains a magic number: allStates [4] = sb.ToString ();  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,CreateChildControls,The following statement contains a magic number: rolePermissionsGrid = new DataGrid {  	AutoGenerateColumns = false'  	CellSpacing = 0'  	CellPadding = 2'  	GridLines = GridLines.None'  	CssClass = "dnnPermissionsGrid"  };  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,ParsePermissionKeys,The following statement contains a magic number: permission.RoleID = Convert.ToInt32 (Settings [4]);  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,ParsePermissionKeys,The following statement contains a magic number: permission.RoleName = Settings [3];  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,ParsePermissionKeys,The following statement contains a magic number: permission.UserID = Convert.ToInt32 (Settings [5]);  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,ParsePermissionKeys,The following statement contains a magic number: permission.DisplayName = Settings [6];  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateRolePermissions,The following statement contains a magic number: if (rolePermissionsGrid != null && !RefreshGrid) {  	var rolesList = Roles.Cast<RoleInfo> ().ToList ();  	foreach (DataGridItem dgi in rolePermissionsGrid.Items) {  		var roleId = int.Parse (dgi.Cells [1].Text);  		if (rolesList.All (r => r.RoleID != roleId)) {  			continue;  		}  		for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  			//all except first two cells which is role names and role ids and last column is Actions  			if (dgi.Cells [i].Controls.Count > 0) {  				var permissionInfo = (PermissionInfo)_permissions [i - 2];  				var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  				if (SupportsDenyPermissions (permissionInfo)) {  					UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value);  				} else {  					UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value == PermissionTypeGrant);  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateRolePermissions,The following statement contains a magic number: if (rolePermissionsGrid != null && !RefreshGrid) {  	var rolesList = Roles.Cast<RoleInfo> ().ToList ();  	foreach (DataGridItem dgi in rolePermissionsGrid.Items) {  		var roleId = int.Parse (dgi.Cells [1].Text);  		if (rolesList.All (r => r.RoleID != roleId)) {  			continue;  		}  		for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  			//all except first two cells which is role names and role ids and last column is Actions  			if (dgi.Cells [i].Controls.Count > 0) {  				var permissionInfo = (PermissionInfo)_permissions [i - 2];  				var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  				if (SupportsDenyPermissions (permissionInfo)) {  					UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value);  				} else {  					UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value == PermissionTypeGrant);  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateRolePermissions,The following statement contains a magic number: if (rolePermissionsGrid != null && !RefreshGrid) {  	var rolesList = Roles.Cast<RoleInfo> ().ToList ();  	foreach (DataGridItem dgi in rolePermissionsGrid.Items) {  		var roleId = int.Parse (dgi.Cells [1].Text);  		if (rolesList.All (r => r.RoleID != roleId)) {  			continue;  		}  		for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  			//all except first two cells which is role names and role ids and last column is Actions  			if (dgi.Cells [i].Controls.Count > 0) {  				var permissionInfo = (PermissionInfo)_permissions [i - 2];  				var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  				if (SupportsDenyPermissions (permissionInfo)) {  					UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value);  				} else {  					UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value == PermissionTypeGrant);  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateRolePermissions,The following statement contains a magic number: foreach (DataGridItem dgi in rolePermissionsGrid.Items) {  	var roleId = int.Parse (dgi.Cells [1].Text);  	if (rolesList.All (r => r.RoleID != roleId)) {  		continue;  	}  	for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  		//all except first two cells which is role names and role ids and last column is Actions  		if (dgi.Cells [i].Controls.Count > 0) {  			var permissionInfo = (PermissionInfo)_permissions [i - 2];  			var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  			if (SupportsDenyPermissions (permissionInfo)) {  				UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value);  			} else {  				UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value == PermissionTypeGrant);  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateRolePermissions,The following statement contains a magic number: foreach (DataGridItem dgi in rolePermissionsGrid.Items) {  	var roleId = int.Parse (dgi.Cells [1].Text);  	if (rolesList.All (r => r.RoleID != roleId)) {  		continue;  	}  	for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  		//all except first two cells which is role names and role ids and last column is Actions  		if (dgi.Cells [i].Controls.Count > 0) {  			var permissionInfo = (PermissionInfo)_permissions [i - 2];  			var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  			if (SupportsDenyPermissions (permissionInfo)) {  				UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value);  			} else {  				UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value == PermissionTypeGrant);  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateRolePermissions,The following statement contains a magic number: foreach (DataGridItem dgi in rolePermissionsGrid.Items) {  	var roleId = int.Parse (dgi.Cells [1].Text);  	if (rolesList.All (r => r.RoleID != roleId)) {  		continue;  	}  	for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  		//all except first two cells which is role names and role ids and last column is Actions  		if (dgi.Cells [i].Controls.Count > 0) {  			var permissionInfo = (PermissionInfo)_permissions [i - 2];  			var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  			if (SupportsDenyPermissions (permissionInfo)) {  				UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value);  			} else {  				UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value == PermissionTypeGrant);  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateRolePermissions,The following statement contains a magic number: for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  	//all except first two cells which is role names and role ids and last column is Actions  	if (dgi.Cells [i].Controls.Count > 0) {  		var permissionInfo = (PermissionInfo)_permissions [i - 2];  		var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  		if (SupportsDenyPermissions (permissionInfo)) {  			UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value);  		} else {  			UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value == PermissionTypeGrant);  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateRolePermissions,The following statement contains a magic number: for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  	//all except first two cells which is role names and role ids and last column is Actions  	if (dgi.Cells [i].Controls.Count > 0) {  		var permissionInfo = (PermissionInfo)_permissions [i - 2];  		var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  		if (SupportsDenyPermissions (permissionInfo)) {  			UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value);  		} else {  			UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value == PermissionTypeGrant);  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateRolePermissions,The following statement contains a magic number: for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  	//all except first two cells which is role names and role ids and last column is Actions  	if (dgi.Cells [i].Controls.Count > 0) {  		var permissionInfo = (PermissionInfo)_permissions [i - 2];  		var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  		if (SupportsDenyPermissions (permissionInfo)) {  			UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value);  		} else {  			UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value == PermissionTypeGrant);  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateRolePermissions,The following statement contains a magic number: if (dgi.Cells [i].Controls.Count > 0) {  	var permissionInfo = (PermissionInfo)_permissions [i - 2];  	var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  	if (SupportsDenyPermissions (permissionInfo)) {  		UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value);  	} else {  		UpdatePermission (permissionInfo' roleId' dgi.Cells [0].Text' triState.Value == PermissionTypeGrant);  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateUserPermissions,The following statement contains a magic number: if (userPermissionsGrid != null && !RefreshGrid) {  	var usersList = _users.Cast<UserInfo> ().ToList ();  	foreach (DataGridItem dgi in userPermissionsGrid.Items) {  		var userId = int.Parse (dgi.Cells [1].Text);  		if (usersList.All (u => u.UserID != userId)) {  			continue;  		}  		for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  			//all except first two cells which is displayname and userid and Last column is Actions  			if (dgi.Cells [i].Controls.Count > 0) {  				var permissionInfo = (PermissionInfo)_permissions [i - 2];  				var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  				if (SupportsDenyPermissions (permissionInfo)) {  					UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value);  				} else {  					UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value == PermissionTypeGrant);  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateUserPermissions,The following statement contains a magic number: if (userPermissionsGrid != null && !RefreshGrid) {  	var usersList = _users.Cast<UserInfo> ().ToList ();  	foreach (DataGridItem dgi in userPermissionsGrid.Items) {  		var userId = int.Parse (dgi.Cells [1].Text);  		if (usersList.All (u => u.UserID != userId)) {  			continue;  		}  		for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  			//all except first two cells which is displayname and userid and Last column is Actions  			if (dgi.Cells [i].Controls.Count > 0) {  				var permissionInfo = (PermissionInfo)_permissions [i - 2];  				var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  				if (SupportsDenyPermissions (permissionInfo)) {  					UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value);  				} else {  					UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value == PermissionTypeGrant);  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateUserPermissions,The following statement contains a magic number: if (userPermissionsGrid != null && !RefreshGrid) {  	var usersList = _users.Cast<UserInfo> ().ToList ();  	foreach (DataGridItem dgi in userPermissionsGrid.Items) {  		var userId = int.Parse (dgi.Cells [1].Text);  		if (usersList.All (u => u.UserID != userId)) {  			continue;  		}  		for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  			//all except first two cells which is displayname and userid and Last column is Actions  			if (dgi.Cells [i].Controls.Count > 0) {  				var permissionInfo = (PermissionInfo)_permissions [i - 2];  				var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  				if (SupportsDenyPermissions (permissionInfo)) {  					UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value);  				} else {  					UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value == PermissionTypeGrant);  				}  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateUserPermissions,The following statement contains a magic number: foreach (DataGridItem dgi in userPermissionsGrid.Items) {  	var userId = int.Parse (dgi.Cells [1].Text);  	if (usersList.All (u => u.UserID != userId)) {  		continue;  	}  	for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  		//all except first two cells which is displayname and userid and Last column is Actions  		if (dgi.Cells [i].Controls.Count > 0) {  			var permissionInfo = (PermissionInfo)_permissions [i - 2];  			var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  			if (SupportsDenyPermissions (permissionInfo)) {  				UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value);  			} else {  				UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value == PermissionTypeGrant);  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateUserPermissions,The following statement contains a magic number: foreach (DataGridItem dgi in userPermissionsGrid.Items) {  	var userId = int.Parse (dgi.Cells [1].Text);  	if (usersList.All (u => u.UserID != userId)) {  		continue;  	}  	for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  		//all except first two cells which is displayname and userid and Last column is Actions  		if (dgi.Cells [i].Controls.Count > 0) {  			var permissionInfo = (PermissionInfo)_permissions [i - 2];  			var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  			if (SupportsDenyPermissions (permissionInfo)) {  				UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value);  			} else {  				UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value == PermissionTypeGrant);  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateUserPermissions,The following statement contains a magic number: foreach (DataGridItem dgi in userPermissionsGrid.Items) {  	var userId = int.Parse (dgi.Cells [1].Text);  	if (usersList.All (u => u.UserID != userId)) {  		continue;  	}  	for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  		//all except first two cells which is displayname and userid and Last column is Actions  		if (dgi.Cells [i].Controls.Count > 0) {  			var permissionInfo = (PermissionInfo)_permissions [i - 2];  			var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  			if (SupportsDenyPermissions (permissionInfo)) {  				UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value);  			} else {  				UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value == PermissionTypeGrant);  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateUserPermissions,The following statement contains a magic number: for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  	//all except first two cells which is displayname and userid and Last column is Actions  	if (dgi.Cells [i].Controls.Count > 0) {  		var permissionInfo = (PermissionInfo)_permissions [i - 2];  		var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  		if (SupportsDenyPermissions (permissionInfo)) {  			UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value);  		} else {  			UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value == PermissionTypeGrant);  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateUserPermissions,The following statement contains a magic number: for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  	//all except first two cells which is displayname and userid and Last column is Actions  	if (dgi.Cells [i].Controls.Count > 0) {  		var permissionInfo = (PermissionInfo)_permissions [i - 2];  		var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  		if (SupportsDenyPermissions (permissionInfo)) {  			UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value);  		} else {  			UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value == PermissionTypeGrant);  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateUserPermissions,The following statement contains a magic number: for (int i = 2; i <= dgi.Cells.Count - 2; i++) {  	//all except first two cells which is displayname and userid and Last column is Actions  	if (dgi.Cells [i].Controls.Count > 0) {  		var permissionInfo = (PermissionInfo)_permissions [i - 2];  		var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  		if (SupportsDenyPermissions (permissionInfo)) {  			UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value);  		} else {  			UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value == PermissionTypeGrant);  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdateUserPermissions,The following statement contains a magic number: if (dgi.Cells [i].Controls.Count > 0) {  	var permissionInfo = (PermissionInfo)_permissions [i - 2];  	var triState = (PermissionTriState)dgi.Cells [i].Controls [0];  	if (SupportsDenyPermissions (permissionInfo)) {  		UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value);  	} else {  		UpdatePermission (permissionInfo' dgi.Cells [0].Text' userId' triState.Value == PermissionTypeGrant);  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,TabPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\TabPermissionsGrid.cs,ParseKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (Settings [2])) {  	objTabPermission.TabPermissionID = -1;  } else {  	objTabPermission.TabPermissionID = Convert.ToInt32 (Settings [2]);  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,TabPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\TabPermissionsGrid.cs,ParseKeys,The following statement contains a magic number: if (String.IsNullOrEmpty (Settings [2])) {  	objTabPermission.TabPermissionID = -1;  } else {  	objTabPermission.TabPermissionID = Convert.ToInt32 (Settings [2]);  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,TabPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\TabPermissionsGrid.cs,ParseKeys,The following statement contains a magic number: objTabPermission.TabPermissionID = Convert.ToInt32 (Settings [2]);  
Magic Number,DotNetNuke.Security.Permissions.Controls,TabPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\TabPermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (savedState != null) {  	//Load State from the array of objects that was saved with SaveViewState.  	var myState = (object[])savedState;  	//Load Base Controls ViewState  	if (myState [0] != null) {  		base.LoadViewState (myState [0]);  	}  	//Load TabId  	if (myState [1] != null) {  		TabID = Convert.ToInt32 (myState [1]);  	}  	//Load TabPermissions  	if (myState [2] != null) {  		_TabPermissions = new TabPermissionCollection ();  		string state = Convert.ToString (myState [2]);  		if (!String.IsNullOrEmpty (state)) {  			//First Break the String into individual Keys  			string[] permissionKeys = state.Split (new[] {  				"##"  			}' StringSplitOptions.None);  			foreach (string key in permissionKeys) {  				string[] Settings = key.Split ('|');  				_TabPermissions.Add (ParseKeys (Settings));  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,TabPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\TabPermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (savedState != null) {  	//Load State from the array of objects that was saved with SaveViewState.  	var myState = (object[])savedState;  	//Load Base Controls ViewState  	if (myState [0] != null) {  		base.LoadViewState (myState [0]);  	}  	//Load TabId  	if (myState [1] != null) {  		TabID = Convert.ToInt32 (myState [1]);  	}  	//Load TabPermissions  	if (myState [2] != null) {  		_TabPermissions = new TabPermissionCollection ();  		string state = Convert.ToString (myState [2]);  		if (!String.IsNullOrEmpty (state)) {  			//First Break the String into individual Keys  			string[] permissionKeys = state.Split (new[] {  				"##"  			}' StringSplitOptions.None);  			foreach (string key in permissionKeys) {  				string[] Settings = key.Split ('|');  				_TabPermissions.Add (ParseKeys (Settings));  			}  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,TabPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\TabPermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (myState [2] != null) {  	_TabPermissions = new TabPermissionCollection ();  	string state = Convert.ToString (myState [2]);  	if (!String.IsNullOrEmpty (state)) {  		//First Break the String into individual Keys  		string[] permissionKeys = state.Split (new[] {  			"##"  		}' StringSplitOptions.None);  		foreach (string key in permissionKeys) {  			string[] Settings = key.Split ('|');  			_TabPermissions.Add (ParseKeys (Settings));  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,TabPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\TabPermissionsGrid.cs,LoadViewState,The following statement contains a magic number: if (myState [2] != null) {  	_TabPermissions = new TabPermissionCollection ();  	string state = Convert.ToString (myState [2]);  	if (!String.IsNullOrEmpty (state)) {  		//First Break the String into individual Keys  		string[] permissionKeys = state.Split (new[] {  			"##"  		}' StringSplitOptions.None);  		foreach (string key in permissionKeys) {  			string[] Settings = key.Split ('|');  			_TabPermissions.Add (ParseKeys (Settings));  		}  	}  }  
Magic Number,DotNetNuke.Security.Permissions.Controls,TabPermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\TabPermissionsGrid.cs,SaveViewState,The following statement contains a magic number: allStates [2] = sb.ToString ();  
Magic Number,DotNetNuke.Services.ClientCapability,FacebookRequestController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ClientCapability\FacebookRequestController.cs,GetFacebookDetailsFromRequest,The following statement contains a magic number: try {  	var facebookRequest = new FacebookRequest ();  	facebookRequest.RawSignedRequest = rawSignedRequest;  	facebookRequest.IsValid = false;  	string[] signedRequestSplit = rawSignedRequest.Split ('.');  	string expectedSignature = signedRequestSplit [0];  	string payload = signedRequestSplit [1];  	var decodedJson = ReplaceSpecialCharactersInSignedRequest (payload);  	var base64JsonArray = Convert.FromBase64String (decodedJson.PadRight (decodedJson.Length + (4 - decodedJson.Length % 4) % 4' '='));  	var encoding = new UTF8Encoding ();  	FaceBookData faceBookData = encoding.GetString (base64JsonArray).FromJson<FaceBookData> ();  	if (faceBookData.algorithm == "HMAC-SHA256") {  		facebookRequest.IsValid = true;  		facebookRequest.Algorithm = faceBookData.algorithm;  		facebookRequest.ProfileId = faceBookData.profile_id;  		facebookRequest.AppData = faceBookData.app_data;  		facebookRequest.OauthToken = !string.IsNullOrEmpty (faceBookData.oauth_token) ? faceBookData.oauth_token : "";  		facebookRequest.Expires = ConvertToTimestamp (faceBookData.expires);  		facebookRequest.IssuedAt = ConvertToTimestamp (faceBookData.issued_at);  		facebookRequest.UserID = !string.IsNullOrEmpty (faceBookData.user_id) ? faceBookData.user_id : "";  		facebookRequest.PageId = faceBookData.page.id;  		facebookRequest.PageLiked = faceBookData.page.liked;  		facebookRequest.PageUserAdmin = faceBookData.page.admin;  		facebookRequest.UserLocale = faceBookData.user.locale;  		facebookRequest.UserCountry = faceBookData.user.country;  		facebookRequest.UserMinAge = faceBookData.user.age.min;  		facebookRequest.UserMaxAge = faceBookData.user.age.max;  	}  	return facebookRequest;  } catch (Exception) {  	return null;  }  
Magic Number,DotNetNuke.Services.ClientCapability,FacebookRequestController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ClientCapability\FacebookRequestController.cs,GetFacebookDetailsFromRequest,The following statement contains a magic number: try {  	var facebookRequest = new FacebookRequest ();  	facebookRequest.RawSignedRequest = rawSignedRequest;  	facebookRequest.IsValid = false;  	string[] signedRequestSplit = rawSignedRequest.Split ('.');  	string expectedSignature = signedRequestSplit [0];  	string payload = signedRequestSplit [1];  	var decodedJson = ReplaceSpecialCharactersInSignedRequest (payload);  	var base64JsonArray = Convert.FromBase64String (decodedJson.PadRight (decodedJson.Length + (4 - decodedJson.Length % 4) % 4' '='));  	var encoding = new UTF8Encoding ();  	FaceBookData faceBookData = encoding.GetString (base64JsonArray).FromJson<FaceBookData> ();  	if (faceBookData.algorithm == "HMAC-SHA256") {  		facebookRequest.IsValid = true;  		facebookRequest.Algorithm = faceBookData.algorithm;  		facebookRequest.ProfileId = faceBookData.profile_id;  		facebookRequest.AppData = faceBookData.app_data;  		facebookRequest.OauthToken = !string.IsNullOrEmpty (faceBookData.oauth_token) ? faceBookData.oauth_token : "";  		facebookRequest.Expires = ConvertToTimestamp (faceBookData.expires);  		facebookRequest.IssuedAt = ConvertToTimestamp (faceBookData.issued_at);  		facebookRequest.UserID = !string.IsNullOrEmpty (faceBookData.user_id) ? faceBookData.user_id : "";  		facebookRequest.PageId = faceBookData.page.id;  		facebookRequest.PageLiked = faceBookData.page.liked;  		facebookRequest.PageUserAdmin = faceBookData.page.admin;  		facebookRequest.UserLocale = faceBookData.user.locale;  		facebookRequest.UserCountry = faceBookData.user.country;  		facebookRequest.UserMinAge = faceBookData.user.age.min;  		facebookRequest.UserMaxAge = faceBookData.user.age.max;  	}  	return facebookRequest;  } catch (Exception) {  	return null;  }  
Magic Number,DotNetNuke.Services.ClientCapability,FacebookRequestController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\ClientCapability\FacebookRequestController.cs,GetFacebookDetailsFromRequest,The following statement contains a magic number: try {  	var facebookRequest = new FacebookRequest ();  	facebookRequest.RawSignedRequest = rawSignedRequest;  	facebookRequest.IsValid = false;  	string[] signedRequestSplit = rawSignedRequest.Split ('.');  	string expectedSignature = signedRequestSplit [0];  	string payload = signedRequestSplit [1];  	var decodedJson = ReplaceSpecialCharactersInSignedRequest (payload);  	var base64JsonArray = Convert.FromBase64String (decodedJson.PadRight (decodedJson.Length + (4 - decodedJson.Length % 4) % 4' '='));  	var encoding = new UTF8Encoding ();  	FaceBookData faceBookData = encoding.GetString (base64JsonArray).FromJson<FaceBookData> ();  	if (faceBookData.algorithm == "HMAC-SHA256") {  		facebookRequest.IsValid = true;  		facebookRequest.Algorithm = faceBookData.algorithm;  		facebookRequest.ProfileId = faceBookData.profile_id;  		facebookRequest.AppData = faceBookData.app_data;  		facebookRequest.OauthToken = !string.IsNullOrEmpty (faceBookData.oauth_token) ? faceBookData.oauth_token : "";  		facebookRequest.Expires = ConvertToTimestamp (faceBookData.expires);  		facebookRequest.IssuedAt = ConvertToTimestamp (faceBookData.issued_at);  		facebookRequest.UserID = !string.IsNullOrEmpty (faceBookData.user_id) ? faceBookData.user_id : "";  		facebookRequest.PageId = faceBookData.page.id;  		facebookRequest.PageLiked = faceBookData.page.liked;  		facebookRequest.PageUserAdmin = faceBookData.page.admin;  		facebookRequest.UserLocale = faceBookData.user.locale;  		facebookRequest.UserCountry = faceBookData.user.country;  		facebookRequest.UserMinAge = faceBookData.user.age.min;  		facebookRequest.UserMaxAge = faceBookData.user.age.max;  	}  	return facebookRequest;  } catch (Exception) {  	return null;  }  
Magic Number,DotNetNuke.Services.Mobile,RedirectionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mobile\RedirectionController.cs,IsRedirectAllowedForTheSession,The following statement contains a magic number: if (!allowed)//redirect is not setup to be allowed' keep the cookie alive   {  	//this cookie is set to re-enable redirect after 20 minutes  	var presistCookie = new HttpCookie (DisableRedirectPresistCookieName) {  		Expires = DateTime.Now.AddMinutes (20)'  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	};  	app.Response.Cookies.Add (presistCookie);  	//this cookie is set to re-enable redirect after close browser.  	var cookie = new HttpCookie (DisableMobileRedirectCookieName) {  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	};  	app.Response.Cookies.Add (cookie);  }  
Magic Number,DotNetNuke.Services.EventQueue.Config,SubscriberInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\EventQueue\Config\SubscriberInfo.cs,SubscriberInfo,The following statement contains a magic number: PrivateKey = oPortalSecurity.CreateKey (16);  
Magic Number,DotNetNuke.Services.Installer,InstallFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\InstallFile.cs,ParseFileName,The following statement contains a magic number: if (string.IsNullOrEmpty (Path) && fileName.StartsWith ("[app_code]")) {  	Name = fileName.Substring (10' fileName.Length - 10);  	Path = fileName.Substring (0' 10);  }  
Magic Number,DotNetNuke.Services.Installer,InstallFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\InstallFile.cs,ParseFileName,The following statement contains a magic number: if (string.IsNullOrEmpty (Path) && fileName.StartsWith ("[app_code]")) {  	Name = fileName.Substring (10' fileName.Length - 10);  	Path = fileName.Substring (0' 10);  }  
Magic Number,DotNetNuke.Services.Installer,InstallFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\InstallFile.cs,ParseFileName,The following statement contains a magic number: if (string.IsNullOrEmpty (Path) && fileName.StartsWith ("[app_code]")) {  	Name = fileName.Substring (10' fileName.Length - 10);  	Path = fileName.Substring (0' 10);  }  
Magic Number,DotNetNuke.Services.Installer,InstallFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\InstallFile.cs,ParseFileName,The following statement contains a magic number: Name = fileName.Substring (10' fileName.Length - 10);  
Magic Number,DotNetNuke.Services.Installer,InstallFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\InstallFile.cs,ParseFileName,The following statement contains a magic number: Name = fileName.Substring (10' fileName.Length - 10);  
Magic Number,DotNetNuke.Services.Installer,InstallFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\InstallFile.cs,ParseFileName,The following statement contains a magic number: Path = fileName.Substring (0' 10);  
Magic Number,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacyLanguages,The following statement contains a magic number: if (File.Exists (filePath)) {  	var doc = new XPathDocument (filePath);  	//Check for Browser and Url settings  	XPathNavigator browserNav = doc.CreateNavigator ().SelectSingleNode ("root/browserDetection");  	if (browserNav != null) {  		HostController.Instance.Update ("EnableBrowserLanguage"' Util.ReadAttribute (browserNav' "enabled"' false' null' Null.NullString' "true"));  	}  	XPathNavigator urlNav = doc.CreateNavigator ().SelectSingleNode ("root/languageInUrl");  	if (urlNav != null) {  		HostController.Instance.Update ("EnableUrlLanguage"' Util.ReadAttribute (urlNav' "enabled"' false' null' Null.NullString' "true"));  	}  	//Process each language  	foreach (XPathNavigator nav in doc.CreateNavigator ().Select ("root/language")) {  		if (nav.NodeType != XPathNodeType.Comment) {  			var language = new Locale ();  			language.Text = Util.ReadAttribute (nav' "name");  			language.Code = Util.ReadAttribute (nav' "key");  			language.Fallback = Util.ReadAttribute (nav' "fallback");  			//Save Language  			Localization.Localization.SaveLanguage (language);  			if (language.Code != Localization.Localization.SystemLocale) {  				//Create a Package  				var package = new PackageInfo (new InstallerInfo ()) {  					Name = language.Text'  					FriendlyName = language.Text'  					Description = Null.NullString'  					Version = new Version (1' 0' 0)'  					PackageType = "CoreLanguagePack"'  					License = Util.PACKAGE_NoLicense  				};  				//Create a LanguagePackWriter  				var packageWriter = new LanguagePackWriter (language' package);  				//Save the manifest  				package.Manifest = packageWriter.WriteManifest (true);  				//Save Package  				PackageController.Instance.SaveExtensionPackage (package);  				var languagePack = new LanguagePackInfo {  					LanguageID = language.LanguageId'  					PackageID = package.PackageID'  					DependentPackageID = -2  				};  				LanguagePackController.SaveLanguagePack (languagePack);  			}  		}  	}  }  
Magic Number,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacyLanguages,The following statement contains a magic number: foreach (XPathNavigator nav in doc.CreateNavigator ().Select ("root/language")) {  	if (nav.NodeType != XPathNodeType.Comment) {  		var language = new Locale ();  		language.Text = Util.ReadAttribute (nav' "name");  		language.Code = Util.ReadAttribute (nav' "key");  		language.Fallback = Util.ReadAttribute (nav' "fallback");  		//Save Language  		Localization.Localization.SaveLanguage (language);  		if (language.Code != Localization.Localization.SystemLocale) {  			//Create a Package  			var package = new PackageInfo (new InstallerInfo ()) {  				Name = language.Text'  				FriendlyName = language.Text'  				Description = Null.NullString'  				Version = new Version (1' 0' 0)'  				PackageType = "CoreLanguagePack"'  				License = Util.PACKAGE_NoLicense  			};  			//Create a LanguagePackWriter  			var packageWriter = new LanguagePackWriter (language' package);  			//Save the manifest  			package.Manifest = packageWriter.WriteManifest (true);  			//Save Package  			PackageController.Instance.SaveExtensionPackage (package);  			var languagePack = new LanguagePackInfo {  				LanguageID = language.LanguageId'  				PackageID = package.PackageID'  				DependentPackageID = -2  			};  			LanguagePackController.SaveLanguagePack (languagePack);  		}  	}  }  
Magic Number,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacyLanguages,The following statement contains a magic number: if (nav.NodeType != XPathNodeType.Comment) {  	var language = new Locale ();  	language.Text = Util.ReadAttribute (nav' "name");  	language.Code = Util.ReadAttribute (nav' "key");  	language.Fallback = Util.ReadAttribute (nav' "fallback");  	//Save Language  	Localization.Localization.SaveLanguage (language);  	if (language.Code != Localization.Localization.SystemLocale) {  		//Create a Package  		var package = new PackageInfo (new InstallerInfo ()) {  			Name = language.Text'  			FriendlyName = language.Text'  			Description = Null.NullString'  			Version = new Version (1' 0' 0)'  			PackageType = "CoreLanguagePack"'  			License = Util.PACKAGE_NoLicense  		};  		//Create a LanguagePackWriter  		var packageWriter = new LanguagePackWriter (language' package);  		//Save the manifest  		package.Manifest = packageWriter.WriteManifest (true);  		//Save Package  		PackageController.Instance.SaveExtensionPackage (package);  		var languagePack = new LanguagePackInfo {  			LanguageID = language.LanguageId'  			PackageID = package.PackageID'  			DependentPackageID = -2  		};  		LanguagePackController.SaveLanguagePack (languagePack);  	}  }  
Magic Number,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ProcessLegacyLanguages,The following statement contains a magic number: if (language.Code != Localization.Localization.SystemLocale) {  	//Create a Package  	var package = new PackageInfo (new InstallerInfo ()) {  		Name = language.Text'  		FriendlyName = language.Text'  		Description = Null.NullString'  		Version = new Version (1' 0' 0)'  		PackageType = "CoreLanguagePack"'  		License = Util.PACKAGE_NoLicense  	};  	//Create a LanguagePackWriter  	var packageWriter = new LanguagePackWriter (language' package);  	//Save the manifest  	package.Manifest = packageWriter.WriteManifest (true);  	//Save Package  	PackageController.Instance.SaveExtensionPackage (package);  	var languagePack = new LanguagePackInfo {  		LanguageID = language.LanguageId'  		PackageID = package.PackageID'  		DependentPackageID = -2  	};  	LanguagePackController.SaveLanguagePack (languagePack);  }  
Magic Number,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,StreamToStream,The following statement contains a magic number: do {  	//Read the chunk from the source  	count = sourceStream.Read (buf' 0' 1024);  	//Write the chunk to the destination  	destStream.Write (buf' 0' count);  } while (count > 0);  
Magic Number,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,StreamToStream,The following statement contains a magic number: count = sourceStream.Read (buf' 0' 1024);  
Magic Number,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,InstallURL,The following statement contains a magic number: if (!string.IsNullOrEmpty (type)) {  	parameters [2] = "ptype=" + type;  }  
Magic Number,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,InstallURL,The following statement contains a magic number: parameters [2] = "ptype=" + type;  
Magic Number,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,InstallURL,The following statement contains a magic number: if (!string.IsNullOrEmpty (type)) {  	parameters [2] = "ptype=" + type;  }  
Magic Number,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,InstallURL,The following statement contains a magic number: parameters [2] = "ptype=" + type;  
Magic Number,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,InstallURL,The following statement contains a magic number: if (!string.IsNullOrEmpty (package)) {  	parameters [3] = "package=" + package;  }  
Magic Number,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,InstallURL,The following statement contains a magic number: parameters [3] = "package=" + package;  
Magic Number,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,UnInstallURL,The following statement contains a magic number: parameters [2] = "packageId=" + packageId;  
Magic Number,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,PackageWriterURL,The following statement contains a magic number: parameters [2] = "mid=" + context.ModuleId;  
Magic Number,DotNetNuke.Services.Installer,Util,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Util.cs,DeployExtension,The following statement contains a magic number: try {  	// Once the WebResponse object has been retrieved'  	// get the stream object associated with the response's data  	remoteStream = wr.GetResponseStream ();  	// Create the local file with zip extension to ensure installation  	localStream = File.Create (installFolder + "/" + myfile);  	// Allocate a 1k buffer  	var buffer = new byte[1024];  	int bytesRead;  	// Simple do/while loop to read from stream until  	// no bytes are returned  	do {  		// Read data (up to 1k) from the stream  		bytesRead = remoteStream.Read (buffer' 0' buffer.Length);  		// Write the data to the local file  		localStream.Write (buffer' 0' bytesRead);  		// Increment total bytes processed  		//TODO fix this line bytesProcessed += bytesRead;  	} while (bytesRead > 0);  } finally {  	// Close the response and streams objects here   	// to make sure they're closed even if an exception  	// is thrown at some point  	if (remoteStream != null) {  		remoteStream.Close ();  	}  	if (localStream != null) {  		localStream.Close ();  	}  }  
Magic Number,DotNetNuke.Services.Installer.Log,Logger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Log\Logger.cs,GetLogsTable,The following statement contains a magic number: foreach (LogEntry entry in Logs) {  	var tr = new HtmlTableRow ();  	var tdType = new HtmlTableCell ();  	tdType.InnerText = Util.GetLocalizedString ("LOG.PALogger." + entry.Type);  	var tdDescription = new HtmlTableCell ();  	tdDescription.InnerText = entry.Description;  	tr.Cells.Add (tdType);  	tr.Cells.Add (tdDescription);  	switch (entry.Type) {  	case LogType.Failure:  	case LogType.Warning:  		tdType.Attributes.Add ("class"' ErrorClass);  		tdDescription.Attributes.Add ("class"' ErrorClass);  		break;  	case LogType.StartJob:  	case LogType.EndJob:  		tdType.Attributes.Add ("class"' HighlightClass);  		tdDescription.Attributes.Add ("class"' HighlightClass);  		break;  	case LogType.Info:  		tdType.Attributes.Add ("class"' NormalClass);  		tdDescription.Attributes.Add ("class"' NormalClass);  		break;  	}  	arrayTable.Rows.Add (tr);  	if (entry.Type == LogType.EndJob) {  		var spaceTR = new HtmlTableRow ();  		spaceTR.Cells.Add (new HtmlTableCell {  			ColSpan = 2'  			InnerHtml = "&nbsp;"  		});  		arrayTable.Rows.Add (spaceTR);  	}  }  
Magic Number,DotNetNuke.Services.Installer.Log,Logger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Log\Logger.cs,GetLogsTable,The following statement contains a magic number: if (entry.Type == LogType.EndJob) {  	var spaceTR = new HtmlTableRow ();  	spaceTR.Cells.Add (new HtmlTableCell {  		ColSpan = 2'  		InnerHtml = "&nbsp;"  	});  	arrayTable.Rows.Add (spaceTR);  }  
Magic Number,DotNetNuke.Services.Installer.Log,Logger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Log\Logger.cs,GetLogsTable,The following statement contains a magic number: spaceTR.Cells.Add (new HtmlTableCell {  	ColSpan = 2'  	InnerHtml = "&nbsp;"  });  
Magic Number,DotNetNuke.Services.Installer.Writers,PackageWriterBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\PackageWriterBase.cs,WritePackageStartElement,The following statement contains a magic number: writer.WriteAttributeString ("version"' Package.Version.ToString (3));  
Magic Number,DotNetNuke.Services.Installer.Writers,ScriptComponentWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\ScriptComponentWriter.cs,WriteFileElement,The following statement contains a magic number: if (fileName.ToLower () == "uninstall")//UnInstall.SqlDataprovider   {  	type = "UnInstall";  	version = Package.Version.ToString (3);  } else if (fileName.ToLower () == "install")//Install.SqlDataprovider   {  	type = "Install";  	version = new Version (0' 0' 0).ToString (3);  } else if (fileName.StartsWith ("Install"))//Install.xx.xx.xx.SqlDataprovider   {  	type = "Install";  	version = fileName.Replace ("Install."' "");  } else//xx.xx.xx.SqlDataprovider   {  	type = "Install";  	version = fileName;  }  
Magic Number,DotNetNuke.Services.Installer.Writers,ScriptComponentWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\ScriptComponentWriter.cs,WriteFileElement,The following statement contains a magic number: if (fileName.ToLower () == "uninstall")//UnInstall.SqlDataprovider   {  	type = "UnInstall";  	version = Package.Version.ToString (3);  } else if (fileName.ToLower () == "install")//Install.SqlDataprovider   {  	type = "Install";  	version = new Version (0' 0' 0).ToString (3);  } else if (fileName.StartsWith ("Install"))//Install.xx.xx.xx.SqlDataprovider   {  	type = "Install";  	version = fileName.Replace ("Install."' "");  } else//xx.xx.xx.SqlDataprovider   {  	type = "Install";  	version = fileName;  }  
Magic Number,DotNetNuke.Services.Installer.Writers,ScriptComponentWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\ScriptComponentWriter.cs,WriteFileElement,The following statement contains a magic number: version = Package.Version.ToString (3);  
Magic Number,DotNetNuke.Services.Installer.Writers,ScriptComponentWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\ScriptComponentWriter.cs,WriteFileElement,The following statement contains a magic number: if (fileName.ToLower () == "install")//Install.SqlDataprovider   {  	type = "Install";  	version = new Version (0' 0' 0).ToString (3);  } else if (fileName.StartsWith ("Install"))//Install.xx.xx.xx.SqlDataprovider   {  	type = "Install";  	version = fileName.Replace ("Install."' "");  } else//xx.xx.xx.SqlDataprovider   {  	type = "Install";  	version = fileName;  }  
Magic Number,DotNetNuke.Services.Installer.Writers,ScriptComponentWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\ScriptComponentWriter.cs,WriteFileElement,The following statement contains a magic number: version = new Version (0' 0' 0).ToString (3);  
Magic Number,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMailInternal,The following statement contains a magic number: if (!String.IsNullOrEmpty (smtpServer)) {  	try {  		//to workaround problem in 4.0 need to specify host name  		using (var smtpClient = new SmtpClient ()) {  			var smtpHostParts = smtpServer.Split (':');  			smtpClient.Host = smtpHostParts [0];  			smtpClient.Port = smtpHostParts.Length > 1 ? Convert.ToInt32 (smtpHostParts [1]) : 25;  			smtpClient.ServicePoint.MaxIdleTime = Host.SMTPMaxIdleTime;  			smtpClient.ServicePoint.ConnectionLimit = Host.SMTPConnectionLimit;  			switch (smtpAuthentication) {  			case "":  			case "0":  				//anonymous  				break;  			case "1":  				//basic  				if (!String.IsNullOrEmpty (smtpUsername) && !String.IsNullOrEmpty (smtpPassword)) {  					smtpClient.UseDefaultCredentials = false;  					smtpClient.Credentials = new NetworkCredential (smtpUsername' smtpPassword);  				}  				break;  			case "2":  				//NTLM  				smtpClient.UseDefaultCredentials = true;  				break;  			}  			smtpClient.EnableSsl = smtpEnableSSL;  			smtpClient.Send (mailMessage);  			smtpClient.Dispose ();  		}  	} catch (Exception exc) {  		var exc2 = exc as SmtpFailedRecipientException;  		if (exc2 != null) {  			retValue = string.Format (Localize.GetString ("FailedRecipient")' exc2.FailedRecipient) + " ";  		} else if (exc is SmtpException) {  			retValue = Localize.GetString ("SMTPConfigurationProblem") + " ";  		}  		//mail configuration problem  		if (exc.InnerException != null) {  			retValue += string.Concat (exc.Message' Environment.NewLine' exc.InnerException.Message);  			Exceptions.Exceptions.LogException (exc.InnerException);  		} else {  			retValue += exc.Message;  			Exceptions.Exceptions.LogException (exc);  		}  	} finally {  		mailMessage.Dispose ();  	}  } else {  	retValue = Localize.GetString ("SMTPConfigurationProblem");  }  
Magic Number,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMailInternal,The following statement contains a magic number: try {  	//to workaround problem in 4.0 need to specify host name  	using (var smtpClient = new SmtpClient ()) {  		var smtpHostParts = smtpServer.Split (':');  		smtpClient.Host = smtpHostParts [0];  		smtpClient.Port = smtpHostParts.Length > 1 ? Convert.ToInt32 (smtpHostParts [1]) : 25;  		smtpClient.ServicePoint.MaxIdleTime = Host.SMTPMaxIdleTime;  		smtpClient.ServicePoint.ConnectionLimit = Host.SMTPConnectionLimit;  		switch (smtpAuthentication) {  		case "":  		case "0":  			//anonymous  			break;  		case "1":  			//basic  			if (!String.IsNullOrEmpty (smtpUsername) && !String.IsNullOrEmpty (smtpPassword)) {  				smtpClient.UseDefaultCredentials = false;  				smtpClient.Credentials = new NetworkCredential (smtpUsername' smtpPassword);  			}  			break;  		case "2":  			//NTLM  			smtpClient.UseDefaultCredentials = true;  			break;  		}  		smtpClient.EnableSsl = smtpEnableSSL;  		smtpClient.Send (mailMessage);  		smtpClient.Dispose ();  	}  } catch (Exception exc) {  	var exc2 = exc as SmtpFailedRecipientException;  	if (exc2 != null) {  		retValue = string.Format (Localize.GetString ("FailedRecipient")' exc2.FailedRecipient) + " ";  	} else if (exc is SmtpException) {  		retValue = Localize.GetString ("SMTPConfigurationProblem") + " ";  	}  	//mail configuration problem  	if (exc.InnerException != null) {  		retValue += string.Concat (exc.Message' Environment.NewLine' exc.InnerException.Message);  		Exceptions.Exceptions.LogException (exc.InnerException);  	} else {  		retValue += exc.Message;  		Exceptions.Exceptions.LogException (exc);  	}  } finally {  	mailMessage.Dispose ();  }  
Magic Number,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMailInternal,The following statement contains a magic number: using (var smtpClient = new SmtpClient ()) {  	var smtpHostParts = smtpServer.Split (':');  	smtpClient.Host = smtpHostParts [0];  	smtpClient.Port = smtpHostParts.Length > 1 ? Convert.ToInt32 (smtpHostParts [1]) : 25;  	smtpClient.ServicePoint.MaxIdleTime = Host.SMTPMaxIdleTime;  	smtpClient.ServicePoint.ConnectionLimit = Host.SMTPConnectionLimit;  	switch (smtpAuthentication) {  	case "":  	case "0":  		//anonymous  		break;  	case "1":  		//basic  		if (!String.IsNullOrEmpty (smtpUsername) && !String.IsNullOrEmpty (smtpPassword)) {  			smtpClient.UseDefaultCredentials = false;  			smtpClient.Credentials = new NetworkCredential (smtpUsername' smtpPassword);  		}  		break;  	case "2":  		//NTLM  		smtpClient.UseDefaultCredentials = true;  		break;  	}  	smtpClient.EnableSsl = smtpEnableSSL;  	smtpClient.Send (mailMessage);  	smtpClient.Dispose ();  }  
Magic Number,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMailInternal,The following statement contains a magic number: smtpClient.Port = smtpHostParts.Length > 1 ? Convert.ToInt32 (smtpHostParts [1]) : 25;  
Magic Number,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,LoadAttachments,The following statement contains a magic number: foreach (var attachment in _attachments) {  	var buffer = new byte[4096];  	using (var memoryStream = new MemoryStream ()) {  		while (true) {  			var read = attachment.ContentStream.Read (buffer' 0' 4096);  			if (read <= 0) {  				break;  			}  			memoryStream.Write (buffer' 0' read);  		}  		var newAttachment = new Attachment (memoryStream' attachment.ContentType);  		newAttachment.ContentStream.Position = 0;  		attachments.Add (newAttachment);  		//reset original position  		attachment.ContentStream.Position = 0;  	}  }  
Magic Number,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,LoadAttachments,The following statement contains a magic number: foreach (var attachment in _attachments) {  	var buffer = new byte[4096];  	using (var memoryStream = new MemoryStream ()) {  		while (true) {  			var read = attachment.ContentStream.Read (buffer' 0' 4096);  			if (read <= 0) {  				break;  			}  			memoryStream.Write (buffer' 0' read);  		}  		var newAttachment = new Attachment (memoryStream' attachment.ContentType);  		newAttachment.ContentStream.Position = 0;  		attachments.Add (newAttachment);  		//reset original position  		attachment.ContentStream.Position = 0;  	}  }  
Magic Number,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,LoadAttachments,The following statement contains a magic number: using (var memoryStream = new MemoryStream ()) {  	while (true) {  		var read = attachment.ContentStream.Read (buffer' 0' 4096);  		if (read <= 0) {  			break;  		}  		memoryStream.Write (buffer' 0' read);  	}  	var newAttachment = new Attachment (memoryStream' attachment.ContentType);  	newAttachment.ContentStream.Position = 0;  	attachments.Add (newAttachment);  	//reset original position  	attachment.ContentStream.Position = 0;  }  
Magic Number,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,LoadAttachments,The following statement contains a magic number: while (true) {  	var read = attachment.ContentStream.Read (buffer' 0' 4096);  	if (read <= 0) {  		break;  	}  	memoryStream.Write (buffer' 0' read);  }  
Magic Number,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,The following statement contains a magic number: try {  	//send to recipients  	string body = _body;  	if (BodyFormat == MailFormat.Html)//Add Base Href for any images inserted in to the email.  	 {  		var host = PortalAlias.Contains ("/") ? PortalAlias.Substring (0' PortalAlias.IndexOf ('/')) : PortalAlias;  		body = "<html><head><base href='http://" + host + "'><title>" + Subject + "</title></head><body>" + body + "</body></html>";  	}  	string subject = Subject;  	string startedAt = DateTime.Now.ToString (CultureInfo.InvariantCulture);  	bool replaceTokens = !SuppressTokenReplace && (_tokenReplace.ContainsTokens (Subject) || _tokenReplace.ContainsTokens (_body));  	bool individualSubj = false;  	bool individualBody = false;  	var mailErrors = new StringBuilder ();  	var mailRecipients = new StringBuilder ();  	switch (AddressMethod) {  	case AddressMethods.Send_TO:  	case AddressMethods.Send_Relay:  		//optimization:  		if (replaceTokens) {  			individualBody = (_tokenReplace.Cacheability (_body) == CacheLevel.notCacheable);  			individualSubj = (_tokenReplace.Cacheability (Subject) == CacheLevel.notCacheable);  			if (!individualBody) {  				body = _tokenReplace.ReplaceEnvironmentTokens (body);  			}  			if (!individualSubj) {  				subject = _tokenReplace.ReplaceEnvironmentTokens (subject);  			}  		}  		foreach (UserInfo user in Recipients ()) {  			recipients += 1;  			if (individualBody || individualSubj) {  				_tokenReplace.User = user;  				_tokenReplace.AccessingUser = user;  				if (individualBody) {  					body = _tokenReplace.ReplaceEnvironmentTokens (_body);  				}  				if (individualSubj) {  					subject = _tokenReplace.ReplaceEnvironmentTokens (Subject);  				}  			}  			string recipient = AddressMethod == AddressMethods.Send_TO ? user.Email : RelayEmailAddress;  			string mailError = Mail.SendMail (_sendingUser.Email' recipient' ""' ""' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL);  			if (!string.IsNullOrEmpty (mailError)) {  				mailErrors.Append (mailError);  				mailErrors.AppendLine ();  				errors += 1;  			} else {  				mailRecipients.Append (user.Email);  				mailRecipients.Append (BodyFormat == MailFormat.Html ? "<br />" : Environment.NewLine);  				messagesSent += 1;  			}  		}  		break;  	case AddressMethods.Send_BCC:  		var distributionList = new StringBuilder ();  		messagesSent = Null.NullInteger;  		foreach (UserInfo user in Recipients ()) {  			recipients += 1;  			distributionList.Append (user.Email + "; ");  			mailRecipients.Append (user.Email);  			mailRecipients.Append (BodyFormat == MailFormat.Html ? "<br />" : Environment.NewLine);  		}  		if (distributionList.Length > 2) {  			if (replaceTokens) {  				//no access to User properties possible!  				var tr = new TokenReplace (Scope.Configuration);  				body = tr.ReplaceEnvironmentTokens (_body);  				subject = tr.ReplaceEnvironmentTokens (Subject);  			} else {  				body = _body;  				subject = Subject;  			}  			string mailError = Mail.SendMail (_sendingUser.Email' _sendingUser.Email' ""' distributionList.ToString (0' distributionList.Length - 2)' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL);  			if (mailError == string.Empty) {  				messagesSent = 1;  			} else {  				mailErrors.Append (mailError);  				errors += 1;  			}  		}  		break;  	}  	if (mailErrors.Length > 0) {  		mailRecipients = new StringBuilder ();  	}  	SendConfirmationMail (recipients' messagesSent' errors' subject' startedAt' mailErrors.ToString ()' mailRecipients.ToString ());  } catch (Exception exc)//send mail failure   {  	Logger.Error (exc);  	Debug.Write (exc.Message);  } finally {  	foreach (var attachment in _attachments) {  		attachment.Dispose ();  	}  }  
Magic Number,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,The following statement contains a magic number: try {  	//send to recipients  	string body = _body;  	if (BodyFormat == MailFormat.Html)//Add Base Href for any images inserted in to the email.  	 {  		var host = PortalAlias.Contains ("/") ? PortalAlias.Substring (0' PortalAlias.IndexOf ('/')) : PortalAlias;  		body = "<html><head><base href='http://" + host + "'><title>" + Subject + "</title></head><body>" + body + "</body></html>";  	}  	string subject = Subject;  	string startedAt = DateTime.Now.ToString (CultureInfo.InvariantCulture);  	bool replaceTokens = !SuppressTokenReplace && (_tokenReplace.ContainsTokens (Subject) || _tokenReplace.ContainsTokens (_body));  	bool individualSubj = false;  	bool individualBody = false;  	var mailErrors = new StringBuilder ();  	var mailRecipients = new StringBuilder ();  	switch (AddressMethod) {  	case AddressMethods.Send_TO:  	case AddressMethods.Send_Relay:  		//optimization:  		if (replaceTokens) {  			individualBody = (_tokenReplace.Cacheability (_body) == CacheLevel.notCacheable);  			individualSubj = (_tokenReplace.Cacheability (Subject) == CacheLevel.notCacheable);  			if (!individualBody) {  				body = _tokenReplace.ReplaceEnvironmentTokens (body);  			}  			if (!individualSubj) {  				subject = _tokenReplace.ReplaceEnvironmentTokens (subject);  			}  		}  		foreach (UserInfo user in Recipients ()) {  			recipients += 1;  			if (individualBody || individualSubj) {  				_tokenReplace.User = user;  				_tokenReplace.AccessingUser = user;  				if (individualBody) {  					body = _tokenReplace.ReplaceEnvironmentTokens (_body);  				}  				if (individualSubj) {  					subject = _tokenReplace.ReplaceEnvironmentTokens (Subject);  				}  			}  			string recipient = AddressMethod == AddressMethods.Send_TO ? user.Email : RelayEmailAddress;  			string mailError = Mail.SendMail (_sendingUser.Email' recipient' ""' ""' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL);  			if (!string.IsNullOrEmpty (mailError)) {  				mailErrors.Append (mailError);  				mailErrors.AppendLine ();  				errors += 1;  			} else {  				mailRecipients.Append (user.Email);  				mailRecipients.Append (BodyFormat == MailFormat.Html ? "<br />" : Environment.NewLine);  				messagesSent += 1;  			}  		}  		break;  	case AddressMethods.Send_BCC:  		var distributionList = new StringBuilder ();  		messagesSent = Null.NullInteger;  		foreach (UserInfo user in Recipients ()) {  			recipients += 1;  			distributionList.Append (user.Email + "; ");  			mailRecipients.Append (user.Email);  			mailRecipients.Append (BodyFormat == MailFormat.Html ? "<br />" : Environment.NewLine);  		}  		if (distributionList.Length > 2) {  			if (replaceTokens) {  				//no access to User properties possible!  				var tr = new TokenReplace (Scope.Configuration);  				body = tr.ReplaceEnvironmentTokens (_body);  				subject = tr.ReplaceEnvironmentTokens (Subject);  			} else {  				body = _body;  				subject = Subject;  			}  			string mailError = Mail.SendMail (_sendingUser.Email' _sendingUser.Email' ""' distributionList.ToString (0' distributionList.Length - 2)' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL);  			if (mailError == string.Empty) {  				messagesSent = 1;  			} else {  				mailErrors.Append (mailError);  				errors += 1;  			}  		}  		break;  	}  	if (mailErrors.Length > 0) {  		mailRecipients = new StringBuilder ();  	}  	SendConfirmationMail (recipients' messagesSent' errors' subject' startedAt' mailErrors.ToString ()' mailRecipients.ToString ());  } catch (Exception exc)//send mail failure   {  	Logger.Error (exc);  	Debug.Write (exc.Message);  } finally {  	foreach (var attachment in _attachments) {  		attachment.Dispose ();  	}  }  
Magic Number,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,The following statement contains a magic number: switch (AddressMethod) {  case AddressMethods.Send_TO:  case AddressMethods.Send_Relay:  	//optimization:  	if (replaceTokens) {  		individualBody = (_tokenReplace.Cacheability (_body) == CacheLevel.notCacheable);  		individualSubj = (_tokenReplace.Cacheability (Subject) == CacheLevel.notCacheable);  		if (!individualBody) {  			body = _tokenReplace.ReplaceEnvironmentTokens (body);  		}  		if (!individualSubj) {  			subject = _tokenReplace.ReplaceEnvironmentTokens (subject);  		}  	}  	foreach (UserInfo user in Recipients ()) {  		recipients += 1;  		if (individualBody || individualSubj) {  			_tokenReplace.User = user;  			_tokenReplace.AccessingUser = user;  			if (individualBody) {  				body = _tokenReplace.ReplaceEnvironmentTokens (_body);  			}  			if (individualSubj) {  				subject = _tokenReplace.ReplaceEnvironmentTokens (Subject);  			}  		}  		string recipient = AddressMethod == AddressMethods.Send_TO ? user.Email : RelayEmailAddress;  		string mailError = Mail.SendMail (_sendingUser.Email' recipient' ""' ""' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL);  		if (!string.IsNullOrEmpty (mailError)) {  			mailErrors.Append (mailError);  			mailErrors.AppendLine ();  			errors += 1;  		} else {  			mailRecipients.Append (user.Email);  			mailRecipients.Append (BodyFormat == MailFormat.Html ? "<br />" : Environment.NewLine);  			messagesSent += 1;  		}  	}  	break;  case AddressMethods.Send_BCC:  	var distributionList = new StringBuilder ();  	messagesSent = Null.NullInteger;  	foreach (UserInfo user in Recipients ()) {  		recipients += 1;  		distributionList.Append (user.Email + "; ");  		mailRecipients.Append (user.Email);  		mailRecipients.Append (BodyFormat == MailFormat.Html ? "<br />" : Environment.NewLine);  	}  	if (distributionList.Length > 2) {  		if (replaceTokens) {  			//no access to User properties possible!  			var tr = new TokenReplace (Scope.Configuration);  			body = tr.ReplaceEnvironmentTokens (_body);  			subject = tr.ReplaceEnvironmentTokens (Subject);  		} else {  			body = _body;  			subject = Subject;  		}  		string mailError = Mail.SendMail (_sendingUser.Email' _sendingUser.Email' ""' distributionList.ToString (0' distributionList.Length - 2)' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL);  		if (mailError == string.Empty) {  			messagesSent = 1;  		} else {  			mailErrors.Append (mailError);  			errors += 1;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,The following statement contains a magic number: switch (AddressMethod) {  case AddressMethods.Send_TO:  case AddressMethods.Send_Relay:  	//optimization:  	if (replaceTokens) {  		individualBody = (_tokenReplace.Cacheability (_body) == CacheLevel.notCacheable);  		individualSubj = (_tokenReplace.Cacheability (Subject) == CacheLevel.notCacheable);  		if (!individualBody) {  			body = _tokenReplace.ReplaceEnvironmentTokens (body);  		}  		if (!individualSubj) {  			subject = _tokenReplace.ReplaceEnvironmentTokens (subject);  		}  	}  	foreach (UserInfo user in Recipients ()) {  		recipients += 1;  		if (individualBody || individualSubj) {  			_tokenReplace.User = user;  			_tokenReplace.AccessingUser = user;  			if (individualBody) {  				body = _tokenReplace.ReplaceEnvironmentTokens (_body);  			}  			if (individualSubj) {  				subject = _tokenReplace.ReplaceEnvironmentTokens (Subject);  			}  		}  		string recipient = AddressMethod == AddressMethods.Send_TO ? user.Email : RelayEmailAddress;  		string mailError = Mail.SendMail (_sendingUser.Email' recipient' ""' ""' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL);  		if (!string.IsNullOrEmpty (mailError)) {  			mailErrors.Append (mailError);  			mailErrors.AppendLine ();  			errors += 1;  		} else {  			mailRecipients.Append (user.Email);  			mailRecipients.Append (BodyFormat == MailFormat.Html ? "<br />" : Environment.NewLine);  			messagesSent += 1;  		}  	}  	break;  case AddressMethods.Send_BCC:  	var distributionList = new StringBuilder ();  	messagesSent = Null.NullInteger;  	foreach (UserInfo user in Recipients ()) {  		recipients += 1;  		distributionList.Append (user.Email + "; ");  		mailRecipients.Append (user.Email);  		mailRecipients.Append (BodyFormat == MailFormat.Html ? "<br />" : Environment.NewLine);  	}  	if (distributionList.Length > 2) {  		if (replaceTokens) {  			//no access to User properties possible!  			var tr = new TokenReplace (Scope.Configuration);  			body = tr.ReplaceEnvironmentTokens (_body);  			subject = tr.ReplaceEnvironmentTokens (Subject);  		} else {  			body = _body;  			subject = Subject;  		}  		string mailError = Mail.SendMail (_sendingUser.Email' _sendingUser.Email' ""' distributionList.ToString (0' distributionList.Length - 2)' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL);  		if (mailError == string.Empty) {  			messagesSent = 1;  		} else {  			mailErrors.Append (mailError);  			errors += 1;  		}  	}  	break;  }  
Magic Number,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,The following statement contains a magic number: if (distributionList.Length > 2) {  	if (replaceTokens) {  		//no access to User properties possible!  		var tr = new TokenReplace (Scope.Configuration);  		body = tr.ReplaceEnvironmentTokens (_body);  		subject = tr.ReplaceEnvironmentTokens (Subject);  	} else {  		body = _body;  		subject = Subject;  	}  	string mailError = Mail.SendMail (_sendingUser.Email' _sendingUser.Email' ""' distributionList.ToString (0' distributionList.Length - 2)' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL);  	if (mailError == string.Empty) {  		messagesSent = 1;  	} else {  		mailErrors.Append (mailError);  		errors += 1;  	}  }  
Magic Number,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,The following statement contains a magic number: if (distributionList.Length > 2) {  	if (replaceTokens) {  		//no access to User properties possible!  		var tr = new TokenReplace (Scope.Configuration);  		body = tr.ReplaceEnvironmentTokens (_body);  		subject = tr.ReplaceEnvironmentTokens (Subject);  	} else {  		body = _body;  		subject = Subject;  	}  	string mailError = Mail.SendMail (_sendingUser.Email' _sendingUser.Email' ""' distributionList.ToString (0' distributionList.Length - 2)' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL);  	if (mailError == string.Empty) {  		messagesSent = 1;  	} else {  		mailErrors.Append (mailError);  		errors += 1;  	}  }  
Magic Number,DotNetNuke.Services.Personalization,PersonalizationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Personalization\PersonalizationController.cs,SaveProfile,The following statement contains a magic number: if (personalization != null && personalization.IsModified) {  	var profileData = Globals.SerializeHashTableXml (personalization.Profile);  	if (userId > Null.NullInteger) {  		DataProvider.Instance ().UpdateProfile (userId' portalId' profileData);  		// remove then re-add the updated one  		var cacheKey = string.Format (DataCache.UserPersonalizationCacheKey' portalId' userId);  		DataCache.RemoveCache (cacheKey);  		CBO.GetCachedObject<string> (new CacheItemArgs (cacheKey' DataCache.UserPersonalizationCacheTimeout' DataCache.UserPersonalizationCachePriority)' _ => profileData);  	} else {  		//Anon User - so try and use cookie.  		var context = HttpContext.Current;  		if (context != null) {  			var personalizationCookie = new HttpCookie ("DNNPersonalization"' profileData) {  				Expires = DateTime.Now.AddDays (30)'  				Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  			};  			context.Response.Cookies.Add (personalizationCookie);  		}  	}  }  
Magic Number,DotNetNuke.Services.Personalization,PersonalizationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Personalization\PersonalizationController.cs,SaveProfile,The following statement contains a magic number: if (userId > Null.NullInteger) {  	DataProvider.Instance ().UpdateProfile (userId' portalId' profileData);  	// remove then re-add the updated one  	var cacheKey = string.Format (DataCache.UserPersonalizationCacheKey' portalId' userId);  	DataCache.RemoveCache (cacheKey);  	CBO.GetCachedObject<string> (new CacheItemArgs (cacheKey' DataCache.UserPersonalizationCacheTimeout' DataCache.UserPersonalizationCachePriority)' _ => profileData);  } else {  	//Anon User - so try and use cookie.  	var context = HttpContext.Current;  	if (context != null) {  		var personalizationCookie = new HttpCookie ("DNNPersonalization"' profileData) {  			Expires = DateTime.Now.AddDays (30)'  			Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  		};  		context.Response.Cookies.Add (personalizationCookie);  	}  }  
Magic Number,DotNetNuke.Services.Personalization,PersonalizationController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Personalization\PersonalizationController.cs,SaveProfile,The following statement contains a magic number: if (context != null) {  	var personalizationCookie = new HttpCookie ("DNNPersonalization"' profileData) {  		Expires = DateTime.Now.AddDays (30)'  		Path = (!string.IsNullOrEmpty (Globals.ApplicationPath) ? Globals.ApplicationPath : "/")  	};  	context.Response.Cookies.Add (personalizationCookie);  }  
Magic Number,DotNetNuke.Services.Syndication,RssHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Syndication\RssHandler.cs,OnPreRender,The following statement contains a magic number: Context.Response.Cache.SetExpires (DateTime.Now.AddSeconds (60));  
Magic Number,DotNetNuke.Services.Upgrade.InternalController.Steps,InstallExtensionsStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InstallExtensionsStep.cs,Execute,The following statement contains a magic number: if (packages.Count == 0) {  	Percentage = 100;  	Status = StepStatus.Done;  	return;  }  
Magic Number,DotNetNuke.Services.Upgrade.InternalController.Steps,InstallExtensionsStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InstallExtensionsStep.cs,Execute,The following statement contains a magic number: Percentage = 100;  
Magic Number,DotNetNuke.Services.Upgrade.InternalController.Steps,FilePermissionCheckStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\FilePermissionCheckStep.cs,Execute,The following statement contains a magic number: Percentage = 100;  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,ProcessRequest,The following statement contains a magic number: if (height > 128) {  	height = 128;  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,ProcessRequest,The following statement contains a magic number: if (height > 128) {  	height = 128;  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,ProcessRequest,The following statement contains a magic number: height = 128;  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,ProcessRequest,The following statement contains a magic number: if (width > 128) {  	width = 128;  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,ProcessRequest,The following statement contains a magic number: if (width > 128) {  	width = 128;  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,ProcessRequest,The following statement contains a magic number: width = 128;  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 0 && height <= 32) {  	height = 32;  	width = 32;  	size = "xs";  } else if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: height = 32;  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: width = 32;  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 32 && height <= 50) {  	height = 50;  	width = 50;  	size = "s";  } else if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: height = 50;  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: width = 50;  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 50 && height <= 64) {  	height = 64;  	width = 64;  	size = "l";  } else if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: height = 64;  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: width = 64;  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (height > 64 && height <= 128) {  	height = 128;  	width = 128;  	size = "xl";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: height = 128;  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: width = 128;  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (String.IsNullOrEmpty (size)) {  	height = 32;  	width = 32;  	size = "xs";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: if (String.IsNullOrEmpty (size)) {  	height = 32;  	width = 32;  	size = "xs";  }  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: height = 32;  
Magic Number,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,CalculateSize,The following statement contains a magic number: width = 32;  
Magic Number,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,MoveUpDown,The following statement contains a magic number: switch (Command.CommandName) {  case ModuleActionType.MoveTop:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' 0' Command.CommandArgument);  	break;  case ModuleActionType.MoveUp:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' ModuleContext.Configuration.ModuleOrder - 3' Command.CommandArgument);  	break;  case ModuleActionType.MoveDown:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' ModuleContext.Configuration.ModuleOrder + 3' Command.CommandArgument);  	break;  case ModuleActionType.MoveBottom:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' (ModuleContext.Configuration.PaneModuleCount * 2) + 1' Command.CommandArgument);  	break;  }  
Magic Number,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,MoveUpDown,The following statement contains a magic number: switch (Command.CommandName) {  case ModuleActionType.MoveTop:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' 0' Command.CommandArgument);  	break;  case ModuleActionType.MoveUp:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' ModuleContext.Configuration.ModuleOrder - 3' Command.CommandArgument);  	break;  case ModuleActionType.MoveDown:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' ModuleContext.Configuration.ModuleOrder + 3' Command.CommandArgument);  	break;  case ModuleActionType.MoveBottom:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' (ModuleContext.Configuration.PaneModuleCount * 2) + 1' Command.CommandArgument);  	break;  }  
Magic Number,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,MoveUpDown,The following statement contains a magic number: switch (Command.CommandName) {  case ModuleActionType.MoveTop:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' 0' Command.CommandArgument);  	break;  case ModuleActionType.MoveUp:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' ModuleContext.Configuration.ModuleOrder - 3' Command.CommandArgument);  	break;  case ModuleActionType.MoveDown:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' ModuleContext.Configuration.ModuleOrder + 3' Command.CommandArgument);  	break;  case ModuleActionType.MoveBottom:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' (ModuleContext.Configuration.PaneModuleCount * 2) + 1' Command.CommandArgument);  	break;  }  
Magic Number,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,MoveUpDown,The following statement contains a magic number: ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' ModuleContext.Configuration.ModuleOrder - 3' Command.CommandArgument);  
Magic Number,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,MoveUpDown,The following statement contains a magic number: ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' ModuleContext.Configuration.ModuleOrder + 3' Command.CommandArgument);  
Magic Number,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,MoveUpDown,The following statement contains a magic number: ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' (ModuleContext.Configuration.PaneModuleCount * 2) + 1' Command.CommandArgument);  
Magic Number,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,GetClientScriptURL,The following statement contains a magic number: if (!String.IsNullOrEmpty (action.ClientScript)) {  	string Script = action.ClientScript;  	int JSPos = Script.ToLower ().IndexOf ("javascript:");  	if (JSPos > -1) {  		Script = Script.Substring (JSPos + 11);  	}  	string FormatScript = "javascript: return {0};";  	control.Attributes.Add ("onClick"' string.Format (FormatScript' Script));  }  
Magic Number,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,GetClientScriptURL,The following statement contains a magic number: if (JSPos > -1) {  	Script = Script.Substring (JSPos + 11);  }  
Magic Number,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,GetClientScriptURL,The following statement contains a magic number: Script = Script.Substring (JSPos + 11);  
Magic Number,DotNetNuke.UI.Containers,ActionsMenu,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionsMenu.cs,SetMenuDefaults,The following statement contains a magic number: try {  	//--- original page set attributes ---  	ProviderControl.StyleIconWidth = 15;  	ProviderControl.MouseOutHideDelay = 500;  	ProviderControl.MouseOverAction = NavigationProvider.HoverAction.Expand;  	ProviderControl.MouseOverDisplay = NavigationProvider.HoverDisplay.None;  	//style sheet settings  	ProviderControl.CSSControl = "ModuleTitle_MenuBar";  	ProviderControl.CSSContainerRoot = "ModuleTitle_MenuContainer";  	ProviderControl.CSSNode = "ModuleTitle_MenuItem";  	ProviderControl.CSSIcon = "ModuleTitle_MenuIcon";  	ProviderControl.CSSContainerSub = "ModuleTitle_SubMenu";  	ProviderControl.CSSBreak = "ModuleTitle_MenuBreak";  	ProviderControl.CSSNodeHover = "ModuleTitle_MenuItemSel";  	ProviderControl.CSSIndicateChildSub = "ModuleTitle_MenuArrow";  	ProviderControl.CSSIndicateChildRoot = "ModuleTitle_RootMenuArrow";  	ProviderControl.PathImage = Globals.ApplicationPath + "/Images/";  	ProviderControl.PathSystemImage = Globals.ApplicationPath + "/Images/";  	ProviderControl.IndicateChildImageSub = "action_right.gif";  	ProviderControl.IndicateChildren = true;  	ProviderControl.StyleRoot = "background-color: Transparent; font-size: 1pt;";  	ProviderControl.NodeClick += MenuItem_Click;  } catch (Exception exc)//Module failed to load   {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.Containers,ActionsMenu,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionsMenu.cs,SetMenuDefaults,The following statement contains a magic number: try {  	//--- original page set attributes ---  	ProviderControl.StyleIconWidth = 15;  	ProviderControl.MouseOutHideDelay = 500;  	ProviderControl.MouseOverAction = NavigationProvider.HoverAction.Expand;  	ProviderControl.MouseOverDisplay = NavigationProvider.HoverDisplay.None;  	//style sheet settings  	ProviderControl.CSSControl = "ModuleTitle_MenuBar";  	ProviderControl.CSSContainerRoot = "ModuleTitle_MenuContainer";  	ProviderControl.CSSNode = "ModuleTitle_MenuItem";  	ProviderControl.CSSIcon = "ModuleTitle_MenuIcon";  	ProviderControl.CSSContainerSub = "ModuleTitle_SubMenu";  	ProviderControl.CSSBreak = "ModuleTitle_MenuBreak";  	ProviderControl.CSSNodeHover = "ModuleTitle_MenuItemSel";  	ProviderControl.CSSIndicateChildSub = "ModuleTitle_MenuArrow";  	ProviderControl.CSSIndicateChildRoot = "ModuleTitle_RootMenuArrow";  	ProviderControl.PathImage = Globals.ApplicationPath + "/Images/";  	ProviderControl.PathSystemImage = Globals.ApplicationPath + "/Images/";  	ProviderControl.IndicateChildImageSub = "action_right.gif";  	ProviderControl.IndicateChildren = true;  	ProviderControl.StyleRoot = "background-color: Transparent; font-size: 1pt;";  	ProviderControl.NodeClick += MenuItem_Click;  } catch (Exception exc)//Module failed to load   {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.Containers,ActionsMenu,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionsMenu.cs,SetMenuDefaults,The following statement contains a magic number: ProviderControl.StyleIconWidth = 15;  
Magic Number,DotNetNuke.UI.Containers,ActionsMenu,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionsMenu.cs,SetMenuDefaults,The following statement contains a magic number: ProviderControl.MouseOutHideDelay = 500;  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,InjectModuleContent,The following statement contains a magic number: if (_moduleConfiguration.IsWebSlice && !Globals.IsAdminControl ()) {  	//Assign the class - hslice to the Drag-N-Drop Panel  	CssClass = "hslice";  	var titleLabel = new Label {  		CssClass = "entry-title Hidden"'  		Text = !string.IsNullOrEmpty (_moduleConfiguration.WebSliceTitle) ? _moduleConfiguration.WebSliceTitle : _moduleConfiguration.ModuleTitle  	};  	Controls.Add (titleLabel);  	var websliceContainer = new Panel {  		CssClass = "entry-content"  	};  	websliceContainer.Controls.Add (content);  	var expiry = new HtmlGenericControl {  		TagName = "abbr"  	};  	expiry.Attributes ["class"] = "endtime";  	if (!Null.IsNull (_moduleConfiguration.WebSliceExpiryDate)) {  		expiry.Attributes ["title"] = _moduleConfiguration.WebSliceExpiryDate.ToString ("o");  		websliceContainer.Controls.Add (expiry);  	} else if (_moduleConfiguration.EndDate < DateTime.MaxValue) {  		expiry.Attributes ["title"] = _moduleConfiguration.EndDate.ToString ("o");  		websliceContainer.Controls.Add (expiry);  	}  	var ttl = new HtmlGenericControl {  		TagName = "abbr"  	};  	ttl.Attributes ["class"] = "ttl";  	if (_moduleConfiguration.WebSliceTTL > 0) {  		ttl.Attributes ["title"] = _moduleConfiguration.WebSliceTTL.ToString ();  		websliceContainer.Controls.Add (ttl);  	} else if (_moduleConfiguration.CacheTime > 0) {  		ttl.Attributes ["title"] = (_moduleConfiguration.CacheTime / 60).ToString ();  		websliceContainer.Controls.Add (ttl);  	}  	Controls.Add (websliceContainer);  } else {  	Controls.Add (content);  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,InjectModuleContent,The following statement contains a magic number: if (_moduleConfiguration.WebSliceTTL > 0) {  	ttl.Attributes ["title"] = _moduleConfiguration.WebSliceTTL.ToString ();  	websliceContainer.Controls.Add (ttl);  } else if (_moduleConfiguration.CacheTime > 0) {  	ttl.Attributes ["title"] = (_moduleConfiguration.CacheTime / 60).ToString ();  	websliceContainer.Controls.Add (ttl);  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,InjectModuleContent,The following statement contains a magic number: if (_moduleConfiguration.CacheTime > 0) {  	ttl.Attributes ["title"] = (_moduleConfiguration.CacheTime / 60).ToString ();  	websliceContainer.Controls.Add (ttl);  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,InjectModuleContent,The following statement contains a magic number: ttl.Attributes ["title"] = (_moduleConfiguration.CacheTime / 60).ToString ();  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: foreach (Match match in matches) {  	cachedContent = cachedContent.Replace (match.Value' string.Empty);  	switch (match.Groups [1].Value.ToUpperInvariant ()) {  	case "JAVASCRIPT":  		ClientResourceManager.RegisterScript (this.Page' match.Groups [2].Value);  		break;  	case "CSS":  		ClientResourceManager.RegisterStyleSheet (this.Page' match.Groups [2].Value);  		break;  	case "JS-LIBRARY":  		var args = match.Groups [2].Value.Split (new[] {  			''''  		}' StringSplitOptions.None);  		if (string.IsNullOrEmpty (args [1])) {  			JavaScript.RequestRegistration (args [0]);  		} else if (string.IsNullOrEmpty (args [2])) {  			JavaScript.RequestRegistration (args [0]' new Version (args [1]));  		} else {  			JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  		}  		break;  	}  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: foreach (Match match in matches) {  	cachedContent = cachedContent.Replace (match.Value' string.Empty);  	switch (match.Groups [1].Value.ToUpperInvariant ()) {  	case "JAVASCRIPT":  		ClientResourceManager.RegisterScript (this.Page' match.Groups [2].Value);  		break;  	case "CSS":  		ClientResourceManager.RegisterStyleSheet (this.Page' match.Groups [2].Value);  		break;  	case "JS-LIBRARY":  		var args = match.Groups [2].Value.Split (new[] {  			''''  		}' StringSplitOptions.None);  		if (string.IsNullOrEmpty (args [1])) {  			JavaScript.RequestRegistration (args [0]);  		} else if (string.IsNullOrEmpty (args [2])) {  			JavaScript.RequestRegistration (args [0]' new Version (args [1]));  		} else {  			JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  		}  		break;  	}  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: foreach (Match match in matches) {  	cachedContent = cachedContent.Replace (match.Value' string.Empty);  	switch (match.Groups [1].Value.ToUpperInvariant ()) {  	case "JAVASCRIPT":  		ClientResourceManager.RegisterScript (this.Page' match.Groups [2].Value);  		break;  	case "CSS":  		ClientResourceManager.RegisterStyleSheet (this.Page' match.Groups [2].Value);  		break;  	case "JS-LIBRARY":  		var args = match.Groups [2].Value.Split (new[] {  			''''  		}' StringSplitOptions.None);  		if (string.IsNullOrEmpty (args [1])) {  			JavaScript.RequestRegistration (args [0]);  		} else if (string.IsNullOrEmpty (args [2])) {  			JavaScript.RequestRegistration (args [0]' new Version (args [1]));  		} else {  			JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  		}  		break;  	}  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: foreach (Match match in matches) {  	cachedContent = cachedContent.Replace (match.Value' string.Empty);  	switch (match.Groups [1].Value.ToUpperInvariant ()) {  	case "JAVASCRIPT":  		ClientResourceManager.RegisterScript (this.Page' match.Groups [2].Value);  		break;  	case "CSS":  		ClientResourceManager.RegisterStyleSheet (this.Page' match.Groups [2].Value);  		break;  	case "JS-LIBRARY":  		var args = match.Groups [2].Value.Split (new[] {  			''''  		}' StringSplitOptions.None);  		if (string.IsNullOrEmpty (args [1])) {  			JavaScript.RequestRegistration (args [0]);  		} else if (string.IsNullOrEmpty (args [2])) {  			JavaScript.RequestRegistration (args [0]' new Version (args [1]));  		} else {  			JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  		}  		break;  	}  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: foreach (Match match in matches) {  	cachedContent = cachedContent.Replace (match.Value' string.Empty);  	switch (match.Groups [1].Value.ToUpperInvariant ()) {  	case "JAVASCRIPT":  		ClientResourceManager.RegisterScript (this.Page' match.Groups [2].Value);  		break;  	case "CSS":  		ClientResourceManager.RegisterStyleSheet (this.Page' match.Groups [2].Value);  		break;  	case "JS-LIBRARY":  		var args = match.Groups [2].Value.Split (new[] {  			''''  		}' StringSplitOptions.None);  		if (string.IsNullOrEmpty (args [1])) {  			JavaScript.RequestRegistration (args [0]);  		} else if (string.IsNullOrEmpty (args [2])) {  			JavaScript.RequestRegistration (args [0]' new Version (args [1]));  		} else {  			JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  		}  		break;  	}  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: switch (match.Groups [1].Value.ToUpperInvariant ()) {  case "JAVASCRIPT":  	ClientResourceManager.RegisterScript (this.Page' match.Groups [2].Value);  	break;  case "CSS":  	ClientResourceManager.RegisterStyleSheet (this.Page' match.Groups [2].Value);  	break;  case "JS-LIBRARY":  	var args = match.Groups [2].Value.Split (new[] {  		''''  	}' StringSplitOptions.None);  	if (string.IsNullOrEmpty (args [1])) {  		JavaScript.RequestRegistration (args [0]);  	} else if (string.IsNullOrEmpty (args [2])) {  		JavaScript.RequestRegistration (args [0]' new Version (args [1]));  	} else {  		JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  	}  	break;  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: switch (match.Groups [1].Value.ToUpperInvariant ()) {  case "JAVASCRIPT":  	ClientResourceManager.RegisterScript (this.Page' match.Groups [2].Value);  	break;  case "CSS":  	ClientResourceManager.RegisterStyleSheet (this.Page' match.Groups [2].Value);  	break;  case "JS-LIBRARY":  	var args = match.Groups [2].Value.Split (new[] {  		''''  	}' StringSplitOptions.None);  	if (string.IsNullOrEmpty (args [1])) {  		JavaScript.RequestRegistration (args [0]);  	} else if (string.IsNullOrEmpty (args [2])) {  		JavaScript.RequestRegistration (args [0]' new Version (args [1]));  	} else {  		JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  	}  	break;  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: switch (match.Groups [1].Value.ToUpperInvariant ()) {  case "JAVASCRIPT":  	ClientResourceManager.RegisterScript (this.Page' match.Groups [2].Value);  	break;  case "CSS":  	ClientResourceManager.RegisterStyleSheet (this.Page' match.Groups [2].Value);  	break;  case "JS-LIBRARY":  	var args = match.Groups [2].Value.Split (new[] {  		''''  	}' StringSplitOptions.None);  	if (string.IsNullOrEmpty (args [1])) {  		JavaScript.RequestRegistration (args [0]);  	} else if (string.IsNullOrEmpty (args [2])) {  		JavaScript.RequestRegistration (args [0]' new Version (args [1]));  	} else {  		JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  	}  	break;  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: switch (match.Groups [1].Value.ToUpperInvariant ()) {  case "JAVASCRIPT":  	ClientResourceManager.RegisterScript (this.Page' match.Groups [2].Value);  	break;  case "CSS":  	ClientResourceManager.RegisterStyleSheet (this.Page' match.Groups [2].Value);  	break;  case "JS-LIBRARY":  	var args = match.Groups [2].Value.Split (new[] {  		''''  	}' StringSplitOptions.None);  	if (string.IsNullOrEmpty (args [1])) {  		JavaScript.RequestRegistration (args [0]);  	} else if (string.IsNullOrEmpty (args [2])) {  		JavaScript.RequestRegistration (args [0]' new Version (args [1]));  	} else {  		JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  	}  	break;  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: switch (match.Groups [1].Value.ToUpperInvariant ()) {  case "JAVASCRIPT":  	ClientResourceManager.RegisterScript (this.Page' match.Groups [2].Value);  	break;  case "CSS":  	ClientResourceManager.RegisterStyleSheet (this.Page' match.Groups [2].Value);  	break;  case "JS-LIBRARY":  	var args = match.Groups [2].Value.Split (new[] {  		''''  	}' StringSplitOptions.None);  	if (string.IsNullOrEmpty (args [1])) {  		JavaScript.RequestRegistration (args [0]);  	} else if (string.IsNullOrEmpty (args [2])) {  		JavaScript.RequestRegistration (args [0]' new Version (args [1]));  	} else {  		JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  	}  	break;  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: ClientResourceManager.RegisterScript (this.Page' match.Groups [2].Value);  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: ClientResourceManager.RegisterStyleSheet (this.Page' match.Groups [2].Value);  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: if (string.IsNullOrEmpty (args [1])) {  	JavaScript.RequestRegistration (args [0]);  } else if (string.IsNullOrEmpty (args [2])) {  	JavaScript.RequestRegistration (args [0]' new Version (args [1]));  } else {  	JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: if (string.IsNullOrEmpty (args [1])) {  	JavaScript.RequestRegistration (args [0]);  } else if (string.IsNullOrEmpty (args [2])) {  	JavaScript.RequestRegistration (args [0]' new Version (args [1]));  } else {  	JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: if (string.IsNullOrEmpty (args [2])) {  	JavaScript.RequestRegistration (args [0]' new Version (args [1]));  } else {  	JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: if (string.IsNullOrEmpty (args [2])) {  	JavaScript.RequestRegistration (args [0]' new Version (args [1]));  } else {  	JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  }  
Magic Number,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following statement contains a magic number: JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  
Magic Number,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddHelpActions,The following statement contains a magic number: if (!string.IsNullOrEmpty (Configuration.ModuleControl.HelpURL) && Host.EnableModuleOnLineHelp && PortalSettings.EnablePopUps) {  	var supportInPopup = SupportShowInPopup (Configuration.ModuleControl.HelpURL);  	if (supportInPopup) {  		url = UrlUtils.PopUpUrl (Configuration.ModuleControl.HelpURL' PortalSettings' false' false' 550' 950);  	} else {  		url = Configuration.ModuleControl.HelpURL;  		showInNewWindow = true;  	}  } else {  	url = NavigateUrl (TabId' "Help"' false' "ctlid=" + Configuration.ModuleControlId' "moduleid=" + ModuleId);  }  
Magic Number,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddHelpActions,The following statement contains a magic number: if (!string.IsNullOrEmpty (Configuration.ModuleControl.HelpURL) && Host.EnableModuleOnLineHelp && PortalSettings.EnablePopUps) {  	var supportInPopup = SupportShowInPopup (Configuration.ModuleControl.HelpURL);  	if (supportInPopup) {  		url = UrlUtils.PopUpUrl (Configuration.ModuleControl.HelpURL' PortalSettings' false' false' 550' 950);  	} else {  		url = Configuration.ModuleControl.HelpURL;  		showInNewWindow = true;  	}  } else {  	url = NavigateUrl (TabId' "Help"' false' "ctlid=" + Configuration.ModuleControlId' "moduleid=" + ModuleId);  }  
Magic Number,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddHelpActions,The following statement contains a magic number: if (supportInPopup) {  	url = UrlUtils.PopUpUrl (Configuration.ModuleControl.HelpURL' PortalSettings' false' false' 550' 950);  } else {  	url = Configuration.ModuleControl.HelpURL;  	showInNewWindow = true;  }  
Magic Number,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddHelpActions,The following statement contains a magic number: if (supportInPopup) {  	url = UrlUtils.PopUpUrl (Configuration.ModuleControl.HelpURL' PortalSettings' false' false' 550' 950);  } else {  	url = Configuration.ModuleControl.HelpURL;  	showInNewWindow = true;  }  
Magic Number,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddHelpActions,The following statement contains a magic number: url = UrlUtils.PopUpUrl (Configuration.ModuleControl.HelpURL' PortalSettings' false' false' 550' 950);  
Magic Number,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,AddHelpActions,The following statement contains a magic number: url = UrlUtils.PopUpUrl (Configuration.ModuleControl.HelpURL' PortalSettings' false' false' 550' 950);  
Magic Number,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,EditUrl,The following statement contains a magic number: if (!string.IsNullOrEmpty (keyName) && !string.IsNullOrEmpty (keyValue)) {  	parameters = new string[2 + additionalParameters.Length];  	parameters [0] = moduleIdParam;  	parameters [1] = string.Format ("{0}={1}"' keyName' keyValue);  	Array.Copy (additionalParameters' 0' parameters' 2' additionalParameters.Length);  } else {  	parameters = new string[1 + additionalParameters.Length];  	parameters [0] = moduleIdParam;  	Array.Copy (additionalParameters' 0' parameters' 1' additionalParameters.Length);  }  
Magic Number,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,EditUrl,The following statement contains a magic number: if (!string.IsNullOrEmpty (keyName) && !string.IsNullOrEmpty (keyValue)) {  	parameters = new string[2 + additionalParameters.Length];  	parameters [0] = moduleIdParam;  	parameters [1] = string.Format ("{0}={1}"' keyName' keyValue);  	Array.Copy (additionalParameters' 0' parameters' 2' additionalParameters.Length);  } else {  	parameters = new string[1 + additionalParameters.Length];  	parameters [0] = moduleIdParam;  	Array.Copy (additionalParameters' 0' parameters' 1' additionalParameters.Length);  }  
Magic Number,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,EditUrl,The following statement contains a magic number: parameters = new string[2 + additionalParameters.Length];  
Magic Number,DotNetNuke.UI.Modules,ModuleInstanceContext,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleInstanceContext.cs,EditUrl,The following statement contains a magic number: Array.Copy (additionalParameters' 0' parameters' 2' additionalParameters.Length);  
Magic Number,DotNetNuke.UI.Skins.Controls,SkinsEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\SkinsEditControl.cs,RaisePostBackEvent,The following statement contains a magic number: switch (eventArgument.Substring (0' 3)) {  case "Del":  	args = new PropertyEditorEventArgs (Name);  	args.Value = DictionaryValue;  	args.OldValue = OldDictionaryValue;  	args.Key = int.Parse (eventArgument.Substring (7));  	args.Changed = true;  	base.OnItemDeleted (args);  	break;  case "Add":  	args = new PropertyEditorEventArgs (Name);  	args.Value = AddedItem;  	args.StringValue = AddedItem;  	args.Changed = true;  	base.OnItemAdded (args);  	break;  }  
Magic Number,DotNetNuke.UI.Skins.Controls,SkinsEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\SkinsEditControl.cs,RaisePostBackEvent,The following statement contains a magic number: switch (eventArgument.Substring (0' 3)) {  case "Del":  	args = new PropertyEditorEventArgs (Name);  	args.Value = DictionaryValue;  	args.OldValue = OldDictionaryValue;  	args.Key = int.Parse (eventArgument.Substring (7));  	args.Changed = true;  	base.OnItemDeleted (args);  	break;  case "Add":  	args = new PropertyEditorEventArgs (Name);  	args.Value = AddedItem;  	args.StringValue = AddedItem;  	args.Changed = true;  	base.OnItemAdded (args);  	break;  }  
Magic Number,DotNetNuke.UI.Skins.Controls,SkinsEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\SkinsEditControl.cs,RaisePostBackEvent,The following statement contains a magic number: args.Key = int.Parse (eventArgument.Substring (7));  
Magic Number,DotNetNuke.UI.Skins,SkinControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinControl.cs,OnLoad,The following statement contains a magic number: try {  	if (Request.QueryString ["pid"] != null && (Globals.IsHostTab (PortalSettings.ActiveTab.TabID) || UserController.Instance.GetCurrentUserInfo ().IsSuperUser)) {  		_objPortal = PortalController.Instance.GetPortal (Int32.Parse (Request.QueryString ["pid"]));  	} else {  		_objPortal = PortalController.Instance.GetPortal (PortalSettings.PortalId);  	}  	if (!Page.IsPostBack) {  		//save persistent values  		ViewState ["SkinControlWidth"] = _Width;  		ViewState ["SkinRoot"] = _SkinRoot;  		ViewState ["SkinSrc"] = _SkinSrc;  		//set width of control  		if (!String.IsNullOrEmpty (_Width)) {  			cboSkin.Width = Unit.Parse (_Width);  		}  		//set selected skin  		if (!String.IsNullOrEmpty (_SkinSrc)) {  			switch (_SkinSrc.Substring (0' 3)) {  			case "[L]":  				optHost.Checked = false;  				optSite.Checked = true;  				break;  			case "[G]":  				optSite.Checked = false;  				optHost.Checked = true;  				break;  			}  		} else {  			//no skin selected' initialized to site skin if any exists  			string strRoot = _objPortal.HomeDirectoryMapPath + SkinRoot;  			if (Directory.Exists (strRoot) && Directory.GetDirectories (strRoot).Length > 0) {  				optHost.Checked = false;  				optSite.Checked = true;  			}  		}  		LoadSkins ();  	}  } catch (Exception exc)//Module failed to load   {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.Skins,SkinControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinControl.cs,OnLoad,The following statement contains a magic number: if (!Page.IsPostBack) {  	//save persistent values  	ViewState ["SkinControlWidth"] = _Width;  	ViewState ["SkinRoot"] = _SkinRoot;  	ViewState ["SkinSrc"] = _SkinSrc;  	//set width of control  	if (!String.IsNullOrEmpty (_Width)) {  		cboSkin.Width = Unit.Parse (_Width);  	}  	//set selected skin  	if (!String.IsNullOrEmpty (_SkinSrc)) {  		switch (_SkinSrc.Substring (0' 3)) {  		case "[L]":  			optHost.Checked = false;  			optSite.Checked = true;  			break;  		case "[G]":  			optSite.Checked = false;  			optHost.Checked = true;  			break;  		}  	} else {  		//no skin selected' initialized to site skin if any exists  		string strRoot = _objPortal.HomeDirectoryMapPath + SkinRoot;  		if (Directory.Exists (strRoot) && Directory.GetDirectories (strRoot).Length > 0) {  			optHost.Checked = false;  			optSite.Checked = true;  		}  	}  	LoadSkins ();  }  
Magic Number,DotNetNuke.UI.Skins,SkinControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinControl.cs,OnLoad,The following statement contains a magic number: if (!String.IsNullOrEmpty (_SkinSrc)) {  	switch (_SkinSrc.Substring (0' 3)) {  	case "[L]":  		optHost.Checked = false;  		optSite.Checked = true;  		break;  	case "[G]":  		optSite.Checked = false;  		optHost.Checked = true;  		break;  	}  } else {  	//no skin selected' initialized to site skin if any exists  	string strRoot = _objPortal.HomeDirectoryMapPath + SkinRoot;  	if (Directory.Exists (strRoot) && Directory.GetDirectories (strRoot).Length > 0) {  		optHost.Checked = false;  		optSite.Checked = true;  	}  }  
Magic Number,DotNetNuke.UI.Skins,SkinControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinControl.cs,OnLoad,The following statement contains a magic number: switch (_SkinSrc.Substring (0' 3)) {  case "[L]":  	optHost.Checked = false;  	optSite.Checked = true;  	break;  case "[G]":  	optSite.Checked = false;  	optHost.Checked = true;  	break;  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,FormatSkinSrc,The following statement contains a magic number: if (!String.IsNullOrEmpty (strSkinSrc)) {  	switch (strSkinSrc.Substring (0' 3).ToLowerInvariant ()) {  	case "[g]":  		strSkinSrc = GdirRegex.Replace (strSkinSrc' Globals.HostPath);  		break;  	case "[s]":  		strSkinSrc = SdirRegex.Replace (strSkinSrc' portalSettings.HomeSystemDirectory);  		break;  	case "[l]":  		//to be compliant with all versions  		strSkinSrc = LdirRegex.Replace (strSkinSrc' portalSettings.HomeDirectory);  		break;  	}  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,FormatSkinSrc,The following statement contains a magic number: switch (strSkinSrc.Substring (0' 3).ToLowerInvariant ()) {  case "[g]":  	strSkinSrc = GdirRegex.Replace (strSkinSrc' Globals.HostPath);  	break;  case "[s]":  	strSkinSrc = SdirRegex.Replace (strSkinSrc' portalSettings.HomeSystemDirectory);  	break;  case "[l]":  	//to be compliant with all versions  	strSkinSrc = LdirRegex.Replace (strSkinSrc' portalSettings.HomeDirectory);  	break;  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following statement contains a magic number: while (objZipEntry != null) {  	if (!objZipEntry.IsDirectory) {  		//validate file extension  		strExtension = objZipEntry.Name.Substring (objZipEntry.Name.LastIndexOf (".") + 1);  		var extraExtensions = new List<string> {  			".ASCX"'  			".HTM"'  			".HTML"'  			".CSS"'  			".SWF"'  			".RESX"'  			".XAML"'  			".JS"  		};  		if (Host.AllowedExtensionWhitelist.IsAllowedExtension (strExtension' extraExtensions)) {  			//process embedded zip files  			if (objZipEntry.Name.ToLower () == RootSkin.ToLower () + ".zip") {  				using (var objMemoryStream = new MemoryStream ()) {  					intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  					while (intSize > 0) {  						objMemoryStream.Write (arrData' 0' intSize);  						intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  					}  					objMemoryStream.Seek (0' SeekOrigin.Begin);  					strMessage += UploadLegacySkin (rootPath' RootSkin' skinName' objMemoryStream);  				}  			} else if (objZipEntry.Name.ToLower () == RootContainer.ToLower () + ".zip") {  				using (var objMemoryStream = new MemoryStream ()) {  					intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  					while (intSize > 0) {  						objMemoryStream.Write (arrData' 0' intSize);  						intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  					}  					objMemoryStream.Seek (0' SeekOrigin.Begin);  					strMessage += UploadLegacySkin (rootPath' RootContainer' skinName' objMemoryStream);  				}  			} else {  				strFileName = rootPath + skinRoot + "\\" + skinName + "\\" + objZipEntry.Name;  				//create the directory if it does not exist  				if (!Directory.Exists (Path.GetDirectoryName (strFileName))) {  					strMessage += FormatMessage (CREATE_DIR' Path.GetDirectoryName (strFileName)' 2' false);  					Directory.CreateDirectory (Path.GetDirectoryName (strFileName));  				}  				//remove the old file  				if (File.Exists (strFileName)) {  					File.SetAttributes (strFileName' FileAttributes.Normal);  					File.Delete (strFileName);  				}  				//create the new file  				objFileStream = File.Create (strFileName);  				//unzip the file  				strMessage += FormatMessage (WRITE_FILE' Path.GetFileName (strFileName)' 2' false);  				intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  				while (intSize > 0) {  					objFileStream.Write (arrData' 0' intSize);  					intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  				}  				objFileStream.Close ();  				//save the skin file  				switch (Path.GetExtension (strFileName)) {  				case ".htm":  				case ".html":  				case ".ascx":  				case ".css":  					if (strFileName.ToLower ().IndexOf (Globals.glbAboutPage.ToLower ()) < 0) {  						arrSkinFiles.Add (strFileName);  					}  					break;  				}  				break;  			}  		} else {  			strMessage += string.Format (FILE_RESTICTED' objZipEntry.Name' Host.AllowedExtensionWhitelist.ToStorageString ()' "'"' "' *.").Replace ("2"' "true");  		}  	}  	objZipEntry = objZipInputStream.GetNextEntry ();  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following statement contains a magic number: while (objZipEntry != null) {  	if (!objZipEntry.IsDirectory) {  		//validate file extension  		strExtension = objZipEntry.Name.Substring (objZipEntry.Name.LastIndexOf (".") + 1);  		var extraExtensions = new List<string> {  			".ASCX"'  			".HTM"'  			".HTML"'  			".CSS"'  			".SWF"'  			".RESX"'  			".XAML"'  			".JS"  		};  		if (Host.AllowedExtensionWhitelist.IsAllowedExtension (strExtension' extraExtensions)) {  			//process embedded zip files  			if (objZipEntry.Name.ToLower () == RootSkin.ToLower () + ".zip") {  				using (var objMemoryStream = new MemoryStream ()) {  					intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  					while (intSize > 0) {  						objMemoryStream.Write (arrData' 0' intSize);  						intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  					}  					objMemoryStream.Seek (0' SeekOrigin.Begin);  					strMessage += UploadLegacySkin (rootPath' RootSkin' skinName' objMemoryStream);  				}  			} else if (objZipEntry.Name.ToLower () == RootContainer.ToLower () + ".zip") {  				using (var objMemoryStream = new MemoryStream ()) {  					intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  					while (intSize > 0) {  						objMemoryStream.Write (arrData' 0' intSize);  						intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  					}  					objMemoryStream.Seek (0' SeekOrigin.Begin);  					strMessage += UploadLegacySkin (rootPath' RootContainer' skinName' objMemoryStream);  				}  			} else {  				strFileName = rootPath + skinRoot + "\\" + skinName + "\\" + objZipEntry.Name;  				//create the directory if it does not exist  				if (!Directory.Exists (Path.GetDirectoryName (strFileName))) {  					strMessage += FormatMessage (CREATE_DIR' Path.GetDirectoryName (strFileName)' 2' false);  					Directory.CreateDirectory (Path.GetDirectoryName (strFileName));  				}  				//remove the old file  				if (File.Exists (strFileName)) {  					File.SetAttributes (strFileName' FileAttributes.Normal);  					File.Delete (strFileName);  				}  				//create the new file  				objFileStream = File.Create (strFileName);  				//unzip the file  				strMessage += FormatMessage (WRITE_FILE' Path.GetFileName (strFileName)' 2' false);  				intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  				while (intSize > 0) {  					objFileStream.Write (arrData' 0' intSize);  					intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  				}  				objFileStream.Close ();  				//save the skin file  				switch (Path.GetExtension (strFileName)) {  				case ".htm":  				case ".html":  				case ".ascx":  				case ".css":  					if (strFileName.ToLower ().IndexOf (Globals.glbAboutPage.ToLower ()) < 0) {  						arrSkinFiles.Add (strFileName);  					}  					break;  				}  				break;  			}  		} else {  			strMessage += string.Format (FILE_RESTICTED' objZipEntry.Name' Host.AllowedExtensionWhitelist.ToStorageString ()' "'"' "' *.").Replace ("2"' "true");  		}  	}  	objZipEntry = objZipInputStream.GetNextEntry ();  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following statement contains a magic number: if (!objZipEntry.IsDirectory) {  	//validate file extension  	strExtension = objZipEntry.Name.Substring (objZipEntry.Name.LastIndexOf (".") + 1);  	var extraExtensions = new List<string> {  		".ASCX"'  		".HTM"'  		".HTML"'  		".CSS"'  		".SWF"'  		".RESX"'  		".XAML"'  		".JS"  	};  	if (Host.AllowedExtensionWhitelist.IsAllowedExtension (strExtension' extraExtensions)) {  		//process embedded zip files  		if (objZipEntry.Name.ToLower () == RootSkin.ToLower () + ".zip") {  			using (var objMemoryStream = new MemoryStream ()) {  				intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  				while (intSize > 0) {  					objMemoryStream.Write (arrData' 0' intSize);  					intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  				}  				objMemoryStream.Seek (0' SeekOrigin.Begin);  				strMessage += UploadLegacySkin (rootPath' RootSkin' skinName' objMemoryStream);  			}  		} else if (objZipEntry.Name.ToLower () == RootContainer.ToLower () + ".zip") {  			using (var objMemoryStream = new MemoryStream ()) {  				intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  				while (intSize > 0) {  					objMemoryStream.Write (arrData' 0' intSize);  					intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  				}  				objMemoryStream.Seek (0' SeekOrigin.Begin);  				strMessage += UploadLegacySkin (rootPath' RootContainer' skinName' objMemoryStream);  			}  		} else {  			strFileName = rootPath + skinRoot + "\\" + skinName + "\\" + objZipEntry.Name;  			//create the directory if it does not exist  			if (!Directory.Exists (Path.GetDirectoryName (strFileName))) {  				strMessage += FormatMessage (CREATE_DIR' Path.GetDirectoryName (strFileName)' 2' false);  				Directory.CreateDirectory (Path.GetDirectoryName (strFileName));  			}  			//remove the old file  			if (File.Exists (strFileName)) {  				File.SetAttributes (strFileName' FileAttributes.Normal);  				File.Delete (strFileName);  			}  			//create the new file  			objFileStream = File.Create (strFileName);  			//unzip the file  			strMessage += FormatMessage (WRITE_FILE' Path.GetFileName (strFileName)' 2' false);  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  			while (intSize > 0) {  				objFileStream.Write (arrData' 0' intSize);  				intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  			}  			objFileStream.Close ();  			//save the skin file  			switch (Path.GetExtension (strFileName)) {  			case ".htm":  			case ".html":  			case ".ascx":  			case ".css":  				if (strFileName.ToLower ().IndexOf (Globals.glbAboutPage.ToLower ()) < 0) {  					arrSkinFiles.Add (strFileName);  				}  				break;  			}  			break;  		}  	} else {  		strMessage += string.Format (FILE_RESTICTED' objZipEntry.Name' Host.AllowedExtensionWhitelist.ToStorageString ()' "'"' "' *.").Replace ("2"' "true");  	}  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following statement contains a magic number: if (!objZipEntry.IsDirectory) {  	//validate file extension  	strExtension = objZipEntry.Name.Substring (objZipEntry.Name.LastIndexOf (".") + 1);  	var extraExtensions = new List<string> {  		".ASCX"'  		".HTM"'  		".HTML"'  		".CSS"'  		".SWF"'  		".RESX"'  		".XAML"'  		".JS"  	};  	if (Host.AllowedExtensionWhitelist.IsAllowedExtension (strExtension' extraExtensions)) {  		//process embedded zip files  		if (objZipEntry.Name.ToLower () == RootSkin.ToLower () + ".zip") {  			using (var objMemoryStream = new MemoryStream ()) {  				intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  				while (intSize > 0) {  					objMemoryStream.Write (arrData' 0' intSize);  					intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  				}  				objMemoryStream.Seek (0' SeekOrigin.Begin);  				strMessage += UploadLegacySkin (rootPath' RootSkin' skinName' objMemoryStream);  			}  		} else if (objZipEntry.Name.ToLower () == RootContainer.ToLower () + ".zip") {  			using (var objMemoryStream = new MemoryStream ()) {  				intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  				while (intSize > 0) {  					objMemoryStream.Write (arrData' 0' intSize);  					intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  				}  				objMemoryStream.Seek (0' SeekOrigin.Begin);  				strMessage += UploadLegacySkin (rootPath' RootContainer' skinName' objMemoryStream);  			}  		} else {  			strFileName = rootPath + skinRoot + "\\" + skinName + "\\" + objZipEntry.Name;  			//create the directory if it does not exist  			if (!Directory.Exists (Path.GetDirectoryName (strFileName))) {  				strMessage += FormatMessage (CREATE_DIR' Path.GetDirectoryName (strFileName)' 2' false);  				Directory.CreateDirectory (Path.GetDirectoryName (strFileName));  			}  			//remove the old file  			if (File.Exists (strFileName)) {  				File.SetAttributes (strFileName' FileAttributes.Normal);  				File.Delete (strFileName);  			}  			//create the new file  			objFileStream = File.Create (strFileName);  			//unzip the file  			strMessage += FormatMessage (WRITE_FILE' Path.GetFileName (strFileName)' 2' false);  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  			while (intSize > 0) {  				objFileStream.Write (arrData' 0' intSize);  				intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  			}  			objFileStream.Close ();  			//save the skin file  			switch (Path.GetExtension (strFileName)) {  			case ".htm":  			case ".html":  			case ".ascx":  			case ".css":  				if (strFileName.ToLower ().IndexOf (Globals.glbAboutPage.ToLower ()) < 0) {  					arrSkinFiles.Add (strFileName);  				}  				break;  			}  			break;  		}  	} else {  		strMessage += string.Format (FILE_RESTICTED' objZipEntry.Name' Host.AllowedExtensionWhitelist.ToStorageString ()' "'"' "' *.").Replace ("2"' "true");  	}  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following statement contains a magic number: if (Host.AllowedExtensionWhitelist.IsAllowedExtension (strExtension' extraExtensions)) {  	//process embedded zip files  	if (objZipEntry.Name.ToLower () == RootSkin.ToLower () + ".zip") {  		using (var objMemoryStream = new MemoryStream ()) {  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  			while (intSize > 0) {  				objMemoryStream.Write (arrData' 0' intSize);  				intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  			}  			objMemoryStream.Seek (0' SeekOrigin.Begin);  			strMessage += UploadLegacySkin (rootPath' RootSkin' skinName' objMemoryStream);  		}  	} else if (objZipEntry.Name.ToLower () == RootContainer.ToLower () + ".zip") {  		using (var objMemoryStream = new MemoryStream ()) {  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  			while (intSize > 0) {  				objMemoryStream.Write (arrData' 0' intSize);  				intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  			}  			objMemoryStream.Seek (0' SeekOrigin.Begin);  			strMessage += UploadLegacySkin (rootPath' RootContainer' skinName' objMemoryStream);  		}  	} else {  		strFileName = rootPath + skinRoot + "\\" + skinName + "\\" + objZipEntry.Name;  		//create the directory if it does not exist  		if (!Directory.Exists (Path.GetDirectoryName (strFileName))) {  			strMessage += FormatMessage (CREATE_DIR' Path.GetDirectoryName (strFileName)' 2' false);  			Directory.CreateDirectory (Path.GetDirectoryName (strFileName));  		}  		//remove the old file  		if (File.Exists (strFileName)) {  			File.SetAttributes (strFileName' FileAttributes.Normal);  			File.Delete (strFileName);  		}  		//create the new file  		objFileStream = File.Create (strFileName);  		//unzip the file  		strMessage += FormatMessage (WRITE_FILE' Path.GetFileName (strFileName)' 2' false);  		intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		while (intSize > 0) {  			objFileStream.Write (arrData' 0' intSize);  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		}  		objFileStream.Close ();  		//save the skin file  		switch (Path.GetExtension (strFileName)) {  		case ".htm":  		case ".html":  		case ".ascx":  		case ".css":  			if (strFileName.ToLower ().IndexOf (Globals.glbAboutPage.ToLower ()) < 0) {  				arrSkinFiles.Add (strFileName);  			}  			break;  		}  		break;  	}  } else {  	strMessage += string.Format (FILE_RESTICTED' objZipEntry.Name' Host.AllowedExtensionWhitelist.ToStorageString ()' "'"' "' *.").Replace ("2"' "true");  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following statement contains a magic number: if (Host.AllowedExtensionWhitelist.IsAllowedExtension (strExtension' extraExtensions)) {  	//process embedded zip files  	if (objZipEntry.Name.ToLower () == RootSkin.ToLower () + ".zip") {  		using (var objMemoryStream = new MemoryStream ()) {  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  			while (intSize > 0) {  				objMemoryStream.Write (arrData' 0' intSize);  				intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  			}  			objMemoryStream.Seek (0' SeekOrigin.Begin);  			strMessage += UploadLegacySkin (rootPath' RootSkin' skinName' objMemoryStream);  		}  	} else if (objZipEntry.Name.ToLower () == RootContainer.ToLower () + ".zip") {  		using (var objMemoryStream = new MemoryStream ()) {  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  			while (intSize > 0) {  				objMemoryStream.Write (arrData' 0' intSize);  				intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  			}  			objMemoryStream.Seek (0' SeekOrigin.Begin);  			strMessage += UploadLegacySkin (rootPath' RootContainer' skinName' objMemoryStream);  		}  	} else {  		strFileName = rootPath + skinRoot + "\\" + skinName + "\\" + objZipEntry.Name;  		//create the directory if it does not exist  		if (!Directory.Exists (Path.GetDirectoryName (strFileName))) {  			strMessage += FormatMessage (CREATE_DIR' Path.GetDirectoryName (strFileName)' 2' false);  			Directory.CreateDirectory (Path.GetDirectoryName (strFileName));  		}  		//remove the old file  		if (File.Exists (strFileName)) {  			File.SetAttributes (strFileName' FileAttributes.Normal);  			File.Delete (strFileName);  		}  		//create the new file  		objFileStream = File.Create (strFileName);  		//unzip the file  		strMessage += FormatMessage (WRITE_FILE' Path.GetFileName (strFileName)' 2' false);  		intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		while (intSize > 0) {  			objFileStream.Write (arrData' 0' intSize);  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		}  		objFileStream.Close ();  		//save the skin file  		switch (Path.GetExtension (strFileName)) {  		case ".htm":  		case ".html":  		case ".ascx":  		case ".css":  			if (strFileName.ToLower ().IndexOf (Globals.glbAboutPage.ToLower ()) < 0) {  				arrSkinFiles.Add (strFileName);  			}  			break;  		}  		break;  	}  } else {  	strMessage += string.Format (FILE_RESTICTED' objZipEntry.Name' Host.AllowedExtensionWhitelist.ToStorageString ()' "'"' "' *.").Replace ("2"' "true");  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following statement contains a magic number: if (objZipEntry.Name.ToLower () == RootSkin.ToLower () + ".zip") {  	using (var objMemoryStream = new MemoryStream ()) {  		intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		while (intSize > 0) {  			objMemoryStream.Write (arrData' 0' intSize);  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		}  		objMemoryStream.Seek (0' SeekOrigin.Begin);  		strMessage += UploadLegacySkin (rootPath' RootSkin' skinName' objMemoryStream);  	}  } else if (objZipEntry.Name.ToLower () == RootContainer.ToLower () + ".zip") {  	using (var objMemoryStream = new MemoryStream ()) {  		intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		while (intSize > 0) {  			objMemoryStream.Write (arrData' 0' intSize);  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		}  		objMemoryStream.Seek (0' SeekOrigin.Begin);  		strMessage += UploadLegacySkin (rootPath' RootContainer' skinName' objMemoryStream);  	}  } else {  	strFileName = rootPath + skinRoot + "\\" + skinName + "\\" + objZipEntry.Name;  	//create the directory if it does not exist  	if (!Directory.Exists (Path.GetDirectoryName (strFileName))) {  		strMessage += FormatMessage (CREATE_DIR' Path.GetDirectoryName (strFileName)' 2' false);  		Directory.CreateDirectory (Path.GetDirectoryName (strFileName));  	}  	//remove the old file  	if (File.Exists (strFileName)) {  		File.SetAttributes (strFileName' FileAttributes.Normal);  		File.Delete (strFileName);  	}  	//create the new file  	objFileStream = File.Create (strFileName);  	//unzip the file  	strMessage += FormatMessage (WRITE_FILE' Path.GetFileName (strFileName)' 2' false);  	intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  	while (intSize > 0) {  		objFileStream.Write (arrData' 0' intSize);  		intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  	}  	objFileStream.Close ();  	//save the skin file  	switch (Path.GetExtension (strFileName)) {  	case ".htm":  	case ".html":  	case ".ascx":  	case ".css":  		if (strFileName.ToLower ().IndexOf (Globals.glbAboutPage.ToLower ()) < 0) {  			arrSkinFiles.Add (strFileName);  		}  		break;  	}  	break;  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following statement contains a magic number: if (objZipEntry.Name.ToLower () == RootSkin.ToLower () + ".zip") {  	using (var objMemoryStream = new MemoryStream ()) {  		intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		while (intSize > 0) {  			objMemoryStream.Write (arrData' 0' intSize);  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		}  		objMemoryStream.Seek (0' SeekOrigin.Begin);  		strMessage += UploadLegacySkin (rootPath' RootSkin' skinName' objMemoryStream);  	}  } else if (objZipEntry.Name.ToLower () == RootContainer.ToLower () + ".zip") {  	using (var objMemoryStream = new MemoryStream ()) {  		intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		while (intSize > 0) {  			objMemoryStream.Write (arrData' 0' intSize);  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		}  		objMemoryStream.Seek (0' SeekOrigin.Begin);  		strMessage += UploadLegacySkin (rootPath' RootContainer' skinName' objMemoryStream);  	}  } else {  	strFileName = rootPath + skinRoot + "\\" + skinName + "\\" + objZipEntry.Name;  	//create the directory if it does not exist  	if (!Directory.Exists (Path.GetDirectoryName (strFileName))) {  		strMessage += FormatMessage (CREATE_DIR' Path.GetDirectoryName (strFileName)' 2' false);  		Directory.CreateDirectory (Path.GetDirectoryName (strFileName));  	}  	//remove the old file  	if (File.Exists (strFileName)) {  		File.SetAttributes (strFileName' FileAttributes.Normal);  		File.Delete (strFileName);  	}  	//create the new file  	objFileStream = File.Create (strFileName);  	//unzip the file  	strMessage += FormatMessage (WRITE_FILE' Path.GetFileName (strFileName)' 2' false);  	intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  	while (intSize > 0) {  		objFileStream.Write (arrData' 0' intSize);  		intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  	}  	objFileStream.Close ();  	//save the skin file  	switch (Path.GetExtension (strFileName)) {  	case ".htm":  	case ".html":  	case ".ascx":  	case ".css":  		if (strFileName.ToLower ().IndexOf (Globals.glbAboutPage.ToLower ()) < 0) {  			arrSkinFiles.Add (strFileName);  		}  		break;  	}  	break;  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following statement contains a magic number: if (objZipEntry.Name.ToLower () == RootContainer.ToLower () + ".zip") {  	using (var objMemoryStream = new MemoryStream ()) {  		intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		while (intSize > 0) {  			objMemoryStream.Write (arrData' 0' intSize);  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		}  		objMemoryStream.Seek (0' SeekOrigin.Begin);  		strMessage += UploadLegacySkin (rootPath' RootContainer' skinName' objMemoryStream);  	}  } else {  	strFileName = rootPath + skinRoot + "\\" + skinName + "\\" + objZipEntry.Name;  	//create the directory if it does not exist  	if (!Directory.Exists (Path.GetDirectoryName (strFileName))) {  		strMessage += FormatMessage (CREATE_DIR' Path.GetDirectoryName (strFileName)' 2' false);  		Directory.CreateDirectory (Path.GetDirectoryName (strFileName));  	}  	//remove the old file  	if (File.Exists (strFileName)) {  		File.SetAttributes (strFileName' FileAttributes.Normal);  		File.Delete (strFileName);  	}  	//create the new file  	objFileStream = File.Create (strFileName);  	//unzip the file  	strMessage += FormatMessage (WRITE_FILE' Path.GetFileName (strFileName)' 2' false);  	intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  	while (intSize > 0) {  		objFileStream.Write (arrData' 0' intSize);  		intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  	}  	objFileStream.Close ();  	//save the skin file  	switch (Path.GetExtension (strFileName)) {  	case ".htm":  	case ".html":  	case ".ascx":  	case ".css":  		if (strFileName.ToLower ().IndexOf (Globals.glbAboutPage.ToLower ()) < 0) {  			arrSkinFiles.Add (strFileName);  		}  		break;  	}  	break;  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following statement contains a magic number: if (objZipEntry.Name.ToLower () == RootContainer.ToLower () + ".zip") {  	using (var objMemoryStream = new MemoryStream ()) {  		intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		while (intSize > 0) {  			objMemoryStream.Write (arrData' 0' intSize);  			intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  		}  		objMemoryStream.Seek (0' SeekOrigin.Begin);  		strMessage += UploadLegacySkin (rootPath' RootContainer' skinName' objMemoryStream);  	}  } else {  	strFileName = rootPath + skinRoot + "\\" + skinName + "\\" + objZipEntry.Name;  	//create the directory if it does not exist  	if (!Directory.Exists (Path.GetDirectoryName (strFileName))) {  		strMessage += FormatMessage (CREATE_DIR' Path.GetDirectoryName (strFileName)' 2' false);  		Directory.CreateDirectory (Path.GetDirectoryName (strFileName));  	}  	//remove the old file  	if (File.Exists (strFileName)) {  		File.SetAttributes (strFileName' FileAttributes.Normal);  		File.Delete (strFileName);  	}  	//create the new file  	objFileStream = File.Create (strFileName);  	//unzip the file  	strMessage += FormatMessage (WRITE_FILE' Path.GetFileName (strFileName)' 2' false);  	intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  	while (intSize > 0) {  		objFileStream.Write (arrData' 0' intSize);  		intSize = objZipInputStream.Read (arrData' 0' arrData.Length);  	}  	objFileStream.Close ();  	//save the skin file  	switch (Path.GetExtension (strFileName)) {  	case ".htm":  	case ".html":  	case ".ascx":  	case ".css":  		if (strFileName.ToLower ().IndexOf (Globals.glbAboutPage.ToLower ()) < 0) {  			arrSkinFiles.Add (strFileName);  		}  		break;  	}  	break;  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following statement contains a magic number: if (!Directory.Exists (Path.GetDirectoryName (strFileName))) {  	strMessage += FormatMessage (CREATE_DIR' Path.GetDirectoryName (strFileName)' 2' false);  	Directory.CreateDirectory (Path.GetDirectoryName (strFileName));  }  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following statement contains a magic number: strMessage += FormatMessage (CREATE_DIR' Path.GetDirectoryName (strFileName)' 2' false);  
Magic Number,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following statement contains a magic number: strMessage += FormatMessage (WRITE_FILE' Path.GetFileName (strFileName)' 2' false);  
Magic Number,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,SkinFileProcessor,The following statement contains a magic number: if (File.Exists (FileName)) {  	try {  		SkinAttributes.Load (FileName);  		Message += SkinController.FormatMessage (PACKAGE_LOAD' Path.GetFileName (FileName)' 2' false);  	} catch (Exception ex) {  		//could not load XML file  		Logger.Error (ex);  		Message += SkinController.FormatMessage (string.Format (PACKAGE_LOAD_ERROR' ex.Message)' Path.GetFileName (FileName)' 2' true);  	}  }  
Magic Number,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,SkinFileProcessor,The following statement contains a magic number: if (File.Exists (FileName)) {  	try {  		SkinAttributes.Load (FileName);  		Message += SkinController.FormatMessage (PACKAGE_LOAD' Path.GetFileName (FileName)' 2' false);  	} catch (Exception ex) {  		//could not load XML file  		Logger.Error (ex);  		Message += SkinController.FormatMessage (string.Format (PACKAGE_LOAD_ERROR' ex.Message)' Path.GetFileName (FileName)' 2' true);  	}  }  
Magic Number,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,SkinFileProcessor,The following statement contains a magic number: try {  	SkinAttributes.Load (FileName);  	Message += SkinController.FormatMessage (PACKAGE_LOAD' Path.GetFileName (FileName)' 2' false);  } catch (Exception ex) {  	//could not load XML file  	Logger.Error (ex);  	Message += SkinController.FormatMessage (string.Format (PACKAGE_LOAD_ERROR' ex.Message)' Path.GetFileName (FileName)' 2' true);  }  
Magic Number,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,SkinFileProcessor,The following statement contains a magic number: try {  	SkinAttributes.Load (FileName);  	Message += SkinController.FormatMessage (PACKAGE_LOAD' Path.GetFileName (FileName)' 2' false);  } catch (Exception ex) {  	//could not load XML file  	Logger.Error (ex);  	Message += SkinController.FormatMessage (string.Format (PACKAGE_LOAD_ERROR' ex.Message)' Path.GetFileName (FileName)' 2' true);  }  
Magic Number,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,SkinFileProcessor,The following statement contains a magic number: Message += SkinController.FormatMessage (PACKAGE_LOAD' Path.GetFileName (FileName)' 2' false);  
Magic Number,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,SkinFileProcessor,The following statement contains a magic number: Message += SkinController.FormatMessage (string.Format (PACKAGE_LOAD_ERROR' ex.Message)' Path.GetFileName (FileName)' 2' true);  
Magic Number,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,SkinFileProcessor,The following statement contains a magic number: foreach (SkinControlInfo objSkinControl in SkinControlController.GetSkinControls ().Values) {  	Token = objSkinControl.ControlKey.ToUpper ();  	//If the control is already in the hash table  	if (m_ControlList.ContainsKey (Token)) {  		Message += SkinController.FormatMessage (string.Format (DUPLICATE_ERROR' objSkinControl.ControlKey.ToUpper ())' string.Format (DUPLICATE_DETAIL' m_ControlList [Token]' objSkinControl.ControlSrc)' 2' true);  	} else {  		//Add it  		Message += SkinController.FormatMessage (string.Format (LOAD_SKIN_TOKEN' objSkinControl.ControlKey.ToUpper ())' objSkinControl.ControlSrc' 2' false);  		m_ControlList.Add (Token' objSkinControl.ControlSrc);  	}  }  
Magic Number,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,SkinFileProcessor,The following statement contains a magic number: foreach (SkinControlInfo objSkinControl in SkinControlController.GetSkinControls ().Values) {  	Token = objSkinControl.ControlKey.ToUpper ();  	//If the control is already in the hash table  	if (m_ControlList.ContainsKey (Token)) {  		Message += SkinController.FormatMessage (string.Format (DUPLICATE_ERROR' objSkinControl.ControlKey.ToUpper ())' string.Format (DUPLICATE_DETAIL' m_ControlList [Token]' objSkinControl.ControlSrc)' 2' true);  	} else {  		//Add it  		Message += SkinController.FormatMessage (string.Format (LOAD_SKIN_TOKEN' objSkinControl.ControlKey.ToUpper ())' objSkinControl.ControlSrc' 2' false);  		m_ControlList.Add (Token' objSkinControl.ControlSrc);  	}  }  
Magic Number,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,SkinFileProcessor,The following statement contains a magic number: if (m_ControlList.ContainsKey (Token)) {  	Message += SkinController.FormatMessage (string.Format (DUPLICATE_ERROR' objSkinControl.ControlKey.ToUpper ())' string.Format (DUPLICATE_DETAIL' m_ControlList [Token]' objSkinControl.ControlSrc)' 2' true);  } else {  	//Add it  	Message += SkinController.FormatMessage (string.Format (LOAD_SKIN_TOKEN' objSkinControl.ControlKey.ToUpper ())' objSkinControl.ControlSrc' 2' false);  	m_ControlList.Add (Token' objSkinControl.ControlSrc);  }  
Magic Number,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,SkinFileProcessor,The following statement contains a magic number: if (m_ControlList.ContainsKey (Token)) {  	Message += SkinController.FormatMessage (string.Format (DUPLICATE_ERROR' objSkinControl.ControlKey.ToUpper ())' string.Format (DUPLICATE_DETAIL' m_ControlList [Token]' objSkinControl.ControlSrc)' 2' true);  } else {  	//Add it  	Message += SkinController.FormatMessage (string.Format (LOAD_SKIN_TOKEN' objSkinControl.ControlKey.ToUpper ())' objSkinControl.ControlSrc' 2' false);  	m_ControlList.Add (Token' objSkinControl.ControlSrc);  }  
Magic Number,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,SkinFileProcessor,The following statement contains a magic number: Message += SkinController.FormatMessage (string.Format (DUPLICATE_ERROR' objSkinControl.ControlKey.ToUpper ())' string.Format (DUPLICATE_DETAIL' m_ControlList [Token]' objSkinControl.ControlSrc)' 2' true);  
Magic Number,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,SkinFileProcessor,The following statement contains a magic number: Message += SkinController.FormatMessage (string.Format (LOAD_SKIN_TOKEN' objSkinControl.ControlKey.ToUpper ())' objSkinControl.ControlSrc' 2' false);  
Magic Number,DotNetNuke.UI.Skins,SkinThumbNailControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinThumbNailControl.cs,CreateThumbnail,The following statement contains a magic number: if (blnCreate) {  	const int intSize = 140;  	//size of the thumbnail   	Image objImage;  	try {  		objImage = Image.FromFile (strImage);  		//scale the image to prevent distortion  		int intWidth;  		int intHeight;  		double dblScale;  		if (objImage.Height > objImage.Width) {  			//The height was larger' so scale the width   			dblScale = (double)intSize / objImage.Height;  			intHeight = intSize;  			intWidth = Convert.ToInt32 (objImage.Width * dblScale);  		} else {  			//The width was larger' so scale the height   			dblScale = (double)intSize / objImage.Width;  			intWidth = intSize;  			intHeight = Convert.ToInt32 (objImage.Height * dblScale);  		}  		//create the thumbnail image  		var objThumbnail = objImage.GetThumbnailImage (intWidth' intHeight' null' IntPtr.Zero);  		//delete the old file ( if it exists )  		if (File.Exists (strThumbnail)) {  			File.Delete (strThumbnail);  		}  		//save the thumbnail image   		objThumbnail.Save (strThumbnail' objImage.RawFormat);  		//set the file attributes  		File.SetAttributes (strThumbnail' FileAttributes.Normal);  		File.SetLastWriteTime (strThumbnail' File.GetLastWriteTime (strImage));  		//tidy up  		objImage.Dispose ();  		objThumbnail.Dispose ();  	} catch (Exception ex) {  		Logger.Error (ex);  	}  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: try {  	valStreet.ErrorMessage = Localization.GetString ("StreetRequired"' Localization.GetResourceFile (this' MyFileName));  	valCity.ErrorMessage = Localization.GetString ("CityRequired"' Localization.GetResourceFile (this' MyFileName));  	valCountry.ErrorMessage = Localization.GetString ("CountryRequired"' Localization.GetResourceFile (this' MyFileName));  	valPostal.ErrorMessage = Localization.GetString ("PostalRequired"' Localization.GetResourceFile (this' MyFileName));  	valTelephone.ErrorMessage = Localization.GetString ("TelephoneRequired"' Localization.GetResourceFile (this' MyFileName));  	valCell.ErrorMessage = Localization.GetString ("CellRequired"' Localization.GetResourceFile (this' MyFileName));  	valFax.ErrorMessage = Localization.GetString ("FaxRequired"' Localization.GetResourceFile (this' MyFileName));  	if (!Page.IsPostBack) {  		txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  		txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  		txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  		cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  		cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  		txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  		txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  		txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  		txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  		txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  		//<tam:note modified to test Lists  		//Dim objRegionalController As New RegionalController  		//cboCountry.DataSource = objRegionalController.GetCountries  		//<this test using method 2: get empty collection then get each entry list on demand & store into cache  		var ctlEntry = new ListController ();  		var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  		cboCountry.DataSource = entryCollection;  		cboCountry.DataBind ();  		cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  		switch (_countryData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_country)) {  				cboCountry.SelectedIndex = 0;  			} else {  				if (cboCountry.Items.FindByText (_country) != null) {  					cboCountry.ClearSelection ();  					cboCountry.Items.FindByText (_country).Selected = true;  				}  			}  			break;  		case "value":  			if (cboCountry.Items.FindByValue (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByValue (_country).Selected = true;  			}  			break;  		}  		Localize ();  		if (cboRegion.Visible) {  			switch (_regionData.ToLower ()) {  			case "text":  				if (String.IsNullOrEmpty (_region)) {  					cboRegion.SelectedIndex = 0;  				} else {  					if (cboRegion.Items.FindByText (_region) != null) {  						cboRegion.Items.FindByText (_region).Selected = true;  					}  				}  				break;  			case "value":  				if (cboRegion.Items.FindByValue (_region) != null) {  					cboRegion.Items.FindByValue (_region).Selected = true;  				}  				break;  			}  		} else {  			txtRegion.Text = _region;  		}  		txtStreet.Text = _street;  		txtUnit.Text = _unit;  		txtCity.Text = _city;  		txtPostal.Text = _postal;  		txtTelephone.Text = _telephone;  		txtCell.Text = _cell;  		txtFax.Text = _fax;  		divStreet.Visible = _showStreet;  		divUnit.Visible = _showUnit;  		divCity.Visible = _showCity;  		divCountry.Visible = _showCountry;  		divRegion.Visible = _showRegion;  		divPostal.Visible = _showPostal;  		divTelephone.Visible = _showTelephone;  		divCell.Visible = _showCell;  		divFax.Visible = _showFax;  		if (TabPermissionController.CanAdminPage ()) {  			chkStreet.Visible = true;  			chkCity.Visible = true;  			chkCountry.Visible = true;  			chkRegion.Visible = true;  			chkPostal.Visible = true;  			chkTelephone.Visible = true;  			chkCell.Visible = true;  			chkFax.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_moduleId);  		ViewState ["LabelColumnWidth"] = _labelColumnWidth;  		ViewState ["ControlColumnWidth"] = _controlColumnWidth;  		ShowRequiredFields ();  	}  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: try {  	valStreet.ErrorMessage = Localization.GetString ("StreetRequired"' Localization.GetResourceFile (this' MyFileName));  	valCity.ErrorMessage = Localization.GetString ("CityRequired"' Localization.GetResourceFile (this' MyFileName));  	valCountry.ErrorMessage = Localization.GetString ("CountryRequired"' Localization.GetResourceFile (this' MyFileName));  	valPostal.ErrorMessage = Localization.GetString ("PostalRequired"' Localization.GetResourceFile (this' MyFileName));  	valTelephone.ErrorMessage = Localization.GetString ("TelephoneRequired"' Localization.GetResourceFile (this' MyFileName));  	valCell.ErrorMessage = Localization.GetString ("CellRequired"' Localization.GetResourceFile (this' MyFileName));  	valFax.ErrorMessage = Localization.GetString ("FaxRequired"' Localization.GetResourceFile (this' MyFileName));  	if (!Page.IsPostBack) {  		txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  		txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  		txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  		cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  		cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  		txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  		txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  		txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  		txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  		txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  		//<tam:note modified to test Lists  		//Dim objRegionalController As New RegionalController  		//cboCountry.DataSource = objRegionalController.GetCountries  		//<this test using method 2: get empty collection then get each entry list on demand & store into cache  		var ctlEntry = new ListController ();  		var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  		cboCountry.DataSource = entryCollection;  		cboCountry.DataBind ();  		cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  		switch (_countryData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_country)) {  				cboCountry.SelectedIndex = 0;  			} else {  				if (cboCountry.Items.FindByText (_country) != null) {  					cboCountry.ClearSelection ();  					cboCountry.Items.FindByText (_country).Selected = true;  				}  			}  			break;  		case "value":  			if (cboCountry.Items.FindByValue (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByValue (_country).Selected = true;  			}  			break;  		}  		Localize ();  		if (cboRegion.Visible) {  			switch (_regionData.ToLower ()) {  			case "text":  				if (String.IsNullOrEmpty (_region)) {  					cboRegion.SelectedIndex = 0;  				} else {  					if (cboRegion.Items.FindByText (_region) != null) {  						cboRegion.Items.FindByText (_region).Selected = true;  					}  				}  				break;  			case "value":  				if (cboRegion.Items.FindByValue (_region) != null) {  					cboRegion.Items.FindByValue (_region).Selected = true;  				}  				break;  			}  		} else {  			txtRegion.Text = _region;  		}  		txtStreet.Text = _street;  		txtUnit.Text = _unit;  		txtCity.Text = _city;  		txtPostal.Text = _postal;  		txtTelephone.Text = _telephone;  		txtCell.Text = _cell;  		txtFax.Text = _fax;  		divStreet.Visible = _showStreet;  		divUnit.Visible = _showUnit;  		divCity.Visible = _showCity;  		divCountry.Visible = _showCountry;  		divRegion.Visible = _showRegion;  		divPostal.Visible = _showPostal;  		divTelephone.Visible = _showTelephone;  		divCell.Visible = _showCell;  		divFax.Visible = _showFax;  		if (TabPermissionController.CanAdminPage ()) {  			chkStreet.Visible = true;  			chkCity.Visible = true;  			chkCountry.Visible = true;  			chkRegion.Visible = true;  			chkPostal.Visible = true;  			chkTelephone.Visible = true;  			chkCell.Visible = true;  			chkFax.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_moduleId);  		ViewState ["LabelColumnWidth"] = _labelColumnWidth;  		ViewState ["ControlColumnWidth"] = _controlColumnWidth;  		ShowRequiredFields ();  	}  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: try {  	valStreet.ErrorMessage = Localization.GetString ("StreetRequired"' Localization.GetResourceFile (this' MyFileName));  	valCity.ErrorMessage = Localization.GetString ("CityRequired"' Localization.GetResourceFile (this' MyFileName));  	valCountry.ErrorMessage = Localization.GetString ("CountryRequired"' Localization.GetResourceFile (this' MyFileName));  	valPostal.ErrorMessage = Localization.GetString ("PostalRequired"' Localization.GetResourceFile (this' MyFileName));  	valTelephone.ErrorMessage = Localization.GetString ("TelephoneRequired"' Localization.GetResourceFile (this' MyFileName));  	valCell.ErrorMessage = Localization.GetString ("CellRequired"' Localization.GetResourceFile (this' MyFileName));  	valFax.ErrorMessage = Localization.GetString ("FaxRequired"' Localization.GetResourceFile (this' MyFileName));  	if (!Page.IsPostBack) {  		txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  		txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  		txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  		cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  		cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  		txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  		txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  		txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  		txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  		txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  		//<tam:note modified to test Lists  		//Dim objRegionalController As New RegionalController  		//cboCountry.DataSource = objRegionalController.GetCountries  		//<this test using method 2: get empty collection then get each entry list on demand & store into cache  		var ctlEntry = new ListController ();  		var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  		cboCountry.DataSource = entryCollection;  		cboCountry.DataBind ();  		cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  		switch (_countryData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_country)) {  				cboCountry.SelectedIndex = 0;  			} else {  				if (cboCountry.Items.FindByText (_country) != null) {  					cboCountry.ClearSelection ();  					cboCountry.Items.FindByText (_country).Selected = true;  				}  			}  			break;  		case "value":  			if (cboCountry.Items.FindByValue (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByValue (_country).Selected = true;  			}  			break;  		}  		Localize ();  		if (cboRegion.Visible) {  			switch (_regionData.ToLower ()) {  			case "text":  				if (String.IsNullOrEmpty (_region)) {  					cboRegion.SelectedIndex = 0;  				} else {  					if (cboRegion.Items.FindByText (_region) != null) {  						cboRegion.Items.FindByText (_region).Selected = true;  					}  				}  				break;  			case "value":  				if (cboRegion.Items.FindByValue (_region) != null) {  					cboRegion.Items.FindByValue (_region).Selected = true;  				}  				break;  			}  		} else {  			txtRegion.Text = _region;  		}  		txtStreet.Text = _street;  		txtUnit.Text = _unit;  		txtCity.Text = _city;  		txtPostal.Text = _postal;  		txtTelephone.Text = _telephone;  		txtCell.Text = _cell;  		txtFax.Text = _fax;  		divStreet.Visible = _showStreet;  		divUnit.Visible = _showUnit;  		divCity.Visible = _showCity;  		divCountry.Visible = _showCountry;  		divRegion.Visible = _showRegion;  		divPostal.Visible = _showPostal;  		divTelephone.Visible = _showTelephone;  		divCell.Visible = _showCell;  		divFax.Visible = _showFax;  		if (TabPermissionController.CanAdminPage ()) {  			chkStreet.Visible = true;  			chkCity.Visible = true;  			chkCountry.Visible = true;  			chkRegion.Visible = true;  			chkPostal.Visible = true;  			chkTelephone.Visible = true;  			chkCell.Visible = true;  			chkFax.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_moduleId);  		ViewState ["LabelColumnWidth"] = _labelColumnWidth;  		ViewState ["ControlColumnWidth"] = _controlColumnWidth;  		ShowRequiredFields ();  	}  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: try {  	valStreet.ErrorMessage = Localization.GetString ("StreetRequired"' Localization.GetResourceFile (this' MyFileName));  	valCity.ErrorMessage = Localization.GetString ("CityRequired"' Localization.GetResourceFile (this' MyFileName));  	valCountry.ErrorMessage = Localization.GetString ("CountryRequired"' Localization.GetResourceFile (this' MyFileName));  	valPostal.ErrorMessage = Localization.GetString ("PostalRequired"' Localization.GetResourceFile (this' MyFileName));  	valTelephone.ErrorMessage = Localization.GetString ("TelephoneRequired"' Localization.GetResourceFile (this' MyFileName));  	valCell.ErrorMessage = Localization.GetString ("CellRequired"' Localization.GetResourceFile (this' MyFileName));  	valFax.ErrorMessage = Localization.GetString ("FaxRequired"' Localization.GetResourceFile (this' MyFileName));  	if (!Page.IsPostBack) {  		txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  		txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  		txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  		cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  		cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  		txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  		txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  		txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  		txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  		txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  		//<tam:note modified to test Lists  		//Dim objRegionalController As New RegionalController  		//cboCountry.DataSource = objRegionalController.GetCountries  		//<this test using method 2: get empty collection then get each entry list on demand & store into cache  		var ctlEntry = new ListController ();  		var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  		cboCountry.DataSource = entryCollection;  		cboCountry.DataBind ();  		cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  		switch (_countryData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_country)) {  				cboCountry.SelectedIndex = 0;  			} else {  				if (cboCountry.Items.FindByText (_country) != null) {  					cboCountry.ClearSelection ();  					cboCountry.Items.FindByText (_country).Selected = true;  				}  			}  			break;  		case "value":  			if (cboCountry.Items.FindByValue (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByValue (_country).Selected = true;  			}  			break;  		}  		Localize ();  		if (cboRegion.Visible) {  			switch (_regionData.ToLower ()) {  			case "text":  				if (String.IsNullOrEmpty (_region)) {  					cboRegion.SelectedIndex = 0;  				} else {  					if (cboRegion.Items.FindByText (_region) != null) {  						cboRegion.Items.FindByText (_region).Selected = true;  					}  				}  				break;  			case "value":  				if (cboRegion.Items.FindByValue (_region) != null) {  					cboRegion.Items.FindByValue (_region).Selected = true;  				}  				break;  			}  		} else {  			txtRegion.Text = _region;  		}  		txtStreet.Text = _street;  		txtUnit.Text = _unit;  		txtCity.Text = _city;  		txtPostal.Text = _postal;  		txtTelephone.Text = _telephone;  		txtCell.Text = _cell;  		txtFax.Text = _fax;  		divStreet.Visible = _showStreet;  		divUnit.Visible = _showUnit;  		divCity.Visible = _showCity;  		divCountry.Visible = _showCountry;  		divRegion.Visible = _showRegion;  		divPostal.Visible = _showPostal;  		divTelephone.Visible = _showTelephone;  		divCell.Visible = _showCell;  		divFax.Visible = _showFax;  		if (TabPermissionController.CanAdminPage ()) {  			chkStreet.Visible = true;  			chkCity.Visible = true;  			chkCountry.Visible = true;  			chkRegion.Visible = true;  			chkPostal.Visible = true;  			chkTelephone.Visible = true;  			chkCell.Visible = true;  			chkFax.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_moduleId);  		ViewState ["LabelColumnWidth"] = _labelColumnWidth;  		ViewState ["ControlColumnWidth"] = _controlColumnWidth;  		ShowRequiredFields ();  	}  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: try {  	valStreet.ErrorMessage = Localization.GetString ("StreetRequired"' Localization.GetResourceFile (this' MyFileName));  	valCity.ErrorMessage = Localization.GetString ("CityRequired"' Localization.GetResourceFile (this' MyFileName));  	valCountry.ErrorMessage = Localization.GetString ("CountryRequired"' Localization.GetResourceFile (this' MyFileName));  	valPostal.ErrorMessage = Localization.GetString ("PostalRequired"' Localization.GetResourceFile (this' MyFileName));  	valTelephone.ErrorMessage = Localization.GetString ("TelephoneRequired"' Localization.GetResourceFile (this' MyFileName));  	valCell.ErrorMessage = Localization.GetString ("CellRequired"' Localization.GetResourceFile (this' MyFileName));  	valFax.ErrorMessage = Localization.GetString ("FaxRequired"' Localization.GetResourceFile (this' MyFileName));  	if (!Page.IsPostBack) {  		txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  		txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  		txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  		cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  		cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  		txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  		txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  		txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  		txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  		txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  		//<tam:note modified to test Lists  		//Dim objRegionalController As New RegionalController  		//cboCountry.DataSource = objRegionalController.GetCountries  		//<this test using method 2: get empty collection then get each entry list on demand & store into cache  		var ctlEntry = new ListController ();  		var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  		cboCountry.DataSource = entryCollection;  		cboCountry.DataBind ();  		cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  		switch (_countryData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_country)) {  				cboCountry.SelectedIndex = 0;  			} else {  				if (cboCountry.Items.FindByText (_country) != null) {  					cboCountry.ClearSelection ();  					cboCountry.Items.FindByText (_country).Selected = true;  				}  			}  			break;  		case "value":  			if (cboCountry.Items.FindByValue (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByValue (_country).Selected = true;  			}  			break;  		}  		Localize ();  		if (cboRegion.Visible) {  			switch (_regionData.ToLower ()) {  			case "text":  				if (String.IsNullOrEmpty (_region)) {  					cboRegion.SelectedIndex = 0;  				} else {  					if (cboRegion.Items.FindByText (_region) != null) {  						cboRegion.Items.FindByText (_region).Selected = true;  					}  				}  				break;  			case "value":  				if (cboRegion.Items.FindByValue (_region) != null) {  					cboRegion.Items.FindByValue (_region).Selected = true;  				}  				break;  			}  		} else {  			txtRegion.Text = _region;  		}  		txtStreet.Text = _street;  		txtUnit.Text = _unit;  		txtCity.Text = _city;  		txtPostal.Text = _postal;  		txtTelephone.Text = _telephone;  		txtCell.Text = _cell;  		txtFax.Text = _fax;  		divStreet.Visible = _showStreet;  		divUnit.Visible = _showUnit;  		divCity.Visible = _showCity;  		divCountry.Visible = _showCountry;  		divRegion.Visible = _showRegion;  		divPostal.Visible = _showPostal;  		divTelephone.Visible = _showTelephone;  		divCell.Visible = _showCell;  		divFax.Visible = _showFax;  		if (TabPermissionController.CanAdminPage ()) {  			chkStreet.Visible = true;  			chkCity.Visible = true;  			chkCountry.Visible = true;  			chkRegion.Visible = true;  			chkPostal.Visible = true;  			chkTelephone.Visible = true;  			chkCell.Visible = true;  			chkFax.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_moduleId);  		ViewState ["LabelColumnWidth"] = _labelColumnWidth;  		ViewState ["ControlColumnWidth"] = _controlColumnWidth;  		ShowRequiredFields ();  	}  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: try {  	valStreet.ErrorMessage = Localization.GetString ("StreetRequired"' Localization.GetResourceFile (this' MyFileName));  	valCity.ErrorMessage = Localization.GetString ("CityRequired"' Localization.GetResourceFile (this' MyFileName));  	valCountry.ErrorMessage = Localization.GetString ("CountryRequired"' Localization.GetResourceFile (this' MyFileName));  	valPostal.ErrorMessage = Localization.GetString ("PostalRequired"' Localization.GetResourceFile (this' MyFileName));  	valTelephone.ErrorMessage = Localization.GetString ("TelephoneRequired"' Localization.GetResourceFile (this' MyFileName));  	valCell.ErrorMessage = Localization.GetString ("CellRequired"' Localization.GetResourceFile (this' MyFileName));  	valFax.ErrorMessage = Localization.GetString ("FaxRequired"' Localization.GetResourceFile (this' MyFileName));  	if (!Page.IsPostBack) {  		txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  		txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  		txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  		cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  		cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  		txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  		txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  		txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  		txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  		txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  		//<tam:note modified to test Lists  		//Dim objRegionalController As New RegionalController  		//cboCountry.DataSource = objRegionalController.GetCountries  		//<this test using method 2: get empty collection then get each entry list on demand & store into cache  		var ctlEntry = new ListController ();  		var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  		cboCountry.DataSource = entryCollection;  		cboCountry.DataBind ();  		cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  		switch (_countryData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_country)) {  				cboCountry.SelectedIndex = 0;  			} else {  				if (cboCountry.Items.FindByText (_country) != null) {  					cboCountry.ClearSelection ();  					cboCountry.Items.FindByText (_country).Selected = true;  				}  			}  			break;  		case "value":  			if (cboCountry.Items.FindByValue (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByValue (_country).Selected = true;  			}  			break;  		}  		Localize ();  		if (cboRegion.Visible) {  			switch (_regionData.ToLower ()) {  			case "text":  				if (String.IsNullOrEmpty (_region)) {  					cboRegion.SelectedIndex = 0;  				} else {  					if (cboRegion.Items.FindByText (_region) != null) {  						cboRegion.Items.FindByText (_region).Selected = true;  					}  				}  				break;  			case "value":  				if (cboRegion.Items.FindByValue (_region) != null) {  					cboRegion.Items.FindByValue (_region).Selected = true;  				}  				break;  			}  		} else {  			txtRegion.Text = _region;  		}  		txtStreet.Text = _street;  		txtUnit.Text = _unit;  		txtCity.Text = _city;  		txtPostal.Text = _postal;  		txtTelephone.Text = _telephone;  		txtCell.Text = _cell;  		txtFax.Text = _fax;  		divStreet.Visible = _showStreet;  		divUnit.Visible = _showUnit;  		divCity.Visible = _showCity;  		divCountry.Visible = _showCountry;  		divRegion.Visible = _showRegion;  		divPostal.Visible = _showPostal;  		divTelephone.Visible = _showTelephone;  		divCell.Visible = _showCell;  		divFax.Visible = _showFax;  		if (TabPermissionController.CanAdminPage ()) {  			chkStreet.Visible = true;  			chkCity.Visible = true;  			chkCountry.Visible = true;  			chkRegion.Visible = true;  			chkPostal.Visible = true;  			chkTelephone.Visible = true;  			chkCell.Visible = true;  			chkFax.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_moduleId);  		ViewState ["LabelColumnWidth"] = _labelColumnWidth;  		ViewState ["ControlColumnWidth"] = _controlColumnWidth;  		ShowRequiredFields ();  	}  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: try {  	valStreet.ErrorMessage = Localization.GetString ("StreetRequired"' Localization.GetResourceFile (this' MyFileName));  	valCity.ErrorMessage = Localization.GetString ("CityRequired"' Localization.GetResourceFile (this' MyFileName));  	valCountry.ErrorMessage = Localization.GetString ("CountryRequired"' Localization.GetResourceFile (this' MyFileName));  	valPostal.ErrorMessage = Localization.GetString ("PostalRequired"' Localization.GetResourceFile (this' MyFileName));  	valTelephone.ErrorMessage = Localization.GetString ("TelephoneRequired"' Localization.GetResourceFile (this' MyFileName));  	valCell.ErrorMessage = Localization.GetString ("CellRequired"' Localization.GetResourceFile (this' MyFileName));  	valFax.ErrorMessage = Localization.GetString ("FaxRequired"' Localization.GetResourceFile (this' MyFileName));  	if (!Page.IsPostBack) {  		txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  		txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  		txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  		cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  		cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  		txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  		txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  		txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  		txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  		txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  		//<tam:note modified to test Lists  		//Dim objRegionalController As New RegionalController  		//cboCountry.DataSource = objRegionalController.GetCountries  		//<this test using method 2: get empty collection then get each entry list on demand & store into cache  		var ctlEntry = new ListController ();  		var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  		cboCountry.DataSource = entryCollection;  		cboCountry.DataBind ();  		cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  		switch (_countryData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_country)) {  				cboCountry.SelectedIndex = 0;  			} else {  				if (cboCountry.Items.FindByText (_country) != null) {  					cboCountry.ClearSelection ();  					cboCountry.Items.FindByText (_country).Selected = true;  				}  			}  			break;  		case "value":  			if (cboCountry.Items.FindByValue (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByValue (_country).Selected = true;  			}  			break;  		}  		Localize ();  		if (cboRegion.Visible) {  			switch (_regionData.ToLower ()) {  			case "text":  				if (String.IsNullOrEmpty (_region)) {  					cboRegion.SelectedIndex = 0;  				} else {  					if (cboRegion.Items.FindByText (_region) != null) {  						cboRegion.Items.FindByText (_region).Selected = true;  					}  				}  				break;  			case "value":  				if (cboRegion.Items.FindByValue (_region) != null) {  					cboRegion.Items.FindByValue (_region).Selected = true;  				}  				break;  			}  		} else {  			txtRegion.Text = _region;  		}  		txtStreet.Text = _street;  		txtUnit.Text = _unit;  		txtCity.Text = _city;  		txtPostal.Text = _postal;  		txtTelephone.Text = _telephone;  		txtCell.Text = _cell;  		txtFax.Text = _fax;  		divStreet.Visible = _showStreet;  		divUnit.Visible = _showUnit;  		divCity.Visible = _showCity;  		divCountry.Visible = _showCountry;  		divRegion.Visible = _showRegion;  		divPostal.Visible = _showPostal;  		divTelephone.Visible = _showTelephone;  		divCell.Visible = _showCell;  		divFax.Visible = _showFax;  		if (TabPermissionController.CanAdminPage ()) {  			chkStreet.Visible = true;  			chkCity.Visible = true;  			chkCountry.Visible = true;  			chkRegion.Visible = true;  			chkPostal.Visible = true;  			chkTelephone.Visible = true;  			chkCell.Visible = true;  			chkFax.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_moduleId);  		ViewState ["LabelColumnWidth"] = _labelColumnWidth;  		ViewState ["ControlColumnWidth"] = _controlColumnWidth;  		ShowRequiredFields ();  	}  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: try {  	valStreet.ErrorMessage = Localization.GetString ("StreetRequired"' Localization.GetResourceFile (this' MyFileName));  	valCity.ErrorMessage = Localization.GetString ("CityRequired"' Localization.GetResourceFile (this' MyFileName));  	valCountry.ErrorMessage = Localization.GetString ("CountryRequired"' Localization.GetResourceFile (this' MyFileName));  	valPostal.ErrorMessage = Localization.GetString ("PostalRequired"' Localization.GetResourceFile (this' MyFileName));  	valTelephone.ErrorMessage = Localization.GetString ("TelephoneRequired"' Localization.GetResourceFile (this' MyFileName));  	valCell.ErrorMessage = Localization.GetString ("CellRequired"' Localization.GetResourceFile (this' MyFileName));  	valFax.ErrorMessage = Localization.GetString ("FaxRequired"' Localization.GetResourceFile (this' MyFileName));  	if (!Page.IsPostBack) {  		txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  		txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  		txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  		cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  		cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  		txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  		txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  		txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  		txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  		txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  		//<tam:note modified to test Lists  		//Dim objRegionalController As New RegionalController  		//cboCountry.DataSource = objRegionalController.GetCountries  		//<this test using method 2: get empty collection then get each entry list on demand & store into cache  		var ctlEntry = new ListController ();  		var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  		cboCountry.DataSource = entryCollection;  		cboCountry.DataBind ();  		cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  		switch (_countryData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_country)) {  				cboCountry.SelectedIndex = 0;  			} else {  				if (cboCountry.Items.FindByText (_country) != null) {  					cboCountry.ClearSelection ();  					cboCountry.Items.FindByText (_country).Selected = true;  				}  			}  			break;  		case "value":  			if (cboCountry.Items.FindByValue (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByValue (_country).Selected = true;  			}  			break;  		}  		Localize ();  		if (cboRegion.Visible) {  			switch (_regionData.ToLower ()) {  			case "text":  				if (String.IsNullOrEmpty (_region)) {  					cboRegion.SelectedIndex = 0;  				} else {  					if (cboRegion.Items.FindByText (_region) != null) {  						cboRegion.Items.FindByText (_region).Selected = true;  					}  				}  				break;  			case "value":  				if (cboRegion.Items.FindByValue (_region) != null) {  					cboRegion.Items.FindByValue (_region).Selected = true;  				}  				break;  			}  		} else {  			txtRegion.Text = _region;  		}  		txtStreet.Text = _street;  		txtUnit.Text = _unit;  		txtCity.Text = _city;  		txtPostal.Text = _postal;  		txtTelephone.Text = _telephone;  		txtCell.Text = _cell;  		txtFax.Text = _fax;  		divStreet.Visible = _showStreet;  		divUnit.Visible = _showUnit;  		divCity.Visible = _showCity;  		divCountry.Visible = _showCountry;  		divRegion.Visible = _showRegion;  		divPostal.Visible = _showPostal;  		divTelephone.Visible = _showTelephone;  		divCell.Visible = _showCell;  		divFax.Visible = _showFax;  		if (TabPermissionController.CanAdminPage ()) {  			chkStreet.Visible = true;  			chkCity.Visible = true;  			chkCountry.Visible = true;  			chkRegion.Visible = true;  			chkPostal.Visible = true;  			chkTelephone.Visible = true;  			chkCell.Visible = true;  			chkFax.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_moduleId);  		ViewState ["LabelColumnWidth"] = _labelColumnWidth;  		ViewState ["ControlColumnWidth"] = _controlColumnWidth;  		ShowRequiredFields ();  	}  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: if (!Page.IsPostBack) {  	txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  	txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  	txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  	cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  	cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  	txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  	txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  	txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  	txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  	txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  	//<tam:note modified to test Lists  	//Dim objRegionalController As New RegionalController  	//cboCountry.DataSource = objRegionalController.GetCountries  	//<this test using method 2: get empty collection then get each entry list on demand & store into cache  	var ctlEntry = new ListController ();  	var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  	cboCountry.DataSource = entryCollection;  	cboCountry.DataBind ();  	cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  	switch (_countryData.ToLower ()) {  	case "text":  		if (String.IsNullOrEmpty (_country)) {  			cboCountry.SelectedIndex = 0;  		} else {  			if (cboCountry.Items.FindByText (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByText (_country).Selected = true;  			}  		}  		break;  	case "value":  		if (cboCountry.Items.FindByValue (_country) != null) {  			cboCountry.ClearSelection ();  			cboCountry.Items.FindByValue (_country).Selected = true;  		}  		break;  	}  	Localize ();  	if (cboRegion.Visible) {  		switch (_regionData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_region)) {  				cboRegion.SelectedIndex = 0;  			} else {  				if (cboRegion.Items.FindByText (_region) != null) {  					cboRegion.Items.FindByText (_region).Selected = true;  				}  			}  			break;  		case "value":  			if (cboRegion.Items.FindByValue (_region) != null) {  				cboRegion.Items.FindByValue (_region).Selected = true;  			}  			break;  		}  	} else {  		txtRegion.Text = _region;  	}  	txtStreet.Text = _street;  	txtUnit.Text = _unit;  	txtCity.Text = _city;  	txtPostal.Text = _postal;  	txtTelephone.Text = _telephone;  	txtCell.Text = _cell;  	txtFax.Text = _fax;  	divStreet.Visible = _showStreet;  	divUnit.Visible = _showUnit;  	divCity.Visible = _showCity;  	divCountry.Visible = _showCountry;  	divRegion.Visible = _showRegion;  	divPostal.Visible = _showPostal;  	divTelephone.Visible = _showTelephone;  	divCell.Visible = _showCell;  	divFax.Visible = _showFax;  	if (TabPermissionController.CanAdminPage ()) {  		chkStreet.Visible = true;  		chkCity.Visible = true;  		chkCountry.Visible = true;  		chkRegion.Visible = true;  		chkPostal.Visible = true;  		chkTelephone.Visible = true;  		chkCell.Visible = true;  		chkFax.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_moduleId);  	ViewState ["LabelColumnWidth"] = _labelColumnWidth;  	ViewState ["ControlColumnWidth"] = _controlColumnWidth;  	ShowRequiredFields ();  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: if (!Page.IsPostBack) {  	txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  	txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  	txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  	cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  	cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  	txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  	txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  	txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  	txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  	txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  	//<tam:note modified to test Lists  	//Dim objRegionalController As New RegionalController  	//cboCountry.DataSource = objRegionalController.GetCountries  	//<this test using method 2: get empty collection then get each entry list on demand & store into cache  	var ctlEntry = new ListController ();  	var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  	cboCountry.DataSource = entryCollection;  	cboCountry.DataBind ();  	cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  	switch (_countryData.ToLower ()) {  	case "text":  		if (String.IsNullOrEmpty (_country)) {  			cboCountry.SelectedIndex = 0;  		} else {  			if (cboCountry.Items.FindByText (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByText (_country).Selected = true;  			}  		}  		break;  	case "value":  		if (cboCountry.Items.FindByValue (_country) != null) {  			cboCountry.ClearSelection ();  			cboCountry.Items.FindByValue (_country).Selected = true;  		}  		break;  	}  	Localize ();  	if (cboRegion.Visible) {  		switch (_regionData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_region)) {  				cboRegion.SelectedIndex = 0;  			} else {  				if (cboRegion.Items.FindByText (_region) != null) {  					cboRegion.Items.FindByText (_region).Selected = true;  				}  			}  			break;  		case "value":  			if (cboRegion.Items.FindByValue (_region) != null) {  				cboRegion.Items.FindByValue (_region).Selected = true;  			}  			break;  		}  	} else {  		txtRegion.Text = _region;  	}  	txtStreet.Text = _street;  	txtUnit.Text = _unit;  	txtCity.Text = _city;  	txtPostal.Text = _postal;  	txtTelephone.Text = _telephone;  	txtCell.Text = _cell;  	txtFax.Text = _fax;  	divStreet.Visible = _showStreet;  	divUnit.Visible = _showUnit;  	divCity.Visible = _showCity;  	divCountry.Visible = _showCountry;  	divRegion.Visible = _showRegion;  	divPostal.Visible = _showPostal;  	divTelephone.Visible = _showTelephone;  	divCell.Visible = _showCell;  	divFax.Visible = _showFax;  	if (TabPermissionController.CanAdminPage ()) {  		chkStreet.Visible = true;  		chkCity.Visible = true;  		chkCountry.Visible = true;  		chkRegion.Visible = true;  		chkPostal.Visible = true;  		chkTelephone.Visible = true;  		chkCell.Visible = true;  		chkFax.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_moduleId);  	ViewState ["LabelColumnWidth"] = _labelColumnWidth;  	ViewState ["ControlColumnWidth"] = _controlColumnWidth;  	ShowRequiredFields ();  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: if (!Page.IsPostBack) {  	txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  	txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  	txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  	cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  	cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  	txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  	txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  	txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  	txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  	txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  	//<tam:note modified to test Lists  	//Dim objRegionalController As New RegionalController  	//cboCountry.DataSource = objRegionalController.GetCountries  	//<this test using method 2: get empty collection then get each entry list on demand & store into cache  	var ctlEntry = new ListController ();  	var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  	cboCountry.DataSource = entryCollection;  	cboCountry.DataBind ();  	cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  	switch (_countryData.ToLower ()) {  	case "text":  		if (String.IsNullOrEmpty (_country)) {  			cboCountry.SelectedIndex = 0;  		} else {  			if (cboCountry.Items.FindByText (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByText (_country).Selected = true;  			}  		}  		break;  	case "value":  		if (cboCountry.Items.FindByValue (_country) != null) {  			cboCountry.ClearSelection ();  			cboCountry.Items.FindByValue (_country).Selected = true;  		}  		break;  	}  	Localize ();  	if (cboRegion.Visible) {  		switch (_regionData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_region)) {  				cboRegion.SelectedIndex = 0;  			} else {  				if (cboRegion.Items.FindByText (_region) != null) {  					cboRegion.Items.FindByText (_region).Selected = true;  				}  			}  			break;  		case "value":  			if (cboRegion.Items.FindByValue (_region) != null) {  				cboRegion.Items.FindByValue (_region).Selected = true;  			}  			break;  		}  	} else {  		txtRegion.Text = _region;  	}  	txtStreet.Text = _street;  	txtUnit.Text = _unit;  	txtCity.Text = _city;  	txtPostal.Text = _postal;  	txtTelephone.Text = _telephone;  	txtCell.Text = _cell;  	txtFax.Text = _fax;  	divStreet.Visible = _showStreet;  	divUnit.Visible = _showUnit;  	divCity.Visible = _showCity;  	divCountry.Visible = _showCountry;  	divRegion.Visible = _showRegion;  	divPostal.Visible = _showPostal;  	divTelephone.Visible = _showTelephone;  	divCell.Visible = _showCell;  	divFax.Visible = _showFax;  	if (TabPermissionController.CanAdminPage ()) {  		chkStreet.Visible = true;  		chkCity.Visible = true;  		chkCountry.Visible = true;  		chkRegion.Visible = true;  		chkPostal.Visible = true;  		chkTelephone.Visible = true;  		chkCell.Visible = true;  		chkFax.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_moduleId);  	ViewState ["LabelColumnWidth"] = _labelColumnWidth;  	ViewState ["ControlColumnWidth"] = _controlColumnWidth;  	ShowRequiredFields ();  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: if (!Page.IsPostBack) {  	txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  	txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  	txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  	cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  	cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  	txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  	txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  	txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  	txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  	txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  	//<tam:note modified to test Lists  	//Dim objRegionalController As New RegionalController  	//cboCountry.DataSource = objRegionalController.GetCountries  	//<this test using method 2: get empty collection then get each entry list on demand & store into cache  	var ctlEntry = new ListController ();  	var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  	cboCountry.DataSource = entryCollection;  	cboCountry.DataBind ();  	cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  	switch (_countryData.ToLower ()) {  	case "text":  		if (String.IsNullOrEmpty (_country)) {  			cboCountry.SelectedIndex = 0;  		} else {  			if (cboCountry.Items.FindByText (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByText (_country).Selected = true;  			}  		}  		break;  	case "value":  		if (cboCountry.Items.FindByValue (_country) != null) {  			cboCountry.ClearSelection ();  			cboCountry.Items.FindByValue (_country).Selected = true;  		}  		break;  	}  	Localize ();  	if (cboRegion.Visible) {  		switch (_regionData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_region)) {  				cboRegion.SelectedIndex = 0;  			} else {  				if (cboRegion.Items.FindByText (_region) != null) {  					cboRegion.Items.FindByText (_region).Selected = true;  				}  			}  			break;  		case "value":  			if (cboRegion.Items.FindByValue (_region) != null) {  				cboRegion.Items.FindByValue (_region).Selected = true;  			}  			break;  		}  	} else {  		txtRegion.Text = _region;  	}  	txtStreet.Text = _street;  	txtUnit.Text = _unit;  	txtCity.Text = _city;  	txtPostal.Text = _postal;  	txtTelephone.Text = _telephone;  	txtCell.Text = _cell;  	txtFax.Text = _fax;  	divStreet.Visible = _showStreet;  	divUnit.Visible = _showUnit;  	divCity.Visible = _showCity;  	divCountry.Visible = _showCountry;  	divRegion.Visible = _showRegion;  	divPostal.Visible = _showPostal;  	divTelephone.Visible = _showTelephone;  	divCell.Visible = _showCell;  	divFax.Visible = _showFax;  	if (TabPermissionController.CanAdminPage ()) {  		chkStreet.Visible = true;  		chkCity.Visible = true;  		chkCountry.Visible = true;  		chkRegion.Visible = true;  		chkPostal.Visible = true;  		chkTelephone.Visible = true;  		chkCell.Visible = true;  		chkFax.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_moduleId);  	ViewState ["LabelColumnWidth"] = _labelColumnWidth;  	ViewState ["ControlColumnWidth"] = _controlColumnWidth;  	ShowRequiredFields ();  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: if (!Page.IsPostBack) {  	txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  	txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  	txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  	cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  	cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  	txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  	txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  	txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  	txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  	txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  	//<tam:note modified to test Lists  	//Dim objRegionalController As New RegionalController  	//cboCountry.DataSource = objRegionalController.GetCountries  	//<this test using method 2: get empty collection then get each entry list on demand & store into cache  	var ctlEntry = new ListController ();  	var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  	cboCountry.DataSource = entryCollection;  	cboCountry.DataBind ();  	cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  	switch (_countryData.ToLower ()) {  	case "text":  		if (String.IsNullOrEmpty (_country)) {  			cboCountry.SelectedIndex = 0;  		} else {  			if (cboCountry.Items.FindByText (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByText (_country).Selected = true;  			}  		}  		break;  	case "value":  		if (cboCountry.Items.FindByValue (_country) != null) {  			cboCountry.ClearSelection ();  			cboCountry.Items.FindByValue (_country).Selected = true;  		}  		break;  	}  	Localize ();  	if (cboRegion.Visible) {  		switch (_regionData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_region)) {  				cboRegion.SelectedIndex = 0;  			} else {  				if (cboRegion.Items.FindByText (_region) != null) {  					cboRegion.Items.FindByText (_region).Selected = true;  				}  			}  			break;  		case "value":  			if (cboRegion.Items.FindByValue (_region) != null) {  				cboRegion.Items.FindByValue (_region).Selected = true;  			}  			break;  		}  	} else {  		txtRegion.Text = _region;  	}  	txtStreet.Text = _street;  	txtUnit.Text = _unit;  	txtCity.Text = _city;  	txtPostal.Text = _postal;  	txtTelephone.Text = _telephone;  	txtCell.Text = _cell;  	txtFax.Text = _fax;  	divStreet.Visible = _showStreet;  	divUnit.Visible = _showUnit;  	divCity.Visible = _showCity;  	divCountry.Visible = _showCountry;  	divRegion.Visible = _showRegion;  	divPostal.Visible = _showPostal;  	divTelephone.Visible = _showTelephone;  	divCell.Visible = _showCell;  	divFax.Visible = _showFax;  	if (TabPermissionController.CanAdminPage ()) {  		chkStreet.Visible = true;  		chkCity.Visible = true;  		chkCountry.Visible = true;  		chkRegion.Visible = true;  		chkPostal.Visible = true;  		chkTelephone.Visible = true;  		chkCell.Visible = true;  		chkFax.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_moduleId);  	ViewState ["LabelColumnWidth"] = _labelColumnWidth;  	ViewState ["ControlColumnWidth"] = _controlColumnWidth;  	ShowRequiredFields ();  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: if (!Page.IsPostBack) {  	txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  	txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  	txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  	cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  	cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  	txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  	txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  	txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  	txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  	txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  	//<tam:note modified to test Lists  	//Dim objRegionalController As New RegionalController  	//cboCountry.DataSource = objRegionalController.GetCountries  	//<this test using method 2: get empty collection then get each entry list on demand & store into cache  	var ctlEntry = new ListController ();  	var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  	cboCountry.DataSource = entryCollection;  	cboCountry.DataBind ();  	cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  	switch (_countryData.ToLower ()) {  	case "text":  		if (String.IsNullOrEmpty (_country)) {  			cboCountry.SelectedIndex = 0;  		} else {  			if (cboCountry.Items.FindByText (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByText (_country).Selected = true;  			}  		}  		break;  	case "value":  		if (cboCountry.Items.FindByValue (_country) != null) {  			cboCountry.ClearSelection ();  			cboCountry.Items.FindByValue (_country).Selected = true;  		}  		break;  	}  	Localize ();  	if (cboRegion.Visible) {  		switch (_regionData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_region)) {  				cboRegion.SelectedIndex = 0;  			} else {  				if (cboRegion.Items.FindByText (_region) != null) {  					cboRegion.Items.FindByText (_region).Selected = true;  				}  			}  			break;  		case "value":  			if (cboRegion.Items.FindByValue (_region) != null) {  				cboRegion.Items.FindByValue (_region).Selected = true;  			}  			break;  		}  	} else {  		txtRegion.Text = _region;  	}  	txtStreet.Text = _street;  	txtUnit.Text = _unit;  	txtCity.Text = _city;  	txtPostal.Text = _postal;  	txtTelephone.Text = _telephone;  	txtCell.Text = _cell;  	txtFax.Text = _fax;  	divStreet.Visible = _showStreet;  	divUnit.Visible = _showUnit;  	divCity.Visible = _showCity;  	divCountry.Visible = _showCountry;  	divRegion.Visible = _showRegion;  	divPostal.Visible = _showPostal;  	divTelephone.Visible = _showTelephone;  	divCell.Visible = _showCell;  	divFax.Visible = _showFax;  	if (TabPermissionController.CanAdminPage ()) {  		chkStreet.Visible = true;  		chkCity.Visible = true;  		chkCountry.Visible = true;  		chkRegion.Visible = true;  		chkPostal.Visible = true;  		chkTelephone.Visible = true;  		chkCell.Visible = true;  		chkFax.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_moduleId);  	ViewState ["LabelColumnWidth"] = _labelColumnWidth;  	ViewState ["ControlColumnWidth"] = _controlColumnWidth;  	ShowRequiredFields ();  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: if (!Page.IsPostBack) {  	txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  	txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  	txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  	cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  	cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  	txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  	txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  	txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  	txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  	txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  	//<tam:note modified to test Lists  	//Dim objRegionalController As New RegionalController  	//cboCountry.DataSource = objRegionalController.GetCountries  	//<this test using method 2: get empty collection then get each entry list on demand & store into cache  	var ctlEntry = new ListController ();  	var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  	cboCountry.DataSource = entryCollection;  	cboCountry.DataBind ();  	cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  	switch (_countryData.ToLower ()) {  	case "text":  		if (String.IsNullOrEmpty (_country)) {  			cboCountry.SelectedIndex = 0;  		} else {  			if (cboCountry.Items.FindByText (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByText (_country).Selected = true;  			}  		}  		break;  	case "value":  		if (cboCountry.Items.FindByValue (_country) != null) {  			cboCountry.ClearSelection ();  			cboCountry.Items.FindByValue (_country).Selected = true;  		}  		break;  	}  	Localize ();  	if (cboRegion.Visible) {  		switch (_regionData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_region)) {  				cboRegion.SelectedIndex = 0;  			} else {  				if (cboRegion.Items.FindByText (_region) != null) {  					cboRegion.Items.FindByText (_region).Selected = true;  				}  			}  			break;  		case "value":  			if (cboRegion.Items.FindByValue (_region) != null) {  				cboRegion.Items.FindByValue (_region).Selected = true;  			}  			break;  		}  	} else {  		txtRegion.Text = _region;  	}  	txtStreet.Text = _street;  	txtUnit.Text = _unit;  	txtCity.Text = _city;  	txtPostal.Text = _postal;  	txtTelephone.Text = _telephone;  	txtCell.Text = _cell;  	txtFax.Text = _fax;  	divStreet.Visible = _showStreet;  	divUnit.Visible = _showUnit;  	divCity.Visible = _showCity;  	divCountry.Visible = _showCountry;  	divRegion.Visible = _showRegion;  	divPostal.Visible = _showPostal;  	divTelephone.Visible = _showTelephone;  	divCell.Visible = _showCell;  	divFax.Visible = _showFax;  	if (TabPermissionController.CanAdminPage ()) {  		chkStreet.Visible = true;  		chkCity.Visible = true;  		chkCountry.Visible = true;  		chkRegion.Visible = true;  		chkPostal.Visible = true;  		chkTelephone.Visible = true;  		chkCell.Visible = true;  		chkFax.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_moduleId);  	ViewState ["LabelColumnWidth"] = _labelColumnWidth;  	ViewState ["ControlColumnWidth"] = _controlColumnWidth;  	ShowRequiredFields ();  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: if (!Page.IsPostBack) {  	txtStreet.TabIndex = Convert.ToInt16 (StartTabIndex);  	txtUnit.TabIndex = Convert.ToInt16 (StartTabIndex + 1);  	txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  	cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  	cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  	txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  	txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  	txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  	txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  	txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  	//<tam:note modified to test Lists  	//Dim objRegionalController As New RegionalController  	//cboCountry.DataSource = objRegionalController.GetCountries  	//<this test using method 2: get empty collection then get each entry list on demand & store into cache  	var ctlEntry = new ListController ();  	var entryCollection = ctlEntry.GetListEntryInfoItems ("Country");  	cboCountry.DataSource = entryCollection;  	cboCountry.DataBind ();  	cboCountry.Items.Insert (0' new ListItem ("<" + Localization.GetString ("Not_Specified"' Localization.SharedResourceFile) + ">"' ""));  	switch (_countryData.ToLower ()) {  	case "text":  		if (String.IsNullOrEmpty (_country)) {  			cboCountry.SelectedIndex = 0;  		} else {  			if (cboCountry.Items.FindByText (_country) != null) {  				cboCountry.ClearSelection ();  				cboCountry.Items.FindByText (_country).Selected = true;  			}  		}  		break;  	case "value":  		if (cboCountry.Items.FindByValue (_country) != null) {  			cboCountry.ClearSelection ();  			cboCountry.Items.FindByValue (_country).Selected = true;  		}  		break;  	}  	Localize ();  	if (cboRegion.Visible) {  		switch (_regionData.ToLower ()) {  		case "text":  			if (String.IsNullOrEmpty (_region)) {  				cboRegion.SelectedIndex = 0;  			} else {  				if (cboRegion.Items.FindByText (_region) != null) {  					cboRegion.Items.FindByText (_region).Selected = true;  				}  			}  			break;  		case "value":  			if (cboRegion.Items.FindByValue (_region) != null) {  				cboRegion.Items.FindByValue (_region).Selected = true;  			}  			break;  		}  	} else {  		txtRegion.Text = _region;  	}  	txtStreet.Text = _street;  	txtUnit.Text = _unit;  	txtCity.Text = _city;  	txtPostal.Text = _postal;  	txtTelephone.Text = _telephone;  	txtCell.Text = _cell;  	txtFax.Text = _fax;  	divStreet.Visible = _showStreet;  	divUnit.Visible = _showUnit;  	divCity.Visible = _showCity;  	divCountry.Visible = _showCountry;  	divRegion.Visible = _showRegion;  	divPostal.Visible = _showPostal;  	divTelephone.Visible = _showTelephone;  	divCell.Visible = _showCell;  	divFax.Visible = _showFax;  	if (TabPermissionController.CanAdminPage ()) {  		chkStreet.Visible = true;  		chkCity.Visible = true;  		chkCountry.Visible = true;  		chkRegion.Visible = true;  		chkPostal.Visible = true;  		chkTelephone.Visible = true;  		chkCell.Visible = true;  		chkFax.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_moduleId);  	ViewState ["LabelColumnWidth"] = _labelColumnWidth;  	ViewState ["ControlColumnWidth"] = _controlColumnWidth;  	ShowRequiredFields ();  }  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: txtCity.TabIndex = Convert.ToInt16 (StartTabIndex + 2);  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: cboCountry.TabIndex = Convert.ToInt16 (StartTabIndex + 3);  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: cboRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 4);  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: txtRegion.TabIndex = Convert.ToInt16 (StartTabIndex + 5);  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: txtPostal.TabIndex = Convert.ToInt16 (StartTabIndex + 6);  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: txtTelephone.TabIndex = Convert.ToInt16 (StartTabIndex + 7);  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: txtCell.TabIndex = Convert.ToInt16 (StartTabIndex + 8);  
Magic Number,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following statement contains a magic number: txtFax.TabIndex = Convert.ToInt16 (StartTabIndex + 9);  
Magic Number,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoChangeURL,The following statement contains a magic number: if (!String.IsNullOrEmpty (_Url)) {  	var objUrls = new UrlController ();  	string TrackingUrl = _Url;  	_Urltype = Globals.GetURLType (_Url).ToString ("g").Substring (0' 1);  	if (_Urltype == "U" && (_Url.StartsWith ("~/" + PortalSettings.DefaultIconLocation' StringComparison.InvariantCultureIgnoreCase))) {  		_Urltype = "I";  	}  	ViewState ["UrlType"] = _Urltype;  	if (_Urltype == "F") {  		if (_Url.ToLower ().StartsWith ("fileid=")) {  			TrackingUrl = _Url;  			var objFile = FileManager.Instance.GetFile (int.Parse (_Url.Substring (7)));  			if (objFile != null) {  				_Url = objFile.Folder + objFile.FileName;  			}  		} else {  			//to handle legacy scenarios before the introduction of the FileServerHandler  			var fileName = Path.GetFileName (_Url);  			var folderPath = _Url.Substring (0' _Url.LastIndexOf (fileName));  			var folder = FolderManager.Instance.GetFolder (_objPortal.PortalID' folderPath);  			var fileId = -1;  			if (folder != null) {  				var file = FileManager.Instance.GetFile (folder' fileName);  				if (file != null) {  					fileId = file.FileId;  				}  			}  			TrackingUrl = "FileID=" + fileId.ToString ();  		}  	}  	if (_Urltype == "M") {  		if (_Url.ToLower ().StartsWith ("userid=")) {  			UserInfo objUser = UserController.GetUserById (_objPortal.PortalID' int.Parse (_Url.Substring (7)));  			if (objUser != null) {  				_Url = objUser.Username;  			}  		}  	}  	UrlTrackingInfo objUrlTracking = objUrls.GetUrlTracking (_objPortal.PortalID' TrackingUrl' ModuleID);  	if (objUrlTracking != null) {  		chkNewWindow.Checked = objUrlTracking.NewWindow;  		chkTrack.Checked = objUrlTracking.TrackClicks;  		chkLog.Checked = objUrlTracking.LogActivity;  	} else//the url does not exist in the tracking table  	 {  		chkTrack.Checked = false;  		chkLog.Checked = false;  	}  	ViewState ["Url"] = _Url;  } else {  	if (!String.IsNullOrEmpty (_Urltype)) {  		optType.ClearSelection ();  		if (optType.Items.FindByValue (_Urltype) != null) {  			optType.Items.FindByValue (_Urltype).Selected = true;  		} else {  			optType.Items [0].Selected = true;  		}  	} else {  		if (optType.Items.Count > 0) {  			optType.ClearSelection ();  			optType.Items [0].Selected = true;  		}  	}  	chkNewWindow.Checked = false;  	//Need check  	chkTrack.Checked = false;  	//Need check  	chkLog.Checked = false;  	//Need check  }  
Magic Number,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoChangeURL,The following statement contains a magic number: if (!String.IsNullOrEmpty (_Url)) {  	var objUrls = new UrlController ();  	string TrackingUrl = _Url;  	_Urltype = Globals.GetURLType (_Url).ToString ("g").Substring (0' 1);  	if (_Urltype == "U" && (_Url.StartsWith ("~/" + PortalSettings.DefaultIconLocation' StringComparison.InvariantCultureIgnoreCase))) {  		_Urltype = "I";  	}  	ViewState ["UrlType"] = _Urltype;  	if (_Urltype == "F") {  		if (_Url.ToLower ().StartsWith ("fileid=")) {  			TrackingUrl = _Url;  			var objFile = FileManager.Instance.GetFile (int.Parse (_Url.Substring (7)));  			if (objFile != null) {  				_Url = objFile.Folder + objFile.FileName;  			}  		} else {  			//to handle legacy scenarios before the introduction of the FileServerHandler  			var fileName = Path.GetFileName (_Url);  			var folderPath = _Url.Substring (0' _Url.LastIndexOf (fileName));  			var folder = FolderManager.Instance.GetFolder (_objPortal.PortalID' folderPath);  			var fileId = -1;  			if (folder != null) {  				var file = FileManager.Instance.GetFile (folder' fileName);  				if (file != null) {  					fileId = file.FileId;  				}  			}  			TrackingUrl = "FileID=" + fileId.ToString ();  		}  	}  	if (_Urltype == "M") {  		if (_Url.ToLower ().StartsWith ("userid=")) {  			UserInfo objUser = UserController.GetUserById (_objPortal.PortalID' int.Parse (_Url.Substring (7)));  			if (objUser != null) {  				_Url = objUser.Username;  			}  		}  	}  	UrlTrackingInfo objUrlTracking = objUrls.GetUrlTracking (_objPortal.PortalID' TrackingUrl' ModuleID);  	if (objUrlTracking != null) {  		chkNewWindow.Checked = objUrlTracking.NewWindow;  		chkTrack.Checked = objUrlTracking.TrackClicks;  		chkLog.Checked = objUrlTracking.LogActivity;  	} else//the url does not exist in the tracking table  	 {  		chkTrack.Checked = false;  		chkLog.Checked = false;  	}  	ViewState ["Url"] = _Url;  } else {  	if (!String.IsNullOrEmpty (_Urltype)) {  		optType.ClearSelection ();  		if (optType.Items.FindByValue (_Urltype) != null) {  			optType.Items.FindByValue (_Urltype).Selected = true;  		} else {  			optType.Items [0].Selected = true;  		}  	} else {  		if (optType.Items.Count > 0) {  			optType.ClearSelection ();  			optType.Items [0].Selected = true;  		}  	}  	chkNewWindow.Checked = false;  	//Need check  	chkTrack.Checked = false;  	//Need check  	chkLog.Checked = false;  	//Need check  }  
Magic Number,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoChangeURL,The following statement contains a magic number: if (_Urltype == "F") {  	if (_Url.ToLower ().StartsWith ("fileid=")) {  		TrackingUrl = _Url;  		var objFile = FileManager.Instance.GetFile (int.Parse (_Url.Substring (7)));  		if (objFile != null) {  			_Url = objFile.Folder + objFile.FileName;  		}  	} else {  		//to handle legacy scenarios before the introduction of the FileServerHandler  		var fileName = Path.GetFileName (_Url);  		var folderPath = _Url.Substring (0' _Url.LastIndexOf (fileName));  		var folder = FolderManager.Instance.GetFolder (_objPortal.PortalID' folderPath);  		var fileId = -1;  		if (folder != null) {  			var file = FileManager.Instance.GetFile (folder' fileName);  			if (file != null) {  				fileId = file.FileId;  			}  		}  		TrackingUrl = "FileID=" + fileId.ToString ();  	}  }  
Magic Number,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoChangeURL,The following statement contains a magic number: if (_Url.ToLower ().StartsWith ("fileid=")) {  	TrackingUrl = _Url;  	var objFile = FileManager.Instance.GetFile (int.Parse (_Url.Substring (7)));  	if (objFile != null) {  		_Url = objFile.Folder + objFile.FileName;  	}  } else {  	//to handle legacy scenarios before the introduction of the FileServerHandler  	var fileName = Path.GetFileName (_Url);  	var folderPath = _Url.Substring (0' _Url.LastIndexOf (fileName));  	var folder = FolderManager.Instance.GetFolder (_objPortal.PortalID' folderPath);  	var fileId = -1;  	if (folder != null) {  		var file = FileManager.Instance.GetFile (folder' fileName);  		if (file != null) {  			fileId = file.FileId;  		}  	}  	TrackingUrl = "FileID=" + fileId.ToString ();  }  
Magic Number,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoChangeURL,The following statement contains a magic number: if (_Urltype == "M") {  	if (_Url.ToLower ().StartsWith ("userid=")) {  		UserInfo objUser = UserController.GetUserById (_objPortal.PortalID' int.Parse (_Url.Substring (7)));  		if (objUser != null) {  			_Url = objUser.Username;  		}  	}  }  
Magic Number,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoChangeURL,The following statement contains a magic number: if (_Url.ToLower ().StartsWith ("userid=")) {  	UserInfo objUser = UserController.GetUserById (_objPortal.PortalID' int.Parse (_Url.Substring (7)));  	if (objUser != null) {  		_Url = objUser.Username;  	}  }  
Magic Number,DotNetNuke.UI.UserControls,URLTrackingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLTrackingControl.cs,OnLoad,The following statement contains a magic number: try {  	//this needs to execute always to the client script code is registred in InvokePopupCal  	cmdStartCalendar.NavigateUrl = Calendar.InvokePopupCal (txtStartDate);  	cmdEndCalendar.NavigateUrl = Calendar.InvokePopupCal (txtEndDate);  	if (!Page.IsPostBack) {  		if (!String.IsNullOrEmpty (_URL)) {  			lblLogURL.Text = URL;  			//saved for loading Log grid  			TabType URLType = Globals.GetURLType (_URL);  			if (URLType == TabType.File && _URL.ToLower ().StartsWith ("fileid=") == false) {  				//to handle legacy scenarios before the introduction of the FileServerHandler  				var fileName = Path.GetFileName (_URL);  				var folderPath = _URL.Substring (0' _URL.LastIndexOf (fileName));  				var folder = FolderManager.Instance.GetFolder (PortalSettings.PortalId' folderPath);  				var file = FileManager.Instance.GetFile (folder' fileName);  				lblLogURL.Text = "FileID=" + file.FileId;  			}  			var objUrls = new UrlController ();  			UrlTrackingInfo objUrlTracking = objUrls.GetUrlTracking (PortalSettings.PortalId' lblLogURL.Text' ModuleID);  			if (objUrlTracking != null) {  				if (String.IsNullOrEmpty (_FormattedURL)) {  					lblURL.Text = Globals.LinkClick (URL' PortalSettings.ActiveTab.TabID' ModuleID' false);  					if (!lblURL.Text.StartsWith ("http") && !lblURL.Text.StartsWith ("mailto")) {  						lblURL.Text = Globals.AddHTTP (Request.Url.Host) + lblURL.Text;  					}  				} else {  					lblURL.Text = _FormattedURL;  				}  				lblCreatedDate.Text = objUrlTracking.CreatedDate.ToString ();  				if (objUrlTracking.TrackClicks) {  					pnlTrack.Visible = true;  					if (String.IsNullOrEmpty (_TrackingURL)) {  						if (!URL.StartsWith ("http")) {  							lblTrackingURL.Text = Globals.AddHTTP (Request.Url.Host);  						}  						lblTrackingURL.Text += Globals.LinkClick (URL' PortalSettings.ActiveTab.TabID' ModuleID' objUrlTracking.TrackClicks);  					} else {  						lblTrackingURL.Text = _TrackingURL;  					}  					lblClicks.Text = objUrlTracking.Clicks.ToString ();  					if (!Null.IsNull (objUrlTracking.LastClick)) {  						lblLastClick.Text = objUrlTracking.LastClick.ToString ();  					}  				}  				if (objUrlTracking.LogActivity) {  					pnlLog.Visible = true;  					txtStartDate.Text = DateTime.Today.AddDays (-6).ToShortDateString ();  					txtEndDate.Text = DateTime.Today.AddDays (1).ToShortDateString ();  				}  			}  		} else {  			Visible = false;  		}  	}  } catch (Exception exc)//Module failed to load   {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,URLTrackingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLTrackingControl.cs,OnLoad,The following statement contains a magic number: if (!Page.IsPostBack) {  	if (!String.IsNullOrEmpty (_URL)) {  		lblLogURL.Text = URL;  		//saved for loading Log grid  		TabType URLType = Globals.GetURLType (_URL);  		if (URLType == TabType.File && _URL.ToLower ().StartsWith ("fileid=") == false) {  			//to handle legacy scenarios before the introduction of the FileServerHandler  			var fileName = Path.GetFileName (_URL);  			var folderPath = _URL.Substring (0' _URL.LastIndexOf (fileName));  			var folder = FolderManager.Instance.GetFolder (PortalSettings.PortalId' folderPath);  			var file = FileManager.Instance.GetFile (folder' fileName);  			lblLogURL.Text = "FileID=" + file.FileId;  		}  		var objUrls = new UrlController ();  		UrlTrackingInfo objUrlTracking = objUrls.GetUrlTracking (PortalSettings.PortalId' lblLogURL.Text' ModuleID);  		if (objUrlTracking != null) {  			if (String.IsNullOrEmpty (_FormattedURL)) {  				lblURL.Text = Globals.LinkClick (URL' PortalSettings.ActiveTab.TabID' ModuleID' false);  				if (!lblURL.Text.StartsWith ("http") && !lblURL.Text.StartsWith ("mailto")) {  					lblURL.Text = Globals.AddHTTP (Request.Url.Host) + lblURL.Text;  				}  			} else {  				lblURL.Text = _FormattedURL;  			}  			lblCreatedDate.Text = objUrlTracking.CreatedDate.ToString ();  			if (objUrlTracking.TrackClicks) {  				pnlTrack.Visible = true;  				if (String.IsNullOrEmpty (_TrackingURL)) {  					if (!URL.StartsWith ("http")) {  						lblTrackingURL.Text = Globals.AddHTTP (Request.Url.Host);  					}  					lblTrackingURL.Text += Globals.LinkClick (URL' PortalSettings.ActiveTab.TabID' ModuleID' objUrlTracking.TrackClicks);  				} else {  					lblTrackingURL.Text = _TrackingURL;  				}  				lblClicks.Text = objUrlTracking.Clicks.ToString ();  				if (!Null.IsNull (objUrlTracking.LastClick)) {  					lblLastClick.Text = objUrlTracking.LastClick.ToString ();  				}  			}  			if (objUrlTracking.LogActivity) {  				pnlLog.Visible = true;  				txtStartDate.Text = DateTime.Today.AddDays (-6).ToShortDateString ();  				txtEndDate.Text = DateTime.Today.AddDays (1).ToShortDateString ();  			}  		}  	} else {  		Visible = false;  	}  }  
Magic Number,DotNetNuke.UI.UserControls,URLTrackingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLTrackingControl.cs,OnLoad,The following statement contains a magic number: if (!String.IsNullOrEmpty (_URL)) {  	lblLogURL.Text = URL;  	//saved for loading Log grid  	TabType URLType = Globals.GetURLType (_URL);  	if (URLType == TabType.File && _URL.ToLower ().StartsWith ("fileid=") == false) {  		//to handle legacy scenarios before the introduction of the FileServerHandler  		var fileName = Path.GetFileName (_URL);  		var folderPath = _URL.Substring (0' _URL.LastIndexOf (fileName));  		var folder = FolderManager.Instance.GetFolder (PortalSettings.PortalId' folderPath);  		var file = FileManager.Instance.GetFile (folder' fileName);  		lblLogURL.Text = "FileID=" + file.FileId;  	}  	var objUrls = new UrlController ();  	UrlTrackingInfo objUrlTracking = objUrls.GetUrlTracking (PortalSettings.PortalId' lblLogURL.Text' ModuleID);  	if (objUrlTracking != null) {  		if (String.IsNullOrEmpty (_FormattedURL)) {  			lblURL.Text = Globals.LinkClick (URL' PortalSettings.ActiveTab.TabID' ModuleID' false);  			if (!lblURL.Text.StartsWith ("http") && !lblURL.Text.StartsWith ("mailto")) {  				lblURL.Text = Globals.AddHTTP (Request.Url.Host) + lblURL.Text;  			}  		} else {  			lblURL.Text = _FormattedURL;  		}  		lblCreatedDate.Text = objUrlTracking.CreatedDate.ToString ();  		if (objUrlTracking.TrackClicks) {  			pnlTrack.Visible = true;  			if (String.IsNullOrEmpty (_TrackingURL)) {  				if (!URL.StartsWith ("http")) {  					lblTrackingURL.Text = Globals.AddHTTP (Request.Url.Host);  				}  				lblTrackingURL.Text += Globals.LinkClick (URL' PortalSettings.ActiveTab.TabID' ModuleID' objUrlTracking.TrackClicks);  			} else {  				lblTrackingURL.Text = _TrackingURL;  			}  			lblClicks.Text = objUrlTracking.Clicks.ToString ();  			if (!Null.IsNull (objUrlTracking.LastClick)) {  				lblLastClick.Text = objUrlTracking.LastClick.ToString ();  			}  		}  		if (objUrlTracking.LogActivity) {  			pnlLog.Visible = true;  			txtStartDate.Text = DateTime.Today.AddDays (-6).ToShortDateString ();  			txtEndDate.Text = DateTime.Today.AddDays (1).ToShortDateString ();  		}  	}  } else {  	Visible = false;  }  
Magic Number,DotNetNuke.UI.UserControls,URLTrackingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLTrackingControl.cs,OnLoad,The following statement contains a magic number: if (objUrlTracking != null) {  	if (String.IsNullOrEmpty (_FormattedURL)) {  		lblURL.Text = Globals.LinkClick (URL' PortalSettings.ActiveTab.TabID' ModuleID' false);  		if (!lblURL.Text.StartsWith ("http") && !lblURL.Text.StartsWith ("mailto")) {  			lblURL.Text = Globals.AddHTTP (Request.Url.Host) + lblURL.Text;  		}  	} else {  		lblURL.Text = _FormattedURL;  	}  	lblCreatedDate.Text = objUrlTracking.CreatedDate.ToString ();  	if (objUrlTracking.TrackClicks) {  		pnlTrack.Visible = true;  		if (String.IsNullOrEmpty (_TrackingURL)) {  			if (!URL.StartsWith ("http")) {  				lblTrackingURL.Text = Globals.AddHTTP (Request.Url.Host);  			}  			lblTrackingURL.Text += Globals.LinkClick (URL' PortalSettings.ActiveTab.TabID' ModuleID' objUrlTracking.TrackClicks);  		} else {  			lblTrackingURL.Text = _TrackingURL;  		}  		lblClicks.Text = objUrlTracking.Clicks.ToString ();  		if (!Null.IsNull (objUrlTracking.LastClick)) {  			lblLastClick.Text = objUrlTracking.LastClick.ToString ();  		}  	}  	if (objUrlTracking.LogActivity) {  		pnlLog.Visible = true;  		txtStartDate.Text = DateTime.Today.AddDays (-6).ToShortDateString ();  		txtEndDate.Text = DateTime.Today.AddDays (1).ToShortDateString ();  	}  }  
Magic Number,DotNetNuke.UI.UserControls,URLTrackingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLTrackingControl.cs,OnLoad,The following statement contains a magic number: if (objUrlTracking.LogActivity) {  	pnlLog.Visible = true;  	txtStartDate.Text = DateTime.Today.AddDays (-6).ToShortDateString ();  	txtEndDate.Text = DateTime.Today.AddDays (1).ToShortDateString ();  }  
Magic Number,DotNetNuke.UI.UserControls,URLTrackingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLTrackingControl.cs,OnLoad,The following statement contains a magic number: txtStartDate.Text = DateTime.Today.AddDays (-6).ToShortDateString ();  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: try {  	if (Page.IsPostBack == false) {  		txtFirstName.TabIndex = Convert.ToInt16 (_StartTabIndex);  		txtLastName.TabIndex = Convert.ToInt16 (_StartTabIndex + 1);  		txtUsername.TabIndex = Convert.ToInt16 (_StartTabIndex + 2);  		txtPassword.TabIndex = Convert.ToInt16 (_StartTabIndex + 3);  		txtConfirm.TabIndex = Convert.ToInt16 (_StartTabIndex + 4);  		txtEmail.TabIndex = Convert.ToInt16 (_StartTabIndex + 5);  		txtWebsite.TabIndex = Convert.ToInt16 (_StartTabIndex + 6);  		txtIM.TabIndex = Convert.ToInt16 (_StartTabIndex + 7);  		txtFirstName.Text = _FirstName;  		txtLastName.Text = _LastName;  		txtUsername.Text = _UserName;  		lblUsername.Text = _UserName;  		txtPassword.Text = _Password;  		txtConfirm.Text = _Confirm;  		txtEmail.Text = _Email;  		txtWebsite.Text = _Website;  		txtIM.Text = _IM;  		if (!String.IsNullOrEmpty (_ControlColumnWidth)) {  			txtFirstName.Width = Unit.Parse (_ControlColumnWidth);  			txtLastName.Width = Unit.Parse (_ControlColumnWidth);  			txtUsername.Width = Unit.Parse (_ControlColumnWidth);  			txtPassword.Width = Unit.Parse (_ControlColumnWidth);  			txtConfirm.Width = Unit.Parse (_ControlColumnWidth);  			txtEmail.Width = Unit.Parse (_ControlColumnWidth);  			txtWebsite.Width = Unit.Parse (_ControlColumnWidth);  			txtIM.Width = Unit.Parse (_ControlColumnWidth);  		}  		if (!_ShowPassword) {  			valPassword.Enabled = false;  			valConfirm1.Enabled = false;  			valConfirm2.Enabled = false;  			PasswordRow.Visible = false;  			ConfirmPasswordRow.Visible = false;  			txtUsername.Visible = false;  			valUsername.Enabled = false;  			lblUsername.Visible = true;  			lblUsernameAsterisk.Visible = false;  		} else {  			txtUsername.Visible = true;  			valUsername.Enabled = true;  			lblUsername.Visible = false;  			lblUsernameAsterisk.Visible = true;  			valPassword.Enabled = true;  			valConfirm1.Enabled = true;  			valConfirm2.Enabled = true;  			PasswordRow.Visible = true;  			ConfirmPasswordRow.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_ModuleId);  		ViewState ["LabelColumnWidth"] = _LabelColumnWidth;  		ViewState ["ControlColumnWidth"] = _ControlColumnWidth;  	}  	txtPassword.Attributes.Add ("value"' txtPassword.Text);  	txtConfirm.Attributes.Add ("value"' txtConfirm.Text);  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: try {  	if (Page.IsPostBack == false) {  		txtFirstName.TabIndex = Convert.ToInt16 (_StartTabIndex);  		txtLastName.TabIndex = Convert.ToInt16 (_StartTabIndex + 1);  		txtUsername.TabIndex = Convert.ToInt16 (_StartTabIndex + 2);  		txtPassword.TabIndex = Convert.ToInt16 (_StartTabIndex + 3);  		txtConfirm.TabIndex = Convert.ToInt16 (_StartTabIndex + 4);  		txtEmail.TabIndex = Convert.ToInt16 (_StartTabIndex + 5);  		txtWebsite.TabIndex = Convert.ToInt16 (_StartTabIndex + 6);  		txtIM.TabIndex = Convert.ToInt16 (_StartTabIndex + 7);  		txtFirstName.Text = _FirstName;  		txtLastName.Text = _LastName;  		txtUsername.Text = _UserName;  		lblUsername.Text = _UserName;  		txtPassword.Text = _Password;  		txtConfirm.Text = _Confirm;  		txtEmail.Text = _Email;  		txtWebsite.Text = _Website;  		txtIM.Text = _IM;  		if (!String.IsNullOrEmpty (_ControlColumnWidth)) {  			txtFirstName.Width = Unit.Parse (_ControlColumnWidth);  			txtLastName.Width = Unit.Parse (_ControlColumnWidth);  			txtUsername.Width = Unit.Parse (_ControlColumnWidth);  			txtPassword.Width = Unit.Parse (_ControlColumnWidth);  			txtConfirm.Width = Unit.Parse (_ControlColumnWidth);  			txtEmail.Width = Unit.Parse (_ControlColumnWidth);  			txtWebsite.Width = Unit.Parse (_ControlColumnWidth);  			txtIM.Width = Unit.Parse (_ControlColumnWidth);  		}  		if (!_ShowPassword) {  			valPassword.Enabled = false;  			valConfirm1.Enabled = false;  			valConfirm2.Enabled = false;  			PasswordRow.Visible = false;  			ConfirmPasswordRow.Visible = false;  			txtUsername.Visible = false;  			valUsername.Enabled = false;  			lblUsername.Visible = true;  			lblUsernameAsterisk.Visible = false;  		} else {  			txtUsername.Visible = true;  			valUsername.Enabled = true;  			lblUsername.Visible = false;  			lblUsernameAsterisk.Visible = true;  			valPassword.Enabled = true;  			valConfirm1.Enabled = true;  			valConfirm2.Enabled = true;  			PasswordRow.Visible = true;  			ConfirmPasswordRow.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_ModuleId);  		ViewState ["LabelColumnWidth"] = _LabelColumnWidth;  		ViewState ["ControlColumnWidth"] = _ControlColumnWidth;  	}  	txtPassword.Attributes.Add ("value"' txtPassword.Text);  	txtConfirm.Attributes.Add ("value"' txtConfirm.Text);  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: try {  	if (Page.IsPostBack == false) {  		txtFirstName.TabIndex = Convert.ToInt16 (_StartTabIndex);  		txtLastName.TabIndex = Convert.ToInt16 (_StartTabIndex + 1);  		txtUsername.TabIndex = Convert.ToInt16 (_StartTabIndex + 2);  		txtPassword.TabIndex = Convert.ToInt16 (_StartTabIndex + 3);  		txtConfirm.TabIndex = Convert.ToInt16 (_StartTabIndex + 4);  		txtEmail.TabIndex = Convert.ToInt16 (_StartTabIndex + 5);  		txtWebsite.TabIndex = Convert.ToInt16 (_StartTabIndex + 6);  		txtIM.TabIndex = Convert.ToInt16 (_StartTabIndex + 7);  		txtFirstName.Text = _FirstName;  		txtLastName.Text = _LastName;  		txtUsername.Text = _UserName;  		lblUsername.Text = _UserName;  		txtPassword.Text = _Password;  		txtConfirm.Text = _Confirm;  		txtEmail.Text = _Email;  		txtWebsite.Text = _Website;  		txtIM.Text = _IM;  		if (!String.IsNullOrEmpty (_ControlColumnWidth)) {  			txtFirstName.Width = Unit.Parse (_ControlColumnWidth);  			txtLastName.Width = Unit.Parse (_ControlColumnWidth);  			txtUsername.Width = Unit.Parse (_ControlColumnWidth);  			txtPassword.Width = Unit.Parse (_ControlColumnWidth);  			txtConfirm.Width = Unit.Parse (_ControlColumnWidth);  			txtEmail.Width = Unit.Parse (_ControlColumnWidth);  			txtWebsite.Width = Unit.Parse (_ControlColumnWidth);  			txtIM.Width = Unit.Parse (_ControlColumnWidth);  		}  		if (!_ShowPassword) {  			valPassword.Enabled = false;  			valConfirm1.Enabled = false;  			valConfirm2.Enabled = false;  			PasswordRow.Visible = false;  			ConfirmPasswordRow.Visible = false;  			txtUsername.Visible = false;  			valUsername.Enabled = false;  			lblUsername.Visible = true;  			lblUsernameAsterisk.Visible = false;  		} else {  			txtUsername.Visible = true;  			valUsername.Enabled = true;  			lblUsername.Visible = false;  			lblUsernameAsterisk.Visible = true;  			valPassword.Enabled = true;  			valConfirm1.Enabled = true;  			valConfirm2.Enabled = true;  			PasswordRow.Visible = true;  			ConfirmPasswordRow.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_ModuleId);  		ViewState ["LabelColumnWidth"] = _LabelColumnWidth;  		ViewState ["ControlColumnWidth"] = _ControlColumnWidth;  	}  	txtPassword.Attributes.Add ("value"' txtPassword.Text);  	txtConfirm.Attributes.Add ("value"' txtConfirm.Text);  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: try {  	if (Page.IsPostBack == false) {  		txtFirstName.TabIndex = Convert.ToInt16 (_StartTabIndex);  		txtLastName.TabIndex = Convert.ToInt16 (_StartTabIndex + 1);  		txtUsername.TabIndex = Convert.ToInt16 (_StartTabIndex + 2);  		txtPassword.TabIndex = Convert.ToInt16 (_StartTabIndex + 3);  		txtConfirm.TabIndex = Convert.ToInt16 (_StartTabIndex + 4);  		txtEmail.TabIndex = Convert.ToInt16 (_StartTabIndex + 5);  		txtWebsite.TabIndex = Convert.ToInt16 (_StartTabIndex + 6);  		txtIM.TabIndex = Convert.ToInt16 (_StartTabIndex + 7);  		txtFirstName.Text = _FirstName;  		txtLastName.Text = _LastName;  		txtUsername.Text = _UserName;  		lblUsername.Text = _UserName;  		txtPassword.Text = _Password;  		txtConfirm.Text = _Confirm;  		txtEmail.Text = _Email;  		txtWebsite.Text = _Website;  		txtIM.Text = _IM;  		if (!String.IsNullOrEmpty (_ControlColumnWidth)) {  			txtFirstName.Width = Unit.Parse (_ControlColumnWidth);  			txtLastName.Width = Unit.Parse (_ControlColumnWidth);  			txtUsername.Width = Unit.Parse (_ControlColumnWidth);  			txtPassword.Width = Unit.Parse (_ControlColumnWidth);  			txtConfirm.Width = Unit.Parse (_ControlColumnWidth);  			txtEmail.Width = Unit.Parse (_ControlColumnWidth);  			txtWebsite.Width = Unit.Parse (_ControlColumnWidth);  			txtIM.Width = Unit.Parse (_ControlColumnWidth);  		}  		if (!_ShowPassword) {  			valPassword.Enabled = false;  			valConfirm1.Enabled = false;  			valConfirm2.Enabled = false;  			PasswordRow.Visible = false;  			ConfirmPasswordRow.Visible = false;  			txtUsername.Visible = false;  			valUsername.Enabled = false;  			lblUsername.Visible = true;  			lblUsernameAsterisk.Visible = false;  		} else {  			txtUsername.Visible = true;  			valUsername.Enabled = true;  			lblUsername.Visible = false;  			lblUsernameAsterisk.Visible = true;  			valPassword.Enabled = true;  			valConfirm1.Enabled = true;  			valConfirm2.Enabled = true;  			PasswordRow.Visible = true;  			ConfirmPasswordRow.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_ModuleId);  		ViewState ["LabelColumnWidth"] = _LabelColumnWidth;  		ViewState ["ControlColumnWidth"] = _ControlColumnWidth;  	}  	txtPassword.Attributes.Add ("value"' txtPassword.Text);  	txtConfirm.Attributes.Add ("value"' txtConfirm.Text);  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: try {  	if (Page.IsPostBack == false) {  		txtFirstName.TabIndex = Convert.ToInt16 (_StartTabIndex);  		txtLastName.TabIndex = Convert.ToInt16 (_StartTabIndex + 1);  		txtUsername.TabIndex = Convert.ToInt16 (_StartTabIndex + 2);  		txtPassword.TabIndex = Convert.ToInt16 (_StartTabIndex + 3);  		txtConfirm.TabIndex = Convert.ToInt16 (_StartTabIndex + 4);  		txtEmail.TabIndex = Convert.ToInt16 (_StartTabIndex + 5);  		txtWebsite.TabIndex = Convert.ToInt16 (_StartTabIndex + 6);  		txtIM.TabIndex = Convert.ToInt16 (_StartTabIndex + 7);  		txtFirstName.Text = _FirstName;  		txtLastName.Text = _LastName;  		txtUsername.Text = _UserName;  		lblUsername.Text = _UserName;  		txtPassword.Text = _Password;  		txtConfirm.Text = _Confirm;  		txtEmail.Text = _Email;  		txtWebsite.Text = _Website;  		txtIM.Text = _IM;  		if (!String.IsNullOrEmpty (_ControlColumnWidth)) {  			txtFirstName.Width = Unit.Parse (_ControlColumnWidth);  			txtLastName.Width = Unit.Parse (_ControlColumnWidth);  			txtUsername.Width = Unit.Parse (_ControlColumnWidth);  			txtPassword.Width = Unit.Parse (_ControlColumnWidth);  			txtConfirm.Width = Unit.Parse (_ControlColumnWidth);  			txtEmail.Width = Unit.Parse (_ControlColumnWidth);  			txtWebsite.Width = Unit.Parse (_ControlColumnWidth);  			txtIM.Width = Unit.Parse (_ControlColumnWidth);  		}  		if (!_ShowPassword) {  			valPassword.Enabled = false;  			valConfirm1.Enabled = false;  			valConfirm2.Enabled = false;  			PasswordRow.Visible = false;  			ConfirmPasswordRow.Visible = false;  			txtUsername.Visible = false;  			valUsername.Enabled = false;  			lblUsername.Visible = true;  			lblUsernameAsterisk.Visible = false;  		} else {  			txtUsername.Visible = true;  			valUsername.Enabled = true;  			lblUsername.Visible = false;  			lblUsernameAsterisk.Visible = true;  			valPassword.Enabled = true;  			valConfirm1.Enabled = true;  			valConfirm2.Enabled = true;  			PasswordRow.Visible = true;  			ConfirmPasswordRow.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_ModuleId);  		ViewState ["LabelColumnWidth"] = _LabelColumnWidth;  		ViewState ["ControlColumnWidth"] = _ControlColumnWidth;  	}  	txtPassword.Attributes.Add ("value"' txtPassword.Text);  	txtConfirm.Attributes.Add ("value"' txtConfirm.Text);  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: try {  	if (Page.IsPostBack == false) {  		txtFirstName.TabIndex = Convert.ToInt16 (_StartTabIndex);  		txtLastName.TabIndex = Convert.ToInt16 (_StartTabIndex + 1);  		txtUsername.TabIndex = Convert.ToInt16 (_StartTabIndex + 2);  		txtPassword.TabIndex = Convert.ToInt16 (_StartTabIndex + 3);  		txtConfirm.TabIndex = Convert.ToInt16 (_StartTabIndex + 4);  		txtEmail.TabIndex = Convert.ToInt16 (_StartTabIndex + 5);  		txtWebsite.TabIndex = Convert.ToInt16 (_StartTabIndex + 6);  		txtIM.TabIndex = Convert.ToInt16 (_StartTabIndex + 7);  		txtFirstName.Text = _FirstName;  		txtLastName.Text = _LastName;  		txtUsername.Text = _UserName;  		lblUsername.Text = _UserName;  		txtPassword.Text = _Password;  		txtConfirm.Text = _Confirm;  		txtEmail.Text = _Email;  		txtWebsite.Text = _Website;  		txtIM.Text = _IM;  		if (!String.IsNullOrEmpty (_ControlColumnWidth)) {  			txtFirstName.Width = Unit.Parse (_ControlColumnWidth);  			txtLastName.Width = Unit.Parse (_ControlColumnWidth);  			txtUsername.Width = Unit.Parse (_ControlColumnWidth);  			txtPassword.Width = Unit.Parse (_ControlColumnWidth);  			txtConfirm.Width = Unit.Parse (_ControlColumnWidth);  			txtEmail.Width = Unit.Parse (_ControlColumnWidth);  			txtWebsite.Width = Unit.Parse (_ControlColumnWidth);  			txtIM.Width = Unit.Parse (_ControlColumnWidth);  		}  		if (!_ShowPassword) {  			valPassword.Enabled = false;  			valConfirm1.Enabled = false;  			valConfirm2.Enabled = false;  			PasswordRow.Visible = false;  			ConfirmPasswordRow.Visible = false;  			txtUsername.Visible = false;  			valUsername.Enabled = false;  			lblUsername.Visible = true;  			lblUsernameAsterisk.Visible = false;  		} else {  			txtUsername.Visible = true;  			valUsername.Enabled = true;  			lblUsername.Visible = false;  			lblUsernameAsterisk.Visible = true;  			valPassword.Enabled = true;  			valConfirm1.Enabled = true;  			valConfirm2.Enabled = true;  			PasswordRow.Visible = true;  			ConfirmPasswordRow.Visible = true;  		}  		ViewState ["ModuleId"] = Convert.ToString (_ModuleId);  		ViewState ["LabelColumnWidth"] = _LabelColumnWidth;  		ViewState ["ControlColumnWidth"] = _ControlColumnWidth;  	}  	txtPassword.Attributes.Add ("value"' txtPassword.Text);  	txtConfirm.Attributes.Add ("value"' txtConfirm.Text);  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: if (Page.IsPostBack == false) {  	txtFirstName.TabIndex = Convert.ToInt16 (_StartTabIndex);  	txtLastName.TabIndex = Convert.ToInt16 (_StartTabIndex + 1);  	txtUsername.TabIndex = Convert.ToInt16 (_StartTabIndex + 2);  	txtPassword.TabIndex = Convert.ToInt16 (_StartTabIndex + 3);  	txtConfirm.TabIndex = Convert.ToInt16 (_StartTabIndex + 4);  	txtEmail.TabIndex = Convert.ToInt16 (_StartTabIndex + 5);  	txtWebsite.TabIndex = Convert.ToInt16 (_StartTabIndex + 6);  	txtIM.TabIndex = Convert.ToInt16 (_StartTabIndex + 7);  	txtFirstName.Text = _FirstName;  	txtLastName.Text = _LastName;  	txtUsername.Text = _UserName;  	lblUsername.Text = _UserName;  	txtPassword.Text = _Password;  	txtConfirm.Text = _Confirm;  	txtEmail.Text = _Email;  	txtWebsite.Text = _Website;  	txtIM.Text = _IM;  	if (!String.IsNullOrEmpty (_ControlColumnWidth)) {  		txtFirstName.Width = Unit.Parse (_ControlColumnWidth);  		txtLastName.Width = Unit.Parse (_ControlColumnWidth);  		txtUsername.Width = Unit.Parse (_ControlColumnWidth);  		txtPassword.Width = Unit.Parse (_ControlColumnWidth);  		txtConfirm.Width = Unit.Parse (_ControlColumnWidth);  		txtEmail.Width = Unit.Parse (_ControlColumnWidth);  		txtWebsite.Width = Unit.Parse (_ControlColumnWidth);  		txtIM.Width = Unit.Parse (_ControlColumnWidth);  	}  	if (!_ShowPassword) {  		valPassword.Enabled = false;  		valConfirm1.Enabled = false;  		valConfirm2.Enabled = false;  		PasswordRow.Visible = false;  		ConfirmPasswordRow.Visible = false;  		txtUsername.Visible = false;  		valUsername.Enabled = false;  		lblUsername.Visible = true;  		lblUsernameAsterisk.Visible = false;  	} else {  		txtUsername.Visible = true;  		valUsername.Enabled = true;  		lblUsername.Visible = false;  		lblUsernameAsterisk.Visible = true;  		valPassword.Enabled = true;  		valConfirm1.Enabled = true;  		valConfirm2.Enabled = true;  		PasswordRow.Visible = true;  		ConfirmPasswordRow.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_ModuleId);  	ViewState ["LabelColumnWidth"] = _LabelColumnWidth;  	ViewState ["ControlColumnWidth"] = _ControlColumnWidth;  }  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: if (Page.IsPostBack == false) {  	txtFirstName.TabIndex = Convert.ToInt16 (_StartTabIndex);  	txtLastName.TabIndex = Convert.ToInt16 (_StartTabIndex + 1);  	txtUsername.TabIndex = Convert.ToInt16 (_StartTabIndex + 2);  	txtPassword.TabIndex = Convert.ToInt16 (_StartTabIndex + 3);  	txtConfirm.TabIndex = Convert.ToInt16 (_StartTabIndex + 4);  	txtEmail.TabIndex = Convert.ToInt16 (_StartTabIndex + 5);  	txtWebsite.TabIndex = Convert.ToInt16 (_StartTabIndex + 6);  	txtIM.TabIndex = Convert.ToInt16 (_StartTabIndex + 7);  	txtFirstName.Text = _FirstName;  	txtLastName.Text = _LastName;  	txtUsername.Text = _UserName;  	lblUsername.Text = _UserName;  	txtPassword.Text = _Password;  	txtConfirm.Text = _Confirm;  	txtEmail.Text = _Email;  	txtWebsite.Text = _Website;  	txtIM.Text = _IM;  	if (!String.IsNullOrEmpty (_ControlColumnWidth)) {  		txtFirstName.Width = Unit.Parse (_ControlColumnWidth);  		txtLastName.Width = Unit.Parse (_ControlColumnWidth);  		txtUsername.Width = Unit.Parse (_ControlColumnWidth);  		txtPassword.Width = Unit.Parse (_ControlColumnWidth);  		txtConfirm.Width = Unit.Parse (_ControlColumnWidth);  		txtEmail.Width = Unit.Parse (_ControlColumnWidth);  		txtWebsite.Width = Unit.Parse (_ControlColumnWidth);  		txtIM.Width = Unit.Parse (_ControlColumnWidth);  	}  	if (!_ShowPassword) {  		valPassword.Enabled = false;  		valConfirm1.Enabled = false;  		valConfirm2.Enabled = false;  		PasswordRow.Visible = false;  		ConfirmPasswordRow.Visible = false;  		txtUsername.Visible = false;  		valUsername.Enabled = false;  		lblUsername.Visible = true;  		lblUsernameAsterisk.Visible = false;  	} else {  		txtUsername.Visible = true;  		valUsername.Enabled = true;  		lblUsername.Visible = false;  		lblUsernameAsterisk.Visible = true;  		valPassword.Enabled = true;  		valConfirm1.Enabled = true;  		valConfirm2.Enabled = true;  		PasswordRow.Visible = true;  		ConfirmPasswordRow.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_ModuleId);  	ViewState ["LabelColumnWidth"] = _LabelColumnWidth;  	ViewState ["ControlColumnWidth"] = _ControlColumnWidth;  }  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: if (Page.IsPostBack == false) {  	txtFirstName.TabIndex = Convert.ToInt16 (_StartTabIndex);  	txtLastName.TabIndex = Convert.ToInt16 (_StartTabIndex + 1);  	txtUsername.TabIndex = Convert.ToInt16 (_StartTabIndex + 2);  	txtPassword.TabIndex = Convert.ToInt16 (_StartTabIndex + 3);  	txtConfirm.TabIndex = Convert.ToInt16 (_StartTabIndex + 4);  	txtEmail.TabIndex = Convert.ToInt16 (_StartTabIndex + 5);  	txtWebsite.TabIndex = Convert.ToInt16 (_StartTabIndex + 6);  	txtIM.TabIndex = Convert.ToInt16 (_StartTabIndex + 7);  	txtFirstName.Text = _FirstName;  	txtLastName.Text = _LastName;  	txtUsername.Text = _UserName;  	lblUsername.Text = _UserName;  	txtPassword.Text = _Password;  	txtConfirm.Text = _Confirm;  	txtEmail.Text = _Email;  	txtWebsite.Text = _Website;  	txtIM.Text = _IM;  	if (!String.IsNullOrEmpty (_ControlColumnWidth)) {  		txtFirstName.Width = Unit.Parse (_ControlColumnWidth);  		txtLastName.Width = Unit.Parse (_ControlColumnWidth);  		txtUsername.Width = Unit.Parse (_ControlColumnWidth);  		txtPassword.Width = Unit.Parse (_ControlColumnWidth);  		txtConfirm.Width = Unit.Parse (_ControlColumnWidth);  		txtEmail.Width = Unit.Parse (_ControlColumnWidth);  		txtWebsite.Width = Unit.Parse (_ControlColumnWidth);  		txtIM.Width = Unit.Parse (_ControlColumnWidth);  	}  	if (!_ShowPassword) {  		valPassword.Enabled = false;  		valConfirm1.Enabled = false;  		valConfirm2.Enabled = false;  		PasswordRow.Visible = false;  		ConfirmPasswordRow.Visible = false;  		txtUsername.Visible = false;  		valUsername.Enabled = false;  		lblUsername.Visible = true;  		lblUsernameAsterisk.Visible = false;  	} else {  		txtUsername.Visible = true;  		valUsername.Enabled = true;  		lblUsername.Visible = false;  		lblUsernameAsterisk.Visible = true;  		valPassword.Enabled = true;  		valConfirm1.Enabled = true;  		valConfirm2.Enabled = true;  		PasswordRow.Visible = true;  		ConfirmPasswordRow.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_ModuleId);  	ViewState ["LabelColumnWidth"] = _LabelColumnWidth;  	ViewState ["ControlColumnWidth"] = _ControlColumnWidth;  }  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: if (Page.IsPostBack == false) {  	txtFirstName.TabIndex = Convert.ToInt16 (_StartTabIndex);  	txtLastName.TabIndex = Convert.ToInt16 (_StartTabIndex + 1);  	txtUsername.TabIndex = Convert.ToInt16 (_StartTabIndex + 2);  	txtPassword.TabIndex = Convert.ToInt16 (_StartTabIndex + 3);  	txtConfirm.TabIndex = Convert.ToInt16 (_StartTabIndex + 4);  	txtEmail.TabIndex = Convert.ToInt16 (_StartTabIndex + 5);  	txtWebsite.TabIndex = Convert.ToInt16 (_StartTabIndex + 6);  	txtIM.TabIndex = Convert.ToInt16 (_StartTabIndex + 7);  	txtFirstName.Text = _FirstName;  	txtLastName.Text = _LastName;  	txtUsername.Text = _UserName;  	lblUsername.Text = _UserName;  	txtPassword.Text = _Password;  	txtConfirm.Text = _Confirm;  	txtEmail.Text = _Email;  	txtWebsite.Text = _Website;  	txtIM.Text = _IM;  	if (!String.IsNullOrEmpty (_ControlColumnWidth)) {  		txtFirstName.Width = Unit.Parse (_ControlColumnWidth);  		txtLastName.Width = Unit.Parse (_ControlColumnWidth);  		txtUsername.Width = Unit.Parse (_ControlColumnWidth);  		txtPassword.Width = Unit.Parse (_ControlColumnWidth);  		txtConfirm.Width = Unit.Parse (_ControlColumnWidth);  		txtEmail.Width = Unit.Parse (_ControlColumnWidth);  		txtWebsite.Width = Unit.Parse (_ControlColumnWidth);  		txtIM.Width = Unit.Parse (_ControlColumnWidth);  	}  	if (!_ShowPassword) {  		valPassword.Enabled = false;  		valConfirm1.Enabled = false;  		valConfirm2.Enabled = false;  		PasswordRow.Visible = false;  		ConfirmPasswordRow.Visible = false;  		txtUsername.Visible = false;  		valUsername.Enabled = false;  		lblUsername.Visible = true;  		lblUsernameAsterisk.Visible = false;  	} else {  		txtUsername.Visible = true;  		valUsername.Enabled = true;  		lblUsername.Visible = false;  		lblUsernameAsterisk.Visible = true;  		valPassword.Enabled = true;  		valConfirm1.Enabled = true;  		valConfirm2.Enabled = true;  		PasswordRow.Visible = true;  		ConfirmPasswordRow.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_ModuleId);  	ViewState ["LabelColumnWidth"] = _LabelColumnWidth;  	ViewState ["ControlColumnWidth"] = _ControlColumnWidth;  }  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: if (Page.IsPostBack == false) {  	txtFirstName.TabIndex = Convert.ToInt16 (_StartTabIndex);  	txtLastName.TabIndex = Convert.ToInt16 (_StartTabIndex + 1);  	txtUsername.TabIndex = Convert.ToInt16 (_StartTabIndex + 2);  	txtPassword.TabIndex = Convert.ToInt16 (_StartTabIndex + 3);  	txtConfirm.TabIndex = Convert.ToInt16 (_StartTabIndex + 4);  	txtEmail.TabIndex = Convert.ToInt16 (_StartTabIndex + 5);  	txtWebsite.TabIndex = Convert.ToInt16 (_StartTabIndex + 6);  	txtIM.TabIndex = Convert.ToInt16 (_StartTabIndex + 7);  	txtFirstName.Text = _FirstName;  	txtLastName.Text = _LastName;  	txtUsername.Text = _UserName;  	lblUsername.Text = _UserName;  	txtPassword.Text = _Password;  	txtConfirm.Text = _Confirm;  	txtEmail.Text = _Email;  	txtWebsite.Text = _Website;  	txtIM.Text = _IM;  	if (!String.IsNullOrEmpty (_ControlColumnWidth)) {  		txtFirstName.Width = Unit.Parse (_ControlColumnWidth);  		txtLastName.Width = Unit.Parse (_ControlColumnWidth);  		txtUsername.Width = Unit.Parse (_ControlColumnWidth);  		txtPassword.Width = Unit.Parse (_ControlColumnWidth);  		txtConfirm.Width = Unit.Parse (_ControlColumnWidth);  		txtEmail.Width = Unit.Parse (_ControlColumnWidth);  		txtWebsite.Width = Unit.Parse (_ControlColumnWidth);  		txtIM.Width = Unit.Parse (_ControlColumnWidth);  	}  	if (!_ShowPassword) {  		valPassword.Enabled = false;  		valConfirm1.Enabled = false;  		valConfirm2.Enabled = false;  		PasswordRow.Visible = false;  		ConfirmPasswordRow.Visible = false;  		txtUsername.Visible = false;  		valUsername.Enabled = false;  		lblUsername.Visible = true;  		lblUsernameAsterisk.Visible = false;  	} else {  		txtUsername.Visible = true;  		valUsername.Enabled = true;  		lblUsername.Visible = false;  		lblUsernameAsterisk.Visible = true;  		valPassword.Enabled = true;  		valConfirm1.Enabled = true;  		valConfirm2.Enabled = true;  		PasswordRow.Visible = true;  		ConfirmPasswordRow.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_ModuleId);  	ViewState ["LabelColumnWidth"] = _LabelColumnWidth;  	ViewState ["ControlColumnWidth"] = _ControlColumnWidth;  }  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: if (Page.IsPostBack == false) {  	txtFirstName.TabIndex = Convert.ToInt16 (_StartTabIndex);  	txtLastName.TabIndex = Convert.ToInt16 (_StartTabIndex + 1);  	txtUsername.TabIndex = Convert.ToInt16 (_StartTabIndex + 2);  	txtPassword.TabIndex = Convert.ToInt16 (_StartTabIndex + 3);  	txtConfirm.TabIndex = Convert.ToInt16 (_StartTabIndex + 4);  	txtEmail.TabIndex = Convert.ToInt16 (_StartTabIndex + 5);  	txtWebsite.TabIndex = Convert.ToInt16 (_StartTabIndex + 6);  	txtIM.TabIndex = Convert.ToInt16 (_StartTabIndex + 7);  	txtFirstName.Text = _FirstName;  	txtLastName.Text = _LastName;  	txtUsername.Text = _UserName;  	lblUsername.Text = _UserName;  	txtPassword.Text = _Password;  	txtConfirm.Text = _Confirm;  	txtEmail.Text = _Email;  	txtWebsite.Text = _Website;  	txtIM.Text = _IM;  	if (!String.IsNullOrEmpty (_ControlColumnWidth)) {  		txtFirstName.Width = Unit.Parse (_ControlColumnWidth);  		txtLastName.Width = Unit.Parse (_ControlColumnWidth);  		txtUsername.Width = Unit.Parse (_ControlColumnWidth);  		txtPassword.Width = Unit.Parse (_ControlColumnWidth);  		txtConfirm.Width = Unit.Parse (_ControlColumnWidth);  		txtEmail.Width = Unit.Parse (_ControlColumnWidth);  		txtWebsite.Width = Unit.Parse (_ControlColumnWidth);  		txtIM.Width = Unit.Parse (_ControlColumnWidth);  	}  	if (!_ShowPassword) {  		valPassword.Enabled = false;  		valConfirm1.Enabled = false;  		valConfirm2.Enabled = false;  		PasswordRow.Visible = false;  		ConfirmPasswordRow.Visible = false;  		txtUsername.Visible = false;  		valUsername.Enabled = false;  		lblUsername.Visible = true;  		lblUsernameAsterisk.Visible = false;  	} else {  		txtUsername.Visible = true;  		valUsername.Enabled = true;  		lblUsername.Visible = false;  		lblUsernameAsterisk.Visible = true;  		valPassword.Enabled = true;  		valConfirm1.Enabled = true;  		valConfirm2.Enabled = true;  		PasswordRow.Visible = true;  		ConfirmPasswordRow.Visible = true;  	}  	ViewState ["ModuleId"] = Convert.ToString (_ModuleId);  	ViewState ["LabelColumnWidth"] = _LabelColumnWidth;  	ViewState ["ControlColumnWidth"] = _ControlColumnWidth;  }  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: txtUsername.TabIndex = Convert.ToInt16 (_StartTabIndex + 2);  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: txtPassword.TabIndex = Convert.ToInt16 (_StartTabIndex + 3);  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: txtConfirm.TabIndex = Convert.ToInt16 (_StartTabIndex + 4);  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: txtEmail.TabIndex = Convert.ToInt16 (_StartTabIndex + 5);  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: txtWebsite.TabIndex = Convert.ToInt16 (_StartTabIndex + 6);  
Magic Number,DotNetNuke.UI.UserControls,User,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\User.cs,OnLoad,The following statement contains a magic number: txtIM.TabIndex = Convert.ToInt16 (_StartTabIndex + 7);  
Magic Number,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The following statement contains a magic number: EnableMinMax (objButton' objContent' intModuleId' blnDefaultMin' strMinIconLoc' strMaxIconLoc' ePersistanceType' 5);  
Magic Number,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The following statement contains a magic number: EnableMinMax (objButton' objContent' -1' blnDefaultMin' strMinIconLoc' strMaxIconLoc' ePersistanceType' 5' strPersonalizationNamingCtr' strPersonalizationKey);  
Magic Number,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The following statement contains a magic number: if (intAnimationFrames != 5) {  	ClientAPI.RegisterClientVariable (objButton.Page' "animf_" + objContent.ClientID' intAnimationFrames.ToString ()' true);  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateImage,The following statement contains a magic number: if (_Rand.Next (2) == 1) {  	DistortImage (ref bmp' _Rand.Next (5' 20));  } else {  	DistortImage (ref bmp' -_Rand.Next (5' 20));  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateImage,The following statement contains a magic number: if (_Rand.Next (2) == 1) {  	DistortImage (ref bmp' _Rand.Next (5' 20));  } else {  	DistortImage (ref bmp' -_Rand.Next (5' 20));  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateImage,The following statement contains a magic number: if (_Rand.Next (2) == 1) {  	DistortImage (ref bmp' _Rand.Next (5' 20));  } else {  	DistortImage (ref bmp' -_Rand.Next (5' 20));  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateImage,The following statement contains a magic number: if (_Rand.Next (2) == 1) {  	DistortImage (ref bmp' _Rand.Next (5' 20));  } else {  	DistortImage (ref bmp' -_Rand.Next (5' 20));  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateImage,The following statement contains a magic number: if (_Rand.Next (2) == 1) {  	DistortImage (ref bmp' _Rand.Next (5' 20));  } else {  	DistortImage (ref bmp' -_Rand.Next (5' 20));  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateImage,The following statement contains a magic number: DistortImage (ref bmp' _Rand.Next (5' 20));  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateImage,The following statement contains a magic number: DistortImage (ref bmp' _Rand.Next (5' 20));  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateImage,The following statement contains a magic number: DistortImage (ref bmp' -_Rand.Next (5' 20));  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateImage,The following statement contains a magic number: DistortImage (ref bmp' -_Rand.Next (5' 20));  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateText,The following statement contains a magic number: try {  	var measured = new SizeF (0' 0);  	var workingSize = new SizeF (width' height);  	while ((emSize > 2)) {  		f = new Font (ff' emSize);  		measured = g.MeasureString (text' f);  		if (!(measured.Width > workingSize.Width || measured.Height > workingSize.Height)) {  			break;  		}  		f.Dispose ();  		emSize -= 2;  	}  	emSize += 8;  	f = new Font (ff' emSize);  	var fmt = new StringFormat ();  	fmt.Alignment = StringAlignment.Center;  	fmt.LineAlignment = StringAlignment.Center;  	textPath.AddString (text' f.FontFamily' Convert.ToInt32 (f.Style)' f.Size' new RectangleF (0' 0' width' height)' fmt);  	WarpText (ref textPath' new Rectangle (0' 0' width' height));  } catch (Exception exc) {  	Logger.Error (exc);  } finally {  	f.Dispose ();  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateText,The following statement contains a magic number: try {  	var measured = new SizeF (0' 0);  	var workingSize = new SizeF (width' height);  	while ((emSize > 2)) {  		f = new Font (ff' emSize);  		measured = g.MeasureString (text' f);  		if (!(measured.Width > workingSize.Width || measured.Height > workingSize.Height)) {  			break;  		}  		f.Dispose ();  		emSize -= 2;  	}  	emSize += 8;  	f = new Font (ff' emSize);  	var fmt = new StringFormat ();  	fmt.Alignment = StringAlignment.Center;  	fmt.LineAlignment = StringAlignment.Center;  	textPath.AddString (text' f.FontFamily' Convert.ToInt32 (f.Style)' f.Size' new RectangleF (0' 0' width' height)' fmt);  	WarpText (ref textPath' new Rectangle (0' 0' width' height));  } catch (Exception exc) {  	Logger.Error (exc);  } finally {  	f.Dispose ();  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateText,The following statement contains a magic number: try {  	var measured = new SizeF (0' 0);  	var workingSize = new SizeF (width' height);  	while ((emSize > 2)) {  		f = new Font (ff' emSize);  		measured = g.MeasureString (text' f);  		if (!(measured.Width > workingSize.Width || measured.Height > workingSize.Height)) {  			break;  		}  		f.Dispose ();  		emSize -= 2;  	}  	emSize += 8;  	f = new Font (ff' emSize);  	var fmt = new StringFormat ();  	fmt.Alignment = StringAlignment.Center;  	fmt.LineAlignment = StringAlignment.Center;  	textPath.AddString (text' f.FontFamily' Convert.ToInt32 (f.Style)' f.Size' new RectangleF (0' 0' width' height)' fmt);  	WarpText (ref textPath' new Rectangle (0' 0' width' height));  } catch (Exception exc) {  	Logger.Error (exc);  } finally {  	f.Dispose ();  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateText,The following statement contains a magic number: while ((emSize > 2)) {  	f = new Font (ff' emSize);  	measured = g.MeasureString (text' f);  	if (!(measured.Width > workingSize.Width || measured.Height > workingSize.Height)) {  		break;  	}  	f.Dispose ();  	emSize -= 2;  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateText,The following statement contains a magic number: while ((emSize > 2)) {  	f = new Font (ff' emSize);  	measured = g.MeasureString (text' f);  	if (!(measured.Width > workingSize.Width || measured.Height > workingSize.Height)) {  		break;  	}  	f.Dispose ();  	emSize -= 2;  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateText,The following statement contains a magic number: emSize -= 2;  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,CreateText,The following statement contains a magic number: emSize += 8;  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,DistortImage,The following statement contains a magic number: for (int y = 0; y <= height - 1; y++) {  	for (int x = 0; x <= width - 1; x++) {  		int newX = Convert.ToInt32 (x + (distortion * Math.Sin (Math.PI * y / 64.0)));  		int newY = Convert.ToInt32 (y + (distortion * Math.Cos (Math.PI * x / 64.0)));  		if ((newX < 0 || newX >= width)) {  			newX = 0;  		}  		if ((newY < 0 || newY >= height)) {  			newY = 0;  		}  		b.SetPixel (x' y' copy.GetPixel (newX' newY));  	}  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,DistortImage,The following statement contains a magic number: for (int y = 0; y <= height - 1; y++) {  	for (int x = 0; x <= width - 1; x++) {  		int newX = Convert.ToInt32 (x + (distortion * Math.Sin (Math.PI * y / 64.0)));  		int newY = Convert.ToInt32 (y + (distortion * Math.Cos (Math.PI * x / 64.0)));  		if ((newX < 0 || newX >= width)) {  			newX = 0;  		}  		if ((newY < 0 || newY >= height)) {  			newY = 0;  		}  		b.SetPixel (x' y' copy.GetPixel (newX' newY));  	}  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,DistortImage,The following statement contains a magic number: for (int x = 0; x <= width - 1; x++) {  	int newX = Convert.ToInt32 (x + (distortion * Math.Sin (Math.PI * y / 64.0)));  	int newY = Convert.ToInt32 (y + (distortion * Math.Cos (Math.PI * x / 64.0)));  	if ((newX < 0 || newX >= width)) {  		newX = 0;  	}  	if ((newY < 0 || newY >= height)) {  		newY = 0;  	}  	b.SetPixel (x' y' copy.GetPixel (newX' newY));  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,DistortImage,The following statement contains a magic number: for (int x = 0; x <= width - 1; x++) {  	int newX = Convert.ToInt32 (x + (distortion * Math.Sin (Math.PI * y / 64.0)));  	int newY = Convert.ToInt32 (y + (distortion * Math.Cos (Math.PI * x / 64.0)));  	if ((newX < 0 || newX >= width)) {  		newX = 0;  	}  	if ((newY < 0 || newY >= height)) {  		newY = 0;  	}  	b.SetPixel (x' y' copy.GetPixel (newX' newY));  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,GenerateImage,The following statement contains a magic number: try {  	int width;  	int height;  	if (int.TryParse (Settings [0]' out width) && int.TryParse (Settings [1]' out height)) {  		string text = Settings [2];  		string backgroundImage = Settings [3];  		Graphics g;  		Brush b = new SolidBrush (Color.LightGray);  		Brush b1 = new SolidBrush (Color.Black);  		if (String.IsNullOrEmpty (backgroundImage)) {  			bmp = CreateImage (width' height);  		} else {  			bmp = (Bitmap)System.Drawing.Image.FromFile (HttpContext.Current.Request.MapPath (backgroundImage));  		}  		g = Graphics.FromImage (bmp);  		//Create Text  		GraphicsPath textPath = CreateText (text' width' height' g);  		if (String.IsNullOrEmpty (backgroundImage)) {  			g.FillPath (b' textPath);  		} else {  			g.FillPath (b1' textPath);  		}  	}  } catch (Exception exc) {  	Exceptions.LogException (exc);  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,GenerateImage,The following statement contains a magic number: try {  	int width;  	int height;  	if (int.TryParse (Settings [0]' out width) && int.TryParse (Settings [1]' out height)) {  		string text = Settings [2];  		string backgroundImage = Settings [3];  		Graphics g;  		Brush b = new SolidBrush (Color.LightGray);  		Brush b1 = new SolidBrush (Color.Black);  		if (String.IsNullOrEmpty (backgroundImage)) {  			bmp = CreateImage (width' height);  		} else {  			bmp = (Bitmap)System.Drawing.Image.FromFile (HttpContext.Current.Request.MapPath (backgroundImage));  		}  		g = Graphics.FromImage (bmp);  		//Create Text  		GraphicsPath textPath = CreateText (text' width' height' g);  		if (String.IsNullOrEmpty (backgroundImage)) {  			g.FillPath (b' textPath);  		} else {  			g.FillPath (b1' textPath);  		}  	}  } catch (Exception exc) {  	Exceptions.LogException (exc);  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,GenerateImage,The following statement contains a magic number: if (int.TryParse (Settings [0]' out width) && int.TryParse (Settings [1]' out height)) {  	string text = Settings [2];  	string backgroundImage = Settings [3];  	Graphics g;  	Brush b = new SolidBrush (Color.LightGray);  	Brush b1 = new SolidBrush (Color.Black);  	if (String.IsNullOrEmpty (backgroundImage)) {  		bmp = CreateImage (width' height);  	} else {  		bmp = (Bitmap)System.Drawing.Image.FromFile (HttpContext.Current.Request.MapPath (backgroundImage));  	}  	g = Graphics.FromImage (bmp);  	//Create Text  	GraphicsPath textPath = CreateText (text' width' height' g);  	if (String.IsNullOrEmpty (backgroundImage)) {  		g.FillPath (b' textPath);  	} else {  		g.FillPath (b1' textPath);  	}  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,GenerateImage,The following statement contains a magic number: if (int.TryParse (Settings [0]' out width) && int.TryParse (Settings [1]' out height)) {  	string text = Settings [2];  	string backgroundImage = Settings [3];  	Graphics g;  	Brush b = new SolidBrush (Color.LightGray);  	Brush b1 = new SolidBrush (Color.Black);  	if (String.IsNullOrEmpty (backgroundImage)) {  		bmp = CreateImage (width' height);  	} else {  		bmp = (Bitmap)System.Drawing.Image.FromFile (HttpContext.Current.Request.MapPath (backgroundImage));  	}  	g = Graphics.FromImage (bmp);  	//Create Text  	GraphicsPath textPath = CreateText (text' width' height' g);  	if (String.IsNullOrEmpty (backgroundImage)) {  		g.FillPath (b' textPath);  	} else {  		g.FillPath (b1' textPath);  	}  }  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,WarpText,The following statement contains a magic number: intWarpDivisor = _Rand.Next (4' 8);  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,WarpText,The following statement contains a magic number: intWarpDivisor = _Rand.Next (4' 8);  
Magic Number,DotNetNuke.UI.WebControls,CaptchaControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\CaptchaControl.cs,GetNextCaptcha,The following statement contains a magic number: DataCache.SetCache (cacheKey' challenge' TimeSpan.FromMinutes (2));  
Magic Number,DotNetNuke.UI.WebControls,RolesSelectionGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\RolesSelectionGrid.cs,GetRoles,The following statement contains a magic number: _roles = roleGroupId > -2 ? RoleController.Instance.GetRoles (PortalController.Instance.GetCurrentPortalSettings ().PortalId' r => r.RoleGroupID == roleGroupId && r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved) : RoleController.Instance.GetRoles (PortalController.Instance.GetCurrentPortalSettings ().PortalId' r => r.SecurityMode != SecurityMode.SocialGroup && r.Status == RoleStatus.Approved);  
Magic Number,DotNetNuke.UI.WebControls,RolesSelectionGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\RolesSelectionGrid.cs,UpdateRoleSelections,The following statement contains a magic number: if (dgRoleSelection != null) {  	foreach (DataGridItem dgi in dgRoleSelection.Items) {  		const int i = 2;  		if (dgi.Cells [i].Controls.Count > 0) {  			var cb = (CheckBox)dgi.Cells [i].Controls [0];  			UpdateSelection (dgi.Cells [0].Text' cb.Checked);  		}  	}  }  
Magic Number,DotNetNuke.UI.WebControls,RolesSelectionGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\RolesSelectionGrid.cs,UpdateRoleSelections,The following statement contains a magic number: foreach (DataGridItem dgi in dgRoleSelection.Items) {  	const int i = 2;  	if (dgi.Cells [i].Controls.Count > 0) {  		var cb = (CheckBox)dgi.Cells [i].Controls [0];  		UpdateSelection (dgi.Cells [0].Text' cb.Checked);  	}  }  
Magic Number,DotNetNuke.UI.WebControls,LanguageSelector,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\LanguageSelector.cs,CreateChildControls,The following statement contains a magic number: if (GetCultures (SelectionObject == LanguageSelectionObject.SpecificCulture).Length < 2) {  	Visible = false;  }  
Magic Number,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,BindPageNumbers,The following statement contains a magic number: if (_totalPages > 0) {  	var ht = new DataTable ();  	ht.Columns.Add ("PageNum");  	DataRow tmpRow;  	var LowNum = 1;  	var HighNum = Convert.ToInt32 (_totalPages);  	double tmpNum;  	tmpNum = CurrentPage - pageLinksPerPage / 2;  	if (tmpNum < 1) {  		tmpNum = 1;  	}  	if (CurrentPage > (pageLinksPerPage / 2)) {  		LowNum = Convert.ToInt32 (Math.Floor (tmpNum));  	}  	if (Convert.ToInt32 (_totalPages) <= pageLinksPerPage) {  		HighNum = Convert.ToInt32 (_totalPages);  	} else {  		HighNum = LowNum + pageLinksPerPage - 1;  	}  	if (HighNum > Convert.ToInt32 (_totalPages)) {  		HighNum = Convert.ToInt32 (_totalPages);  		if (HighNum - LowNum < pageLinksPerPage) {  			LowNum = HighNum - pageLinksPerPage + 1;  		}  	}  	if (HighNum > Convert.ToInt32 (_totalPages)) {  		HighNum = Convert.ToInt32 (_totalPages);  	}  	if (LowNum < 1) {  		LowNum = 1;  	}  	int i;  	for (i = LowNum; i <= HighNum; i++) {  		tmpRow = ht.NewRow ();  		tmpRow ["PageNum"] = i;  		ht.Rows.Add (tmpRow);  	}  	PageNumbers.DataSource = ht;  	PageNumbers.DataBind ();  }  
Magic Number,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,BindPageNumbers,The following statement contains a magic number: if (_totalPages > 0) {  	var ht = new DataTable ();  	ht.Columns.Add ("PageNum");  	DataRow tmpRow;  	var LowNum = 1;  	var HighNum = Convert.ToInt32 (_totalPages);  	double tmpNum;  	tmpNum = CurrentPage - pageLinksPerPage / 2;  	if (tmpNum < 1) {  		tmpNum = 1;  	}  	if (CurrentPage > (pageLinksPerPage / 2)) {  		LowNum = Convert.ToInt32 (Math.Floor (tmpNum));  	}  	if (Convert.ToInt32 (_totalPages) <= pageLinksPerPage) {  		HighNum = Convert.ToInt32 (_totalPages);  	} else {  		HighNum = LowNum + pageLinksPerPage - 1;  	}  	if (HighNum > Convert.ToInt32 (_totalPages)) {  		HighNum = Convert.ToInt32 (_totalPages);  		if (HighNum - LowNum < pageLinksPerPage) {  			LowNum = HighNum - pageLinksPerPage + 1;  		}  	}  	if (HighNum > Convert.ToInt32 (_totalPages)) {  		HighNum = Convert.ToInt32 (_totalPages);  	}  	if (LowNum < 1) {  		LowNum = 1;  	}  	int i;  	for (i = LowNum; i <= HighNum; i++) {  		tmpRow = ht.NewRow ();  		tmpRow ["PageNum"] = i;  		ht.Rows.Add (tmpRow);  	}  	PageNumbers.DataSource = ht;  	PageNumbers.DataBind ();  }  
Magic Number,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,BindPageNumbers,The following statement contains a magic number: tmpNum = CurrentPage - pageLinksPerPage / 2;  
Magic Number,DotNetNuke.UI.WebControls,PagingControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PagingControl.cs,BindPageNumbers,The following statement contains a magic number: if (CurrentPage > (pageLinksPerPage / 2)) {  	LowNum = Convert.ToInt32 (Math.Floor (tmpNum));  }  
Magic Number,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,CreateChildControls,The following statement contains a magic number: if (is24HourClock) {  	minHour = 0;  	maxHour = 23;  }  
Magic Number,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,CreateChildControls,The following statement contains a magic number: maxHour = 23;  
Magic Number,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,CreateChildControls,The following statement contains a magic number: for (int i = 0; i <= 59; i++) {  	minutesField.Items.Add (new ListItem (i.ToString ("00")' i.ToString ()));  }  
Magic Number,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,LoadDateControls,The following statement contains a magic number: if (!is24HourClock) {  	if (hour >= 12) {  		hour -= 12;  		isAM = false;  	}  	if (hour == 0) {  		hour = 12;  	}  }  
Magic Number,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,LoadDateControls,The following statement contains a magic number: if (!is24HourClock) {  	if (hour >= 12) {  		hour -= 12;  		isAM = false;  	}  	if (hour == 0) {  		hour = 12;  	}  }  
Magic Number,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,LoadDateControls,The following statement contains a magic number: if (!is24HourClock) {  	if (hour >= 12) {  		hour -= 12;  		isAM = false;  	}  	if (hour == 0) {  		hour = 12;  	}  }  
Magic Number,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,LoadDateControls,The following statement contains a magic number: if (hour >= 12) {  	hour -= 12;  	isAM = false;  }  
Magic Number,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,LoadDateControls,The following statement contains a magic number: if (hour >= 12) {  	hour -= 12;  	isAM = false;  }  
Magic Number,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,LoadDateControls,The following statement contains a magic number: hour -= 12;  
Magic Number,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,LoadDateControls,The following statement contains a magic number: if (hour == 0) {  	hour = 12;  }  
Magic Number,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,LoadDateControls,The following statement contains a magic number: hour = 12;  
Magic Number,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,LoadPostData,The following statement contains a magic number: if (!is24HourClock && postedAMPM.Equals ("PM")) {  	postedValue = postedValue.AddHours (12);  }  
Magic Number,DotNetNuke.UI.WebControls,DateTimeEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DateTimeEditControl.cs,LoadPostData,The following statement contains a magic number: postedValue = postedValue.AddHours (12);  
Magic Number,DotNetNuke.UI.WebControls,DNNRichTextEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRichTextEditControl.cs,CreateChildControls,The following statement contains a magic number: if (EditMode == PropertyEditorMode.Edit) {  	var pnlEditor = new Panel ();  	if (string.IsNullOrEmpty (CssClass)) {  		pnlEditor.CssClass = "dnnLeft";  	} else {  		pnlEditor.CssClass = string.Format ("{0} dnnLeft"' CssClass);  	}  	_richTextEditor = HtmlEditorProvider.Instance ();  	if (_richTextEditor != null) {  		_richTextEditor.ControlID = ID + "edit";  		_richTextEditor.Initialize ();  		_richTextEditor.Height = ControlStyle.Height;  		_richTextEditor.Width = ControlStyle.Width;  		if (_richTextEditor.Height.IsEmpty) {  			_richTextEditor.Height = new Unit (250);  		}  		_richTextEditor.Width = new Unit (400);  	} else {  		_defaultTextEditor = new TextBox {  			ID = ID + "edit"'  			Width = ControlStyle.Width.IsEmpty ? new Unit (300) : ControlStyle.Width'  			Height = ControlStyle.Height.IsEmpty ? new Unit (250) : ControlStyle.Height'  			TextMode = TextBoxMode.MultiLine  		};  		_defaultTextEditor.Attributes.Add ("aria-label"' "editor");  	}  	Controls.Clear ();  	pnlEditor.Controls.Add (TextEditControl);  	Controls.Add (pnlEditor);  }  
Magic Number,DotNetNuke.UI.WebControls,DNNRichTextEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRichTextEditControl.cs,CreateChildControls,The following statement contains a magic number: if (EditMode == PropertyEditorMode.Edit) {  	var pnlEditor = new Panel ();  	if (string.IsNullOrEmpty (CssClass)) {  		pnlEditor.CssClass = "dnnLeft";  	} else {  		pnlEditor.CssClass = string.Format ("{0} dnnLeft"' CssClass);  	}  	_richTextEditor = HtmlEditorProvider.Instance ();  	if (_richTextEditor != null) {  		_richTextEditor.ControlID = ID + "edit";  		_richTextEditor.Initialize ();  		_richTextEditor.Height = ControlStyle.Height;  		_richTextEditor.Width = ControlStyle.Width;  		if (_richTextEditor.Height.IsEmpty) {  			_richTextEditor.Height = new Unit (250);  		}  		_richTextEditor.Width = new Unit (400);  	} else {  		_defaultTextEditor = new TextBox {  			ID = ID + "edit"'  			Width = ControlStyle.Width.IsEmpty ? new Unit (300) : ControlStyle.Width'  			Height = ControlStyle.Height.IsEmpty ? new Unit (250) : ControlStyle.Height'  			TextMode = TextBoxMode.MultiLine  		};  		_defaultTextEditor.Attributes.Add ("aria-label"' "editor");  	}  	Controls.Clear ();  	pnlEditor.Controls.Add (TextEditControl);  	Controls.Add (pnlEditor);  }  
Magic Number,DotNetNuke.UI.WebControls,DNNRichTextEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRichTextEditControl.cs,CreateChildControls,The following statement contains a magic number: if (EditMode == PropertyEditorMode.Edit) {  	var pnlEditor = new Panel ();  	if (string.IsNullOrEmpty (CssClass)) {  		pnlEditor.CssClass = "dnnLeft";  	} else {  		pnlEditor.CssClass = string.Format ("{0} dnnLeft"' CssClass);  	}  	_richTextEditor = HtmlEditorProvider.Instance ();  	if (_richTextEditor != null) {  		_richTextEditor.ControlID = ID + "edit";  		_richTextEditor.Initialize ();  		_richTextEditor.Height = ControlStyle.Height;  		_richTextEditor.Width = ControlStyle.Width;  		if (_richTextEditor.Height.IsEmpty) {  			_richTextEditor.Height = new Unit (250);  		}  		_richTextEditor.Width = new Unit (400);  	} else {  		_defaultTextEditor = new TextBox {  			ID = ID + "edit"'  			Width = ControlStyle.Width.IsEmpty ? new Unit (300) : ControlStyle.Width'  			Height = ControlStyle.Height.IsEmpty ? new Unit (250) : ControlStyle.Height'  			TextMode = TextBoxMode.MultiLine  		};  		_defaultTextEditor.Attributes.Add ("aria-label"' "editor");  	}  	Controls.Clear ();  	pnlEditor.Controls.Add (TextEditControl);  	Controls.Add (pnlEditor);  }  
Magic Number,DotNetNuke.UI.WebControls,DNNRichTextEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRichTextEditControl.cs,CreateChildControls,The following statement contains a magic number: if (EditMode == PropertyEditorMode.Edit) {  	var pnlEditor = new Panel ();  	if (string.IsNullOrEmpty (CssClass)) {  		pnlEditor.CssClass = "dnnLeft";  	} else {  		pnlEditor.CssClass = string.Format ("{0} dnnLeft"' CssClass);  	}  	_richTextEditor = HtmlEditorProvider.Instance ();  	if (_richTextEditor != null) {  		_richTextEditor.ControlID = ID + "edit";  		_richTextEditor.Initialize ();  		_richTextEditor.Height = ControlStyle.Height;  		_richTextEditor.Width = ControlStyle.Width;  		if (_richTextEditor.Height.IsEmpty) {  			_richTextEditor.Height = new Unit (250);  		}  		_richTextEditor.Width = new Unit (400);  	} else {  		_defaultTextEditor = new TextBox {  			ID = ID + "edit"'  			Width = ControlStyle.Width.IsEmpty ? new Unit (300) : ControlStyle.Width'  			Height = ControlStyle.Height.IsEmpty ? new Unit (250) : ControlStyle.Height'  			TextMode = TextBoxMode.MultiLine  		};  		_defaultTextEditor.Attributes.Add ("aria-label"' "editor");  	}  	Controls.Clear ();  	pnlEditor.Controls.Add (TextEditControl);  	Controls.Add (pnlEditor);  }  
Magic Number,DotNetNuke.UI.WebControls,DNNRichTextEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRichTextEditControl.cs,CreateChildControls,The following statement contains a magic number: if (_richTextEditor != null) {  	_richTextEditor.ControlID = ID + "edit";  	_richTextEditor.Initialize ();  	_richTextEditor.Height = ControlStyle.Height;  	_richTextEditor.Width = ControlStyle.Width;  	if (_richTextEditor.Height.IsEmpty) {  		_richTextEditor.Height = new Unit (250);  	}  	_richTextEditor.Width = new Unit (400);  } else {  	_defaultTextEditor = new TextBox {  		ID = ID + "edit"'  		Width = ControlStyle.Width.IsEmpty ? new Unit (300) : ControlStyle.Width'  		Height = ControlStyle.Height.IsEmpty ? new Unit (250) : ControlStyle.Height'  		TextMode = TextBoxMode.MultiLine  	};  	_defaultTextEditor.Attributes.Add ("aria-label"' "editor");  }  
Magic Number,DotNetNuke.UI.WebControls,DNNRichTextEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRichTextEditControl.cs,CreateChildControls,The following statement contains a magic number: if (_richTextEditor != null) {  	_richTextEditor.ControlID = ID + "edit";  	_richTextEditor.Initialize ();  	_richTextEditor.Height = ControlStyle.Height;  	_richTextEditor.Width = ControlStyle.Width;  	if (_richTextEditor.Height.IsEmpty) {  		_richTextEditor.Height = new Unit (250);  	}  	_richTextEditor.Width = new Unit (400);  } else {  	_defaultTextEditor = new TextBox {  		ID = ID + "edit"'  		Width = ControlStyle.Width.IsEmpty ? new Unit (300) : ControlStyle.Width'  		Height = ControlStyle.Height.IsEmpty ? new Unit (250) : ControlStyle.Height'  		TextMode = TextBoxMode.MultiLine  	};  	_defaultTextEditor.Attributes.Add ("aria-label"' "editor");  }  
Magic Number,DotNetNuke.UI.WebControls,DNNRichTextEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRichTextEditControl.cs,CreateChildControls,The following statement contains a magic number: if (_richTextEditor != null) {  	_richTextEditor.ControlID = ID + "edit";  	_richTextEditor.Initialize ();  	_richTextEditor.Height = ControlStyle.Height;  	_richTextEditor.Width = ControlStyle.Width;  	if (_richTextEditor.Height.IsEmpty) {  		_richTextEditor.Height = new Unit (250);  	}  	_richTextEditor.Width = new Unit (400);  } else {  	_defaultTextEditor = new TextBox {  		ID = ID + "edit"'  		Width = ControlStyle.Width.IsEmpty ? new Unit (300) : ControlStyle.Width'  		Height = ControlStyle.Height.IsEmpty ? new Unit (250) : ControlStyle.Height'  		TextMode = TextBoxMode.MultiLine  	};  	_defaultTextEditor.Attributes.Add ("aria-label"' "editor");  }  
Magic Number,DotNetNuke.UI.WebControls,DNNRichTextEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRichTextEditControl.cs,CreateChildControls,The following statement contains a magic number: if (_richTextEditor != null) {  	_richTextEditor.ControlID = ID + "edit";  	_richTextEditor.Initialize ();  	_richTextEditor.Height = ControlStyle.Height;  	_richTextEditor.Width = ControlStyle.Width;  	if (_richTextEditor.Height.IsEmpty) {  		_richTextEditor.Height = new Unit (250);  	}  	_richTextEditor.Width = new Unit (400);  } else {  	_defaultTextEditor = new TextBox {  		ID = ID + "edit"'  		Width = ControlStyle.Width.IsEmpty ? new Unit (300) : ControlStyle.Width'  		Height = ControlStyle.Height.IsEmpty ? new Unit (250) : ControlStyle.Height'  		TextMode = TextBoxMode.MultiLine  	};  	_defaultTextEditor.Attributes.Add ("aria-label"' "editor");  }  
Magic Number,DotNetNuke.UI.WebControls,DNNRichTextEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRichTextEditControl.cs,CreateChildControls,The following statement contains a magic number: if (_richTextEditor.Height.IsEmpty) {  	_richTextEditor.Height = new Unit (250);  }  
Magic Number,DotNetNuke.UI.WebControls,DNNRichTextEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRichTextEditControl.cs,CreateChildControls,The following statement contains a magic number: _richTextEditor.Height = new Unit (250);  
Magic Number,DotNetNuke.UI.WebControls,DNNRichTextEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRichTextEditControl.cs,CreateChildControls,The following statement contains a magic number: _richTextEditor.Width = new Unit (400);  
Magic Number,DotNetNuke.UI.WebControls,DNNRichTextEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRichTextEditControl.cs,CreateChildControls,The following statement contains a magic number: _defaultTextEditor = new TextBox {  	ID = ID + "edit"'  	Width = ControlStyle.Width.IsEmpty ? new Unit (300) : ControlStyle.Width'  	Height = ControlStyle.Height.IsEmpty ? new Unit (250) : ControlStyle.Height'  	TextMode = TextBoxMode.MultiLine  };  
Magic Number,DotNetNuke.UI.WebControls,DNNRichTextEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNRichTextEditControl.cs,CreateChildControls,The following statement contains a magic number: _defaultTextEditor = new TextBox {  	ID = ID + "edit"'  	Width = ControlStyle.Width.IsEmpty ? new Unit (300) : ControlStyle.Width'  	Height = ControlStyle.Height.IsEmpty ? new Unit (250) : ControlStyle.Height'  	TextMode = TextBoxMode.MultiLine  };  
Magic Number,DotNetNuke.UI.WebControls,DNNTimeZoneEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNTimeZoneEditControl.cs,RenderEditMode,The following statement contains a magic number: for (int I = 0; I <= cboTimeZones.Items.Count - 1; I++) {  	string timeZoneValue = cboTimeZones.Items [I].Value;  	string timeZoneName = cboTimeZones.Items [I].Text;  	bool isSelected = cboTimeZones.Items [I].Selected;  	//Add the Value Attribute  	writer.AddAttribute (HtmlTextWriterAttribute.Value' timeZoneValue);  	if (isSelected) {  		//Add the Selected Attribute  		writer.AddAttribute (HtmlTextWriterAttribute.Selected' "selected");  	}  	//Render Option Tag  	writer.RenderBeginTag (HtmlTextWriterTag.Option);  	writer.Write (timeZoneName.PadRight (100).Substring (0' 50));  	writer.RenderEndTag ();  }  
Magic Number,DotNetNuke.UI.WebControls,DNNTimeZoneEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNTimeZoneEditControl.cs,RenderEditMode,The following statement contains a magic number: for (int I = 0; I <= cboTimeZones.Items.Count - 1; I++) {  	string timeZoneValue = cboTimeZones.Items [I].Value;  	string timeZoneName = cboTimeZones.Items [I].Text;  	bool isSelected = cboTimeZones.Items [I].Selected;  	//Add the Value Attribute  	writer.AddAttribute (HtmlTextWriterAttribute.Value' timeZoneValue);  	if (isSelected) {  		//Add the Selected Attribute  		writer.AddAttribute (HtmlTextWriterAttribute.Selected' "selected");  	}  	//Render Option Tag  	writer.RenderBeginTag (HtmlTextWriterTag.Option);  	writer.Write (timeZoneName.PadRight (100).Substring (0' 50));  	writer.RenderEndTag ();  }  
Magic Number,DotNetNuke.UI.WebControls,DNNTimeZoneEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNTimeZoneEditControl.cs,RenderEditMode,The following statement contains a magic number: writer.Write (timeZoneName.PadRight (100).Substring (0' 50));  
Magic Number,DotNetNuke.UI.WebControls,DNNTimeZoneEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNTimeZoneEditControl.cs,RenderEditMode,The following statement contains a magic number: writer.Write (timeZoneName.PadRight (100).Substring (0' 50));  
Magic Number,DotNetNuke.UI.WebControls,VersionEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\VersionEditControl.cs,RenderDropDownList,The following statement contains a magic number: for (int i = 0; i <= 99; i++) {  	//Add the Value Attribute  	writer.AddAttribute (HtmlTextWriterAttribute.Value' i.ToString ());  	if (val == i) {  		//Add the Selected Attribute  		writer.AddAttribute (HtmlTextWriterAttribute.Selected' "selected");  	}  	//Render Option Tag  	writer.RenderBeginTag (HtmlTextWriterTag.Option);  	writer.Write (i.ToString ("00"));  	writer.RenderEndTag ();  }  
Magic Number,DotNetNuke.UI.WebControls,VersionEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\VersionEditControl.cs,RenderViewMode,The following statement contains a magic number: if (Version != null) {  	writer.Write (Version.ToString (3));  }  
Magic Number,DotNetNuke.UI.WebControls,VersionEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\VersionEditControl.cs,RenderViewMode,The following statement contains a magic number: writer.Write (Version.ToString (3));  
Magic Number,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildTable,The following statement contains a magic number: if (editInfo.LabelMode == LabelMode.Bottom || editInfo.LabelMode == LabelMode.Top || editInfo.LabelMode == LabelMode.None) {  	editorCell.ColumnSpan = 2;  	editorRow.Cells.Add (editorCell);  	if (editInfo.LabelMode == LabelMode.Bottom || editInfo.LabelMode == LabelMode.Top) {  		labelCell.ColumnSpan = 2;  		labelRow.Cells.Add (labelCell);  	}  	if (editInfo.LabelMode == LabelMode.Top) {  		tbl.Rows.Add (labelRow);  	}  	tbl.Rows.Add (editorRow);  	if (editInfo.LabelMode == LabelMode.Bottom) {  		tbl.Rows.Add (labelRow);  	}  } else if (editInfo.LabelMode == LabelMode.Left) {  	editorRow.Cells.Add (labelCell);  	editorRow.Cells.Add (editorCell);  	tbl.Rows.Add (editorRow);  } else if (editInfo.LabelMode == LabelMode.Right) {  	editorRow.Cells.Add (editorCell);  	editorRow.Cells.Add (labelCell);  	tbl.Rows.Add (editorRow);  }  
Magic Number,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildTable,The following statement contains a magic number: if (editInfo.LabelMode == LabelMode.Bottom || editInfo.LabelMode == LabelMode.Top || editInfo.LabelMode == LabelMode.None) {  	editorCell.ColumnSpan = 2;  	editorRow.Cells.Add (editorCell);  	if (editInfo.LabelMode == LabelMode.Bottom || editInfo.LabelMode == LabelMode.Top) {  		labelCell.ColumnSpan = 2;  		labelRow.Cells.Add (labelCell);  	}  	if (editInfo.LabelMode == LabelMode.Top) {  		tbl.Rows.Add (labelRow);  	}  	tbl.Rows.Add (editorRow);  	if (editInfo.LabelMode == LabelMode.Bottom) {  		tbl.Rows.Add (labelRow);  	}  } else if (editInfo.LabelMode == LabelMode.Left) {  	editorRow.Cells.Add (labelCell);  	editorRow.Cells.Add (editorCell);  	tbl.Rows.Add (editorRow);  } else if (editInfo.LabelMode == LabelMode.Right) {  	editorRow.Cells.Add (editorCell);  	editorRow.Cells.Add (labelCell);  	tbl.Rows.Add (editorRow);  }  
Magic Number,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildTable,The following statement contains a magic number: editorCell.ColumnSpan = 2;  
Magic Number,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildTable,The following statement contains a magic number: if (editInfo.LabelMode == LabelMode.Bottom || editInfo.LabelMode == LabelMode.Top) {  	labelCell.ColumnSpan = 2;  	labelRow.Cells.Add (labelCell);  }  
Magic Number,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildTable,The following statement contains a magic number: labelCell.ColumnSpan = 2;  
Magic Number,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildTable,The following statement contains a magic number: validatorsCell.ColumnSpan = 2;  
Magic Number,DotNetNuke.Entities.Controllers,HostController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Controllers\HostController.cs,GetSettingsFromDatabase,The following statement contains a magic number: try {  	dr = DataProvider.Instance ().GetHostSettings ();  	while (dr.Read ()) {  		string key = dr.GetString (0);  		var config = new ConfigurationSetting {  			Key = key'  			IsSecure = Convert.ToBoolean (dr [2])'  			Value = dr.IsDBNull (1) ? string.Empty : dr.GetString (1)  		};  		dicSettings.Add (key' config);  	}  } catch (Exception ex) {  	Exceptions.LogException (ex);  } finally {  	CBO.CloseDataReader (dr' true);  }  
Magic Number,DotNetNuke.Entities.Controllers,HostController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Controllers\HostController.cs,GetSettingsFromDatabase,The following statement contains a magic number: while (dr.Read ()) {  	string key = dr.GetString (0);  	var config = new ConfigurationSetting {  		Key = key'  		IsSecure = Convert.ToBoolean (dr [2])'  		Value = dr.IsDBNull (1) ? string.Empty : dr.GetString (1)  	};  	dicSettings.Add (key' config);  }  
Missing Default,DotNetNuke.Common.Utilities,DataCache,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\DataCache.cs,ItemRemovedCallback,The following switch statement is missing a default case: switch (removedReason) {  case CacheItemRemovedReason.Removed:  	log.LogTypeKey = EventLogController.EventLogType.CACHE_REMOVED.ToString ();  	break;  case CacheItemRemovedReason.Expired:  	log.LogTypeKey = EventLogController.EventLogType.CACHE_EXPIRED.ToString ();  	break;  case CacheItemRemovedReason.Underused:  	log.LogTypeKey = EventLogController.EventLogType.CACHE_UNDERUSED.ToString ();  	break;  case CacheItemRemovedReason.DependencyChanged:  	log.LogTypeKey = EventLogController.EventLogType.CACHE_DEPENDENCYCHANGED.ToString ();  	break;  }  
Missing Default,DotNetNuke.Common.Utilities,PathUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\PathUtils.cs,GetUserFolderPathElementInternal,The following switch statement is missing a default case: switch (mode) {  case UserFolderElement.Root:  	element = (Convert.ToInt32 (userId) & byteOffset).ToString ("000");  	break;  case UserFolderElement.SubFolder:  	element = userId.ToString ("00").Substring (userId.ToString ("00").Length - subfolderSeedLength' subfolderSeedLength);  	break;  }  
Missing Default,DotNetNuke.Data,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Data\DataProvider.cs,TestDatabaseConnection,The following switch statement is missing a default case: switch (sqlError.Number) {  case 17:  	filteredMessage = "Sql server does not exist or access denied";  	break;  case 4060:  	filteredMessage = "Invalid Database";  	break;  case 18456:  	filteredMessage = "Sql login failed";  	break;  case 1205:  	filteredMessage = "Sql deadlock victim";  	break;  }  
Missing Default,DotNetNuke.Entities.Modules,ModuleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleController.cs,DeserializeModule,The following switch statement is missing a default case: switch (XmlUtils.GetNodeValue (nodeModule.CreateNavigator ()' "visibility")) {  case "Maximized":  	module.Visibility = VisibilityState.Maximized;  	break;  case "Minimized":  	module.Visibility = VisibilityState.Minimized;  	break;  case "None":  	module.Visibility = VisibilityState.None;  	break;  }  
Missing Default,DotNetNuke.Entities.Modules,ControlInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ControlInfo.cs,ReadXmlInternal,The following switch statement is missing a default case: switch (reader.Name) {  case "controlKey":  	ControlKey = reader.ReadElementContentAsString ();  	break;  case "controlSrc":  	ControlSrc = reader.ReadElementContentAsString ();  	break;  case "supportsPartialRendering":  	string elementvalue = reader.ReadElementContentAsString ();  	if (!string.IsNullOrEmpty (elementvalue)) {  		SupportsPartialRendering = bool.Parse (elementvalue);  	}  	break;  }  
Missing Default,DotNetNuke.Entities.Modules,DesktopModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleInfo.cs,WriteXml,The following switch statement is missing a default case: switch (Shareable) {  case ModuleSharing.Supported:  	writer.WriteString ("Supported");  	break;  case ModuleSharing.Unsupported:  	writer.WriteString ("Unsupported");  	break;  }  
Missing Default,DotNetNuke.Entities.Modules,DesktopModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\DesktopModuleInfo.cs,ReadSupportedFeatures,The following switch statement is missing a default case: switch (reader.ReadContentAsString ()) {  case "Portable":  	IsPortable = true;  	break;  case "Searchable":  	IsSearchable = true;  	break;  case "Upgradeable":  	IsUpgradeable = true;  	break;  }  
Missing Default,DotNetNuke.Entities.Modules,ModuleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\ModuleInfo.cs,Fill,The following switch statement is missing a default case: switch (visible) {  case 0:  	Visibility = VisibilityState.Maximized;  	break;  case 1:  	Visibility = VisibilityState.Minimized;  	break;  case 2:  	Visibility = VisibilityState.None;  	break;  }  
Missing Default,DotNetNuke.Entities.Modules,UserModuleBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\UserModuleBase.cs,CompleteUserCreation,The following switch statement is missing a default case: switch (PortalSettings.UserRegistration) {  case (int)Globals.PortalRegistrationType.PrivateRegistration:  	strMessage += Mail.SendMail (newUser' MessageType.UserRegistrationPrivate' PortalSettings);  	//show a message that a portal administrator has to verify the user credentials  	if (string.IsNullOrEmpty (strMessage)) {  		strMessage += Localization.GetString ("PrivateConfirmationMessage"' Localization.SharedResourceFile);  		message = ModuleMessage.ModuleMessageType.GreenSuccess;  	}  	break;  case (int)Globals.PortalRegistrationType.PublicRegistration:  	Mail.SendMail (newUser' MessageType.UserRegistrationPublic' PortalSettings);  	UserController.UserLogin (PortalSettings.PortalId' newUser.Username' newUser.Membership.Password' ""' PortalSettings.PortalName' ""' ref loginStatus' false);  	break;  case (int)Globals.PortalRegistrationType.VerifiedRegistration:  	Mail.SendMail (newUser' MessageType.UserRegistrationVerified' PortalSettings);  	UserController.UserLogin (PortalSettings.PortalId' newUser.Username' newUser.Membership.Password' ""' PortalSettings.PortalName' ""' ref loginStatus' false);  	break;  }  
Missing Default,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseProfileDefinitions,The following switch statement is missing a default case: switch (XmlUtils.GetNodeValueInt (node' "defaultvisibility"' 2)) {  case 0:  	objProfileDefinition.DefaultVisibility = UserVisibilityMode.AllUsers;  	break;  case 1:  	objProfileDefinition.DefaultVisibility = UserVisibilityMode.MembersOnly;  	break;  case 2:  	objProfileDefinition.DefaultVisibility = UserVisibilityMode.AdminOnly;  	break;  }  
Missing Default,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseRoleGroups,The following switch statement is missing a default case: switch (role.RoleType) {  case RoleType.Administrator:  	administratorRoleId = CreateRole (role);  	break;  case RoleType.RegisteredUser:  	registeredRoleId = CreateRole (role);  	break;  case RoleType.Subscriber:  	subscriberRoleId = CreateRole (role);  	break;  case RoleType.None:  	CreateRole (role);  	break;  case RoleType.UnverifiedUser:  	unverifiedRoleId = CreateRole (role);  	break;  }  
Missing Default,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseRoles,The following switch statement is missing a default case: switch (role.RoleType) {  case RoleType.Administrator:  	administratorRoleId = CreateRole (role);  	break;  case RoleType.RegisteredUser:  	registeredRoleId = CreateRole (role);  	break;  case RoleType.Subscriber:  	subscriberRoleId = CreateRole (role);  	break;  case RoleType.None:  	CreateRole (role);  	break;  case RoleType.UnverifiedUser:  	unverifiedRoleId = CreateRole (role);  	break;  }  
Missing Default,DotNetNuke.Entities.Portals,PortalController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\PortalController.cs,ParseTab,The following switch statement is missing a default case: switch (XmlUtils.GetNodeValue (nodeTab' "tabtype"' "").ToLowerInvariant ()) {  case "splashtab":  	portal.SplashTabId = tab.TabID;  	logType = "SplashTab";  	break;  case "hometab":  	portal.HomeTabId = tab.TabID;  	logType = "HomeTab";  	break;  case "logintab":  	portal.LoginTabId = tab.TabID;  	logType = "LoginTab";  	break;  case "usertab":  	portal.UserTabId = tab.TabID;  	logType = "UserTab";  	break;  case "searchtab":  	portal.SearchTabId = tab.TabID;  	logType = "SearchTab";  	break;  case "404tab":  	portal.Custom404TabId = tab.TabID;  	logType = "Custom404Tab";  	break;  case "500tab":  	portal.Custom500TabId = tab.TabID;  	logType = "Custom500Tab";  	break;  }  
Missing Default,DotNetNuke.Entities.Users,MembershipPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Membership\MembershipPropertyAccess.cs,GetProperty,The following switch statement is missing a default case: switch (propertyName.ToLower ()) {  case "approved":  	return (PropertyAccess.Boolean2LocalizedYesNo (objMembership.Approved' formatProvider));  case "createdondate":  	return (objMembership.CreatedDate.ToString (OutputFormat' formatProvider));  case "isonline":  	return (PropertyAccess.Boolean2LocalizedYesNo (objMembership.IsOnLine' formatProvider));  case "lastactivitydate":  	return (objMembership.LastActivityDate.ToString (OutputFormat' formatProvider));  case "lastlockoutdate":  	return (objMembership.LastLockoutDate.ToString (OutputFormat' formatProvider));  case "lastlogindate":  	return (objMembership.LastLoginDate.ToString (OutputFormat' formatProvider));  case "lastpasswordchangedate":  	return (objMembership.LastPasswordChangeDate.ToString (OutputFormat' formatProvider));  case "lockedout":  	return (PropertyAccess.Boolean2LocalizedYesNo (objMembership.LockedOut' formatProvider));  case "objecthydrated":  	return (PropertyAccess.Boolean2LocalizedYesNo (true' formatProvider));  case "password":  	return PropertyAccess.FormatString (objMembership.Password' format);  case "passwordanswer":  	return PropertyAccess.FormatString (objMembership.PasswordAnswer' format);  case "passwordquestion":  	return PropertyAccess.FormatString (objMembership.PasswordQuestion' format);  case "passwordresettoken":  	return PropertyAccess.FormatString (Convert.ToString (objUser.PasswordResetToken)' format);  case "passwordresetexpiration":  	return PropertyAccess.FormatString (objUser.PasswordResetExpiration.ToString (formatProvider)' format);  case "updatepassword":  	return (PropertyAccess.Boolean2LocalizedYesNo (objMembership.UpdatePassword' formatProvider));  case "username":  	return (PropertyAccess.FormatString (objUser.Username' format));  case "email":  	return (PropertyAccess.FormatString (objUser.Email' format));  }  
Missing Default,DotNetNuke.Entities.Users,ProfilePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Profile\ProfilePropertyAccess.cs,CheckAccessLevel,The following switch statement is missing a default case: switch (property.ProfileVisibility.VisibilityMode) {  case UserVisibilityMode.FriendsAndGroups:  	isVisible = IsUser (accessingUser' targetUser);  	if (!isVisible) {  		//Relationships  		foreach (Relationship relationship in property.ProfileVisibility.RelationshipVisibilities) {  			if (targetUser.Social.UserRelationships.Any (userRelationship => (userRelationship.RelationshipId == relationship.RelationshipId && userRelationship.Status == RelationshipStatus.Accepted && ((userRelationship.RelatedUserId == accessingUser.UserID && userRelationship.UserId == targetUser.UserID) || (userRelationship.RelatedUserId == targetUser.UserID && userRelationship.UserId == accessingUser.UserID))))) {  				isVisible = true;  				break;  			}  		}  		//Groups/Roles  		if (property.ProfileVisibility.RoleVisibilities.Any (role => accessingUser.IsInRole (role.RoleName))) {  			isVisible = true;  		}  	}  	break;  case UserVisibilityMode.AllUsers:  	// property is visible to everyone so do nothing  	break;  case UserVisibilityMode.MembersOnly:  	// property visible if accessing user is a member  	isVisible = IsMember (accessingUser);  	break;  case UserVisibilityMode.AdminOnly:  	//accessing user not admin user so property is hidden (unless it is the user him/herself)  	isVisible = IsUser (accessingUser' targetUser);  	break;  }  
Missing Default,DotNetNuke.Entities.Users,UserInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\UserInfo.cs,GetProperty,The following switch statement is missing a default case: switch (propertyName.ToLower ()) {  case "verificationcode":  	if (internScope < Scope.SystemMessages) {  		propertyNotFound = true;  		return PropertyAccess.ContentLocked;  	}  	var ps = new PortalSecurity ();  	var code = ps.EncryptString (PortalID + "-" + UserID' Config.GetDecryptionkey ());  	return code.Replace ("+"' ".").Replace ("/"' "-").Replace ("="' "_");  case "affiliateid":  	if (internScope < Scope.SystemMessages) {  		propertyNotFound = true;  		return PropertyAccess.ContentLocked;  	}  	return (AffiliateID.ToString (outputFormat' formatProvider));  case "displayname":  	if (internScope < Scope.Configuration) {  		propertyNotFound = true;  		return PropertyAccess.ContentLocked;  	}  	return PropertyAccess.FormatString (DisplayName' format);  case "email":  	if (internScope < Scope.DefaultSettings) {  		propertyNotFound = true;  		return PropertyAccess.ContentLocked;  	}  	return (PropertyAccess.FormatString (Email' format));  case "firstname":  	//using profile property is recommended!  	if (internScope < Scope.DefaultSettings) {  		propertyNotFound = true;  		return PropertyAccess.ContentLocked;  	}  	return (PropertyAccess.FormatString (FirstName' format));  case "issuperuser":  	if (internScope < Scope.Debug) {  		propertyNotFound = true;  		return PropertyAccess.ContentLocked;  	}  	return (IsSuperUser.ToString (formatProvider));  case "lastname":  	//using profile property is recommended!  	if (internScope < Scope.DefaultSettings) {  		propertyNotFound = true;  		return PropertyAccess.ContentLocked;  	}  	return (PropertyAccess.FormatString (LastName' format));  case "portalid":  	if (internScope < Scope.Configuration) {  		propertyNotFound = true;  		return PropertyAccess.ContentLocked;  	}  	return (PortalID.ToString (outputFormat' formatProvider));  case "userid":  	if (internScope < Scope.DefaultSettings) {  		propertyNotFound = true;  		return PropertyAccess.ContentLocked;  	}  	return (UserID.ToString (outputFormat' formatProvider));  case "username":  	if (internScope < Scope.DefaultSettings) {  		propertyNotFound = true;  		return PropertyAccess.ContentLocked;  	}  	return (PropertyAccess.FormatString (Username' format));  case "fullname":  	//fullname is obsolete' it will return DisplayName  	if (internScope < Scope.Configuration) {  		propertyNotFound = true;  		return PropertyAccess.ContentLocked;  	}  	return (PropertyAccess.FormatString (DisplayName' format));  case "roles":  	if (currentScope < Scope.SystemMessages) {  		propertyNotFound = true;  		return PropertyAccess.ContentLocked;  	}  	return (PropertyAccess.FormatString (string.Join ("' "' Roles)' format));  }  
Missing Default,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,BuildCrossTabDataSet,The following switch statement is missing a default case: switch (arrField [1]) {  case "Decimal":  	row [arrField [0]] = 0;  	break;  case "String":  	row [arrField [0]] = "";  	break;  }  
Missing Default,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,ImportUrl,The following switch statement is missing a default case: switch (urlType) {  case TabType.File:  	if (Int32.TryParse (url.Replace ("FileID="' "")' out intId)) {  		var objFile = FileManager.Instance.GetFile (intId);  		if (objFile == null) {  			//fileId does not exist in the portal  			strUrl = "";  		}  	} else {  		//failed to get fileId  		strUrl = "";  	}  	break;  case TabType.Member:  	if (Int32.TryParse (url.Replace ("UserID="' "")' out intId)) {  		if (UserController.GetUserById (portalSettings.PortalId' intId) == null) {  			//UserId does not exist for this portal  			strUrl = "";  		}  	} else {  		//failed to get UserId  		strUrl = "";  	}  	break;  case TabType.Tab:  	if (Int32.TryParse (url' out intId)) {  		if (TabController.Instance.GetTab (intId' portalSettings.PortalId' false) == null) {  			//the tab does not exist  			strUrl = "";  		}  	} else {  		//failed to get TabId  		strUrl = "";  	}  	break;  }  
Missing Default,DotNetNuke.Common,Globals,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Globals.cs,GetRoleName,The following switch statement is missing a default case: switch (Convert.ToString (RoleID)) {  case glbRoleAllUsers:  	return glbRoleAllUsersName;  case glbRoleUnauthUser:  	return glbRoleUnauthUserName;  }  
Missing Default,DotNetNuke.Common,Initialize,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Initialize.cs,CheckVersion,The following switch statement is missing a default case: switch (Globals.Status) {  case Globals.UpgradeStatus.Install:  	if (autoUpgrade || useWizard) {  		retValue = useWizard ? "~/Install/InstallWizard.aspx" : "~/Install/Install.aspx?mode=install";  	} else {  		CreateUnderConstructionPage (Server);  		retValue = "~/Install/UnderConstruction.htm";  		Logger.Info ("UnderConstruction page was shown because application needs to be installed' and both the AutoUpgrade and UseWizard AppSettings in web.config are false. Use /install/install.aspx?mode=install to install application. ");  	}  	break;  case Globals.UpgradeStatus.Upgrade:  	if (autoUpgrade || useWizard) {  		retValue = useWizard ? "~/Install/UpgradeWizard.aspx" : "~/Install/Install.aspx?mode=upgrade";  	} else {  		CreateUnderConstructionPage (Server);  		retValue = "~/Install/UnderConstruction.htm";  		Logger.Info ("UnderConstruction page was shown because application needs to be upgraded' and both the AutoUpgrade and UseInstallWizard AppSettings in web.config are false. Use /install/install.aspx?mode=upgrade to upgrade application. ");  	}  	break;  case Globals.UpgradeStatus.Error:  	// here we need to check if the application is already installed  	// or is in pre-install state.  	// see http://support.dotnetnuke.com/project/DNN/2/item/26053 for scenarios  	bool isInstalled = Globals.IsInstalled ();  	if (!isInstalled && (useWizard || autoUpgrade)) {  		// app has never been installed' and either Wizard or Autoupgrade is configured  		CreateUnderConstructionPage (Server);  		retValue = "~/Install/UnderConstruction.htm";  		Logger.Error ("UnderConstruction page was shown because we cannot ascertain the application was ever installed' and there is no working database connection. Check database connectivity before continuing. ");  	} else {  		//500 Error - Redirect to ErrorPage  		if ((HttpContext.Current != null)) {  			if (!isInstalled) {  				Logger.Error ("The connection to the database has failed' the application is not installed yet' and both AutoUpgrade and UseInstallWizard are not set in web.config' a 500 error page will be shown to visitors");  			} else {  				Logger.Error ("The connection to the database has failed' however' the application is already completely installed' a 500 error page will be shown to visitors");  			}  			string url = "~/ErrorPage.aspx?status=500&error=Site Unavailable&error2=Connection To The Database Failed";  			HttpContext.Current.Response.Clear ();  			HttpContext.Current.Server.Transfer (url);  		}  	}  	break;  }  
Missing Default,DotNetNuke.Common.Utils,NetworkUtils,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Common\Utilities\NetworkUtils.cs,GetAddress,The following switch statement is missing a default case: switch (AddressFormat) {  case AddressType.IPv4:  	addrFamily = AddressFamily.InterNetwork;  	break;  case AddressType.IPv6:  	addrFamily = AddressFamily.InterNetworkV6;  	break;  }  
Missing Default,DotNetNuke.ComponentModel,SimpleContainer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\ComponentModel\SimpleContainer.cs,RegisterComponent,The following switch statement is missing a default case: switch (lifestyle) {  case ComponentLifeStyleType.Transient:  	builder = new TransientComponentBuilder (name' type);  	break;  case ComponentLifeStyleType.Singleton:  	builder = new SingletonComponentBuilder (name' type);  	break;  }  
Missing Default,DotNetNuke.Entities.Content.Taxonomy,Vocabulary,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Content\Taxonomy\Vocabulary.cs,Fill,The following switch statement is missing a default case: switch (Convert.ToInt16 (dr ["VocabularyTypeID"])) {  case 1:  	Type = VocabularyType.Simple;  	break;  case 2:  	Type = VocabularyType.Hierarchy;  	break;  }  
Missing Default,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,MoveTab,The following switch statement is missing a default case: switch (type) {  case TabMoveType.Top:  	MoveTabBefore (tab' siblingTabs.First ().TabID);  	break;  case TabMoveType.Bottom:  	MoveTabAfter (tab' siblingTabs.Last ().TabID);  	break;  case TabMoveType.Up:  	MoveTabBefore (tab' siblingTabs.ElementAt (tabIndex - 1).TabID);  	break;  case TabMoveType.Down:  	MoveTabAfter (tab' siblingTabs.ElementAt (tabIndex + 1).TabID);  	break;  case TabMoveType.Promote:  	MoveTabAfter (tab' tab.ParentId);  	break;  case TabMoveType.Demote:  	MoveTabToParent (tab' siblingTabs.ElementAt (tabIndex - 1).TabID);  	break;  }  
Missing Default,DotNetNuke.Entities.Tabs,TabController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\TabController.cs,SerializeTab,The following switch statement is missing a default case: switch (tab.TabType) {  case TabType.Normal:  	urlNode.Attributes.Append (XmlUtils.CreateAttribute (tabXml' "type"' "Normal"));  	break;  case TabType.Tab:  	urlNode.Attributes.Append (XmlUtils.CreateAttribute (tabXml' "type"' "Tab"));  	//Get the tab being linked to  	TabInfo tempTab = TabController.Instance.GetTab (Int32.Parse (tab.Url)' tab.PortalID' false);  	if (tempTab != null) {  		urlNode.InnerXml = tempTab.TabPath;  	}  	break;  case TabType.File:  	urlNode.Attributes.Append (XmlUtils.CreateAttribute (tabXml' "type"' "File"));  	IFileInfo file = FileManager.Instance.GetFile (Int32.Parse (tab.Url.Substring (7)));  	urlNode.InnerXml = file.RelativePath;  	break;  case TabType.Url:  	urlNode.Attributes.Append (XmlUtils.CreateAttribute (tabXml' "type"' "Url"));  	break;  }  
Missing Default,DotNetNuke.Entities.Tabs,TabInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabInfo.cs,GetProperty,The following switch statement is missing a default case: switch (lowerPropertyName) {  case "tabid":  	propertyNotFound = false;  	result = (TabID.ToString (outputFormat' formatProvider));  	break;  case "taborder":  	isPublic = false;  	propertyNotFound = false;  	result = (TabOrder.ToString (outputFormat' formatProvider));  	break;  case "portalid":  	propertyNotFound = false;  	result = (PortalID.ToString (outputFormat' formatProvider));  	break;  case "tabname":  	propertyNotFound = false;  	result = PropertyAccess.FormatString (LocalizedTabName' format);  	break;  case "isvisible":  	isPublic = false;  	propertyNotFound = false;  	result = (PropertyAccess.Boolean2LocalizedYesNo (IsVisible' formatProvider));  	break;  case "parentid":  	isPublic = false;  	propertyNotFound = false;  	result = (ParentId.ToString (outputFormat' formatProvider));  	break;  case "level":  	isPublic = false;  	propertyNotFound = false;  	result = (Level.ToString (outputFormat' formatProvider));  	break;  case "iconfile":  	propertyNotFound = false;  	result = PropertyAccess.FormatString (IconFile' format);  	break;  case "iconfilelarge":  	propertyNotFound = false;  	result = PropertyAccess.FormatString (IconFileLarge' format);  	break;  case "disablelink":  	isPublic = false;  	propertyNotFound = false;  	result = (PropertyAccess.Boolean2LocalizedYesNo (DisableLink' formatProvider));  	break;  case "title":  	propertyNotFound = false;  	result = PropertyAccess.FormatString (Title' format);  	break;  case "description":  	propertyNotFound = false;  	result = PropertyAccess.FormatString (Description' format);  	break;  case "keywords":  	propertyNotFound = false;  	result = PropertyAccess.FormatString (KeyWords' format);  	break;  case "isdeleted":  	isPublic = false;  	propertyNotFound = false;  	result = (PropertyAccess.Boolean2LocalizedYesNo (IsDeleted' formatProvider));  	break;  case "url":  	propertyNotFound = false;  	result = PropertyAccess.FormatString (Url' format);  	break;  case "skinsrc":  	isPublic = false;  	propertyNotFound = false;  	result = PropertyAccess.FormatString (SkinSrc' format);  	break;  case "containersrc":  	isPublic = false;  	propertyNotFound = false;  	result = PropertyAccess.FormatString (ContainerSrc' format);  	break;  case "tabpath":  	propertyNotFound = false;  	result = PropertyAccess.FormatString (TabPath' format);  	break;  case "startdate":  	isPublic = false;  	propertyNotFound = false;  	result = (StartDate.ToString (outputFormat' formatProvider));  	break;  case "enddate":  	isPublic = false;  	propertyNotFound = false;  	result = (EndDate.ToString (outputFormat' formatProvider));  	break;  case "haschildren":  	isPublic = false;  	propertyNotFound = false;  	result = (PropertyAccess.Boolean2LocalizedYesNo (HasChildren' formatProvider));  	break;  case "refreshinterval":  	isPublic = false;  	propertyNotFound = false;  	result = (RefreshInterval.ToString (outputFormat' formatProvider));  	break;  case "pageheadtext":  	isPublic = false;  	propertyNotFound = false;  	result = PropertyAccess.FormatString (PageHeadText' format);  	break;  case "skinpath":  	isPublic = false;  	propertyNotFound = false;  	result = PropertyAccess.FormatString (SkinPath' format);  	break;  case "skindoctype":  	isPublic = false;  	propertyNotFound = false;  	result = PropertyAccess.FormatString (SkinDoctype' format);  	break;  case "containerpath":  	isPublic = false;  	propertyNotFound = false;  	result = PropertyAccess.FormatString (ContainerPath' format);  	break;  case "issupertab":  	isPublic = false;  	propertyNotFound = false;  	result = (PropertyAccess.Boolean2LocalizedYesNo (IsSuperTab' formatProvider));  	break;  case "fullurl":  	propertyNotFound = false;  	result = PropertyAccess.FormatString (FullUrl' format);  	break;  case "sitemappriority":  	propertyNotFound = false;  	result = PropertyAccess.FormatString (SiteMapPriority.ToString ()' format);  	break;  }  
Missing Default,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,ForceDeleteVersion,The following switch statement is missing a default case: switch (versionToDeleteDetail.Action) {  case TabVersionDetailAction.Added:  	_moduleController.DeleteTabModule (tabId' versionToDeleteDetail.ModuleId' true);  	break;  case TabVersionDetailAction.Modified:  	var peviousVersionDetail = previousVersionDetails.SingleOrDefault (tv => tv.ModuleId == versionToDeleteDetail.ModuleId);  	if (peviousVersionDetail != null && (peviousVersionDetail.PaneName != versionToDeleteDetail.PaneName || peviousVersionDetail.ModuleOrder != versionToDeleteDetail.ModuleOrder)) {  		_moduleController.UpdateModuleOrder (tabId' peviousVersionDetail.ModuleId' peviousVersionDetail.ModuleOrder' peviousVersionDetail.PaneName);  	}  	if (versionToDeleteDetail.ModuleVersion != Null.NullInteger) {  		DiscardDetail (tabId' versionToDeleteDetail);  	}  	break;  }  
Missing Default,DotNetNuke.Entities.Tabs.TabVersions,TabVersionBuilder,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Tabs\TabVersions\TabVersionBuilder.cs,GetSnapShot,The following switch statement is missing a default case: switch (tabVersionDetail.Action) {  case TabVersionDetailAction.Added:  case TabVersionDetailAction.Modified:  	if (versionModules.ContainsKey (tabVersionDetail.ModuleId)) {  		versionModules [tabVersionDetail.ModuleId] = JoinVersionDetails (versionModules [tabVersionDetail.ModuleId]' tabVersionDetail);  	} else {  		versionModules.Add (tabVersionDetail.ModuleId' tabVersionDetail);  	}  	break;  case TabVersionDetailAction.Deleted:  	if (versionModules.ContainsKey (tabVersionDetail.ModuleId)) {  		versionModules.Remove (tabVersionDetail.ModuleId);  	}  	break;  case TabVersionDetailAction.Reset:  	versionModules.Clear ();  	break;  }  
Missing Default,DotNetNuke.Security.Permissions,PermissionProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\PermissionProvider.cs,HasModuleAccess,The following switch statement is missing a default case: switch (accessLevel) {  case SecurityAccessLevel.Anonymous:  	isAuthorized = true;  	break;  case SecurityAccessLevel.View:  	if (ModulePermissionController.CanViewModule (moduleConfiguration)) {  		isAuthorized = true;  	}  	break;  case SecurityAccessLevel.ViewPermissions:  	isAuthorized = TabPermissionController.CanAddContentToPage (tab);  	break;  case SecurityAccessLevel.Edit:  	if (!((moduleConfiguration.IsShared && moduleConfiguration.IsShareableViewOnly) && TabPermissionController.CanAddContentToPage (tab))) {  		if (string.IsNullOrEmpty (permissionKey)) {  			permissionKey = "CONTENT'DELETE'EXPORT'IMPORT'MANAGE";  		}  		if (TabPermissionController.CanAddContentToPage (tab)) {  			//Need to check for Deny Edit at the Module Level  			if (permissionKey == "CONTENT") {  				isAuthorized = !IsDeniedModulePermission (moduleConfiguration' permissionKey);  			} else {  				isAuthorized = true;  			}  		} else {  			// Need to check if it was denied at Tab level  			if (!IsDeniedTabPermission (tab' "CONTENT'EDIT")) {  				isAuthorized = HasModulePermission (moduleConfiguration' permissionKey);  			}  		}  	}  	break;  case SecurityAccessLevel.Admin:  	if (!((moduleConfiguration.IsShared && moduleConfiguration.IsShareableViewOnly) && TabPermissionController.CanAddContentToPage (tab))) {  		isAuthorized = TabPermissionController.CanAddContentToPage (tab);  	}  	break;  case SecurityAccessLevel.Host:  	break;  }  
Missing Default,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name) {  case "LogGUID":  	LogGUID = reader.ReadContentAsString ();  	break;  case "LogFileID":  	LogFileID = reader.ReadContentAsString ();  	break;  case "LogTypeKey":  	LogTypeKey = reader.ReadContentAsString ();  	break;  case "LogUserID":  	LogUserID = reader.ReadContentAsInt ();  	break;  case "LogEventID":  	LogEventID = reader.ReadContentAsInt ();  	break;  case "LogUserName":  	LogUserName = reader.ReadContentAsString ();  	break;  case "LogPortalID":  	LogPortalID = reader.ReadContentAsInt ();  	break;  case "LogPortalName":  	LogPortalName = reader.ReadContentAsString ();  	break;  case "LogCreateDate":  	LogCreateDate = DateTime.Parse (reader.ReadContentAsString ());  	break;  case "LogCreateDateNum":  	LogCreateDateNum = reader.ReadContentAsLong ();  	break;  case "BypassBuffering":  	BypassBuffering = bool.Parse (reader.ReadContentAsString ());  	break;  case "LogServerName":  	LogServerName = reader.ReadContentAsString ();  	break;  case "LogConfigID":  	LogConfigID = reader.ReadContentAsString ();  	break;  }  
Missing Default,DotNetNuke.Services.Log.EventLog,LogInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Log\EventLog\LogInfo.cs,IsSystemType,The following switch statement is missing a default case: switch (PropName) {  case "LogGUID":  case "LogFileID":  case "LogTypeKey":  case "LogCreateDate":  case "LogCreateDateNum":  case "LogPortalID":  case "LogPortalName":  case "LogUserID":  case "LogUserName":  case "BypassBuffering":  case "LogServerName":  	return true;  }  
Missing Default,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,SendNotification,The following switch statement is missing a default case: switch (Action) {  case UserRoleActions.add:  case UserRoleActions.update:  	string preferredLocale = objUser.Profile.PreferredLocale;  	if (string.IsNullOrEmpty (preferredLocale)) {  		preferredLocale = PortalSettings.DefaultLanguage;  	}  	var ci = new CultureInfo (preferredLocale);  	UserRoleInfo objUserRole = RoleController.Instance.GetUserRole (PortalSettings.PortalId' objUser.UserID' objRole.RoleID);  	Custom.Add (Null.IsNull (objUserRole.EffectiveDate) ? DateTime.Today.ToString ("g"' ci) : objUserRole.EffectiveDate.ToString ("g"' ci));  	Custom.Add (Null.IsNull (objUserRole.ExpiryDate) ? "-" : objUserRole.ExpiryDate.ToString ("g"' ci));  	break;  case UserRoleActions.delete:  	Custom.Add ("");  	break;  }  
Missing Default,DotNetNuke.Security.Roles,RoleController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Obsolete\RoleController.cs,UpdateUserRole,The following switch statement is missing a default case: switch (Frequency) {  case "N":  	ExpiryDate = Null.NullDate;  	break;  case "O":  	ExpiryDate = new DateTime (9999' 12' 31);  	break;  case "D":  	ExpiryDate = ExpiryDate.AddDays (Period);  	break;  case "W":  	ExpiryDate = ExpiryDate.AddDays (Period * 7);  	break;  case "M":  	ExpiryDate = ExpiryDate.AddMonths (Period);  	break;  case "Y":  	ExpiryDate = ExpiryDate.AddYears (Period);  	break;  }  
Missing Default,DotNetNuke.Security.Roles,RoleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleInfo.cs,ReadXml,The following switch statement is missing a default case: switch (reader.ReadElementContentAsString ()) {  case "securityrole":  	SecurityMode = SecurityMode.SecurityRole;  	break;  case "socialgroup":  	SecurityMode = SecurityMode.SocialGroup;  	break;  case "both":  	SecurityMode = SecurityMode.Both;  	break;  }  
Missing Default,DotNetNuke.Security.Roles,RoleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleInfo.cs,WriteXml,The following switch statement is missing a default case: switch (RoleType) {  case RoleType.Administrator:  	writer.WriteElementString ("roletype"' "adminrole");  	break;  case RoleType.RegisteredUser:  	writer.WriteElementString ("roletype"' "registeredrole");  	break;  case RoleType.Subscriber:  	writer.WriteElementString ("roletype"' "subscriberrole");  	break;  case RoleType.UnverifiedUser:  	writer.WriteElementString ("roletype"' "unverifiedrole");  	break;  case RoleType.None:  	writer.WriteElementString ("roletype"' "none");  	break;  }  
Missing Default,DotNetNuke.Security.Roles,RoleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleInfo.cs,WriteXml,The following switch statement is missing a default case: switch (SecurityMode) {  case SecurityMode.SecurityRole:  	writer.WriteElementString ("securitymode"' "securityrole");  	break;  case SecurityMode.SocialGroup:  	writer.WriteElementString ("securitymode"' "socialgroup");  	break;  case SecurityMode.Both:  	writer.WriteElementString ("securitymode"' "both");  	break;  }  
Missing Default,DotNetNuke.Security.Roles,RoleInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Roles\RoleInfo.cs,WriteXml,The following switch statement is missing a default case: switch (Status) {  case RoleStatus.Pending:  	writer.WriteElementString ("status"' "pending");  	break;  case RoleStatus.Disabled:  	writer.WriteElementString ("status"' "disabled");  	break;  case RoleStatus.Approved:  	writer.WriteElementString ("status"' "approved");  	break;  }  
Missing Default,DotNetNuke.Entities.Urls,AdvancedFriendlyUrlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedFriendlyUrlProvider.cs,TransformStandardPath,The following switch statement is missing a default case: switch (newPath.ToLower ()) {  case "/ctl/privacy":  	newTabPath = "Privacy";  	newPath = newPath.ToLower ().Replace ("/ctl/privacy"' "");  	break;  case "/ctl/login":  	newTabPath = "Login";  	newPath = newPath.ToLower ().Replace ("/ctl/login"' "");  	break;  case "/ctl/register":  	newTabPath = "Register";  	newPath = newPath.ToLower ().Replace ("/ctl/register"' "");  	break;  case "/ctl/terms":  	newTabPath = "Terms";  	newPath = newPath.ToLower ().Replace ("/ctl/terms"' "");  	break;  }  
Missing Default,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,ProcessRequest,The following switch statement is missing a default case: switch (result.Action) {  case ActionType.Redirect301:  	response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  	response.RedirectPermanent (result.FinalUrl);  	break;  case ActionType.Redirect302:  	response.AppendHeader ("X-Redirect-Reason"' result.Reason.ToString ().Replace ("_"' " ") + " Requested");  	response.Redirect (result.FinalUrl);  	break;  case ActionType.Output404:  	response.AppendHeader ("X-Result-Reason"' result.Reason.ToString ().Replace ("_"' " "));  	Handle404OrException (settings' context' null' result' true' showDebug);  	break;  }  
Missing Default,DotNetNuke.Entities.Urls,AdvancedUrlRewriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\AdvancedUrlRewriter.cs,CheckForDebug,The following switch statement is missing a default case: switch (debugValue.ToLower ()) {  case "true":  	retVal = true;  	break;  }  
Missing Default,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following switch statement is missing a default case: switch (rdr.NodeType) {  case XmlNodeType.Element:  	if (rdr.Name == "parameterReplace") {  		//now set up the action  		string portalIdRaw = rdr.GetAttribute ("portalId");  		int rulePortalId = -1;  		if (portalIdRaw != null) {  			Int32.TryParse (portalIdRaw' out rulePortalId);  		}  		//807 : if portal specific then import all regardless of portal id specified  		if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific) {  			int actionCount = 0;  			string tabIdRaw = rdr.GetAttribute ("tabIds") ?? rdr.GetAttribute ("tabId");  			string tabNames = rdr.GetAttribute ("tabNames");  			string name = rdr.GetAttribute ("name");  			List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref messages);  			foreach (int tabId in tabIds) {  				var action = new ParameterReplaceAction {  					LookFor = rdr.GetAttribute ("lookFor")'  					ReplaceWith = rdr.GetAttribute ("replaceWith")'  					PortalId = portalId'  					Name = name'  					TabId = tabId  				};  				string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  				bool changeToSiteRoot;  				bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  				action.ChangeToSiteRoot = changeToSiteRoot;  				List<ParameterReplaceAction> tabActionCol;  				if (actions.ContainsKey (action.TabId)) {  					tabActionCol = actions [action.TabId];  				} else {  					tabActionCol = new List<ParameterReplaceAction> ();  					actions.Add (action.TabId' tabActionCol);  				}  				tabActionCol.Add (action);  				actionCount++;  				messages.Add (name + " replace actions added:" + actionCount.ToString ());  			}  		}  	}  	break;  case XmlNodeType.EndElement:  	break;  }  
Missing Default,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following switch statement is missing a default case: switch (rdr.NodeType) {  case XmlNodeType.Element:  	if (rdr.Name == "parameterRedirect") {  		var tabMessages = new List<string> ();  		int actionCount = 0;  		//now set up the action  		string portalIdRaw = rdr.GetAttribute ("rulePortalId");  		if (string.IsNullOrEmpty (portalIdRaw)) {  			portalIdRaw = rdr.GetAttribute ("portalId");  		}  		int rulePortalId = -1;  		if (portalIdRaw != null) {  			Int32.TryParse (portalIdRaw' out rulePortalId);  		}  		if (rulePortalId == portalId || rulePortalId == -1 || portalSpecific)//if portal specific' all rules are assumed to belong to the portal  		 {  			string tabIdRaw = rdr.GetAttribute ("tabIds");  			string tabNames = rdr.GetAttribute ("tabNames");  			string name = rdr.GetAttribute ("name");  			string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  			string fromDefaultRaw = rdr.GetAttribute ("fromDefault");  			string changeToSiteRootRaw = rdr.GetAttribute ("changeToSiteRoot");  			bool fromDefault;  			bool fromSiteRoot;  			bool changeToSiteRoot;  			bool.TryParse (fromDefaultRaw' out fromDefault);  			bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  			bool.TryParse (changeToSiteRootRaw' out changeToSiteRoot);  			List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref tabMessages);  			foreach (int tabId in tabIds) {  				var action = new ParameterRedirectAction {  					PortalId = portalId'  					LookFor = rdr.GetAttribute ("lookFor")'  					RedirectTo = rdr.GetAttribute ("redirectTo")'  					Name = name'  					Action = rdr.GetAttribute ("action")'  					ChangeToSiteRoot = changeToSiteRoot'  					TabId = tabId  				};  				if (fromDefault) {  					//check for 'fromDefault' attribute  					action.ForDefaultPage = true;  					action.TabId = -2;  				} else {  					//or support the older convention' which was to include a tabid of -2  					action.ForDefaultPage = tabId == -2;  				}  				if (fromSiteRoot) {  					action.TabId = -3;  					//site root marker  				}  				List<ParameterRedirectAction> tabActionCol;  				if (actions.ContainsKey (action.TabId)) {  					tabActionCol = actions [action.TabId];  				} else {  					tabActionCol = new List<ParameterRedirectAction> ();  					actions.Add (action.TabId' tabActionCol);  				}  				tabActionCol.Add (action);  				actionCount++;  			}  			messages.Add (name + " redirect actions added:" + actionCount.ToString ());  		}  		if (tabMessages.Count > 0) {  			messages.AddRange (tabMessages);  		}  	}  	break;  case XmlNodeType.EndElement:  	break;  }  
Missing Default,DotNetNuke.Entities.Urls,CollectionExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\CollectionExtensions.cs,LoadFromXmlFile,The following switch statement is missing a default case: switch (rdr.NodeType) {  case XmlNodeType.Element:  	if (rdr.Name == "parameterRewrite") {  		string portalIdRaw = rdr.GetAttribute ("portalId");  		int rulePortalId = -1;  		int actionCount = 0;  		if (portalIdRaw != null) {  			Int32.TryParse (portalIdRaw' out rulePortalId);  		}  		if (rulePortalId == portalId || rulePortalId == -1 || portalId == -1 || portalSpecific) {  			//now set up the action  			string tabIdRaw = rdr.GetAttribute ("tabIds");  			string tabNames = rdr.GetAttribute ("tabNames");  			string name = rdr.GetAttribute ("name");  			string fromSiteRootRaw = rdr.GetAttribute ("fromSiteRoot");  			bool fromSiteRoot;  			bool.TryParse (fromSiteRootRaw' out fromSiteRoot);  			List<int> tabIds = XmlHelpers.TabIdsFromAttributes (tabIdRaw' tabNames' portalId' ref messages);  			foreach (int tabId in tabIds) {  				var action = new ParameterRewriteAction {  					LookFor = rdr.GetAttribute ("lookFor")'  					RewriteTo = rdr.GetAttribute ("rewriteTo")'  					Name = name'  					TabId = tabId  				};  				if (fromSiteRoot) {  					action.ForSiteRoot = true;  					action.TabId = -3;  				} else {  					//older rule specified tabid -3 meant site root  					action.ForSiteRoot = tabId == -3;  				}  				action.PortalId = portalId;  				SharedList<ParameterRewriteAction> tabActionCol;  				if (actions.ContainsKey (action.TabId)) {  					tabActionCol = actions [action.TabId];  				} else {  					tabActionCol = new SharedList<ParameterRewriteAction> ();  					actions.Add (action.TabId' tabActionCol);  				}  				tabActionCol.Add (action);  				actionCount++;  			}  			messages.Add (name + " rewrite actions added:" + actionCount.ToString ());  		}  	}  	break;  case XmlNodeType.EndElement:  	break;  }  
Missing Default,DotNetNuke.Entities.Urls,ExtensionUrlProviderController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\ExtensionUrlProviderController.cs,TransformFriendlyUrlPath,The following switch statement is missing a default case: switch (status) {  case 301:  	result.Action = ActionType.Redirect301;  	result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  	result.FinalUrl = location;  	break;  case 302:  	result.Action = ActionType.Redirect302;  	result.Reason = RedirectReason.Module_Provider_Rewrite_Redirect;  	result.FinalUrl = location;  	break;  case 404:  	result.Action = ActionType.Output404;  	break;  case 500:  	result.Action = ActionType.Output500;  	break;  }  
Missing Default,DotNetNuke.Entities.Urls,RedirectController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectController.cs,CheckForParameterRedirect,The following switch statement is missing a default case: switch (parmRedirect.Action) {  case "301":  	result.Action = ActionType.Redirect301;  	break;  case "302":  	result.Action = ActionType.Redirect302;  	break;  case "404":  	result.Action = ActionType.Output404;  	break;  }  
Missing Default,DotNetNuke.Entities.Urls,RedirectTokens,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectTokens.cs,GetRedirectReasonRewriteToken,The following switch statement is missing a default case: switch (reason) {  case RedirectReason.Deleted_Page:  	result = "&rr=dl";  	break;  case RedirectReason.Disabled_Page:  	//838 : handle disabled page separately  	result = "&rr=db";  	break;  case RedirectReason.Tab_Permanent_Redirect:  	result = "&rr=pr";  	break;  case RedirectReason.Spaces_Replaced:  	result = "&rr=sr";  	break;  case RedirectReason.Site_Root_Home:  	result = "&rr=hp";  	break;  case RedirectReason.Diacritic_Characters:  	result = "&rr=dc";  	break;  case RedirectReason.User_Profile_Url:  	result = "&rr=up";  	break;  case RedirectReason.Custom_Redirect:  	result = "&rr=cr";  	break;  }  
Missing Default,DotNetNuke.Entities.Urls,RedirectTokens,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RedirectTokens.cs,GetActionFromRewritePath,The following switch statement is missing a default case: switch (tk.ToLower ()) {  case "do301":  	if (val.ToLower () == "true") {  		action = ActionType.Redirect301;  	} else {  		if (val.ToLower () == "check") {  			action = ActionType.CheckFor301;  		}  	}  	break;  case "do404":  	if (val.ToLower () == "true") {  		action = ActionType.Output404;  	}  	break;  case "do302":  	if (val.ToLower () == "true") {  		action = ActionType.Redirect302;  	}  	break;  }  
Missing Default,DotNetNuke.Entities.Urls,RewriteController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\RewriteController.cs,SetRewriteParameters,The following switch statement is missing a default case: switch (key.ToLower ()) {  case "tabid":  	int tabidtemp;  	if (Int32.TryParse (val' out tabidtemp)) {  		result.TabId = tabidtemp;  	}  	break;  case "portalid":  	int pid;  	if (Int32.TryParse (val' out pid)) {  		result.PortalId = pid;  	}  	break;  case "language":  	result.CultureCode = val;  	break;  case "ctl":  	//786: force redirect for ctl/terms or ctl/privacy  	RequestRedirectOnBuiltInUrl (val' rewritePath' result);  	break;  }  
Missing Default,DotNetNuke.Entities.Urls,TabIndexController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\TabIndexController.cs,AddCustomRedirectsToDictionary,The following switch statement is missing a default case: switch (redirect.HttpStatus) {  case "301":  	redirectedRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (rewritePath' ActionType.Redirect301' RedirectReason.Custom_Redirect);  	break;  case "302":  	redirectedRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (rewritePath' ActionType.Redirect302' RedirectReason.Custom_Redirect);  	break;  case "404":  	redirectedRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (rewritePath' ActionType.Output404' RedirectReason.Custom_Redirect);  	break;  case "200":  	//when there is a 200' then replace the 'standard' path  	newRewritePath = RedirectTokens.AddRedirectReasonToRewritePath (newRewritePath' ActionType.CheckFor301' RedirectReason.Custom_Redirect);  	//672 : replacement urls have preference over all redirects' deleted tabs and standard urls  	duplicateHandlingPreference = UrlEnums.TabKeyPreference.TabOK;  	break;  }  
Missing Default,DotNetNuke.Entities.Urls,UrlEnumHelpers,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Urls\UrlEnumHelpers.cs,FromString,The following switch statement is missing a default case: switch (value.ToLower ()) {  case "mobile":  	result = BrowserTypes.Mobile;  	break;  }  
Missing Default,DotNetNuke.Entities.Users.Social,RelationshipControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Users\Social\RelationshipControllerImpl.cs,ManageUserRelationshipStatus,The following switch statement is missing a default case: switch (newStatus) {  case RelationshipStatus.None:  	save = true;  	break;  case RelationshipStatus.Pending:  	save = true;  	break;  case RelationshipStatus.Accepted:  	save = true;  	break;  }  
Missing Default,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RequestRegistration,The following switch statement is missing a default case: switch (jsname) {  case CommonJs.DnnPlugins:  	RequestRegistration (CommonJs.jQueryUI);  	RequestRegistration (CommonJs.HoverIntent);  	AddPreInstallorLegacyItemRequest (jsname);  	return;  case CommonJs.HoverIntent:  case CommonJs.jQueryFileUpload:  	AddPreInstallorLegacyItemRequest (jsname);  	return;  }  
Missing Default,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RequestRegistration,The following switch statement is missing a default case: switch (specific) {  case SpecificVersion.Latest:  	RequestHighestVersionLibraryRegistration (jsname);  	return;  case SpecificVersion.LatestMajor:  case SpecificVersion.LatestMinor:  	if (RequestLooseVersionLibraryRegistration (jsname' version' specific)) {  		return;  	}  	break;  case SpecificVersion.Exact:  	RequestSpecificVersionLibraryRegistration (jsname' version);  	return;  }  
Missing Default,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,GetScriptLocation,The following switch statement is missing a default case: switch (js.PreferredScriptLocation) {  case ScriptLocation.PageHead:  	return "DnnPageHeaderProvider";  case ScriptLocation.BodyBottom:  	return "DnnFormBottomProvider";  case ScriptLocation.BodyTop:  	return "DnnBodyProvider";  }  
Missing Default,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,HandlePreInstallorLegacyItemRequests,The following switch statement is missing a default case: switch (legacyScript) {  case CommonJs.jQuery:  	if (GetHighestVersionLibrary (CommonJs.jQuery) == null) {  		ClientResourceManager.RegisterScript (page' jQuery.GetJQueryScriptReference ()' FileOrder.Js.jQuery' "DnnPageHeaderProvider");  	}  	if (GetHighestVersionLibrary (CommonJs.jQueryMigrate) == null) {  		ClientResourceManager.RegisterScript (page' jQuery.GetJQueryMigrateScriptReference ()' FileOrder.Js.jQueryMigrate' "DnnPageHeaderProvider");  	}  	break;  case CommonJs.jQueryUI:  	//register dependency  	if (GetHighestVersionLibrary (CommonJs.jQuery) == null) {  		ClientResourceManager.RegisterScript (page' jQuery.GetJQueryScriptReference ()' FileOrder.Js.jQuery' "DnnPageHeaderProvider");  	}  	if (GetHighestVersionLibrary (CommonJs.jQueryMigrate) == null) {  		ClientResourceManager.RegisterScript (page' jQuery.GetJQueryMigrateScriptReference ()' FileOrder.Js.jQueryMigrate' "DnnPageHeaderProvider");  	}  	//actual jqueryui  	if (GetHighestVersionLibrary (CommonJs.jQueryUI) == null) {  		ClientResourceManager.RegisterScript (page' jQuery.GetJQueryUIScriptReference ()' FileOrder.Js.jQueryUI' "DnnPageHeaderProvider");  	}  	break;  case CommonJs.DnnPlugins:  	//This method maybe called when Page.Form hasn't initialized yet' in that situation if needed should reference dnn js manually.  	//such as call jQuery.RegisterDnnJQueryPlugins in Control.OnInit.  	if (page.Form != null) {  	}  	//register dependency  	if (GetHighestVersionLibrary (CommonJs.jQuery) == null) {  		ClientResourceManager.RegisterScript (page' jQuery.GetJQueryScriptReference ()' FileOrder.Js.jQuery' "DnnPageHeaderProvider");  	}  	if (GetHighestVersionLibrary (CommonJs.jQueryMigrate) == null) {  		ClientResourceManager.RegisterScript (page' jQuery.GetJQueryMigrateScriptReference ()' FileOrder.Js.jQueryMigrate' "DnnPageHeaderProvider");  	}  	//actual jqueryui  	if (GetHighestVersionLibrary (CommonJs.jQueryUI) == null) {  		ClientResourceManager.RegisterScript (page' jQuery.GetJQueryUIScriptReference ()' FileOrder.Js.jQueryUI' "DnnPageHeaderProvider");  	}  	if (GetHighestVersionLibrary (CommonJs.HoverIntent) == null) {  		ClientResourceManager.RegisterScript (page' "~/Resources/Shared/Scripts/jquery/jquery.hoverIntent.min.js"' FileOrder.Js.HoverIntent);  	}  	//no package for this - CRM will deduplicate  	ClientResourceManager.RegisterScript (page' "~/Resources/Shared/Scripts/dnn.jquery.js");  	break;  case CommonJs.jQueryFileUpload:  	ClientResourceManager.RegisterScript (page' "~/Resources/Shared/Scripts/jquery/jquery.iframe-transport.js");  	ClientResourceManager.RegisterScript (page' "~/Resources/Shared/Scripts/jquery/jquery.fileupload.js");  	break;  case CommonJs.HoverIntent:  	if (GetHighestVersionLibrary (CommonJs.HoverIntent) == null) {  		ClientResourceManager.RegisterScript (page' "~/Resources/Shared/Scripts/jquery/jquery.hoverIntent.min.js"' FileOrder.Js.HoverIntent);  	}  	break;  }  
Missing Default,DotNetNuke.Framework.JavaScriptLibraries,JavaScript,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\JavaScriptLibraries\JavaScript.cs,RegisterClientReference,The following switch statement is missing a default case: switch (reference) {  case ClientAPI.ClientNamespaceReferences.dnn:  case ClientAPI.ClientNamespaceReferences.dnn_dom:  	if (HttpContextSource.Current.Items.Contains (LegacyPrefix + "dnn.js")) {  		break;  	}  	ClientResourceManager.RegisterScript (page' ClientAPI.ScriptPath + "dnn.js"' 12);  	HttpContextSource.Current.Items.Add (LegacyPrefix + "dnn.js"' true);  	page.ClientScript.RegisterClientScriptBlock (page.GetType ()' "dnn.js"' "");  	if (!ClientAPI.BrowserSupportsFunctionality (ClientAPI.ClientFunctionality.SingleCharDelimiters)) {  		ClientAPI.RegisterClientVariable (page' "__scdoff"' "1"' true);  	}  	if (!ClientAPI.UseExternalScripts) {  		ClientAPI.RegisterEmbeddedResource (page' "dnn.scripts.js"' typeof(ClientAPI));  	}  	break;  case ClientAPI.ClientNamespaceReferences.dnn_dom_positioning:  	RegisterClientReference (page' ClientAPI.ClientNamespaceReferences.dnn);  	ClientResourceManager.RegisterScript (page' ClientAPI.ScriptPath + "dnn.dom.positioning.js"' 13);  	break;  }  
Missing Default,DotNetNuke.Framework,SecurityPolicy,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\SecurityPolicy.cs,HasPermissions,The following switch statement is missing a default case: switch (permission) {  case AspNetHostingPermission:  	if (HasAspNetHostingPermission () == false) {  		_HasPermission = false;  	}  	break;  case ReflectionPermission:  	if (HasReflectionPermission () == false) {  		_HasPermission = false;  	}  	break;  case UnManagedCodePermission:  	if (HasUnManagedCodePermission () == false) {  		_HasPermission = false;  	}  	break;  case WebPermission:  	if (HasWebPermission () == false) {  		_HasPermission = false;  	}  	break;  }  
Missing Default,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Replace,The following switch statement is missing a default case: switch (filterScope) {  case FilterScope.SystemList:  	listEntryHostInfos = listController.GetListEntryInfoItems (listName' ""' Null.NullInteger);  	inputString = listEntryHostInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' removeItem.Value' options));  	break;  case FilterScope.SystemAndPortalList:  	settings = PortalController.Instance.GetCurrentPortalSettings ();  	listEntryHostInfos = listController.GetListEntryInfoItems (listName' ""' Null.NullInteger);  	listEntryPortalInfos = listController.GetListEntryInfoItems (listName + "-" + settings.PortalId' ""' settings.PortalId);  	inputString = listEntryHostInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' removeItem.Value' options));  	inputString = listEntryPortalInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' removeItem.Value' options));  	break;  case FilterScope.PortalList:  	settings = PortalController.Instance.GetCurrentPortalSettings ();  	listEntryPortalInfos = listController.GetListEntryInfoItems (listName + "-" + settings.PortalId' ""' settings.PortalId);  	inputString = listEntryPortalInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' removeItem.Value' options));  	break;  }  
Missing Default,DotNetNuke.Security,PortalSecurity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\PortalSecurity.cs,Remove,The following switch statement is missing a default case: switch (filterScope) {  case FilterScope.SystemList:  	listEntryHostInfos = listController.GetListEntryInfoItems (listName' ""' Null.NullInteger);  	inputString = listEntryHostInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' string.Empty' options));  	break;  case FilterScope.SystemAndPortalList:  	settings = PortalController.Instance.GetCurrentPortalSettings ();  	listEntryHostInfos = listController.GetListEntryInfoItems (listName' ""' Null.NullInteger);  	listEntryPortalInfos = listController.GetListEntryInfoItems (listName + "-" + settings.PortalId' ""' settings.PortalId);  	inputString = listEntryHostInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' string.Empty' options));  	inputString = listEntryPortalInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' string.Empty' options));  	break;  case FilterScope.PortalList:  	settings = PortalController.Instance.GetCurrentPortalSettings ();  	listEntryPortalInfos = listController.GetListEntryInfoItems (listName + "-" + settings.PortalId' ""' settings.PortalId);  	inputString = listEntryPortalInfos.Aggregate (inputString' (current' removeItem) => Regex.Replace (current' @"\b" + Regex.Escape (removeItem.Text) + @"\b"' string.Empty' options));  	break;  }  
Missing Default,DotNetNuke.Security.Membership,AspNetMembershipProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Membership\AspNetMembershipProvider.cs,CreateMemberhipUser,The following switch statement is missing a default case: switch (status) {  case MembershipCreateStatus.DuplicateEmail:  	createStatus = UserCreateStatus.DuplicateEmail;  	break;  case MembershipCreateStatus.DuplicateProviderUserKey:  	createStatus = UserCreateStatus.DuplicateProviderUserKey;  	break;  case MembershipCreateStatus.DuplicateUserName:  	createStatus = UserCreateStatus.DuplicateUserName;  	break;  case MembershipCreateStatus.InvalidAnswer:  	createStatus = UserCreateStatus.InvalidAnswer;  	break;  case MembershipCreateStatus.InvalidEmail:  	createStatus = UserCreateStatus.InvalidEmail;  	break;  case MembershipCreateStatus.InvalidPassword:  	createStatus = UserCreateStatus.InvalidPassword;  	break;  case MembershipCreateStatus.InvalidProviderUserKey:  	createStatus = UserCreateStatus.InvalidProviderUserKey;  	break;  case MembershipCreateStatus.InvalidQuestion:  	createStatus = UserCreateStatus.InvalidQuestion;  	break;  case MembershipCreateStatus.InvalidUserName:  	createStatus = UserCreateStatus.InvalidUserName;  	break;  case MembershipCreateStatus.ProviderError:  	createStatus = UserCreateStatus.ProviderError;  	break;  case MembershipCreateStatus.UserRejected:  	createStatus = UserCreateStatus.UserRejected;  	break;  }  
Missing Default,DotNetNuke.Services.Exceptions,ExceptionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Exceptions\ExceptionInfo.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name) {  case "AssemblyVersion":  	AssemblyVersion = reader.ReadContentAsString ();  	break;  case "PortalId":  	PortalId = reader.ReadContentAsInt ();  	break;  case "UserId":  	UserId = reader.ReadContentAsInt ();  	break;  case "TabId":  	TabId = reader.ReadContentAsInt ();  	break;  case "RawUrl":  	RawUrl = reader.ReadContentAsString ();  	break;  case "Referrer":  	Referrer = reader.ReadContentAsString ();  	break;  case "UserAgent":  	UserAgent = reader.ReadContentAsString ();  	break;  case "ExceptionHash":  	ExceptionHash = reader.ReadContentAsString ();  	break;  case "Message":  	Message = reader.ReadContentAsString ();  	break;  case "StackTrace":  	StackTrace = reader.ReadContentAsString ();  	break;  case "InnerMessage":  	InnerMessage = reader.ReadContentAsString ();  	break;  case "InnerStackTrace":  	InnerStackTrace = reader.ReadContentAsString ();  	break;  case "Source":  	Source = reader.ReadContentAsString ();  	break;  case "FileName":  	FileName = reader.ReadContentAsString ();  	break;  case "FileLineNumber":  	FileLineNumber = reader.ReadContentAsInt ();  	break;  case "FileColumnNumber":  	FileColumnNumber = reader.ReadContentAsInt ();  	break;  case "Method":  	Method = reader.ReadContentAsString ();  	break;  }  
Missing Default,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following switch statement is missing a default case: switch (pi.PropertyType.Name) {  case "Int32":  	pi.SetValue (imageTransform' Convert.ToInt32 (parameters [key])' null);  	break;  case "String":  	pi.SetValue (imageTransform' parameters [key]' null);  	break;  }  
Missing Default,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,GenerateImage,The following switch statement is missing a default case: switch (size) {  case "xxs":  	width = 16;  	height = 16;  	break;  case "xs":  	width = 32;  	height = 32;  	break;  case "s":  	width = 50;  	height = 50;  	break;  case "l":  	width = 64;  	height = 64;  	break;  case "xl":  	width = 128;  	height = 128;  	break;  case "xxl":  	width = 256;  	height = 256;  	break;  }  
Missing Default,DotNetNuke.Services.GeneratedImage,DnnImageHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\GeneratedImage\DnnImageHandler.cs,ReadSettings,The following switch statement is missing a default case: switch (name) {  case "enableclientcache":  	EnableClientCache = Convert.ToBoolean (setting [1]);  	break;  case "clientcacheexpiration":  	ClientCacheExpiration = TimeSpan.FromSeconds (Convert.ToInt32 (setting [1]));  	break;  case "enableservercache":  	EnableServerCache = Convert.ToBoolean (setting [1]);  	break;  case "servercacheexpiration":  	DiskImageStore.PurgeInterval = TimeSpan.FromSeconds (Convert.ToInt32 (setting [1]));  	break;  case "allowstandalone":  	AllowStandalone = Convert.ToBoolean (setting [1]);  	break;  case "logsecurity":  	LogSecurity = Convert.ToBoolean (setting [1]);  	break;  case "imagecompression":  	ImageCompression = Convert.ToInt32 (setting [1]);  	break;  case "alloweddomains":  	AllowedDomains = setting [1].Split (''');  	break;  case "enableipcount":  	EnableIPCount = Convert.ToBoolean (setting [1]);  	break;  case "ipcountmax":  	IPCountMaxCount = Convert.ToInt32 (setting [1]);  	break;  case "ipcountpurgeinterval":  	IPCountPurgeInterval = TimeSpan.FromSeconds (Convert.ToInt32 (setting [1]));  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Installers,AssemblyInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\AssemblyInstaller.cs,InstallFile,The following switch statement is missing a default case: switch (returnCode) {  case 0:  	//Assembly Does Not Exist  	Log.AddInfo (Util.ASSEMBLY_Added + " - " + file.FullName);  	break;  case 1:  	//Older version of Assembly Exists  	Log.AddInfo (Util.ASSEMBLY_Updated + " - " + file.FullName);  	break;  case 2:  case 3:  	//Assembly already Registered  	Log.AddInfo (Util.ASSEMBLY_Registered + " - " + file.FullName);  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Installers,SkinInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\SkinInstaller.cs,ProcessFile,The following switch statement is missing a default case: switch (file.Extension) {  case "htm":  case "html":  case "ascx":  case "css":  	if (file.Path.ToLower ().IndexOf (Globals.glbAboutPage.ToLower ()) < 0) {  		SkinFiles.Add (PhysicalBasePath + file.FullName);  	}  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Installers,SkinInstaller,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installers\SkinInstaller.cs,Install,The following switch statement is missing a default case: switch (Path.GetExtension (skinFile)) {  case ".htm":  	SkinController.AddSkin (SkinPackage.SkinPackageID' skinFile.Replace ("htm"' "ascx"));  	break;  case ".html":  	SkinController.AddSkin (SkinPackage.SkinPackageID' skinFile.Replace ("html"' "ascx"));  	break;  case ".ascx":  	SkinController.AddSkin (SkinPackage.SkinPackageID' skinFile);  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,DeleteExtensionPackage,The following switch statement is missing a default case: switch (package.PackageType) {  case "Auth_System":  	AuthenticationInfo authSystem = AuthenticationController.GetAuthenticationServiceByPackageID (package.PackageID);  	if (authSystem != null) {  		AuthenticationController.DeleteAuthentication (authSystem);  	}  	break;  case "CoreLanguagePack":  	LanguagePackInfo languagePack = LanguagePackController.GetLanguagePackByPackage (package.PackageID);  	if (languagePack != null) {  		LanguagePackController.DeleteLanguagePack (languagePack);  	}  	break;  case "Module":  	var controller = new DesktopModuleController ();  	DesktopModuleInfo desktopModule = DesktopModuleController.GetDesktopModuleByPackageID (package.PackageID);  	if (desktopModule != null) {  		controller.DeleteDesktopModule (desktopModule);  	}  	break;  case "SkinObject":  	SkinControlInfo skinControl = SkinControlController.GetSkinControlByPackageID (package.PackageID);  	if (skinControl != null) {  		SkinControlController.DeleteSkinControl (skinControl);  	}  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,CanDeletePackage,The following switch statement is missing a default case: switch (package.PackageType) {  case "Skin":  case "Container":  	//Need to get path of skin being deleted so we can call the public CanDeleteSkin function in the SkinController  	string strRootSkin = package.PackageType == "Skin" ? SkinController.RootSkin : SkinController.RootContainer;  	SkinPackageInfo _SkinPackageInfo = SkinController.GetSkinByPackageID (package.PackageID);  	string strFolderPath = Path.Combine (_SkinPackageInfo.PortalID == Null.NullInteger ? Path.Combine (Globals.HostMapPath' strRootSkin) : Path.Combine (portalSettings.HomeSystemDirectoryMapPath' strRootSkin)' _SkinPackageInfo.SkinName);  	bCanDelete = SkinController.CanDeleteSkin (strFolderPath' portalSettings.HomeSystemDirectoryMapPath);  	if (_SkinPackageInfo.PortalID != Null.NullInteger) {  		//To be compliant with all versions  		strFolderPath = Path.Combine (Path.Combine (portalSettings.HomeDirectoryMapPath' strRootSkin)' _SkinPackageInfo.SkinName);  		bCanDelete = bCanDelete && SkinController.CanDeleteSkin (strFolderPath' portalSettings.HomeDirectoryMapPath);  	}  	break;  case "Provider":  	//Check if the provider is the default provider  	XmlDocument configDoc = Config.Load ();  	string providerName = package.Name;  	if (providerName.IndexOf ("."' StringComparison.Ordinal) > Null.NullInteger) {  		providerName = providerName.Substring (providerName.IndexOf ("."' StringComparison.Ordinal) + 1);  	}  	switch (providerName) {  	case "SchedulingProvider":  		providerName = "DNNScheduler";  		break;  	case "SearchIndexProvider":  		providerName = "ModuleIndexProvider";  		break;  	case "SearchProvider":  		providerName = "SearchDataStoreProvider";  		break;  	}  	XPathNavigator providerNavigator = configDoc.CreateNavigator ().SelectSingleNode ("/configuration/dotnetnuke/*[@defaultProvider='" + providerName + "']");  	bCanDelete = (providerNavigator == null);  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,CanDeletePackage,The following switch statement is missing a default case: switch (providerName) {  case "SchedulingProvider":  	providerName = "DNNScheduler";  	break;  case "SearchIndexProvider":  	providerName = "ModuleIndexProvider";  	break;  case "SearchProvider":  	providerName = "SearchDataStoreProvider";  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Packages,PackageController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Packages\PackageController.cs,ParsePackage,The following switch statement is missing a default case: switch (packageType.ToLower ()) {  case "package":  	nav = rootNav.SelectSingleNode ("packages/package");  	break;  case "module":  case "languagepack":  case "skinobject":  	nav = Installer.ConvertLegacyNavigator (rootNav' new InstallerInfo ()).SelectSingleNode ("packages/package");  	break;  }  
Missing Default,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,SaveString,The following switch statement is missing a default case: switch (resourceType) {  case CustomizedLocale.Host:  	resourceFileName = resourceFileName.Replace (".resx"' ".Host.resx");  	break;  case CustomizedLocale.Portal:  	resourceFileName = resourceFileName.Replace (".resx"' ".Portal-" + portalSettings.PortalId + ".resx");  	break;  }  
Missing Default,DotNetNuke.Services.Localization,LocalizationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Localization\LocalizationProvider.cs,TryGetFromResourceFile,The following switch statement is missing a default case: switch (resourceType) {  case CustomizedLocale.Host:  	resourceFileName = resourceFile.Replace (".resx"' ".Host.resx");  	break;  case CustomizedLocale.Portal:  	resourceFileName = resourceFile.Replace (".resx"' ".Portal-" + portalID + ".resx");  	break;  }  
Missing Default,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,RephraseSearchText,The following switch statement is missing a default case: switch (c) {  case '"':  	insideQuote = !insideQuote;  	if (!insideQuote) {  		newPhraseBulder.Append (currentWord + " ");  		currentWord.Clear ();  	}  	break;  case ' ':  	if (!insideQuote && useWildCard) {  		// end of a word; we need to append a wild card to search when needed  		newPhraseBulder.Append (FixLastWord (currentWord.ToString ().Trim ()' allowLeadingWildcard) + " ");  		currentWord.Clear ();  	}  	break;  }  
Missing Default,DotNetNuke.Services.Search.Internals,SearchHelperImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchHelperImpl.cs,CleanSearchPhrase,The following switch statement is missing a default case: switch (c) {  case '\u02BA':  // 'ʺ' Modifier Letter Double Prime  case '\u02EE':  // 'ˮ' Modifier Letter Double Apostrophe  case '\u00AB':  // [LEFT-POINTING DOUBLE ANGLE QUOTATION MARK]  case '\u00BB':  // [RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK]  case '\u201C':  // [LEFT DOUBLE QUOTATION MARK]  case '\u201D':  // [RIGHT DOUBLE QUOTATION MARK]  case '\u201E':  // [DOUBLE LOW-9 QUOTATION MARK]  case '\u2033':  // [DOUBLE PRIME]  case '\u2036':  // [REVERSED DOUBLE PRIME]  case '\u275D':  // [HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT]  case '\u275E':  // [HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT]  case '\u276E':  // [HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT]  case '\u276F':  // [HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT]  case '\uFF02':  	// [FULLWIDTH QUOTATION MARK]  	chars [pos] = '"';  	// Quotation Mark  	hasExactMatch = true;  	break;  case '\u0009':  // HT' Horizontal Tab  case '\u000A':  // LF' Line feed  case '\u000B':  // VT' Vertical Tab  case '\u000C':  // FF' Form feed  case '\u000D':  // CR' Carriage return  case '\u00A0':  	// NBSP' No-break space  	chars [pos] = ' ';  	// space  	break;  }  
Missing Default,DotNetNuke.Services.Search.Internals,SearchQueryStringParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\SearchQueryStringParser.cs,GetLastModifiedDate,The following switch statement is missing a default case: switch (date.ToLower ()) {  case "day":  	result = DateTime.UtcNow.AddDays (-1);  	break;  case "week":  	result = DateTime.UtcNow.AddDays (-7);  	break;  case "month":  	result = DateTime.UtcNow.AddMonths (-1);  	break;  case "quarter":  	result = DateTime.UtcNow.AddMonths (-3);  	break;  case "year":  	result = DateTime.UtcNow.AddYears (-1);  	break;  }  
Missing Default,DotNetNuke.Services.Search.Internals,InternalSearchControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Search\Internals\InternalSearchControllerImpl.cs,AddSearchDocumentParamters,The following switch statement is missing a default case: switch (key) {  case Constants.TitleTag:  	if (_titleBoost > 0 && _titleBoost != Constants.StandardLuceneBoost) {  		field.Boost = _titleBoost / 10f;  	}  	break;  case Constants.SubjectTag:  	if (_contentBoost > 0 && _contentBoost != Constants.StandardLuceneBoost) {  		field.Boost = _contentBoost / 10f;  	}  	break;  case Constants.CommentsTag:  	if (_descriptionBoost > 0 && _descriptionBoost != Constants.StandardLuceneBoost) {  		field.Boost = _descriptionBoost / 10f;  	}  	break;  case Constants.AuthorNameTag:  	if (_authorBoost > 0 && _authorBoost != Constants.StandardLuceneBoost) {  		field.Boost = _authorBoost / 10f;  	}  	break;  }  
Missing Default,DotNetNuke.Services.Tokens,PropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\PropertyAccess.cs,GetObjectProperty,The following switch statement is missing a default case: switch (objProperty.PropertyType.Name) {  case "String":  	return FormatString (Convert.ToString (propValue)' strFormat);  case "Boolean":  	return (Boolean2LocalizedYesNo (Convert.ToBoolean (propValue)' formatProvider));  case "DateTime":  case "Double":  case "Single":  case "Int32":  case "Int64":  	if (strFormat == string.Empty) {  		strFormat = "g";  	}  	return (((IFormattable)propValue).ToString (strFormat' formatProvider));  }  
Missing Default,DotNetNuke.Services.Tokens,TicksPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Tokens\PropertyAccess\TicksPropertyAccess.cs,GetProperty,The following switch statement is missing a default case: switch (propertyName.ToLower ()) {  case "now":  	return DateTime.Now.Ticks.ToString (formatProvider);  case "today":  	return DateTime.Today.Ticks.ToString (formatProvider);  case "ticksperday":  	return TimeSpan.TicksPerDay.ToString (formatProvider);  }  
Missing Default,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,RemoveCoreModule,The following switch statement is missing a default case: switch (parentTabName) {  case "Host":  	var tab = TabController.Instance.GetTabByName ("Host"' Null.NullInteger' Null.NullInteger);  	if (tab != null) {  		moduleDefId = RemoveModule (desktopModuleName' tabName' tab.TabID' removeTab);  	}  	break;  case "Admin":  	var portals = PortalController.Instance.GetPortals ();  	//Iterate through the Portals to remove the Module from the Tab  	for (int intPortal = 0; intPortal <= portals.Count - 1; intPortal++) {  		var portal = (PortalInfo)portals [intPortal];  		moduleDefId = RemoveModule (desktopModuleName' tabName' portal.AdminTabId' removeTab);  	}  	break;  }  
Missing Default,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,InitialiseHostSettings,The following switch statement is missing a default case: switch (settingName) {  case "HostURL":  	if (string.IsNullOrEmpty (settingValue)) {  		settingValue = domainName;  	}  	break;  case "HostEmail":  	if (string.IsNullOrEmpty (settingValue)) {  		settingValue = "support@" + domainName;  		//Remove any folders  		settingValue = settingValue.Substring (0' settingValue.IndexOf ("/"));  		//Remove port number  		if (settingValue.IndexOf (":") != -1) {  			settingValue = settingValue.Substring (0' settingValue.IndexOf (":"));  		}  	}  	break;  }  
Missing Default,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,IsNETFrameworkCurrent,The following switch statement is missing a default case: switch (version) {  case "3.5":  	//Try and instantiate a 3.5 Class  	if (Reflection.CreateType ("System.Data.Linq.DataContext"' true) != null) {  		isCurrent = true;  	}  	break;  case "4.0":  	//Look for requestValidationMode attribute  	XmlDocument configFile = Config.Load ();  	XPathNavigator configNavigator = configFile.CreateNavigator ().SelectSingleNode ("//configuration/system.web/httpRuntime|//configuration/location/system.web/httpRuntime");  	if (configNavigator != null && !string.IsNullOrEmpty (configNavigator.GetAttribute ("requestValidationMode"' ""))) {  		isCurrent = true;  	}  	break;  case "4.5":  	//Try and instantiate a 4.5 Class  	if (Reflection.CreateType ("System.Reflection.ReflectionContext"' true) != null) {  		isCurrent = true;  	}  	break;  }  
Missing Default,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,TryUpgradeNETFramework,The following switch statement is missing a default case: switch (Globals.NETFrameworkVersion.ToString (2)) {  case "3.5":  	if (!IsNETFrameworkCurrent ("3.5")) {  		//Upgrade to .NET 3.5  		string upgradeFile = string.Format ("{0}\\Config\\Net35.config"' Globals.InstallMapPath);  		string message = UpdateConfig (upgradeFile' ApplicationVersion' ".NET 3.5 Upgrade");  		if (string.IsNullOrEmpty (message)) {  			//Remove old AJAX file  			FileSystemUtils.DeleteFile (Path.Combine (Globals.ApplicationMapPath' "bin\\System.Web.Extensions.dll"));  			//Log Upgrade  			EventLogController.Instance.AddLog ("UpgradeNet"' "Upgraded Site to .NET 3.5"' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.HOST_ALERT);  		} else {  			//Log Failed Upgrade  			EventLogController.Instance.AddLog ("UpgradeNet"' string.Format ("Upgrade to .NET 3.5 failed. Error reported during attempt to update:{0}"' message)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.HOST_ALERT);  		}  	}  	break;  case "4.0":  	if (!IsNETFrameworkCurrent ("4.0")) {  		//Upgrade to .NET 4.0  		string upgradeFile = string.Format ("{0}\\Config\\Net40.config"' Globals.InstallMapPath);  		string strMessage = UpdateConfig (upgradeFile' ApplicationVersion' ".NET 4.0 Upgrade");  		EventLogController.Instance.AddLog ("UpgradeNet"' string.IsNullOrEmpty (strMessage) ? "Upgraded Site to .NET 4.0" : string.Format ("Upgrade to .NET 4.0 failed. Error reported during attempt to update:{0}"' strMessage)' PortalController.Instance.GetCurrentPortalSettings ()' UserController.Instance.GetCurrentUserInfo ().UserID' EventLogController.EventLogType.HOST_ALERT);  	}  	break;  }  
Missing Default,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following switch statement is missing a default case: switch (version.ToString (3)) {  case "3.2.3":  	UpgradeToVersion323 ();  	break;  case "4.4.0":  	UpgradeToVersion440 ();  	break;  case "4.7.0":  	UpgradeToVersion470 ();  	break;  case "4.8.2":  	UpgradeToVersion482 ();  	break;  case "5.0.0":  	UpgradeToVersion500 ();  	break;  case "5.0.1":  	UpgradeToVersion501 ();  	break;  case "5.1.0":  	UpgradeToVersion510 ();  	break;  case "5.1.1.0":  	UpgradeToVersion511 ();  	break;  case "5.1.3":  	UpgradeToVersion513 ();  	break;  case "5.2.0":  	UpgradeToVersion520 ();  	break;  case "5.2.1":  	UpgradeToVersion521 ();  	break;  case "5.3.0":  	UpgradeToVersion530 ();  	break;  case "5.4.0":  	UpgradeToVersion540 ();  	break;  case "5.4.3":  	UpgradeToVersion543 ();  	break;  case "5.5.0":  	UpgradeToVersion550 ();  	break;  case "5.6.0":  	UpgradeToVersion560 ();  	break;  case "5.6.2":  	UpgradeToVersion562 ();  	break;  case "6.0.0":  	UpgradeToVersion600 ();  	break;  case "6.0.1":  	UpgradeToVersion601 ();  	break;  case "6.0.2":  	UpgradeToVersion602 ();  	break;  case "6.1.0":  	UpgradeToVersion610 ();  	break;  case "6.1.2":  	UpgradeToVersion612 ();  	break;  case "6.1.3":  	UpgradeToVersion613 ();  	break;  case "6.2.0":  	UpgradeToVersion620 ();  	break;  case "6.2.1":  	UpgradeToVersion621 ();  	break;  case "6.2.3":  	UpgradeToVersion623 ();  	break;  case "6.2.4":  	UpgradeToVersion624 ();  	break;  case "7.0.0":  	UpgradeToVersion700 ();  	break;  case "7.1.0":  	UpgradeToVersion710 ();  	break;  case "7.1.1":  	UpgradeToVersion711 ();  	break;  case "7.1.2":  	UpgradeToVersion712 ();  	break;  case "7.2.0":  	UpgradeToVersion720 ();  	break;  case "7.2.1":  	UpgradeToVersion721 ();  	break;  case "7.2.2":  	UpgradeToVersion722 ();  	break;  case "7.3.0":  	UpgradeToVersion730 ();  	break;  case "7.3.2":  	UpgradeToVersion732 ();  	break;  case "7.3.3":  	UpgradeToVersion733 ();  	break;  case "7.4.0":  	UpgradeToVersion740 ();  	break;  case "7.4.2":  	UpgradeToVersion742 ();  	break;  case "9.1.0":  	UpgradeToVersion910 ();  	break;  }  
Missing Default,DotNetNuke.Services.Upgrade,Upgrade,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Upgrade.cs,UpgradeApplication,The following switch statement is missing a default case: switch (version.ToString (4)) {  case "8.0.0.6":  	UpgradeToVersion8006 ();  	break;  case "8.0.0.7":  	UpgradeToVersion8007 ();  	break;  case "8.0.0.13":  	UpgradeToVersion80013 ();  	break;  case "8.0.0.16":  	UpgradeToVersion80016 ();  	break;  case "8.0.0.26":  	UpgradeToVersion80026 ();  	break;  case "8.0.0.27":  	UpgradeToVersion80027 ();  	break;  }  
Missing Default,DotNetNuke.Services.Upgrade.Internals,InstallControllerImpl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\InstallControllerImpl.cs,GetConnectionFromWebConfig,The following switch statement is missing a default case: switch (key.ToLower ()) {  case "server":  case "data source":  case "address":  case "addr":  case "network address":  	connectionConfig.Server = value;  	break;  case "database":  case "initial catalog":  	connectionConfig.Database = value;  	break;  case "uid":  case "user id":  case "user":  	connectionConfig.User = value;  	break;  case "pwd":  case "password":  	connectionConfig.Password = value;  	break;  case "integrated security":  	connectionConfig.Integrated = (value.ToLower () == "true");  	break;  case "attachdbfilename":  	connectionConfig.File = value.Replace ("|DataDirectory|"' "");  	break;  }  
Missing Default,DotNetNuke.Services.Cache,CachingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Cache\CachingProvider.cs,ClearCacheInternal,The following switch statement is missing a default case: switch (cacheType) {  case "Prefix":  	ClearCacheInternal (data' clearRuntime);  	break;  case "Host":  	ClearHostCacheInternal (clearRuntime);  	break;  case "Folder":  	ClearFolderCacheInternal (int.Parse (data)' clearRuntime);  	break;  case "Module":  	ClearModuleCacheInternal (int.Parse (data)' clearRuntime);  	break;  case "ModulePermissionsByPortal":  	ClearModulePermissionsCachesByPortalInternal (int.Parse (data)' clearRuntime);  	break;  case "Portal":  	ClearPortalCacheInternal (int.Parse (data)' false' clearRuntime);  	break;  case "PortalCascade":  	ClearPortalCacheInternal (int.Parse (data)' true' clearRuntime);  	break;  case "Tab":  	ClearTabCacheInternal (int.Parse (data)' clearRuntime);  	break;  case "ServiceFrameworkRoutes":  	ReloadServicesFrameworkRoutes ();  	break;  }  
Missing Default,DotNetNuke.Services.Journal,ItemData,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\ItemData.cs,GetProperty,The following switch statement is missing a default case: switch (propertyName) {  case "url":  	return PropertyAccess.FormatString (Url' format);  case "title":  	return PropertyAccess.FormatString (Title' format);  case "description":  	return PropertyAccess.FormatString (Description' format);  case "imageurl":  	return PropertyAccess.FormatString (ImageUrl' format);  }  
Missing Default,DotNetNuke.Services.Journal,JournalEntity,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalEntity.cs,GetProperty,The following switch statement is missing a default case: switch (propertyName) {  case "id":  	return PropertyAccess.FormatString (Id.ToString ()' format);  case "name":  	return PropertyAccess.FormatString (Name.ToString ()' format);  case "vanity":  	return PropertyAccess.FormatString (Vanity.ToString ()' format);  case "avatar":  	return PropertyAccess.FormatString (Avatar.ToString ()' format);  }  
Missing Default,DotNetNuke.Services.Journal,JournalItem,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Journal\JournalItem.cs,GetProperty,The following switch statement is missing a default case: switch (propertyName) {  case "journalid":  	return PropertyAccess.FormatString (JournalId.ToString ()' format);  case "journaltypeid":  	return PropertyAccess.FormatString (JournalTypeId.ToString ()' format);  case "profileid":  	return PropertyAccess.FormatString (ProfileId.ToString ()' format);  case "socialgroupid":  	return PropertyAccess.FormatString (SocialGroupId.ToString ()' format);  case "datecreated":  	return PropertyAccess.FormatString (DateCreated.ToString ()' format);  case "title":  	return PropertyAccess.FormatString (Title' format);  case "summary":  	return PropertyAccess.FormatString (Summary' format);  case "body":  	return PropertyAccess.FormatString (Body' format);  case "timeframe":  	return PropertyAccess.FormatString (TimeFrame' format);  case "isdeleted":  	return IsDeleted.ToString ();  }  
Missing Default,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,GetInBoxView,The following switch statement is missing a default case: switch (readStatus) {  case MessageReadStatus.Read:  	read = true;  	break;  case MessageReadStatus.UnRead:  	read = false;  	break;  }  
Missing Default,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,GetInBoxView,The following switch statement is missing a default case: switch (archivedStatus) {  case MessageArchivedStatus.Archived:  	archived = true;  	break;  case MessageArchivedStatus.UnArchived:  	archived = false;  	break;  }  
Missing Default,DotNetNuke.Services.Social.Messaging.Data,DataService,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Social\Messaging\Data\DataService.cs,GetInBoxView,The following switch statement is missing a default case: switch (sentStatus) {  case MessageSentStatus.Received:  	sent = false;  	break;  case MessageSentStatus.Sent:  	sent = true;  	break;  }  
Missing Default,DotNetNuke.Entities.Modules.Definitions,ModuleDefinitionValidator,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Entities\Modules\Definitions\ModuleDefinitionValidator.cs,GetDnnSchemaPath,The following switch statement is missing a default case: switch (Version) {  case ModuleDefinitionVersion.V2:  	schemaPath = "components\\ResourceInstaller\\ModuleDef_V2.xsd";  	break;  case ModuleDefinitionVersion.V3:  	schemaPath = "components\\ResourceInstaller\\ModuleDef_V3.xsd";  	break;  case ModuleDefinitionVersion.V2_Skin:  	schemaPath = "components\\ResourceInstaller\\ModuleDef_V2Skin.xsd";  	break;  case ModuleDefinitionVersion.V2_Provider:  	schemaPath = "components\\ResourceInstaller\\ModuleDef_V2Provider.xsd";  	break;  case ModuleDefinitionVersion.VUnknown:  	throw new Exception (GetLocalizedString ("EXCEPTION_LoadFailed"));  }  
Missing Default,DotNetNuke.Framework.Providers,ProviderConfiguration,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Framework\Providers\ProviderConfiguration.cs,GetProviders,The following switch statement is missing a default case: switch (Provider.Name) {  case "add":  	Providers.Add (Provider.Attributes ["name"].Value' new Provider (Provider.Attributes));  	break;  case "remove":  	Providers.Remove (Provider.Attributes ["name"].Value);  	break;  case "clear":  	Providers.Clear ();  	break;  }  
Missing Default,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,grid_ItemCommand,The following switch statement is missing a default case: switch (command) {  case "DELETE":  	if (entityType == "ROLE") {  		DeleteRolePermissions (entityID);  	} else if (entityType == "USER") {  		DeleteUserPermissions (entityID);  	}  	BindData ();  	break;  }  
Missing Default,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdatePermission,The following switch statement is missing a default case: switch (stateKey) {  case PermissionTypeGrant:  	AddPermission (permission' roleId' roleName' Null.NullInteger' Null.NullString' true);  	break;  case PermissionTypeDeny:  	AddPermission (permission' roleId' roleName' Null.NullInteger' Null.NullString' false);  	break;  }  
Missing Default,DotNetNuke.Security.Permissions.Controls,PermissionsGrid,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Security\Permissions\Controls\PermissionsGrid.cs,UpdatePermission,The following switch statement is missing a default case: switch (stateKey) {  case PermissionTypeGrant:  	AddPermission (permission' int.Parse (Globals.glbRoleNothing)' Null.NullString' userId' displayName' true);  	break;  case PermissionTypeDeny:  	AddPermission (permission' int.Parse (Globals.glbRoleNothing)' Null.NullString' userId' displayName' false);  	break;  }  
Missing Default,DotNetNuke.Services.Analytics,GoogleAnalyticsEngine,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Analytics\GoogleAnalyticsEngine.cs,RenderScript,The following switch statement is missing a default case: switch (setting.SettingName.ToLowerInvariant ()) {  case "trackingid":  	trackingId = setting.SettingValue;  	break;  case "urlparameter":  	urlParameter = setting.SettingValue;  	break;  case "trackforadmin":  	if (!bool.TryParse (setting.SettingValue' out trackForAdmin)) {  		trackForAdmin = true;  	}  	break;  }  
Missing Default,DotNetNuke.Services.Analytics,GoogleAnalyticsController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Analytics\GoogleAnalyticsController.cs,UpgradeModule,The following switch statement is missing a default case: switch (Version) {  case "05.06.00":  	//previous module versions  	using (StreamReader fileReader = GetConfigFile ()) {  		if (fileReader != null) {  			var fileEncoding = new ASCIIEncoding ();  			using (var md5 = new MD5CryptoServiceProvider ()) {  				string currFileHashValue = "";  				//calculate md5 hash of existing file  				currFileHashValue = Convert.ToBase64String (md5.ComputeHash (fileEncoding.GetBytes (fileReader.ReadToEnd ())));  				fileReader.Close ();  				IEnumerable<string> result = (from h in TRADITIONAL_FILEHASHES  				where h == currFileHashValue  				select h);  				//compare md5 hash  				if (result.Any ()) {  					//Copy new config file from \Config  					//True causes .config to be overwritten  					Common.Utilities.Config.GetPathToFile (Common.Utilities.Config.ConfigFileType.SiteAnalytics' true);  				}  			}  		}  	}  	break;  }  
Missing Default,DotNetNuke.Services.Installer,Installer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installer.cs,ReadManifest,The following switch statement is missing a default case: switch (packageType.ToLower ()) {  case "package":  	InstallerInfo.IsLegacyMode = false;  	//Parse the package nodes  	ProcessPackages (rootNav);  	break;  case "module":  case "languagepack":  case "skinobject":  	InstallerInfo.IsLegacyMode = true;  	ProcessPackages (ConvertLegacyNavigator (rootNav' InstallerInfo));  	break;  }  
Missing Default,DotNetNuke.Services.Installer,Installer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Installer.cs,ConvertLegacyNavigator,The following switch statement is missing a default case: switch (packageType.ToLower ()) {  case "module":  	var sb = new StringBuilder ();  	using (var writer = XmlWriter.Create (sb' XmlUtils.GetXmlWriterSettings (ConformanceLevel.Fragment))) {  		//Write manifest start element  		PackageWriterBase.WriteManifestStartElement (writer);  		//Legacy Module - Process each folder  		foreach (XPathNavigator folderNav in rootNav.Select ("folders/folder")) {  			var modulewriter = new ModulePackageWriter (folderNav' info);  			modulewriter.WriteManifest (writer' true);  		}  		//Write manifest end element  		PackageWriterBase.WriteManifestEndElement (writer);  		//Close XmlWriter  		writer.Close ();  	}  	//Load manifest into XPathDocument for processing  	legacyDoc = new XPathDocument (new StringReader (sb.ToString ()));  	//Parse the package nodes  	nav = legacyDoc.CreateNavigator ().SelectSingleNode ("dotnetnuke");  	break;  case "languagepack":  	//Legacy Language Pack  	var languageWriter = new LanguagePackWriter (rootNav' info);  	info.LegacyError = languageWriter.LegacyError;  	if (string.IsNullOrEmpty (info.LegacyError)) {  		legacyManifest = languageWriter.WriteManifest (false);  		legacyDoc = new XPathDocument (new StringReader (legacyManifest));  		//Parse the package nodes  		nav = legacyDoc.CreateNavigator ().SelectSingleNode ("dotnetnuke");  	}  	break;  case "skinobject":  	//Legacy Skin Object  	var skinControlwriter = new SkinControlPackageWriter (rootNav' info);  	legacyManifest = skinControlwriter.WriteManifest (false);  	legacyDoc = new XPathDocument (new StringReader (legacyManifest));  	//Parse the package nodes  	nav = legacyDoc.CreateNavigator ().SelectSingleNode ("dotnetnuke");  	break;  }  
Missing Default,DotNetNuke.Services.Installer,LegacyUtil,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\LegacyUtil.cs,ParsePackageName,The following switch statement is missing a default case: switch (package.PackageType) {  case "Skin":  	package.Name += ".Skin";  	package.FriendlyName += " Skin";  	break;  case "Container":  	package.Name += ".Container";  	package.FriendlyName += " Container";  	break;  case "SkinObject":  	package.Name += "SkinObject";  	package.FriendlyName += " SkinObject";  	break;  }  
Missing Default,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,InsertNode,The following switch statement is missing a default case: switch (mode) {  case NodeInsertType.Before:  	rootNode.InsertBefore (TargetConfig.ImportNode (child' true)' childRootNode);  	break;  case NodeInsertType.After:  	rootNode.InsertAfter (TargetConfig.ImportNode (child' true)' childRootNode);  	break;  }  
Missing Default,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,ProcessNode,The following switch statement is missing a default case: switch (nodeAction) {  case "add":  	AddNode (rootNode' node);  	break;  case "prepend":  	PrependNode (rootNode' node);  	break;  case "insertbefore":  	InsertNode (rootNode' node' NodeInsertType.Before);  	break;  case "insertafter":  	InsertNode (rootNode' node' NodeInsertType.After);  	break;  case "remove":  	RemoveNode (rootNode);  	break;  case "removeattribute":  	RemoveAttribute (rootNode' node);  	break;  case "update":  	UpdateNode (rootNode' node);  	break;  case "updateattribute":  	UpdateAttribute (rootNode' node);  	break;  }  
Missing Default,DotNetNuke.Services.Installer,XmlMerge,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\XmlMerge.cs,UpdateNode,The following switch statement is missing a default case: switch (collisionAction.ToLowerInvariant ()) {  case "overwrite":  	rootNode.RemoveChild (targetNode);  	rootNode.InnerXml = rootNode.InnerXml + child.OuterXml;  	break;  case "save":  	string commentHeaderText = string.Format (Localization.Localization.GetString ("XMLMERGE_Upgrade"' Localization.Localization.SharedResourceFile)' Environment.NewLine' Sender' Version' DateTime.Now);  	XmlComment commentHeader = TargetConfig.CreateComment (commentHeaderText);  	var targetNodeContent = GetNodeContentWithoutComment (targetNode);  	XmlComment commentNode = TargetConfig.CreateComment (targetNodeContent);  	rootNode.RemoveChild (targetNode);  	rootNode.InnerXml = rootNode.InnerXml + commentHeader.OuterXml + commentNode.OuterXml + child.OuterXml;  	break;  case "ignore":  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Log,Logger,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Log\Logger.cs,GetLogsTable,The following switch statement is missing a default case: switch (entry.Type) {  case LogType.Failure:  case LogType.Warning:  	tdType.Attributes.Add ("class"' ErrorClass);  	tdDescription.Attributes.Add ("class"' ErrorClass);  	break;  case LogType.StartJob:  case LogType.EndJob:  	tdType.Attributes.Add ("class"' HighlightClass);  	tdDescription.Attributes.Add ("class"' HighlightClass);  	break;  case LogType.Info:  	tdType.Attributes.Add ("class"' NormalClass);  	tdDescription.Attributes.Add ("class"' NormalClass);  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ReadLegacyManifest,The following switch statement is missing a default case: switch (fileName.Replace (extendedExtension' "")) {  case "authentication.ascx":  	filePath = "";  	break;  case "friendlyurls.ascx":  	filePath = "DesktopModules\\Admin\\HostSettings\\App_LocalResources";  	break;  case "hostsettings.ascx":  	filePath = "DesktopModules\\Admin\\HostSettings\\App_LocalResources";  	break;  case "requestfilters.ascx":  	filePath = "DesktopModules\\Admin\\HostSettings\\App_LocalResources";  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ReadLegacyManifest,The following switch statement is missing a default case: switch (fileName.Replace (extendedExtension' "")) {  case "editportalalias.ascx":  	filePath = "DesktopModules\\Admin\\Portals\\App_LocalResources";  	break;  case "portalalias.ascx":  	filePath = "DesktopModules\\Admin\\Portals\\App_LocalResources";  	break;  case "portals.ascx":  	filePath = "DesktopModules\\Admin\\Portals\\App_LocalResources";  	break;  case "privacy.ascx":  	filePath = "Admin\\Portal\\App_LocalResources";  	break;  case "signup.ascx":  	filePath = "DesktopModules\\Admin\\Portals\\App_LocalResources";  	break;  case "sitesettings.ascx":  	filePath = "DesktopModules\\Admin\\Portals\\App_LocalResources";  	break;  case "sitewizard.ascx":  	filePath = "DesktopModules\\Admin\\SiteWizard\\App_LocalResources";  	break;  case "sql.ascx":  	filePath = "DesktopModules\\Admin\\SQL\\App_LocalResources";  	break;  case "systemmessages.ascx":  	filePath = "";  	break;  case "template.ascx":  	filePath = "DesktopModules\\Admin\\Portals\\App_LocalResources";  	break;  case "terms.ascx":  	filePath = "Admin\\Portal\\App_LocalResources";  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ReadLegacyManifest,The following switch statement is missing a default case: switch (fileName.Replace (extendedExtension' "")) {  case "inputsettings.ascx":  	filePath = "DesktopModules\\Admin\\SearchInput\\App_LocalResources";  	break;  case "resultssettings.ascx":  	filePath = "DesktopModules\\Admin\\SearchResults\\App_LocalResources";  	break;  case "searchadmin.ascx":  	filePath = "DesktopModules\\Admin\\SearchAdmin\\App_LocalResources";  	break;  case "searchinput.ascx":  	filePath = "DesktopModules\\Admin\\SearchInput\\App_LocalResources";  	break;  case "searchresults.ascx":  	filePath = "DesktopModules\\Admin\\SearchResults\\App_LocalResources";  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ReadLegacyManifest,The following switch statement is missing a default case: switch (fileName.Replace (extendedExtension' "")) {  case "accessdenied.ascx":  	filePath = "Admin\\Security\\App_LocalResources";  	break;  case "authenticationsettings.ascx":  	filePath = "";  	break;  case "editgroups.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "editroles.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "register.ascx":  	filePath = "";  	break;  case "roles.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "securityroles.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "sendpassword.ascx":  	filePath = "Admin\\Security\\App_LocalResources";  	break;  case "signin.ascx":  	filePath = "";  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ReadLegacyManifest,The following switch statement is missing a default case: switch (fileName.Replace (extendedExtension' "")) {  case "export.ascx":  	filePath = "Admin\\Tabs\\App_LocalResources";  	break;  case "import.ascx":  	filePath = "Admin\\Tabs\\App_LocalResources";  	break;  case "managetabs.ascx":  	filePath = "DesktopModules\\Admin\\Tabs\\App_LocalResources";  	break;  case "recyclebin.ascx":  	filePath = "DesktopModules\\Admin\\RecycleBin\\App_LocalResources";  	break;  case "tabs.ascx":  	filePath = "DesktopModules\\Admin\\Tabs\\App_LocalResources";  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ReadLegacyManifest,The following switch statement is missing a default case: switch (fileName.Replace (extendedExtension' "")) {  case "bulkemail.ascx":  	filePath = "DesktopModules\\Admin\\Newsletters\\App_LocalResources";  	fileName = "Newsletter.ascx" + extendedExtension;  	break;  case "editprofiledefinition.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "manageusers.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "memberservices.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "membership.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "password.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "profile.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "profiledefinitions.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "user.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "users.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "usersettings.ascx":  	filePath = "DesktopModules\\Admin\\Security\\App_LocalResources";  	break;  case "viewprofile.ascx":  	filePath = "Admin\\Users\\App_LocalResources";  	break;  }  
Missing Default,DotNetNuke.Services.Installer.Writers,LanguagePackWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Installer\Writers\LanguagePackWriter.cs,ReadLegacyManifest,The following switch statement is missing a default case: switch (fileName.Replace (extendedExtension' "")) {  case "adsense.ascx":  	filePath = "";  	break;  case "editadsense.ascx":  	filePath = "";  	break;  case "affiliates.ascx":  	filePath = "DesktopModules\\Admin\\Vendors\\App_LocalResources";  	break;  case "banneroptions.ascx":  	filePath = "DesktopModules\\Admin\\Banners\\App_LocalResources";  	break;  case "banners.ascx":  	filePath = "DesktopModules\\Admin\\Vendors\\App_LocalResources";  	break;  case "displaybanners.ascx":  	filePath = "DesktopModules\\Admin\\Banners\\App_LocalResources";  	break;  case "editaffiliate.ascx":  	filePath = "DesktopModules\\Admin\\Vendors\\App_LocalResources";  	break;  case "editbanner.ascx":  	filePath = "DesktopModules\\Admin\\Vendors\\App_LocalResources";  	break;  case "editvendors.ascx":  	filePath = "DesktopModules\\Admin\\Vendors\\App_LocalResources";  	break;  case "vendors.ascx":  	filePath = "DesktopModules\\Admin\\Vendors\\App_LocalResources";  	break;  }  
Missing Default,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMailInternal,The following switch statement is missing a default case: switch (smtpAuthentication) {  case "":  case "0":  	//anonymous  	break;  case "1":  	//basic  	if (!String.IsNullOrEmpty (smtpUsername) && !String.IsNullOrEmpty (smtpPassword)) {  		smtpClient.UseDefaultCredentials = false;  		smtpClient.Credentials = new NetworkCredential (smtpUsername' smtpPassword);  	}  	break;  case "2":  	//NTLM  	smtpClient.UseDefaultCredentials = true;  	break;  }  
Missing Default,DotNetNuke.Services.Mail,Mail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\Mail.cs,SendMail,The following switch statement is missing a default case: switch (bodyType.ToLower ()) {  case "html":  	bodyFormat = MailFormat.Html;  	break;  case "text":  	bodyFormat = MailFormat.Text;  	break;  }  
Missing Default,DotNetNuke.Services.Mail,SendTokenizedBulkEmail,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Mail\SendTokenizedBulkEmail.cs,SendMails,The following switch statement is missing a default case: switch (AddressMethod) {  case AddressMethods.Send_TO:  case AddressMethods.Send_Relay:  	//optimization:  	if (replaceTokens) {  		individualBody = (_tokenReplace.Cacheability (_body) == CacheLevel.notCacheable);  		individualSubj = (_tokenReplace.Cacheability (Subject) == CacheLevel.notCacheable);  		if (!individualBody) {  			body = _tokenReplace.ReplaceEnvironmentTokens (body);  		}  		if (!individualSubj) {  			subject = _tokenReplace.ReplaceEnvironmentTokens (subject);  		}  	}  	foreach (UserInfo user in Recipients ()) {  		recipients += 1;  		if (individualBody || individualSubj) {  			_tokenReplace.User = user;  			_tokenReplace.AccessingUser = user;  			if (individualBody) {  				body = _tokenReplace.ReplaceEnvironmentTokens (_body);  			}  			if (individualSubj) {  				subject = _tokenReplace.ReplaceEnvironmentTokens (Subject);  			}  		}  		string recipient = AddressMethod == AddressMethods.Send_TO ? user.Email : RelayEmailAddress;  		string mailError = Mail.SendMail (_sendingUser.Email' recipient' ""' ""' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL);  		if (!string.IsNullOrEmpty (mailError)) {  			mailErrors.Append (mailError);  			mailErrors.AppendLine ();  			errors += 1;  		} else {  			mailRecipients.Append (user.Email);  			mailRecipients.Append (BodyFormat == MailFormat.Html ? "<br />" : Environment.NewLine);  			messagesSent += 1;  		}  	}  	break;  case AddressMethods.Send_BCC:  	var distributionList = new StringBuilder ();  	messagesSent = Null.NullInteger;  	foreach (UserInfo user in Recipients ()) {  		recipients += 1;  		distributionList.Append (user.Email + "; ");  		mailRecipients.Append (user.Email);  		mailRecipients.Append (BodyFormat == MailFormat.Html ? "<br />" : Environment.NewLine);  	}  	if (distributionList.Length > 2) {  		if (replaceTokens) {  			//no access to User properties possible!  			var tr = new TokenReplace (Scope.Configuration);  			body = tr.ReplaceEnvironmentTokens (_body);  			subject = tr.ReplaceEnvironmentTokens (Subject);  		} else {  			body = _body;  			subject = Subject;  		}  		string mailError = Mail.SendMail (_sendingUser.Email' _sendingUser.Email' ""' distributionList.ToString (0' distributionList.Length - 2)' ReplyTo.Email' Priority' subject' BodyFormat' Encoding.UTF8' body' LoadAttachments ()' _smtpServer' _smtpAuthenticationMethod' _smtpUsername' _smtpPassword' _smtpEnableSSL);  		if (mailError == string.Empty) {  			messagesSent = 1;  		} else {  			mailErrors.Append (mailError);  			errors += 1;  		}  	}  	break;  }  
Missing Default,DotNetNuke.Services.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Messaging\MessagingController.cs,UpdateMessage,The following switch statement is missing a default case: switch (message.Status) {  case MessageStatusType.Unread:  	InternalMessagingController.Instance.MarkUnRead (message.MessageID' user);  	break;  case MessageStatusType.Draft:  	//no equivalent  	break;  case MessageStatusType.Deleted:  	InternalMessagingController.Instance.MarkArchived (message.MessageID' user);  	break;  case MessageStatusType.Read:  	InternalMessagingController.Instance.MarkRead (message.MessageID' user);  	break;  }  
Missing Default,DotNetNuke.Services.Messaging,MessagingController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Messaging\MessagingController.cs,ConvertCoreMessageToServicesMessage,The following switch statement is missing a default case: switch (coreMessageRecipeint.Read) {  case true:  	message.Status = MessageStatusType.Read;  	break;  case false:  	message.Status = MessageStatusType.Unread;  	break;  }  
Missing Default,DotNetNuke.Services.Upgrade.InternalController.Steps,InitializeHostSettingsStep,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\Upgrade\Internals\Steps\InitializeHostSettingsStep.cs,Execute,The following switch statement is missing a default case: switch (settingName) {  case "HostURL":  	if (string.IsNullOrEmpty (settingValue)) {  		settingValue = domainName;  	}  	break;  case "HostEmail":  	if (string.IsNullOrEmpty (settingValue)) {  		settingValue = installConfig.SuperUser.Email;  	}  	break;  }  
Missing Default,DotNetNuke.Services.UserProfile,UserProfilePicHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\Services\UserProfile\UserProfilePicHandler.cs,ProcessRequest,The following switch statement is missing a default case: switch (photoFile.Extension.ToLowerInvariant ()) {  case "png":  	context.Response.ContentType = "image/png";  	break;  case "jpeg":  case "jpg":  	context.Response.ContentType = "image/jpeg";  	break;  case "gif":  	context.Response.ContentType = "image/gif";  	break;  }  
Missing Default,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,Localize,The following switch statement is missing a default case: switch (Command.CommandName) {  case ModuleActionType.LocalizeModule:  	ModuleController.Instance.LocalizeModule (sourceModule' LocaleController.Instance.GetCurrentLocale (ModuleContext.PortalId));  	break;  case ModuleActionType.DeLocalizeModule:  	ModuleController.Instance.DeLocalizeModule (sourceModule);  	break;  }  
Missing Default,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,Translate,The following switch statement is missing a default case: switch (Command.CommandName) {  case ModuleActionType.TranslateModule:  	ModuleController.Instance.UpdateTranslationStatus (sourceModule' true);  	break;  case ModuleActionType.UnTranslateModule:  	ModuleController.Instance.UpdateTranslationStatus (sourceModule' false);  	break;  }  
Missing Default,DotNetNuke.UI.Containers,ActionManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Containers\ActionManager.cs,MoveUpDown,The following switch statement is missing a default case: switch (Command.CommandName) {  case ModuleActionType.MoveTop:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' 0' Command.CommandArgument);  	break;  case ModuleActionType.MoveUp:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' ModuleContext.Configuration.ModuleOrder - 3' Command.CommandArgument);  	break;  case ModuleActionType.MoveDown:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' ModuleContext.Configuration.ModuleOrder + 3' Command.CommandArgument);  	break;  case ModuleActionType.MoveBottom:  	ModuleController.Instance.UpdateModuleOrder (ModuleContext.TabId' ModuleContext.ModuleId' (ModuleContext.Configuration.PaneModuleCount * 2) + 1' Command.CommandArgument);  	break;  }  
Missing Default,DotNetNuke.UI.ControlPanels,ControlPanelBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\ControlPanels\ControlPanelBase.cs,AddNewModule,The following switch statement is missing a default case: switch (permissionType) {  case ViewPermissionType.View:  	objModule.InheritViewPermissions = true;  	break;  case ViewPermissionType.Edit:  	objModule.InheritViewPermissions = false;  	break;  }  
Missing Default,DotNetNuke.UI,Navigation,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Navigation.cs,AddNode,The following switch statement is missing a default case: switch (eToolTips) {  case ToolTipSource.TabName:  	objNode.ToolTip = objTab.LocalizedTabName;  	break;  case ToolTipSource.Title:  	objNode.ToolTip = objTab.Title;  	break;  case ToolTipSource.Description:  	objNode.ToolTip = objTab.Description;  	break;  }  
Missing Default,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,DisplayContent,The following switch statement is missing a default case: switch (Page.Request.QueryString ["Content"].ToLower ()) {  case "1":  case "true":  	content = true;  	break;  case "0":  case "false":  	content = false;  	break;  }  
Missing Default,DotNetNuke.UI.Modules,ModuleHost,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\ModuleHost.cs,RestoreCachedClientResourceRegistrations,The following switch statement is missing a default case: switch (match.Groups [1].Value.ToUpperInvariant ()) {  case "JAVASCRIPT":  	ClientResourceManager.RegisterScript (this.Page' match.Groups [2].Value);  	break;  case "CSS":  	ClientResourceManager.RegisterStyleSheet (this.Page' match.Groups [2].Value);  	break;  case "JS-LIBRARY":  	var args = match.Groups [2].Value.Split (new[] {  		''''  	}' StringSplitOptions.None);  	if (string.IsNullOrEmpty (args [1])) {  		JavaScript.RequestRegistration (args [0]);  	} else if (string.IsNullOrEmpty (args [2])) {  		JavaScript.RequestRegistration (args [0]' new Version (args [1]));  	} else {  		JavaScript.RequestRegistration (args [0]' new Version (args [1])' (SpecificVersion)Enum.Parse (typeof(SpecificVersion)' args [2]));  	}  	break;  }  
Missing Default,DotNetNuke.UI.Modules.Html5,RequestPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Modules\Html5\RequestPropertyAccess.cs,GetProperty,The following switch statement is missing a default case: switch (propertyName.ToLower ()) {  case "querystring":  	return _request.QueryString.ToString ();  }  
Missing Default,DotNetNuke.UI.Skins.Controls,LanguagePropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\LanguageTokenReplace.cs,NewUrl,The following switch statement is missing a default case: switch (localizedTab.TabType) {  case TabType.Normal:  	//normal tab  	tabId = localizedTab.TabID;  	break;  case TabType.Tab:  	//alternate tab url                                  	fullurl = TestableGlobals.Instance.NavigateURL (Convert.ToInt32 (localizedTab.Url));  	break;  case TabType.File:  	//file url  	fullurl = TestableGlobals.Instance.LinkClick (localizedTab.Url' localizedTab.TabID' Null.NullInteger);  	break;  case TabType.Url:  	//external url  	fullurl = localizedTab.Url;  	break;  }  
Missing Default,DotNetNuke.UI.Skins.Controls,ModuleMessage,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\ModuleMessage.cs,OnLoad,The following switch statement is missing a default case: switch (IconType) {  case ModuleMessageType.GreenSuccess:  	strMessage += Text;  	dnnSkinMessage.CssClass = "dnnFormMessage dnnFormSuccess";  	break;  case ModuleMessageType.YellowWarning:  	strMessage += Text;  	dnnSkinMessage.CssClass = "dnnFormMessage dnnFormWarning";  	break;  case ModuleMessageType.BlueInfo:  	strMessage += Text;  	dnnSkinMessage.CssClass = "dnnFormMessage dnnFormInfo";  	break;  case ModuleMessageType.RedError:  	strMessage += Text;  	dnnSkinMessage.CssClass = "dnnFormMessage dnnFormValidationSummary";  	break;  }  
Missing Default,DotNetNuke.UI.Skins.Controls,SkinsEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Controls\SkinsEditControl.cs,RaisePostBackEvent,The following switch statement is missing a default case: switch (eventArgument.Substring (0' 3)) {  case "Del":  	args = new PropertyEditorEventArgs (Name);  	args.Value = DictionaryValue;  	args.OldValue = OldDictionaryValue;  	args.Key = int.Parse (eventArgument.Substring (7));  	args.Changed = true;  	base.OnItemDeleted (args);  	break;  case "Add":  	args = new PropertyEditorEventArgs (Name);  	args.Value = AddedItem;  	args.StringValue = AddedItem;  	args.Changed = true;  	base.OnItemAdded (args);  	break;  }  
Missing Default,DotNetNuke.UI.Skins,NavObjectBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\NavObjectBase.cs,AssignControlProperties,The following switch statement is missing a default case: switch (m_strControlOrientation.ToLower ()) {  case "horizontal":  	Control.ControlOrientation = NavigationProvider.Orientation.Horizontal;  	break;  case "vertical":  	Control.ControlOrientation = NavigationProvider.Orientation.Vertical;  	break;  }  
Missing Default,DotNetNuke.UI.Skins,NavObjectBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\NavObjectBase.cs,AssignControlProperties,The following switch statement is missing a default case: switch (m_strControlAlignment.ToLower ()) {  case "left":  	Control.ControlAlignment = NavigationProvider.Alignment.Left;  	break;  case "right":  	Control.ControlAlignment = NavigationProvider.Alignment.Right;  	break;  case "center":  	Control.ControlAlignment = NavigationProvider.Alignment.Center;  	break;  case "justify":  	Control.ControlAlignment = NavigationProvider.Alignment.Justify;  	break;  }  
Missing Default,DotNetNuke.UI.Skins,NavObjectBase,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\NavObjectBase.cs,AssignControlProperties,The following switch statement is missing a default case: switch (m_strMouseOverDisplay.ToLower ()) {  case "highlight":  	Control.MouseOverDisplay = NavigationProvider.HoverDisplay.Highlight;  	break;  case "outset":  	Control.MouseOverDisplay = NavigationProvider.HoverDisplay.Outset;  	break;  case "none":  	Control.MouseOverDisplay = NavigationProvider.HoverDisplay.None;  	break;  }  
Missing Default,DotNetNuke.UI.Skins,Skin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\Skin.cs,LoadPanes,The following switch statement is missing a default case: switch (objPaneControl.TagName.ToLowerInvariant ()) {  case "td":  case "div":  case "span":  case "p":  case "section":  case "header":  case "footer":  case "main":  case "article":  case "aside":  	//content pane  	if (objPaneControl.ID.ToLower () != "controlpanel") {  		//Add to the PortalSettings (for use in the Control Panel)  		PortalSettings.ActiveTab.Panes.Add (objPaneControl.ID);  		//Add to the Panes collection  		Panes.Add (objPaneControl.ID.ToLowerInvariant ()' new Pane (objPaneControl));  	} else {  		//Control Panel pane  		_controlPanel = objPaneControl;  	}  	break;  }  
Missing Default,DotNetNuke.UI.Skins,SkinControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinControl.cs,OnLoad,The following switch statement is missing a default case: switch (_SkinSrc.Substring (0' 3)) {  case "[L]":  	optHost.Checked = false;  	optSite.Checked = true;  	break;  case "[G]":  	optSite.Checked = false;  	optHost.Checked = true;  	break;  }  
Missing Default,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,FormatSkinSrc,The following switch statement is missing a default case: switch (strSkinSrc.Substring (0' 3).ToLowerInvariant ()) {  case "[g]":  	strSkinSrc = GdirRegex.Replace (strSkinSrc' Globals.HostPath);  	break;  case "[s]":  	strSkinSrc = SdirRegex.Replace (strSkinSrc' portalSettings.HomeSystemDirectory);  	break;  case "[l]":  	//to be compliant with all versions  	strSkinSrc = LdirRegex.Replace (strSkinSrc' portalSettings.HomeDirectory);  	break;  }  
Missing Default,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,GetSkins,The following switch statement is missing a default case: switch (scope) {  case SkinScope.Host:  	//load host skins  	skins = GetHostSkins (skinRoot);  	break;  case SkinScope.Site:  	//load portal skins  	skins = GetPortalSkins (portalInfo' skinRoot);  	break;  case SkinScope.All:  	skins = GetHostSkins (skinRoot);  	skins.AddRange (GetPortalSkins (portalInfo' skinRoot));  	break;  }  
Missing Default,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,SetSkin,The following switch statement is missing a default case: switch (skinRoot) {  case "Skins":  	if (skinType == SkinType.Admin) {  		if (portalId == Null.NullInteger) {  			HostController.Instance.Update ("DefaultAdminSkin"' skinSrc);  		} else {  			PortalController.UpdatePortalSetting (portalId' "DefaultAdminSkin"' skinSrc' selectedCultureCode);  		}  	} else {  		if (portalId == Null.NullInteger) {  			HostController.Instance.Update ("DefaultPortalSkin"' skinSrc);  		} else {  			PortalController.UpdatePortalSetting (portalId' "DefaultPortalSkin"' skinSrc' selectedCultureCode);  		}  	}  	break;  case "Containers":  	if (skinType == SkinType.Admin) {  		if (portalId == Null.NullInteger) {  			HostController.Instance.Update ("DefaultAdminContainer"' skinSrc);  		} else {  			PortalController.UpdatePortalSetting (portalId' "DefaultAdminContainer"' skinSrc' selectedCultureCode);  		}  	} else {  		if (portalId == Null.NullInteger) {  			HostController.Instance.Update ("DefaultPortalContainer"' skinSrc);  		} else {  			PortalController.UpdatePortalSetting (portalId' "DefaultPortalContainer"' skinSrc' selectedCultureCode);  		}  	}  	break;  }  
Missing Default,DotNetNuke.UI.Skins,SkinController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinController.cs,UploadLegacySkin,The following switch statement is missing a default case: switch (Path.GetExtension (strFileName)) {  case ".htm":  case ".html":  case ".ascx":  case ".css":  	if (strFileName.ToLower ().IndexOf (Globals.glbAboutPage.ToLower ()) < 0) {  		arrSkinFiles.Add (strFileName);  	}  	break;  }  
Missing Default,DotNetNuke.UI.Skins,SkinFileProcessor,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Skins\SkinFileProcessor.cs,ProcessFile,The following switch statement is missing a default case: switch (objSkinFile.FileExtension) {  case ".htm":  case ".html":  	string contents = objSkinFile.Contents;  	strMessage += ObjectFactory.Parse (ref contents);  	strMessage += PathFactory.Parse (ref contents' PathFactory.HTMLList' objSkinFile.SkinRootPath' ParseOption);  	strMessage += ControlFactory.Parse (ref contents' objSkinFile.Attributes);  	objSkinFile.Contents = contents;  	var Registrations = new ArrayList ();  	Registrations.AddRange (ControlFactory.Registrations);  	Registrations.AddRange (ObjectFactory.Registrations);  	strMessage += objSkinFile.PrependASCXDirectives (Registrations);  	break;  }  
Missing Default,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following switch statement is missing a default case: switch (_countryData.ToLower ()) {  case "text":  	if (String.IsNullOrEmpty (_country)) {  		cboCountry.SelectedIndex = 0;  	} else {  		if (cboCountry.Items.FindByText (_country) != null) {  			cboCountry.ClearSelection ();  			cboCountry.Items.FindByText (_country).Selected = true;  		}  	}  	break;  case "value":  	if (cboCountry.Items.FindByValue (_country) != null) {  		cboCountry.ClearSelection ();  		cboCountry.Items.FindByValue (_country).Selected = true;  	}  	break;  }  
Missing Default,DotNetNuke.UI.UserControls,Address,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\Address.cs,OnLoad,The following switch statement is missing a default case: switch (_regionData.ToLower ()) {  case "text":  	if (String.IsNullOrEmpty (_region)) {  		cboRegion.SelectedIndex = 0;  	} else {  		if (cboRegion.Items.FindByText (_region) != null) {  			cboRegion.Items.FindByText (_region).Selected = true;  		}  	}  	break;  case "value":  	if (cboRegion.Items.FindByValue (_region) != null) {  		cboRegion.Items.FindByValue (_region).Selected = true;  	}  	break;  }  
Missing Default,DotNetNuke.UI.UserControls,UrlControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\UserControls\URLControl.cs,DoRenderTypeControls,The following switch statement is missing a default case: switch (optType.SelectedItem.Value) {  case "N":  	//None  	URLRow.Visible = false;  	TabRow.Visible = false;  	FileRow.Visible = false;  	UserRow.Visible = false;  	ImagesRow.Visible = false;  	break;  case "I":  	//System Image  	URLRow.Visible = false;  	TabRow.Visible = false;  	FileRow.Visible = false;  	UserRow.Visible = false;  	ImagesRow.Visible = true;  	cboImages.Items.Clear ();  	string strImagesFolder = Path.Combine (Globals.ApplicationMapPath' PortalSettings.DefaultIconLocation.Replace ('/'' '\\'));  	foreach (string strImage in Directory.GetFiles (strImagesFolder)) {  		string img = strImage.Replace (strImagesFolder' "").Trim ('/').Trim ('\\');  		cboImages.Items.Add (new ListItem (img' string.Format ("~/{0}/{1}"' PortalSettings.DefaultIconLocation' img).ToLower ()));  	}  	ListItem selecteItem = cboImages.Items.FindByValue (_Url.ToLower ());  	if (selecteItem != null) {  		selecteItem.Selected = true;  	}  	break;  case "U":  	//Url  	URLRow.Visible = true;  	TabRow.Visible = false;  	FileRow.Visible = false;  	UserRow.Visible = false;  	ImagesRow.Visible = false;  	if (String.IsNullOrEmpty (txtUrl.Text)) {  		txtUrl.Text = _Url;  	}  	if (String.IsNullOrEmpty (txtUrl.Text)) {  		txtUrl.Text = "http://";  	}  	txtUrl.Visible = true;  	cmdSelect.Visible = true;  	cboUrls.Visible = false;  	cmdAdd.Visible = false;  	cmdDelete.Visible = false;  	break;  case "T":  	//tab  	URLRow.Visible = false;  	TabRow.Visible = true;  	FileRow.Visible = false;  	UserRow.Visible = false;  	ImagesRow.Visible = false;  	cboTabs.Items.Clear ();  	PortalSettings _settings = PortalController.Instance.GetCurrentPortalSettings ();  	cboTabs.DataSource = TabController.GetPortalTabs (_settings.PortalId' Null.NullInteger' !Required' "none available"' true' false' false' true' false);  	cboTabs.DataBind ();  	if (cboTabs.Items.FindByValue (_Url) != null) {  		cboTabs.Items.FindByValue (_Url).Selected = true;  	}  	if (!IncludeActiveTab && cboTabs.Items.FindByValue (_settings.ActiveTab.TabID.ToString ()) != null) {  		cboTabs.Items.FindByValue (_settings.ActiveTab.TabID.ToString ()).Attributes.Add ("disabled"' "disabled");  	}  	break;  case "F":  	//file  	URLRow.Visible = false;  	TabRow.Visible = false;  	FileRow.Visible = true;  	UserRow.Visible = false;  	ImagesRow.Visible = false;  	if (ViewState ["FoldersLoaded"] == null || _doReloadFolders) {  		LoadFolders ("BROWSE'ADD");  		ViewState ["FoldersLoaded"] = "Y";  	}  	if (cboFolders.Items.Count == 0) {  		lblMessage.Text = Localization.GetString ("NoPermission"' LocalResourceFile);  		ErrorRow.Visible = true;  		FileRow.Visible = false;  		return;  	}  	//select folder  	//We Must check if selected folder has changed because of a property change (Secure' Database)  	string FileName = string.Empty;  	string FolderPath = string.Empty;  	string LastFileName = string.Empty;  	string LastFolderPath = string.Empty;  	bool _MustRedrawFiles = false;  	//Let's try to remember last selection  	if (ViewState ["LastFolderPath"] != null) {  		LastFolderPath = Convert.ToString (ViewState ["LastFolderPath"]);  	}  	if (ViewState ["LastFileName"] != null) {  		LastFileName = Convert.ToString (ViewState ["LastFileName"]);  	}  	if (_Url != string.Empty) {  		//Let's use the new URL  		FileName = _Url.Substring (_Url.LastIndexOf ("/") + 1);  		FolderPath = _Url.Replace (FileName' "");  	} else {  		//Use last settings  		FileName = LastFileName;  		FolderPath = LastFolderPath;  	}  	if (cboFolders.Items.FindByValue (FolderPath) != null) {  		cboFolders.ClearSelection ();  		cboFolders.Items.FindByValue (FolderPath).Selected = true;  	} else if (cboFolders.Items.Count > 0) {  		cboFolders.ClearSelection ();  		cboFolders.Items [0].Selected = true;  		FolderPath = cboFolders.Items [0].Value;  	}  	if (ViewState ["FilesLoaded"] == null || FolderPath != LastFolderPath || _doReloadFiles) {  		//Reload files only if property change or not same folder  		_MustRedrawFiles = true;  		ViewState ["FilesLoaded"] = "Y";  	} else {  		if (cboFiles.Items.Count > 0) {  			if ((Required && String.IsNullOrEmpty (cboFiles.Items [0].Value)) || (!Required && !String.IsNullOrEmpty (cboFiles.Items [0].Value))) {  				//Required state has changed' so we need to reload files  				_MustRedrawFiles = true;  			}  		} else if (!Required) {  			//Required state has changed' so we need to reload files  			_MustRedrawFiles = true;  		}  	}  	if (_MustRedrawFiles) {  		cboFiles.DataSource = GetFileList (!Required);  		cboFiles.DataBind ();  		if (cboFiles.Items.FindByText (FileName) != null) {  			cboFiles.ClearSelection ();  			cboFiles.Items.FindByText (FileName).Selected = true;  		}  	}  	cboFiles.Visible = true;  	txtFile.Visible = false;  	FolderInfo objFolder = (FolderInfo)FolderManager.Instance.GetFolder (_objPortal.PortalID' FolderPath);  	cmdUpload.Visible = ShowUpLoad && FolderPermissionController.CanAddFolder (objFolder);  	SetStorageLocationType ();  	txtUrl.Visible = false;  	cmdSave.Visible = false;  	cmdCancel.Visible = false;  	if (cboFolders.SelectedIndex >= 0) {  		ViewState ["LastFolderPath"] = cboFolders.SelectedValue;  	} else {  		ViewState ["LastFolderPath"] = "";  	}  	if (cboFiles.SelectedIndex >= 0) {  		ViewState ["LastFileName"] = cboFiles.SelectedValue;  	} else {  		ViewState ["LastFileName"] = "";  	}  	break;  case "M":  	//membership users  	URLRow.Visible = false;  	TabRow.Visible = false;  	FileRow.Visible = false;  	UserRow.Visible = true;  	ImagesRow.Visible = false;  	if (String.IsNullOrEmpty (txtUser.Text)) {  		txtUser.Text = _Url;  	}  	break;  }  
Missing Default,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,EnableMinMax,The following switch statement is missing a default case: switch (ePersistanceType) {  case MinMaxPersistanceType.None:  	AddAttribute (objButton' "onclick"' "if (__dnn_SectionMaxMin(this'  '" + objContent.ClientID + "')) return false;");  	if (!String.IsNullOrEmpty (strMinIconLoc)) {  		AddAttribute (objButton' "max_icon"' strMaxIconLoc);  		AddAttribute (objButton' "min_icon"' strMinIconLoc);  	}  	break;  case MinMaxPersistanceType.Page:  	AddAttribute (objButton' "onclick"' "if (__dnn_SectionMaxMin(this'  '" + objContent.ClientID + "')) return false;");  	if (!String.IsNullOrEmpty (strMinIconLoc)) {  		AddAttribute (objButton' "max_icon"' strMaxIconLoc);  		AddAttribute (objButton' "min_icon"' strMinIconLoc);  	}  	break;  case MinMaxPersistanceType.Cookie:  	if (intModuleId != -1) {  		AddAttribute (objButton' "onclick"' "if (__dnn_ContainerMaxMin_OnClick(this' '" + objContent.ClientID + "')) return false;");  		ClientAPI.RegisterClientVariable (objButton.Page' "containerid_" + objContent.ClientID' intModuleId.ToString ()' true);  		ClientAPI.RegisterClientVariable (objButton.Page' "cookieid_" + objContent.ClientID' "_Module" + intModuleId + "_Visible"' true);  		ClientAPI.RegisterClientVariable (objButton.Page' "min_icon_" + intModuleId' strMinIconLoc' true);  		ClientAPI.RegisterClientVariable (objButton.Page' "max_icon_" + intModuleId' strMaxIconLoc' true);  		ClientAPI.RegisterClientVariable (objButton.Page' "max_text"' Localization.GetString ("Maximize")' true);  		ClientAPI.RegisterClientVariable (objButton.Page' "min_text"' Localization.GetString ("Minimize")' true);  		if (blnDefaultMin) {  			ClientAPI.RegisterClientVariable (objButton.Page' "__dnn_" + intModuleId + ":defminimized"' "true"' true);  		}  	}  	break;  case MinMaxPersistanceType.Personalization:  	//Regardless if we determine whether or not the browser supports client-side personalization  	//we need to store these keys to properly display or hide the content (They are needed in MinMaxContentVisible)  	AddAttribute (objButton' "userctr"' strPersonalizationNamingCtr);  	AddAttribute (objButton' "userkey"' strPersonalizationKey);  	if (EnableClientPersonalization (strPersonalizationNamingCtr' strPersonalizationKey' objButton.Page)) {  		AddAttribute (objButton' "onclick"' "if (__dnn_SectionMaxMin(this'  '" + objContent.ClientID + "')) return false;");  		if (!String.IsNullOrEmpty (strMinIconLoc)) {  			AddAttribute (objButton' "max_icon"' strMaxIconLoc);  			AddAttribute (objButton' "min_icon"' strMinIconLoc);  		}  	}  	break;  }  
Missing Default,DotNetNuke.UI.Utilities,DNNClientAPI,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\Utilities\ClientAPI.cs,MinMaxContentVisibile,The following switch statement is missing a default case: switch (ePersistanceType) {  case MinMaxPersistanceType.Page:  	ClientAPI.RegisterClientVariable (objButton.Page' objButton.ClientID + ":exp"' Convert.ToInt32 (value).ToString ()' true);  	break;  case MinMaxPersistanceType.Cookie:  	var objModuleVisible = new HttpCookie ("_Module" + intModuleId + "_Visible"' value.ToString ().ToLower ()) {  		Expires = DateTime.MaxValue'  		Path = (!string.IsNullOrEmpty (Common.Globals.ApplicationPath) ? Common.Globals.ApplicationPath : "/")  	};  	HttpContext.Current.Response.AppendCookie (objModuleVisible);  	break;  case MinMaxPersistanceType.Personalization:  	Personalization.SetProfile (Globals.GetAttribute (objButton' "userctr")' Globals.GetAttribute (objButton' "userkey")' value.ToString ());  	break;  }  
Missing Default,DotNetNuke.UI.WebControls,ImageCommandColumnTemplate,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\ImageCommandColumnTemplate.cs,InstantiateIn,The following switch statement is missing a default case: switch (ItemType) {  case ListItemType.Item:  case ListItemType.AlternatingItem:  case ListItemType.SelectedItem:  case ListItemType.EditItem:  	if (EditMode == ImageCommandColumnEditMode.URL) {  		var hypLink = new HyperLink ();  		hypLink.ToolTip = Text;  		if (!String.IsNullOrEmpty (ImageURL) && ShowImage) {  			var img = new Image ();  			if (DesignMode) {  				img.ImageUrl = ImageURL.Replace ("~/"' "../../");  			} else {  				img.ImageUrl = ImageURL;  			}  			hypLink.Controls.Add (img);  			img.ToolTip = Text;  		} else {  			hypLink.Text = Text;  		}  		hypLink.DataBinding += Item_DataBinding;  		container.Controls.Add (hypLink);  	} else {  		if (!String.IsNullOrEmpty (ImageURL) && ShowImage) {  			var colIcon = new ImageButton ();  			if (DesignMode) {  				colIcon.ImageUrl = ImageURL.Replace ("~/"' "../../");  			} else {  				colIcon.ImageUrl = ImageURL;  			}  			colIcon.ToolTip = Text;  			if (!String.IsNullOrEmpty (OnClickJS)) {  				ClientAPI.AddButtonConfirm (colIcon' OnClickJS);  			}  			colIcon.CommandName = CommandName;  			colIcon.DataBinding += Item_DataBinding;  			container.Controls.Add (colIcon);  		}  		if (!String.IsNullOrEmpty (Text) && !ShowImage) {  			var colLink = new LinkButton ();  			colLink.ToolTip = Text;  			if (!String.IsNullOrEmpty (OnClickJS)) {  				ClientAPI.AddButtonConfirm (colLink' OnClickJS);  			}  			colLink.CommandName = CommandName;  			colLink.Text = Text;  			colLink.DataBinding += Item_DataBinding;  			container.Controls.Add (colLink);  		}  	}  	break;  case ListItemType.Footer:  case ListItemType.Header:  	container.Controls.Add (new LiteralControl (Text));  	break;  }  
Missing Default,DotNetNuke.UI.WebControls,TextColumnTemplate,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\TextColumnTemplate.cs,InstantiateIn,The following switch statement is missing a default case: switch (ItemType) {  case ListItemType.Item:  case ListItemType.AlternatingItem:  case ListItemType.SelectedItem:  	var lblText = new Label ();  	lblText.Width = Width;  	lblText.DataBinding += Item_DataBinding;  	container.Controls.Add (lblText);  	break;  case ListItemType.EditItem:  	var txtText = new TextBox ();  	txtText.Width = Width;  	txtText.DataBinding += Item_DataBinding;  	container.Controls.Add (txtText);  	break;  case ListItemType.Footer:  case ListItemType.Header:  	container.Controls.Add (new LiteralControl (Text));  	break;  }  
Missing Default,DotNetNuke.UI.WebControls,TextColumnTemplate,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DataGrids\TextColumnTemplate.cs,Item_DataBinding,The following switch statement is missing a default case: switch (ItemType) {  case ListItemType.Item:  case ListItemType.AlternatingItem:  case ListItemType.SelectedItem:  	var lblText = (Label)sender;  	container = (DataGridItem)lblText.NamingContainer;  	lblText.Text = GetValue (container);  	break;  case ListItemType.EditItem:  	var txtText = (TextBox)sender;  	container = (DataGridItem)txtText.NamingContainer;  	txtText.Text = GetValue (container);  	break;  }  
Missing Default,DotNetNuke.UI.WebControls,DualListBox,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DualListBox.cs,RaisePostBackEvent,The following switch statement is missing a default case: switch (eventArgument) {  case "Add":  	OnAddButtonClick (new DualListBoxEventArgs (_AddValues));  	break;  case "AddAll":  	OnAddAllButtonClick (new EventArgs ());  	break;  case "Remove":  	OnRemoveButtonClick (new DualListBoxEventArgs (_RemoveValues));  	break;  case "RemoveAll":  	OnRemoveAllButtonClick (new EventArgs ());  	break;  }  
Missing Default,DotNetNuke.UI.WebControls,DualListBox,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\DualListBox.cs,RenderButton,The following switch statement is missing a default case: switch (buttonType) {  case "Add":  	buttonText = string.IsNullOrEmpty (AddKey) ? AddText : Localization.GetString (AddKey' LocalResourceFile);  	imageURL = AddImageURL;  	break;  case "AddAll":  	buttonText = string.IsNullOrEmpty (AddAllKey) ? AddAllText : Localization.GetString (AddAllKey' LocalResourceFile);  	imageURL = AddAllImageURL;  	break;  case "Remove":  	buttonText = string.IsNullOrEmpty (RemoveKey) ? RemoveText : Localization.GetString (RemoveKey' LocalResourceFile);  	imageURL = RemoveImageURL;  	break;  case "RemoveAll":  	buttonText = string.IsNullOrEmpty (RemoveAllKey) ? RemoveAllText : Localization.GetString (RemoveAllKey' LocalResourceFile);  	imageURL = RemoveAllImageURL;  	break;  }  
Missing Default,DotNetNuke.UI.WebControls,DNNListEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNListEditControl.cs,RenderViewMode,The following switch statement is missing a default case: switch (ValueField) {  case ListBoundField.Id:  	entry = objListController.GetListEntryInfo (ListName' Convert.ToInt32 (Value));  	break;  case ListBoundField.Text:  	entryText = StringValue;  	break;  case ListBoundField.Value:  	entry = objListController.GetListEntryInfo (ListName' StringValue);  	break;  }  
Missing Default,DotNetNuke.UI.WebControls,DNNListEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNListEditControl.cs,RenderViewMode,The following switch statement is missing a default case: switch (TextField) {  case ListBoundField.Id:  	writer.Write (entry.EntryID.ToString ());  	break;  case ListBoundField.Text:  	writer.Write (entry.Text);  	break;  case ListBoundField.Value:  	writer.Write (entry.Value);  	break;  }  
Missing Default,DotNetNuke.UI.WebControls,DNNListEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNListEditControl.cs,RenderEditMode,The following switch statement is missing a default case: switch (ValueField) {  case ListBoundField.Id:  	itemValue = item.EntryID.ToString ();  	break;  case ListBoundField.Text:  	itemValue = item.Text;  	break;  case ListBoundField.Value:  	itemValue = item.Value;  	break;  }  
Missing Default,DotNetNuke.UI.WebControls,DNNListEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNListEditControl.cs,RenderEditMode,The following switch statement is missing a default case: switch (TextField) {  case ListBoundField.Id:  	writer.Write (item.EntryID.ToString ());  	break;  case ListBoundField.Text:  	writer.Write (item.Text);  	break;  case ListBoundField.Value:  	writer.Write (item.Value.Trim ());  	break;  }  
Missing Default,DotNetNuke.UI.WebControls,DNNLocaleEditControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\Edit Controls\DNN Edit Controls\DNNLocaleEditControl.cs,RenderEditMode,The following switch statement is missing a default case: switch (ListType) {  case LanguagesListType.All:  	CultureInfo[] cultures = CultureInfo.GetCultures (CultureTypes.SpecificCultures);  	Array.Sort (cultures' new CultureInfoComparer (DisplayMode));  	foreach (CultureInfo culture in cultures) {  		RenderOption (writer' culture);  	}  	languageCount = cultures.Length;  	break;  case LanguagesListType.Supported:  	Dictionary<string' Locale> cultures1 = LocaleController.Instance.GetLocales (Null.NullInteger);  	foreach (Locale language in cultures1.Values) {  		RenderOption (writer' CultureInfo.GetCultureInfo (language.Code));  	}  	languageCount = cultures1.Count;  	break;  case LanguagesListType.Enabled:  	Dictionary<string' Locale> cultures2 = LocaleController.Instance.GetLocales (PortalSettings.PortalId);  	foreach (Locale language in cultures2.Values) {  		RenderOption (writer' CultureInfo.GetCultureInfo (language.Code));  	}  	languageCount = cultures2.Count;  	break;  }  
Missing Default,DotNetNuke.UI.WebControls,FieldEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\FieldEditorControl.cs,BuildLabel,The following switch statement is missing a default case: switch (HelpDisplayMode) {  case HelpDisplayMode.Always:  	propLabel.ShowHelp = true;  	break;  case HelpDisplayMode.EditOnly:  	if (editInfo.EditMode == PropertyEditorMode.Edit || (editInfo.Required && string.IsNullOrEmpty (strValue))) {  		propLabel.ShowHelp = true;  	} else {  		propLabel.ShowHelp = false;  	}  	break;  case HelpDisplayMode.Never:  	propLabel.ShowHelp = false;  	break;  }  
Missing Default,DotNetNuke.UI.WebControls,PropertyEditorControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Library\UI\WebControls\PropertyEditor\PropertyEditorControl.cs,GetProperties,The following switch statement is missing a default case: switch (SortMode) {  case PropertySortType.Alphabetical:  	Array.Sort (properties' new PropertyNameComparer ());  	break;  case PropertySortType.Category:  	Array.Sort (properties' new PropertyCategoryComparer ());  	break;  case PropertySortType.SortOrderAttribute:  	Array.Sort (properties' new PropertySortOrderComparer ());  	break;  }  
