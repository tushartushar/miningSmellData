Implementation smell,Namespace,Class,File,Method,Description
Long Method,DotNetNuke.HttpModules.OutputCaching,OutputCacheModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\OutputCaching\OutputCacheModule.cs,OnResolveRequestCache,The method has 164 lines of code.
Long Method,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,The method has 303 lines of code.
Long Method,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,The method has 366 lines of code.
Complex Method,DotNetNuke.HttpModules.OutputCaching,OutputCacheModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\OutputCaching\OutputCacheModule.cs,OnResolveRequestCache,Cyclomatic complexity of the method is 28
Complex Method,DotNetNuke.HttpModules.Membership,MembershipModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\Membership\MembershipModule.cs,AuthenticateRequest,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,Cyclomatic complexity of the method is 42
Complex Method,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,Cyclomatic complexity of the method is 18
Complex Method,DotNetNuke.HttpModules.Analytics,AnalyticsModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\Analytics\AnalyticsModule.cs,OnPagePreRender,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.HttpModules.RequestFilter,RequestFilterModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\RequestFilter\RequestFilterModule.cs,FilterRequest,Cyclomatic complexity of the method is 10
Long Parameter List,DotNetNuke.HttpModules.RequestFilter,RequestFilterRule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\RequestFilter\RequestFilterRule.cs,RequestFilterRule,The method has 5 parameters. Parameters: serverVariable' values' op' action' location
Long Identifier,DotNetNuke.HttpModules.OutputCaching,OutputCacheModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\OutputCaching\OutputCacheModule.cs,,The length of the parameter ContextKeyTabOutputCacheProvider is 32.
Long Identifier,DotNetNuke.HttpModules.Membership,MembershipModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\Membership\MembershipModule.cs,AuthenticateRequest,The length of the parameter isActiveDirectoryAuthHeaderPresent is 34.
Long Statement,DotNetNuke.HttpModules.OutputCaching,OutputCacheModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\OutputCaching\OutputCacheModule.cs,OnResolveRequestCache,The length of the statement  "            if (_app == null || _app.Context == null || _app.Response.ContentType.ToLower() != "text/html" || _app.Context.Request.IsAuthenticated || _app.Context.Request.Browser.Crawler) " is 175.
Long Statement,DotNetNuke.HttpModules.OutputCaching,OutputCacheModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\OutputCaching\OutputCacheModule.cs,OnResolveRequestCache,The length of the statement  "            if (_app.Context.Request.RequestType == "POST" || ! (_app.Context.Request.Url.LocalPath.ToLower().EndsWith(Globals.glbDefaultPage.ToLower()))) " is 142.
Long Statement,DotNetNuke.HttpModules.OutputCaching,OutputCacheModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\OutputCaching\OutputCacheModule.cs,OnResolveRequestCache,The length of the statement  "            if (tabSettings["CacheIncludeExclude"] != null && ! string.IsNullOrEmpty(tabSettings["CacheIncludeExclude"].ToString())) " is 120.
Long Statement,DotNetNuke.HttpModules.OutputCaching,OutputCacheModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\OutputCaching\OutputCacheModule.cs,OnResolveRequestCache,The length of the statement  "            string cacheKey = OutputCachingProvider.Instance(tabOutputCacheProvider).GenerateCacheKey(tabId' includeVaryByKeys' excludeVaryByKeys' varyBy); " is 143.
Long Statement,DotNetNuke.HttpModules.OutputCaching,OutputCacheModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\OutputCaching\OutputCacheModule.cs,OnResolveRequestCache,The length of the statement  "            bool returnedFromCache = OutputCachingProvider.Instance(tabOutputCacheProvider).StreamOutput(tabId' cacheKey' _app.Context); " is 124.
Long Statement,DotNetNuke.HttpModules.OutputCaching,OutputCacheModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\OutputCaching\OutputCacheModule.cs,OnResolveRequestCache,The length of the statement  "				_app.Context.Response.AddHeader("Content-Type"' string.Format("{0}; charset={1}"' _app.Response.ContentType' _app.Response.Charset)); " is 133.
Long Statement,DotNetNuke.HttpModules.OutputCaching,OutputCacheModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\OutputCaching\OutputCacheModule.cs,OnResolveRequestCache,The length of the statement  "                if (tabSettings["CacheDuration"] != null && ! string.IsNullOrEmpty(tabSettings["CacheDuration"].ToString()) && Convert.ToInt32(tabSettings["CacheDuration"].ToString()) > 0) " is 172.
Long Statement,DotNetNuke.HttpModules.OutputCaching,OutputCacheModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\OutputCaching\OutputCacheModule.cs,OnResolveRequestCache,The length of the statement  "                    OutputCacheResponseFilter responseFilter = OutputCachingProvider.Instance(_app.Context.Items[ContextKeyTabOutputCacheProvider].ToString()).GetResponseFilter(Convert.ToInt32(_app.Context.Items[ContextKeyTabId])' " is 210.
Long Statement,DotNetNuke.HttpModules.Membership,MembershipModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\Membership\MembershipModule.cs,AuthenticateRequest,The length of the statement  "                if (!user.IsSuperUser && user.IsInRole("Unverified Users") && !HttpContext.Current.Items.Contains(DotNetNuke.UI.Skins.Skin.OnInitMessage)) " is 138.
Long Statement,DotNetNuke.HttpModules.Membership,MembershipModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\Membership\MembershipModule.cs,AuthenticateRequest,The length of the statement  "                    HttpContext.Current.Items.Add(DotNetNuke.UI.Skins.Skin.OnInitMessage' Localization.GetString("UnverifiedUser"' Localization.SharedResourceFile' CurrentCulture)); " is 161.
Long Statement,DotNetNuke.HttpModules.Membership,MembershipModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\Membership\MembershipModule.cs,AuthenticateRequest,The length of the statement  "                if (!user.IsSuperUser && HttpContext.Current.Request.QueryString.AllKeys.Contains("VerificationSuccess") && !HttpContext.Current.Items.Contains(DotNetNuke.UI.Skins.Skin.OnInitMessage)) " is 184.
Long Statement,DotNetNuke.HttpModules.Membership,MembershipModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\Membership\MembershipModule.cs,AuthenticateRequest,The length of the statement  "                    HttpContext.Current.Items.Add(DotNetNuke.UI.Skins.Skin.OnInitMessage' Localization.GetString("VerificationSuccess"' Localization.SharedResourceFile' CurrentCulture)); " is 166.
Long Statement,DotNetNuke.HttpModules.Membership,MembershipModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\Membership\MembershipModule.cs,AuthenticateRequest,The length of the statement  "                    HttpContext.Current.Items.Add(DotNetNuke.UI.Skins.Skin.OnInitMessageType' ModuleMessage.ModuleMessageType.GreenSuccess); " is 120.
Long Statement,DotNetNuke.HttpModules.Membership,MembershipModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\Membership\MembershipModule.cs,AuthenticateRequest,The length of the statement  "                    foreach (var role in RoleController.Instance.GetRoles(portalSettings.PortalId' r => (r.SecurityMode != SecurityMode.SocialGroup || r.IsPublic) && r.Status == RoleStatus.Approved)) " is 179.
Long Statement,DotNetNuke.HttpModules.Membership,MembershipModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\Membership\MembershipModule.cs,AuthenticateRequest,The length of the statement  "                            RoleController.Instance.UpdateUserRole(portalSettings.PortalId' user.UserID' role.RoleID' RoleStatus.Approved' false' false); " is 125.
Long Statement,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,The length of the statement  "                if ((request.Path.IndexOf("\\"' StringComparison.Ordinal) >= 0 || Path.GetFullPath(request.PhysicalPath) != request.PhysicalPath)) " is 130.
Long Statement,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,The length of the statement  "                //example to test: http://localhost/dotnetnuke_2/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/default.aspx " is 293.
Long Statement,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,The length of the statement  "                    if (!autoAddPortalAlias && !request.Url.LocalPath.EndsWith(Globals.glbDefaultPage' StringComparison.InvariantCultureIgnoreCase)) " is 128.
Long Statement,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,The length of the statement  "                        TabCollection objTabs = TabController.Instance.GetTabsByPortal(tabPath.StartsWith("//host") ? Null.NullInteger : portalID); " is 123.
Long Statement,DotNetNuke.HttpModules.RequestFilter,RequestFilterSettings,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\RequestFilter\Config\RequestFilterSettings.cs,GetSettings,The length of the statement  "                            var ac = (RequestFilterRuleType)Enum.Parse(typeof(RequestFilterRuleType)' ruleList.Current.GetAttribute("action"' string.Empty)); " is 129.
Long Statement,DotNetNuke.HttpModules.RequestFilter,RequestFilterSettings,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\RequestFilter\Config\RequestFilterSettings.cs,GetSettings,The length of the statement  "                            var op = (RequestFilterOperatorType)Enum.Parse(typeof(RequestFilterOperatorType)' ruleList.Current.GetAttribute("operator"' string.Empty)); " is 139.
Long Statement,DotNetNuke.HttpModules.RequestFilter,RequestFilterSettings,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\RequestFilter\Config\RequestFilterSettings.cs,GetSettings,The length of the statement  "                            DotNetNuke.Services.Exceptions.Exceptions.LogException(new Exception(string.Format("Unable to read RequestFilter Rule: {0}:"' ruleList.Current.OuterXml)' ex)); " is 159.
Complex Conditional,DotNetNuke.HttpModules,MobileRedirectModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\MobileRedirect\MobileRedirectModule.cs,OnBeginRequest,The conditional expression  "!Initialize.ProcessHttpModule(app.Request' false' false)                      || app.Request.HttpMethod == "POST"                      || ServicesModule.ServiceApi.IsMatch(rawUrl)                       || MvcServicePath.IsMatch(rawUrl)                      || IsSpecialPage(rawUrl)                      || (portalSettings != null && !IsRedirectAllowed(rawUrl' app' portalSettings))"  is complex.
Complex Conditional,DotNetNuke.HttpModules,MobileRedirectModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\MobileRedirect\MobileRedirectModule.cs,OnBeginRequest,The conditional expression  "_redirectionController != null &&                  portalSettings?.ActiveTab != null &&                  !string.IsNullOrEmpty(app.Request.UserAgent) &&                  _redirectionController.IsRedirectAllowedForTheSession(app)"  is complex.
Complex Conditional,DotNetNuke.HttpModules.OutputCaching,OutputCacheModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\OutputCaching\OutputCacheModule.cs,OnResolveRequestCache,The conditional expression  "_app == null || _app.Context == null || _app.Response.ContentType.ToLower() != "text/html" || _app.Context.Request.IsAuthenticated || _app.Context.Request.Browser.Crawler"  is complex.
Complex Conditional,DotNetNuke.HttpModules.Membership,MembershipModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\Membership\MembershipModule.cs,AuthenticateRequest,The conditional expression  "user == null || user.IsDeleted || user.Membership.LockedOut                      || (!user.Membership.Approved && !user.IsInRole("Unverified Users"))                      || user.Username.ToLower() != context.User.Identity.Name.ToLower()"  is complex.
Complex Conditional,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,The conditional expression  "portalSettings.PortalAliasMappingMode == PortalSettings.PortalAliasMapping.Redirect                       && portalAliasInfo != null && !portalAliasInfo.IsPrimary                      && !string.IsNullOrWhiteSpace(portalSettings.DefaultPortalAlias)"  is complex.
Complex Conditional,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,The conditional expression  "Globals.UsePortNumber() &&                      ((app.Request.Url.Port != 80 && !app.Request.IsSecureConnection) ||                       (app.Request.Url.Port != 443 && app.Request.IsSecureConnection))"  is complex.
Magic Number,DotNetNuke.HttpModules.OutputCaching,OutputCacheModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\OutputCaching\OutputCacheModule.cs,OnResolveRequestCache,The following statement contains a magic number: int maxCachedVariationsForTab = 250;
Magic Number,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,The following statement contains a magic number: if (portalId != -1)              {                  //load the PortalSettings into current context                  var portalSettings = new PortalSettings(tabId' portalAliasInfo);                  app.Context.Items.Add("PortalSettings"' portalSettings);                    // load PortalSettings and HostSettings dictionaries into current context                  // specifically for use in DotNetNuke.Web.Client' which can't reference DotNetNuke.dll to get settings the normal way                  app.Context.Items.Add("PortalSettingsDictionary"' PortalController.Instance.GetPortalSettings(portalId));                  app.Context.Items.Add("HostSettingsDictionary"' HostController.Instance.GetSettingsDictionary());                      if (portalSettings.PortalAliasMappingMode == PortalSettings.PortalAliasMapping.Redirect                       && portalAliasInfo != null && !portalAliasInfo.IsPrimary                      && !string.IsNullOrWhiteSpace(portalSettings.DefaultPortalAlias) // don't redirect if no primary alias is defined                  )                   {                      //Permanently Redirect                      response.StatusCode = 301;                        var redirectAlias = Globals.AddHTTP(portalSettings.DefaultPortalAlias);                      var checkAlias = Globals.AddHTTP(portalAliasInfo.HTTPAlias);                      var redirectUrl = string.Concat(redirectAlias' request.RawUrl);                      if (redirectUrl.StartsWith(checkAlias' StringComparison.InvariantCultureIgnoreCase))                      {                          redirectUrl = string.Concat(redirectAlias' redirectUrl.Substring(checkAlias.Length));                      }                        response.AppendHeader("Location"' redirectUrl);                  }                    //manage page URL redirects - that reach here because they bypass the built-in navigation                  //ie Spiders' saved favorites' hand-crafted urls etc                  if (!String.IsNullOrEmpty(portalSettings.ActiveTab.Url) && request.QueryString["ctl"] == null &&                      request.QueryString["fileticket"] == null)                  {                      //Target Url                      string redirectUrl = portalSettings.ActiveTab.FullUrl;                      if (portalSettings.ActiveTab.PermanentRedirect)                      {                          //Permanently Redirect                          response.StatusCode = 301;                          response.AppendHeader("Location"' redirectUrl);                      }                      else                      {                          //Normal Redirect                          response.Redirect(redirectUrl' true);                      }                  }                    //manage secure connections                  if (request.Url.AbsolutePath.EndsWith(".aspx"' StringComparison.InvariantCultureIgnoreCase))                  {                      //request is for a standard page                      strURL = "";                      //if SSL is enabled                      if (portalSettings.SSLEnabled)                      {                          //if page is secure and connection is not secure orelse ssloffload is enabled and server value exists                          if ((portalSettings.ActiveTab.IsSecure && !request.IsSecureConnection) &&                              (IsSSLOffloadEnabled(request) == false))                          {                              //switch to secure connection                              strURL = requestedPath.Replace("http://"' "https://");                              strURL = FormatDomain(strURL' portalSettings.STDURL' portalSettings.SSLURL);                          }                      }                      //if SSL is enforced                      if (portalSettings.SSLEnforced)                      {                          //if page is not secure and connection is secure                           if ((!portalSettings.ActiveTab.IsSecure && request.IsSecureConnection))                          {                              //check if connection has already been forced to secure orelse ssloffload is disabled                              if (request.QueryString["ssl"] == null)                              {                                  strURL = requestedPath.Replace("https://"' "http://");                                  strURL = FormatDomain(strURL' portalSettings.SSLURL' portalSettings.STDURL);                              }                          }                      }                        //if a protocol switch is necessary                      if (!String.IsNullOrEmpty(strURL))                      {                          if (strURL.StartsWith("https://"' StringComparison.InvariantCultureIgnoreCase))                          {                              //redirect to secure connection                              response.RedirectPermanent(strURL);                          }                          else                              //when switching to an unsecure page' use a clientside redirector to avoid the browser security warning                          {                              response.Clear();                              //add a refresh header to the response                               response.AddHeader("Refresh"' "0;URL=" + strURL);                              //add the clientside javascript redirection script                              response.Write("<html><head><title></title>");                              response.Write("<!-- <script language=\"javascript\">window.location.replace(\"" + strURL +                                             "\")</script> -->");                              response.Write("</head><body></body></html>");                              //send the response                              response.End();                          }                      }                  }              }              else              {                  //alias does not exist in database                  //and all attempts to find another have failed                  //this should only happen if the HostPortal does not have any aliases                  //404 Error - Redirect to ErrorPage                  strURL = "~/ErrorPage.aspx?status=404&error=" + domainName;                  HttpContext.Current.Response.Clear();                  HttpContext.Current.Server.Transfer(strURL);              }
Magic Number,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,The following statement contains a magic number: if (portalId != -1)              {                  //load the PortalSettings into current context                  var portalSettings = new PortalSettings(tabId' portalAliasInfo);                  app.Context.Items.Add("PortalSettings"' portalSettings);                    // load PortalSettings and HostSettings dictionaries into current context                  // specifically for use in DotNetNuke.Web.Client' which can't reference DotNetNuke.dll to get settings the normal way                  app.Context.Items.Add("PortalSettingsDictionary"' PortalController.Instance.GetPortalSettings(portalId));                  app.Context.Items.Add("HostSettingsDictionary"' HostController.Instance.GetSettingsDictionary());                      if (portalSettings.PortalAliasMappingMode == PortalSettings.PortalAliasMapping.Redirect                       && portalAliasInfo != null && !portalAliasInfo.IsPrimary                      && !string.IsNullOrWhiteSpace(portalSettings.DefaultPortalAlias) // don't redirect if no primary alias is defined                  )                   {                      //Permanently Redirect                      response.StatusCode = 301;                        var redirectAlias = Globals.AddHTTP(portalSettings.DefaultPortalAlias);                      var checkAlias = Globals.AddHTTP(portalAliasInfo.HTTPAlias);                      var redirectUrl = string.Concat(redirectAlias' request.RawUrl);                      if (redirectUrl.StartsWith(checkAlias' StringComparison.InvariantCultureIgnoreCase))                      {                          redirectUrl = string.Concat(redirectAlias' redirectUrl.Substring(checkAlias.Length));                      }                        response.AppendHeader("Location"' redirectUrl);                  }                    //manage page URL redirects - that reach here because they bypass the built-in navigation                  //ie Spiders' saved favorites' hand-crafted urls etc                  if (!String.IsNullOrEmpty(portalSettings.ActiveTab.Url) && request.QueryString["ctl"] == null &&                      request.QueryString["fileticket"] == null)                  {                      //Target Url                      string redirectUrl = portalSettings.ActiveTab.FullUrl;                      if (portalSettings.ActiveTab.PermanentRedirect)                      {                          //Permanently Redirect                          response.StatusCode = 301;                          response.AppendHeader("Location"' redirectUrl);                      }                      else                      {                          //Normal Redirect                          response.Redirect(redirectUrl' true);                      }                  }                    //manage secure connections                  if (request.Url.AbsolutePath.EndsWith(".aspx"' StringComparison.InvariantCultureIgnoreCase))                  {                      //request is for a standard page                      strURL = "";                      //if SSL is enabled                      if (portalSettings.SSLEnabled)                      {                          //if page is secure and connection is not secure orelse ssloffload is enabled and server value exists                          if ((portalSettings.ActiveTab.IsSecure && !request.IsSecureConnection) &&                              (IsSSLOffloadEnabled(request) == false))                          {                              //switch to secure connection                              strURL = requestedPath.Replace("http://"' "https://");                              strURL = FormatDomain(strURL' portalSettings.STDURL' portalSettings.SSLURL);                          }                      }                      //if SSL is enforced                      if (portalSettings.SSLEnforced)                      {                          //if page is not secure and connection is secure                           if ((!portalSettings.ActiveTab.IsSecure && request.IsSecureConnection))                          {                              //check if connection has already been forced to secure orelse ssloffload is disabled                              if (request.QueryString["ssl"] == null)                              {                                  strURL = requestedPath.Replace("https://"' "http://");                                  strURL = FormatDomain(strURL' portalSettings.SSLURL' portalSettings.STDURL);                              }                          }                      }                        //if a protocol switch is necessary                      if (!String.IsNullOrEmpty(strURL))                      {                          if (strURL.StartsWith("https://"' StringComparison.InvariantCultureIgnoreCase))                          {                              //redirect to secure connection                              response.RedirectPermanent(strURL);                          }                          else                              //when switching to an unsecure page' use a clientside redirector to avoid the browser security warning                          {                              response.Clear();                              //add a refresh header to the response                               response.AddHeader("Refresh"' "0;URL=" + strURL);                              //add the clientside javascript redirection script                              response.Write("<html><head><title></title>");                              response.Write("<!-- <script language=\"javascript\">window.location.replace(\"" + strURL +                                             "\")</script> -->");                              response.Write("</head><body></body></html>");                              //send the response                              response.End();                          }                      }                  }              }              else              {                  //alias does not exist in database                  //and all attempts to find another have failed                  //this should only happen if the HostPortal does not have any aliases                  //404 Error - Redirect to ErrorPage                  strURL = "~/ErrorPage.aspx?status=404&error=" + domainName;                  HttpContext.Current.Response.Clear();                  HttpContext.Current.Server.Transfer(strURL);              }
Magic Number,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,The following statement contains a magic number: for (int ruleIndex = 0; ruleIndex <= rules.Count - 1; ruleIndex++)              {                  //check for the existence of the LookFor value                   string pattern = "^" +                                   RewriterUtils.ResolveUrl(app.Context.Request.ApplicationPath' rules[ruleIndex].LookFor) +                                   "$";                  Match objMatch = Regex.Match(requestedPath' pattern' RegexOptions.IgnoreCase);                    //if there is a match                  if ((objMatch.Success))                  {                      //create a new URL using the SendTo regex value                      sendTo = RewriterUtils.ResolveUrl(app.Context.Request.ApplicationPath'                                                        Regex.Replace(requestedPath' pattern' rules[ruleIndex].SendTo'                                                                      RegexOptions.IgnoreCase));                        string parameters = objMatch.Groups[2].Value;                      //process the parameters                      if ((parameters.Trim().Length > 0))                      {                          //split the value into an array based on "/" ( ie. /tabid/##/ )                          parameters = parameters.Replace("\\"' "/");                          string[] splitParameters = parameters.Split('/');                          //icreate a well formed querystring based on the array of parameters                          for (int parameterIndex = 0; parameterIndex < splitParameters.Length; parameterIndex++)                          {                              //ignore the page name                               if (                                  splitParameters[parameterIndex].IndexOf(".aspx"'                                                                          StringComparison.InvariantCultureIgnoreCase) ==                                  -1)                              {                                  //get parameter name                                  string parameterName = splitParameters[parameterIndex].Trim();                                  if (parameterName.Length > 0)                                  {                                      //add parameter to SendTo if it does not exist already                                        if (                                          sendTo.IndexOf("?" + parameterName + "="'                                                         StringComparison.InvariantCultureIgnoreCase) == -1 &&                                          sendTo.IndexOf("&" + parameterName + "="'                                                         StringComparison.InvariantCultureIgnoreCase) == -1)                                      {                                          //get parameter delimiter                                          string parameterDelimiter = sendTo.IndexOf("?"' StringComparison.Ordinal) != -1 ? "&" : "?";                                          sendTo = sendTo + parameterDelimiter + parameterName;                                          //get parameter value                                          string parameterValue = "";                                          if (parameterIndex < splitParameters.Length - 1)                                          {                                              parameterIndex += 1;                                              if (!String.IsNullOrEmpty(splitParameters[parameterIndex].Trim()))                                              {                                                  parameterValue = splitParameters[parameterIndex].Trim();                                              }                                          }                                          //add the parameter value                                          if (parameterValue.Length > 0)                                          {                                              sendTo = sendTo + "=" + parameterValue;                                          }                                      }                                  }                              }                          }                      }                      matchIndex = ruleIndex;                      break; //exit as soon as it processes the first match                  }              }
Magic Number,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,The following statement contains a magic number: if (matchIndex != -1)              {                  if (rules[matchIndex].SendTo.StartsWith("~"))                  {                      //rewrite the URL for internal processing                      RewriterUtils.RewriteUrl(app.Context' sendTo);                  }                  else                  {                      //it is not possible to rewrite the domain portion of the URL so redirect to the new URL                      response.Redirect(sendTo' true);                  }              }              else              {                  //Try to rewrite by TabPath                  string url;                  if (Globals.UsePortNumber() &&                      ((app.Request.Url.Port != 80 && !app.Request.IsSecureConnection) ||                       (app.Request.Url.Port != 443 && app.Request.IsSecureConnection)))                  {                      url = app.Request.Url.Host + ":" + app.Request.Url.Port + app.Request.Url.LocalPath;                  }                  else                  {                      url = app.Request.Url.Host + app.Request.Url.LocalPath;                  }                    if (!String.IsNullOrEmpty(myAlias))                  {                      if (objPortalAlias != null)                      {                          int portalID = objPortalAlias.PortalID;                          //Identify Tab Name                           string tabPath = url;                          if (tabPath.StartsWith(myAlias))                          {                              tabPath = url.Remove(0' myAlias.Length);                          }                          //Default Page has been Requested                          if ((tabPath == "/" + Globals.glbDefaultPage.ToLower()))                          {                              return;                          }                            //Start of patch                          string cultureCode = string.Empty;                            Dictionary<string' Locale> dicLocales = LocaleController.Instance.GetLocales(portalID);                          if (dicLocales.Count > 1)                          {                              String[] splitUrl = app.Request.Url.ToString().Split('/');                                foreach (string culturePart in splitUrl)                              {                                  if (culturePart.IndexOf("-"' StringComparison.Ordinal) > -1)                                  {                                      foreach (KeyValuePair<string' Locale> key in dicLocales)                                      {                                          if (key.Key.ToLower().Equals(culturePart.ToLower()))                                          {                                              cultureCode = key.Value.Code;                                              tabPath = tabPath.Replace("/" + culturePart' "");                                              break;                                          }                                      }                                  }                              }                          }                            // Check to see if the tab exists (if localization is enable' check for the specified culture)                          int tabID = TabController.GetTabByTabPath(portalID'                                                                    tabPath.Replace("/"' "//").Replace(".aspx"' "")'                                                                    cultureCode);                            // Check to see if neutral culture tab exists                          if ((tabID == Null.NullInteger && cultureCode.Length > 0))                          {                              tabID = TabController.GetTabByTabPath(portalID'                                                                    tabPath.Replace("/"' "//").Replace(".aspx"' "")' "");                          }                          //End of patch                            if ((tabID != Null.NullInteger))                          {                              string sendToUrl = "~/" + Globals.glbDefaultPage + "?TabID=" + tabID;                              if (!cultureCode.Equals(string.Empty))                              {                                  sendToUrl = sendToUrl + "&language=" + cultureCode;                              }                              if ((!String.IsNullOrEmpty(app.Request.Url.Query)))                              {                                  sendToUrl = sendToUrl + "&" + app.Request.Url.Query.TrimStart('?');                              }                              RewriterUtils.RewriteUrl(app.Context' sendToUrl);                              return;                          }                          tabPath = tabPath.ToLower();                          if ((tabPath.IndexOf('?') != -1))                          {                              tabPath = tabPath.Substring(0' tabPath.IndexOf('?'));                          }                            //Get the Portal                          PortalInfo portal = PortalController.Instance.GetPortal(portalID);                          string requestQuery = app.Request.Url.Query;                          if (!string.IsNullOrEmpty(requestQuery))                          {                              requestQuery = TabIdRegex.Replace(requestQuery' string.Empty);                              requestQuery = PortalIdRegex.Replace(requestQuery' string.Empty);                              requestQuery = requestQuery.TrimStart('?'' '&');                          }                          if (tabPath == "/login.aspx")                          {                              if (portal.LoginTabId > Null.NullInteger && Globals.ValidateLoginTabID(portal.LoginTabId))                              {                                  if (!string.IsNullOrEmpty(requestQuery))                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.LoginTabId + "&" + requestQuery);                                  }                                  else                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.LoginTabId);                                  }                              }                              else                              {                                  if (!string.IsNullOrEmpty(requestQuery))                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.HomeTabId + "&portalid=" + portalID + "&ctl=login&" +                                                               requestQuery);                                  }                                  else                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.HomeTabId + "&portalid=" + portalID + "&ctl=login");                                  }                              }                              return;                          }                          if (tabPath == "/register.aspx")                          {                              if (portal.RegisterTabId > Null.NullInteger)                              {                                  if (!string.IsNullOrEmpty(requestQuery))                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.RegisterTabId + "&portalid=" + portalID + "&" +                                                               requestQuery);                                  }                                  else                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.RegisterTabId + "&portalid=" + portalID);                                  }                              }                              else                              {                                  if (!string.IsNullOrEmpty(requestQuery))                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.HomeTabId + "&portalid=" + portalID +                                                               "&ctl=Register&" + requestQuery);                                  }                                  else                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.HomeTabId + "&portalid=" + portalID +                                                               "&ctl=Register");                                  }                              }                              return;                          }                          if (tabPath == "/terms.aspx")                          {                              if (!string.IsNullOrEmpty(requestQuery))                              {                                  RewriterUtils.RewriteUrl(app.Context'                                                           "~/" + Globals.glbDefaultPage + "?TabID=" + portal.HomeTabId +                                                           "&portalid=" + portalID + "&ctl=Terms&" + requestQuery);                              }                              else                              {                                  RewriterUtils.RewriteUrl(app.Context'                                                           "~/" + Globals.glbDefaultPage + "?TabID=" + portal.HomeTabId +                                                           "&portalid=" + portalID + "&ctl=Terms");                              }                              return;                          }                          if (tabPath == "/privacy.aspx")                          {                              if (!string.IsNullOrEmpty(requestQuery))                              {                                  RewriterUtils.RewriteUrl(app.Context'                                                           "~/" + Globals.glbDefaultPage + "?TabID=" + portal.HomeTabId +                                                           "&portalid=" + portalID + "&ctl=Privacy&" + requestQuery);                              }                              else                              {                                  RewriterUtils.RewriteUrl(app.Context'                                                           "~/" + Globals.glbDefaultPage + "?TabID=" + portal.HomeTabId +                                                           "&portalid=" + portalID + "&ctl=Privacy");                              }                              return;                          }                          tabPath = tabPath.Replace("/"' "//");                          tabPath = tabPath.Replace(".aspx"' "");                          TabCollection objTabs = TabController.Instance.GetTabsByPortal(tabPath.StartsWith("//host") ? Null.NullInteger : portalID);                          foreach (KeyValuePair<int' TabInfo> kvp in objTabs)                          {                              if ((kvp.Value.IsDeleted == false && kvp.Value.TabPath.ToLower() == tabPath))                              {                                  if ((!String.IsNullOrEmpty(app.Request.Url.Query)))                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" + kvp.Value.TabID +                                                               "&" + app.Request.Url.Query.TrimStart('?'));                                  }                                  else                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" + kvp.Value.TabID);                                  }                                  return;                              }                          }                      }                  }              }
Magic Number,DotNetNuke.HttpModules.UrlRewrite,BasicUrlRewriter,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\BasicUrlRewriter.cs,RewriteUrl,The following statement contains a magic number: if (matchIndex != -1)              {                  if (rules[matchIndex].SendTo.StartsWith("~"))                  {                      //rewrite the URL for internal processing                      RewriterUtils.RewriteUrl(app.Context' sendTo);                  }                  else                  {                      //it is not possible to rewrite the domain portion of the URL so redirect to the new URL                      response.Redirect(sendTo' true);                  }              }              else              {                  //Try to rewrite by TabPath                  string url;                  if (Globals.UsePortNumber() &&                      ((app.Request.Url.Port != 80 && !app.Request.IsSecureConnection) ||                       (app.Request.Url.Port != 443 && app.Request.IsSecureConnection)))                  {                      url = app.Request.Url.Host + ":" + app.Request.Url.Port + app.Request.Url.LocalPath;                  }                  else                  {                      url = app.Request.Url.Host + app.Request.Url.LocalPath;                  }                    if (!String.IsNullOrEmpty(myAlias))                  {                      if (objPortalAlias != null)                      {                          int portalID = objPortalAlias.PortalID;                          //Identify Tab Name                           string tabPath = url;                          if (tabPath.StartsWith(myAlias))                          {                              tabPath = url.Remove(0' myAlias.Length);                          }                          //Default Page has been Requested                          if ((tabPath == "/" + Globals.glbDefaultPage.ToLower()))                          {                              return;                          }                            //Start of patch                          string cultureCode = string.Empty;                            Dictionary<string' Locale> dicLocales = LocaleController.Instance.GetLocales(portalID);                          if (dicLocales.Count > 1)                          {                              String[] splitUrl = app.Request.Url.ToString().Split('/');                                foreach (string culturePart in splitUrl)                              {                                  if (culturePart.IndexOf("-"' StringComparison.Ordinal) > -1)                                  {                                      foreach (KeyValuePair<string' Locale> key in dicLocales)                                      {                                          if (key.Key.ToLower().Equals(culturePart.ToLower()))                                          {                                              cultureCode = key.Value.Code;                                              tabPath = tabPath.Replace("/" + culturePart' "");                                              break;                                          }                                      }                                  }                              }                          }                            // Check to see if the tab exists (if localization is enable' check for the specified culture)                          int tabID = TabController.GetTabByTabPath(portalID'                                                                    tabPath.Replace("/"' "//").Replace(".aspx"' "")'                                                                    cultureCode);                            // Check to see if neutral culture tab exists                          if ((tabID == Null.NullInteger && cultureCode.Length > 0))                          {                              tabID = TabController.GetTabByTabPath(portalID'                                                                    tabPath.Replace("/"' "//").Replace(".aspx"' "")' "");                          }                          //End of patch                            if ((tabID != Null.NullInteger))                          {                              string sendToUrl = "~/" + Globals.glbDefaultPage + "?TabID=" + tabID;                              if (!cultureCode.Equals(string.Empty))                              {                                  sendToUrl = sendToUrl + "&language=" + cultureCode;                              }                              if ((!String.IsNullOrEmpty(app.Request.Url.Query)))                              {                                  sendToUrl = sendToUrl + "&" + app.Request.Url.Query.TrimStart('?');                              }                              RewriterUtils.RewriteUrl(app.Context' sendToUrl);                              return;                          }                          tabPath = tabPath.ToLower();                          if ((tabPath.IndexOf('?') != -1))                          {                              tabPath = tabPath.Substring(0' tabPath.IndexOf('?'));                          }                            //Get the Portal                          PortalInfo portal = PortalController.Instance.GetPortal(portalID);                          string requestQuery = app.Request.Url.Query;                          if (!string.IsNullOrEmpty(requestQuery))                          {                              requestQuery = TabIdRegex.Replace(requestQuery' string.Empty);                              requestQuery = PortalIdRegex.Replace(requestQuery' string.Empty);                              requestQuery = requestQuery.TrimStart('?'' '&');                          }                          if (tabPath == "/login.aspx")                          {                              if (portal.LoginTabId > Null.NullInteger && Globals.ValidateLoginTabID(portal.LoginTabId))                              {                                  if (!string.IsNullOrEmpty(requestQuery))                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.LoginTabId + "&" + requestQuery);                                  }                                  else                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.LoginTabId);                                  }                              }                              else                              {                                  if (!string.IsNullOrEmpty(requestQuery))                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.HomeTabId + "&portalid=" + portalID + "&ctl=login&" +                                                               requestQuery);                                  }                                  else                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.HomeTabId + "&portalid=" + portalID + "&ctl=login");                                  }                              }                              return;                          }                          if (tabPath == "/register.aspx")                          {                              if (portal.RegisterTabId > Null.NullInteger)                              {                                  if (!string.IsNullOrEmpty(requestQuery))                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.RegisterTabId + "&portalid=" + portalID + "&" +                                                               requestQuery);                                  }                                  else                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.RegisterTabId + "&portalid=" + portalID);                                  }                              }                              else                              {                                  if (!string.IsNullOrEmpty(requestQuery))                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.HomeTabId + "&portalid=" + portalID +                                                               "&ctl=Register&" + requestQuery);                                  }                                  else                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" +                                                               portal.HomeTabId + "&portalid=" + portalID +                                                               "&ctl=Register");                                  }                              }                              return;                          }                          if (tabPath == "/terms.aspx")                          {                              if (!string.IsNullOrEmpty(requestQuery))                              {                                  RewriterUtils.RewriteUrl(app.Context'                                                           "~/" + Globals.glbDefaultPage + "?TabID=" + portal.HomeTabId +                                                           "&portalid=" + portalID + "&ctl=Terms&" + requestQuery);                              }                              else                              {                                  RewriterUtils.RewriteUrl(app.Context'                                                           "~/" + Globals.glbDefaultPage + "?TabID=" + portal.HomeTabId +                                                           "&portalid=" + portalID + "&ctl=Terms");                              }                              return;                          }                          if (tabPath == "/privacy.aspx")                          {                              if (!string.IsNullOrEmpty(requestQuery))                              {                                  RewriterUtils.RewriteUrl(app.Context'                                                           "~/" + Globals.glbDefaultPage + "?TabID=" + portal.HomeTabId +                                                           "&portalid=" + portalID + "&ctl=Privacy&" + requestQuery);                              }                              else                              {                                  RewriterUtils.RewriteUrl(app.Context'                                                           "~/" + Globals.glbDefaultPage + "?TabID=" + portal.HomeTabId +                                                           "&portalid=" + portalID + "&ctl=Privacy");                              }                              return;                          }                          tabPath = tabPath.Replace("/"' "//");                          tabPath = tabPath.Replace(".aspx"' "");                          TabCollection objTabs = TabController.Instance.GetTabsByPortal(tabPath.StartsWith("//host") ? Null.NullInteger : portalID);                          foreach (KeyValuePair<int' TabInfo> kvp in objTabs)                          {                              if ((kvp.Value.IsDeleted == false && kvp.Value.TabPath.ToLower() == tabPath))                              {                                  if ((!String.IsNullOrEmpty(app.Request.Url.Query)))                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" + kvp.Value.TabID +                                                               "&" + app.Request.Url.Query.TrimStart('?'));                                  }                                  else                                  {                                      RewriterUtils.RewriteUrl(app.Context'                                                               "~/" + Globals.glbDefaultPage + "?TabID=" + kvp.Value.TabID);                                  }                                  return;                              }                          }                      }                  }              }
Magic Number,DotNetNuke.HttpModules.RequestFilter,RequestFilterRule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\RequestFilter\RequestFilterRule.cs,Execute,The following statement contains a magic number: switch (Action)              {                  case RequestFilterRuleType.Redirect:                      response.Redirect(Location' true);                      break;                  case RequestFilterRuleType.PermanentRedirect:                      response.StatusCode = 301;                      response.Status = "301 Moved Permanently";                      response.RedirectLocation = Location;                      response.End();                      break;                  case RequestFilterRuleType.NotFound:                      response.StatusCode = 404;                      response.SuppressContent = true;                      response.End();                      break;              }
Magic Number,DotNetNuke.HttpModules.RequestFilter,RequestFilterRule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\RequestFilter\RequestFilterRule.cs,Execute,The following statement contains a magic number: switch (Action)              {                  case RequestFilterRuleType.Redirect:                      response.Redirect(Location' true);                      break;                  case RequestFilterRuleType.PermanentRedirect:                      response.StatusCode = 301;                      response.Status = "301 Moved Permanently";                      response.RedirectLocation = Location;                      response.End();                      break;                  case RequestFilterRuleType.NotFound:                      response.StatusCode = 404;                      response.SuppressContent = true;                      response.End();                      break;              }
Missing Default,DotNetNuke.HttpModules.RequestFilter,RequestFilterModule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\RequestFilter\RequestFilterModule.cs,FilterRequest,The following switch statement is missing a default case: switch (varArray[1])                          {                              case "IPv4":                                  varVal = NetworkUtils.GetAddress(varVal' AddressType.IPv4);                                  break;                              case "IPv6":                                  varVal = NetworkUtils.GetAddress(varVal' AddressType.IPv4);                                  break;                          }
Missing Default,DotNetNuke.HttpModules.RequestFilter,RequestFilterRule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\RequestFilter\RequestFilterRule.cs,Matches,The following switch statement is missing a default case: switch (Operator)              {                  case RequestFilterOperatorType.Equal:                      return Values.Contains(ServerVariableValue.ToUpperInvariant());                  case RequestFilterOperatorType.NotEqual:                      return !Values.Contains(ServerVariableValue.ToUpperInvariant());                  case RequestFilterOperatorType.Regex:                      return Regex.IsMatch(ServerVariableValue' Values[0]' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);              }
Missing Default,DotNetNuke.HttpModules.RequestFilter,RequestFilterRule,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\RequestFilter\RequestFilterRule.cs,Execute,The following switch statement is missing a default case: switch (Action)              {                  case RequestFilterRuleType.Redirect:                      response.Redirect(Location' true);                      break;                  case RequestFilterRuleType.PermanentRedirect:                      response.StatusCode = 301;                      response.Status = "301 Moved Permanently";                      response.RedirectLocation = Location;                      response.End();                      break;                  case RequestFilterRuleType.NotFound:                      response.StatusCode = 404;                      response.SuppressContent = true;                      response.End();                      break;              }
Missing Default,DotNetNuke.Services.Url.FriendlyUrl,DNNFriendlyUrlProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\HttpModules\UrlRewrite\FriendlyUrlProvider.cs,DNNFriendlyUrlProvider,The following switch statement is missing a default case: switch (_urlFormat)              {                  case UrlFormatType.Advanced:                      _providerInstance = new AdvancedFriendlyUrlProvider(objProvider.Attributes);                      break;                  case UrlFormatType.HumanFriendly:                  case UrlFormatType.SearchFriendly:                      _providerInstance = new BasicFriendlyUrlProvider(objProvider.Attributes);                      break;              }
