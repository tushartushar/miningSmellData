Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ClientDependency.Core,HtmlAttributesStringParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\HtmlAttributesStringParser.cs,ParseIntoDictionary,Cyclomatic complexity of the method is 10
Complex Method,ClientDependency.Core,RequestHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\RequestHelper.cs,TryReadUri,Cyclomatic complexity of the method is 11
Complex Method,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,Cyclomatic complexity of the method is 11
Complex Method,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,action,Cyclomatic complexity of the method is 33
Complex Method,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,next,Cyclomatic complexity of the method is 10
Complex Method,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequest,Cyclomatic complexity of the method is 10
Complex Method,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,GetCompositeFileUrl,Cyclomatic complexity of the method is 12
Complex Method,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,Initialize,Cyclomatic complexity of the method is 15
Complex Method,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,CreatePath,Cyclomatic complexity of the method is 8
Complex Method,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,Cyclomatic complexity of the method is 11
Complex Method,ClientDependency.Core.Config,ClientDependencySettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\ClientDependencySettings.cs,LoadProviders,Cyclomatic complexity of the method is 8
Complex Method,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,GetHtmlAttributes,Cyclomatic complexity of the method is 18
Long Parameter List,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterDependency,The method has 5 parameters.
Long Parameter List,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterDependency,The method has 5 parameters.
Long Parameter List,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterDependency,The method has 5 parameters.
Long Parameter List,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterDependencyWithProvider,The method has 6 parameters.
Long Parameter List,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterDependency,The method has 6 parameters.
Long Parameter List,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterDependency,The method has 7 parameters.
Long Parameter List,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterDependency,The method has 6 parameters.
Long Parameter List,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterDependency,The method has 7 parameters.
Long Parameter List,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterDependency,The method has 8 parameters.
Long Parameter List,ClientDependency.Core,PlaceholderParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\PlaceholderParser.cs,ParseHtmlPlaceholders,The method has 5 parameters.
Long Parameter List,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,ClientDependencyAttribute,The method has 6 parameters.
Long Parameter List,ClientDependency.Core,RequestHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\RequestHelper.cs,TryReadUri,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles,IVirtualFileWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\IVirtualFileWriter.cs,WriteToStream,The method has 6 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles,DefaultFileWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\DefaultFileWriter.cs,WriteToStream,The method has 6 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles,DefaultFileWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\DefaultFileWriter.cs,WriteContentToStream,The method has 6 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles,IFileWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\IFileWriter.cs,WriteToStream,The method has 6 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles,CompositeFileMap,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeFileMap.cs,CompositeFileMap,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The method has 6 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,SetCaching,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,WriteFileToStream,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,WriteVirtualFileToStream,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,GetCompositeFileUrls,The method has 6 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,GetCompositeFileUrl,The method has 6 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,BaseFileMapProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseFileMapProvider.cs,CreateUpdateMap,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Parse,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,CompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\CompositeFileProcessingProvider.cs,WriteFileToStream,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,CompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\CompositeFileProcessingProvider.cs,WriteFileToStream,The method has 6 parameters.
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,XmlFileMapper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\XmlFileMapper.cs,CreateUpdateMap,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.Controls,ClientDependencyLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyLoader.cs,RegisterDependency,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.Controls,ClientDependencyLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyLoader.cs,RegisterDependency,The method has 6 parameters.
Long Parameter List,ClientDependency.Core.Controls,ClientDependencyLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyLoader.cs,RegisterDependency,The method has 7 parameters.
Long Parameter List,ClientDependency.Core.FileRegistration.Providers,BaseRenderer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseRenderer.cs,RegisterDependencies,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.FileRegistration.Providers,StandardRenderer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\StandardRenderer.cs,RegisterDependencies,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,WriteStaggeredDependencies,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,WriteDependencies,The method has 5 parameters.
Long Parameter List,ClientDependency.Core.Module,RogueFileFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Module\RogueFileFilter.cs,ReplaceContent,The method has 6 parameters.
Long Statement,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterClientDependencies,The length of the statement  "	ProviderDependencyList currList = Dependencies.Where (x => x.ProviderIs (provider)).DefaultIfEmpty (new ProviderDependencyList (provider)).SingleOrDefault (); " is 158.
Long Statement,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterClientDependencies,The length of the statement  "		var forceList = Dependencies.Where (x => x.ProviderIs (prov)).DefaultIfEmpty (new ProviderDependencyList (prov)).SingleOrDefault (); " is 132.
Long Statement,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterClientDependencies,The length of the statement  "	//We will combine both the MVC and web forms providers here to pass in to the method since this method could be executing " is 121.
Long Statement,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterClientDependencies,The length of the statement  "	//We will combine both the MVC and web forms providers here to pass in to the method since this method could be executing " is 121.
Long Statement,ClientDependency.Core,BaseLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BaseLoader.cs,RegisterDependency,The length of the statement  "	RegisterDependency (file.Group' file.Priority' file.FilePath' file.PathNameAlias' file.DependencyType' htmlAttributes' file.ForceProvider' file.ForceBundle); " is 157.
Long Statement,ClientDependency.Core,BasicFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicFile.cs,Equals,The length of the statement  "	return string.Equals (FilePath' other.FilePath' StringComparison.InvariantCultureIgnoreCase) && DependencyType == other.DependencyType && Priority == other.Priority && Group == other.Group && string.Equals (PathNameAlias' other.PathNameAlias' StringComparison.InvariantCultureIgnoreCase) && string.Equals (ForceProvider' other.ForceProvider) && Equals (HtmlAttributes' other.HtmlAttributes); " is 391.
Long Statement,ClientDependency.Core,BasicPath,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicPath.cs,Equals,The length of the statement  "	return string.Equals (Name' other.Name' StringComparison.InvariantCultureIgnoreCase) && string.Equals (Path' other.Path' StringComparison.InvariantCultureIgnoreCase); " is 166.
Long Statement,ClientDependency.Core,BundleManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BundleManager.cs,GetCssBundle,The length of the statement  "	var found = Bundles.Where (x => x.Key.Type == ClientDependencyType.Css && x.Key.Name.Equals (bundleName' StringComparison.InvariantCultureIgnoreCase)); " is 151.
Long Statement,ClientDependency.Core,BundleManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BundleManager.cs,GetJsBundle,The length of the statement  "	var found = Bundles.Where (x => x.Key.Type == ClientDependencyType.Javascript && x.Key.Name.Equals (bundleName' StringComparison.InvariantCultureIgnoreCase)); " is 158.
Long Statement,ClientDependency.Core,BundleManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BundleManager.cs,CreateCssBundle,The length of the statement  "	Bundles.AddOrUpdate (new BundleDefinition (ClientDependencyType.Css' name)' s => OrderFiles (files)' (s' enumerable) => OrderFiles (files)); " is 140.
Long Statement,ClientDependency.Core,BundleManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BundleManager.cs,CreateCssBundle,The length of the statement  "	Bundles.AddOrUpdate (new BundleDefinition (ClientDependencyType.Css' name)' s => OrderFiles (files)' (s' enumerable) => OrderFiles (files)); " is 140.
Long Statement,ClientDependency.Core,BundleManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BundleManager.cs,CreateCssBundle,The length of the statement  "	Bundles.AddOrUpdate (new BundleDefinition (ClientDependencyType.Css' name)' s => OrderFiles (files)' (s' enumerable) => OrderFiles (files)); " is 140.
Long Statement,ClientDependency.Core,BundleManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BundleManager.cs,CreateJsBundle,The length of the statement  "	Bundles.AddOrUpdate (new BundleDefinition (ClientDependencyType.Javascript' name)' s => OrderFiles (files)' (s' enumerable) => OrderFiles (files)); " is 147.
Long Statement,ClientDependency.Core,BundleManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BundleManager.cs,CreateJsBundle,The length of the statement  "	Bundles.AddOrUpdate (new BundleDefinition (ClientDependencyType.Javascript' name)' s => OrderFiles (files)' (s' enumerable) => OrderFiles (files)); " is 147.
Long Statement,ClientDependency.Core,BundleManager,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BundleManager.cs,CreateJsBundle,The length of the statement  "	Bundles.AddOrUpdate (new BundleDefinition (ClientDependencyType.Javascript' name)' s => OrderFiles (files)' (s' enumerable) => OrderFiles (files)); " is 147.
Long Statement,ClientDependency.Core,CssHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CssHelper.cs,ParseImportStatements,The length of the statement  "			if ((path.StartsWith ("http://"' StringComparison.InvariantCultureIgnoreCase) || path.StartsWith ("https://"' StringComparison.InvariantCultureIgnoreCase) || path.StartsWith ("//"' StringComparison.InvariantCultureIgnoreCase))) { " is 229.
Long Statement,ClientDependency.Core,CssHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CssHelper.cs,ReplaceUrlsWithAbsolutePaths,The length of the statement  "			return string.Format (@"url(""{0}{1}"")"' (match.StartsWith ("http://"' StringComparison.InvariantCultureIgnoreCase) || match.StartsWith ("https://"' StringComparison.InvariantCultureIgnoreCase) || match.StartsWith ("//"' StringComparison.InvariantCultureIgnoreCase)) ? match : new Uri (cssLocation' match).PathAndQuery' hashSplit.Length > 1 ? ("#" + hashSplit [1]) : ""); " is 372.
Long Statement,ClientDependency.Core,FileWriters,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileWriters.cs,GetRegisteredExtensions,The length of the statement  "	return ExtensionWriters.Select (x => x.Key.ToUpper ()).Distinct ().Union (VirtualExtensionWriters.Select (x => x.Key.ToUpper ()).Distinct ()); " is 142.
Long Statement,ClientDependency.Core,HttpContextBaseExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\HttpContextBaseExtensions.cs,IsAbsolute,The length of the statement  "		throw new InvalidOperationException ("IsAbsolute method will check if a Virtual path is absolute' it is not supported for full URLs"); " is 134.
Long Statement,ClientDependency.Core,HttpContextBaseExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\HttpContextBaseExtensions.cs,IsAbsolutePath,The length of the statement  "	if (indexOfSlashes > -1 && (indexOfQuestionMarks < 0 || (indexOfQuestionMarks > -1 && indexOfQuestionMarks > indexOfSlashes))) " is 126.
Long Statement,ClientDependency.Core,ClientDependencyFileExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\IClientDependencyFileExtensions.cs,ResolveFilePath,The length of the statement  "	if (trimmedPath.StartsWith ("http://"' StringComparison.InvariantCultureIgnoreCase) || trimmedPath.StartsWith ("https://"' StringComparison.InvariantCultureIgnoreCase)) { " is 170.
Long Statement,ClientDependency.Core,ClientDependencyFileExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\IClientDependencyFileExtensions.cs,ResolveFilePath,The length of the statement  "		var path = http.Request.AppRelativeCurrentExecutionFilePath.Substring (0' http.Request.AppRelativeCurrentExecutionFilePath.LastIndexOf ('/') + 1); " is 146.
Long Statement,ClientDependency.Core,PhysicalFileReader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\IFileReader.cs,ReadFile,The length of the statement  "		ClientDependencySettings.Instance.Logger.Error (string.Format ("Could not read file {0}. EXCEPTION: {1}"' physicalPath' ex.Message)' ex); " is 137.
Long Statement,ClientDependency.Core,PlaceholderParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\PlaceholderParser.cs,ParseHtmlPlaceholders,The length of the statement  "				var args = new PlaceholderReplacementEventArgs (currentContext' ClientDependencyType.Javascript' rendererOutput != null ? rendererOutput.OutputJs : ""' m); " is 155.
Long Statement,ClientDependency.Core,PlaceholderParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\PlaceholderParser.cs,ParseHtmlPlaceholders,The length of the statement  "				var args = new PlaceholderReplacementEventArgs (currentContext' ClientDependencyType.Css' rendererOutput != null ? rendererOutput.OutputCss : ""' m); " is 149.
Long Statement,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,Equals,The length of the statement  "	return string.Equals (FilePath' other.FilePath' StringComparison.InvariantCultureIgnoreCase) && DependencyType == other.DependencyType && Priority == other.Priority && Group == other.Group && string.Equals (PathNameAlias' other.PathNameAlias' StringComparison.InvariantCultureIgnoreCase) && string.Equals (ForceProvider' other.ForceProvider) && Equals (HtmlAttributes' other.HtmlAttributes); " is 391.
Long Statement,ClientDependency.Core,RequestHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\RequestHelper.cs,TryReadUri,The length of the statement  "					ClientDependencySettings.Instance.Logger.Error (string.Format ("Could not load file contents from {0}. EXCEPTION: {1}"' url' ex.Message)' ex); " is 142.
Long Statement,ClientDependency.Core,RequestHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\RequestHelper.cs,TryReadUri,The length of the statement  "			if (url.StartsWith (http.Request.ApplicationPath.TrimEnd ('/') + "/webresource.axd"' StringComparison.InvariantCultureIgnoreCase)) { " is 132.
Long Statement,ClientDependency.Core,RequestHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\RequestHelper.cs,TryReadUri,The length of the statement  "				ClientDependencySettings.Instance.Logger.Error (string.Format ("Could not load file contents from {0}. Domain is not white-listed."' url)' null); " is 145.
Long Statement,ClientDependency.Core,RequestHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\RequestHelper.cs,TryReadUri,The length of the statement  "			ClientDependencySettings.Instance.Logger.Error (string.Format ("Could not load file contents from {0}. EXCEPTION: {1}"' url' ex.Message)' ex); " is 142.
Long Statement,ClientDependency.Core,UriExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\UriExtensions.cs,IsWebUri,The length of the statement  "	return uri.Scheme.Equals ("http"' StringComparison.InvariantCultureIgnoreCase) || uri.Scheme.Equals ("https"' StringComparison.InvariantCultureIgnoreCase); " is 155.
Long Statement,ClientDependency.Core,UriExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\UriExtensions.cs,ToAbsolutePath,The length of the statement  "	return string.Format (@"{0}{1}"' (path.StartsWith ("http://"' StringComparison.InvariantCultureIgnoreCase) || path.StartsWith ("https://"' StringComparison.InvariantCultureIgnoreCase) || path.StartsWith ("//"' StringComparison.InvariantCultureIgnoreCase)) ? path : new Uri (originalUri' path).PathAndQuery' hashSplit.Length > 1 ? ("#" + hashSplit [1]) : ""); " is 358.
Long Statement,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,action,The length of the statement  "		if ((theY == '\n' || theY == ' ') && (theA == '+' || theA == '-' || theA == '*' || theA == '/') && (theB == '+' || theB == '-' || theB == '*' || theB == '/')) { " is 160.
Long Statement,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,action,The length of the statement  "		if (theB == '/' && (theA == '(' || theA == ''' || theA == '=' || theA == ':' || theA == '[' || theA == '!' || theA == '&' || theA == '|' || theA == '?' || theA == '+' || theA == '-' || theA == '~' || theA == '*' || theA == '/' || theA == '{' || theA == '\n')) { " is 261.
Long Statement,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,isAlphanum,The length of the statement  "	return ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || c == '_' || c == '$' || c == '\\' || c > 126); " is 132.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeFileDefinition,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeFileDefinition.cs,Equals,The length of the statement  "	return (obj.GetType () == this.GetType () && ((CompositeFileDefinition)obj).IsLocalFile.Equals (IsLocalFile) && ((CompositeFileDefinition)obj).Uri.Equals (Uri)); " is 161.
Long Statement,ClientDependency.Core.CompositeFiles,DefaultFileWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\DefaultFileWriter.cs,WriteToStream,The length of the statement  "		ClientDependencySettings.Instance.Logger.Error (string.Format ("Could not write file {0} contents to stream. EXCEPTION: {1}"' fi.FullName' ex.Message)' ex); " is 156.
Long Statement,ClientDependency.Core.CompositeFiles,DefaultFileWriter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\DefaultFileWriter.cs,WriteContentToStream,The length of the statement  "		//need to write the imported sheets first since these theoretically should *always* be at the top for browser to support them " is 125.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequest,The length of the statement  "		ClientDependencySettings.Instance.Logger.Error (string.Format ("No bytes were returned' this is attempt {0}. Fileset: {1}' Type: {2}' Version: {3}"' i' fileKey' type' version)' null); " is 183.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequest,The length of the statement  "		ClientDependencySettings.Instance.Logger.Fatal (string.Format ("No bytes were returned after 5 attempts. Fileset: {0}' Type: {1}' Version: {2}"' fileKey' type' version)' null); " is 176.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The length of the statement  "	var map = ClientDependencySettings.Instance.DefaultFileMapProvider.GetCompositeFile (fileset' version' clientCompression.ToString ()); " is 134.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The length of the statement  "							throw new KeyNotFoundException ("no map was found for the dependency key: " + fileset + " 'CompositeUrlType.MappedId requires that a map is found"); " is 148.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The length of the statement  "					fileBytes = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.CombineFiles (filePaths.ToArray ()' context' type' out fileDefinitions); " is 157.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The length of the statement  "				outputBytes = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.CompressBytes (clientCompression' fileBytes); " is 132.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The length of the statement  "				var compositeFile = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.SaveCompositeFile (outputBytes' type' context.Server); " is 147.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The length of the statement  "						ClientDependencySettings.Instance.DefaultFileMapProvider.CreateUpdateMap (fileset' clientCompression.ToString ()' fileDefinitions.Select (x => new BasicFile (type) { " is 165.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,GetCombinedFiles,The length of the statement  "	return ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.CombineFiles (filePaths' context' type' out fDefs); " is 131.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,WritePathToStream,The length of the statement  "			var fileBasedExtensions = ClientDependencySettings.Instance.FileBasedDependencyExtensionList.Union (FileWriters.GetRegisteredExtensions ()); " is 140.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,WritePathToStream,The length of the statement  "							ClientDependencySettings.Instance.Logger.Error (string.Format ("Could not load file contents from {0}. EXCEPTION: {1}"' path' ex1.Message)' ex1); " is 145.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,WritePathToStream,The length of the statement  "				ClientDependencySettings.Instance.Logger.Error (string.Format ("Could not load file contents from {0}. EXCEPTION: {1}"' path' ex.Message)' ex); " is 143.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,WriteVirtualFileToStream,The length of the statement  "	return virtualWriter.WriteToStream (this' sw' vf' type' vf.Path' http) ? new CompositeFileDefinition (vf.Path' true) : null; " is 124.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,GetCompositeFileUrls,The length of the statement  "		if ((base64Builder.Length + compositeFileHandlerPath.Length + stringType.Length + version.ToString (CultureInfo.InvariantCulture).Length //this number deals with the ampersands' etc... " is 184.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,GetCompositeFileUrls,The length of the statement  "				throw new InvalidOperationException ("The path for the single dependency: '" + current.FilePath + "' exceeds the max length (" + maxLength + ")' either reduce the single dependency's path length or increase the CompositeDependencyHandler.MaxHandlerUrlLength value"); " is 266.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,ProcessCompositeList,The length of the statement  "		var fileKey = ClientDependencySettings.Instance.DefaultFileMapProvider.CreateNewMap (http' asArray' ClientDependencySettings.Instance.Version); " is 143.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,ProcessCompositeList,The length of the statement  "			GetCompositeFileUrl (fileKey' type' http' CompositeUrlType.MappedId' compositeFileHandlerPath' ClientDependencySettings.Instance.Version) " is 137.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,ProcessCompositeList,The length of the statement  "		return GetCompositeFileUrls (type' asArray' compositeFileHandlerPath' http' CompositeDependencyHandler.MaxHandlerUrlLength' ClientDependencySettings.Instance.Version).ToArray (); " is 178.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Parse,The length of the statement  "		var typeDelimiter = pathBasedUrlFormat.Substring (versionIndex + "{version}".Length' typeIndex - (versionIndex + "{version}".Length)); " is 134.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Parse,The length of the statement  "		var versionDelimiter = pathBasedUrlFormat.Substring ("{dependencyId}".Length' versionIndex - ("{dependencyId}".Length)); " is 120.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Parse,The length of the statement  "		for (var i = path.LastIndexOf (typeDelimiter) - 1; i > path.Substring (0' path.LastIndexOf (typeDelimiter)).LastIndexOf (versionDelimiter) + (typeDelimiter.Length - 1); i--) { " is 175.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,The length of the statement  "			throw new FormatException ("The ordering of the tokens in the pathUrlFormat must be in the order: dependencyId' version' type"); " is 128.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,The length of the statement  "		throw new FormatException ("The value specified for pathUrlFormat contains a '{' character outside of the token declaration which is invalid"); " is 143.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,The length of the statement  "		throw new FormatException ("The value specified for pathUrlFormat contains a '}' character outside of the token declaration which is invalid"); " is 143.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,The length of the statement  "	if (pathChars [pathBasedUrlFormat.IndexOf ('}') + 1] == '{' || pathChars [pathBasedUrlFormat.IndexOf ('}') + 1] == '}') { " is 121.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,The length of the statement  "	if (pathChars [pathBasedUrlFormat.IndexOf ('}'' pathBasedUrlFormat.IndexOf ('}') + 1) + 1] == '{' || pathChars [pathBasedUrlFormat.IndexOf ('}'' pathBasedUrlFormat.IndexOf ('}') + 1) + 1] == '}') { " is 197.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,CompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\CompositeFileProcessingProvider.cs,SaveCompositeFile,The length of the statement  "	var fi = new FileInfo (Path.Combine (CompositeFilePath.FullName' ClientDependencySettings.Instance.Version + "_" + Guid.NewGuid ().ToString ("N") + ".cd" + type.ToString ().Substring (0' 1).ToUpper ())); " is 203.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,XmlFileMapper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\XmlFileMapper.cs,GetCompositeFile,The length of the statement  "		return (x == null ? null : new CompositeFileMap (fileKey' (string)x.Attribute ("compression")' (string)x.Attribute ("file")' x.Descendants ("file").Select (f => ((string)f.Attribute ("name"))).ToArray ()' int.Parse ((string)x.Attribute ("version")))); " is 251.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,XmlFileMapper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\XmlFileMapper.cs,GetDependentFiles,The length of the statement  "			var file = new CompositeFileMap (fileKey' (string)x.Attribute ("compression")' (string)x.Attribute ("file")' x.Descendants ("file").Select (f => ((string)f.Attribute ("name"))).ToArray ()' int.Parse ((string)x.Attribute ("version"))); " is 234.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,XmlFileMapper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\XmlFileMapper.cs,CreateNewMap,The length of the statement  "		//now' create a map with the file key so that it can be filled out later with the actual composite file that is created by the handler " is 134.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,XmlFileMapper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\XmlFileMapper.cs,CreateUpdateMap,The length of the statement  "			_doc.Root.Add (new XElement ("item"' new XAttribute ("key"' fileKey)' new XAttribute ("file"' compositeFile)' new XAttribute ("compression"' compressionType)' new XAttribute ("version"' version)' CreateFileNode (dependentFiles))); " is 230.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,XmlFileMapper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\XmlFileMapper.cs,FindItem,The length of the statement  "	var items = _doc.Root.Elements ("item").Where (e => (string)e.Attribute ("key") == key && (string)e.Attribute ("version") == version.ToString ()); " is 146.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,XmlFileMapper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\XmlFileMapper.cs,FindItem,The length of the statement  "	var items = _doc.Root.Elements ("item").Where (e => (string)e.Attribute ("key") == key && (string)e.Attribute ("version") == version.ToString ()); " is 146.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\ClientDependencySettings.cs,LoadProviders,The length of the statement  "	CompositeFileHandlerPath = path.StartsWith ("~/") ? VirtualPathUtility.ToAbsolute (ConfigSection.CompositeFileElement.CompositeFileHandlerPath' rootPath) : ConfigSection.CompositeFileElement.CompositeFileHandlerPath; " is 216.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\ClientDependencySettings.cs,LoadProviders,The length of the statement  "	//    DefaultCompositeFileProcessingProvider = CompositeFileProcessingProviderCollection[ConfigSection.CompositeFileElement.DefaultFileProcessingProviderLegacy]; " is 161.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\ClientDependencySettings.cs,LoadProviders,The length of the statement  "	//    DefaultCompositeFileProcessingProvider = CompositeFileProcessingProviderCollection[ConfigSection.CompositeFileElement.DefaultFileProcessingProvider];    " is 155.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\ClientDependencySettings.cs,LoadProviders,The length of the statement  "	DefaultCompositeFileProcessingProvider = CompositeFileProcessingProviderCollection [ConfigSection.CompositeFileElement.DefaultFileProcessingProvider]; " is 150.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\ClientDependencySettings.cs,LoadProviders,The length of the statement  "	DefaultFileRegistrationProvider = FileRegistrationProviderCollection [ConfigSection.FileRegistrationElement.DefaultProvider]; " is 125.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\ClientDependencySettings.cs,LoadProviders,The length of the statement  "			throw new ArgumentException ("The loggerType '" + ConfigSection.LoggerType + "' does not inherit from ClientDependency.Core.Logging.ILogger"); " is 142.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\ClientDependencySettings.cs,LoadDefaultFileRegConfig,The length of the statement  "		ProvidersHelper.InstantiateProviders (section.FileRegistrationElement.Providers' FileRegistrationProviderCollection' typeof(BaseFileRegistrationProvider)); " is 155.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\ClientDependencySettings.cs,LoadDefaultFileMapConfig,The length of the statement  "		ProvidersHelper.InstantiateProviders (section.CompositeFileElement.FileMapProviders' FileMapProviderCollection' typeof(BaseFileMapProvider)); " is 141.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\ClientDependencySettings.cs,LoadDefaultCompositeFileConfig,The length of the statement  "		ProvidersHelper.InstantiateProviders (section.CompositeFileElement.FileProcessingProviders' CompositeFileProcessingProviderCollection' typeof(BaseCompositeFileProcessingProvider)); " is 180.
Long Statement,ClientDependency.Core.Controls,HtmlInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\HtmlInclude.cs,RegisterIncludes,The length of the statement  "		loader.RegisterDependency (file.Group' file.Priority' file.FilePath' ""' dependencyType' file.HtmlAttributes' file.ForceProvider); " is 130.
Long Statement,ClientDependency.Core.Controls,HtmlInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\HtmlInclude.cs,GetIncludes,The length of the statement  "		var allAttributes = Regex.Matches (match.Value' MatchAllAttributes' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant).Cast<Match> ().ToArray (); " is 151.
Long Statement,ClientDependency.Core.Controls,ClientDependencyInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyInclude.cs,Equals,The length of the statement  "	return string.Equals (FilePath' other.FilePath' StringComparison.InvariantCultureIgnoreCase) && DependencyType == other.DependencyType && Priority == other.Priority && Group == other.Group && string.Equals (PathNameAlias' other.PathNameAlias' StringComparison.InvariantCultureIgnoreCase) && string.Equals (ForceProvider' other.ForceProvider) && Equals (HtmlAttributes' other.HtmlAttributes); " is 391.
Long Statement,ClientDependency.Core.Controls,ClientDependencyLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyLoader.cs,RenderDependencies,The length of the statement  "	_base.Dependencies.ForEach (x => ((WebFormsFileRegistrationProvider)x.Provider).RegisterDependencies (Page' x.Dependencies' _base.Paths' new HttpContextWrapper (Context))); " is 172.
Long Statement,ClientDependency.Core.Controls,ClientDependencyLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyLoader.cs,RegisterClientDependencies,The length of the statement  "	RegisterClientDependencies ((WebFormsFileRegistrationProvider)_base.Provider' control' paths.Cast<IClientDependencyPath> ()); " is 125.
Long Statement,ClientDependency.Core.Controls,ClientDependencyLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyLoader.cs,RegisterClientDependencies,The length of the statement  "	RegisterClientDependencies (ClientDependencySettings.Instance.FileRegistrationProviderCollection [providerName]' control' paths); " is 129.
Long Statement,ClientDependency.Core.Controls,ClientDependencyLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyLoader.cs,RegisterClientDependencies,The length of the statement  "	var found = ClientDependencySettings.Instance.FileRegistrationProviderCollection.Cast<WebFormsFileRegistrationProvider> ().FirstOrDefault (p => p.GetType ().Equals (typeof(T))); " is 177.
Long Statement,ClientDependency.Core.Controls,ClientDependencyLoader,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyLoader.cs,RegisterClientDependencies,The length of the statement  "	_base.RegisterClientDependencies (provider' dependencies' paths' ClientDependencySettings.Instance.FileRegistrationProviderCollection); " is 135.
Long Statement,ClientDependency.Core.Controls,ClientDependencyPath,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyPath.cs,Equals,The length of the statement  "	return string.Equals (_name' other._name' StringComparison.InvariantCultureIgnoreCase) && string.Equals (_path' other._path' StringComparison.InvariantCultureIgnoreCase); " is 170.
Long Statement,ClientDependency.Core.FileRegistration.Providers,LazyLoadRenderer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\LazyLoadRenderer.cs,PlaceholdersReplaced,The length of the statement  "	if (e.HttpContext.Items [PlaceholderReplacementProcessing] is bool && (bool)e.HttpContext.Items [PlaceholderReplacementProcessing]) { " is 133.
Long Statement,ClientDependency.Core.FileRegistration.Providers,LazyLoadRenderer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\LazyLoadRenderer.cs,RenderJsDependencies,The length of the statement  "		var comp = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.ProcessCompositeList (asArray' ClientDependencyType.Javascript' http' ClientDependencySettings.Instance.CompositeFileHandlerPath); " is 214.
Long Statement,ClientDependency.Core.FileRegistration.Providers,LazyLoadRenderer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\LazyLoadRenderer.cs,RenderCssDependencies,The length of the statement  "		var comp = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.ProcessCompositeList (asArray' ClientDependencyType.Css' http' ClientDependencySettings.Instance.CompositeFileHandlerPath); " is 207.
Long Statement,ClientDependency.Core.FileRegistration.Providers,PlaceHolderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\PlaceHolderProvider.cs,RegisterDependencies,The length of the statement  "	var jsPlaceholder = ClientDependencyLoader.GetInstance (http).Page.FlattenChildren ().FirstOrDefault (x => x.ID == JavaScriptPlaceHolderId); " is 140.
Long Statement,ClientDependency.Core.FileRegistration.Providers,PlaceHolderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\PlaceHolderProvider.cs,RegisterDependencies,The length of the statement  "		throw new NullReferenceException ("Could not find the placeholder control to render the JavaScript:" + JavaScriptPlaceHolderId); " is 128.
Long Statement,ClientDependency.Core.FileRegistration.Providers,PlaceHolderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\PlaceHolderProvider.cs,RegisterDependencies,The length of the statement  "	var cssPlaceholder = ClientDependencyLoader.GetInstance (http).Page.FlattenChildren ().FirstOrDefault (x => x.ID == CssPlaceHolderId); " is 134.
Long Statement,ClientDependency.Core.FileRegistration.Providers,StandardRenderer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\StandardRenderer.cs,RenderJsDependencies,The length of the statement  "		var comp = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.ProcessCompositeList (asArray' ClientDependencyType.Javascript' http' ClientDependencySettings.Instance.CompositeFileHandlerPath); " is 214.
Long Statement,ClientDependency.Core.FileRegistration.Providers,StandardRenderer,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\StandardRenderer.cs,RenderCssDependencies,The length of the statement  "		var comp = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.ProcessCompositeList (asArray' ClientDependencyType.Css' http' ClientDependencySettings.Instance.CompositeFileHandlerPath); " is 207.
Long Statement,ClientDependency.Core.FileRegistration.Providers,LoaderControlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\LoaderControlProvider.cs,RenderJsDependencies,The length of the statement  "		var comp = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.ProcessCompositeList (asArray' ClientDependencyType.Javascript' http' ClientDependencySettings.Instance.CompositeFileHandlerPath); " is 214.
Long Statement,ClientDependency.Core.FileRegistration.Providers,LoaderControlProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\LoaderControlProvider.cs,RenderCssDependencies,The length of the statement  "		var comp = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.ProcessCompositeList (asArray' ClientDependencyType.Css' http' ClientDependencySettings.Instance.CompositeFileHandlerPath); " is 207.
Long Statement,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,Initialize,The length of the statement  "	if (config != null && config ["enableCompositeFiles"] != null && !string.IsNullOrEmpty (config ["enableCompositeFiles"])) { " is 123.
Long Statement,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,Initialize,The length of the statement  "	if (config != null && config ["enableDebugVersionQueryString"] != null && !string.IsNullOrEmpty (config ["enableDebugVersionQueryString"])) { " is 141.
Long Statement,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,WriteStaggeredDependencies,The length of the statement  "	var fileBasedExtensions = ClientDependencySettings.Instance.FileBasedDependencyExtensionList.Union (FileWriters.GetRegisteredExtensions ()).ToArray (); " is 151.
Long Statement,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,UpdateFilePaths,The length of the statement  "				throw new NullReferenceException ("The PathNameAlias specified for dependency " + dependency.FilePath + " does not exist in the ClientDependencyPathCollection"); " is 161.
Long Statement,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,EnsureNoDuplicates,The length of the statement  "			var dups = dependencies.Where (x => x.FilePath.ToUpper ().Trim ().Equals (d.FilePath.ToUpper ().Trim ())).Select ((x' index) => new { " is 133.
Long Statement,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,AppendVersion,The length of the statement  "	if ((http.IsDebuggingEnabled || !EnableCompositeFiles) || ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.UrlType == CompositeUrlType.Base64QueryStrings) { " is 180.
Long Statement,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,WriteDependencies,The length of the statement  "		var jsDependencies = DependencySorter.SortItems (DependencySorter.FilterDependencies (group.Where (x => x.DependencyType == ClientDependencyType.Javascript).ToList ())); " is 169.
Long Statement,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,WriteDependencies,The length of the statement  "		var cssDependencies = DependencySorter.SortItems (DependencySorter.FilterDependencies (group.Where (x => x.DependencyType == ClientDependencyType.Css).ToList ())); " is 163.
Long Statement,ClientDependency.Core.FileRegistration.Providers,LazyLoadProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\LazyLoadProvider.cs,RenderJsDependencies,The length of the statement  "		var comp = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.ProcessCompositeList (asArray' ClientDependencyType.Javascript' http' ClientDependencySettings.Instance.CompositeFileHandlerPath); " is 214.
Long Statement,ClientDependency.Core.FileRegistration.Providers,LazyLoadProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\LazyLoadProvider.cs,RenderCssDependencies,The length of the statement  "		var comp = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.ProcessCompositeList (asArray' ClientDependencyType.Css' http' ClientDependencySettings.Instance.CompositeFileHandlerPath); " is 207.
Long Statement,ClientDependency.Core.FileRegistration.Providers,LazyLoadProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\LazyLoadProvider.cs,RegisterDependencies,The length of the statement  "		throw new InvalidOperationException ("The current HttpHandler in a WebFormsFileRegistrationProvider must be of type Page"); " is 123.
Long Statement,ClientDependency.Core.FileRegistration.Providers,LazyLoadProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\LazyLoadProvider.cs,RegisterScript,The length of the statement  "			throw new InvalidOperationException ("A form tag must be present on the page with a runat='server' attribute specified"); " is 121.
Long Statement,ClientDependency.Core.FileRegistration.Providers,PageHeaderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\PageHeaderProvider.cs,RenderJsDependencies,The length of the statement  "		var comp = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.ProcessCompositeList (asArray' ClientDependencyType.Javascript' http' ClientDependencySettings.Instance.CompositeFileHandlerPath); " is 214.
Long Statement,ClientDependency.Core.FileRegistration.Providers,PageHeaderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\PageHeaderProvider.cs,RenderCssDependencies,The length of the statement  "		var comp = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.ProcessCompositeList (asArray' ClientDependencyType.Css' http' ClientDependencySettings.Instance.CompositeFileHandlerPath); " is 207.
Long Statement,ClientDependency.Core.FileRegistration.Providers,PageHeaderProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\PageHeaderProvider.cs,RegisterDependencies,The length of the statement  "		throw new InvalidOperationException ("The current HttpHandler in a WebFormsFileRegistrationProvider must be of type Page"); " is 123.
Long Statement,ClientDependency.Core.Module,RogueFileFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Module\RogueFileFilter.cs,ValidateCurrentHandler,The length of the statement  "	if (CurrentContext.IsDebuggingEnabled || !ClientDependencySettings.Instance.DefaultFileRegistrationProvider.EnableCompositeFiles) " is 129.
Long Statement,ClientDependency.Core.Module,RogueFileFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Module\RogueFileFilter.cs,GetSupportedPath,The length of the statement  "	let isGood = m.ExcludePaths.Cast<RogueFileCompressionExcludeElement> ().Select (e => Regex.IsMatch (rawUrl' e.FilePath' RegexOptions.IgnoreCase)).All (excluded => !excluded) " is 173.
Long Statement,ClientDependency.Core.Module,RogueFileFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Module\RogueFileFilter.cs,ReplaceScripts,The length of the statement  "		return ReplaceContent (html' "src"' m_FoundPath.JsRequestExtension.Split (''')' ClientDependencyType.Javascript' m_MatchScript' CurrentContext); " is 144.
Long Statement,ClientDependency.Core.Module,RogueFileFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Module\RogueFileFilter.cs,ReplaceStyles,The length of the statement  "		return ReplaceContent (html' "href"' m_FoundPath.CssRequestExtension.Split (''')' ClientDependencyType.Css' m_MatchLink' CurrentContext); " is 137.
Long Statement,ClientDependency.Core.Module,RogueFileFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Module\RogueFileFilter.cs,ReplaceContent,The length of the statement  "		//if there is no namedGroup group name or it doesn't end with a js/css extension or it's already using the composite handler' " is 125.
Long Statement,ClientDependency.Core.Module,RogueFileFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Module\RogueFileFilter.cs,ReplaceContent,The length of the statement  "		if (grp == null || string.IsNullOrEmpty (grp.ToString ()) || !grp.ToString ().EndsWithOneOf (extensions) || grp.ToString ().StartsWith (ClientDependencySettings.Instance.CompositeFileHandlerPath)) " is 196.
Long Statement,ClientDependency.Core.Module,RogueFileFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Module\RogueFileFilter.cs,ReplaceContent,The length of the statement  "				var resolved = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.ProcessCompositeList (file' type' http).Single (); " is 138.
Complex Conditional,ClientDependency.Core,HttpContextBaseExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\HttpContextBaseExtensions.cs,IsAbsolutePath,The conditional expression  "indexOfSlashes > -1 && (indexOfQuestionMarks < 0 || (indexOfQuestionMarks > -1 && indexOfQuestionMarks > indexOfSlashes))"  is complex.
Complex Conditional,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,action,The conditional expression  "(theY == '\n' || theY == ' ') && (theA == '+' || theA == '-' || theA == '*' || theA == '/') && (theB == '+' || theB == '-' || theB == '*' || theB == '/')"  is complex.
Complex Conditional,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,action,The conditional expression  "theB == '/' && (theA == '(' || theA == ''' || theA == '=' || theA == ':' || theA == '[' || theA == '!' || theA == '&' || theA == '|' || theA == '?' || theA == '+' || theA == '-' || theA == '~' || theA == '*' || theA == '/' || theA == '{' || theA == '\n')"  is complex.
Complex Conditional,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,WriteStaggeredDependencies,The conditional expression  "(!http.IsAbsolutePath (f.FilePath) && !fileBasedExtensions.Contains (stringExt)) //now check for external resources  || (http.IsAbsolutePath (f.FilePath) //remote dependencies aren't local  && !new Uri (f.FilePath' UriKind.RelativeOrAbsolute).IsLocalUri (http) // not required to be bundled  && !f.ForceBundle)"  is complex.
Complex Conditional,ClientDependency.Core.Module,RogueFileFilter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Module\RogueFileFilter.cs,ReplaceContent,The conditional expression  "grp == null || string.IsNullOrEmpty (grp.ToString ()) || !grp.ToString ().EndsWithOneOf (extensions) || grp.ToString ().StartsWith (ClientDependencySettings.Instance.CompositeFileHandlerPath)"  is complex.
Empty Catch Block,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,Initialize,The method has an empty catch block.
Empty Catch Block,ClientDependency.Core.Config,DnnConfiguration,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\DnnConfiguration.cs,DnnConfiguration,The method has an empty catch block.
Empty Catch Block,ClientDependency.Core.Config,DnnConfiguration,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\DnnConfiguration.cs,GetPortalSettingThroughReflection,The method has an empty catch block.
Empty Catch Block,ClientDependency.Core.Config,DnnConfiguration,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\DnnConfiguration.cs,GetPortalIdThroughReflection,The method has an empty catch block.
Empty Catch Block,ClientDependency.Core.Config,DnnConfiguration,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Config\DnnConfiguration.cs,GetHostSettingThroughReflection,The method has an empty catch block.
Magic Number,ClientDependency.Core,BasicFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicFile.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core,BasicFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicFile.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core,BasicFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicFile.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core,BasicFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicFile.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core,BasicFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicFile.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core,BasicFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicFile.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core,BasicFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicFile.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)DependencyType;  
Magic Number,ClientDependency.Core,BasicFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicFile.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Priority;  
Magic Number,ClientDependency.Core,BasicFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicFile.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Group;  
Magic Number,ClientDependency.Core,BasicFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicFile.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  
Magic Number,ClientDependency.Core,BasicFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicFile.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  
Magic Number,ClientDependency.Core,BasicFile,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicFile.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  
Magic Number,ClientDependency.Core,BasicPath,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicPath.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (Name.GetHashCode () * 397) ^ Path.GetHashCode ();  }  
Magic Number,ClientDependency.Core,BasicPath,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BasicPath.cs,GetHashCode,The following statement contains a magic number: return (Name.GetHashCode () * 397) ^ Path.GetHashCode ();  
Magic Number,ClientDependency.Core,BundleDefinition,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BundleDefinition.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((int)Type * 397) ^ Name.GetHashCode ();  }  
Magic Number,ClientDependency.Core,BundleDefinition,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\BundleDefinition.cs,GetHashCode,The following statement contains a magic number: return ((int)Type * 397) ^ Name.GetHashCode ();  
Magic Number,ClientDependency.Core,CssHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CssHelper.cs,ParseImportStatements,The following statement contains a magic number: foreach (Match match in matches) {  	//Ignore external imports  	var urlMatch = CssUrlRegex.Match (match.Value);  	if (urlMatch.Success && urlMatch.Groups.Count >= 2) {  		var path = urlMatch.Groups [1].Value.Trim ('\''' '"');  		if ((path.StartsWith ("http://"' StringComparison.InvariantCultureIgnoreCase) || path.StartsWith ("https://"' StringComparison.InvariantCultureIgnoreCase) || path.StartsWith ("//"' StringComparison.InvariantCultureIgnoreCase))) {  			Uri uri;  			if (!IsAbsoluteUrl (path' out uri)) {  				continue;  			}  			var domain;  			var approvedDomains = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.BundleDomains;  			if (!approvedDomains.Any (bundleDomain => domain.EndsWith (bundleDomain))) {  				continue;  			}  		}  	}  	//Strip the import statement                  	content = content.ReplaceFirst (match.Value' "");  	//write import css content  	var filePath = match.Groups [1].Value.Trim ('\''' '"');  	pathsFound.Add (filePath);  }  
Magic Number,ClientDependency.Core,CssHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CssHelper.cs,ParseImportStatements,The following statement contains a magic number: if (urlMatch.Success && urlMatch.Groups.Count >= 2) {  	var path = urlMatch.Groups [1].Value.Trim ('\''' '"');  	if ((path.StartsWith ("http://"' StringComparison.InvariantCultureIgnoreCase) || path.StartsWith ("https://"' StringComparison.InvariantCultureIgnoreCase) || path.StartsWith ("//"' StringComparison.InvariantCultureIgnoreCase))) {  		Uri uri;  		if (!IsAbsoluteUrl (path' out uri)) {  			continue;  		}  		var domain;  		var approvedDomains = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.BundleDomains;  		if (!approvedDomains.Any (bundleDomain => domain.EndsWith (bundleDomain))) {  			continue;  		}  	}  }  
Magic Number,ClientDependency.Core,CssHelper,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CssHelper.cs,ReplaceUrlsWithAbsolutePaths,The following statement contains a magic number: if (m.Groups.Count == 2) {  	var match = m.Groups [1].Value.Trim ('\''' '"');  	var hashSplit = match.Split (new[] {  		'#'  	}' StringSplitOptions.RemoveEmptyEntries);  	return string.Format (@"url(""{0}{1}"")"' (match.StartsWith ("http://"' StringComparison.InvariantCultureIgnoreCase) || match.StartsWith ("https://"' StringComparison.InvariantCultureIgnoreCase) || match.StartsWith ("//"' StringComparison.InvariantCultureIgnoreCase)) ? match : new Uri (cssLocation' match).PathAndQuery' hashSplit.Length > 1 ? ("#" + hashSplit [1]) : "");  }  
Magic Number,ClientDependency.Core,HashCodeCombiner,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\HashCodeCombiner.cs,AddInt,The following statement contains a magic number: _combinedHash = ((_combinedHash << 5) + _combinedHash) ^ i;  
Magic Number,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)DependencyType;  
Magic Number,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Priority;  
Magic Number,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Group;  
Magic Number,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  
Magic Number,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  
Magic Number,ClientDependency.Core,ClientDependencyAttribute,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  
Magic Number,ClientDependency.Core,StringExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\StringExtensions.cs,DecodeFrom64Url,The following statement contains a magic number: if (rem > 0)  	toDecode = toDecode.PadRight (toDecode.Length + 4 - rem' '=');  
Magic Number,ClientDependency.Core,StringExtensions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\StringExtensions.cs,DecodeFrom64Url,The following statement contains a magic number: toDecode = toDecode.PadRight (toDecode.Length + 4 - rem' '=');  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: action (3);  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: while (theA != EOF) {  	switch (theA) {  	case ' ':  		action (isAlphanum (theB) ? 1 : 2);  		break;  	case '\n':  		switch (theB) {  		case '{':  		case '[':  		case '(':  		case '+':  		case '-':  		case '!':  		case '~':  			action (1);  			break;  		case ' ':  			action (3);  			break;  		default:  			action (isAlphanum (theB) ? 1 : 2);  			break;  		}  		break;  	default:  		switch (theB) {  		case ' ':  			action (isAlphanum (theA) ? 1 : 3);  			break;  		case '\n':  			switch (theA) {  			case '}':  			case ']':  			case ')':  			case '+':  			case '-':  			case '"':  			case '\'':  			case '`':  				action (1);  				break;  			default:  				action (isAlphanum (theA) ? 1 : 3);  				break;  			}  			break;  		default:  			action (1);  			break;  		}  		break;  	}  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: while (theA != EOF) {  	switch (theA) {  	case ' ':  		action (isAlphanum (theB) ? 1 : 2);  		break;  	case '\n':  		switch (theB) {  		case '{':  		case '[':  		case '(':  		case '+':  		case '-':  		case '!':  		case '~':  			action (1);  			break;  		case ' ':  			action (3);  			break;  		default:  			action (isAlphanum (theB) ? 1 : 2);  			break;  		}  		break;  	default:  		switch (theB) {  		case ' ':  			action (isAlphanum (theA) ? 1 : 3);  			break;  		case '\n':  			switch (theA) {  			case '}':  			case ']':  			case ')':  			case '+':  			case '-':  			case '"':  			case '\'':  			case '`':  				action (1);  				break;  			default:  				action (isAlphanum (theA) ? 1 : 3);  				break;  			}  			break;  		default:  			action (1);  			break;  		}  		break;  	}  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: while (theA != EOF) {  	switch (theA) {  	case ' ':  		action (isAlphanum (theB) ? 1 : 2);  		break;  	case '\n':  		switch (theB) {  		case '{':  		case '[':  		case '(':  		case '+':  		case '-':  		case '!':  		case '~':  			action (1);  			break;  		case ' ':  			action (3);  			break;  		default:  			action (isAlphanum (theB) ? 1 : 2);  			break;  		}  		break;  	default:  		switch (theB) {  		case ' ':  			action (isAlphanum (theA) ? 1 : 3);  			break;  		case '\n':  			switch (theA) {  			case '}':  			case ']':  			case ')':  			case '+':  			case '-':  			case '"':  			case '\'':  			case '`':  				action (1);  				break;  			default:  				action (isAlphanum (theA) ? 1 : 3);  				break;  			}  			break;  		default:  			action (1);  			break;  		}  		break;  	}  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: while (theA != EOF) {  	switch (theA) {  	case ' ':  		action (isAlphanum (theB) ? 1 : 2);  		break;  	case '\n':  		switch (theB) {  		case '{':  		case '[':  		case '(':  		case '+':  		case '-':  		case '!':  		case '~':  			action (1);  			break;  		case ' ':  			action (3);  			break;  		default:  			action (isAlphanum (theB) ? 1 : 2);  			break;  		}  		break;  	default:  		switch (theB) {  		case ' ':  			action (isAlphanum (theA) ? 1 : 3);  			break;  		case '\n':  			switch (theA) {  			case '}':  			case ']':  			case ')':  			case '+':  			case '-':  			case '"':  			case '\'':  			case '`':  				action (1);  				break;  			default:  				action (isAlphanum (theA) ? 1 : 3);  				break;  			}  			break;  		default:  			action (1);  			break;  		}  		break;  	}  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: while (theA != EOF) {  	switch (theA) {  	case ' ':  		action (isAlphanum (theB) ? 1 : 2);  		break;  	case '\n':  		switch (theB) {  		case '{':  		case '[':  		case '(':  		case '+':  		case '-':  		case '!':  		case '~':  			action (1);  			break;  		case ' ':  			action (3);  			break;  		default:  			action (isAlphanum (theB) ? 1 : 2);  			break;  		}  		break;  	default:  		switch (theB) {  		case ' ':  			action (isAlphanum (theA) ? 1 : 3);  			break;  		case '\n':  			switch (theA) {  			case '}':  			case ']':  			case ')':  			case '+':  			case '-':  			case '"':  			case '\'':  			case '`':  				action (1);  				break;  			default:  				action (isAlphanum (theA) ? 1 : 3);  				break;  			}  			break;  		default:  			action (1);  			break;  		}  		break;  	}  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: switch (theA) {  case ' ':  	action (isAlphanum (theB) ? 1 : 2);  	break;  case '\n':  	switch (theB) {  	case '{':  	case '[':  	case '(':  	case '+':  	case '-':  	case '!':  	case '~':  		action (1);  		break;  	case ' ':  		action (3);  		break;  	default:  		action (isAlphanum (theB) ? 1 : 2);  		break;  	}  	break;  default:  	switch (theB) {  	case ' ':  		action (isAlphanum (theA) ? 1 : 3);  		break;  	case '\n':  		switch (theA) {  		case '}':  		case ']':  		case ')':  		case '+':  		case '-':  		case '"':  		case '\'':  		case '`':  			action (1);  			break;  		default:  			action (isAlphanum (theA) ? 1 : 3);  			break;  		}  		break;  	default:  		action (1);  		break;  	}  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: switch (theA) {  case ' ':  	action (isAlphanum (theB) ? 1 : 2);  	break;  case '\n':  	switch (theB) {  	case '{':  	case '[':  	case '(':  	case '+':  	case '-':  	case '!':  	case '~':  		action (1);  		break;  	case ' ':  		action (3);  		break;  	default:  		action (isAlphanum (theB) ? 1 : 2);  		break;  	}  	break;  default:  	switch (theB) {  	case ' ':  		action (isAlphanum (theA) ? 1 : 3);  		break;  	case '\n':  		switch (theA) {  		case '}':  		case ']':  		case ')':  		case '+':  		case '-':  		case '"':  		case '\'':  		case '`':  			action (1);  			break;  		default:  			action (isAlphanum (theA) ? 1 : 3);  			break;  		}  		break;  	default:  		action (1);  		break;  	}  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: switch (theA) {  case ' ':  	action (isAlphanum (theB) ? 1 : 2);  	break;  case '\n':  	switch (theB) {  	case '{':  	case '[':  	case '(':  	case '+':  	case '-':  	case '!':  	case '~':  		action (1);  		break;  	case ' ':  		action (3);  		break;  	default:  		action (isAlphanum (theB) ? 1 : 2);  		break;  	}  	break;  default:  	switch (theB) {  	case ' ':  		action (isAlphanum (theA) ? 1 : 3);  		break;  	case '\n':  		switch (theA) {  		case '}':  		case ']':  		case ')':  		case '+':  		case '-':  		case '"':  		case '\'':  		case '`':  			action (1);  			break;  		default:  			action (isAlphanum (theA) ? 1 : 3);  			break;  		}  		break;  	default:  		action (1);  		break;  	}  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: switch (theA) {  case ' ':  	action (isAlphanum (theB) ? 1 : 2);  	break;  case '\n':  	switch (theB) {  	case '{':  	case '[':  	case '(':  	case '+':  	case '-':  	case '!':  	case '~':  		action (1);  		break;  	case ' ':  		action (3);  		break;  	default:  		action (isAlphanum (theB) ? 1 : 2);  		break;  	}  	break;  default:  	switch (theB) {  	case ' ':  		action (isAlphanum (theA) ? 1 : 3);  		break;  	case '\n':  		switch (theA) {  		case '}':  		case ']':  		case ')':  		case '+':  		case '-':  		case '"':  		case '\'':  		case '`':  			action (1);  			break;  		default:  			action (isAlphanum (theA) ? 1 : 3);  			break;  		}  		break;  	default:  		action (1);  		break;  	}  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: switch (theA) {  case ' ':  	action (isAlphanum (theB) ? 1 : 2);  	break;  case '\n':  	switch (theB) {  	case '{':  	case '[':  	case '(':  	case '+':  	case '-':  	case '!':  	case '~':  		action (1);  		break;  	case ' ':  		action (3);  		break;  	default:  		action (isAlphanum (theB) ? 1 : 2);  		break;  	}  	break;  default:  	switch (theB) {  	case ' ':  		action (isAlphanum (theA) ? 1 : 3);  		break;  	case '\n':  		switch (theA) {  		case '}':  		case ']':  		case ')':  		case '+':  		case '-':  		case '"':  		case '\'':  		case '`':  			action (1);  			break;  		default:  			action (isAlphanum (theA) ? 1 : 3);  			break;  		}  		break;  	default:  		action (1);  		break;  	}  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: action (isAlphanum (theB) ? 1 : 2);  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: switch (theB) {  case '{':  case '[':  case '(':  case '+':  case '-':  case '!':  case '~':  	action (1);  	break;  case ' ':  	action (3);  	break;  default:  	action (isAlphanum (theB) ? 1 : 2);  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: switch (theB) {  case '{':  case '[':  case '(':  case '+':  case '-':  case '!':  case '~':  	action (1);  	break;  case ' ':  	action (3);  	break;  default:  	action (isAlphanum (theB) ? 1 : 2);  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: action (3);  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: action (isAlphanum (theB) ? 1 : 2);  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: switch (theB) {  case ' ':  	action (isAlphanum (theA) ? 1 : 3);  	break;  case '\n':  	switch (theA) {  	case '}':  	case ']':  	case ')':  	case '+':  	case '-':  	case '"':  	case '\'':  	case '`':  		action (1);  		break;  	default:  		action (isAlphanum (theA) ? 1 : 3);  		break;  	}  	break;  default:  	action (1);  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: switch (theB) {  case ' ':  	action (isAlphanum (theA) ? 1 : 3);  	break;  case '\n':  	switch (theA) {  	case '}':  	case ']':  	case ')':  	case '+':  	case '-':  	case '"':  	case '\'':  	case '`':  		action (1);  		break;  	default:  		action (isAlphanum (theA) ? 1 : 3);  		break;  	}  	break;  default:  	action (1);  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: action (isAlphanum (theA) ? 1 : 3);  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: switch (theA) {  case '}':  case ']':  case ')':  case '+':  case '-':  case '"':  case '\'':  case '`':  	action (1);  	break;  default:  	action (isAlphanum (theA) ? 1 : 3);  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,jsmin,The following statement contains a magic number: action (isAlphanum (theA) ? 1 : 3);  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,action,The following statement contains a magic number: switch (d) {  case 1:  	put (theA);  	if ((theY == '\n' || theY == ' ') && (theA == '+' || theA == '-' || theA == '*' || theA == '/') && (theB == '+' || theB == '-' || theB == '*' || theB == '/')) {  		put (theY);  	}  	goto case 2;  case 2:  	theA = theB;  	if (theA == '\'' || theA == '"' || theA == '`') {  		for (; ;) {  			put (theA);  			theA = get ();  			if (theA == theB) {  				break;  			}  			if (theA == '\\') {  				put (theA);  				theA = get ();  			}  			if (theA == EOF) {  				throw new Exception (string.Format ("Error: JSMIN unterminated string literal: {0}\n"' theA));  			}  		}  	}  	goto case 3;  case 3:  	theB = next ();  	if (theB == '/' && (theA == '(' || theA == ''' || theA == '=' || theA == ':' || theA == '[' || theA == '!' || theA == '&' || theA == '|' || theA == '?' || theA == '+' || theA == '-' || theA == '~' || theA == '*' || theA == '/' || theA == '{' || theA == '\n')) {  		put (theA);  		if (theA == '/' || theA == '*') {  			put (' ');  		}  		put (theB);  		for (; ;) {  			theA = get ();  			if (theA == '[') {  				for (; ;) {  					put (theA);  					theA = get ();  					if (theA == ']') {  						break;  					}  					if (theA == '\\') {  						put (theA);  						theA = get ();  					}  					if (theA == EOF) {  						throw new Exception (string.Format ("Error: JSMIN Unterminated set in Regular Expression literal: {0}\n"' theA));  					}  				}  			} else if (theA == '/') {  				switch (peek ()) {  				case '/':  				case '*':  					throw new Exception (string.Format ("Error: JSMIN Unterminated set in Regular Expression literal: {0}\n"' theA));  				}  				break;  			} else if (theA == '\\') {  				put (theA);  				theA = get ();  			}  			if (theA == EOF) {  				throw new Exception (string.Format ("Error: JSMIN Unterminated Regular Expression literal: {0}\n"' theA));  			}  			put (theA);  		}  		theB = next ();  	}  	goto default;  default:  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,action,The following statement contains a magic number: switch (d) {  case 1:  	put (theA);  	if ((theY == '\n' || theY == ' ') && (theA == '+' || theA == '-' || theA == '*' || theA == '/') && (theB == '+' || theB == '-' || theB == '*' || theB == '/')) {  		put (theY);  	}  	goto case 2;  case 2:  	theA = theB;  	if (theA == '\'' || theA == '"' || theA == '`') {  		for (; ;) {  			put (theA);  			theA = get ();  			if (theA == theB) {  				break;  			}  			if (theA == '\\') {  				put (theA);  				theA = get ();  			}  			if (theA == EOF) {  				throw new Exception (string.Format ("Error: JSMIN unterminated string literal: {0}\n"' theA));  			}  		}  	}  	goto case 3;  case 3:  	theB = next ();  	if (theB == '/' && (theA == '(' || theA == ''' || theA == '=' || theA == ':' || theA == '[' || theA == '!' || theA == '&' || theA == '|' || theA == '?' || theA == '+' || theA == '-' || theA == '~' || theA == '*' || theA == '/' || theA == '{' || theA == '\n')) {  		put (theA);  		if (theA == '/' || theA == '*') {  			put (' ');  		}  		put (theB);  		for (; ;) {  			theA = get ();  			if (theA == '[') {  				for (; ;) {  					put (theA);  					theA = get ();  					if (theA == ']') {  						break;  					}  					if (theA == '\\') {  						put (theA);  						theA = get ();  					}  					if (theA == EOF) {  						throw new Exception (string.Format ("Error: JSMIN Unterminated set in Regular Expression literal: {0}\n"' theA));  					}  				}  			} else if (theA == '/') {  				switch (peek ()) {  				case '/':  				case '*':  					throw new Exception (string.Format ("Error: JSMIN Unterminated set in Regular Expression literal: {0}\n"' theA));  				}  				break;  			} else if (theA == '\\') {  				put (theA);  				theA = get ();  			}  			if (theA == EOF) {  				throw new Exception (string.Format ("Error: JSMIN Unterminated Regular Expression literal: {0}\n"' theA));  			}  			put (theA);  		}  		theB = next ();  	}  	goto default;  default:  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,action,The following statement contains a magic number: switch (d) {  case 1:  	put (theA);  	if ((theY == '\n' || theY == ' ') && (theA == '+' || theA == '-' || theA == '*' || theA == '/') && (theB == '+' || theB == '-' || theB == '*' || theB == '/')) {  		put (theY);  	}  	goto case 2;  case 2:  	theA = theB;  	if (theA == '\'' || theA == '"' || theA == '`') {  		for (; ;) {  			put (theA);  			theA = get ();  			if (theA == theB) {  				break;  			}  			if (theA == '\\') {  				put (theA);  				theA = get ();  			}  			if (theA == EOF) {  				throw new Exception (string.Format ("Error: JSMIN unterminated string literal: {0}\n"' theA));  			}  		}  	}  	goto case 3;  case 3:  	theB = next ();  	if (theB == '/' && (theA == '(' || theA == ''' || theA == '=' || theA == ':' || theA == '[' || theA == '!' || theA == '&' || theA == '|' || theA == '?' || theA == '+' || theA == '-' || theA == '~' || theA == '*' || theA == '/' || theA == '{' || theA == '\n')) {  		put (theA);  		if (theA == '/' || theA == '*') {  			put (' ');  		}  		put (theB);  		for (; ;) {  			theA = get ();  			if (theA == '[') {  				for (; ;) {  					put (theA);  					theA = get ();  					if (theA == ']') {  						break;  					}  					if (theA == '\\') {  						put (theA);  						theA = get ();  					}  					if (theA == EOF) {  						throw new Exception (string.Format ("Error: JSMIN Unterminated set in Regular Expression literal: {0}\n"' theA));  					}  				}  			} else if (theA == '/') {  				switch (peek ()) {  				case '/':  				case '*':  					throw new Exception (string.Format ("Error: JSMIN Unterminated set in Regular Expression literal: {0}\n"' theA));  				}  				break;  			} else if (theA == '\\') {  				put (theA);  				theA = get ();  			}  			if (theA == EOF) {  				throw new Exception (string.Format ("Error: JSMIN Unterminated Regular Expression literal: {0}\n"' theA));  			}  			put (theA);  		}  		theB = next ();  	}  	goto default;  default:  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,action,The following statement contains a magic number: switch (d) {  case 1:  	put (theA);  	if ((theY == '\n' || theY == ' ') && (theA == '+' || theA == '-' || theA == '*' || theA == '/') && (theB == '+' || theB == '-' || theB == '*' || theB == '/')) {  		put (theY);  	}  	goto case 2;  case 2:  	theA = theB;  	if (theA == '\'' || theA == '"' || theA == '`') {  		for (; ;) {  			put (theA);  			theA = get ();  			if (theA == theB) {  				break;  			}  			if (theA == '\\') {  				put (theA);  				theA = get ();  			}  			if (theA == EOF) {  				throw new Exception (string.Format ("Error: JSMIN unterminated string literal: {0}\n"' theA));  			}  		}  	}  	goto case 3;  case 3:  	theB = next ();  	if (theB == '/' && (theA == '(' || theA == ''' || theA == '=' || theA == ':' || theA == '[' || theA == '!' || theA == '&' || theA == '|' || theA == '?' || theA == '+' || theA == '-' || theA == '~' || theA == '*' || theA == '/' || theA == '{' || theA == '\n')) {  		put (theA);  		if (theA == '/' || theA == '*') {  			put (' ');  		}  		put (theB);  		for (; ;) {  			theA = get ();  			if (theA == '[') {  				for (; ;) {  					put (theA);  					theA = get ();  					if (theA == ']') {  						break;  					}  					if (theA == '\\') {  						put (theA);  						theA = get ();  					}  					if (theA == EOF) {  						throw new Exception (string.Format ("Error: JSMIN Unterminated set in Regular Expression literal: {0}\n"' theA));  					}  				}  			} else if (theA == '/') {  				switch (peek ()) {  				case '/':  				case '*':  					throw new Exception (string.Format ("Error: JSMIN Unterminated set in Regular Expression literal: {0}\n"' theA));  				}  				break;  			} else if (theA == '\\') {  				put (theA);  				theA = get ();  			}  			if (theA == EOF) {  				throw new Exception (string.Format ("Error: JSMIN Unterminated Regular Expression literal: {0}\n"' theA));  			}  			put (theA);  		}  		theB = next ();  	}  	goto default;  default:  	break;  }  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,action,The following statement contains a magic number: goto case 2;  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,action,The following statement contains a magic number: goto case 3;  
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,isAlphanum,The following statement contains a magic number: return ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || c == '_' || c == '$' || c == '\\' || c > 126);  
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequest,The following statement contains a magic number: if (string.IsNullOrEmpty (context.Request.PathInfo)) {  	// querystring format  	fileKey = context.Request ["s"];  	if (!string.IsNullOrEmpty (context.Request ["cdv"]) && !Int32.TryParse (context.Request ["cdv"]' out version))  		throw new ArgumentException ("Could not parse the version in the request");  	try {  		type = (ClientDependencyType)Enum.Parse (typeof(ClientDependencyType)' context.Request ["t"]' true);  	} catch {  		throw new ArgumentException ("Could not parse the type set in the request");  	}  } else {  	//get path to parse  	var path = context.Request.PathInfo.TrimStart ('/');  	var pathFormat = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.PathBasedUrlFormat;  	//parse using the parser  	if (!PathBasedUrlFormatter.Parse (pathFormat' path' out fileKey' out type' out version)) {  		if (context.IsDebuggingEnabled || dnnConfig.IsDebugMode ()) {  			throw new FormatException ("Could not parse the URL path: " + path + " with the format specified: " + pathFormat);  		}  		throw new HttpException (404' "File not found");  	}  }  
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequest,The following statement contains a magic number: if (!PathBasedUrlFormatter.Parse (pathFormat' path' out fileKey' out type' out version)) {  	if (context.IsDebuggingEnabled || dnnConfig.IsDebugMode ()) {  		throw new FormatException ("Could not parse the URL path: " + path + " with the format specified: " + pathFormat);  	}  	throw new HttpException (404' "File not found");  }  
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequest,The following statement contains a magic number: throw new HttpException (404' "File not found");  
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequest,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	outputBytes = ProcessRequestInternal (contextBase' fileKey' type' version' outputBytes' page);  	if (outputBytes != null && outputBytes.Length > 0)  		break;  	ClientDependencySettings.Instance.Logger.Error (string.Format ("No bytes were returned' this is attempt {0}. Fileset: {1}' Type: {2}' Version: {3}"' i' fileKey' type' version)' null);  }  
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The following statement contains a magic number: if (map != null && map.HasFileBytes) {  	ProcessFromFile (context' map' out compositeFileName' out outputBytes);  } else {  	lock (Lock) {  		//check again...  		if (map != null && map.HasFileBytes) {  			//there's files there now' so process them  			ProcessFromFile (context' map' out compositeFileName' out outputBytes);  		} else {  			List<CompositeFileDefinition> fileDefinitions;  			byte[] fileBytes;  			if (ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.UrlType == CompositeUrlType.MappedId) {  				//need to try to find the map by it's id/version (not compression)  				var filePaths = ClientDependencySettings.Instance.DefaultFileMapProvider.GetDependentFiles (fileset' version);  				if (filePaths == null) {  					if (context.IsDebuggingEnabled || dnnConfig.IsDebugMode ()) {  						throw new KeyNotFoundException ("no map was found for the dependency key: " + fileset + " 'CompositeUrlType.MappedId requires that a map is found");  					}  					throw new HttpException (404' "File not found");  				}  				//combine files and get the definition types of them (internal vs external resources)  				fileBytes = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.CombineFiles (filePaths.ToArray ()' context' type' out fileDefinitions);  			} else {  				//need to do the combining' etc... and save the file map                              				fileBytes = GetCombinedFiles (context' fileset' type' out fileDefinitions);  			}  			//compress data                          			outputBytes = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.CompressBytes (clientCompression' fileBytes);  			context.AddCompressionResponseHeader (clientCompression);  			//save combined file  			var compositeFile = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.SaveCompositeFile (outputBytes' type' context.Server);  			if (compositeFile != null) {  				compositeFileName = compositeFile.FullName;  				if (!string.IsNullOrEmpty (compositeFileName)) {  					//Update the XML file map  					ClientDependencySettings.Instance.DefaultFileMapProvider.CreateUpdateMap (fileset' clientCompression.ToString ()' fileDefinitions.Select (x => new BasicFile (type) {  						FilePath = x.Uri  					})' compositeFileName' //TODO: We should probably use the passed in version param?  					ClientDependencySettings.Instance.Version);  				}  			}  		}  	}  }  
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The following statement contains a magic number: lock (Lock) {  	//check again...  	if (map != null && map.HasFileBytes) {  		//there's files there now' so process them  		ProcessFromFile (context' map' out compositeFileName' out outputBytes);  	} else {  		List<CompositeFileDefinition> fileDefinitions;  		byte[] fileBytes;  		if (ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.UrlType == CompositeUrlType.MappedId) {  			//need to try to find the map by it's id/version (not compression)  			var filePaths = ClientDependencySettings.Instance.DefaultFileMapProvider.GetDependentFiles (fileset' version);  			if (filePaths == null) {  				if (context.IsDebuggingEnabled || dnnConfig.IsDebugMode ()) {  					throw new KeyNotFoundException ("no map was found for the dependency key: " + fileset + " 'CompositeUrlType.MappedId requires that a map is found");  				}  				throw new HttpException (404' "File not found");  			}  			//combine files and get the definition types of them (internal vs external resources)  			fileBytes = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.CombineFiles (filePaths.ToArray ()' context' type' out fileDefinitions);  		} else {  			//need to do the combining' etc... and save the file map                              			fileBytes = GetCombinedFiles (context' fileset' type' out fileDefinitions);  		}  		//compress data                          		outputBytes = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.CompressBytes (clientCompression' fileBytes);  		context.AddCompressionResponseHeader (clientCompression);  		//save combined file  		var compositeFile = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.SaveCompositeFile (outputBytes' type' context.Server);  		if (compositeFile != null) {  			compositeFileName = compositeFile.FullName;  			if (!string.IsNullOrEmpty (compositeFileName)) {  				//Update the XML file map  				ClientDependencySettings.Instance.DefaultFileMapProvider.CreateUpdateMap (fileset' clientCompression.ToString ()' fileDefinitions.Select (x => new BasicFile (type) {  					FilePath = x.Uri  				})' compositeFileName' //TODO: We should probably use the passed in version param?  				ClientDependencySettings.Instance.Version);  			}  		}  	}  }  
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The following statement contains a magic number: if (map != null && map.HasFileBytes) {  	//there's files there now' so process them  	ProcessFromFile (context' map' out compositeFileName' out outputBytes);  } else {  	List<CompositeFileDefinition> fileDefinitions;  	byte[] fileBytes;  	if (ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.UrlType == CompositeUrlType.MappedId) {  		//need to try to find the map by it's id/version (not compression)  		var filePaths = ClientDependencySettings.Instance.DefaultFileMapProvider.GetDependentFiles (fileset' version);  		if (filePaths == null) {  			if (context.IsDebuggingEnabled || dnnConfig.IsDebugMode ()) {  				throw new KeyNotFoundException ("no map was found for the dependency key: " + fileset + " 'CompositeUrlType.MappedId requires that a map is found");  			}  			throw new HttpException (404' "File not found");  		}  		//combine files and get the definition types of them (internal vs external resources)  		fileBytes = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.CombineFiles (filePaths.ToArray ()' context' type' out fileDefinitions);  	} else {  		//need to do the combining' etc... and save the file map                              		fileBytes = GetCombinedFiles (context' fileset' type' out fileDefinitions);  	}  	//compress data                          	outputBytes = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.CompressBytes (clientCompression' fileBytes);  	context.AddCompressionResponseHeader (clientCompression);  	//save combined file  	var compositeFile = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.SaveCompositeFile (outputBytes' type' context.Server);  	if (compositeFile != null) {  		compositeFileName = compositeFile.FullName;  		if (!string.IsNullOrEmpty (compositeFileName)) {  			//Update the XML file map  			ClientDependencySettings.Instance.DefaultFileMapProvider.CreateUpdateMap (fileset' clientCompression.ToString ()' fileDefinitions.Select (x => new BasicFile (type) {  				FilePath = x.Uri  			})' compositeFileName' //TODO: We should probably use the passed in version param?  			ClientDependencySettings.Instance.Version);  		}  	}  }  
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The following statement contains a magic number: if (ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.UrlType == CompositeUrlType.MappedId) {  	//need to try to find the map by it's id/version (not compression)  	var filePaths = ClientDependencySettings.Instance.DefaultFileMapProvider.GetDependentFiles (fileset' version);  	if (filePaths == null) {  		if (context.IsDebuggingEnabled || dnnConfig.IsDebugMode ()) {  			throw new KeyNotFoundException ("no map was found for the dependency key: " + fileset + " 'CompositeUrlType.MappedId requires that a map is found");  		}  		throw new HttpException (404' "File not found");  	}  	//combine files and get the definition types of them (internal vs external resources)  	fileBytes = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.CombineFiles (filePaths.ToArray ()' context' type' out fileDefinitions);  } else {  	//need to do the combining' etc... and save the file map                              	fileBytes = GetCombinedFiles (context' fileset' type' out fileDefinitions);  }  
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The following statement contains a magic number: if (filePaths == null) {  	if (context.IsDebuggingEnabled || dnnConfig.IsDebugMode ()) {  		throw new KeyNotFoundException ("no map was found for the dependency key: " + fileset + " 'CompositeUrlType.MappedId requires that a map is found");  	}  	throw new HttpException (404' "File not found");  }  
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The following statement contains a magic number: throw new HttpException (404' "File not found");  
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\CompositeDependencyHandler.cs,SetCaching,The following statement contains a magic number: context.SetClientCachingResponse (//the e-tag to use  (fileset + compressionType.ToString ()).GenerateHash ()' //10 days  10' //vary-by params  new[] {  	"t"'  	"s"'  	"cdv"  });  
Magic Number,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,GetCompositeFileUrls,The following statement contains a magic number: while (remaining.Any ()) {  	var current = remaining.Peek ();  	//update the base64 output to get the length  	base64Builder.Append (current.FilePath.EncodeTo64 ());  	//test if the current base64 string exceeds the max length' if so we need to split  	if ((base64Builder.Length + compositeFileHandlerPath.Length + stringType.Length + version.ToString (CultureInfo.InvariantCulture).Length //this number deals with the ampersands' etc...  	+ 10) >= (maxLength)) {  		//we need to do a check here' this is the first one and it's already exceeded the max length we cannot continue  		if (currBuilder.Length == 0) {  			throw new InvalidOperationException ("The path for the single dependency: '" + current.FilePath + "' exceeds the max length (" + maxLength + ")' either reduce the single dependency's path length or increase the CompositeDependencyHandler.MaxHandlerUrlLength value");  		}  		//flush the current output to the array  		files.Add (currBuilder.ToString ());  		//create some new output  		currBuilder = new StringBuilder ();  		base64Builder = new StringBuilder ();  		builderCount++;  	} else {  		//update the normal builder  		currBuilder.Append (current.FilePath + ";");  		//remove from the queue  		remaining.Dequeue ();  	}  }  
Magic Number,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,GetCompositeFileUrls,The following statement contains a magic number: if ((base64Builder.Length + compositeFileHandlerPath.Length + stringType.Length + version.ToString (CultureInfo.InvariantCulture).Length //this number deals with the ampersands' etc...  + 10) >= (maxLength)) {  	//we need to do a check here' this is the first one and it's already exceeded the max length we cannot continue  	if (currBuilder.Length == 0) {  		throw new InvalidOperationException ("The path for the single dependency: '" + current.FilePath + "' exceeds the max length (" + maxLength + ")' either reduce the single dependency's path length or increase the CompositeDependencyHandler.MaxHandlerUrlLength value");  	}  	//flush the current output to the array  	files.Add (currBuilder.ToString ());  	//create some new output  	currBuilder = new StringBuilder ();  	base64Builder = new StringBuilder ();  	builderCount++;  } else {  	//update the normal builder  	currBuilder.Append (current.FilePath + ";");  	//remove from the queue  	remaining.Dequeue ();  }  
Magic Number,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,CreatePath,The following statement contains a magic number: while (fileKey.Length > pos) {  	if (dependencyId.Length > 0) {  		dependencyId.Append ('/');  	}  	var len = Math.Min (fileKey.Length - pos' 240);  	dependencyId.Append (fileKey.Substring (pos' len));  	pos += 240;  }  
Magic Number,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,CreatePath,The following statement contains a magic number: while (fileKey.Length > pos) {  	if (dependencyId.Length > 0) {  		dependencyId.Append ('/');  	}  	var len = Math.Min (fileKey.Length - pos' 240);  	dependencyId.Append (fileKey.Substring (pos' len));  	pos += 240;  }  
Magic Number,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,CreatePath,The following statement contains a magic number: pos += 240;  
Magic Number,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,The following statement contains a magic number: if (pathChars.Count (x => x == '{') > 3) {  	throw new FormatException ("The value specified for pathUrlFormat contains a '{' character outside of the token declaration which is invalid");  }  
Magic Number,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,The following statement contains a magic number: if (pathChars.Count (x => x == '}') > 3) {  	throw new FormatException ("The value specified for pathUrlFormat contains a '}' character outside of the token declaration which is invalid");  }  
Magic Number,ClientDependency.Core.CompositeFiles.Providers,CompositeFileProcessingProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\CompositeFileProcessingProvider.cs,CombineFiles,The following statement contains a magic number: using (var ms = new MemoryStream (5000))  	using (var sw = new StreamWriter (ms' Encoding.UTF8)) {  		var fDefs = filePaths.Select (s => WritePathToStream (type' s' context' sw)).Where (def => def != null).ToList ();  		sw.Flush ();  		byte[] outputBytes = ms.ToArray ();  		sw.Close ();  		ms.Close ();  		fileDefs = fDefs;  		return outputBytes;  	}  
Magic Number,ClientDependency.Core.Controls,HtmlInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: foreach (Match match in tagRegex.Matches (innerHtml)) {  	var allAttributes = Regex.Matches (match.Value' MatchAllAttributes' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant).Cast<Match> ().ToArray ();  	var type = allAttributes.FirstOrDefault (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value == "type";  	});  	var href = allAttributes.FirstOrDefault (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value == sourceAttribute;  	});  	if (type == null || href == null || type.Groups [2].Value != mime)  		continue;  	var attributes = allAttributes.Where (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value != sourceAttribute && x.Groups [1].Value != "type";  	}).ToDictionary (x => x.Groups [1].Value' x => x.Groups [2].Value);  	var file = new BasicFile (dependencyType) {  		FilePath = href.Groups [2].Value'  		Group = Group'  		Priority = Priority'  		ForceProvider = ForceProvider  	};  	foreach (var a in attributes) {  		file.HtmlAttributes.Add (a.Key' a.Value);  	}  	files.Add (file);  }  
Magic Number,ClientDependency.Core.Controls,HtmlInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: foreach (Match match in tagRegex.Matches (innerHtml)) {  	var allAttributes = Regex.Matches (match.Value' MatchAllAttributes' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant).Cast<Match> ().ToArray ();  	var type = allAttributes.FirstOrDefault (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value == "type";  	});  	var href = allAttributes.FirstOrDefault (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value == sourceAttribute;  	});  	if (type == null || href == null || type.Groups [2].Value != mime)  		continue;  	var attributes = allAttributes.Where (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value != sourceAttribute && x.Groups [1].Value != "type";  	}).ToDictionary (x => x.Groups [1].Value' x => x.Groups [2].Value);  	var file = new BasicFile (dependencyType) {  		FilePath = href.Groups [2].Value'  		Group = Group'  		Priority = Priority'  		ForceProvider = ForceProvider  	};  	foreach (var a in attributes) {  		file.HtmlAttributes.Add (a.Key' a.Value);  	}  	files.Add (file);  }  
Magic Number,ClientDependency.Core.Controls,HtmlInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: foreach (Match match in tagRegex.Matches (innerHtml)) {  	var allAttributes = Regex.Matches (match.Value' MatchAllAttributes' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant).Cast<Match> ().ToArray ();  	var type = allAttributes.FirstOrDefault (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value == "type";  	});  	var href = allAttributes.FirstOrDefault (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value == sourceAttribute;  	});  	if (type == null || href == null || type.Groups [2].Value != mime)  		continue;  	var attributes = allAttributes.Where (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value != sourceAttribute && x.Groups [1].Value != "type";  	}).ToDictionary (x => x.Groups [1].Value' x => x.Groups [2].Value);  	var file = new BasicFile (dependencyType) {  		FilePath = href.Groups [2].Value'  		Group = Group'  		Priority = Priority'  		ForceProvider = ForceProvider  	};  	foreach (var a in attributes) {  		file.HtmlAttributes.Add (a.Key' a.Value);  	}  	files.Add (file);  }  
Magic Number,ClientDependency.Core.Controls,HtmlInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: foreach (Match match in tagRegex.Matches (innerHtml)) {  	var allAttributes = Regex.Matches (match.Value' MatchAllAttributes' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant).Cast<Match> ().ToArray ();  	var type = allAttributes.FirstOrDefault (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value == "type";  	});  	var href = allAttributes.FirstOrDefault (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value == sourceAttribute;  	});  	if (type == null || href == null || type.Groups [2].Value != mime)  		continue;  	var attributes = allAttributes.Where (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value != sourceAttribute && x.Groups [1].Value != "type";  	}).ToDictionary (x => x.Groups [1].Value' x => x.Groups [2].Value);  	var file = new BasicFile (dependencyType) {  		FilePath = href.Groups [2].Value'  		Group = Group'  		Priority = Priority'  		ForceProvider = ForceProvider  	};  	foreach (var a in attributes) {  		file.HtmlAttributes.Add (a.Key' a.Value);  	}  	files.Add (file);  }  
Magic Number,ClientDependency.Core.Controls,HtmlInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: foreach (Match match in tagRegex.Matches (innerHtml)) {  	var allAttributes = Regex.Matches (match.Value' MatchAllAttributes' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant).Cast<Match> ().ToArray ();  	var type = allAttributes.FirstOrDefault (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value == "type";  	});  	var href = allAttributes.FirstOrDefault (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value == sourceAttribute;  	});  	if (type == null || href == null || type.Groups [2].Value != mime)  		continue;  	var attributes = allAttributes.Where (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value != sourceAttribute && x.Groups [1].Value != "type";  	}).ToDictionary (x => x.Groups [1].Value' x => x.Groups [2].Value);  	var file = new BasicFile (dependencyType) {  		FilePath = href.Groups [2].Value'  		Group = Group'  		Priority = Priority'  		ForceProvider = ForceProvider  	};  	foreach (var a in attributes) {  		file.HtmlAttributes.Add (a.Key' a.Value);  	}  	files.Add (file);  }  
Magic Number,ClientDependency.Core.Controls,HtmlInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: foreach (Match match in tagRegex.Matches (innerHtml)) {  	var allAttributes = Regex.Matches (match.Value' MatchAllAttributes' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant).Cast<Match> ().ToArray ();  	var type = allAttributes.FirstOrDefault (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value == "type";  	});  	var href = allAttributes.FirstOrDefault (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value == sourceAttribute;  	});  	if (type == null || href == null || type.Groups [2].Value != mime)  		continue;  	var attributes = allAttributes.Where (x => {  		if (x.Groups.Count < 3)  			return false;  		return x.Groups [1].Value != sourceAttribute && x.Groups [1].Value != "type";  	}).ToDictionary (x => x.Groups [1].Value' x => x.Groups [2].Value);  	var file = new BasicFile (dependencyType) {  		FilePath = href.Groups [2].Value'  		Group = Group'  		Priority = Priority'  		ForceProvider = ForceProvider  	};  	foreach (var a in attributes) {  		file.HtmlAttributes.Add (a.Key' a.Value);  	}  	files.Add (file);  }  
Magic Number,ClientDependency.Core.Controls,HtmlInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: if (x.Groups.Count < 3)  	return false;  
Magic Number,ClientDependency.Core.Controls,HtmlInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: if (x.Groups.Count < 3)  	return false;  
Magic Number,ClientDependency.Core.Controls,HtmlInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: if (type == null || href == null || type.Groups [2].Value != mime)  	continue;  
Magic Number,ClientDependency.Core.Controls,HtmlInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: if (x.Groups.Count < 3)  	return false;  
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (FilePath != null ? FilePath.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (int)DependencyType;  	hashCode = (hashCode * 397) ^ Priority;  	hashCode = (hashCode * 397) ^ Group;  	hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int)DependencyType;  
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Priority;  
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Group;  
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode () : 0);  
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode () : 0);  
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode () : 0);  
Magic Number,ClientDependency.Core.Controls,ClientDependencyPath,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyPath.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((_name != null ? _name.GetHashCode () : 0) * 397) ^ (_path != null ? _path.GetHashCode () : 0);  }  
Magic Number,ClientDependency.Core.Controls,ClientDependencyPath,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\Controls\ClientDependencyPath.cs,GetHashCode,The following statement contains a magic number: return ((_name != null ? _name.GetHashCode () : 0) * 397) ^ (_path != null ? _path.GetHashCode () : 0);  
Magic Number,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,AppendVersion,The following statement contains a magic number: if ((http.IsDebuggingEnabled || !EnableCompositeFiles) || ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.UrlType == CompositeUrlType.Base64QueryStrings) {  	//don't append if it is already there!  	if (url.Contains ("cdv=" + ClientDependencySettings.Instance.Version))  		return url;  	//move hash to the end of the file name if present. Eg: /s/myscript.js?cdv=3#myhash  	var hash = url.Contains ("#") ? "#" + url.Split (new[] {  		'#'  	}' 2) [1] : "";  	if (!String.IsNullOrEmpty (hash))  		url = url.Split (new[] {  			'#'  		}' 2) [0];  	//ensure there's not duplicated query string syntax  	url += url.Contains ('?') ? "&" : "?";  	//append a version  	url += "cdv=" + ClientDependencySettings.Instance.Version + hash;  } else {  	if (url.EndsWith (ClientDependencySettings.Instance.Version.ToString ()))  		return url;  	//the URL should end with a '0'  	url = url.TrimEnd ('0') + ClientDependencySettings.Instance.Version;  }  
Magic Number,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,AppendVersion,The following statement contains a magic number: if ((http.IsDebuggingEnabled || !EnableCompositeFiles) || ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.UrlType == CompositeUrlType.Base64QueryStrings) {  	//don't append if it is already there!  	if (url.Contains ("cdv=" + ClientDependencySettings.Instance.Version))  		return url;  	//move hash to the end of the file name if present. Eg: /s/myscript.js?cdv=3#myhash  	var hash = url.Contains ("#") ? "#" + url.Split (new[] {  		'#'  	}' 2) [1] : "";  	if (!String.IsNullOrEmpty (hash))  		url = url.Split (new[] {  			'#'  		}' 2) [0];  	//ensure there's not duplicated query string syntax  	url += url.Contains ('?') ? "&" : "?";  	//append a version  	url += "cdv=" + ClientDependencySettings.Instance.Version + hash;  } else {  	if (url.EndsWith (ClientDependencySettings.Instance.Version.ToString ()))  		return url;  	//the URL should end with a '0'  	url = url.TrimEnd ('0') + ClientDependencySettings.Instance.Version;  }  
Magic Number,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,AppendVersion,The following statement contains a magic number: if (!String.IsNullOrEmpty (hash))  	url = url.Split (new[] {  		'#'  	}' 2) [0];  
Magic Number,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\FileRegistration\Providers\BaseFileRegistrationProvider.cs,AppendVersion,The following statement contains a magic number: url = url.Split (new[] {  	'#'  }' 2) [0];  
Missing Default,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,action,The following switch statement is missing a default case: switch (peek ()) {  case '/':  case '*':  	throw new Exception (string.Format ("Error: JSMIN Unterminated set in Regular Expression literal: {0}\n"' theA));  }  
Missing Default,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,next,The following switch statement is missing a default case: switch (peek ()) {  case '/':  	for (; ;) {  		c = get ();  		if (c <= '\n') {  			break;  		}  	}  	break;  case '*':  	get ();  	while (c != ' ') {  		switch (get ()) {  		case '*':  			var currPeek = peek ();  			if (currPeek == '/') {  				get ();  				c = ' ';  				//In one very peculiar circumstance' if the JS value is like:  				// val(1 /* Calendar */.toString());  				// if we strip the comment out' JS will produce an error because  				// 1.toString() is not valid' however 1..toString() is valid and   				// similarly keeping the comment is valid. So we can check if the next value  				// is a '.' and if the current value is numeric and perform this operation.  				// The reason why .. works is because the JS parser cannot do 1.toString() because it   				// sees the '.' as a decimal  				if (char.IsDigit ((char)theY)) {  					currPeek = peek ();  					if (currPeek == '.') {  						//we actually want to write another '.'  						return '.';  					}  				}  			}  			break;  		case EOF:  			throw new Exception ("Error: JSMIN Unterminated comment.\n");  		}  	}  	break;  }  
Missing Default,ClientDependency.Core.CompositeFiles,JSMin,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\JSMin.cs,next,The following switch statement is missing a default case: switch (get ()) {  case '*':  	var currPeek = peek ();  	if (currPeek == '/') {  		get ();  		c = ' ';  		//In one very peculiar circumstance' if the JS value is like:  		// val(1 /* Calendar */.toString());  		// if we strip the comment out' JS will produce an error because  		// 1.toString() is not valid' however 1..toString() is valid and   		// similarly keeping the comment is valid. So we can check if the next value  		// is a '.' and if the current value is numeric and perform this operation.  		// The reason why .. works is because the JS parser cannot do 1.toString() because it   		// sees the '.' as a decimal  		if (char.IsDigit ((char)theY)) {  			currPeek = peek ();  			if (currPeek == '.') {  				//we actually want to write another '.'  				return '.';  			}  		}  	}  	break;  case EOF:  	throw new Exception ("Error: JSMIN Unterminated comment.\n");  }  
Missing Default,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Components\ClientDependency\Source\CompositeFiles\Providers\PathBasedUrlFormatter.cs,CreatePath,The following switch statement is missing a default case: switch (type) {  case ClientDependencyType.Css:  	pathUrl = pathUrl.Replace ("{type}"' "css");  	break;  case ClientDependencyType.Javascript:  	pathUrl = pathUrl.Replace ("{type}"' "js");  	break;  }  
