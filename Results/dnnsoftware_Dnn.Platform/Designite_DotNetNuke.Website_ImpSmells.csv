Implementation smell,Namespace,Class,File,Method,Description
Long Method,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,OnLoad,The method has 101 lines of code.
Long Method,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,OnUpdateClick,The method has 195 lines of code.
Long Method,DotNetNuke.Modules.Admin.Sales,PayPalIPN,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalIPN.aspx.cs,OnLoad,The method has 170 lines of code.
Long Method,DotNetNuke.Modules.Admin.Sales,PayPalSubscription,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalSubscription.aspx.cs,OnLoad,The method has 177 lines of code.
Long Method,DotNetNuke.Modules.Admin.Security,SendPassword,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\SendPassword.ascx.cs,OnSendPasswordClick,The method has 104 lines of code.
Long Method,DotNetNuke.UI.Skins.Controls,Nav,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Nav.ascx.cs,OnLoad,The method has 135 lines of code.
Long Method,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,OnLoad,The method has 116 lines of code.
Long Method,DotNetNuke.Modules.Admin.Tabs,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Tabs\Import.ascx.cs,OnImportClick,The method has 122 lines of code.
Long Method,DotNetNuke.Modules.Admin.Users,Password,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Password.ascx.cs,DataBind,The method has 104 lines of code.
Long Method,DotNetNuke.Modules.Admin.Users,Password,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Password.ascx.cs,cmdUpdate_Click,The method has 105 lines of code.
Long Method,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,OnInit,The method has 139 lines of code.
Long Method,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,Validate,The method has 174 lines of code.
Long Method,DotNetNuke.Modules.Admin.Users,User,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\User.ascx.cs,DataBind,The method has 121 lines of code.
Long Method,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,InitializePage,The method has 236 lines of code.
Long Method,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,OnInit,The method has 108 lines of code.
Long Method,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,UserAuthenticated,The method has 103 lines of code.
Long Method,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,OnLoad,The method has 125 lines of code.
Long Method,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The method has 146 lines of code.
Long Method,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,InstallApplication,The method has 115 lines of code.
Long Method,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,UpgradeApplication,The method has 101 lines of code.
Complex Method,DotNetNuke.UI.Containers,PrintModule,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\PrintModule.ascx.cs,OnLoad,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.UI.Containers,Visibility,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\Visibility.ascx.cs,OnLoad,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Admin.Containers,ModuleActions,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Menus\ModuleActions\ModuleActions.ascx.cs,OnLoad,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Modules.Admin.Modules,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Import.ascx.cs,OnFoldersIndexChanged,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,BindData,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,OnInit,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,OnLoad,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,OnUpdateClick,Cyclomatic complexity of the method is 22
Complex Method,DotNetNuke.Modules.Admin.Sales,PayPalIPN,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalIPN.aspx.cs,OnLoad,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Modules.Admin.Sales,PayPalSubscription,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalSubscription.aspx.cs,OnLoad,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Modules.Admin.Sales,Purchase,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\Purchase.ascx.cs,OnLoad,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Modules.Admin.Security,PasswordReset,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\PasswordReset.ascx.cs,cmdChangePassword_Click,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Modules.Admin.Security,SendPassword,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\SendPassword.ascx.cs,OnSendPasswordClick,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,BindData,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,cmdAdd_Click,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.UI.Skins.Controls,BreadCrumb,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\BreadCrumb.ascx.cs,OnLoad,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.UI.Skins.Controls,DnnLink,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\DnnLink.ascx.cs,OnLoad,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.UI.Skins.Controls,Language,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Language.ascx.cs,OnLoad,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.UI.Skins.Controls,Logo,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Logo.ascx.cs,OnLoad,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.UI.Skins.Controls,Nav,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Nav.ascx.cs,OnLoad,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.UI.Skins.Controls,Styles,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Styles.ascx.cs,AddStyleSheet,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.UI.Skins.Controls,TreeViewMenu,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\TreeViewMenu.ascx.cs,BuildTree,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.UI.Skins.Controls,TreeViewMenu,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\TreeViewMenu.ascx.cs,InitializeTree,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.UI.Skins.Controls,TreeViewMenu,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\TreeViewMenu.ascx.cs,OnLoad,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,OnLoad,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Modules.Admin.Tabs,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Tabs\Import.ascx.cs,OnImportClick,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Modules.Admin.Users,EditUser,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\EditUser.ascx.cs,BindData,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Modules.Admin.Users,Password,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Password.ascx.cs,cmdUpdate_Click,Cyclomatic complexity of the method is 12
Complex Method,DotNetNuke.Modules.Admin.Users,ProfileDefinitions,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs,BindGrid,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,OnInit,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,OnLoad,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,Validate,Cyclomatic complexity of the method is 27
Complex Method,DotNetNuke.Modules.Admin.Users,User,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\User.ascx.cs,Validate,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Modules.Admin.Users,User,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\User.ascx.cs,DataBind,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,InitializePage,Cyclomatic complexity of the method is 26
Complex Method,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,OnInit,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,BindLogin,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,GenerateUserName,Cyclomatic complexity of the method is 15
Complex Method,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,OnLoad,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Modules.SearchResults,ResultsSettings,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\SearchResults\ResultsSettings.ascx.cs,LoadSettings,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,OnLoad,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,ProcessQuerystring,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,UpgradeApplication,Cyclomatic complexity of the method is 8
Long Parameter List,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,AddField,The method has 5 parameters. Parameters: dataField' dataMember' required' regexValidator' textMode
Long Identifier,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,,The length of the parameter PasswordStrengthTextBoxCssClass is 31.
Long Identifier,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,,The length of the parameter ConfirmPasswordTextBoxCssClass is 30.
Long Statement,DotNetNuke.UI.Containers,DropDownActions,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\DropDownActions.ascx.cs,Page_Load,The length of the statement  "            cmdGo.Attributes.Add("onclick"' "if (cmdGo_OnClick(dnn.dom.getById('" + Control.NavigationControl.ClientID + "')) == false) return false;"); " is 140.
Long Statement,DotNetNuke.UI.Containers,DropDownActions,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\DropDownActions.ascx.cs,ProcessNodes,The length of the statement  "                ClientAPI.RegisterClientVariable(Page' "__dnn_CSAction_" + Control.NavigationControl.ClientID + "_" + objParent.ID' objParent.JSFunction' true); " is 144.
Long Statement,DotNetNuke.UI.Containers,DropDownActions,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\DropDownActions.ascx.cs,ProcessNodes,The length of the statement  "            objParent.ClickAction = eClickAction.None; //since GO button is handling actions dont allow selected index change fire postback " is 127.
Long Statement,DotNetNuke.UI.Containers,PrintModule,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\PrintModule.ascx.cs,OnLoad,The length of the statement  "                            if ((PortalSettings.UserMode == PortalSettings.Mode.Edit) || (action.Secure == SecurityAccessLevel.Anonymous || action.Secure == SecurityAccessLevel.View)) " is 155.
Long Statement,DotNetNuke.UI.Containers,PrintModule,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\PrintModule.ascx.cs,OnLoad,The length of the statement  "                                        ModuleActionIcon.ImageUrl = ModuleContext.Configuration.ContainerPath.Substring(0' ModuleContext.Configuration.ContainerPath.LastIndexOf("/") + 1) + PrintIcon; " is 159.
Long Statement,DotNetNuke.UI.Containers,Title,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\Title.ascx.cs,CanEditModule,The length of the statement  "                canEdit = (PortalSettings.UserMode == PortalSettings.Mode.Edit) && TabPermissionController.CanAdminPage() && !Globals.IsAdminControl(); " is 135.
Long Statement,DotNetNuke.UI.Containers,Title,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\Title.ascx.cs,UpdateTitle,The length of the statement  "                ModuleInfo moduleInfo = ModuleController.Instance.GetModule(ModuleControl.ModuleContext.ModuleId' ModuleControl.ModuleContext.TabId' false); " is 140.
Long Statement,DotNetNuke.UI.Containers,Visibility,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\Visibility.ascx.cs,OnLoad,The length of the statement  "							//if visibility is set to minimized' then the client needs to set the cookie for maximized only and delete the cookie for minimized' " is 132.
Long Statement,DotNetNuke.UI.Containers,Visibility,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\Visibility.ascx.cs,OnLoad,The length of the statement  "                            ClientAPI.RegisterClientVariable(Page' "__dnn_" + ModuleControl.ModuleContext.ModuleId + ":defminimized"' "true"' true); " is 120.
Long Statement,DotNetNuke.UI.Containers,Visibility,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\Visibility.ascx.cs,OnLoad,The length of the statement  "                    //since we disabled viewstate on the cmdVisibility control we need to check to see if we need hide this on postbacks as well " is 124.
Long Statement,DotNetNuke.UI.Containers.Controls,Toggle,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\Toggle.ascx.cs,OnPreRender,The length of the statement  "			var toggleScript = string.Format("<script type=\"text/javascript\">(function($){{$(\"#{0}\").find(\"a.toggleHandler\").click(function(e){{$(\"#{1}\").slideToggle();$(this).toggleClass('collapsed');e.preventDefault();}});}})(jQuery);</script>"' " is 243.
Long Statement,DotNetNuke.Admin.Containers,ModuleActions,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Menus\ModuleActions\ModuleActions.ascx.cs,OnInit,The length of the statement  "            ClientResourceManager.RegisterStyleSheet(Page' "~/admin/menus/ModuleActions/ModuleActions.css"' FileOrder.Css.ModuleCss); " is 121.
Long Statement,DotNetNuke.Admin.Containers,ModuleActions,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Menus\ModuleActions\ModuleActions.ascx.cs,OnInit,The length of the statement  "            ClientResourceManager.RegisterStyleSheet(Page' "~/Resources/Shared/stylesheets/dnnicons/css/dnnicon.min.css"' FileOrder.Css.ModuleCss); " is 135.
Long Statement,DotNetNuke.Admin.Containers,ModuleActions,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Menus\ModuleActions\ModuleActions.ascx.cs,OnLoad,The length of the statement  "                    var control  = ModuleControlFactory.LoadModuleControl(Page' ModuleContext.Configuration' "QuickSettings"' quickSettingsControl.ControlSrc); " is 139.
Long Statement,DotNetNuke.Admin.Containers,ModuleActions,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Menus\ModuleActions\ModuleActions.ascx.cs,OnLoad,The length of the statement  "                    IsShared = PortalGroupController.Instance.IsModuleShared(ModuleContext.ModuleId' PortalController.Instance.GetPortal(PortalSettings.PortalId)); " is 143.
Long Statement,DotNetNuke.Modules.Admin.Modules,Export,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Export.ascx.cs,ExportModule,The length of the statement  "                        var objObject = Reflection.CreateObject(Module.DesktopModule.BusinessControllerClass' Module.DesktopModule.BusinessControllerClass); " is 132.
Long Statement,DotNetNuke.Modules.Admin.Modules,Export,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Export.ascx.cs,ExportModule,The length of the statement  "                                //content = "<?xml version=\"1.0\" encoding=\"utf-8\" ?>" + "<content type=\"" + CleanName(Module.DesktopModule.ModuleName) + "\" version=\"" + " is 143.
Long Statement,DotNetNuke.Modules.Admin.Modules,Export,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Export.ascx.cs,ExportModule,The length of the statement  "                                        Services.FileSystem.FileManager.Instance.AddFile(folder' fileName' fileContent' true' true' "application/octet-stream"); " is 120.
Long Statement,DotNetNuke.Modules.Admin.Modules,Export,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Export.ascx.cs,OnExportClick,The length of the statement  "                    UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("Validation"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError); " is 136.
Long Statement,DotNetNuke.Modules.Admin.Modules,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Import.ascx.cs,ImportModule,The length of the statement  "                        var objObject = Reflection.CreateObject(Module.DesktopModule.BusinessControllerClass' Module.DesktopModule.BusinessControllerClass); " is 132.
Long Statement,DotNetNuke.Modules.Admin.Modules,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Import.ascx.cs,ImportModule,The length of the statement  "                                if (strType == Globals.CleanName(Module.DesktopModule.ModuleName) || strType == Globals.CleanName(Module.DesktopModule.FriendlyName)) " is 133.
Long Statement,DotNetNuke.Modules.Admin.Modules,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Import.ascx.cs,OnFoldersIndexChanged,The length of the statement  "				if (file.Text.IndexOf("content." + Globals.CleanName(Module.DesktopModule.ModuleName) + "."' System.StringComparison.Ordinal) != -1) " is 132.
Long Statement,DotNetNuke.Modules.Admin.Modules,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Import.ascx.cs,OnFoldersIndexChanged,The length of the statement  "					cboFiles.AddItem(file.Text.Replace("content." + Globals.CleanName(Module.DesktopModule.ModuleName) + "."' "")' file.Value); " is 123.
Long Statement,DotNetNuke.Modules.Admin.Modules,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Import.ascx.cs,OnFoldersIndexChanged,The length of the statement  "				if (file.Text.IndexOf("content." + Globals.CleanName(Module.DesktopModule.FriendlyName) + "."' System.StringComparison.Ordinal) != -1) " is 134.
Long Statement,DotNetNuke.Modules.Admin.Modules,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Import.ascx.cs,OnFoldersIndexChanged,The length of the statement  "					cboFiles.AddItem(file.Text.Replace("content." + Globals.CleanName(Module.DesktopModule.FriendlyName) + "."' "")' file.Value); " is 125.
Long Statement,DotNetNuke.Modules.Admin.Modules,ModulePermissions,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\ModulePermissions.ascx.cs,OnLoad,The length of the statement  "                        cmdUpdate.Visible = ModulePermissionController.HasModulePermission(Module.ModulePermissions' "EDIT'MANAGE") || TabPermissionController.CanAddContentToPage(); " is 157.
Long Statement,DotNetNuke.Modules.Admin.Modules,ModulePermissions,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\ModulePermissions.ascx.cs,OnLoad,The length of the statement  "                        permissionsRow.Visible = ModulePermissionController.CanAdminModule(Module) || TabPermissionController.CanAddContentToPage(); " is 124.
Long Statement,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,BindData,The length of the statement  "                dgPermissions.ResourceFile = Globals.ApplicationPath + "/DesktopModules/" + desktopModule.FolderName + "/" + Localization.LocalResourceDirectory + "/" + " is 152.
Long Statement,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,BindData,The length of the statement  "                chkAllowIndex.Checked = Settings["AllowIndex"] == null || Settings["AllowIndex"] != null && bool.Parse(Settings["AllowIndex"].ToString()); " is 138.
Long Statement,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,BindModuleCacheProviderList,The length of the statement  "            //if (!string.IsNullOrEmpty(Module.GetEffectiveCacheMethod()) && cboCacheProvider.Items.FindByValue(Module.GetEffectiveCacheMethod()) != null) " is 142.
Long Statement,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,BindModuleCacheProviderList,The length of the statement  "            if (!string.IsNullOrEmpty(Module.GetEffectiveCacheMethod()) && cboCacheProvider.FindItemByValue(Module.GetEffectiveCacheMethod()) != null) " is 138.
Long Statement,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,GetFilteredProviders,The length of the statement  "            var providers = from provider in providerList let filteredkey = provider.Key.Replace(keyFilter' String.Empty) select new { filteredkey' provider.Key }; " is 151.
Long Statement,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,OnInit,The length of the statement  "                    ModuleControlInfo moduleControlInfo = ModuleControlController.GetModuleControlByControlKey("Settings"' Module.ModuleDefID); " is 123.
Long Statement,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,OnLoad,The length of the statement  "                        cmdUpdate.Visible = ModulePermissionController.HasModulePermission(Module.ModulePermissions' "EDIT'MANAGE") || TabPermissionController.CanAddContentToPage(); " is 157.
Long Statement,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,OnLoad,The length of the statement  "                        permissionsRow.Visible = ModulePermissionController.CanAdminModule(Module) || TabPermissionController.CanAddContentToPage(); " is 124.
Long Statement,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,OnUpdateClick,The length of the statement  "                            Skin.AddModuleMessage(this' Localization.GetString("MonikerExists"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError); " is 130.
Long Statement,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,OnUpdateClick,The length of the statement  "                        ModuleController.Instance.UpdateTabModuleSetting(Module.TabModuleID' "hideadminborder"' chkAdminBorder.Checked.ToString()); " is 123.
Long Statement,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,OnUpdateClick,The length of the statement  "                                Skin.AddModuleMessage(this' Localization.GetString("ModuleExists"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError); " is 129.
Long Statement,DotNetNuke.Modules.Admin.Modules,ViewSource,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\viewsource.ascx.cs,OnUpdateClick,The length of the statement  "                    UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("NoFileTypeSelected"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError); " is 144.
Long Statement,DotNetNuke.Modules.Admin.Sales,PayPalIPN,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalIPN.aspx.cs,OnLoad,The length of the statement  "                    if (settings.ContainsKey("paypalsandbox") && !String.IsNullOrEmpty(settings["paypalsandbox"]) && settings["paypalsandbox"].Equals("true"' StringComparison.InvariantCultureIgnoreCase)) " is 183.
Long Statement,DotNetNuke.Modules.Admin.Sales,PayPalIPN,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalIPN.aspx.cs,OnLoad,The length of the statement  "                        if ((portalPrice.ToString() == dblAmount.ToString()) && (HttpUtility.UrlDecode(strPayPalID.ToLower()) == strProcessorID)) " is 121.
Long Statement,DotNetNuke.Modules.Admin.Sales,PayPalIPN,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalIPN.aspx.cs,OnLoad,The length of the statement  "                        if ((rolePrice.ToString() == dblAmount.ToString() || trialPrice.ToString() == dblAmount.ToString()) && (HttpUtility.UrlDecode(strPayPalID.ToLower()) == strProcessorID)) " is 168.
Long Statement,DotNetNuke.Modules.Admin.Sales,PayPalSubscription,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalSubscription.aspx.cs,OnLoad,The length of the statement  "                    if (settings.ContainsKey("paypalsandbox") && !String.IsNullOrEmpty(settings["paypalsandbox"]) && settings["paypalsandbox"].ToLower() == "true") " is 143.
Long Statement,DotNetNuke.Modules.Admin.Sales,PayPalSubscription,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalSubscription.aspx.cs,OnLoad,The length of the statement  "                                                Globals.HTTPPOSTEncode(PortalSettings.PortalName + " - " + objRole.RoleName + " ( " + objRole.ServiceFee.ToString("#.##") + " " + " is 129.
Long Statement,DotNetNuke.Modules.Admin.Sales,PayPalSubscription,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalSubscription.aspx.cs,OnLoad,The length of the statement  "                                                Globals.HTTPPOSTEncode(PortalSettings.PortalName + " - " + objRole.RoleName + " ( " + objRole.ServiceFee.ToString("#.##") + " " + " is 129.
Long Statement,DotNetNuke.Modules.Admin.Sales,PayPalSubscription,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalSubscription.aspx.cs,OnLoad,The length of the statement  "                                                                       PortalSettings.Currency + " every " + intBillingPeriod + " " + GetBillingFrequencyText(objRole.BillingFrequency) + " )"); " is 121.
Long Statement,DotNetNuke.Modules.Admin.Sales,PayPalSubscription,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalSubscription.aspx.cs,OnLoad,The length of the statement  "                                                Globals.HTTPPOSTEncode(Convert.ToString(!String.IsNullOrEmpty(objUserInfo.Profile.Unit) ? objUserInfo.Profile.Unit + " " : "") + " is 128.
Long Statement,DotNetNuke.Modules.Admin.Sales,PayPalSubscription,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalSubscription.aspx.cs,OnLoad,The length of the statement  "                        if (settings.ContainsKey("paypalsubscriptioncancelreturn") && !string.IsNullOrEmpty(settings["paypalsubscriptioncancelreturn"])) " is 128.
Long Statement,DotNetNuke.Modules.Admin.Sales,PayPalSubscription,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalSubscription.aspx.cs,OnLoad,The length of the statement  "                        if (settings.ContainsKey("paypalsubscriptionnotifyurl") && !string.IsNullOrEmpty(settings["paypalsubscriptionnotifyurl"])) " is 122.
Long Statement,DotNetNuke.Modules.Admin.Sales,PayPalSubscription,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalSubscription.aspx.cs,OnLoad,The length of the statement  "                            strPayPalURL += "&notify_url=" + Globals.HTTPPOSTEncode(Globals.AddHTTP(Globals.GetDomainName(Request)) + "/admin/Sales/PayPalIPN.aspx"); " is 137.
Long Statement,DotNetNuke.Modules.Admin.Sales,PayPalSubscription,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\PayPalSubscription.aspx.cs,OnLoad,The length of the statement  "                    if ((settings.ContainsKey("paypalsubscriptioncancelreturn") && !string.IsNullOrEmpty(settings["paypalsubscriptioncancelreturn"]))) " is 130.
Long Statement,DotNetNuke.Modules.Admin.Sales,Purchase,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\Purchase.ascx.cs,cmdPurchase_Click,The length of the statement  "                                       Globals.HTTPPOSTEncode(PortalSettings.PortalName + " - " + lblDescription.Text + " ( " + txtUnits.Text + " units @ " + lblFee.Text + " " + lblFeeCurrency.Text + " is 160.
Long Statement,DotNetNuke.Modules.Admin.Sales,Purchase,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\Purchase.ascx.cs,cmdPurchase_Click,The length of the statement  "                        strPayPalURL = strPayPalURL + "&notify_url=" + Globals.HTTPPOSTEncode("http://" + Globals.GetDomainName(Request) + "/admin/Sales/PayPalIPN.aspx"); " is 146.
Long Statement,DotNetNuke.Modules.Admin.Security,PasswordReset,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\PasswordReset.ascx.cs,OnLoad,The length of the statement  "			ClientResourceManager.RegisterStyleSheet(Page' "~/Resources/Shared/stylesheets/dnn.PasswordStrength.css"' FileOrder.Css.ResourceCss); " is 133.
Long Statement,DotNetNuke.Modules.Admin.Security,PasswordReset,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\PasswordReset.ascx.cs,OnLoad,The length of the statement  "	        var useEmailAsUserName = PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName"' PortalId' false); " is 120.
Long Statement,DotNetNuke.Modules.Admin.Security,PasswordReset,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\PasswordReset.ascx.cs,cmdChangePassword_Click,The length of the statement  "                var testUser = UserController.GetUserByEmail(PortalId' username); // one additonal call to db to see if an account with that email actually exists " is 146.
Long Statement,DotNetNuke.Modules.Admin.Security,PasswordReset,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\PasswordReset.ascx.cs,cmdChangePassword_Click,The length of the statement  "            if (UserController.ChangePasswordByToken(PortalSettings.PortalId' username' newPassword' answer' ResetToken' out errorMessage) == false) " is 136.
Long Statement,DotNetNuke.Modules.Admin.Security,SendPassword,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\SendPassword.ascx.cs,GetUser,The length of the statement  "			if (ShowEmailField && !String.IsNullOrEmpty(txtEmail.Text.Trim()) && (String.IsNullOrEmpty(txtUsername.Text.Trim()) || divUsername.Visible == false)) " is 149.
Long Statement,DotNetNuke.Modules.Admin.Security,SendPassword,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\SendPassword.ascx.cs,OnInit,The length of the statement  "            if (MembershipProviderConfig.RequiresUniqueEmail && isEnabled && !PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName"' PortalId' false)) " is 161.
Long Statement,DotNetNuke.Modules.Admin.Security,SendPassword,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\SendPassword.ascx.cs,OnSendPasswordClick,The length of the statement  "                    // don't hide panel when e-mail only in use and error occured. We must provide negative feedback to the user' in case he doesn't rember what e-mail address he has used " is 167.
Long Statement,DotNetNuke.Modules.Admin.Security,SendPassword,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\SendPassword.ascx.cs,OnSendPasswordClick,The length of the statement  "                    if (!canSend && _user == null && MembershipProviderConfig.RequiresUniqueEmail && PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName"' PortalId' false)) " is 176.
Long Statement,DotNetNuke.Modules.Admin.Security,SendPassword,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\SendPassword.ascx.cs,LogResult,The length of the statement  "                LogUserName = portalSecurity.InputFilter(txtUsername.Text' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup) " is 178.
Long Statement,DotNetNuke.Modules.Admin.Security,MemberServices,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\MemberServices.ascx.cs,FormatPrice,The length of the statement  "                        formatPrice = string.Format(Localization.GetString("Fee"' LocalResourceFile)' FormatPrice(price)' period' Localization.GetString("Frequency_" + frequency' LocalResourceFile)); " is 175.
Long Statement,DotNetNuke.Modules.Admin.Security,MemberServices,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\MemberServices.ascx.cs,ShowTrial,The length of the statement  "            if (string.IsNullOrEmpty(objRole.TrialFrequency) || objRole.TrialFrequency == "N" || (objRole.IsPublic && objRole.ServiceFee == 0.0)) " is 133.
Long Statement,DotNetNuke.Modules.Admin.Security,MemberServices,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\MemberServices.ascx.cs,grdServices_ItemCommand,The length of the statement  "            if (commandName == Localization.GetString("Subscribe"' LocalResourceFile) || commandName == Localization.GetString("Renew"' LocalResourceFile)) " is 143.
Long Statement,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,BindData,The length of the statement  "                if (Role.RoleName == PortalSettings.AdministratorRoleName && !PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName)) " is 124.
Long Statement,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,BindData,The length of the statement  "                    UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("NotAuthorized"' LocalResourceFile)' ModuleMessage.ModuleMessageType.YellowWarning); " is 144.
Long Statement,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,BindGrid,The length of the statement  "            ctlPagingControl.QuerystringParams = System.Web.HttpUtility.UrlDecode(string.Join("&"' Request.QueryString.ToString().Split('&'). " is 129.
Long Statement,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,FormatUser,The length of the statement  "            return "<a href=\"" + Globals.LinkClick("userid=" + UserID' TabId' ModuleId) + "\" class=\"CommandButton\">" + DisplayName + "</a>"; " is 132.
Long Statement,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,OnLoad,The length of the statement  "                placeIsOwnerHeader.Visible = ((Role.SecurityMode == SecurityMode.SocialGroup) || (Role.SecurityMode == SecurityMode.Both)); " is 123.
Long Statement,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,cmdAdd_Click,The length of the statement  "                        RoleController.AddUserRole(User' Role' PortalSettings' RoleStatus.Approved' datEffectiveDate' datExpiryDate' chkNotify.Checked' isOwner); " is 137.
Long Statement,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,cmdDeleteUserRole_click,The length of the statement  "                if (!RoleController.DeleteUserRole(UserController.GetUserById(PortalId' userId)' role' PortalSettings' chkNotify.Checked)) " is 122.
Long Statement,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,cmdDeleteUserRole_click,The length of the statement  "                    UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("RoleRemoveError"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError); " is 141.
Long Statement,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,cmdDeleteUserRole_click,The length of the statement  "                UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("RoleRemoveError"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError); " is 141.
Long Statement,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,grdUserRoles_ItemCreated,The length of the statement  "                        ClientAPI.AddButtonConfirm(cmdDeleteUserRole' String.Format(Localization.GetString("DeleteRoleFromUser.Text"' LocalResourceFile)' role.FullName' role.RoleName)); " is 161.
Long Statement,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,grdUserRoles_ItemCreated,The length of the statement  "                        ClientAPI.AddButtonConfirm(cmdDeleteUserRole' String.Format(Localization.GetString("DeleteUsersFromRole.Text"' LocalResourceFile)' role.FullName' role.RoleName)); " is 162.
Long Statement,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,grdUserRoles_ItemDataBound,The length of the statement  "            if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem || item.ItemType == ListItemType.SelectedItem) " is 134.
Long Statement,DotNetNuke.UI.Skins.Controls,BreadCrumb,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\BreadCrumb.ascx.cs,OnLoad,The length of the statement  "                _breadcrumb.Append("<a href=\"" + _homeUrl + "\" class=\"" + _cssClass + "\" itemprop=\"item\" ><span itemprop=\"name\">" + _homeTabName + "</span></a>"); " is 154.
Long Statement,DotNetNuke.UI.Skins.Controls,BreadCrumb,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\BreadCrumb.ascx.cs,OnLoad,The length of the statement  "                _breadcrumb.Append("<meta itemprop=\"position\" content=\"" + position++ + "\" />"); // Notice we post-increment the position variable " is 134.
Long Statement,DotNetNuke.UI.Skins.Controls,BreadCrumb,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\BreadCrumb.ascx.cs,OnLoad,The length of the statement  "                    _breadcrumb.Append("<a href=\"" + tabUrl + "\" class=\"" + _cssClass + "\" itemprop=\"item\"><span itemprop=\"name\">" + tabName + "</span></a>"); " is 146.
Long Statement,DotNetNuke.UI.Skins.Controls,BreadCrumb,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\BreadCrumb.ascx.cs,OnLoad,The length of the statement  "                _breadcrumb.Append("<meta itemprop=\"position\" content=\"" + position++ + "\" />"); // Notice we post-increment the position variable " is 134.
Long Statement,DotNetNuke.UI.Skins.Controls,Copyright,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Copyright.ascx.cs,OnLoad,The length of the statement  "                lblCopyright.Text = string.Format(Localization.GetString("Copyright"' Localization.GetResourceFile(this' MyFileName))' DateTime.Now.Year' PortalSettings.PortalName); " is 165.
Long Statement,DotNetNuke.UI.Skins.Controls,CurrentDate,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\CurrentDate.ascx.cs,OnLoad,The length of the statement  "            lblDate.Text = !String.IsNullOrEmpty(DateFormat) ? user.LocalTime().ToString(DateFormat) : user.LocalTime().ToLongDateString(); " is 127.
Long Statement,DotNetNuke.UI.Skins.Controls,DnnLink,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\DnnLink.ascx.cs,OnLoad,The length of the statement  "            string url = "http://www.dnnsoftware.com/community?utm_source=dnn-install&utm_medium=web-link&utm_content=gravity-skin-link&utm_campaign=dnn-install"; " is 150.
Long Statement,DotNetNuke.UI.Skins.Controls,Language,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Language.ascx.cs,OnLoad,The length of the statement  "                IEnumerable<ListItem> cultureListItems = DotNetNuke.Services.Localization.Localization.LoadCultureInListItems(CultureDropDownTypes.NativeName' CurrentCulture' ""' false); " is 170.
Long Statement,DotNetNuke.UI.Skins.Controls,Language,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Language.ascx.cs,OnLoad,The length of the statement  "                    string defaultRoles = PortalController.GetPortalSetting(string.Format("DefaultTranslatorRoles-{0}"' loc.Code)' PortalSettings.PortalId' "Administrators"); " is 154.
Long Statement,DotNetNuke.UI.Skins.Controls,Language,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Language.ascx.cs,OnLoad,The length of the statement  "                            (PortalSecurity.IsInRoles(PortalSettings.AdministratorRoleName) || loc.IsPublished || PortalSecurity.IsInRoles(defaultRoles)))) " is 127.
Long Statement,DotNetNuke.UI.Skins.Controls,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Login.ascx.cs,OnLoad,The length of the statement  "                            var clickEvent = "return " + UrlUtils.PopUpUrl(HttpUtility.UrlDecode(loginLink.NavigateUrl)' this' PortalSettings' true' false' 300' 650); " is 138.
Long Statement,DotNetNuke.UI.Skins.Controls,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Login.ascx.cs,HasSocialAuthenticationEnabled,The length of the statement  "                                             : !string.IsNullOrEmpty(a.LoginControlSrc) && (LoadControl("~/" + a.LoginControlSrc) as AuthenticationLoginBase).Enabled " is 120.
Long Statement,DotNetNuke.UI.Skins.Controls,Logo,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Logo.ascx.cs,GetLogoFileInfo,The length of the statement  "            string cacheKey = String.Format(DataCache.PortalCacheKey' PortalSettings.PortalId' PortalSettings.CultureCode) + "LogoFile"; " is 124.
Long Statement,DotNetNuke.UI.Skins.Controls,Logo,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Logo.ascx.cs,GetLogoFileInfo,The length of the statement  "            var file = CBO.GetCachedObject<FileInfo>(new CacheItemArgs(cacheKey' DataCache.PortalCacheTimeOut' DataCache.PortalCachePriority)' " is 130.
Long Statement,DotNetNuke.UI.Skins.Controls,Nav,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Nav.ascx.cs,OnLoad,The length of the statement  "                    strRightArrow = "breadcrumb.gif"; //removed APPIMAGEPATH token - http://www.dotnetnuke.com/Community/ForumsDotNetNuke/tabid/795/forumid/76/threadid/85554/scope/posts/Default.aspx " is 178.
Long Statement,DotNetNuke.UI.Skins.Controls,Nav,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Nav.ascx.cs,OnLoad,The length of the statement  "                    strDownArrow = "menu_down.gif"; //removed APPIMAGEPATH token - http://www.dotnetnuke.com/Community/ForumsDotNetNuke/tabid/795/forumid/76/threadid/85554/scope/posts/Default.aspx " is 176.
Long Statement,DotNetNuke.UI.Skins.Controls,Search,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Search.ascx.cs,OnLoad,The length of the statement  "            ClientResourceManager.RegisterStyleSheet(Page' "~/Resources/Search/SearchSkinObjectPreview.css"' FileOrder.Css.ModuleCss); " is 122.
Long Statement,DotNetNuke.UI.Skins.Controls,Search,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Search.ascx.cs,OnPreRender,The length of the statement  "                    downArrow.AlternateText = Localization.GetString("DropDownGlyph.AltText"' Localization.GetResourceFile(this' MyFileName)); " is 122.
Long Statement,DotNetNuke.UI.Skins.Controls,Search,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Search.ascx.cs,OnPreRender,The length of the statement  "                ClientResourceManager.RegisterScript(Page' "~/Resources/Search/Search.js"' FileOrder.Js.DefaultPriority' "DnnFormBottomProvider"); " is 130.
Long Statement,DotNetNuke.UI.Skins.Controls,Toast,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Toast.ascx.cs,OnLoad,The length of the statement  "            ClientResourceManager.RegisterScript(Page' "~/Resources/Shared/components/Toast/jquery.toastmessage.js"' DotNetNuke.Web.Client.FileOrder.Js.jQuery); " is 148.
Long Statement,DotNetNuke.UI.Skins.Controls,Toast,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Toast.ascx.cs,OnLoad,The length of the statement  "			ClientResourceManager.RegisterStyleSheet(Page' "~/Resources/Shared/components/Toast/jquery.toastmessage.css"' DotNetNuke.Web.Client.FileOrder.Css.DefaultCss); " is 158.
Long Statement,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,OnLoad,The length of the statement  "                            var unreadMessages = InternalMessagingController.Instance.CountUnreadMessages(userInfo.UserID' PortalController.GetEffectivePortalId(userInfo.PortalID)); " is 153.
Long Statement,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,OnLoad,The length of the statement  "                            var unreadAlerts = NotificationsController.Instance.CountNotifications(userInfo.UserID' PortalController.GetEffectivePortalId(userInfo.PortalID)); " is 146.
Long Statement,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,OnLoad,The length of the statement  "                            messageLink.Text = unreadMessages > 0 ? string.Format(Localization.GetString("Messages"' Localization.GetResourceFile(this' MyFileName))' unreadMessages) : Localization.GetString("NoMessages"' Localization.GetResourceFile(this' MyFileName)); " is 241.
Long Statement,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,OnLoad,The length of the statement  "                            notificationLink.Text = unreadAlerts > 0 ? string.Format(Localization.GetString("Notifications"' Localization.GetResourceFile(this' MyFileName))' unreadAlerts) : Localization.GetString("NoNotifications"' Localization.GetResourceFile(this' MyFileName)); " is 252.
Long Statement,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,OnLoad,The length of the statement  "                            notificationLink.NavigateUrl = Globals.NavigateURL(GetMessageTab()' ""' string.Format("userId={0}"' userInfo.UserID)'"view=notifications"'"action=notifications"); " is 162.
Long Statement,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,OnLoad,The length of the statement  "                            notificationLink.ToolTip = Localization.GetString("CheckNotifications"' Localization.GetResourceFile(this' MyFileName)); " is 120.
Long Statement,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,OnLoad,The length of the statement  "                                registerLink.Text = registerLink.Text + string.Format(Localization.GetString("NewMessages"' Localization.GetResourceFile(this' MyFileName))' unreadMessages); " is 157.
Long Statement,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,HasSocialAuthenticationEnabled,The length of the statement  "                                  : !string.IsNullOrEmpty(a.LoginControlSrc) && (LoadControl("~/" + a.LoginControlSrc) as AuthenticationLoginBase).Enabled " is 120.
Long Statement,DotNetNuke.UI.Skins.Controls,UserAndLogin,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\UserAndLogin.ascx.cs,OnLoad,The length of the statement  "                editProfileLink.NavigateUrl = Globals.NavigateURL(PortalSettings.UserTabId' "Profile"' "userId=" + PortalSettings.UserId' "pageno=2"); " is 134.
Long Statement,DotNetNuke.UI.Skins.Controls,UserAndLogin,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\UserAndLogin.ascx.cs,OnLoad,The length of the statement  "                accountLink.NavigateUrl = Globals.NavigateURL(PortalSettings.UserTabId' "Profile"' "userId=" + PortalSettings.UserId' "pageno=1"); " is 130.
Long Statement,DotNetNuke.UI.Skins.Controls,UserAndLogin,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\UserAndLogin.ascx.cs,OnLoad,The length of the statement  "                messagesLink.NavigateUrl = Globals.NavigateURL(GetMessageTab()' ""' string.Format("userId={0}"' PortalSettings.UserId)); " is 120.
Long Statement,DotNetNuke.UI.Skins.Controls,UserAndLogin,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\UserAndLogin.ascx.cs,OnLoad,The length of the statement  "                notificationsLink.NavigateUrl = Globals.NavigateURL(GetMessageTab()' ""' string.Format("userId={0}"' PortalSettings.UserId)' "view=notifications"' "action=notifications"); " is 171.
Long Statement,DotNetNuke.UI.Skins.Controls,UserAndLogin,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\UserAndLogin.ascx.cs,OnLoad,The length of the statement  "                var unreadMessages = InternalMessagingController.Instance.CountUnreadMessages(PortalSettings.UserId' PortalSettings.PortalId); " is 126.
Long Statement,DotNetNuke.UI.Skins.Controls,UserAndLogin,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\UserAndLogin.ascx.cs,OnLoad,The length of the statement  "                profilePicture.AlternateText = Localization.GetString("ProfilePicture"' Localization.GetResourceFile(this' MyFileName)); " is 120.
Long Statement,DotNetNuke.UI.Skins.Controls,UserAndLogin,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\UserAndLogin.ascx.cs,HasSocialAuthenticationEnabled,The length of the statement  "                                  : !string.IsNullOrEmpty(a.LoginControlSrc) && (LoadControl("~/" + a.LoginControlSrc) as AuthenticationLoginBase).Enabled " is 120.
Long Statement,DotNetNuke.Modules.Admin.Tabs,Export,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Tabs\Export.ascx.cs,OnExportClick,The length of the statement  "                        UI.Skins.Skin.AddModuleMessage(this' ""' string.Format(Localization.GetString("ExportedMessage"' LocalResourceFile)' filename)' ModuleMessage.ModuleMessageType.BlueInfo); " is 170.
Long Statement,DotNetNuke.Modules.Admin.Tabs,Export,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Tabs\Export.ascx.cs,OnExportClick,The length of the statement  "							Services.FileSystem.FileManager.Instance.AddFile(folder' txtFile.Text + ".page.template"' fileContent' true' true' "application/octet-stream"); " is 143.
Long Statement,DotNetNuke.Modules.Admin.Tabs,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Tabs\Import.ascx.cs,BindBeforeAfterTabControls,The length of the statement  "            List<TabInfo> listTabs = parentTab != null ? TabController.Instance.GetTabsByPortal(parentTab.PortalID).WithParentId(parentTab.TabID) : TabController.Instance.GetTabsByPortal(PortalId).WithParentId(Null.NullInteger); " is 216.
Long Statement,DotNetNuke.Modules.Admin.Tabs,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Tabs\Import.ascx.cs,BindBeforeAfterTabControls,The length of the statement  "            listTabs = TabController.GetPortalTabs(listTabs' Null.NullInteger' true' noneSpecified' false' false' false' false' true); " is 122.
Long Statement,DotNetNuke.Modules.Admin.Tabs,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Tabs\Import.ascx.cs,OnImportClick,The length of the statement  "                    UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("SpecifyFile"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError); " is 137.
Long Statement,DotNetNuke.Modules.Admin.Tabs,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Tabs\Import.ascx.cs,OnImportClick,The length of the statement  "                    UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("SpecifyMode"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError); " is 137.
Long Statement,DotNetNuke.Modules.Admin.Tabs,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Tabs\Import.ascx.cs,OnImportClick,The length of the statement  "                    UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("NoTabsInTemplate"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError); " is 142.
Long Statement,DotNetNuke.Modules.Admin.Tabs,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Tabs\Import.ascx.cs,OnImportClick,The length of the statement  "                            UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("TabRecycled"' LocalResourceFile)' ModuleMessage.ModuleMessageType.YellowWarning); " is 142.
Long Statement,DotNetNuke.Modules.Admin.Tabs,Import,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Tabs\Import.ascx.cs,OnImportClick,The length of the statement  "                            UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("TabExists"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError); " is 135.
Long Statement,DotNetNuke.Modules.Admin.Users,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Users\ViewProfile.ascx.cs,OnLoad,The length of the statement  "                if (ctlProfile.UserProfile.ProfileProperties.Cast<ProfilePropertyDefinition>().Count(profProperty => profProperty.Visible) == 0) " is 128.
Long Statement,DotNetNuke.Modules.Admin.Users,EditUser,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\EditUser.ascx.cs,BindData,The length of the statement  "                        VanityUrl.Text = String.Format("{0}/{1}/{2}"' PortalSettings.PortalAlias.HTTPAlias' urlSettings.VanityUrlPrefix' User.VanityUrl); " is 129.
Long Statement,DotNetNuke.Modules.Admin.Users,EditUser,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\EditUser.ascx.cs,VerifyUserPermissions,The length of the statement  "                if (!IsAdmin || (User.IsInRole(PortalSettings.AdministratorRoleName) && !PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName))) " is 136.
Long Statement,DotNetNuke.Modules.Admin.Users,EditUser,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\EditUser.ascx.cs,BindMembership,The length of the statement  "            AddModuleMessage("UserLockedOut"' ModuleMessage.ModuleMessageType.YellowWarning' ctlMembership.UserMembership.LockedOut && (!Page.IsPostBack)); " is 143.
Long Statement,DotNetNuke.Modules.Admin.Users,EditUser,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\EditUser.ascx.cs,cmdUpdate_Click,The length of the statement  "                        var usersWithSameDisplayName = (List<UserInfo>)MembershipProvider.Instance().GetUsersBasicSearch(PortalId' 0' 2' "DisplayName"' true' "DisplayName"' User.DisplayName); " is 167.
Long Statement,DotNetNuke.Modules.Admin.Users,ManageUsers,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ManageUsers.ascx.cs,VerifyUserPermissions,The length of the statement  "                if (!IsAdmin || (User.IsInRole(PortalSettings.AdministratorRoleName) && !PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName))) " is 136.
Long Statement,DotNetNuke.Modules.Admin.Users,ManageUsers,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ManageUsers.ascx.cs,BindMembership,The length of the statement  "            AddModuleMessage("UserLockedOut"' ModuleMessage.ModuleMessageType.YellowWarning' ctlMembership.UserMembership.LockedOut && (!Page.IsPostBack)); " is 143.
Long Statement,DotNetNuke.Modules.Admin.Users,ManageUsers,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ManageUsers.ascx.cs,OnLoad,The length of the statement  "                    loginLink.Attributes.Add("onclick"' "return " + UrlUtils.PopUpUrl(loginLink.NavigateUrl' this' PortalSettings' true' false' 300' 650)); " is 135.
Long Statement,DotNetNuke.Modules.Admin.Users,ManageUsers,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ManageUsers.ascx.cs,cmdAdd_Click,The length of the statement  "                    AddLocalizedModuleMessage(UserController.GetUserCreateStatus(ctlUser.CreateStatus)' ModuleMessage.ModuleMessageType.RedError' true); " is 132.
Long Statement,DotNetNuke.Modules.Admin.Users,ManageUsers,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ManageUsers.ascx.cs,MembershipAuthorized,The length of the statement  "				if (string.IsNullOrEmpty(User.Membership.Password) && !MembershipProviderConfig.RequiresQuestionAndAnswer && MembershipProviderConfig.PasswordRetrievalEnabled) " is 159.
Long Statement,DotNetNuke.Modules.Admin.Users,ManageUsers,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ManageUsers.ascx.cs,UserCreateCompleted,The length of the statement  "                    AddLocalizedModuleMessage(UserController.GetUserCreateStatus(e.CreateStatus)' ModuleMessage.ModuleMessageType.RedError' true); " is 126.
Long Statement,DotNetNuke.Modules.Admin.Users,Membership,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Membership.ascx.cs,DataBind,The length of the statement  "            if (UserController.Instance.GetCurrentUserInfo().IsSuperUser && UserController.Instance.GetCurrentUserInfo().UserID!=User.UserID) " is 129.
Long Statement,DotNetNuke.Modules.Admin.Users,Membership,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Membership.ascx.cs,cmdAuthorize_Click,The length of the statement  "            if (!User.IsSuperUser && User.IsInRole("Unverified Users") && PortalSettings.UserRegistration == (int)Common.Globals.PortalRegistrationType.VerifiedRegistration) " is 161.
Long Statement,DotNetNuke.Modules.Admin.Users,Password,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Password.ascx.cs,DataBind,The length of the statement  "                lblExpires.Text = PasswordConfig.PasswordExpiry > 0 ? User.Membership.LastPasswordChangeDate.AddDays(PasswordConfig.PasswordExpiry).ToLongDateString() : Localization.GetString("NoExpiry"' LocalResourceFile); " is 207.
Long Statement,DotNetNuke.Modules.Admin.Users,Password,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Password.ascx.cs,OnLoad,The length of the statement  "			if (MembershipProviderConfig.RequiresQuestionAndAnswer && User.UserID != UserController.Instance.GetCurrentUserInfo().UserID) " is 125.
Long Statement,DotNetNuke.Modules.Admin.Users,Password,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Password.ascx.cs,OnPreRender,The length of the statement  "			ClientResourceManager.RegisterStyleSheet(Page' "~/Resources/Shared/stylesheets/dnn.PasswordStrength.css"' FileOrder.Css.ResourceCss); " is 133.
Long Statement,DotNetNuke.Modules.Admin.Users,Password,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Password.ascx.cs,OnPreRender,The length of the statement  "				var script = string.Format("dnn.initializePasswordStrength('.{0}'' {1});{2}"' "password-strength"' optionsAsJsonString' Environment.NewLine); " is 141.
Long Statement,DotNetNuke.Modules.Admin.Users,Password,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Password.ascx.cs,OnPreRender,The length of the statement  "			var confirmScript = string.Format("dnn.initializePasswordComparer({0});{1}"' confirmOptionsAsJsonString' Environment.NewLine); " is 126.
Long Statement,DotNetNuke.Modules.Admin.Users,Password,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Password.ascx.cs,LogResult,The length of the statement  "                LogUserName = portalSecurity.InputFilter(User.Username' PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup) " is 175.
Long Statement,DotNetNuke.Modules.Admin.Users,Password,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Password.ascx.cs,cmdUpdateQA_Click,The length of the statement  "            OnPasswordQuestionAnswerUpdated(UserController.ChangePasswordQuestionAndAnswer(objUser' txtQAPassword.Text' txtEditQuestion.Text' txtEditAnswer.Text) " is 149.
Long Statement,DotNetNuke.Modules.Admin.Users,ProfileDefinitions,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs,grdProfileProperties_ItemCreated,The length of the statement  "                        ((WebControl)e.Item.Cells[COLUMN_REQUIRED].Controls[1]).Attributes.Add("onclick"' "dnn.util.checkallChecked(this'" + COLUMN_REQUIRED + ");"); " is 141.
Long Statement,DotNetNuke.Modules.Admin.Users,ProfileDefinitions,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs,grdProfileProperties_ItemCreated,The length of the statement  "                        ((WebControl)e.Item.Cells[COLUMN_VISIBLE].Controls[1]).Attributes.Add("onclick"' "dnn.util.checkallChecked(this'" + column_visible + ");"); " is 139.
Long Statement,DotNetNuke.Modules.Admin.Users,ProfileDefinitions,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs,grdProfileProperties_ItemCreated,The length of the statement  "                        ClientAPI.EnableClientSideReorder(e.Item.Cells[COLUMN_MOVE_DOWN].Controls[0]' Page' false' grdProfileProperties.ClientID); " is 122.
Long Statement,DotNetNuke.Modules.Admin.Users,ProfileDefinitions,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs,grdProfileProperties_ItemDataBound,The length of the statement  "            if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem || item.ItemType == ListItemType.SelectedItem) " is 134.
Long Statement,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,OnInit,The length of the statement  "							String.IsNullOrEmpty(PortalSettings.Registration.UserNameValidator) ? ExcludeTerms : PortalSettings.Registration.UserNameValidator' " is 131.
Long Statement,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,OnInit,The length of the statement  "			if (PortalSettings.UserRegistration == (int)Globals.PortalRegistrationType.NoRegistration && Request.IsAuthenticated == false) " is 126.
Long Statement,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,BindLoginControl,The length of the statement  "			authLoginControl.ID = Path.GetFileNameWithoutExtension(authSystem.LoginControlSrc) + "_" + authSystem.AuthenticationType; " is 121.
Long Statement,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,BindLoginControl,The length of the statement  "			authLoginControl.LocalResourceFile = authLoginControl.TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/" + " is 129.
Long Statement,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,CreateUser,The length of the statement  "					AddLocalizedModuleMessage(UserController.GetUserCreateStatus(CreateStatus)' ModuleMessage.ModuleMessageType.RedError' true); " is 124.
Long Statement,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,registerButton_Click,The length of the statement  "						AddLocalizedModuleMessage(UserController.GetUserCreateStatus(CreateStatus)' ModuleMessage.ModuleMessageType.RedError' true); " is 124.
Long Statement,DotNetNuke.Modules.Admin.Users,User,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\User.ascx.cs,OnPreRender,The length of the statement  "			ClientResourceManager.RegisterStyleSheet(Page' "~/Resources/Shared/stylesheets/dnn.PasswordStrength.css"' FileOrder.Css.ResourceCss); " is 133.
Long Statement,DotNetNuke.Modules.Admin.Users,User,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\User.ascx.cs,OnPreRender,The length of the statement  "			var confirmScript = string.Format("dnn.initializePasswordComparer({0});{1}"' confirmOptionsAsJsonString' Environment.NewLine); " is 126.
Long Statement,DotNetNuke.Modules.Admin.Users,User,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\User.ascx.cs,cmdUpdate_Click,The length of the statement  "                            var usersWithSameDisplayName = (System.Collections.Generic.List<UserInfo>)MembershipProvider.Instance().GetUsersBasicSearch(PortalId' 0' 2' "DisplayName"' true' "DisplayName"' User.DisplayName); " is 194.
Long Statement,DotNetNuke.Modules.Admin.Users,User,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\User.ascx.cs,cmdUpdate_Click,The length of the statement  "                                UI.Skins.Skin.AddModuleMessage(this' LocalizeString("DisplayNameNotUnique")' UI.Skins.Controls.ModuleMessage.ModuleMessageType.RedError); " is 137.
Long Statement,DotNetNuke.Modules.Admin.Users,ViewProfileSettings,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\Settings.ascx.cs,UpdateSettings,The length of the statement  "                ModuleController.Instance.UpdateTabModuleSetting(TabModuleId' "IncludeButton"' IncludeButton.Checked.ToString(CultureInfo.InvariantCulture)); " is 141.
Long Statement,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,RaiseClientAPICallbackEvent,The length of the statement  "                if (DNNClientAPI.IsPersonalizationKeyRegistered(dict["namingcontainer"] + ClientAPI.CUSTOM_COLUMN_DELIMITER + dict["key"]) == false) " is 132.
Long Statement,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,RaiseClientAPICallbackEvent,The length of the statement  "                    throw new Exception(string.Format("This personalization key has not been enabled ({0}:{1}).  Make sure you enable it with DNNClientAPI.EnableClientPersonalization"' dict["namingcontainer"]' dict["key"])); " is 204.
Long Statement,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,InitializePage,The length of the statement  "                Exceptions.ProcessHttpException(new HttpException(503' Localization.GetString("SiteAccessedWhileInstallationWasInProgress.Error"' Localization.GlobalResourceFile))); " is 165.
Long Statement,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,InitializePage,The length of the statement  "            if (PortalSettings.ActiveTab.RefreshInterval > 0 && this.PortalSettings.UserMode == PortalSettings.Mode.View && Request.QueryString["ctl"] == null) " is 147.
Long Statement,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,InitializePage,The length of the statement  "			if (PortalSettings.ActiveTab.TabSettings.ContainsKey("CustomStylesheet") && !string.IsNullOrEmpty(PortalSettings.ActiveTab.TabSettings["CustomStylesheet"].ToString())) " is 167.
Long Statement,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,InitializePage,The length of the statement  "				var customStylesheet = Path.Combine(PortalSettings.HomeDirectory' PortalSettings.ActiveTab.TabSettings["CustomStylesheet"].ToString()); " is 135.
Long Statement,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,GetBackgroundFileInfo,The length of the statement  "            var file = CBO.GetCachedObject<Services.FileSystem.FileInfo>(new CacheItemArgs(cacheKey' Common.Utilities.DataCache.PortalCacheTimeOut' Common.Utilities.DataCache.PortalCachePriority)' " is 184.
Long Statement,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,OnInit,The length of the statement  "                if (Config.GetFriendlyUrlProvider() == "advanced")  //advanced mode compares on the primary alias as set during alias identification " is 132.
Long Statement,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,OnInit,The length of the statement  "                        if (string.Compare(PortalSettings.PrimaryAlias.HTTPAlias' PortalSettings.PortalAlias.HTTPAlias' StringComparison.InvariantCulture ) != 0) " is 137.
Long Statement,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,OnInit,The length of the statement  "                    if (string.Compare(PortalSettings.PortalAlias.HTTPAlias' PortalSettings.DefaultPortalAlias' StringComparison.InvariantCulture ) != 0)  " is 133.
Long Statement,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,OnInit,The length of the statement  "            ClientResourceManager.RegisterDefaultStylesheet(this' string.Concat(Globals.ApplicationPath' "/Resources/Shared/stylesheets/dnndefault/7.0.0/default.css")); " is 156.
Long Statement,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,OnInit,The length of the statement  "            ClientResourceManager.RegisterStyleSheet(this' ctlSkin.SkinSrc.Replace(".ascx"' ".css")' FileOrder.Css.SpecificSkinCss); " is 120.
Long Statement,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,OnInit,The length of the statement  "            ClientResourceManager.RegisterStyleSheet(this' string.Concat(PortalSettings.HomeDirectory' "portal.css")' FileOrder.Css.PortalCss); " is 131.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Authentication,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Authentication.ascx.cs,OnLoad,The length of the statement  "				authSettingsControl.ID = Path.GetFileNameWithoutExtension(authSystem.SettingsControlSrc) + "_" + authSystem.AuthenticationType; " is 127.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Authentication,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Authentication.ascx.cs,OnLoad,The length of the statement  "				authSettingsControl.LocalResourceFile = authSettingsControl.TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/" + " is 135.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Authentication,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Authentication.ascx.cs,OnUpdateClick,The length of the statement  "				UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("NoProvidersEnabled"' LocalResourceFile)' ModuleMessage.ModuleMessageType.YellowWarning); " is 149.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,BindLoginControl,The length of the statement  "            authLoginControl.ID = Path.GetFileNameWithoutExtension(authSystem.LoginControlSrc) + "_" + authSystem.AuthenticationType; " is 121.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,BindLoginControl,The length of the statement  "            authLoginControl.LocalResourceFile = authLoginControl.TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/" + " is 129.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,BindRegister,The length of the statement  "            if (PortalSettings.UserRegistration == (int)Globals.PortalRegistrationType.NoRegistration && Request.IsAuthenticated == false) " is 126.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,BindRegister,The length of the statement  "            if (string.IsNullOrEmpty(User.Username) || string.IsNullOrEmpty(User.Email) || string.IsNullOrEmpty(User.FirstName) || string.IsNullOrEmpty(User.LastName)) " is 155.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,DisplayLoginControl,The length of the statement  "            var container = new HtmlGenericControl { TagName = "div"' ID = authLoginControl.AuthenticationType' ViewStateMode = ViewStateMode.Disabled }; " is 141.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,DisplayTabbedLoginControl,The length of the statement  "            var tab = new DNNTab(Localization.GetString("Title"' authLoginControl.LocalResourceFile)) { ID = authLoginControl.AuthenticationType }; " is 135.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ShowPanel,The length of the statement  "                ScriptManager.RegisterClientScriptBlock(this' GetType()' "ResizePopup"' "if(parent.$('#iPopUp').length > 0 && parent.$('#iPopUp').dialog('isOpen')){parent.$('#iPopUp').dialog({width: 950' height: 550}).dialog({position: 'center'});};"' true); " is 242.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ValidateUser,The length of the statement  "                    if ((objUser.Profile != null) && (objUser.Profile.PreferredLocale != null) && LocaleEnabled(objUser.Profile.PreferredLocale)) " is 125.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ValidateUser,The length of the statement  "                    UserController.UserLogin(PortalId' objUser' PortalSettings.PortalName' AuthenticationLoginBase.GetIPAddress()' RememberMe); " is 123.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ValidateUser,The length of the statement  "                    strMessage = string.Format(Localization.GetString("PasswordExpired"' LocalResourceFile)' expiryDate.ToLongDateString()); " is 120.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ValidateUser,The length of the statement  "                    strMessage = string.Format(Localization.GetString("PasswordExpiring"' LocalResourceFile)' expiryDate.ToLongDateString()); " is 121.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ValidateUser,The length of the statement  "                    var redirTo = string.Format("{0}/default.aspx?ctl=PasswordReset&resetToken={1}&forced=true"' portalAlias' objUser.PasswordResetToken); " is 134.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,UserAuthenticated,The length of the statement  "                        AddLocalizedModuleMessage(string.Format(Localization.GetString("UserLockedOut"' LocalResourceFile)' Host.AutoAccountUnlockDuration)' ModuleMessage.ModuleMessageType.RedError' true); " is 181.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,UserAuthenticated,The length of the statement  "                        AddLocalizedModuleMessage(Localization.GetString("UserLockedOut_ContactAdmin"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError' true); " is 147.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,UserAuthenticated,The length of the statement  "                        Subject = Localization.GetSystemMessage(PortalSettings' "EMAIL_USER_LOCKOUT_SUBJECT"' Localization.GlobalResourceFile' Custom)' " is 127.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,UserAuthenticated,The length of the statement  "                        Body = Localization.GetSystemMessage(PortalSettings' "EMAIL_USER_LOCKOUT_BODY"' Localization.GlobalResourceFile' Custom)' " is 121.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,UserCreateCompleted,The length of the statement  "                    AddLocalizedModuleMessage(UserController.GetUserCreateStatus(e.CreateStatus)' ModuleMessage.ModuleMessageType.RedError' true); " is 126.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Logoff,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Logoff.ascx.cs,OnLoad,The length of the statement  "					authLogoffControl.ID = Path.GetFileNameWithoutExtension(authSystem.LogoffControlSrc) + "_" + authSystem.AuthenticationType; " is 123.
Long Statement,DotNetNuke.Modules.Admin.Authentication,Logoff,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Logoff.ascx.cs,OnLoad,The length of the statement  "					authLogoffControl.LocalResourceFile = authLogoffControl.TemplateSourceDirectory + "/" + Localization.LocalResourceDirectory + "/" + " is 131.
Long Statement,DotNetNuke.Modules.Admin.EditExtension,EditExtension,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\EditExtension\EditExtension.ascx.cs,BindData,The length of the statement  "                cmdPackage.Visible = IsSuperTab && writer != null && Directory.Exists(Path.Combine(Globals.ApplicationMapPath' writer.BasePath)); " is 129.
Long Statement,DotNetNuke.Modules.Admin.EditExtension,EditExtension,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\EditExtension\EditExtension.ascx.cs,BindData,The length of the statement  "                cmdDelete.Visible = IsSuperTab && (!Package.IsSystemPackage) && (PackageController.CanDeletePackage(Package' ModuleContext.PortalSettings)); " is 140.
Long Statement,DotNetNuke.Modules.Admin.EditExtension,EditExtension,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\EditExtension\EditExtension.ascx.cs,UpdatePackage,The length of the statement  "                    UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("PackageUpdated"' LocalResourceFile)' ModuleMessage.ModuleMessageType.GreenSuccess); " is 144.
Long Statement,DotNetNuke.Modules.SearchResults,SearchResults,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\SearchResults\SearchResults.ascx.cs,OnLoad,The length of the statement  "            ClientResourceManager.RegisterStyleSheet(Page' "~/Resources/Shared/stylesheets/dnn.searchBox.css"' FileOrder.Css.ModuleCss); " is 124.
Long Statement,DesktopModules.Admin.Security,DNNProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Profile.ascx.cs,cmdUpdate_Click,The length of the statement  "                    var usersWithSameDisplayName = (List<UserInfo>)MembershipProvider.Instance().GetUsersBasicSearch(PortalId' 0' 2' "DisplayName"' true' "DisplayName"' User.DisplayName); " is 167.
Long Statement,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,OnLoad,The length of the statement  "			    var editUrl = Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID' "Profile"' "userId=" + ProfileUserId' "pageno=1"); " is 130.
Long Statement,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,OnLoad,The length of the statement  "                var profileUrl = Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID' "Profile"' "userId=" + ProfileUserId' "pageno=2"); " is 133.
Long Statement,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,OnLoad,The length of the statement  "                        string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnPrimaryAction\">{1}</a>"' profileUrl' LocalizeString("Edit")); " is 127.
Long Statement,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,OnLoad,The length of the statement  "                        string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnSecondaryAction\">{1}</a>"' profileUrl' LocalizeString("Edit")); " is 129.
Long Statement,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,OnLoad,The length of the statement  "                        string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnSecondaryAction\">{1}</a>"' editUrl' LocalizeString("MyAccount")); " is 131.
Long Statement,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,OnLoad,The length of the statement  "			    if (ProfileUser.Profile.ProfileProperties.Cast<ProfilePropertyDefinition>().Count(profProperty => profProperty.Visible) == 0) " is 125.
Long Statement,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,ProcessQuerystring,The length of the statement  "                // note that in this case here currentUser is visiting the profile of initiatingUser' most likely from a link in the notification e-mail " is 136.
Long Statement,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,ProcessQuerystring,The length of the statement  "                var initiatingUser = UserController.Instance.GetUserById(PortalSettings.Current.PortalId' Convert.ToInt32(Request.QueryString["UserID"])); " is 138.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The length of the statement  "                DotNetNuke.UI.Skins.Skin.AddModuleMessage(this' Localization.GetSystemMessage(PortalSettings' "MESSAGE_USERNAME_CHANGED_INSTRUCTIONS")' ModuleMessage.ModuleMessageType.BlueInfo); " is 178.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The length of the statement  "                    registerLink.Attributes.Add("onclick"' "return " + UrlUtils.PopUpUrl(url' this' PortalSettings' true' false' 600' 950)); " is 120.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The length of the statement  "                    passwordLink.Attributes.Add("onclick"' "return " + UrlUtils.PopUpUrl(url' this' PortalSettings' true' false' 300' 650)); " is 120.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The length of the statement  "                if (!string.IsNullOrEmpty(Request.QueryString["verificationcode"]) && PortalSettings.UserRegistration == (int) Globals.PortalRegistrationType.VerifiedRegistration) " is 163.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The length of the statement  "                            Response.Redirect(Globals.NavigateURL(redirectTabId > 0 ? redirectTabId : PortalSettings.HomeTabId' string.Empty' "VerificationSuccess=true")' true); " is 149.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The length of the statement  "                                Response.Cookies.Add(new HttpCookie("returnurl"' redirectUrl) { Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/") }); " is 155.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The length of the statement  "		                    UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("VerificationSuccess"' LocalResourceFile)' ModuleMessage.ModuleMessageType.GreenSuccess); " is 149.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The length of the statement  "                        UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("UserAlreadyVerified"' LocalResourceFile)' ModuleMessage.ModuleMessageType.YellowWarning); " is 150.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The length of the statement  "                        UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("InvalidVerificationCode"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError); " is 149.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The length of the statement  "                        UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("UserDoesNotExist"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError); " is 142.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The length of the statement  "                        UI.Skins.Skin.AddModuleMessage(this' Localization.GetString("InvalidVerificationCode"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError); " is 149.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoginClick,The length of the statement  "                    var testUser = UserController.GetUserByEmail(PortalId' userName); // one additonal call to db to see if an account with that email actually exists " is 146.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoginClick,The length of the statement  "				var objUser = UserController.ValidateUser(PortalId' userName' txtPassword.Text' "DNN"' string.Empty' PortalSettings.PortalName' IPAddress' ref loginStatus); " is 156.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoginClick,The length of the statement  "                if (loginStatus != UserLoginStatus.LOGIN_FAILURE && PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName"' PortalId' false)) " is 147.
Long Statement,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,HasSocialAuthenticationEnabled,The length of the statement  "                                  : !string.IsNullOrEmpty(a.LoginControlSrc) && (LoadControl("~/" + a.LoginControlSrc) as AuthenticationLoginBase).Enabled " is 120.
Long Statement,DotNetNuke.Services.Exceptions,ErrorPage,C:\repos\dnnsoftware_Dnn.Platform\Website\ErrorPage.aspx.cs,ManageError,The length of the statement  "            string localizedMessage = Localization.Localization.GetString(status + ".Error"' Localization.Localization.GlobalResourceFile); " is 127.
Long Statement,DotNetNuke.Services.Exceptions,ErrorPage,C:\repos\dnnsoftware_Dnn.Platform\Website\ErrorPage.aspx.cs,ManageError,The length of the statement  "                localizedMessage = localizedMessage.Replace("src=\"images/403-3.gif\""' "src=\"" + ResolveUrl("~/images/403-3.gif") + "\""); " is 124.
Long Statement,DotNetNuke.Services.Exceptions,ErrorPage,C:\repos\dnnsoftware_Dnn.Platform\Website\ErrorPage.aspx.cs,ManageError,The length of the statement  "                if (!string.IsNullOrEmpty(errorMessage2) && ( (errorMode=="Off") || ( (errorMode=="RemoteOnly") && (Request.IsLocal) ) )) " is 121.
Long Statement,DotNetNuke.Services.Exceptions,ErrorPage,C:\repos\dnnsoftware_Dnn.Platform\Website\ErrorPage.aspx.cs,OnLoad,The length of the statement  "                    localizedMessage = Localization.Localization.GetString("UnhandledError.Text"' Localization.Localization.GlobalResourceFile); " is 124.
Long Statement,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,WriteInstallationInProgress,The length of the statement  "                                    Localization.Localization.GetString("ThereIsAInstallationCurrentlyInProgress.Error"' Localization.Localization.GlobalResourceFile) + "<br>"); " is 141.
Long Statement,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,CheckPermissions,The length of the statement  "                                    "Checking File and Folder permissions " + (verified ? "<font color='green'>Success</font>" : "<font color='red'>Error!</font>") + "<br>"); " is 138.
Long Statement,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,UpgradeApplication,The length of the statement  "                Response.Write("<h2>Current Assembly Version: " + Globals.FormatVersion(DotNetNukeContext.Current.Application.Version) + "</h2>"); " is 130.
Long Statement,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,UpgradeApplication,The length of the statement  "                    if ((databaseVersion.Major == 3 && databaseVersion.Minor < 3) || (databaseVersion.Major == 4 && databaseVersion.Minor < 3)) " is 123.
Long Statement,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,UpgradeApplication,The length of the statement  "                        Response.Write("<br><br><a href='Install.aspx?mode=upgrade&ignoreWarning=true'>Click Here To Proceed With The Upgrade.</a>"); " is 125.
Long Statement,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,NoUpgrade,The length of the statement  "                                var strDatabaseVersion = ((int)dr["Major"]).ToString("00") + "." + ((int)dr["Minor"]).ToString("00") + "." + ((int)dr["Build"]).ToString("00"); " is 143.
Long Statement,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,CurrentStepActivity,The length of the statement  "            var percentage = (_currentStep == null) ? _upgradeProgress : _upgradeProgress + (_currentStep.Percentage / _steps.Count); " is 121.
Long Statement,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,CurrentStepActivity,The length of the statement  "                check0 = upgradeDatabase.Status.ToString() + (upgradeDatabase.Errors.Count == 0 ? "" : " Errors " + upgradeDatabase.Errors.Count)' " is 130.
Long Statement,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,CurrentStepActivity,The length of the statement  "                check1 = upgradeExtensions.Status.ToString() + (upgradeExtensions.Errors.Count == 0 ? "" : " Errors " + upgradeExtensions.Errors.Count) " is 135.
Long Statement,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,VerifyHostUser,The length of the statement  "            UserInfo hostUser = UserController.ValidateUser(-1' accountInfo["username"]' accountInfo["password"]' "DNN"' ""' ""' AuthenticationLoginBase.GetIPAddress()' ref loginStatus); " is 174.
Long Statement,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,GetInstallationLog,The length of the statement  "            string logFile = "InstallerLog" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString() + ".resources"; " is 140.
Long Statement,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,GetInstallationLog,The length of the statement  "                var lines = File.ReadAllLines(Path.Combine(AppDomain.CurrentDomain.BaseDirectory' "Portals"' "_default"' "logs"' logFile)); " is 123.
Complex Conditional,DotNetNuke.UI.Containers,LinkActions,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\LinkActions.ascx.cs,OnLoad,The conditional expression  "(ModuleControl.ModuleContext.EditMode && Globals.IsAdminControl() == false) ||                                          (action.Secure != SecurityAccessLevel.Anonymous && action.Secure != SecurityAccessLevel.View)"  is complex.
Complex Conditional,DotNetNuke.Admin.Containers,ModuleActions,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Menus\ModuleActions\ModuleActions.ascx.cs,OnLoad,The conditional expression  "(EditMode && Globals.IsAdminControl() == false) ||                                      (action.Secure != SecurityAccessLevel.Anonymous && action.Secure != SecurityAccessLevel.View)"  is complex.
Complex Conditional,DotNetNuke.Modules.Admin.Security,SendPassword,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\SendPassword.ascx.cs,GetUser,The conditional expression  "ShowEmailField && !String.IsNullOrEmpty(txtEmail.Text.Trim()) && (String.IsNullOrEmpty(txtUsername.Text.Trim()) || divUsername.Visible == false)"  is complex.
Complex Conditional,DotNetNuke.Modules.Admin.Security,SendPassword,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\SendPassword.ascx.cs,OnSendPasswordClick,The conditional expression  "!canSend && _user == null && MembershipProviderConfig.RequiresUniqueEmail && PortalController.GetPortalSettingAsBoolean("Registration_UseEmailAsUserName"' PortalId' false)"  is complex.
Complex Conditional,DotNetNuke.Modules.Admin.Security,MemberServices,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\MemberServices.ascx.cs,ShowTrial,The conditional expression  "string.IsNullOrEmpty(objRole.TrialFrequency) || objRole.TrialFrequency == "N" || (objRole.IsPublic && objRole.ServiceFee == 0.0)"  is complex.
Complex Conditional,DotNetNuke.UI.Skins.Controls,Language,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Language.ascx.cs,OnLoad,The conditional expression  "!PortalSettings.ContentLocalizationEnabled ||                          (LocaleIsAvailable(loc) &&                              (PortalSecurity.IsInRoles(PortalSettings.AdministratorRoleName) || loc.IsPublished || PortalSecurity.IsInRoles(defaultRoles)))"  is complex.
Complex Conditional,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,InitializePage,The conditional expression  "(PortalSettings.ActiveTab.TabSettings.ContainsKey("AllowIndex") &&                       bool.TryParse(PortalSettings.ActiveTab.TabSettings["AllowIndex"].ToString()' out allowIndex) &&                       !allowIndex)                      ||                      (Request.QueryString["ctl"] != null &&                       (Request.QueryString["ctl"] == "Login" || Request.QueryString["ctl"] == "Register"))"  is complex.
Complex Conditional,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,BindLogin,The conditional expression  "authSystem.AuthenticationType == "Facebook" || authSystem.AuthenticationType == "Google"                          || authSystem.AuthenticationType == "Live" || authSystem.AuthenticationType == "Twitter""  is complex.
Complex Conditional,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,BindRegister,The conditional expression  "string.IsNullOrEmpty(User.Username) || string.IsNullOrEmpty(User.Email) || string.IsNullOrEmpty(User.FirstName) || string.IsNullOrEmpty(User.LastName)"  is complex.
Complex Conditional,DotNetNuke.Services.Exceptions,ErrorPage,C:\repos\dnnsoftware_Dnn.Platform\Website\ErrorPage.aspx.cs,ManageError,The conditional expression  "!string.IsNullOrEmpty(errorMessage2) && ( (errorMode=="Off") || ( (errorMode=="RemoteOnly") && (Request.IsLocal) ) )"  is complex.
Complex Conditional,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,InstallApplication,The conditional expression  "IsProOrEnterprise && licenseConfig != null && !String.IsNullOrEmpty(licenseConfig.AccountEmail) &&                              !String.IsNullOrEmpty(licenseConfig.InvoiceNumber)"  is complex.
Complex Conditional,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,UpgradeApplication,The conditional expression  "(databaseVersion.Major == 3 && databaseVersion.Minor < 3) || (databaseVersion.Major == 4 && databaseVersion.Minor < 3)"  is complex.
Empty Catch Block,DotNetNuke.Modules.Admin.Users,Password,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Password.ascx.cs,cmdUpdate_Click,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Modules.Admin.Users,Password,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Password.ascx.cs,cmdUpdate_Click,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Modules.Admin.Authentication,Logoff,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Logoff.ascx.cs,OnLoad,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,ProcessQuerystring,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,CurrentStepActivity,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,CompleteUpgrade,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,GetInstallationLog,The method has an empty catch block.
Magic Number,DotNetNuke.UI.Containers,Icon,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\Icon.ascx.cs,GetIconFileUrl,The following statement contains a magic number: if (iconFile.StartsWith("FileID="' StringComparison.InvariantCultureIgnoreCase))              {                  var fileId = Convert.ToInt32(iconFile.Substring(7));                  fileInfo = FileManager.Instance.GetFile(fileId);              }              else              {                  fileInfo = FileManager.Instance.GetFile(PortalSettings.PortalId' iconFile);              }
Magic Number,DotNetNuke.UI.Containers,LinkActions,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\LinkActions.ascx.cs,LinkAction_Click,The following statement contains a magic number: try              {                  ProcessAction(((LinkButton) sender).ID.Substring(3));              }              catch (Exception exc) //Module failed to load              {                  Exceptions.ProcessModuleLoadException(this' exc);              }
Magic Number,DotNetNuke.UI.Containers,PrintModule,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\PrintModule.ascx.cs,IconAction_Click,The following statement contains a magic number: try              {                  ProcessAction(((ImageButton) sender).ID.Substring(3));              }              catch (Exception exc) //Module failed to load              {                  Exceptions.ProcessModuleLoadException(this' exc);              }
Magic Number,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,OnUpdateClick,The following statement contains a magic number: try              {                  if (Page.IsValid)                  {                      var allTabsChanged = false;                      //TODO: REMOVE IF UNUSED                      //var allowIndexChanged = false;                        //only Portal Administrators can manage the visibility on all Tabs                      var isAdmin = PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName);                      chkAllModules.Enabled = isAdmin;                        //tab administrators can only manage their own tab                      if (!TabPermissionController.CanAdminPage())                      {                          chkAllTabs.Enabled = false;                          chkNewTabs.Enabled = false;                          chkDefault.Enabled = false;                          chkAllowIndex.Enabled = false;                          cboTab.Enabled = false;                      }                      Module.ModuleID = _moduleId;                      Module.ModuleTitle = txtTitle.Text;                      Module.Alignment = cboAlign.SelectedItem.Value;                      Module.Color = txtColor.Text;                      Module.Border = txtBorder.Text;                      Module.IconFile = ctlIcon.Url;                      Module.CacheTime = !String.IsNullOrEmpty(txtCacheDuration.Text)                                              ? Int32.Parse(txtCacheDuration.Text)                                              : 0;                      Module.CacheMethod = cboCacheProvider.SelectedValue;                      Module.TabID = TabId;                      if (Module.AllTabs != chkAllTabs.Checked)                      {                          allTabsChanged = true;                      }                      Module.AllTabs = chkAllTabs.Checked;                        // collect these first as any settings update will clear the cache                      var originalChecked = Settings["hideadminborder"] != null && bool.Parse(Settings["hideadminborder"].ToString());                      var allowIndex = Settings.ContainsKey("AllowIndex") && Convert.ToBoolean(Settings["AllowIndex"]);                      var oldMoniker = ((string)Settings["Moniker"] ?? "").TrimToLength(100);                      var newMoniker = txtMoniker.Text.TrimToLength(100);                      if (!oldMoniker.Equals(txtMoniker.Text))                      {                          var ids = TabModulesController.Instance.GetTabModuleIdsBySetting("Moniker"' newMoniker);                          if (ids != null && ids.Count > 0)                          {                              //Warn user - duplicate moniker value                              Skin.AddModuleMessage(this' Localization.GetString("MonikerExists"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError);                              return;                          }                          ModuleController.Instance.UpdateTabModuleSetting(Module.TabModuleID' "Moniker"' newMoniker);                      }                        if (originalChecked != chkAdminBorder.Checked)                      {                          ModuleController.Instance.UpdateTabModuleSetting(Module.TabModuleID' "hideadminborder"' chkAdminBorder.Checked.ToString());                      }                        //check whether allow index value is changed                      if (allowIndex != chkAllowIndex.Checked)                      {                          ModuleController.Instance.UpdateTabModuleSetting(Module.TabModuleID' "AllowIndex"' chkAllowIndex.Checked.ToString());                      }                        switch (Int32.Parse(cboVisibility.SelectedItem.Value))                      {                          case 0:                              Module.Visibility = VisibilityState.Maximized;                              break;                          case 1:                              Module.Visibility = VisibilityState.Minimized;                              break;                          //case 2:                          default:                              Module.Visibility = VisibilityState.None;                              break;                      }                        Module.IsDeleted = false;                      Module.Header = txtHeader.Text;                      Module.Footer = txtFooter.Text;                        Module.StartDate = startDatePicker.SelectedDate != null                                          ? startDatePicker.SelectedDate.Value                                          : Null.NullDate;                        Module.EndDate = endDatePicker.SelectedDate != null                                          ? endDatePicker.SelectedDate.Value                                          : Null.NullDate;                        Module.ContainerSrc = moduleContainerCombo.SelectedValue;                      Module.ModulePermissions.Clear();                      Module.ModulePermissions.AddRange(dgPermissions.Permissions);                      Module.Terms.Clear();                      Module.Terms.AddRange(termsSelector.Terms);                        if (!Module.IsShared)                      {                          Module.InheritViewPermissions = chkInheritPermissions.Checked;                          Module.IsShareable = isShareableCheckBox.Checked;                          Module.IsShareableViewOnly = isShareableViewOnlyCheckBox.Checked;                      }                        Module.DisplayTitle = chkDisplayTitle.Checked;                      Module.DisplayPrint = chkDisplayPrint.Checked;                      Module.DisplaySyndicate = chkDisplaySyndicate.Checked;                      Module.IsWebSlice = chkWebSlice.Checked;                      Module.WebSliceTitle = txtWebSliceTitle.Text;                        Module.WebSliceExpiryDate = diWebSliceExpiry.SelectedDate != null                                                  ? diWebSliceExpiry.SelectedDate.Value                                                  : Null.NullDate;                        if (!string.IsNullOrEmpty(txtWebSliceTTL.Text))                      {                          Module.WebSliceTTL = Convert.ToInt32(txtWebSliceTTL.Text);                      }                      Module.IsDefaultModule = chkDefault.Checked;                      Module.AllModules = chkAllModules.Checked;                      ModuleController.Instance.UpdateModule(Module);                        //Update Custom Settings                      if (SettingsControl != null)                      {                          try                          {                              SettingsControl.UpdateSettings();                          }                          catch (ThreadAbortException exc)                          {                              Logger.Debug(exc);                                Thread.ResetAbort(); //necessary                          }                          catch (Exception ex)                          {                              Exceptions.LogException(ex);                          }                      }                        //These Module Copy/Move statements must be                       //at the end of the Update as the Controller code assumes all the                       //Updates to the Module have been carried out.                        //Check if the Module is to be Moved to a new Tab                      if (!chkAllTabs.Checked)                      {                          var newTabId = Int32.Parse(cboTab.SelectedValue);                          if (TabId != newTabId)                          {                              //First check if there already is an instance of the module on the target page                              var tmpModule = ModuleController.Instance.GetModule(_moduleId' newTabId' false);                              if (tmpModule == null)                              {                                  //Move module                                  ModuleController.Instance.MoveModule(_moduleId' TabId' newTabId' Globals.glbDefaultPane);                              }                              else                              {                                  //Warn user                                  Skin.AddModuleMessage(this' Localization.GetString("ModuleExists"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError);                                  return;                              }                          }                      }                        //Check if Module is to be Added/Removed from all Tabs                      if (allTabsChanged)                      {                          var listTabs = TabController.GetPortalTabs(PortalSettings.PortalId' Null.NullInteger' false' true);                          if (chkAllTabs.Checked)                          {                              if (!chkNewTabs.Checked)                              {                                  foreach (var destinationTab in listTabs)                                  {                                      var module = ModuleController.Instance.GetModule(_moduleId' destinationTab.TabID' false);                                      if (module != null)                                      {                                          if (module.IsDeleted)                                          {                                              ModuleController.Instance.RestoreModule(module);                                          }                                      }                                      else                                      {                                          if (!PortalSettings.ContentLocalizationEnabled || (Module.CultureCode == destinationTab.CultureCode))                                          {                                              ModuleController.Instance.CopyModule(Module' destinationTab' Module.PaneName' true);                                          }                                      }                                  }                              }                          }                          else                          {                              ModuleController.Instance.DeleteAllModules(_moduleId' TabId' listTabs' true' false' false);                          }                      }                        if (!DoNotRedirectOnUpdate)                      {                          //Navigate back to admin page                          Response.Redirect(ReturnURL' true);                      }                  }              }              catch (Exception exc)              {                  Exceptions.ProcessModuleLoadException(this' exc);              }
Magic Number,DotNetNuke.Modules.Admin.Modules,ModuleSettingsPage,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\Modulesettings.ascx.cs,OnUpdateClick,The following statement contains a magic number: try              {                  if (Page.IsValid)                  {                      var allTabsChanged = false;                      //TODO: REMOVE IF UNUSED                      //var allowIndexChanged = false;                        //only Portal Administrators can manage the visibility on all Tabs                      var isAdmin = PortalSecurity.IsInRole(PortalSettings.AdministratorRoleName);                      chkAllModules.Enabled = isAdmin;                        //tab administrators can only manage their own tab                      if (!TabPermissionController.CanAdminPage())                      {                          chkAllTabs.Enabled = false;                          chkNewTabs.Enabled = false;                          chkDefault.Enabled = false;                          chkAllowIndex.Enabled = false;                          cboTab.Enabled = false;                      }                      Module.ModuleID = _moduleId;                      Module.ModuleTitle = txtTitle.Text;                      Module.Alignment = cboAlign.SelectedItem.Value;                      Module.Color = txtColor.Text;                      Module.Border = txtBorder.Text;                      Module.IconFile = ctlIcon.Url;                      Module.CacheTime = !String.IsNullOrEmpty(txtCacheDuration.Text)                                              ? Int32.Parse(txtCacheDuration.Text)                                              : 0;                      Module.CacheMethod = cboCacheProvider.SelectedValue;                      Module.TabID = TabId;                      if (Module.AllTabs != chkAllTabs.Checked)                      {                          allTabsChanged = true;                      }                      Module.AllTabs = chkAllTabs.Checked;                        // collect these first as any settings update will clear the cache                      var originalChecked = Settings["hideadminborder"] != null && bool.Parse(Settings["hideadminborder"].ToString());                      var allowIndex = Settings.ContainsKey("AllowIndex") && Convert.ToBoolean(Settings["AllowIndex"]);                      var oldMoniker = ((string)Settings["Moniker"] ?? "").TrimToLength(100);                      var newMoniker = txtMoniker.Text.TrimToLength(100);                      if (!oldMoniker.Equals(txtMoniker.Text))                      {                          var ids = TabModulesController.Instance.GetTabModuleIdsBySetting("Moniker"' newMoniker);                          if (ids != null && ids.Count > 0)                          {                              //Warn user - duplicate moniker value                              Skin.AddModuleMessage(this' Localization.GetString("MonikerExists"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError);                              return;                          }                          ModuleController.Instance.UpdateTabModuleSetting(Module.TabModuleID' "Moniker"' newMoniker);                      }                        if (originalChecked != chkAdminBorder.Checked)                      {                          ModuleController.Instance.UpdateTabModuleSetting(Module.TabModuleID' "hideadminborder"' chkAdminBorder.Checked.ToString());                      }                        //check whether allow index value is changed                      if (allowIndex != chkAllowIndex.Checked)                      {                          ModuleController.Instance.UpdateTabModuleSetting(Module.TabModuleID' "AllowIndex"' chkAllowIndex.Checked.ToString());                      }                        switch (Int32.Parse(cboVisibility.SelectedItem.Value))                      {                          case 0:                              Module.Visibility = VisibilityState.Maximized;                              break;                          case 1:                              Module.Visibility = VisibilityState.Minimized;                              break;                          //case 2:                          default:                              Module.Visibility = VisibilityState.None;                              break;                      }                        Module.IsDeleted = false;                      Module.Header = txtHeader.Text;                      Module.Footer = txtFooter.Text;                        Module.StartDate = startDatePicker.SelectedDate != null                                          ? startDatePicker.SelectedDate.Value                                          : Null.NullDate;                        Module.EndDate = endDatePicker.SelectedDate != null                                          ? endDatePicker.SelectedDate.Value                                          : Null.NullDate;                        Module.ContainerSrc = moduleContainerCombo.SelectedValue;                      Module.ModulePermissions.Clear();                      Module.ModulePermissions.AddRange(dgPermissions.Permissions);                      Module.Terms.Clear();                      Module.Terms.AddRange(termsSelector.Terms);                        if (!Module.IsShared)                      {                          Module.InheritViewPermissions = chkInheritPermissions.Checked;                          Module.IsShareable = isShareableCheckBox.Checked;                          Module.IsShareableViewOnly = isShareableViewOnlyCheckBox.Checked;                      }                        Module.DisplayTitle = chkDisplayTitle.Checked;                      Module.DisplayPrint = chkDisplayPrint.Checked;                      Module.DisplaySyndicate = chkDisplaySyndicate.Checked;                      Module.IsWebSlice = chkWebSlice.Checked;                      Module.WebSliceTitle = txtWebSliceTitle.Text;                        Module.WebSliceExpiryDate = diWebSliceExpiry.SelectedDate != null                                                  ? diWebSliceExpiry.SelectedDate.Value                                                  : Null.NullDate;                        if (!string.IsNullOrEmpty(txtWebSliceTTL.Text))                      {                          Module.WebSliceTTL = Convert.ToInt32(txtWebSliceTTL.Text);                      }                      Module.IsDefaultModule = chkDefault.Checked;                      Module.AllModules = chkAllModules.Checked;                      ModuleController.Instance.UpdateModule(Module);                        //Update Custom Settings                      if (SettingsControl != null)                      {                          try                          {                              SettingsControl.UpdateSettings();                          }                          catch (ThreadAbortException exc)                          {                              Logger.Debug(exc);                                Thread.ResetAbort(); //necessary                          }                          catch (Exception ex)                          {                              Exceptions.LogException(ex);                          }                      }                        //These Module Copy/Move statements must be                       //at the end of the Update as the Controller code assumes all the                       //Updates to the Module have been carried out.                        //Check if the Module is to be Moved to a new Tab                      if (!chkAllTabs.Checked)                      {                          var newTabId = Int32.Parse(cboTab.SelectedValue);                          if (TabId != newTabId)                          {                              //First check if there already is an instance of the module on the target page                              var tmpModule = ModuleController.Instance.GetModule(_moduleId' newTabId' false);                              if (tmpModule == null)                              {                                  //Move module                                  ModuleController.Instance.MoveModule(_moduleId' TabId' newTabId' Globals.glbDefaultPane);                              }                              else                              {                                  //Warn user                                  Skin.AddModuleMessage(this' Localization.GetString("ModuleExists"' LocalResourceFile)' ModuleMessage.ModuleMessageType.RedError);                                  return;                              }                          }                      }                        //Check if Module is to be Added/Removed from all Tabs                      if (allTabsChanged)                      {                          var listTabs = TabController.GetPortalTabs(PortalSettings.PortalId' Null.NullInteger' false' true);                          if (chkAllTabs.Checked)                          {                              if (!chkNewTabs.Checked)                              {                                  foreach (var destinationTab in listTabs)                                  {                                      var module = ModuleController.Instance.GetModule(_moduleId' destinationTab.TabID' false);                                      if (module != null)                                      {                                          if (module.IsDeleted)                                          {                                              ModuleController.Instance.RestoreModule(module);                                          }                                      }                                      else                                      {                                          if (!PortalSettings.ContentLocalizationEnabled || (Module.CultureCode == destinationTab.CultureCode))                                          {                                              ModuleController.Instance.CopyModule(Module' destinationTab' Module.PaneName' true);                                          }                                      }                                  }                              }                          }                          else                          {                              ModuleController.Instance.DeleteAllModules(_moduleId' TabId' listTabs' true' false' false);                          }                      }                        if (!DoNotRedirectOnUpdate)                      {                          //Navigate back to admin page                          Response.Redirect(ReturnURL' true);                      }                  }              }              catch (Exception exc)              {                  Exceptions.ProcessModuleLoadException(this' exc);              }
Magic Number,DotNetNuke.Modules.Admin.Sales,Purchase,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\Purchase.ascx.cs,ConvertCurrency,The following statement contains a magic number: try              {                  var objRequest = Globals.GetExternalRequest("http://www.xe.com/ucc/convert.cgi");                  objRequest.Method = "POST";                  objRequest.ContentLength = strPost.Length;                  objRequest.ContentType = "application/x-www-form-urlencoded";                    using (var objStream = new StreamWriter(objRequest.GetRequestStream()))                  {                      objStream.Write(strPost);                      objStream.Close();                  }                      var objResponse = (HttpWebResponse) objRequest.GetResponse();                  using (var sr = new StreamReader(objResponse.GetResponseStream()))                  {                      string strResponse = sr.ReadToEnd();                      int intPos1 = strResponse.IndexOf(ToCurrency + "</B>");                      int intPos2 = strResponse.LastIndexOf("<B>"' intPos1);                        retValue = Convert.ToDouble(strResponse.Substring(intPos2 + 3' (intPos1 - intPos2) - 4));                  }              }              catch (Exception exc) //Module failed to load              {                  Exceptions.ProcessModuleLoadException(this' exc);              }
Magic Number,DotNetNuke.Modules.Admin.Sales,Purchase,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Sales\Purchase.ascx.cs,ConvertCurrency,The following statement contains a magic number: try              {                  var objRequest = Globals.GetExternalRequest("http://www.xe.com/ucc/convert.cgi");                  objRequest.Method = "POST";                  objRequest.ContentLength = strPost.Length;                  objRequest.ContentType = "application/x-www-form-urlencoded";                    using (var objStream = new StreamWriter(objRequest.GetRequestStream()))                  {                      objStream.Write(strPost);                      objStream.Close();                  }                      var objResponse = (HttpWebResponse) objRequest.GetResponse();                  using (var sr = new StreamReader(objResponse.GetResponseStream()))                  {                      string strResponse = sr.ReadToEnd();                      int intPos1 = strResponse.IndexOf(ToCurrency + "</B>");                      int intPos2 = strResponse.LastIndexOf("<B>"' intPos1);                        retValue = Convert.ToDouble(strResponse.Substring(intPos2 + 3' (intPos1 - intPos2) - 4));                  }              }              catch (Exception exc) //Module failed to load              {                  Exceptions.ProcessModuleLoadException(this' exc);              }
Magic Number,DotNetNuke.Modules.Admin.Security,PasswordReset,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Security\PasswordReset.ascx.cs,cmdChangePassword_Click,The following statement contains a magic number: if (UserController.ChangePasswordByToken(PortalSettings.PortalId' username' newPassword' answer' ResetToken' out errorMessage) == false)              {                  resetMessages.Visible = true;                  var failed = errorMessage;                  LogFailure(failed);                  lblHelp.Text = failed;              }              else              {                  //check user has a valid profile                  var user = UserController.GetUserByName(PortalSettings.PortalId' username);                  var validStatus = UserController.ValidateUser(user' PortalSettings.PortalId' false);                  if (validStatus == UserValidStatus.UPDATEPROFILE)                  {                      LogSuccess();                      ViewState.Add("PageNo"' 3);                      Response.Redirect(Globals.NavigateURL(PortalSettings.ActiveTab.TabID' "Login"));                  }                  else                  {                      //Log user in to site                      LogSuccess();                      var loginStatus = UserLoginStatus.LOGIN_FAILURE;                      UserController.UserLogin(PortalSettings.PortalId' username' txtPassword.Text' ""' ""' ""' ref loginStatus' false);                      RedirectAfterLogin();                  }                          }
Magic Number,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,BindGrid,The following statement contains a magic number: if (RoleId != Null.NullInteger)              {                  cmdAdd.Text = Localization.GetString("AddUser.Text"' LocalResourceFile);                  grdUserRoles.DataKeyField = "UserId";                  grdUserRoles.Columns[2].Visible = false;              }
Magic Number,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,GetDates,The following statement contains a magic number: if (objUserRole != null)              {                  if (Null.IsNull(objUserRole.EffectiveDate) == false)                  {                      effectiveDate = objUserRole.EffectiveDate;                  }                  if (Null.IsNull(objUserRole.ExpiryDate) == false)                  {                      expiryDate = objUserRole.ExpiryDate;                  }              }              else //new role assignment              {                  RoleInfo objRole = RoleController.Instance.GetRole(PortalId' r => r.RoleID == RoleId);                    if (objRole.BillingPeriod > 0)                  {                      switch (objRole.BillingFrequency)                      {                          case "D":                              expiryDate = DateTime.Now.AddDays(objRole.BillingPeriod);                              break;                          case "W":                              expiryDate = DateTime.Now.AddDays(objRole.BillingPeriod*7);                              break;                          case "M":                              expiryDate = DateTime.Now.AddMonths(objRole.BillingPeriod);                              break;                          case "Y":                              expiryDate = DateTime.Now.AddYears(objRole.BillingPeriod);                              break;                      }                  }              }
Magic Number,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,grdUserRoles_ItemCreated,The following statement contains a magic number: try              {                  DataGridItem item = e.Item;                    var cmdDeleteUserRole = e.Item.FindControl("cmdDeleteUserRole") as ImageButton;                  var role = e.Item.DataItem as UserRoleInfo;                    if (cmdDeleteUserRole != null)                  {                      if (RoleId == Null.NullInteger)                      {                          ClientAPI.AddButtonConfirm(cmdDeleteUserRole' String.Format(Localization.GetString("DeleteRoleFromUser.Text"' LocalResourceFile)' role.FullName' role.RoleName));                      }                      else                      {                          ClientAPI.AddButtonConfirm(cmdDeleteUserRole' String.Format(Localization.GetString("DeleteUsersFromRole.Text"' LocalResourceFile)' role.FullName' role.RoleName));                      }                      cmdDeleteUserRole.Attributes.Add("roleId"' role.RoleID.ToString());                      cmdDeleteUserRole.Attributes.Add("userId"' role.UserID.ToString());                  }                    item.Cells[5].Visible = ((Role.SecurityMode == SecurityMode.SocialGroup) || (Role.SecurityMode == SecurityMode.Both));                }              catch (Exception exc) //Module failed to load              {                  Exceptions.ProcessModuleLoadException(this' exc);              }
Magic Number,DotNetNuke.UI.Skins.Controls,BreadCrumb,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\BreadCrumb.ascx.cs,ResolveSeparatorPaths,The following statement contains a magic number: if (urlMatches.Count > 0)              {                  foreach (Match match in urlMatches)                  {                      var url = match.Groups[3].Value;                      var changed = false;                        if (url.StartsWith("/"))                      {                          if (!string.IsNullOrEmpty(Globals.ApplicationPath))                          {                              url = string.Format("{0}{1}"' Globals.ApplicationPath' url);                              changed = true;                          }                      }                      else if (url.StartsWith("~/"))                      {                          url = Globals.ResolveUrl(url);                          changed = true;                      }                      else                      {                          url = string.Format("{0}{1}"' PortalSettings.ActiveTab.SkinPath' url);                          changed = true;                      }                        if (changed)                      {                          var newMatch = string.Format("{0}={1}{2}{3}"'                                                           match.Groups[1].Value'                                                           match.Groups[2].Value'                                                           url'                                                          match.Groups[4].Value);                            _separator = _separator.Replace(match.Value' newMatch);                      }                  }                }
Magic Number,DotNetNuke.UI.Skins.Controls,BreadCrumb,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\BreadCrumb.ascx.cs,ResolveSeparatorPaths,The following statement contains a magic number: if (urlMatches.Count > 0)              {                  foreach (Match match in urlMatches)                  {                      var url = match.Groups[3].Value;                      var changed = false;                        if (url.StartsWith("/"))                      {                          if (!string.IsNullOrEmpty(Globals.ApplicationPath))                          {                              url = string.Format("{0}{1}"' Globals.ApplicationPath' url);                              changed = true;                          }                      }                      else if (url.StartsWith("~/"))                      {                          url = Globals.ResolveUrl(url);                          changed = true;                      }                      else                      {                          url = string.Format("{0}{1}"' PortalSettings.ActiveTab.SkinPath' url);                          changed = true;                      }                        if (changed)                      {                          var newMatch = string.Format("{0}={1}{2}{3}"'                                                           match.Groups[1].Value'                                                           match.Groups[2].Value'                                                           url'                                                          match.Groups[4].Value);                            _separator = _separator.Replace(match.Value' newMatch);                      }                  }                }
Magic Number,DotNetNuke.UI.Skins.Controls,BreadCrumb,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\BreadCrumb.ascx.cs,ResolveSeparatorPaths,The following statement contains a magic number: if (urlMatches.Count > 0)              {                  foreach (Match match in urlMatches)                  {                      var url = match.Groups[3].Value;                      var changed = false;                        if (url.StartsWith("/"))                      {                          if (!string.IsNullOrEmpty(Globals.ApplicationPath))                          {                              url = string.Format("{0}{1}"' Globals.ApplicationPath' url);                              changed = true;                          }                      }                      else if (url.StartsWith("~/"))                      {                          url = Globals.ResolveUrl(url);                          changed = true;                      }                      else                      {                          url = string.Format("{0}{1}"' PortalSettings.ActiveTab.SkinPath' url);                          changed = true;                      }                        if (changed)                      {                          var newMatch = string.Format("{0}={1}{2}{3}"'                                                           match.Groups[1].Value'                                                           match.Groups[2].Value'                                                           url'                                                          match.Groups[4].Value);                            _separator = _separator.Replace(match.Value' newMatch);                      }                  }                }
Magic Number,DotNetNuke.UI.Skins.Controls,DnnLink,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\DnnLink.ascx.cs,OnLoad,The following statement contains a magic number: if (hostName.Length > 0)              {                  //convert first letter of hostname to int pos in alphabet                  charPos = char.ToUpper(hostName[0]) - 64;              }
Magic Number,DotNetNuke.UI.Skins.Controls,DnnLink,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\DnnLink.ascx.cs,OnLoad,The following statement contains a magic number: if (charPos <= 5)              {                  linkText = "Open Source ASP.NET CMS by DNN";                   utmTerm = "&utm_term=open+source+asp.net+by+dnn";              }
Magic Number,DotNetNuke.UI.Skins.Controls,DnnLink,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\DnnLink.ascx.cs,OnLoad,The following statement contains a magic number: if (charPos > 5 && charPos <= 10)              {                  linkText = "DNN - .NET Open Source CMS";                   utmTerm = "&utm_term=dnn+.net+open+source+cms";              }
Magic Number,DotNetNuke.UI.Skins.Controls,DnnLink,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\DnnLink.ascx.cs,OnLoad,The following statement contains a magic number: if (charPos > 5 && charPos <= 10)              {                  linkText = "DNN - .NET Open Source CMS";                   utmTerm = "&utm_term=dnn+.net+open+source+cms";              }
Magic Number,DotNetNuke.UI.Skins.Controls,DnnLink,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\DnnLink.ascx.cs,OnLoad,The following statement contains a magic number: if (charPos > 10 && charPos <= 15)              {                  linkText = "Web Content Management by DNN";                  utmTerm = "&utm_term=web+content+management+by+dnn";              }
Magic Number,DotNetNuke.UI.Skins.Controls,DnnLink,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\DnnLink.ascx.cs,OnLoad,The following statement contains a magic number: if (charPos > 10 && charPos <= 15)              {                  linkText = "Web Content Management by DNN";                  utmTerm = "&utm_term=web+content+management+by+dnn";              }
Magic Number,DotNetNuke.UI.Skins.Controls,DnnLink,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\DnnLink.ascx.cs,OnLoad,The following statement contains a magic number: if (charPos > 15 && charPos <= 20)              {                  linkText = "DNN .NET CMS";                   utmTerm = "&utm_term=dnn+.net+cms";              }
Magic Number,DotNetNuke.UI.Skins.Controls,DnnLink,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\DnnLink.ascx.cs,OnLoad,The following statement contains a magic number: if (charPos > 15 && charPos <= 20)              {                  linkText = "DNN .NET CMS";                   utmTerm = "&utm_term=dnn+.net+cms";              }
Magic Number,DotNetNuke.UI.Skins.Controls,DnnLink,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\DnnLink.ascx.cs,OnLoad,The following statement contains a magic number: if (charPos > 20 && charPos <= 25)              {                  linkText = "WCM by DNN";                   utmTerm = "&utm_term=wcm+by+dnn";              }
Magic Number,DotNetNuke.UI.Skins.Controls,DnnLink,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\DnnLink.ascx.cs,OnLoad,The following statement contains a magic number: if (charPos > 20 && charPos <= 25)              {                  linkText = "WCM by DNN";                   utmTerm = "&utm_term=wcm+by+dnn";              }
Magic Number,DotNetNuke.UI.Skins.Controls,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Login.ascx.cs,OnLoad,The following statement contains a magic number: if (Visible)  	        {  		        try  		        {  			        if (LegacyMode)  			        {  				        loginLink.Visible = true;  				        loginGroup.Visible = false;  			        }  			        else  			        {  				        loginLink.Visible = false;  				        loginGroup.Visible = true;  			        }    			        if (!String.IsNullOrEmpty(CssClass))  			        {  				        loginLink.CssClass = CssClass;  				        enhancedLoginLink.CssClass = CssClass;  			        }    			        if (Request.IsAuthenticated)  			        {  				        if (!String.IsNullOrEmpty(LogoffText))  				        {  					        if (LogoffText.IndexOf("src=") != -1)  					        {  						        LogoffText = LogoffText.Replace("src=\""' "src=\"" + PortalSettings.ActiveTab.SkinPath);  					        }  					        loginLink.Text = LogoffText;  					        enhancedLoginLink.Text = LogoffText;  				        }  				        else  				        {  					        loginLink.Text = Localization.GetString("Logout"' Localization.GetResourceFile(this' MyFileName));  					        enhancedLoginLink.Text = loginLink.Text;  					        loginLink.ToolTip = loginLink.Text;  					        enhancedLoginLink.ToolTip = loginLink.Text;  				        }  				        loginLink.NavigateUrl = Globals.NavigateURL(PortalSettings.ActiveTab.TabID' "Logoff");  				        enhancedLoginLink.NavigateUrl = loginLink.NavigateUrl;  			        }  			        else  			        {  				        if (!String.IsNullOrEmpty(Text))  				        {  					        if (Text.IndexOf("src=") != -1)  					        {  						        Text = Text.Replace("src=\""' "src=\"" + PortalSettings.ActiveTab.SkinPath);  					        }  					        loginLink.Text = Text;  					        enhancedLoginLink.Text = Text;  				        }  				        else  				        {  					        loginLink.Text = Localization.GetString("Login"' Localization.GetResourceFile(this' MyFileName));  					        enhancedLoginLink.Text = loginLink.Text;  					        loginLink.ToolTip = loginLink.Text;  					        enhancedLoginLink.ToolTip = loginLink.Text;  				        }    				        string returnUrl = HttpContext.Current.Request.RawUrl;  				        if (returnUrl.IndexOf("?returnurl=") != -1)  				        {  					        returnUrl = returnUrl.Substring(0' returnUrl.IndexOf("?returnurl="));  				        }  				        returnUrl = HttpUtility.UrlEncode(returnUrl);    				        loginLink.NavigateUrl = Globals.LoginURL(returnUrl' (Request.QueryString["override"] != null));  				        enhancedLoginLink.NavigateUrl = loginLink.NavigateUrl;                            //avoid issues caused by multiple clicks of login link                          var oneclick = "this.disabled=true;";  			            if (Request.UserAgent != null && Request.UserAgent.Contains("MSIE 8.0")==false)  			            {                              loginLink.Attributes.Add("onclick"' oneclick);                              enhancedLoginLink.Attributes.Add("onclick"' oneclick);  			            }                            				        if (PortalSettings.EnablePopUps && PortalSettings.LoginTabId == Null.NullInteger && !HasSocialAuthenticationEnabled())  				        {  					        //To avoid duplicated encodes of URL                              var clickEvent = "return " + UrlUtils.PopUpUrl(HttpUtility.UrlDecode(loginLink.NavigateUrl)' this' PortalSettings' true' false' 300' 650);  					        loginLink.Attributes.Add("onclick"' clickEvent);  					        enhancedLoginLink.Attributes.Add("onclick"' clickEvent);  				        }  			        }  		        }  		        catch (Exception exc)  		        {  			        Exceptions.ProcessModuleLoadException(this' exc);  		        }  	        }
Magic Number,DotNetNuke.UI.Skins.Controls,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Login.ascx.cs,OnLoad,The following statement contains a magic number: if (Visible)  	        {  		        try  		        {  			        if (LegacyMode)  			        {  				        loginLink.Visible = true;  				        loginGroup.Visible = false;  			        }  			        else  			        {  				        loginLink.Visible = false;  				        loginGroup.Visible = true;  			        }    			        if (!String.IsNullOrEmpty(CssClass))  			        {  				        loginLink.CssClass = CssClass;  				        enhancedLoginLink.CssClass = CssClass;  			        }    			        if (Request.IsAuthenticated)  			        {  				        if (!String.IsNullOrEmpty(LogoffText))  				        {  					        if (LogoffText.IndexOf("src=") != -1)  					        {  						        LogoffText = LogoffText.Replace("src=\""' "src=\"" + PortalSettings.ActiveTab.SkinPath);  					        }  					        loginLink.Text = LogoffText;  					        enhancedLoginLink.Text = LogoffText;  				        }  				        else  				        {  					        loginLink.Text = Localization.GetString("Logout"' Localization.GetResourceFile(this' MyFileName));  					        enhancedLoginLink.Text = loginLink.Text;  					        loginLink.ToolTip = loginLink.Text;  					        enhancedLoginLink.ToolTip = loginLink.Text;  				        }  				        loginLink.NavigateUrl = Globals.NavigateURL(PortalSettings.ActiveTab.TabID' "Logoff");  				        enhancedLoginLink.NavigateUrl = loginLink.NavigateUrl;  			        }  			        else  			        {  				        if (!String.IsNullOrEmpty(Text))  				        {  					        if (Text.IndexOf("src=") != -1)  					        {  						        Text = Text.Replace("src=\""' "src=\"" + PortalSettings.ActiveTab.SkinPath);  					        }  					        loginLink.Text = Text;  					        enhancedLoginLink.Text = Text;  				        }  				        else  				        {  					        loginLink.Text = Localization.GetString("Login"' Localization.GetResourceFile(this' MyFileName));  					        enhancedLoginLink.Text = loginLink.Text;  					        loginLink.ToolTip = loginLink.Text;  					        enhancedLoginLink.ToolTip = loginLink.Text;  				        }    				        string returnUrl = HttpContext.Current.Request.RawUrl;  				        if (returnUrl.IndexOf("?returnurl=") != -1)  				        {  					        returnUrl = returnUrl.Substring(0' returnUrl.IndexOf("?returnurl="));  				        }  				        returnUrl = HttpUtility.UrlEncode(returnUrl);    				        loginLink.NavigateUrl = Globals.LoginURL(returnUrl' (Request.QueryString["override"] != null));  				        enhancedLoginLink.NavigateUrl = loginLink.NavigateUrl;                            //avoid issues caused by multiple clicks of login link                          var oneclick = "this.disabled=true;";  			            if (Request.UserAgent != null && Request.UserAgent.Contains("MSIE 8.0")==false)  			            {                              loginLink.Attributes.Add("onclick"' oneclick);                              enhancedLoginLink.Attributes.Add("onclick"' oneclick);  			            }                            				        if (PortalSettings.EnablePopUps && PortalSettings.LoginTabId == Null.NullInteger && !HasSocialAuthenticationEnabled())  				        {  					        //To avoid duplicated encodes of URL                              var clickEvent = "return " + UrlUtils.PopUpUrl(HttpUtility.UrlDecode(loginLink.NavigateUrl)' this' PortalSettings' true' false' 300' 650);  					        loginLink.Attributes.Add("onclick"' clickEvent);  					        enhancedLoginLink.Attributes.Add("onclick"' clickEvent);  				        }  			        }  		        }  		        catch (Exception exc)  		        {  			        Exceptions.ProcessModuleLoadException(this' exc);  		        }  	        }
Magic Number,DotNetNuke.UI.Skins.Controls,Search,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Search.ascx.cs,OnLoad,The following statement contains a magic number: if (MinCharRequired == 0) MinCharRequired = 2;
Magic Number,DotNetNuke.UI.Skins.Controls,Search,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Search.ascx.cs,OnLoad,The following statement contains a magic number: if (AutoSearchDelayInMilliSecond == 0) AutoSearchDelayInMilliSecond = 400;
Magic Number,DotNetNuke.UI.Skins.Controls,Toast,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Toast.ascx.cs,GetMessageTab,The following statement contains a magic number: DataCache.SetCache(cacheKey' messageTabId' TimeSpan.FromMinutes(20));
Magic Number,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,OnLoad,The following statement contains a magic number: try              {                  if (LegacyMode)                      registerGroup.Visible = false;                  else                      registerLink.Visible = false;                    if (!String.IsNullOrEmpty(CssClass))                  {                      registerLink.CssClass = CssClass;                      enhancedRegisterLink.CssClass = CssClass;                  }                    if (Request.IsAuthenticated == false)                  {                      messageGroup.Visible = false;                      notificationGroup.Visible = false;                      avatarGroup.Visible = false;                        if (PortalSettings.UserRegistration != (int) Globals.PortalRegistrationType.NoRegistration)                      {                          if (!String.IsNullOrEmpty(Text))                          {                              if (Text.IndexOf("src=") != -1)                              {                                  Text = Text.Replace("src=\""' "src=\"" + PortalSettings.ActiveTab.SkinPath);                              }                              registerLink.Text = Text;                              enhancedRegisterLink.Text = Text;                          }                          else                          {                              registerLink.Text = Localization.GetString("Register"' Localization.GetResourceFile(this' MyFileName));                              enhancedRegisterLink.Text = registerLink.Text;                              registerLink.ToolTip = registerLink.Text;                              enhancedRegisterLink.ToolTip = registerLink.Text;                          }                          if (PortalSettings.Users < PortalSettings.UserQuota || PortalSettings.UserQuota == 0)                          {                                                          if (LegacyMode) registerLink.Visible = true;                              else  enhancedRegisterLink.Visible = true;                          }                          else                          {                              registerGroup.Visible = false;                              registerLink.Visible = false;                          }                            registerLink.NavigateUrl = !String.IsNullOrEmpty(URL)                                               ? URL                                               : Globals.RegisterURL(HttpUtility.UrlEncode(Globals.NavigateURL())' Null.NullString);                          enhancedRegisterLink.NavigateUrl = registerLink.NavigateUrl;                            if (PortalSettings.EnablePopUps && PortalSettings.RegisterTabId == Null.NullInteger                              && !HasSocialAuthenticationEnabled())                          {                              var clickEvent = "return " + UrlUtils.PopUpUrl(registerLink.NavigateUrl' this' PortalSettings' true' false' 600' 950);                              registerLink.Attributes.Add("onclick"' clickEvent);                              enhancedRegisterLink.Attributes.Add("onclick"' clickEvent);                          }                        }                      else                      {                          registerGroup.Visible = false;                          registerLink.Visible = false;                      }                  }                  else                  {                      var userInfo = UserController.Instance.GetCurrentUserInfo();                      if (userInfo.UserID != -1)                      {                          registerLink.Text = userInfo.DisplayName;                                                                          registerLink.NavigateUrl = Globals.UserProfileURL(userInfo.UserID);                                                  registerLink.ToolTip = Localization.GetString("VisitMyProfile"' Localization.GetResourceFile(this' MyFileName));                            enhancedRegisterLink.Text = registerLink.Text;                          enhancedRegisterLink.NavigateUrl = registerLink.NavigateUrl;                          enhancedRegisterLink.ToolTip = registerLink.ToolTip;                            if (ShowUnreadMessages)                          {                              var unreadMessages = InternalMessagingController.Instance.CountUnreadMessages(userInfo.UserID' PortalController.GetEffectivePortalId(userInfo.PortalID));                              var unreadAlerts = NotificationsController.Instance.CountNotifications(userInfo.UserID' PortalController.GetEffectivePortalId(userInfo.PortalID));                                messageLink.Text = unreadMessages > 0 ? string.Format(Localization.GetString("Messages"' Localization.GetResourceFile(this' MyFileName))' unreadMessages) : Localization.GetString("NoMessages"' Localization.GetResourceFile(this' MyFileName));                              notificationLink.Text = unreadAlerts > 0 ? string.Format(Localization.GetString("Notifications"' Localization.GetResourceFile(this' MyFileName))' unreadAlerts) : Localization.GetString("NoNotifications"' Localization.GetResourceFile(this' MyFileName));                                messageLink.NavigateUrl = Globals.NavigateURL(GetMessageTab()' ""' string.Format("userId={0}"' userInfo.UserID));                              notificationLink.NavigateUrl = Globals.NavigateURL(GetMessageTab()' ""' string.Format("userId={0}"' userInfo.UserID)'"view=notifications"'"action=notifications");                              notificationLink.ToolTip = Localization.GetString("CheckNotifications"' Localization.GetResourceFile(this' MyFileName));                              messageLink.ToolTip = Localization.GetString("CheckMessages"' Localization.GetResourceFile(this' MyFileName));                              messageGroup.Visible = true;                              notificationGroup.Visible = true;                                if (LegacyMode && unreadMessages > 0)                              {                                  registerLink.Text = registerLink.Text + string.Format(Localization.GetString("NewMessages"' Localization.GetResourceFile(this' MyFileName))' unreadMessages);                              }                          }                          else                          {                              messageGroup.Visible = false;                              notificationGroup.Visible = false;                          }                            if (ShowAvatar)                          {                              avatar.ImageUrl = GetAvatarUrl(userInfo);                              avatar.NavigateUrl = enhancedRegisterLink.NavigateUrl;                              avatar.ToolTip = avatar.Text = Localization.GetString("ProfileAvatar"' Localization.GetResourceFile(this' MyFileName));                              avatarGroup.Visible = true;                                                      }                          else                          {                              avatarGroup.Visible = false;                          }                      }                  }              }              catch (Exception exc)              {                  Exceptions.ProcessModuleLoadException(this' exc);              }
Magic Number,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,OnLoad,The following statement contains a magic number: try              {                  if (LegacyMode)                      registerGroup.Visible = false;                  else                      registerLink.Visible = false;                    if (!String.IsNullOrEmpty(CssClass))                  {                      registerLink.CssClass = CssClass;                      enhancedRegisterLink.CssClass = CssClass;                  }                    if (Request.IsAuthenticated == false)                  {                      messageGroup.Visible = false;                      notificationGroup.Visible = false;                      avatarGroup.Visible = false;                        if (PortalSettings.UserRegistration != (int) Globals.PortalRegistrationType.NoRegistration)                      {                          if (!String.IsNullOrEmpty(Text))                          {                              if (Text.IndexOf("src=") != -1)                              {                                  Text = Text.Replace("src=\""' "src=\"" + PortalSettings.ActiveTab.SkinPath);                              }                              registerLink.Text = Text;                              enhancedRegisterLink.Text = Text;                          }                          else                          {                              registerLink.Text = Localization.GetString("Register"' Localization.GetResourceFile(this' MyFileName));                              enhancedRegisterLink.Text = registerLink.Text;                              registerLink.ToolTip = registerLink.Text;                              enhancedRegisterLink.ToolTip = registerLink.Text;                          }                          if (PortalSettings.Users < PortalSettings.UserQuota || PortalSettings.UserQuota == 0)                          {                                                          if (LegacyMode) registerLink.Visible = true;                              else  enhancedRegisterLink.Visible = true;                          }                          else                          {                              registerGroup.Visible = false;                              registerLink.Visible = false;                          }                            registerLink.NavigateUrl = !String.IsNullOrEmpty(URL)                                               ? URL                                               : Globals.RegisterURL(HttpUtility.UrlEncode(Globals.NavigateURL())' Null.NullString);                          enhancedRegisterLink.NavigateUrl = registerLink.NavigateUrl;                            if (PortalSettings.EnablePopUps && PortalSettings.RegisterTabId == Null.NullInteger                              && !HasSocialAuthenticationEnabled())                          {                              var clickEvent = "return " + UrlUtils.PopUpUrl(registerLink.NavigateUrl' this' PortalSettings' true' false' 600' 950);                              registerLink.Attributes.Add("onclick"' clickEvent);                              enhancedRegisterLink.Attributes.Add("onclick"' clickEvent);                          }                        }                      else                      {                          registerGroup.Visible = false;                          registerLink.Visible = false;                      }                  }                  else                  {                      var userInfo = UserController.Instance.GetCurrentUserInfo();                      if (userInfo.UserID != -1)                      {                          registerLink.Text = userInfo.DisplayName;                                                                          registerLink.NavigateUrl = Globals.UserProfileURL(userInfo.UserID);                                                  registerLink.ToolTip = Localization.GetString("VisitMyProfile"' Localization.GetResourceFile(this' MyFileName));                            enhancedRegisterLink.Text = registerLink.Text;                          enhancedRegisterLink.NavigateUrl = registerLink.NavigateUrl;                          enhancedRegisterLink.ToolTip = registerLink.ToolTip;                            if (ShowUnreadMessages)                          {                              var unreadMessages = InternalMessagingController.Instance.CountUnreadMessages(userInfo.UserID' PortalController.GetEffectivePortalId(userInfo.PortalID));                              var unreadAlerts = NotificationsController.Instance.CountNotifications(userInfo.UserID' PortalController.GetEffectivePortalId(userInfo.PortalID));                                messageLink.Text = unreadMessages > 0 ? string.Format(Localization.GetString("Messages"' Localization.GetResourceFile(this' MyFileName))' unreadMessages) : Localization.GetString("NoMessages"' Localization.GetResourceFile(this' MyFileName));                              notificationLink.Text = unreadAlerts > 0 ? string.Format(Localization.GetString("Notifications"' Localization.GetResourceFile(this' MyFileName))' unreadAlerts) : Localization.GetString("NoNotifications"' Localization.GetResourceFile(this' MyFileName));                                messageLink.NavigateUrl = Globals.NavigateURL(GetMessageTab()' ""' string.Format("userId={0}"' userInfo.UserID));                              notificationLink.NavigateUrl = Globals.NavigateURL(GetMessageTab()' ""' string.Format("userId={0}"' userInfo.UserID)'"view=notifications"'"action=notifications");                              notificationLink.ToolTip = Localization.GetString("CheckNotifications"' Localization.GetResourceFile(this' MyFileName));                              messageLink.ToolTip = Localization.GetString("CheckMessages"' Localization.GetResourceFile(this' MyFileName));                              messageGroup.Visible = true;                              notificationGroup.Visible = true;                                if (LegacyMode && unreadMessages > 0)                              {                                  registerLink.Text = registerLink.Text + string.Format(Localization.GetString("NewMessages"' Localization.GetResourceFile(this' MyFileName))' unreadMessages);                              }                          }                          else                          {                              messageGroup.Visible = false;                              notificationGroup.Visible = false;                          }                            if (ShowAvatar)                          {                              avatar.ImageUrl = GetAvatarUrl(userInfo);                              avatar.NavigateUrl = enhancedRegisterLink.NavigateUrl;                              avatar.ToolTip = avatar.Text = Localization.GetString("ProfileAvatar"' Localization.GetResourceFile(this' MyFileName));                              avatarGroup.Visible = true;                                                      }                          else                          {                              avatarGroup.Visible = false;                          }                      }                  }              }              catch (Exception exc)              {                  Exceptions.ProcessModuleLoadException(this' exc);              }
Magic Number,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,GetAvatarUrl,The following statement contains a magic number: return UserController.Instance.GetUserProfilePictureUrl(userInfo.UserID' 32' 32);
Magic Number,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,GetAvatarUrl,The following statement contains a magic number: return UserController.Instance.GetUserProfilePictureUrl(userInfo.UserID' 32' 32);
Magic Number,DotNetNuke.UI.Skins.Controls,User,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\User.ascx.cs,GetMessageTab,The following statement contains a magic number: DataCache.SetCache(cacheKey' messageTabId' TimeSpan.FromMinutes(20));
Magic Number,DotNetNuke.UI.Skins.Controls,UserAndLogin,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\UserAndLogin.ascx.cs,GetMessageTab,The following statement contains a magic number: DataCache.SetCache(cacheKey' messageTabId' TimeSpan.FromMinutes(20));
Magic Number,DotNetNuke.Modules.Admin.Users,EditUser,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\EditUser.ascx.cs,cmdUpdate_Click,The following statement contains a magic number: if (userForm.IsValid && (User != null))              {                  if (User.UserID == PortalSettings.AdministratorId)                  {                      //Clear the Portal Cache                      DataCache.ClearPortalCache(UserPortalID' true);                  }                  try                  {                      //Update DisplayName to conform to Format                      UpdateDisplayName();                        //DNN-5874 Check if unique display name is required                      if (PortalSettings.Registration.RequireUniqueDisplayName)                      {                          var usersWithSameDisplayName = (List<UserInfo>)MembershipProvider.Instance().GetUsersBasicSearch(PortalId' 0' 2' "DisplayName"' true' "DisplayName"' User.DisplayName);                          if (usersWithSameDisplayName.Any(user => user.UserID != User.UserID))                          {                              throw new Exception("Display Name must be unique");                          }                      }                        UserController.UpdateUser(UserPortalID' User);                        // make sure username matches possibly changed email address                      if (PortalSettings.Registration.UseEmailAsUserName)                      {                          if (User.Username.ToLower() != User.Email.ToLower())                          {                              UserController.ChangeUsername(User.UserID' User.Email);                                //after username changed' should redirect to login page to let user authenticate again.                              var loginUrl = Globals.LoginURL(HttpUtility.UrlEncode(Request.RawUrl)' false);                              var spliter = loginUrl.Contains("?") ? "&" : "?";                              loginUrl = $"{loginUrl}{spliter}username={User.Email}&usernameChanged=true";                              Response.Redirect(loginUrl' true);                          }                      }                        Response.Redirect(Request.RawUrl);                  }                  catch (Exception exc)                  {                      Logger.Error(exc);                      if (exc.Message == "Display Name must be unique")                      {                          AddModuleMessage("DisplayNameNotUnique"' ModuleMessage.ModuleMessageType.RedError' true);                      }                      else                      {                          AddModuleMessage("UserUpdatedError"' ModuleMessage.ModuleMessageType.RedError' true);                      }                  }              }
Magic Number,DotNetNuke.Modules.Admin.Users,ManageUsers,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ManageUsers.ascx.cs,OnLoad,The following statement contains a magic number: try              {                  //Add an Action Event Handler to the Skin                  AddActionHandler(ModuleAction_Click);                    //Bind the User information to the controls                  BindData();                    loginLink.NavigateUrl = Globals.LoginURL(RedirectURL' (Request.QueryString["override"] != null));                    if (PortalSettings.EnablePopUps)                  {                      loginLink.Attributes.Add("onclick"' "return " + UrlUtils.PopUpUrl(loginLink.NavigateUrl' this' PortalSettings' true' false' 300' 650));                  }              }              catch (Exception exc) //Module failed to load              {                  Exceptions.ProcessModuleLoadException(this' exc);              }
Magic Number,DotNetNuke.Modules.Admin.Users,ManageUsers,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ManageUsers.ascx.cs,OnLoad,The following statement contains a magic number: try              {                  //Add an Action Event Handler to the Skin                  AddActionHandler(ModuleAction_Click);                    //Bind the User information to the controls                  BindData();                    loginLink.NavigateUrl = Globals.LoginURL(RedirectURL' (Request.QueryString["override"] != null));                    if (PortalSettings.EnablePopUps)                  {                      loginLink.Attributes.Add("onclick"' "return " + UrlUtils.PopUpUrl(loginLink.NavigateUrl' this' PortalSettings' true' false' 300' 650));                  }              }              catch (Exception exc) //Module failed to load              {                  Exceptions.ProcessModuleLoadException(this' exc);              }
Magic Number,DotNetNuke.Modules.Admin.Users,Membership,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Membership.ascx.cs,DataBind,The following statement contains a magic number: lastLockoutDate.Value = UserMembership.LastLockoutDate.Year > 2000                                           ? (object) UserMembership.LastLockoutDate                                           : LocalizeString("Never");
Magic Number,DotNetNuke.Modules.Admin.Users,Membership,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Membership.ascx.cs,DataBind,The following statement contains a magic number: if (userFolder.Visible)              {                  userFolder.Value = FolderManager.Instance.GetUserFolder(User).FolderPath.Substring(6);              }
Magic Number,DotNetNuke.Modules.Admin.Users,ProfileDefinitions,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs,SaveViewState,The following statement contains a magic number: var allStates = new object[2];
Magic Number,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,AddPasswordConfirmField,The following statement contains a magic number: var formItem = new DnnFormTextBoxItem  			{  				ID = dataField'  				DataField = dataField'  				DataMember = dataMember'  				Visible = true'  				Required = required'  				TextMode = TextBoxMode.Password'  				TextBoxCssClass = ConfirmPasswordTextBoxCssClass'  				ClearContentInPasswordMode = true'                  MaxLength = 39  			};
Magic Number,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,Validate,The following statement contains a magic number: if (_IsValid)  		    {                  // Validate username against bad characters; it must not start or end with space'                   // must not containg control characters' and not contain special puctuations                  // Printable ASCII: " !\"#$%&'()*+'-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"  		        char[] unallowedAscii = "!\"#$%&'()*+'/:;<=>?@[\\]^`{|}".ToCharArray();  		        var name = User.Username;  		        var valid = name.Length >= 5 &&  		                    name == name.Trim() &&  		                    name.All(ch => ch >= ' ') &&  		                    name.IndexOfAny(unallowedAscii) < 0;  		        if (!valid)  		            CreateStatus = UserCreateStatus.InvalidUserName;  		    }
Magic Number,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,GetRedirectUrl,The following statement contains a magic number: if (checkSetting && redirectAfterRegistration > 0) //redirect to after registration page  			{  				redirectUrl = Globals.NavigateURL(redirectAfterRegistration);  			}  			else  			{  				if (Request.QueryString["returnurl"] != null)  				{  					//return to the url passed to register  					redirectUrl = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);                        //clean the return url to avoid possible XSS attack.                      redirectUrl = UrlUtils.ValidReturnUrl(redirectUrl);                        if (redirectUrl.Contains("?returnurl"))  					{  						string baseURL = redirectUrl.Substring(0'  							redirectUrl.IndexOf("?returnurl"' StringComparison.Ordinal));  						string returnURL =  							redirectUrl.Substring(redirectUrl.IndexOf("?returnurl"' StringComparison.Ordinal) + 11);    						redirectUrl = string.Concat(baseURL' "?returnurl"' HttpUtility.UrlEncode(returnURL));  					}  				}  				if (String.IsNullOrEmpty(redirectUrl))  				{  					//redirect to current page   					redirectUrl = Globals.NavigateURL();  				}  			}
Magic Number,DotNetNuke.Modules.Admin.Users,User,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\User.ascx.cs,cmdUpdate_Click,The following statement contains a magic number: if (AddUser)              {                  if (IsValid)                  {                      CreateUser();                      DataCache.ClearPortalCache(PortalId' true);                  }              }              else              {                  if (userForm.IsValid && (User != null))                  {                      if (User.UserID == PortalSettings.AdministratorId)                      {  						//Clear the Portal Cache                          DataCache.ClearPortalCache(UserPortalID' true);                      }                      try                      {  						//Update DisplayName to conform to Format                          UpdateDisplayName();                          //either update the username or update the user details                            if (CanUpdateUsername() && !PortalSettings.Registration.UseEmailAsUserName)                          {                              UserController.ChangeUsername(User.UserID' renameUserName.Value.ToString());                          }                            //DNN-5874 Check if unique display name is required                          if (PortalSettings.Registration.RequireUniqueDisplayName)                          {                              var usersWithSameDisplayName = (System.Collections.Generic.List<UserInfo>)MembershipProvider.Instance().GetUsersBasicSearch(PortalId' 0' 2' "DisplayName"' true' "DisplayName"' User.DisplayName);                              if (usersWithSameDisplayName.Any(user => user.UserID != User.UserID))                              {                                  UI.Skins.Skin.AddModuleMessage(this' LocalizeString("DisplayNameNotUnique")' UI.Skins.Controls.ModuleMessage.ModuleMessageType.RedError);                                  return;                              }                          }                            UserController.UpdateUser(UserPortalID' User);                            if (PortalSettings.Registration.UseEmailAsUserName && (User.Username.ToLower() != User.Email.ToLower()))                          {                              UserController.ChangeUsername(User.UserID' User.Email);                          }                            OnUserUpdated(EventArgs.Empty);                          OnUserUpdateCompleted(EventArgs.Empty);                      }                      catch (Exception exc)                      {                          Logger.Error(exc);                            var args = new UserUpdateErrorArgs(User.UserID' User.Username' "EmailError");                          OnUserUpdateError(args);                      }                  }              }
Magic Number,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,InitializePage,The following statement contains a magic number: if (InstallBlocker.Instance.IsInstallInProgress())              {                  Exceptions.ProcessHttpException(new HttpException(503' Localization.GetString("SiteAccessedWhileInstallationWasInProgress.Error"' Localization.GlobalResourceFile)));              }
Magic Number,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,ParsePageCallBackArgs,The following statement contains a magic number: if (aryVals.Length > 0)              {                  objDict.Add("type"' aryVals[0]);                  switch (                      (DNNClientAPI.PageCallBackType)Enum.Parse(typeof(DNNClientAPI.PageCallBackType)' objDict["type"]))                  {                      case DNNClientAPI.PageCallBackType.GetPersonalization:                          objDict.Add("namingcontainer"' aryVals[1]);                          objDict.Add("key"' aryVals[2]);                          break;                      case DNNClientAPI.PageCallBackType.SetPersonalization:                          objDict.Add("namingcontainer"' aryVals[1]);                          objDict.Add("key"' aryVals[2]);                          objDict.Add("value"' aryVals[3]);                          break;                  }              }
Magic Number,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,ParsePageCallBackArgs,The following statement contains a magic number: if (aryVals.Length > 0)              {                  objDict.Add("type"' aryVals[0]);                  switch (                      (DNNClientAPI.PageCallBackType)Enum.Parse(typeof(DNNClientAPI.PageCallBackType)' objDict["type"]))                  {                      case DNNClientAPI.PageCallBackType.GetPersonalization:                          objDict.Add("namingcontainer"' aryVals[1]);                          objDict.Add("key"' aryVals[2]);                          break;                      case DNNClientAPI.PageCallBackType.SetPersonalization:                          objDict.Add("namingcontainer"' aryVals[1]);                          objDict.Add("key"' aryVals[2]);                          objDict.Add("value"' aryVals[3]);                          break;                  }              }
Magic Number,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,ParsePageCallBackArgs,The following statement contains a magic number: if (aryVals.Length > 0)              {                  objDict.Add("type"' aryVals[0]);                  switch (                      (DNNClientAPI.PageCallBackType)Enum.Parse(typeof(DNNClientAPI.PageCallBackType)' objDict["type"]))                  {                      case DNNClientAPI.PageCallBackType.GetPersonalization:                          objDict.Add("namingcontainer"' aryVals[1]);                          objDict.Add("key"' aryVals[2]);                          break;                      case DNNClientAPI.PageCallBackType.SetPersonalization:                          objDict.Add("namingcontainer"' aryVals[1]);                          objDict.Add("key"' aryVals[2]);                          objDict.Add("value"' aryVals[3]);                          break;                  }              }
Magic Number,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,GenerateUserName,The following statement contains a magic number: if (!string.IsNullOrEmpty(emailPrefix))              {                  for (var i = 1; i < 10000; i++)                  {                      var newUserName = emailPrefix + i;                      var user = UserController.GetUserByName(PortalId' newUserName);                      if (user == null)                      {                          return newUserName;                      }                  }              }
Magic Number,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ShowPanel,The following statement contains a magic number: bool showPassword = (PageNo == 2);
Magic Number,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ShowPanel,The following statement contains a magic number: bool showProfile = (PageNo == 3);
Magic Number,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ShowPanel,The following statement contains a magic number: switch (PageNo)              {                  case 0:                      BindLogin();                      break;                  case 1:                      BindRegister();                      break;                  case 2:                      ctlPassword.UserId = UserId;                      ctlPassword.DataBind();                      break;                  case 3:                      ctlProfile.UserId = UserId;                      ctlProfile.DataBind();                      break;              }
Magic Number,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ShowPanel,The following statement contains a magic number: switch (PageNo)              {                  case 0:                      BindLogin();                      break;                  case 1:                      BindRegister();                      break;                  case 2:                      ctlPassword.UserId = UserId;                      ctlPassword.DataBind();                      break;                  case 3:                      ctlProfile.UserId = UserId;                      ctlProfile.DataBind();                      break;              }
Magic Number,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ValidateUser,The following statement contains a magic number: switch (validStatus)              {                  case UserValidStatus.VALID:                      //check if the user is an admin/host and validate their IP                      if (Host.EnableIPChecking)                      {                          bool isAdminUser = objUser.IsSuperUser || objUser.IsInRole(PortalSettings.AdministratorRoleName);                          if (isAdminUser)                          {                              if (IPFilterController.Instance.IsIPBanned(Request.UserHostAddress))                              {                                  PortalSecurity.Instance.SignOut();                                  AddModuleMessage("IPAddressBanned"' ModuleMessage.ModuleMessageType.RedError' true);                                  okToShowPanel = false;                                  break;                              }                          }                      }                        //Set the Page Culture(Language) based on the Users Preferred Locale                      if ((objUser.Profile != null) && (objUser.Profile.PreferredLocale != null) && LocaleEnabled(objUser.Profile.PreferredLocale))                      {                          Localization.SetLanguage(objUser.Profile.PreferredLocale);                      }                      else                      {                          Localization.SetLanguage(PortalSettings.DefaultLanguage);                      }                        //Set the Authentication Type used                       AuthenticationController.SetAuthenticationType(AuthenticationType);                        //Complete Login                      UserController.UserLogin(PortalId' objUser' PortalSettings.PortalName' AuthenticationLoginBase.GetIPAddress()' RememberMe);                        //redirect browser                      var redirectUrl = RedirectURL;                        //Clear the cookie                      HttpContext.Current.Response.Cookies.Set(new HttpCookie("returnurl"' "")                      {                          Expires = DateTime.Now.AddDays(-1)'                          Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/")                      });                        Response.Redirect(redirectUrl' true);                      break;                  case UserValidStatus.PASSWORDEXPIRED:                      strMessage = string.Format(Localization.GetString("PasswordExpired"' LocalResourceFile)' expiryDate.ToLongDateString());                      AddLocalizedModuleMessage(strMessage' ModuleMessage.ModuleMessageType.YellowWarning' true);                      PageNo = 2;                      pnlProceed.Visible = false;                      break;                  case UserValidStatus.PASSWORDEXPIRING:                      strMessage = string.Format(Localization.GetString("PasswordExpiring"' LocalResourceFile)' expiryDate.ToLongDateString());                      AddLocalizedModuleMessage(strMessage' ModuleMessage.ModuleMessageType.YellowWarning' true);                      PageNo = 2;                      pnlProceed.Visible = true;                      break;                  case UserValidStatus.UPDATEPASSWORD:                      var portalAlias = Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias);                      if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)                      {                          UserController.ResetPasswordToken(User);                          objUser = UserController.GetUserById(objUser.PortalID' objUser.UserID);                      }                      var redirTo = string.Format("{0}/default.aspx?ctl=PasswordReset&resetToken={1}&forced=true"' portalAlias' objUser.PasswordResetToken);                      Response.Redirect(redirTo);                      break;                  case UserValidStatus.UPDATEPROFILE:                      //Save UserID in ViewState so that can update profile later.                      UserId = objUser.UserID;                        //When the user need update its profile to complete login' we need clear the login status because if the logrin is from                      //3rd party login provider' it may call UserController.UserLogin because they doesn't check this situation.                      PortalSecurity.Instance.SignOut();                      //Admin has forced profile update                      AddModuleMessage("ProfileUpdate"' ModuleMessage.ModuleMessageType.YellowWarning' true);                      PageNo = 3;                      break;              }
Magic Number,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ValidateUser,The following statement contains a magic number: switch (validStatus)              {                  case UserValidStatus.VALID:                      //check if the user is an admin/host and validate their IP                      if (Host.EnableIPChecking)                      {                          bool isAdminUser = objUser.IsSuperUser || objUser.IsInRole(PortalSettings.AdministratorRoleName);                          if (isAdminUser)                          {                              if (IPFilterController.Instance.IsIPBanned(Request.UserHostAddress))                              {                                  PortalSecurity.Instance.SignOut();                                  AddModuleMessage("IPAddressBanned"' ModuleMessage.ModuleMessageType.RedError' true);                                  okToShowPanel = false;                                  break;                              }                          }                      }                        //Set the Page Culture(Language) based on the Users Preferred Locale                      if ((objUser.Profile != null) && (objUser.Profile.PreferredLocale != null) && LocaleEnabled(objUser.Profile.PreferredLocale))                      {                          Localization.SetLanguage(objUser.Profile.PreferredLocale);                      }                      else                      {                          Localization.SetLanguage(PortalSettings.DefaultLanguage);                      }                        //Set the Authentication Type used                       AuthenticationController.SetAuthenticationType(AuthenticationType);                        //Complete Login                      UserController.UserLogin(PortalId' objUser' PortalSettings.PortalName' AuthenticationLoginBase.GetIPAddress()' RememberMe);                        //redirect browser                      var redirectUrl = RedirectURL;                        //Clear the cookie                      HttpContext.Current.Response.Cookies.Set(new HttpCookie("returnurl"' "")                      {                          Expires = DateTime.Now.AddDays(-1)'                          Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/")                      });                        Response.Redirect(redirectUrl' true);                      break;                  case UserValidStatus.PASSWORDEXPIRED:                      strMessage = string.Format(Localization.GetString("PasswordExpired"' LocalResourceFile)' expiryDate.ToLongDateString());                      AddLocalizedModuleMessage(strMessage' ModuleMessage.ModuleMessageType.YellowWarning' true);                      PageNo = 2;                      pnlProceed.Visible = false;                      break;                  case UserValidStatus.PASSWORDEXPIRING:                      strMessage = string.Format(Localization.GetString("PasswordExpiring"' LocalResourceFile)' expiryDate.ToLongDateString());                      AddLocalizedModuleMessage(strMessage' ModuleMessage.ModuleMessageType.YellowWarning' true);                      PageNo = 2;                      pnlProceed.Visible = true;                      break;                  case UserValidStatus.UPDATEPASSWORD:                      var portalAlias = Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias);                      if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)                      {                          UserController.ResetPasswordToken(User);                          objUser = UserController.GetUserById(objUser.PortalID' objUser.UserID);                      }                      var redirTo = string.Format("{0}/default.aspx?ctl=PasswordReset&resetToken={1}&forced=true"' portalAlias' objUser.PasswordResetToken);                      Response.Redirect(redirTo);                      break;                  case UserValidStatus.UPDATEPROFILE:                      //Save UserID in ViewState so that can update profile later.                      UserId = objUser.UserID;                        //When the user need update its profile to complete login' we need clear the login status because if the logrin is from                      //3rd party login provider' it may call UserController.UserLogin because they doesn't check this situation.                      PortalSecurity.Instance.SignOut();                      //Admin has forced profile update                      AddModuleMessage("ProfileUpdate"' ModuleMessage.ModuleMessageType.YellowWarning' true);                      PageNo = 3;                      break;              }
Magic Number,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ValidateUser,The following statement contains a magic number: switch (validStatus)              {                  case UserValidStatus.VALID:                      //check if the user is an admin/host and validate their IP                      if (Host.EnableIPChecking)                      {                          bool isAdminUser = objUser.IsSuperUser || objUser.IsInRole(PortalSettings.AdministratorRoleName);                          if (isAdminUser)                          {                              if (IPFilterController.Instance.IsIPBanned(Request.UserHostAddress))                              {                                  PortalSecurity.Instance.SignOut();                                  AddModuleMessage("IPAddressBanned"' ModuleMessage.ModuleMessageType.RedError' true);                                  okToShowPanel = false;                                  break;                              }                          }                      }                        //Set the Page Culture(Language) based on the Users Preferred Locale                      if ((objUser.Profile != null) && (objUser.Profile.PreferredLocale != null) && LocaleEnabled(objUser.Profile.PreferredLocale))                      {                          Localization.SetLanguage(objUser.Profile.PreferredLocale);                      }                      else                      {                          Localization.SetLanguage(PortalSettings.DefaultLanguage);                      }                        //Set the Authentication Type used                       AuthenticationController.SetAuthenticationType(AuthenticationType);                        //Complete Login                      UserController.UserLogin(PortalId' objUser' PortalSettings.PortalName' AuthenticationLoginBase.GetIPAddress()' RememberMe);                        //redirect browser                      var redirectUrl = RedirectURL;                        //Clear the cookie                      HttpContext.Current.Response.Cookies.Set(new HttpCookie("returnurl"' "")                      {                          Expires = DateTime.Now.AddDays(-1)'                          Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/")                      });                        Response.Redirect(redirectUrl' true);                      break;                  case UserValidStatus.PASSWORDEXPIRED:                      strMessage = string.Format(Localization.GetString("PasswordExpired"' LocalResourceFile)' expiryDate.ToLongDateString());                      AddLocalizedModuleMessage(strMessage' ModuleMessage.ModuleMessageType.YellowWarning' true);                      PageNo = 2;                      pnlProceed.Visible = false;                      break;                  case UserValidStatus.PASSWORDEXPIRING:                      strMessage = string.Format(Localization.GetString("PasswordExpiring"' LocalResourceFile)' expiryDate.ToLongDateString());                      AddLocalizedModuleMessage(strMessage' ModuleMessage.ModuleMessageType.YellowWarning' true);                      PageNo = 2;                      pnlProceed.Visible = true;                      break;                  case UserValidStatus.UPDATEPASSWORD:                      var portalAlias = Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias);                      if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)                      {                          UserController.ResetPasswordToken(User);                          objUser = UserController.GetUserById(objUser.PortalID' objUser.UserID);                      }                      var redirTo = string.Format("{0}/default.aspx?ctl=PasswordReset&resetToken={1}&forced=true"' portalAlias' objUser.PasswordResetToken);                      Response.Redirect(redirTo);                      break;                  case UserValidStatus.UPDATEPROFILE:                      //Save UserID in ViewState so that can update profile later.                      UserId = objUser.UserID;                        //When the user need update its profile to complete login' we need clear the login status because if the logrin is from                      //3rd party login provider' it may call UserController.UserLogin because they doesn't check this situation.                      PortalSecurity.Instance.SignOut();                      //Admin has forced profile update                      AddModuleMessage("ProfileUpdate"' ModuleMessage.ModuleMessageType.YellowWarning' true);                      PageNo = 3;                      break;              }
Magic Number,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,OnLoad,The following statement contains a magic number: if (!Null.IsNull(PortalSettings.LoginTabId) && Globals.IsAdminControl())              {                  if (Globals.ValidateLoginTabID(PortalSettings.LoginTabId))                  {                      //login page exists and trying to access this control directly with url param -> not allowed                      var parameters = new string[3];                      if (!string.IsNullOrEmpty(Request.QueryString["returnUrl"]))                      {                          parameters[0] = "returnUrl=" + HttpUtility.UrlEncode(Request.QueryString["returnUrl"]);                      }                      if (!string.IsNullOrEmpty(Request.QueryString["username"]))                      {                          parameters[1] = "username=" + HttpUtility.UrlEncode(Request.QueryString["username"]);                      }                      if (!string.IsNullOrEmpty(Request.QueryString["verificationcode"]))                      {                          parameters[2] = "verificationcode=" + HttpUtility.UrlEncode(Request.QueryString["verificationcode"]);                      }                      Response.Redirect(Globals.NavigateURL(PortalSettings.LoginTabId' ""' parameters));                  }              }
Magic Number,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,OnLoad,The following statement contains a magic number: if (!Null.IsNull(PortalSettings.LoginTabId) && Globals.IsAdminControl())              {                  if (Globals.ValidateLoginTabID(PortalSettings.LoginTabId))                  {                      //login page exists and trying to access this control directly with url param -> not allowed                      var parameters = new string[3];                      if (!string.IsNullOrEmpty(Request.QueryString["returnUrl"]))                      {                          parameters[0] = "returnUrl=" + HttpUtility.UrlEncode(Request.QueryString["returnUrl"]);                      }                      if (!string.IsNullOrEmpty(Request.QueryString["username"]))                      {                          parameters[1] = "username=" + HttpUtility.UrlEncode(Request.QueryString["username"]);                      }                      if (!string.IsNullOrEmpty(Request.QueryString["verificationcode"]))                      {                          parameters[2] = "verificationcode=" + HttpUtility.UrlEncode(Request.QueryString["verificationcode"]);                      }                      Response.Redirect(Globals.NavigateURL(PortalSettings.LoginTabId' ""' parameters));                  }              }
Magic Number,DesktopModules.Admin.Security,DNNProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Profile.ascx.cs,cmdUpdate_Click,The following statement contains a magic number: if (IsValid)              {                  if (User.UserID == PortalSettings.AdministratorId)                  {                      //Clear the Portal Cache                      DataCache.ClearPortalCache(UserPortalID' true);                  }                    //Update DisplayName to conform to Format                  UpdateDisplayName();                    if (PortalSettings.Registration.RequireUniqueDisplayName)                  {                      var usersWithSameDisplayName = (List<UserInfo>)MembershipProvider.Instance().GetUsersBasicSearch(PortalId' 0' 2' "DisplayName"' true' "DisplayName"' User.DisplayName);                      if (usersWithSameDisplayName.Any(user => user.UserID != User.UserID))                      {                          AddModuleMessage("DisplayNameNotUnique"' ModuleMessage.ModuleMessageType.RedError' true);                          return;                      }                  }                    var properties = (ProfilePropertyDefinitionCollection)ProfileProperties.DataSource;                    //Update User's profile                  User = ProfileController.UpdateUserProfile(User' properties);                    OnProfileUpdated(EventArgs.Empty);                  OnProfileUpdateCompleted(EventArgs.Empty);              }
Magic Number,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,OnLoad,The following statement contains a magic number: try  			{                  if(Null.IsNull(ProfileUserId))                  {                      Visible = false;                      return;                  }                    var template = Convert.ToString(ModuleContext.Settings["ProfileTemplate"]);                  if(string.IsNullOrEmpty(template))                  {                      template = Localization.GetString("DefaultTemplate"' LocalResourceFile);                  }  			    var editUrl = Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID' "Profile"' "userId=" + ProfileUserId' "pageno=1");                  var profileUrl = Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID' "Profile"' "userId=" + ProfileUserId' "pageno=2");                    if (template.Contains("[BUTTON:EDITPROFILE]"))                  {                      if (IncludeButton && IsUser)                      {                          string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnPrimaryAction\">{1}</a>"' profileUrl' LocalizeString("Edit"));                          template = template.Replace("[BUTTON:EDITPROFILE]"' editHyperLink);                      }                      buttonPanel.Visible = false;                  }                  else                  {                      buttonPanel.Visible = IncludeButton;                      editLink.NavigateUrl = editUrl;                  }                  if (template.Contains("[HYPERLINK:EDITPROFILE]"))                  {                      if (IsUser)                      {                          string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnSecondaryAction\">{1}</a>"' profileUrl' LocalizeString("Edit"));                          template = template.Replace("[HYPERLINK:EDITPROFILE]"' editHyperLink);                      }                  }                  if (template.Contains("[HYPERLINK:MYACCOUNT]"))                  {                      if (IsUser)                      {                          string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnSecondaryAction\">{1}</a>"' editUrl' LocalizeString("MyAccount"));                          template = template.Replace("[HYPERLINK:MYACCOUNT]"' editHyperLink);                      }                      buttonPanel.Visible = false;                  }                    if (!IsUser && buttonPanel.Visible)                  {                      buttonPanel.Visible = false;                  }    			    if (ProfileUser.Profile.ProfileProperties.Cast<ProfilePropertyDefinition>().Count(profProperty => profProperty.Visible) == 0)                  {                      noPropertiesLabel.Visible = true;                      profileOutput.Visible = false;                      pnlScripts.Visible = false;                  }                  else                  {                      if (template.IndexOf("[PROFILE:PHOTO]") > -1)                      {                          var profileImageHandlerBasedURL =                              UserController.Instance?.GetUserProfilePictureUrl(ProfileUserId' 120' 120);                          template = template.Replace("[PROFILE:PHOTO]"' profileImageHandlerBasedURL);                      }                        var token = new TokenReplace { User = ProfileUser' AccessingUser = ModuleContext.PortalSettings.UserInfo };                      profileOutput.InnerHtml = token.ReplaceEnvironmentTokens(template);                      noPropertiesLabel.Visible = false;                      profileOutput.Visible = true;                  }    			    var propertyAccess = new ProfilePropertyAccess(ProfileUser);                  StringBuilder sb = new StringBuilder();                  bool propertyNotFound = false;                    foreach (ProfilePropertyDefinition property in ProfileUser.Profile.ProfileProperties)                  {                      var displayDataType = ProfilePropertyAccess.DisplayDataType(property).ToLowerInvariant();                      string value = propertyAccess.GetProperty(property.PropertyName'                                                                String.Empty'                                                                Thread.CurrentThread.CurrentUICulture'                                                                ModuleContext.PortalSettings.UserInfo'                                                                Scope.DefaultSettings'                                                                ref propertyNotFound);                          var clientName = Localization.GetSafeJSString(property.PropertyName);                      sb.Append("self['" + clientName + "'] = ko.observable(");                      sb.Append("\"");                      if (!string.IsNullOrEmpty(value))                      {                          value = Localization.GetSafeJSString(displayDataType == "richtext" ? value : Server.HtmlDecode(value));                          value = value                              .Replace("\r"' string.Empty)                              .Replace("\n"' " ")                              .Replace(";"' string.Empty)                              .Replace("://"' ":||") //protect http protocols won't be replaced in next step                              .Replace("//"' string.Empty)                              .Replace(":||"' "://"); //restore http protocols                      }                      sb.Append(value + "\"" + ");");                      sb.Append('\n');                      sb.Append("self['" + clientName + "Text'] = '");                      sb.Append(clientName + "';");                      sb.Append('\n');                  }    			    string email = (ProfileUserId == ModuleContext.PortalSettings.UserId  			                    || ModuleContext.PortalSettings.UserInfo.IsInRole(ModuleContext.PortalSettings.AdministratorRoleName))  			                       ? ProfileUser.Email  			                       : String.Empty;                    sb.Append("self.Email = ko.observable('");                  email = Localization.GetSafeJSString(Server.HtmlDecode(email));                  email = email.Replace(";"' string.Empty).Replace("//"' string.Empty);                  sb.Append(email + "');");                  sb.Append('\n');                  sb.Append("self.EmailText = '");                  sb.Append(LocalizeString("Email") + "';");                  sb.Append('\n');                      ProfileProperties = sb.ToString();      			}  			catch (Exception exc)  			{  				//Module failed to load  				Exceptions.ProcessModuleLoadException(this' exc);  			}
Magic Number,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,OnLoad,The following statement contains a magic number: try  			{                  if(Null.IsNull(ProfileUserId))                  {                      Visible = false;                      return;                  }                    var template = Convert.ToString(ModuleContext.Settings["ProfileTemplate"]);                  if(string.IsNullOrEmpty(template))                  {                      template = Localization.GetString("DefaultTemplate"' LocalResourceFile);                  }  			    var editUrl = Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID' "Profile"' "userId=" + ProfileUserId' "pageno=1");                  var profileUrl = Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID' "Profile"' "userId=" + ProfileUserId' "pageno=2");                    if (template.Contains("[BUTTON:EDITPROFILE]"))                  {                      if (IncludeButton && IsUser)                      {                          string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnPrimaryAction\">{1}</a>"' profileUrl' LocalizeString("Edit"));                          template = template.Replace("[BUTTON:EDITPROFILE]"' editHyperLink);                      }                      buttonPanel.Visible = false;                  }                  else                  {                      buttonPanel.Visible = IncludeButton;                      editLink.NavigateUrl = editUrl;                  }                  if (template.Contains("[HYPERLINK:EDITPROFILE]"))                  {                      if (IsUser)                      {                          string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnSecondaryAction\">{1}</a>"' profileUrl' LocalizeString("Edit"));                          template = template.Replace("[HYPERLINK:EDITPROFILE]"' editHyperLink);                      }                  }                  if (template.Contains("[HYPERLINK:MYACCOUNT]"))                  {                      if (IsUser)                      {                          string editHyperLink = String.Format("<a href=\"{0}\" class=\"dnnSecondaryAction\">{1}</a>"' editUrl' LocalizeString("MyAccount"));                          template = template.Replace("[HYPERLINK:MYACCOUNT]"' editHyperLink);                      }                      buttonPanel.Visible = false;                  }                    if (!IsUser && buttonPanel.Visible)                  {                      buttonPanel.Visible = false;                  }    			    if (ProfileUser.Profile.ProfileProperties.Cast<ProfilePropertyDefinition>().Count(profProperty => profProperty.Visible) == 0)                  {                      noPropertiesLabel.Visible = true;                      profileOutput.Visible = false;                      pnlScripts.Visible = false;                  }                  else                  {                      if (template.IndexOf("[PROFILE:PHOTO]") > -1)                      {                          var profileImageHandlerBasedURL =                              UserController.Instance?.GetUserProfilePictureUrl(ProfileUserId' 120' 120);                          template = template.Replace("[PROFILE:PHOTO]"' profileImageHandlerBasedURL);                      }                        var token = new TokenReplace { User = ProfileUser' AccessingUser = ModuleContext.PortalSettings.UserInfo };                      profileOutput.InnerHtml = token.ReplaceEnvironmentTokens(template);                      noPropertiesLabel.Visible = false;                      profileOutput.Visible = true;                  }    			    var propertyAccess = new ProfilePropertyAccess(ProfileUser);                  StringBuilder sb = new StringBuilder();                  bool propertyNotFound = false;                    foreach (ProfilePropertyDefinition property in ProfileUser.Profile.ProfileProperties)                  {                      var displayDataType = ProfilePropertyAccess.DisplayDataType(property).ToLowerInvariant();                      string value = propertyAccess.GetProperty(property.PropertyName'                                                                String.Empty'                                                                Thread.CurrentThread.CurrentUICulture'                                                                ModuleContext.PortalSettings.UserInfo'                                                                Scope.DefaultSettings'                                                                ref propertyNotFound);                          var clientName = Localization.GetSafeJSString(property.PropertyName);                      sb.Append("self['" + clientName + "'] = ko.observable(");                      sb.Append("\"");                      if (!string.IsNullOrEmpty(value))                      {                          value = Localization.GetSafeJSString(displayDataType == "richtext" ? value : Server.HtmlDecode(value));                          value = value                              .Replace("\r"' string.Empty)                              .Replace("\n"' " ")                              .Replace(";"' string.Empty)                              .Replace("://"' ":||") //protect http protocols won't be replaced in next step                              .Replace("//"' string.Empty)                              .Replace(":||"' "://"); //restore http protocols                      }                      sb.Append(value + "\"" + ");");                      sb.Append('\n');                      sb.Append("self['" + clientName + "Text'] = '");                      sb.Append(clientName + "';");                      sb.Append('\n');                  }    			    string email = (ProfileUserId == ModuleContext.PortalSettings.UserId  			                    || ModuleContext.PortalSettings.UserInfo.IsInRole(ModuleContext.PortalSettings.AdministratorRoleName))  			                       ? ProfileUser.Email  			                       : String.Empty;                    sb.Append("self.Email = ko.observable('");                  email = Localization.GetSafeJSString(Server.HtmlDecode(email));                  email = email.Replace(";"' string.Empty).Replace("//"' string.Empty);                  sb.Append(email + "');");                  sb.Append('\n');                  sb.Append("self.EmailText = '");                  sb.Append(LocalizeString("Email") + "';");                  sb.Append('\n');                      ProfileProperties = sb.ToString();      			}  			catch (Exception exc)  			{  				//Module failed to load  				Exceptions.ProcessModuleLoadException(this' exc);  			}
Magic Number,DotNetNuke.Modules.Admin.ViewProfile,ViewProfile,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\ViewProfile\ViewProfile.ascx.cs,ProcessQuerystring,The following statement contains a magic number: if (Request.IsAuthenticated && !string.IsNullOrEmpty(action) ) // only process this for authenticated requests              {                  //current user' i.e. the one that the request was for                  var currentUser = UserController.Instance.GetCurrentUserInfo();                                 // the initiating user'i.e. the one who wanted to be friend                  // note that in this case here currentUser is visiting the profile of initiatingUser' most likely from a link in the notification e-mail                  var initiatingUser = UserController.Instance.GetUserById(PortalSettings.Current.PortalId' Convert.ToInt32(Request.QueryString["UserID"]));                    if (initiatingUser.UserID == currentUser.UserID)                  {                      return; //do not further process for users who are on their own profile page                  }                                var friendRelationship = RelationshipController.Instance.GetFriendRelationship(currentUser' initiatingUser);                    if (friendRelationship != null)                  {                                         if (action.ToLower() == "acceptfriend")                      {                          var friend = UserController.GetUserById(PortalSettings.Current.PortalId' friendRelationship.UserId);                          FriendsController.Instance.AcceptFriend(friend);                                              }                        if (action.ToLower() == "followback")                      {                          var follower = UserController.GetUserById(PortalSettings.Current.PortalId' friendRelationship.UserId);                          try                          {                              FollowersController.Instance.FollowUser(follower);                              var notifications = NotificationsController.Instance.GetNotificationByContext(3' initiatingUser.UserID.ToString());                              if (notifications.Count > 0)                              {                                  NotificationsController.Instance.DeleteNotificationRecipient(notifications[0].NotificationID' currentUser.UserID);                              }                          }                          catch                          {                              //ignore                          }                      }                                      }                    Response.Redirect(Common.Globals.UserProfileURL(initiatingUser.UserID));              }
Magic Number,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The following statement contains a magic number: if (PortalSettings.UserRegistration != (int)Globals.PortalRegistrationType.NoRegistration)              {                  if (!string.IsNullOrEmpty(UrlUtils.ValidReturnUrl(Request.QueryString["returnurl"])))                  {                      returnUrl = Request.QueryString["returnurl"];                  }                  returnUrl = HttpUtility.UrlEncode(returnUrl);                    url = Globals.RegisterURL(returnUrl' Null.NullString);                  registerLink.NavigateUrl = url;                  if (PortalSettings.EnablePopUps && PortalSettings.RegisterTabId == Null.NullInteger                      && !HasSocialAuthenticationEnabled())                  {                      registerLink.Attributes.Add("onclick"' "return " + UrlUtils.PopUpUrl(url' this' PortalSettings' true' false' 600' 950));                  }              }              else              {                  registerLink.Visible = false;              }
Magic Number,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The following statement contains a magic number: if (PortalSettings.UserRegistration != (int)Globals.PortalRegistrationType.NoRegistration)              {                  if (!string.IsNullOrEmpty(UrlUtils.ValidReturnUrl(Request.QueryString["returnurl"])))                  {                      returnUrl = Request.QueryString["returnurl"];                  }                  returnUrl = HttpUtility.UrlEncode(returnUrl);                    url = Globals.RegisterURL(returnUrl' Null.NullString);                  registerLink.NavigateUrl = url;                  if (PortalSettings.EnablePopUps && PortalSettings.RegisterTabId == Null.NullInteger                      && !HasSocialAuthenticationEnabled())                  {                      registerLink.Attributes.Add("onclick"' "return " + UrlUtils.PopUpUrl(url' this' PortalSettings' true' false' 600' 950));                  }              }              else              {                  registerLink.Visible = false;              }
Magic Number,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The following statement contains a magic number: if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)              {                  url = Globals.NavigateURL("SendPassword"' "returnurl=" + returnUrl);                  passwordLink.NavigateUrl = url;                  if (PortalSettings.EnablePopUps)                  {                      passwordLink.Attributes.Add("onclick"' "return " + UrlUtils.PopUpUrl(url' this' PortalSettings' true' false' 300' 650));                  }              }              else              {                  passwordLink.Visible = false;              }
Magic Number,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,OnLoad,The following statement contains a magic number: if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)              {                  url = Globals.NavigateURL("SendPassword"' "returnurl=" + returnUrl);                  passwordLink.NavigateUrl = url;                  if (PortalSettings.EnablePopUps)                  {                      passwordLink.Attributes.Add("onclick"' "return " + UrlUtils.PopUpUrl(url' this' PortalSettings' true' false' 300' 650));                  }              }              else              {                  passwordLink.Visible = false;              }
Magic Number,DotNetNuke.Modules.Admin.Authentication.DNN,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\AuthenticationServices\DNN\Login.ascx.cs,GetRedirectUrl,The following statement contains a magic number: if (checkSettings && redirectAfterLogin > 0) //redirect to after registration page  			{  				redirectUrl = Globals.NavigateURL(redirectAfterLogin);  			}  			else  			{  				if (Request.QueryString["returnurl"] != null)  				{  					//return to the url passed to register  					redirectUrl = HttpUtility.UrlDecode(Request.QueryString["returnurl"]);                        //clean the return url to avoid possible XSS attack.                      redirectUrl = UrlUtils.ValidReturnUrl(redirectUrl);                        if (redirectUrl.Contains("?returnurl"))  					{  						string baseURL = redirectUrl.Substring(0'  							redirectUrl.IndexOf("?returnurl"' StringComparison.Ordinal));  						string returnURL =  							redirectUrl.Substring(redirectUrl.IndexOf("?returnurl"' StringComparison.Ordinal) + 11);    						redirectUrl = string.Concat(baseURL' "?returnurl"' HttpUtility.UrlEncode(returnURL));  					}  				}  				if (String.IsNullOrEmpty(redirectUrl))  				{  					//redirect to current page   					redirectUrl = Globals.NavigateURL();  				}  			}
Magic Number,DotNetNuke.Services.Exceptions,ErrorPage,C:\repos\dnnsoftware_Dnn.Platform\Website\ErrorPage.aspx.cs,OnLoad,The following statement contains a magic number: if (!string.IsNullOrEmpty(status))              {                  ManageError(status);              }              else              {                  //get the last server error                  var exc = Server.GetLastError();                  try                  {                      if (Request.Url.LocalPath.ToLower().EndsWith("installwizard.aspx"))                      {                          ErrorPlaceHolder.Controls.Add(new LiteralControl(HttpUtility.HtmlEncode(exc.ToString())));                      }                      else                      {                          var lex = new PageLoadException(exc.Message' exc);                          Exceptions.LogException(lex);                          localizedMessage = Localization.Localization.GetString("Error.Text"' Localization.Localization.GlobalResourceFile);                          ErrorPlaceHolder.Controls.Add(new ErrorContainer(portalSettings' localizedMessage' lex).Container);                      }                  }                  catch                  {                      //No exception was found...you shouldn't end up here                      //unless you go to this aspx page URL directly                      localizedMessage = Localization.Localization.GetString("UnhandledError.Text"' Localization.Localization.GlobalResourceFile);                      ErrorPlaceHolder.Controls.Add(new LiteralControl(localizedMessage));                  }                    Response.StatusCode = 500;              }
Magic Number,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,UpgradeApplication,The following statement contains a magic number: try              {                  if (Upgrade.Upgrade.RemoveInvalidAntiForgeryCookie())                  {                      Response.Redirect(Request.RawUrl' true);                  }                    var databaseVersion = DataProvider.Instance().GetVersion();                    //Start Timer                  Upgrade.Upgrade.StartTimer();                    //Write out Header                  HtmlUtils.WriteHeader(Response' "upgrade");                    //There could be an installation in progress                  lock (installLocker)                  {                      if (InstallBlocker.Instance.IsInstallInProgress())                      {                          WriteInstallationHeader();                          WriteInstallationInProgress();                          return;                      }                      RegisterInstallBegining();                  }                    Response.Write("<h2>Current Assembly Version: " + Globals.FormatVersion(DotNetNukeContext.Current.Application.Version) + "</h2>");                  Response.Flush();                    //get path to script files                  string strProviderPath = DataProvider.Instance().GetProviderPath();                  if (!strProviderPath.StartsWith("ERROR:"))                  {                      //get current database version                      var strDatabaseVersion = Globals.FormatVersion(databaseVersion);                        Response.Write("<h2>Current Database Version: " + strDatabaseVersion + "</h2>");                      Response.Flush();                        string ignoreWarning = Null.NullString;                      string strWarning = Null.NullString;                      if ((databaseVersion.Major == 3 && databaseVersion.Minor < 3) || (databaseVersion.Major == 4 && databaseVersion.Minor < 3))                      {                          //Users and profile have not been transferred                          //Get the name of the data provider                          ProviderConfiguration objProviderConfiguration = ProviderConfiguration.GetProviderConfiguration("data");                            //Execute Special Script                          Upgrade.Upgrade.ExecuteScript(strProviderPath + "Upgrade." + objProviderConfiguration.DefaultProvider);                            if ((Request.QueryString["ignoreWarning"] != null))                          {                              ignoreWarning = Request.QueryString["ignoreWarning"].ToLower();                          }                          strWarning = Upgrade.Upgrade.CheckUpgrade();                      }                      else                      {                          ignoreWarning = "true";                      }                        //Check whether Upgrade is ok                      if (strWarning == Null.NullString || ignoreWarning == "true")                      {                          Response.Write("<br><br>");                          Response.Write("<h2>Upgrade Status Report</h2>");                          Response.Flush();                            //stop scheduler                          SchedulingProvider.Instance().Halt("Stopped by Upgrade Process");                            Upgrade.Upgrade.UpgradeDNN(strProviderPath' databaseVersion);                            //Install optional resources if present                          var packages = Upgrade.Upgrade.GetInstallPackages();                          foreach (var package in packages)                          {                              Upgrade.Upgrade.InstallPackage(package.Key' package.Value.PackageType' true);                          }                            //calling GetInstallVersion after SQL scripts exection to ensure sp GetDatabaseInstallVersion exists                          var installVersion = DataProvider.Instance().GetInstallVersion();                          string strError = Config.UpdateInstallVersion(installVersion);                            //Adding FCN mode to web.config                          strError += Config.AddFCNMode(Config.FcnMode.Single);                          if (!string.IsNullOrEmpty(strError))                          {                              Logger.Error(strError);                          }                          Response.Write("<h2>Upgrade Complete</h2>");                          Response.Write("<br><br><h2><a href='../Default.aspx'>Click Here To Access Your Site</a></h2><br><br>");                            //remove installwizard files                          Upgrade.Upgrade.DeleteInstallerFiles();                      }                      else                      {                          Response.Write("<h2>Warning:</h2>" + strWarning.Replace(Environment.NewLine' "<br />"));                            Response.Write("<br><br><a href='Install.aspx?mode=upgrade&ignoreWarning=true'>Click Here To Proceed With The Upgrade.</a>");                      }                      Response.Flush();                  }                  else                  {                      Response.Write("<h2>Upgrade Error: " + strProviderPath + "</h2>");                      Response.Flush();                  }                    //Write out Footer                  HtmlUtils.WriteFooter(Response);              }              finally              {                  RegisterInstallEnd();              }
Magic Number,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,UpgradeApplication,The following statement contains a magic number: try              {                  if (Upgrade.Upgrade.RemoveInvalidAntiForgeryCookie())                  {                      Response.Redirect(Request.RawUrl' true);                  }                    var databaseVersion = DataProvider.Instance().GetVersion();                    //Start Timer                  Upgrade.Upgrade.StartTimer();                    //Write out Header                  HtmlUtils.WriteHeader(Response' "upgrade");                    //There could be an installation in progress                  lock (installLocker)                  {                      if (InstallBlocker.Instance.IsInstallInProgress())                      {                          WriteInstallationHeader();                          WriteInstallationInProgress();                          return;                      }                      RegisterInstallBegining();                  }                    Response.Write("<h2>Current Assembly Version: " + Globals.FormatVersion(DotNetNukeContext.Current.Application.Version) + "</h2>");                  Response.Flush();                    //get path to script files                  string strProviderPath = DataProvider.Instance().GetProviderPath();                  if (!strProviderPath.StartsWith("ERROR:"))                  {                      //get current database version                      var strDatabaseVersion = Globals.FormatVersion(databaseVersion);                        Response.Write("<h2>Current Database Version: " + strDatabaseVersion + "</h2>");                      Response.Flush();                        string ignoreWarning = Null.NullString;                      string strWarning = Null.NullString;                      if ((databaseVersion.Major == 3 && databaseVersion.Minor < 3) || (databaseVersion.Major == 4 && databaseVersion.Minor < 3))                      {                          //Users and profile have not been transferred                          //Get the name of the data provider                          ProviderConfiguration objProviderConfiguration = ProviderConfiguration.GetProviderConfiguration("data");                            //Execute Special Script                          Upgrade.Upgrade.ExecuteScript(strProviderPath + "Upgrade." + objProviderConfiguration.DefaultProvider);                            if ((Request.QueryString["ignoreWarning"] != null))                          {                              ignoreWarning = Request.QueryString["ignoreWarning"].ToLower();                          }                          strWarning = Upgrade.Upgrade.CheckUpgrade();                      }                      else                      {                          ignoreWarning = "true";                      }                        //Check whether Upgrade is ok                      if (strWarning == Null.NullString || ignoreWarning == "true")                      {                          Response.Write("<br><br>");                          Response.Write("<h2>Upgrade Status Report</h2>");                          Response.Flush();                            //stop scheduler                          SchedulingProvider.Instance().Halt("Stopped by Upgrade Process");                            Upgrade.Upgrade.UpgradeDNN(strProviderPath' databaseVersion);                            //Install optional resources if present                          var packages = Upgrade.Upgrade.GetInstallPackages();                          foreach (var package in packages)                          {                              Upgrade.Upgrade.InstallPackage(package.Key' package.Value.PackageType' true);                          }                            //calling GetInstallVersion after SQL scripts exection to ensure sp GetDatabaseInstallVersion exists                          var installVersion = DataProvider.Instance().GetInstallVersion();                          string strError = Config.UpdateInstallVersion(installVersion);                            //Adding FCN mode to web.config                          strError += Config.AddFCNMode(Config.FcnMode.Single);                          if (!string.IsNullOrEmpty(strError))                          {                              Logger.Error(strError);                          }                          Response.Write("<h2>Upgrade Complete</h2>");                          Response.Write("<br><br><h2><a href='../Default.aspx'>Click Here To Access Your Site</a></h2><br><br>");                            //remove installwizard files                          Upgrade.Upgrade.DeleteInstallerFiles();                      }                      else                      {                          Response.Write("<h2>Warning:</h2>" + strWarning.Replace(Environment.NewLine' "<br />"));                            Response.Write("<br><br><a href='Install.aspx?mode=upgrade&ignoreWarning=true'>Click Here To Proceed With The Upgrade.</a>");                      }                      Response.Flush();                  }                  else                  {                      Response.Write("<h2>Upgrade Error: " + strProviderPath + "</h2>");                      Response.Flush();                  }                    //Write out Footer                  HtmlUtils.WriteFooter(Response);              }              finally              {                  RegisterInstallEnd();              }
Magic Number,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,UpgradeApplication,The following statement contains a magic number: try              {                  if (Upgrade.Upgrade.RemoveInvalidAntiForgeryCookie())                  {                      Response.Redirect(Request.RawUrl' true);                  }                    var databaseVersion = DataProvider.Instance().GetVersion();                    //Start Timer                  Upgrade.Upgrade.StartTimer();                    //Write out Header                  HtmlUtils.WriteHeader(Response' "upgrade");                    //There could be an installation in progress                  lock (installLocker)                  {                      if (InstallBlocker.Instance.IsInstallInProgress())                      {                          WriteInstallationHeader();                          WriteInstallationInProgress();                          return;                      }                      RegisterInstallBegining();                  }                    Response.Write("<h2>Current Assembly Version: " + Globals.FormatVersion(DotNetNukeContext.Current.Application.Version) + "</h2>");                  Response.Flush();                    //get path to script files                  string strProviderPath = DataProvider.Instance().GetProviderPath();                  if (!strProviderPath.StartsWith("ERROR:"))                  {                      //get current database version                      var strDatabaseVersion = Globals.FormatVersion(databaseVersion);                        Response.Write("<h2>Current Database Version: " + strDatabaseVersion + "</h2>");                      Response.Flush();                        string ignoreWarning = Null.NullString;                      string strWarning = Null.NullString;                      if ((databaseVersion.Major == 3 && databaseVersion.Minor < 3) || (databaseVersion.Major == 4 && databaseVersion.Minor < 3))                      {                          //Users and profile have not been transferred                          //Get the name of the data provider                          ProviderConfiguration objProviderConfiguration = ProviderConfiguration.GetProviderConfiguration("data");                            //Execute Special Script                          Upgrade.Upgrade.ExecuteScript(strProviderPath + "Upgrade." + objProviderConfiguration.DefaultProvider);                            if ((Request.QueryString["ignoreWarning"] != null))                          {                              ignoreWarning = Request.QueryString["ignoreWarning"].ToLower();                          }                          strWarning = Upgrade.Upgrade.CheckUpgrade();                      }                      else                      {                          ignoreWarning = "true";                      }                        //Check whether Upgrade is ok                      if (strWarning == Null.NullString || ignoreWarning == "true")                      {                          Response.Write("<br><br>");                          Response.Write("<h2>Upgrade Status Report</h2>");                          Response.Flush();                            //stop scheduler                          SchedulingProvider.Instance().Halt("Stopped by Upgrade Process");                            Upgrade.Upgrade.UpgradeDNN(strProviderPath' databaseVersion);                            //Install optional resources if present                          var packages = Upgrade.Upgrade.GetInstallPackages();                          foreach (var package in packages)                          {                              Upgrade.Upgrade.InstallPackage(package.Key' package.Value.PackageType' true);                          }                            //calling GetInstallVersion after SQL scripts exection to ensure sp GetDatabaseInstallVersion exists                          var installVersion = DataProvider.Instance().GetInstallVersion();                          string strError = Config.UpdateInstallVersion(installVersion);                            //Adding FCN mode to web.config                          strError += Config.AddFCNMode(Config.FcnMode.Single);                          if (!string.IsNullOrEmpty(strError))                          {                              Logger.Error(strError);                          }                          Response.Write("<h2>Upgrade Complete</h2>");                          Response.Write("<br><br><h2><a href='../Default.aspx'>Click Here To Access Your Site</a></h2><br><br>");                            //remove installwizard files                          Upgrade.Upgrade.DeleteInstallerFiles();                      }                      else                      {                          Response.Write("<h2>Warning:</h2>" + strWarning.Replace(Environment.NewLine' "<br />"));                            Response.Write("<br><br><a href='Install.aspx?mode=upgrade&ignoreWarning=true'>Click Here To Proceed With The Upgrade.</a>");                      }                      Response.Flush();                  }                  else                  {                      Response.Write("<h2>Upgrade Error: " + strProviderPath + "</h2>");                      Response.Flush();                  }                    //Write out Footer                  HtmlUtils.WriteFooter(Response);              }              finally              {                  RegisterInstallEnd();              }
Magic Number,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,UpgradeApplication,The following statement contains a magic number: try              {                  if (Upgrade.Upgrade.RemoveInvalidAntiForgeryCookie())                  {                      Response.Redirect(Request.RawUrl' true);                  }                    var databaseVersion = DataProvider.Instance().GetVersion();                    //Start Timer                  Upgrade.Upgrade.StartTimer();                    //Write out Header                  HtmlUtils.WriteHeader(Response' "upgrade");                    //There could be an installation in progress                  lock (installLocker)                  {                      if (InstallBlocker.Instance.IsInstallInProgress())                      {                          WriteInstallationHeader();                          WriteInstallationInProgress();                          return;                      }                      RegisterInstallBegining();                  }                    Response.Write("<h2>Current Assembly Version: " + Globals.FormatVersion(DotNetNukeContext.Current.Application.Version) + "</h2>");                  Response.Flush();                    //get path to script files                  string strProviderPath = DataProvider.Instance().GetProviderPath();                  if (!strProviderPath.StartsWith("ERROR:"))                  {                      //get current database version                      var strDatabaseVersion = Globals.FormatVersion(databaseVersion);                        Response.Write("<h2>Current Database Version: " + strDatabaseVersion + "</h2>");                      Response.Flush();                        string ignoreWarning = Null.NullString;                      string strWarning = Null.NullString;                      if ((databaseVersion.Major == 3 && databaseVersion.Minor < 3) || (databaseVersion.Major == 4 && databaseVersion.Minor < 3))                      {                          //Users and profile have not been transferred                          //Get the name of the data provider                          ProviderConfiguration objProviderConfiguration = ProviderConfiguration.GetProviderConfiguration("data");                            //Execute Special Script                          Upgrade.Upgrade.ExecuteScript(strProviderPath + "Upgrade." + objProviderConfiguration.DefaultProvider);                            if ((Request.QueryString["ignoreWarning"] != null))                          {                              ignoreWarning = Request.QueryString["ignoreWarning"].ToLower();                          }                          strWarning = Upgrade.Upgrade.CheckUpgrade();                      }                      else                      {                          ignoreWarning = "true";                      }                        //Check whether Upgrade is ok                      if (strWarning == Null.NullString || ignoreWarning == "true")                      {                          Response.Write("<br><br>");                          Response.Write("<h2>Upgrade Status Report</h2>");                          Response.Flush();                            //stop scheduler                          SchedulingProvider.Instance().Halt("Stopped by Upgrade Process");                            Upgrade.Upgrade.UpgradeDNN(strProviderPath' databaseVersion);                            //Install optional resources if present                          var packages = Upgrade.Upgrade.GetInstallPackages();                          foreach (var package in packages)                          {                              Upgrade.Upgrade.InstallPackage(package.Key' package.Value.PackageType' true);                          }                            //calling GetInstallVersion after SQL scripts exection to ensure sp GetDatabaseInstallVersion exists                          var installVersion = DataProvider.Instance().GetInstallVersion();                          string strError = Config.UpdateInstallVersion(installVersion);                            //Adding FCN mode to web.config                          strError += Config.AddFCNMode(Config.FcnMode.Single);                          if (!string.IsNullOrEmpty(strError))                          {                              Logger.Error(strError);                          }                          Response.Write("<h2>Upgrade Complete</h2>");                          Response.Write("<br><br><h2><a href='../Default.aspx'>Click Here To Access Your Site</a></h2><br><br>");                            //remove installwizard files                          Upgrade.Upgrade.DeleteInstallerFiles();                      }                      else                      {                          Response.Write("<h2>Warning:</h2>" + strWarning.Replace(Environment.NewLine' "<br />"));                            Response.Write("<br><br><a href='Install.aspx?mode=upgrade&ignoreWarning=true'>Click Here To Proceed With The Upgrade.</a>");                      }                      Response.Flush();                  }                  else                  {                      Response.Write("<h2>Upgrade Error: " + strProviderPath + "</h2>");                      Response.Flush();                  }                    //Write out Footer                  HtmlUtils.WriteFooter(Response);              }              finally              {                  RegisterInstallEnd();              }
Magic Number,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,NoUpgrade,The following statement contains a magic number: if (!strProviderPath.StartsWith("ERROR:"))              {                  //get current database version                  try                  {                      using (var dr = DataProvider.Instance().GetDatabaseVersion())                      {                          if (dr.Read())                          {                              //Write out Header                              HtmlUtils.WriteHeader(Response' "none");                              string currentAssembly = DotNetNukeContext.Current.Application.Version.ToString(3);                              string currentDatabase = dr["Major"] + "." + dr["Minor"] + "." + dr["Build"];                              //do not show versions if the same to stop information leakage                              if (currentAssembly == currentDatabase)                              {                                  Response.Write("<h2>Current Assembly Version && current Database Version are identical.</h2>");                              }                              else                              {                                  Response.Write("<h2>Current Assembly Version: " + currentAssembly + "</h2>");                                  //Call Upgrade with the current DB Version to upgrade an                                  //existing DNN installation                                  var strDatabaseVersion = ((int)dr["Major"]).ToString("00") + "." + ((int)dr["Minor"]).ToString("00") + "." + ((int)dr["Build"]).ToString("00");                                  Response.Write("<h2>Current Database Version: " + strDatabaseVersion + "</h2>");                              }                                Response.Write("<br><br><a href='Install.aspx?mode=Install'>Click Here To Upgrade DotNetNuke</a>");                              Response.Flush();                          }                          else                          {                              //Write out Header                              HtmlUtils.WriteHeader(Response' "noDBVersion");                              Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");                                Response.Write("<h2>Current Database Version: N/A</h2>");                              Response.Write("<br><br><h2><a href='Install.aspx?mode=Install'>Click Here To Install DotNetNuke</a></h2>");                              Response.Flush();                          }                          dr.Close();                      }                  }                  catch (Exception ex)                  {                      //Write out Header                      Logger.Error(ex);                      HtmlUtils.WriteHeader(Response' "error");                      Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");                        Response.Write("<h2>" + ex.Message + "</h2>");                      Response.Flush();                  }              }              else              {                  //Write out Header                  HtmlUtils.WriteHeader(Response' "error");                  Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");                    Response.Write("<h2>" + strProviderPath + "</h2>");                  Response.Flush();              }
Magic Number,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,NoUpgrade,The following statement contains a magic number: if (!strProviderPath.StartsWith("ERROR:"))              {                  //get current database version                  try                  {                      using (var dr = DataProvider.Instance().GetDatabaseVersion())                      {                          if (dr.Read())                          {                              //Write out Header                              HtmlUtils.WriteHeader(Response' "none");                              string currentAssembly = DotNetNukeContext.Current.Application.Version.ToString(3);                              string currentDatabase = dr["Major"] + "." + dr["Minor"] + "." + dr["Build"];                              //do not show versions if the same to stop information leakage                              if (currentAssembly == currentDatabase)                              {                                  Response.Write("<h2>Current Assembly Version && current Database Version are identical.</h2>");                              }                              else                              {                                  Response.Write("<h2>Current Assembly Version: " + currentAssembly + "</h2>");                                  //Call Upgrade with the current DB Version to upgrade an                                  //existing DNN installation                                  var strDatabaseVersion = ((int)dr["Major"]).ToString("00") + "." + ((int)dr["Minor"]).ToString("00") + "." + ((int)dr["Build"]).ToString("00");                                  Response.Write("<h2>Current Database Version: " + strDatabaseVersion + "</h2>");                              }                                Response.Write("<br><br><a href='Install.aspx?mode=Install'>Click Here To Upgrade DotNetNuke</a>");                              Response.Flush();                          }                          else                          {                              //Write out Header                              HtmlUtils.WriteHeader(Response' "noDBVersion");                              Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");                                Response.Write("<h2>Current Database Version: N/A</h2>");                              Response.Write("<br><br><h2><a href='Install.aspx?mode=Install'>Click Here To Install DotNetNuke</a></h2>");                              Response.Flush();                          }                          dr.Close();                      }                  }                  catch (Exception ex)                  {                      //Write out Header                      Logger.Error(ex);                      HtmlUtils.WriteHeader(Response' "error");                      Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");                        Response.Write("<h2>" + ex.Message + "</h2>");                      Response.Flush();                  }              }              else              {                  //Write out Header                  HtmlUtils.WriteHeader(Response' "error");                  Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");                    Response.Write("<h2>" + strProviderPath + "</h2>");                  Response.Flush();              }
Magic Number,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,NoUpgrade,The following statement contains a magic number: if (!strProviderPath.StartsWith("ERROR:"))              {                  //get current database version                  try                  {                      using (var dr = DataProvider.Instance().GetDatabaseVersion())                      {                          if (dr.Read())                          {                              //Write out Header                              HtmlUtils.WriteHeader(Response' "none");                              string currentAssembly = DotNetNukeContext.Current.Application.Version.ToString(3);                              string currentDatabase = dr["Major"] + "." + dr["Minor"] + "." + dr["Build"];                              //do not show versions if the same to stop information leakage                              if (currentAssembly == currentDatabase)                              {                                  Response.Write("<h2>Current Assembly Version && current Database Version are identical.</h2>");                              }                              else                              {                                  Response.Write("<h2>Current Assembly Version: " + currentAssembly + "</h2>");                                  //Call Upgrade with the current DB Version to upgrade an                                  //existing DNN installation                                  var strDatabaseVersion = ((int)dr["Major"]).ToString("00") + "." + ((int)dr["Minor"]).ToString("00") + "." + ((int)dr["Build"]).ToString("00");                                  Response.Write("<h2>Current Database Version: " + strDatabaseVersion + "</h2>");                              }                                Response.Write("<br><br><a href='Install.aspx?mode=Install'>Click Here To Upgrade DotNetNuke</a>");                              Response.Flush();                          }                          else                          {                              //Write out Header                              HtmlUtils.WriteHeader(Response' "noDBVersion");                              Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");                                Response.Write("<h2>Current Database Version: N/A</h2>");                              Response.Write("<br><br><h2><a href='Install.aspx?mode=Install'>Click Here To Install DotNetNuke</a></h2>");                              Response.Flush();                          }                          dr.Close();                      }                  }                  catch (Exception ex)                  {                      //Write out Header                      Logger.Error(ex);                      HtmlUtils.WriteHeader(Response' "error");                      Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");                        Response.Write("<h2>" + ex.Message + "</h2>");                      Response.Flush();                  }              }              else              {                  //Write out Header                  HtmlUtils.WriteHeader(Response' "error");                  Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");                    Response.Write("<h2>" + strProviderPath + "</h2>");                  Response.Flush();              }
Magic Number,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,NoUpgrade,The following statement contains a magic number: if (!strProviderPath.StartsWith("ERROR:"))              {                  //get current database version                  try                  {                      using (var dr = DataProvider.Instance().GetDatabaseVersion())                      {                          if (dr.Read())                          {                              //Write out Header                              HtmlUtils.WriteHeader(Response' "none");                              string currentAssembly = DotNetNukeContext.Current.Application.Version.ToString(3);                              string currentDatabase = dr["Major"] + "." + dr["Minor"] + "." + dr["Build"];                              //do not show versions if the same to stop information leakage                              if (currentAssembly == currentDatabase)                              {                                  Response.Write("<h2>Current Assembly Version && current Database Version are identical.</h2>");                              }                              else                              {                                  Response.Write("<h2>Current Assembly Version: " + currentAssembly + "</h2>");                                  //Call Upgrade with the current DB Version to upgrade an                                  //existing DNN installation                                  var strDatabaseVersion = ((int)dr["Major"]).ToString("00") + "." + ((int)dr["Minor"]).ToString("00") + "." + ((int)dr["Build"]).ToString("00");                                  Response.Write("<h2>Current Database Version: " + strDatabaseVersion + "</h2>");                              }                                Response.Write("<br><br><a href='Install.aspx?mode=Install'>Click Here To Upgrade DotNetNuke</a>");                              Response.Flush();                          }                          else                          {                              //Write out Header                              HtmlUtils.WriteHeader(Response' "noDBVersion");                              Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");                                Response.Write("<h2>Current Database Version: N/A</h2>");                              Response.Write("<br><br><h2><a href='Install.aspx?mode=Install'>Click Here To Install DotNetNuke</a></h2>");                              Response.Flush();                          }                          dr.Close();                      }                  }                  catch (Exception ex)                  {                      //Write out Header                      Logger.Error(ex);                      HtmlUtils.WriteHeader(Response' "error");                      Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");                        Response.Write("<h2>" + ex.Message + "</h2>");                      Response.Flush();                  }              }              else              {                  //Write out Header                  HtmlUtils.WriteHeader(Response' "error");                  Response.Write("<h2>Current Assembly Version: " + DotNetNukeContext.Current.Application.Version.ToString(3) + "</h2>");                    Response.Write("<h2>" + strProviderPath + "</h2>");                  Response.Flush();              }
Magic Number,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,LaunchUpgrade,The following statement contains a magic number: var percentForEachStep = 100 / _steps.Count;
Magic Number,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,LaunchUpgrade,The following statement contains a magic number: if (totalPercent != 100) useGenericPercent = true;
Magic Number,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,LaunchUpgrade,The following statement contains a magic number: _upgradeProgress = 100;
Magic Number,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,SslRequiredCheck,The following statement contains a magic number: if (Entities.Host.Host.UpgradeForceSsl && !Request.IsSecureConnection)              {                  var sslDomain = Entities.Host.Host.SslDomain;                  if (string.IsNullOrEmpty(sslDomain))                  {                      sslDomain = Request.Url.Host;                  }                  else if (sslDomain.Contains("://"))                  {                      sslDomain = sslDomain.Substring(sslDomain.IndexOf("://") + 3);                  }                    var sslUrl = string.Format("https://{0}{1}"'                      sslDomain' Request.RawUrl);                    Response.Redirect(sslUrl' true);              }
Magic Number,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,GetInstallationLog,The following statement contains a magic number: try              {                  var lines = File.ReadAllLines(Path.Combine(AppDomain.CurrentDomain.BaseDirectory' "Portals"' "_default"' "logs"' logFile));                  var errorLogged = false;                  if (lines.Length > startRow)                  {                      var count = lines.Length - startRow > 500 ? 500 : lines.Length - startRow;                      System.Text.StringBuilder sb = new System.Text.StringBuilder();                      for (var i = startRow; i < startRow + count; i++)                      {                          if (lines[i].Contains("[ERROR]"))                          {                              sb.Append(lines[i]);                              sb.Append("<br/>");                              errorLogged = true;                          }                      }                        data = sb.ToString();                  }                  if (errorLogged == false)                  {                      Localization.Localization.GetString("NoErrorsLogged"' "~/Install/App_LocalResources/InstallWizard.aspx.resx");                  }              }              catch (Exception)              {                  //ignore              }
Magic Number,DotNetNuke.Services.Install,UpgradeWizard,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\UpgradeWizard.aspx.cs,GetInstallationLog,The following statement contains a magic number: try              {                  var lines = File.ReadAllLines(Path.Combine(AppDomain.CurrentDomain.BaseDirectory' "Portals"' "_default"' "logs"' logFile));                  var errorLogged = false;                  if (lines.Length > startRow)                  {                      var count = lines.Length - startRow > 500 ? 500 : lines.Length - startRow;                      System.Text.StringBuilder sb = new System.Text.StringBuilder();                      for (var i = startRow; i < startRow + count; i++)                      {                          if (lines[i].Contains("[ERROR]"))                          {                              sb.Append(lines[i]);                              sb.Append("<br/>");                              errorLogged = true;                          }                      }                        data = sb.ToString();                  }                  if (errorLogged == false)                  {                      Localization.Localization.GetString("NoErrorsLogged"' "~/Install/App_LocalResources/InstallWizard.aspx.resx");                  }              }              catch (Exception)              {                  //ignore              }
Magic Number,DotNetNuke.Services.Install,WizardUser,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\WizardUser.ascx.cs,Validate,The following statement contains a magic number: if (txtUserName.Text.Length < 4)              {                  strErrorMessage = "MinUserNamelength";              }              else if (string.IsNullOrEmpty(txtPassword.Text))              {                  strErrorMessage = "NoPassword";              }              else if (txtUserName.Text == txtPassword.Text)              {                  strErrorMessage = "PasswordUser";              }              else if (txtPassword.Text.Length < MembershipProviderConfig.MinPasswordLength)              {                  strErrorMessage = "PasswordLength";              }              else if (txtPassword.Text != txtConfirm.Text)              {                  strErrorMessage = "ConfirmPassword";              }              else if (!Globals.EmailValidatorRegex.IsMatch(txtEmail.Text))              {                  strErrorMessage = "InValidEmail";              }
Duplicate Code,DotNetNuke.Modules.Admin.Users,Password,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Password.ascx.cs,cmdUpdate_Click,The method contains a code clone-set at the following line numbers (starting from the method definition): ((67' 88)' (94' 115))
Missing Default,DotNetNuke.UI.Containers,Visibility,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Containers\Visibility.ascx.cs,OnPreRender,The following switch statement is missing a default case: switch (ModuleControl.ModuleContext.Configuration.Visibility)                  {                      case VisibilityState.Maximized:                      case VisibilityState.Minimized:                          DNNClientAPI.EnableMinMax(cmdVisibility'                                                    ModuleContent'                                                    ModuleControl.ModuleContext.ModuleId'                                                    ModuleControl.ModuleContext.Configuration.Visibility == VisibilityState.Minimized'                                                    MinIconLoc'                                                    MaxIconLoc'                                                    DNNClientAPI.MinMaxPersistanceType.Cookie'                                                    AnimationFrames);                          break;                  }
Missing Default,DotNetNuke.Modules.Admin.Modules,ViewSource,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Modules\viewsource.ascx.cs,GetSourceFileName,The following switch statement is missing a default case: switch (cboFile.SelectedValue)              {                  case "UserControl":                      srcFile = srcPhysicalPath;                      break;                  case "CodeFile":                      if (File.Exists(srcPhysicalPath + ".vb"))                      {                          srcFile = srcPhysicalPath + ".vb";                      }                      else if (File.Exists(srcPhysicalPath + ".cs"))                      {                          srcFile = srcPhysicalPath + ".cs";                      }                      break;                  case "ResourceFile":                      var fileName = Path.GetFileName(srcPhysicalPath);                      var folder = Path.GetDirectoryName(srcPhysicalPath);                      srcFile = folder + "\\App_LocalResources\\" + fileName + ".resx";                      break;              }
Missing Default,DotNetNuke.Modules.Admin.Security,SecurityRoles,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\SecurityRoles.ascx.cs,GetDates,The following switch statement is missing a default case: switch (objRole.BillingFrequency)                      {                          case "D":                              expiryDate = DateTime.Now.AddDays(objRole.BillingPeriod);                              break;                          case "W":                              expiryDate = DateTime.Now.AddDays(objRole.BillingPeriod*7);                              break;                          case "M":                              expiryDate = DateTime.Now.AddMonths(objRole.BillingPeriod);                              break;                          case "Y":                              expiryDate = DateTime.Now.AddYears(objRole.BillingPeriod);                              break;                      }
Missing Default,DotNetNuke.UI.Skins.Controls,Language,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Language.ascx.cs,rptLanguages_ItemDataBound,The following switch statement is missing a default case: switch (e.Item.ItemType)                      {                          case ListItemType.Item:                              strTemplate = ItemTemplate;                              break;                          case ListItemType.AlternatingItem:                              if (!string.IsNullOrEmpty(AlternateTemplate))                              {                                  strTemplate = AlternateTemplate;                              }                              else                              {                                  strTemplate = ItemTemplate;                              }                              break;                          case ListItemType.Header:                              strTemplate = HeaderTemplate;                              break;                          case ListItemType.Footer:                              strTemplate = FooterTemplate;                              break;                          case ListItemType.Separator:                              strTemplate = SeparatorTemplate;                              break;                      }
Missing Default,DotNetNuke.UI.Skins.Controls,Links,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Links.ascx.cs,ProcessTab,The following switch statement is missing a default case: switch (strLevel)                  {                      case "same": //Render tabs on the same level as the current tab                      case "":                          if (objTab.ParentId == PortalSettings.ActiveTab.ParentId)                          {                              if (IncludeActiveTab || objTab.TabID != PortalSettings.ActiveTab.TabID)                              {                                  return AddLink(objTab.TabName' objTab.FullUrl' strCssClass);                              }                          }                          break;                      case "child": //Render the current tabs child tabs                          if (objTab.ParentId == PortalSettings.ActiveTab.TabID)                          {                              return AddLink(objTab.TabName' objTab.FullUrl' strCssClass);                          }                          break;                      case "parent": //Render the current tabs parenttab                          if (objTab.TabID == PortalSettings.ActiveTab.ParentId)                          {                              return AddLink(objTab.TabName' objTab.FullUrl' strCssClass);                          }                          break;                      case "root": //Render Root tabs                          if (objTab.Level == 0)                          {                              return AddLink(objTab.TabName' objTab.FullUrl' strCssClass);                          }                          break;                  }
Missing Default,DotNetNuke.UI.Skins.Controls,Search,C:\repos\dnnsoftware_Dnn.Platform\Website\admin\Skins\Search.ascx.cs,ExecuteSearch,The following switch statement is missing a default case: switch (searchType)                  {                      case "S":                          // site                          if (UseWebForSite)                          {                              strURL = SiteURL;                              if (!string.IsNullOrEmpty(strURL))                              {                                  strURL = strURL.Replace("[TEXT]"' Server.UrlEncode(searchText));                                  strURL = strURL.Replace("[DOMAIN]"' Request.Url.Host);                                  UrlUtils.OpenNewWindow(Page' GetType()' strURL);                              }                          }                          else                          {                              if (Host.UseFriendlyUrls)                              {                                  Response.Redirect(Globals.NavigateURL(searchTabId) + "?Search=" + Server.UrlEncode(searchText));                              }                              else                              {                                  Response.Redirect(Globals.NavigateURL(searchTabId) + "&Search=" + Server.UrlEncode(searchText));                              }                          }                          break;                      case "W":                          // web                          strURL = WebURL;                          if (!string.IsNullOrEmpty(strURL))                          {                              strURL = strURL.Replace("[TEXT]"' Server.UrlEncode(searchText));                              strURL = strURL.Replace("[DOMAIN]"' "");                              UrlUtils.OpenNewWindow(Page' GetType()' strURL);                          }                          break;                  }
Missing Default,DotNetNuke.Modules.Admin.Users,ProfileDefinitions,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs,OnInit,The following switch statement is missing a default case: switch (imageColumn.CommandName)                      {                          case "Delete":                              imageColumn.OnClickJS = Localization.GetString("DeleteItem");                              imageColumn.Text = Localization.GetString("Delete"' LocalResourceFile);                              break;                          case "Edit":                              //The Friendly URL parser does not like non-alphanumeric characters                              //so first create the format string with a dummy value and then                              //replace the dummy value with the FormatString place holder                              string formatString = EditUrl("PropertyDefinitionID"' "KEYFIELD"' "EditProfileProperty");                              formatString = formatString.Replace("KEYFIELD"' "{0}");                              imageColumn.NavigateURLFormatString = formatString;                              imageColumn.Text = Localization.GetString("Edit"' LocalResourceFile);                              break;                          case "MoveUp":                              imageColumn.Text = Localization.GetString("MoveUp"' LocalResourceFile);                              break;                          case "MoveDown":                              imageColumn.Text = Localization.GetString("MoveDown"' LocalResourceFile);                              break;                      }
Missing Default,DotNetNuke.Modules.Admin.Users,ProfileDefinitions,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs,grdProfileProperties_ItemCheckedChanged,The following switch statement is missing a default case: switch (propertyName)                      {                          case "Required":                              profProperty.Required = propertyValue;                              break;                          case "Visible":                              profProperty.Visible = propertyValue;                              break;                      }
Missing Default,DotNetNuke.Modules.Admin.Users,ProfileDefinitions,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs,grdProfileProperties_ItemCheckedChanged,The following switch statement is missing a default case: switch (propertyName)                  {                      case "Required":                          profileProperty.Required = propertyValue;                          break;                      case "Visible":                          profileProperty.Visible = propertyValue;                          break;                  }
Missing Default,DotNetNuke.Modules.Admin.Users,ProfileDefinitions,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs,grdProfileProperties_ItemCommand,The following switch statement is missing a default case: switch (e.CommandName)              {                  case "Delete":                      DeleteProperty(index);                      break;                  case "MoveUp":                      MovePropertyUp(index);                      break;                  case "MoveDown":                      MovePropertyDown(index);                      break;              }
Missing Default,DotNetNuke.Modules.Admin.Users,ProfileDefinitions,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\ProfileDefinitions.ascx.cs,grdProfileProperties_ItemCreated,The following switch statement is missing a default case: switch (e.Item.ItemType)                  {                      case ListItemType.Header:                          //we combined the header label and checkbox in same place' so it is control 1 instead of 0                                                 ((WebControl)e.Item.Cells[COLUMN_REQUIRED].Controls[1]).Attributes.Add("onclick"' "dnn.util.checkallChecked(this'" + COLUMN_REQUIRED + ");");                          ((CheckBox)e.Item.Cells[COLUMN_REQUIRED].Controls[1]).AutoPostBack = false;                            int column_visible = _requiredColumnHidden ? COLUMN_VISIBLE - 1 : COLUMN_VISIBLE;                          ((WebControl)e.Item.Cells[COLUMN_VISIBLE].Controls[1]).Attributes.Add("onclick"' "dnn.util.checkallChecked(this'" + column_visible + ");");                          ((CheckBox)e.Item.Cells[COLUMN_VISIBLE].Controls[1]).AutoPostBack = false;                          break;                      case ListItemType.AlternatingItem:                      case ListItemType.Item:                          ((CheckBox)e.Item.Cells[COLUMN_REQUIRED].Controls[0]).AutoPostBack = false;                          ((CheckBox)e.Item.Cells[COLUMN_VISIBLE].Controls[0]).AutoPostBack = false;                          ClientAPI.EnableClientSideReorder(e.Item.Cells[COLUMN_MOVE_DOWN].Controls[0]' Page' false' grdProfileProperties.ClientID);                          ClientAPI.EnableClientSideReorder(e.Item.Cells[COLUMN_MOVE_UP].Controls[0]' Page' true' grdProfileProperties.ClientID);                          break;                  }
Missing Default,DotNetNuke.Modules.Admin.Users,Register,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Security\Register.ascx.cs,OnLoad,The following switch statement is missing a default case: switch (PortalSettings.UserRegistration)  			{  				case (int)Globals.PortalRegistrationType.PrivateRegistration:  					userHelpLabel.Text += Localization.GetString("PrivateMembership"' Localization.SharedResourceFile);  					break;  				case (int)Globals.PortalRegistrationType.PublicRegistration:  					userHelpLabel.Text += Localization.GetString("PublicMembership"' Localization.SharedResourceFile);  					break;  				case (int)Globals.PortalRegistrationType.VerifiedRegistration:  					userHelpLabel.Text += Localization.GetString("VerifiedMembership"' Localization.SharedResourceFile);  					break;  			}
Missing Default,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,InitializePage,The following switch statement is missing a default case: switch (cacheability)              {                  case "0":                      Response.Cache.SetCacheability(HttpCacheability.NoCache);                      break;                  case "1":                      Response.Cache.SetCacheability(HttpCacheability.Private);                      break;                  case "2":                      Response.Cache.SetCacheability(HttpCacheability.Public);                      break;                  case "3":                      Response.Cache.SetCacheability(HttpCacheability.Server);                      break;                  case "4":                      Response.Cache.SetCacheability(HttpCacheability.ServerAndNoCache);                      break;                  case "5":                      Response.Cache.SetCacheability(HttpCacheability.ServerAndPrivate);                      break;              }
Missing Default,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,ParsePageCallBackArgs,The following switch statement is missing a default case: switch (                      (DNNClientAPI.PageCallBackType)Enum.Parse(typeof(DNNClientAPI.PageCallBackType)' objDict["type"]))                  {                      case DNNClientAPI.PageCallBackType.GetPersonalization:                          objDict.Add("namingcontainer"' aryVals[1]);                          objDict.Add("key"' aryVals[2]);                          break;                      case DNNClientAPI.PageCallBackType.SetPersonalization:                          objDict.Add("namingcontainer"' aryVals[1]);                          objDict.Add("key"' aryVals[2]);                          objDict.Add("value"' aryVals[3]);                          break;                  }
Missing Default,DotNetNuke.Framework,DefaultPage,C:\repos\dnnsoftware_Dnn.Platform\Website\Default.aspx.cs,RenderDefaultsWarning,The following switch statement is missing a default case: switch (warningLevel)              {                  case "1":                      warningMessage = Localization.GetString("InsecureAdmin.Text"' Localization.SharedResourceFile);                      break;                  case "2":                      warningMessage = Localization.GetString("InsecureHost.Text"' Localization.SharedResourceFile);                      break;                  case "3":                      warningMessage = Localization.GetString("InsecureDefaults.Text"' Localization.SharedResourceFile);                      break;              }
Missing Default,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,BindRegister,The following switch statement is missing a default case: switch (PortalSettings.UserRegistration)              {                  case (int)Globals.PortalRegistrationType.PrivateRegistration:                      lblRegisterHelp.Text += Localization.GetString("PrivateMembership"' Localization.SharedResourceFile);                      break;                  case (int)Globals.PortalRegistrationType.PublicRegistration:                      lblRegisterHelp.Text += Localization.GetString("PublicMembership"' Localization.SharedResourceFile);                      break;                  case (int)Globals.PortalRegistrationType.VerifiedRegistration:                      lblRegisterHelp.Text += Localization.GetString("VerifiedMembership"' Localization.SharedResourceFile);                      break;              }
Missing Default,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ShowPanel,The following switch statement is missing a default case: switch (PageNo)              {                  case 0:                      BindLogin();                      break;                  case 1:                      BindRegister();                      break;                  case 2:                      ctlPassword.UserId = UserId;                      ctlPassword.DataBind();                      break;                  case 3:                      ctlProfile.UserId = UserId;                      ctlProfile.DataBind();                      break;              }
Missing Default,DotNetNuke.Modules.Admin.Authentication,Login,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\Authentication\Login.ascx.cs,ValidateUser,The following switch statement is missing a default case: switch (validStatus)              {                  case UserValidStatus.VALID:                      //check if the user is an admin/host and validate their IP                      if (Host.EnableIPChecking)                      {                          bool isAdminUser = objUser.IsSuperUser || objUser.IsInRole(PortalSettings.AdministratorRoleName);                          if (isAdminUser)                          {                              if (IPFilterController.Instance.IsIPBanned(Request.UserHostAddress))                              {                                  PortalSecurity.Instance.SignOut();                                  AddModuleMessage("IPAddressBanned"' ModuleMessage.ModuleMessageType.RedError' true);                                  okToShowPanel = false;                                  break;                              }                          }                      }                        //Set the Page Culture(Language) based on the Users Preferred Locale                      if ((objUser.Profile != null) && (objUser.Profile.PreferredLocale != null) && LocaleEnabled(objUser.Profile.PreferredLocale))                      {                          Localization.SetLanguage(objUser.Profile.PreferredLocale);                      }                      else                      {                          Localization.SetLanguage(PortalSettings.DefaultLanguage);                      }                        //Set the Authentication Type used                       AuthenticationController.SetAuthenticationType(AuthenticationType);                        //Complete Login                      UserController.UserLogin(PortalId' objUser' PortalSettings.PortalName' AuthenticationLoginBase.GetIPAddress()' RememberMe);                        //redirect browser                      var redirectUrl = RedirectURL;                        //Clear the cookie                      HttpContext.Current.Response.Cookies.Set(new HttpCookie("returnurl"' "")                      {                          Expires = DateTime.Now.AddDays(-1)'                          Path = (!string.IsNullOrEmpty(Globals.ApplicationPath) ? Globals.ApplicationPath : "/")                      });                        Response.Redirect(redirectUrl' true);                      break;                  case UserValidStatus.PASSWORDEXPIRED:                      strMessage = string.Format(Localization.GetString("PasswordExpired"' LocalResourceFile)' expiryDate.ToLongDateString());                      AddLocalizedModuleMessage(strMessage' ModuleMessage.ModuleMessageType.YellowWarning' true);                      PageNo = 2;                      pnlProceed.Visible = false;                      break;                  case UserValidStatus.PASSWORDEXPIRING:                      strMessage = string.Format(Localization.GetString("PasswordExpiring"' LocalResourceFile)' expiryDate.ToLongDateString());                      AddLocalizedModuleMessage(strMessage' ModuleMessage.ModuleMessageType.YellowWarning' true);                      PageNo = 2;                      pnlProceed.Visible = true;                      break;                  case UserValidStatus.UPDATEPASSWORD:                      var portalAlias = Globals.AddHTTP(PortalSettings.PortalAlias.HTTPAlias);                      if (MembershipProviderConfig.PasswordRetrievalEnabled || MembershipProviderConfig.PasswordResetEnabled)                      {                          UserController.ResetPasswordToken(User);                          objUser = UserController.GetUserById(objUser.PortalID' objUser.UserID);                      }                      var redirTo = string.Format("{0}/default.aspx?ctl=PasswordReset&resetToken={1}&forced=true"' portalAlias' objUser.PasswordResetToken);                      Response.Redirect(redirTo);                      break;                  case UserValidStatus.UPDATEPROFILE:                      //Save UserID in ViewState so that can update profile later.                      UserId = objUser.UserID;                        //When the user need update its profile to complete login' we need clear the login status because if the logrin is from                      //3rd party login provider' it may call UserController.UserLogin because they doesn't check this situation.                      PortalSecurity.Instance.SignOut();                      //Admin has forced profile update                      AddModuleMessage("ProfileUpdate"' ModuleMessage.ModuleMessageType.YellowWarning' true);                      PageNo = 3;                      break;              }
Missing Default,DotNetNuke.Modules.Admin.EditExtension,EditExtension,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\EditExtension\EditExtension.ascx.cs,BindData,The following switch statement is missing a default case: switch (Mode)              {                  case "All":                      lblHelp.Text = Localization.GetString("EditHelp"' LocalResourceFile);                      cmdUpdate.Text = Localization.GetString("cmdUpdate"' LocalResourceFile);                      break;                  case "LanguagePack":                      lblHelp.Text = Localization.GetString("EditLanguageHelp"' LocalResourceFile);                      cmdUpdate.Text = Localization.GetString("cmdUpdateLanguage"' LocalResourceFile);                      break;                  case "Module":                      lblHelp.Text = Localization.GetString("EditModuleHelp"' LocalResourceFile);                      cmdUpdate.Text = Localization.GetString("cmdUpdateModule"' LocalResourceFile);                      break;                  case "Skin":                      lblHelp.Text = Localization.GetString("EditSkinHelp"' LocalResourceFile);                      cmdUpdate.Text = Localization.GetString("cmdUpdateSkin"' LocalResourceFile);                      break;              }
Missing Default,DotNetNuke.Modules.Admin.EditExtension,EditExtension,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\EditExtension\EditExtension.ascx.cs,OnLoad,The following switch statement is missing a default case: switch (DisplayMode)                 {                     case "editor":                         packageSettingsSection.Visible = false;                         break;                     case "settings":                         extensionSection.Visible = false;                         break;                 }
Missing Default,DotNetNuke.Modules.Admin.EditExtension,EditExtension,C:\repos\dnnsoftware_Dnn.Platform\Website\DesktopModules\Admin\EditExtension\EditExtension.ascx.cs,OnLoad,The following switch statement is missing a default case: switch (DisplayMode)             {                 case "editor":                     cmdCancel.Visible = cmdCancel.Enabled = false;                     cmdUpdate.Visible = cmdUpdate.Enabled = false;                     cmdPackage.Visible = cmdPackage.Enabled = false;                     cmdDelete.Visible = cmdDelete.Enabled = false;                     break;                 case "settings":                     cmdCancel.Visible = cmdCancel.Enabled = false;                     break;             }
Missing Default,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,OnLoad,The following switch statement is missing a default case: switch (Globals.Status)                  {                      case Globals.UpgradeStatus.Install:                          InstallApplication();                            //Force an App Restart                          Config.Touch();                          break;                      case Globals.UpgradeStatus.Upgrade:                          UpgradeApplication();                            //Force an App Restart                          Config.Touch();                          break;                      case Globals.UpgradeStatus.None:                          //Check mode                          switch (mode)                          {                              case "addportal":                                  AddPortal();                                  break;                              case "installresources":                                  InstallResources();                                  break;                              case "executescripts":                                  ExecuteScripts();                                  break;                          }                          break;                      case Globals.UpgradeStatus.Error:                          NoUpgrade();                          break;                  }
Missing Default,DotNetNuke.Services.Install,Install,C:\repos\dnnsoftware_Dnn.Platform\Website\Install\Install.aspx.cs,OnLoad,The following switch statement is missing a default case: switch (mode)                          {                              case "addportal":                                  AddPortal();                                  break;                              case "installresources":                                  InstallResources();                                  break;                              case "executescripts":                                  ExecuteScripts();                                  break;                          }
