Implementation smell,Namespace,Class,File,Method,Description
Long Method,DotNetNuke.Web.DDRMenu.TemplateEngine,TemplateDefinition,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\TemplateEngine\TemplateDefinition.cs,FromManifest,The method has 145 lines of code.
Long Method,DotNetNuke.Web.DDRMenu.TemplateEngine,TokenTemplateProcessor,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\TemplateEngine\TokenTemplateProcessor.cs,LoadDefinition,The method has 114 lines of code.
Complex Method,DotNetNuke.Web.DDRMenu,Controller,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\Controller.cs,RemoveLegacyModuleDefinitions,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Web.DDRMenu,DDRMenuNavigationProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\DDRMenuNavigationProvider.cs,Bind,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Web.DDRMenu,MenuBase,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\MenuBase.cs,PreRender,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Web.DDRMenu,MenuBase,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\MenuBase.cs,ApplyNodeSelector,Cyclomatic complexity of the method is 13
Complex Method,DotNetNuke.Web.DDRMenu.DNNCommon,PathResolver,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\Common\PathResolver.cs,Resolve,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Web.DDRMenu.Localisation,Generic,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\Localisation\Generic.cs,HaveApi,Cyclomatic complexity of the method is 8
Complex Method,DotNetNuke.Web.DDRMenu.TemplateEngine,TemplateDefinition,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\TemplateEngine\TemplateDefinition.cs,FromManifest,Cyclomatic complexity of the method is 8
Long Statement,DotNetNuke.Web.DDRMenu,Controller,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\Controller.cs,ImportModule,The length of the statement  "			ModuleController.Instance.UpdateModuleSetting(moduleId' "TemplateArguments"' Settings.ToSettingString(settings.TemplateArguments)); " is 131.
Long Statement,DotNetNuke.Web.DDRMenu,Controller,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\Controller.cs,ImportModule,The length of the statement  "			ModuleController.Instance.UpdateModuleSetting(moduleId' "ClientOptions"' Settings.ToSettingString(settings.ClientOptions)); " is 123.
Long Statement,DotNetNuke.Web.DDRMenu,MenuSettings,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\MenuSettings.ascx.cs,UpdateSettings,The length of the statement  "			ModuleController.Instance.UpdateModuleSetting(ModuleId' "IncludeContext"' (IncludeContext.Value ?? "false").ToString()); " is 120.
Long Statement,DotNetNuke.Web.DDRMenu,MenuSettings,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\MenuSettings.ascx.cs,UpdateSettings,The length of the statement  "			ModuleController.Instance.UpdateModuleSetting(ModuleId' "TemplateArguments"' (TemplateArguments.Value ?? "").ToString()); " is 121.
Long Statement,DotNetNuke.Web.DDRMenu,DNNAbstract,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\DNNAbstract.cs,SupportedTemplateProcessors,The length of the statement  "			return new ITemplateProcessor[] { new TokenTemplateProcessor()' new RazorTemplateProcessor()' new XsltTemplateProcessor()}; " is 123.
Long Statement,DotNetNuke.Web.DDRMenu.Localisation,Ealo,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\Localisation\Ealo.cs,HaveApi,The length of the statement  "				found = (DesktopModuleController.GetDesktopModuleByModuleName("effority.Ealo.Tabs"' PortalSettings.Current.PortalId) != null); " is 126.
Long Statement,DotNetNuke.Web.DDRMenu.Localisation,Generic,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\Localisation\Generic.cs,HaveApi,The length of the statement  "                            locApi = Reflection.CreateObject(moduleKeyPair.Value.BusinessControllerClass' moduleKeyPair.Value.BusinessControllerClass); " is 123.
Long Statement,DotNetNuke.Web.DDRMenu.TemplateEngine,TemplateDefinition,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\TemplateEngine\TemplateDefinition.cs,CreateScript,The length of the statement  "					         	@"<script type=""text/javascript"">if (!window.DDRjQuery) {{if (window.jQuery && (jQuery.fn.jquery>=""1.3"")) DDRjQuery=jQuery; else document.write(unescape('%3Cscript src=""{0}"" type=""text/javascript""%3E%3C/script%3E'));}}</script><script type=""text/javascript"">if (!window.DDRjQuery) DDRjQuery=jQuery.noConflict(true);</script>"' " is 336.
Long Statement,DotNetNuke.Web.DDRMenu.TemplateEngine,TemplateDefinition,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\TemplateEngine\TemplateDefinition.cs,CreateScript,The length of the statement  "					         	@"<script type=""text/javascript"">if (!({0})) document.write(unescape('%3Cscript src=""{1}"" type=""text/javascript""%3E%3C/script%3E'));</script>"' " is 149.
Complex Conditional,DotNetNuke.Web.DDRMenu,MenuBase,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\MenuBase.cs,FilterNodes,The conditional expression  "perm.AllowAccess && (perm.PermissionKey == "VIEW") &&  										((perm.RoleID == -1) || (perm.RoleName.ToLowerInvariant() == roleName))"  is complex.
Empty Catch Block,DotNetNuke.Web.DDRMenu,Controller,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\Controller.cs,CheckSkinReferences,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Web.DDRMenu,Controller,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\Controller.cs,CheckSkinReferences,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Web.DDRMenu,Controller,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\Controller.cs,CheckSkinReferences,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Web.DDRMenu.Localisation,Apollo,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\Localisation\Apollo.cs,HaveApi,The method has an empty catch block.
Empty Catch Block,DotNetNuke.Web.DDRMenu.Localisation,Generic,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\Localisation\Generic.cs,HaveApi,The method has an empty catch block.
Magic Number,DotNetNuke.Web.DDRMenu,MenuBase,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\MenuBase.cs,FilterNodes,The following statement contains a magic number: foreach (var nodeText in nodeTextStrings)  			{  				if (nodeText.StartsWith("["))  				{  					var roleName = nodeText.Substring(1' nodeText.Length - 2);  					filteredNodes.AddRange(  						RootNode.Children.FindAll(  							n =>  							{                                  var tab = TabController.Instance.GetTab(n.TabId' Null.NullInteger' false);  								foreach (TabPermissionInfo perm in tab.TabPermissions)  								{  									if (perm.AllowAccess && (perm.PermissionKey == "VIEW") &&  										((perm.RoleID == -1) || (perm.RoleName.ToLowerInvariant() == roleName)))  									{  										return true;  									}  								}  								return false;  							}));  				}                   else if (nodeText.StartsWith("#"))  			    {                      var tagName = nodeText.Substring(1' nodeText.Length - 1);  			        if (!string.IsNullOrEmpty(tagName))  			        {                          //flatten nodes first. tagged pages should be flattened and not heirarchical                          if (flattenedNodes != new MenuNode())  			                flattenedNodes.Children = RootNode.FlattenChildren(RootNode);                            filteredNodes.AddRange(                              flattenedNodes.Children.FindAll(                                  n =>                                  {                                      var tab = tc.GetTab(n.TabId' Null.NullInteger' false);                                      return (tab.Terms.Any(x => x.Name.ToLower() == tagName));                                  }));  			        }    			    }  				else  				{  					var nodeText2 = nodeText;  					filteredNodes.AddRange(  						RootNode.Children.FindAll(  							n =>  							{  								var nodeName = n.Text.ToLowerInvariant();  								var nodeId = n.TabId.ToString();  								return (nodeText2 == nodeName || nodeText2 == nodeId);  							}));  				}  			}
Magic Number,DotNetNuke.Web.DDRMenu,MenuBase,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\MenuBase.cs,ApplyNodeSelector,The following statement contains a magic number: if (selectorSplit.Count > 2)  			{  				var newChildren = RootNode.Children;  				for (var n = Convert.ToInt32(selectorSplit[2]); n > 0; n--)  				{  					var nextChildren = new List<MenuNode>();  					foreach (var child in newChildren)  					{  						nextChildren.AddRange(child.Children);  					}  					newChildren = nextChildren;  				}  				foreach (var node in newChildren)  				{  					node.Children = null;  				}  			}
Magic Number,DotNetNuke.Web.DDRMenu,MenuBase,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\MenuBase.cs,ApplyNodeSelector,The following statement contains a magic number: if (selectorSplit.Count > 2)  			{  				var newChildren = RootNode.Children;  				for (var n = Convert.ToInt32(selectorSplit[2]); n > 0; n--)  				{  					var nextChildren = new List<MenuNode>();  					foreach (var child in newChildren)  					{  						nextChildren.AddRange(child.Children);  					}  					newChildren = nextChildren;  				}  				foreach (var node in newChildren)  				{  					node.Children = null;  				}  			}
Magic Number,DotNetNuke.Web.DDRMenu,MenuNode,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\MenuNode.cs,ApplyContext,The following statement contains a magic number: if (Url != null && Url.StartsWith("postback:"))              {                  var postbackControl = DNNContext.Current.HostControl;                  Url = postbackControl.Page.ClientScript.GetPostBackClientHyperlink(postbackControl' Url.Substring(9));              }
Missing Default,DotNetNuke.Web.DDRMenu,MenuNode,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\MenuNode.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name.ToLowerInvariant())                      {                          case "id":                              TabId = Convert.ToInt32(reader.Value);                              break;                          case "text":                              Text = reader.Value;                              break;                          case "title":                              Title = reader.Value;                              break;                          case "url":                              Url = reader.Value;                              break;                          case "enabled":                              Enabled = (reader.Value == "1");                              break;                          case "selected":                              Selected = (reader.Value == "1");                              break;                          case "breadcrumb":                              Breadcrumb = (reader.Value == "1");                              break;                          case "separator":                              Separator = (reader.Value == "1");                              break;                          case "icon":                              Icon = reader.Value;                              break;                          case "largeimage":                              LargeImage = reader.Value;                              break;                          case "commandname":                              CommandName = reader.Value;                              break;                          case "commandargument":                              CommandArgument = reader.Value;                              break;                          case "target":                              Target = reader.Value;                              break;                          //default:                          //    throw new XmlException(String.Format("Unexpected attribute '{0}'"' reader.Name));                      }
Missing Default,DotNetNuke.Web.DDRMenu.DNNCommon,PathResolver,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DDRMenu\Common\PathResolver.cs,Resolve,The following switch statement is missing a default case: switch (root)  					{  						case RelativeTo.Container:  							var container = context.HostControl;  							while ((container != null) && !(container is UI.Containers.Container))  							{  								container = container.Parent;  							}  							var containerRoot = (container == null)  							                    	? context.SkinPath  // ReSharper disable PossibleNullReferenceException  													: Path.GetDirectoryName(((UI.Containers.Container)container).AppRelativeVirtualPath).Replace(  // ReSharper restore PossibleNullReferenceException  														'\\'' '/') + "/";  							resolvedPath = Path.Combine(containerRoot' path);  							break;  						case RelativeTo.Dnn:  							resolvedPath = Path.Combine("~/"' path);  							break;  						case RelativeTo.Manifest:  							if (!string.IsNullOrEmpty(manifestFolder))  							{  								resolvedPath = Path.Combine(manifestFolder + "/"' path);  							}  							break;  						case RelativeTo.Module:  							resolvedPath = Path.Combine(DNNContext.ModuleFolder' path);  							break;  						case RelativeTo.Portal:  							resolvedPath = Path.Combine(context.PortalSettings.HomeDirectory' path);  							break;  						case RelativeTo.Skin:  							resolvedPath = Path.Combine(context.SkinPath' path);  							break;  					}
