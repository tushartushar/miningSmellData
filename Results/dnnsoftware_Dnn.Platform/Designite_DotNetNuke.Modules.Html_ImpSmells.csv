Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,CreateUserNotifications,Cyclomatic complexity of the method is 18
Complex Method,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,GetWorkflow,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,UpdateWorkflow,Cyclomatic complexity of the method is 16
Complex Method,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,UpgradeModule,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnLoad,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnSaveClick,Cyclomatic complexity of the method is 14
Complex Method,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnVersionsGridItemCommand,Cyclomatic complexity of the method is 19
Complex Method,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnVersionsGridItemDataBound,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Modules.Html,HtmlModule,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\HtmlModule.ascx.cs,OnLoad,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Modules.Html,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Settings.ascx.cs,UpdateSettings,Cyclomatic complexity of the method is 12
Long Parameter List,DotNetNuke.Modules.Html.Components,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\DataProvider.cs,AddHtmlText,The method has 7 parameters.
Long Parameter List,DotNetNuke.Modules.Html.Components,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\DataProvider.cs,UpdateHtmlText,The method has 6 parameters.
Long Parameter List,DotNetNuke.Modules.Html.Components,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\DataProvider.cs,AddHtmlTextLog,The method has 5 parameters.
Long Parameter List,DotNetNuke.Modules.Html.Components,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\DataProvider.cs,AddHtmlTextUser,The method has 5 parameters.
Long Parameter List,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,FormatHtmlText,The method has 5 parameters.
Long Identifier,DotNetNuke.Security.Permissions,WorkflowStatePermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\WorkflowStatePermissionCollection.cs,CompareTo,The length of the parameter objWorkflowStatePermissionCollection is 36.
Long Statement,DotNetNuke.Security.Permissions,CompareWorkflowStatePermissions,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\CompareWorkflowStatePermissions.cs,Compare,The length of the statement  "	return ((WorkflowStatePermissionInfo)x).WorkflowStatePermissionID.CompareTo (((WorkflowStatePermissionInfo)y).WorkflowStatePermissionID); " is 137.
Long Statement,DotNetNuke.Security.Permissions,WorkflowStatePermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\WorkflowStatePermissionCollection.cs,Add,The length of the statement  "			if (permission.PermissionID == value.PermissionID && permission.UserID == value.UserID && permission.RoleID == value.RoleID) { " is 126.
Long Statement,DotNetNuke.Security.Permissions,WorkflowStatePermissionCollection,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\WorkflowStatePermissionCollection.cs,CompareTo,The length of the statement  "		if (objWorkflowStatePermissionCollection [i].WorkflowStatePermissionID != this [i].WorkflowStatePermissionID || objWorkflowStatePermissionCollection [i].AllowAccess != this [i].AllowAccess) { " is 191.
Long Statement,DotNetNuke.Security.Permissions,WorkflowStatePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\WorkflowStatePermissionController.cs,GetWorkflowStatePermissions,The length of the statement  "	return CBO.GetCachedObject<Dictionary<int' WorkflowStatePermissionCollection>> (new CacheItemArgs (WorkflowStatePermissionCacheKey' WorkflowStatePermissionCachePriority)' GetWorkflowStatePermissionsCallBack); " is 208.
Long Statement,DotNetNuke.Security.Permissions,WorkflowStatePermissionController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\WorkflowStatePermissionController.cs,GetWorkflowStatePermissions,The length of the statement  "		WorkflowStatePermissions = new WorkflowStatePermissionCollection (CBO.FillCollection (provider.GetWorkflowStatePermissionsByStateID (StateID)' typeof(WorkflowStatePermissionInfo))' StateID); " is 190.
Long Statement,DotNetNuke.Security.Permissions,WorkflowStatePermissionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\WorkflowStatePermissionInfo.cs,Equals,The length of the statement  "	return (AllowAccess == other.AllowAccess) && (StateID == other.StateID) && (RoleID == other.RoleID) && (PermissionID == other.PermissionID); " is 140.
Long Statement,DotNetNuke.Modules.Html.Components,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\DataProvider.cs,AddHtmlText,The length of the statement  "	return DotNetNuke.Data.DataProvider.Instance ().ExecuteScalar<int> ("AddHtmlText"' ModuleID' Content' Summary' StateID' IsPublished' CreatedByUserID' History); " is 159.
Long Statement,DotNetNuke.Modules.Html.Components,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\DataProvider.cs,UpdateHtmlText,The length of the statement  "	DotNetNuke.Data.DataProvider.Instance ().ExecuteNonQuery ("UpdateHtmlText"' ItemID' Content' Summary' StateID' IsPublished' LastModifiedByUserID); " is 146.
Long Statement,DotNetNuke.Modules.Html.Components,DataProvider,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\DataProvider.cs,AddHtmlTextLog,The length of the statement  "	DotNetNuke.Data.DataProvider.Instance ().ExecuteNonQuery ("AddHtmlTextLog"' ItemID' StateID' Comment' Approved' CreatedByUserID); " is 129.
Long Statement,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,CreateUserNotifications,The length of the statement  "	if (objHtmlText.StateID != objWorkflow.GetFirstWorkflowStateID (objHtmlText.WorkflowID) && objHtmlText.IsPublished == false) { " is 126.
Long Statement,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,CreateUserNotifications,The length of the statement  "		foreach (WorkflowStatePermissionInfo permission in WorkflowStatePermissionController.GetWorkflowStatePermissions (objHtmlText.StateID)) { " is 137.
Long Statement,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,CreateUserNotifications,The length of the statement  "						foreach (UserRoleInfo objUserRole in RoleController.Instance.GetUserRoles (objHtmlText.PortalID' null' objRole.RoleName)) { " is 123.
Long Statement,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,CreateUserNotifications,The length of the statement  "			string strResourceFile = string.Format ("{0}/DesktopModules/{1}/{2}/{3}"' Globals.ApplicationPath' objModule.DesktopModule.FolderName' Localization.LocalResourceDirectory' Localization.LocalSharedResourceFile); " is 210.
Long Statement,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,GetTopHtmlText,The length of the statement  "			htmlText.StateID = htmlText.IsPublished ? workflowStateController.GetLastWorkflowStateID (workflowId) : workflowStateController.GetFirstWorkflowStateID (workflowId); " is 165.
Long Statement,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,The length of the statement  "				if (!strURL.StartsWith ("/") && !String.IsNullOrEmpty (strURL.Trim ()))//We don't write the UploadDirectory if the token/attribute has not value. Therefore we will avoid an unnecessary request " is 192.
Long Statement,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,UpdateHtmlText,The length of the statement  "		htmlContent.ItemID = DataProvider.Instance ().AddHtmlText (htmlContent.ModuleID' htmlContent.Content' htmlContent.Summary' htmlContent.StateID' htmlContent.IsPublished' UserController.Instance.GetCurrentUserInfo ().UserID' MaximumVersionHistory); " is 246.
Long Statement,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,UpdateHtmlText,The length of the statement  "		DataProvider.Instance ().UpdateHtmlText (htmlContent.ItemID' htmlContent.Content' htmlContent.Summary' htmlContent.StateID' htmlContent.IsPublished' UserController.Instance.GetCurrentUserInfo ().UserID); " is 203.
Long Statement,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,GetModifiedSearchDocuments,The length of the statement  "	if (htmlTextInfo != null && (htmlTextInfo.LastModifiedOnDate.ToUniversalTime () > beginDateUtc && htmlTextInfo.LastModifiedOnDate.ToUniversalTime () < DateTime.UtcNow)) { " is 170.
Long Statement,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,GetModifiedSearchDocuments,The length of the statement  "		var description = strContent.Length <= settings.SearchDescLength ? strContent : HtmlUtils.Shorten (strContent' settings.SearchDescLength' "..."); " is 145.
Long Statement,DotNetNuke.Modules.Html,HtmlTextLogController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextLogController.cs,AddHtmlTextLog,The length of the statement  "	DataProvider.Instance ().AddHtmlTextLog (objHtmlTextLog.ItemID' objHtmlTextLog.StateID' objHtmlTextLog.Comment' objHtmlTextLog.Approved' UserController.Instance.GetCurrentUserInfo ().UserID); " is 191.
Long Statement,DotNetNuke.Modules.Html,HtmlTextUserController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextUserController.cs,AddHtmlTextUser,The length of the statement  "	DataProvider.Instance ().AddHtmlTextUser (objHtmlTextUser.ItemID' objHtmlTextUser.StateID' objHtmlTextUser.ModuleID' objHtmlTextUser.TabID' objHtmlTextUser.UserID); " is 164.
Long Statement,DotNetNuke.Modules.Html,WorkflowStateController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\WorkflowStateController.cs,GetWorkflowStates,The length of the statement  "	return CBO.GetCachedObject<ArrayList> (new CacheItemArgs (cacheKey' WORKFLOW_CACHE_TIMEOUT' WORKFLOW_CACHE_PRIORITY' WorkflowID)' GetWorkflowStatesCallBack); " is 157.
Long Statement,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,DisplayMasterLanguageContent,The length of the statement  "			placeMasterContent.Controls.Add (new LiteralControl (HtmlTextController.FormatHtmlText (objModule.DefaultLanguageModule.ModuleID' FormatContent (masterContent.Content)' Settings' PortalSettings' Page))); " is 203.
Long Statement,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,DisplayMasterContentButton,The length of the statement  "		cmdMasterContent.Text = phMasterContent.Visible ? Localization.GetString ("cmdHideMasterContent"' LocalResourceFile) : Localization.GetString ("cmdShowMasterContent"' LocalResourceFile); " is 186.
Long Statement,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,DisplayLockedContent,The length of the statement  "	litCurrentContentPreview.Text = HtmlTextController.FormatHtmlText (ModuleId' htmlContent.Content' Settings' PortalSettings' Page); " is 130.
Long Statement,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,UserCanReview,The length of the statement  "	return (htmlContent != null) && WorkflowStatePermissionController.HasWorkflowStatePermission (WorkflowStatePermissionController.GetWorkflowStatePermissions (htmlContent.StateID)' "REVIEW"); " is 189.
Long Statement,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnSaveClick,The length of the statement  "		var aliases = from PortalAliasInfo pa in PortalAliasController.Instance.GetPortalAliasesByPortalId (PortalSettings.PortalId) " is 124.
Long Statement,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnMasterContentClick,The length of the statement  "		cmdMasterContent.Text = phMasterContent.Visible ? Localization.GetString ("cmdHideMasterContent"' LocalResourceFile) : Localization.GetString ("cmdShowMasterContent"' LocalResourceFile); " is 186.
Long Statement,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnVersionsGridItemDataBound,The length of the statement  "						msg = msg.Replace ("[VERSION]"' htmlContent.Version.ToString ()).Replace ("[STATE]"' htmlContent.StateName).Replace ("[DATECREATED]"' htmlContent.CreatedOnDate.ToString ()).Replace ("[USERNAME]"' createdBy); " is 207.
Long Statement,DotNetNuke.Modules.Html,HtmlModule,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\HtmlModule.ascx.cs,OnLoad,The length of the statement  "		lblContent.Controls.Add (new LiteralControl (HtmlTextController.FormatHtmlText (ModuleId' contentString' Settings' PortalSettings' Page))); " is 139.
Long Statement,DotNetNuke.Modules.Html,MyWork,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\MyWork.ascx.cs,FormatURL,The length of the statement  "	return "<a href=\"" + Globals.NavigateURL (objHtmlTextUser.TabID) + "#" + objHtmlTextUser.ModuleID + "\">" + objHtmlTextUser.ModuleTitle + " ( " + objHtmlTextUser.StateName + " )</a>"; " is 184.
Long Statement,DotNetNuke.Modules.Html,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Settings.ascx.cs,UpdateSettings,The length of the statement  "			htmlTextController.UpdateWorkflow (ModuleId' rblApplyTo.SelectedValue' Int32.Parse (cboWorkflow.SelectedValue)' chkReplace.Checked); " is 132.
Long Statement,DotNetNuke.Modules.Html,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Settings.ascx.cs,UpdateSettings,The length of the statement  "			htmlTextController.UpdateWorkflow (TabId' rblApplyTo.SelectedValue' Int32.Parse (cboWorkflow.SelectedValue)' chkReplace.Checked); " is 129.
Long Statement,DotNetNuke.Modules.Html,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Settings.ascx.cs,UpdateSettings,The length of the statement  "			htmlTextController.UpdateWorkflow (PortalId' rblApplyTo.SelectedValue' Int32.Parse (cboWorkflow.SelectedValue)' chkReplace.Checked); " is 132.
Magic Number,DotNetNuke.Security.Permissions,WorkflowStatePermissionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\WorkflowStatePermissionInfo.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (_StateID * 397) ^ _WorkflowStatePermissionID;  }  
Magic Number,DotNetNuke.Security.Permissions,WorkflowStatePermissionInfo,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\WorkflowStatePermissionInfo.cs,GetHashCode,The following statement contains a magic number: return (_StateID * 397) ^ _WorkflowStatePermissionID;  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,The following statement contains a magic number: if (!string.IsNullOrEmpty (strHTML)) {  	tLen = strToken.Length + 2;  	string uploadDirectory = strUploadDirectory.ToLower ();  	//find position of first occurrance:  	P = strHTML.IndexOf (strToken + "=\""' StringComparison.InvariantCultureIgnoreCase);  	while (P != -1) {  		sbBuff.Append (strHTML.Substring (S' P - S + tLen));  		//keep charactes left of URL  		S = P + tLen;  		//save startpos of URL  		R = strHTML.IndexOf ("\""' S);  		//end of URL  		if (R >= 0) {  			strURL = strHTML.Substring (S' R - S).ToLower ();  		} else {  			strURL = strHTML.Substring (S).ToLower ();  		}  		if (strHTML.Substring (P + tLen' 10).Equals ("data:image"' StringComparison.InvariantCultureIgnoreCase)) {  			P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  			continue;  		}  		// if we are linking internally  		if (!strURL.Contains ("://")) {  			// remove the leading portion of the path if the URL contains the upload directory structure  			string strDirectory = uploadDirectory;  			if (!strDirectory.EndsWith ("/")) {  				strDirectory += "/";  			}  			if (strURL.IndexOf (strDirectory) != -1) {  				S = S + strURL.IndexOf (strDirectory) + strDirectory.Length;  				strURL = strURL.Substring (strURL.IndexOf (strDirectory) + strDirectory.Length);  			}  			// add upload directory  			if (!strURL.StartsWith ("/") && !String.IsNullOrEmpty (strURL.Trim ()))//We don't write the UploadDirectory if the token/attribute has not value. Therefore we will avoid an unnecessary request  			 {  				sbBuff.Append (uploadDirectory);  			}  		}  		//find position of next occurrance  		P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  	}  	if (S > -1) {  		sbBuff.Append (strHTML.Substring (S));  	}  	//append characters of last URL and behind  }  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,The following statement contains a magic number: if (!string.IsNullOrEmpty (strHTML)) {  	tLen = strToken.Length + 2;  	string uploadDirectory = strUploadDirectory.ToLower ();  	//find position of first occurrance:  	P = strHTML.IndexOf (strToken + "=\""' StringComparison.InvariantCultureIgnoreCase);  	while (P != -1) {  		sbBuff.Append (strHTML.Substring (S' P - S + tLen));  		//keep charactes left of URL  		S = P + tLen;  		//save startpos of URL  		R = strHTML.IndexOf ("\""' S);  		//end of URL  		if (R >= 0) {  			strURL = strHTML.Substring (S' R - S).ToLower ();  		} else {  			strURL = strHTML.Substring (S).ToLower ();  		}  		if (strHTML.Substring (P + tLen' 10).Equals ("data:image"' StringComparison.InvariantCultureIgnoreCase)) {  			P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  			continue;  		}  		// if we are linking internally  		if (!strURL.Contains ("://")) {  			// remove the leading portion of the path if the URL contains the upload directory structure  			string strDirectory = uploadDirectory;  			if (!strDirectory.EndsWith ("/")) {  				strDirectory += "/";  			}  			if (strURL.IndexOf (strDirectory) != -1) {  				S = S + strURL.IndexOf (strDirectory) + strDirectory.Length;  				strURL = strURL.Substring (strURL.IndexOf (strDirectory) + strDirectory.Length);  			}  			// add upload directory  			if (!strURL.StartsWith ("/") && !String.IsNullOrEmpty (strURL.Trim ()))//We don't write the UploadDirectory if the token/attribute has not value. Therefore we will avoid an unnecessary request  			 {  				sbBuff.Append (uploadDirectory);  			}  		}  		//find position of next occurrance  		P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  	}  	if (S > -1) {  		sbBuff.Append (strHTML.Substring (S));  	}  	//append characters of last URL and behind  }  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,The following statement contains a magic number: if (!string.IsNullOrEmpty (strHTML)) {  	tLen = strToken.Length + 2;  	string uploadDirectory = strUploadDirectory.ToLower ();  	//find position of first occurrance:  	P = strHTML.IndexOf (strToken + "=\""' StringComparison.InvariantCultureIgnoreCase);  	while (P != -1) {  		sbBuff.Append (strHTML.Substring (S' P - S + tLen));  		//keep charactes left of URL  		S = P + tLen;  		//save startpos of URL  		R = strHTML.IndexOf ("\""' S);  		//end of URL  		if (R >= 0) {  			strURL = strHTML.Substring (S' R - S).ToLower ();  		} else {  			strURL = strHTML.Substring (S).ToLower ();  		}  		if (strHTML.Substring (P + tLen' 10).Equals ("data:image"' StringComparison.InvariantCultureIgnoreCase)) {  			P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  			continue;  		}  		// if we are linking internally  		if (!strURL.Contains ("://")) {  			// remove the leading portion of the path if the URL contains the upload directory structure  			string strDirectory = uploadDirectory;  			if (!strDirectory.EndsWith ("/")) {  				strDirectory += "/";  			}  			if (strURL.IndexOf (strDirectory) != -1) {  				S = S + strURL.IndexOf (strDirectory) + strDirectory.Length;  				strURL = strURL.Substring (strURL.IndexOf (strDirectory) + strDirectory.Length);  			}  			// add upload directory  			if (!strURL.StartsWith ("/") && !String.IsNullOrEmpty (strURL.Trim ()))//We don't write the UploadDirectory if the token/attribute has not value. Therefore we will avoid an unnecessary request  			 {  				sbBuff.Append (uploadDirectory);  			}  		}  		//find position of next occurrance  		P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  	}  	if (S > -1) {  		sbBuff.Append (strHTML.Substring (S));  	}  	//append characters of last URL and behind  }  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,The following statement contains a magic number: if (!string.IsNullOrEmpty (strHTML)) {  	tLen = strToken.Length + 2;  	string uploadDirectory = strUploadDirectory.ToLower ();  	//find position of first occurrance:  	P = strHTML.IndexOf (strToken + "=\""' StringComparison.InvariantCultureIgnoreCase);  	while (P != -1) {  		sbBuff.Append (strHTML.Substring (S' P - S + tLen));  		//keep charactes left of URL  		S = P + tLen;  		//save startpos of URL  		R = strHTML.IndexOf ("\""' S);  		//end of URL  		if (R >= 0) {  			strURL = strHTML.Substring (S' R - S).ToLower ();  		} else {  			strURL = strHTML.Substring (S).ToLower ();  		}  		if (strHTML.Substring (P + tLen' 10).Equals ("data:image"' StringComparison.InvariantCultureIgnoreCase)) {  			P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  			continue;  		}  		// if we are linking internally  		if (!strURL.Contains ("://")) {  			// remove the leading portion of the path if the URL contains the upload directory structure  			string strDirectory = uploadDirectory;  			if (!strDirectory.EndsWith ("/")) {  				strDirectory += "/";  			}  			if (strURL.IndexOf (strDirectory) != -1) {  				S = S + strURL.IndexOf (strDirectory) + strDirectory.Length;  				strURL = strURL.Substring (strURL.IndexOf (strDirectory) + strDirectory.Length);  			}  			// add upload directory  			if (!strURL.StartsWith ("/") && !String.IsNullOrEmpty (strURL.Trim ()))//We don't write the UploadDirectory if the token/attribute has not value. Therefore we will avoid an unnecessary request  			 {  				sbBuff.Append (uploadDirectory);  			}  		}  		//find position of next occurrance  		P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  	}  	if (S > -1) {  		sbBuff.Append (strHTML.Substring (S));  	}  	//append characters of last URL and behind  }  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,The following statement contains a magic number: tLen = strToken.Length + 2;  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,The following statement contains a magic number: while (P != -1) {  	sbBuff.Append (strHTML.Substring (S' P - S + tLen));  	//keep charactes left of URL  	S = P + tLen;  	//save startpos of URL  	R = strHTML.IndexOf ("\""' S);  	//end of URL  	if (R >= 0) {  		strURL = strHTML.Substring (S' R - S).ToLower ();  	} else {  		strURL = strHTML.Substring (S).ToLower ();  	}  	if (strHTML.Substring (P + tLen' 10).Equals ("data:image"' StringComparison.InvariantCultureIgnoreCase)) {  		P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  		continue;  	}  	// if we are linking internally  	if (!strURL.Contains ("://")) {  		// remove the leading portion of the path if the URL contains the upload directory structure  		string strDirectory = uploadDirectory;  		if (!strDirectory.EndsWith ("/")) {  			strDirectory += "/";  		}  		if (strURL.IndexOf (strDirectory) != -1) {  			S = S + strURL.IndexOf (strDirectory) + strDirectory.Length;  			strURL = strURL.Substring (strURL.IndexOf (strDirectory) + strDirectory.Length);  		}  		// add upload directory  		if (!strURL.StartsWith ("/") && !String.IsNullOrEmpty (strURL.Trim ()))//We don't write the UploadDirectory if the token/attribute has not value. Therefore we will avoid an unnecessary request  		 {  			sbBuff.Append (uploadDirectory);  		}  	}  	//find position of next occurrance  	P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  }  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,The following statement contains a magic number: while (P != -1) {  	sbBuff.Append (strHTML.Substring (S' P - S + tLen));  	//keep charactes left of URL  	S = P + tLen;  	//save startpos of URL  	R = strHTML.IndexOf ("\""' S);  	//end of URL  	if (R >= 0) {  		strURL = strHTML.Substring (S' R - S).ToLower ();  	} else {  		strURL = strHTML.Substring (S).ToLower ();  	}  	if (strHTML.Substring (P + tLen' 10).Equals ("data:image"' StringComparison.InvariantCultureIgnoreCase)) {  		P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  		continue;  	}  	// if we are linking internally  	if (!strURL.Contains ("://")) {  		// remove the leading portion of the path if the URL contains the upload directory structure  		string strDirectory = uploadDirectory;  		if (!strDirectory.EndsWith ("/")) {  			strDirectory += "/";  		}  		if (strURL.IndexOf (strDirectory) != -1) {  			S = S + strURL.IndexOf (strDirectory) + strDirectory.Length;  			strURL = strURL.Substring (strURL.IndexOf (strDirectory) + strDirectory.Length);  		}  		// add upload directory  		if (!strURL.StartsWith ("/") && !String.IsNullOrEmpty (strURL.Trim ()))//We don't write the UploadDirectory if the token/attribute has not value. Therefore we will avoid an unnecessary request  		 {  			sbBuff.Append (uploadDirectory);  		}  	}  	//find position of next occurrance  	P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  }  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,The following statement contains a magic number: while (P != -1) {  	sbBuff.Append (strHTML.Substring (S' P - S + tLen));  	//keep charactes left of URL  	S = P + tLen;  	//save startpos of URL  	R = strHTML.IndexOf ("\""' S);  	//end of URL  	if (R >= 0) {  		strURL = strHTML.Substring (S' R - S).ToLower ();  	} else {  		strURL = strHTML.Substring (S).ToLower ();  	}  	if (strHTML.Substring (P + tLen' 10).Equals ("data:image"' StringComparison.InvariantCultureIgnoreCase)) {  		P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  		continue;  	}  	// if we are linking internally  	if (!strURL.Contains ("://")) {  		// remove the leading portion of the path if the URL contains the upload directory structure  		string strDirectory = uploadDirectory;  		if (!strDirectory.EndsWith ("/")) {  			strDirectory += "/";  		}  		if (strURL.IndexOf (strDirectory) != -1) {  			S = S + strURL.IndexOf (strDirectory) + strDirectory.Length;  			strURL = strURL.Substring (strURL.IndexOf (strDirectory) + strDirectory.Length);  		}  		// add upload directory  		if (!strURL.StartsWith ("/") && !String.IsNullOrEmpty (strURL.Trim ()))//We don't write the UploadDirectory if the token/attribute has not value. Therefore we will avoid an unnecessary request  		 {  			sbBuff.Append (uploadDirectory);  		}  	}  	//find position of next occurrance  	P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  }  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,The following statement contains a magic number: if (strHTML.Substring (P + tLen' 10).Equals ("data:image"' StringComparison.InvariantCultureIgnoreCase)) {  	P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  	continue;  }  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,The following statement contains a magic number: if (strHTML.Substring (P + tLen' 10).Equals ("data:image"' StringComparison.InvariantCultureIgnoreCase)) {  	P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  	continue;  }  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,The following statement contains a magic number: P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ManageRelativePaths,The following statement contains a magic number: P = strHTML.IndexOf (strToken + "=\""' S + strURL.Length + 2' StringComparison.InvariantCultureIgnoreCase);  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,GetMaximumVersionHistory,The following statement contains a magic number: if (intMaximumVersionHistory == -1) {  	intMaximumVersionHistory = 5;  	// default  	PortalController.UpdatePortalSetting (PortalID' "MaximumVersionHistory"' intMaximumVersionHistory.ToString ());  }  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,GetMaximumVersionHistory,The following statement contains a magic number: intMaximumVersionHistory = 5;  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,UpdateMaximumVersionHistory,The following statement contains a magic number: if (MaximumVersionHistory < 0) {  	MaximumVersionHistory = 5;  	// default  }  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,UpdateMaximumVersionHistory,The following statement contains a magic number: MaximumVersionHistory = 5;  
Magic Number,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,ImportModule,The following statement contains a magic number: if (objVersion >= new Version (5' 1' 0)) {  	// current module content  	htmlContent.Content = DeTokeniseLinks (xml.SelectSingleNode ("content").InnerText' module.PortalID);  } else {  	// legacy module content  	htmlContent.Content = DeTokeniseLinks (xml.SelectSingleNode ("desktophtml").InnerText' module.PortalID);  }  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnLoad,The following statement contains a magic number: try {  	var htmlContentItemID = -1;  	var htmlContent = _htmlTextController.GetTopHtmlText (ModuleId' false' WorkflowID);  	if ((htmlContent != null)) {  		htmlContentItemID = htmlContent.ItemID;  	}  	if (!Page.IsPostBack) {  		var workflowStates = _workflowStateController.GetWorkflowStates (WorkflowID);  		var maxVersions = _htmlTextController.GetMaximumVersionHistory (PortalId);  		var userCanEdit = UserInfo.IsSuperUser || PortalSecurity.IsInRole (PortalSettings.AdministratorRoleName);  		lblMaxVersions.Text = maxVersions.ToString ();  		dgVersions.PageSize = Math.Min (Math.Max (maxVersions' 5)' 10);  		//min 5' max 10  		switch (workflowStates.Count) {  		case 1:  			CurrentWorkflowType = WorkflowType.DirectPublish;  			break;  		case 2:  			CurrentWorkflowType = WorkflowType.ContentStaging;  			break;  		}  		if (htmlContentItemID != -1) {  			DisplayContent (htmlContent);  			//DisplayPreview(htmlContent);  			DisplayHistory (htmlContent);  		} else {  			DisplayInitialContent (workflowStates [0] as WorkflowStateInfo);  		}  		divPublish.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  		phCurrentVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  		phPreviewVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  		//DisplayVersions();  		BindRenderItems ();  		ddlRender.SelectedValue = txtContent.Mode;  	}  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnLoad,The following statement contains a magic number: try {  	var htmlContentItemID = -1;  	var htmlContent = _htmlTextController.GetTopHtmlText (ModuleId' false' WorkflowID);  	if ((htmlContent != null)) {  		htmlContentItemID = htmlContent.ItemID;  	}  	if (!Page.IsPostBack) {  		var workflowStates = _workflowStateController.GetWorkflowStates (WorkflowID);  		var maxVersions = _htmlTextController.GetMaximumVersionHistory (PortalId);  		var userCanEdit = UserInfo.IsSuperUser || PortalSecurity.IsInRole (PortalSettings.AdministratorRoleName);  		lblMaxVersions.Text = maxVersions.ToString ();  		dgVersions.PageSize = Math.Min (Math.Max (maxVersions' 5)' 10);  		//min 5' max 10  		switch (workflowStates.Count) {  		case 1:  			CurrentWorkflowType = WorkflowType.DirectPublish;  			break;  		case 2:  			CurrentWorkflowType = WorkflowType.ContentStaging;  			break;  		}  		if (htmlContentItemID != -1) {  			DisplayContent (htmlContent);  			//DisplayPreview(htmlContent);  			DisplayHistory (htmlContent);  		} else {  			DisplayInitialContent (workflowStates [0] as WorkflowStateInfo);  		}  		divPublish.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  		phCurrentVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  		phPreviewVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  		//DisplayVersions();  		BindRenderItems ();  		ddlRender.SelectedValue = txtContent.Mode;  	}  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnLoad,The following statement contains a magic number: try {  	var htmlContentItemID = -1;  	var htmlContent = _htmlTextController.GetTopHtmlText (ModuleId' false' WorkflowID);  	if ((htmlContent != null)) {  		htmlContentItemID = htmlContent.ItemID;  	}  	if (!Page.IsPostBack) {  		var workflowStates = _workflowStateController.GetWorkflowStates (WorkflowID);  		var maxVersions = _htmlTextController.GetMaximumVersionHistory (PortalId);  		var userCanEdit = UserInfo.IsSuperUser || PortalSecurity.IsInRole (PortalSettings.AdministratorRoleName);  		lblMaxVersions.Text = maxVersions.ToString ();  		dgVersions.PageSize = Math.Min (Math.Max (maxVersions' 5)' 10);  		//min 5' max 10  		switch (workflowStates.Count) {  		case 1:  			CurrentWorkflowType = WorkflowType.DirectPublish;  			break;  		case 2:  			CurrentWorkflowType = WorkflowType.ContentStaging;  			break;  		}  		if (htmlContentItemID != -1) {  			DisplayContent (htmlContent);  			//DisplayPreview(htmlContent);  			DisplayHistory (htmlContent);  		} else {  			DisplayInitialContent (workflowStates [0] as WorkflowStateInfo);  		}  		divPublish.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  		phCurrentVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  		phPreviewVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  		//DisplayVersions();  		BindRenderItems ();  		ddlRender.SelectedValue = txtContent.Mode;  	}  } catch (Exception exc) {  	Exceptions.ProcessModuleLoadException (this' exc);  }  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnLoad,The following statement contains a magic number: if (!Page.IsPostBack) {  	var workflowStates = _workflowStateController.GetWorkflowStates (WorkflowID);  	var maxVersions = _htmlTextController.GetMaximumVersionHistory (PortalId);  	var userCanEdit = UserInfo.IsSuperUser || PortalSecurity.IsInRole (PortalSettings.AdministratorRoleName);  	lblMaxVersions.Text = maxVersions.ToString ();  	dgVersions.PageSize = Math.Min (Math.Max (maxVersions' 5)' 10);  	//min 5' max 10  	switch (workflowStates.Count) {  	case 1:  		CurrentWorkflowType = WorkflowType.DirectPublish;  		break;  	case 2:  		CurrentWorkflowType = WorkflowType.ContentStaging;  		break;  	}  	if (htmlContentItemID != -1) {  		DisplayContent (htmlContent);  		//DisplayPreview(htmlContent);  		DisplayHistory (htmlContent);  	} else {  		DisplayInitialContent (workflowStates [0] as WorkflowStateInfo);  	}  	divPublish.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  	phCurrentVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  	phPreviewVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  	//DisplayVersions();  	BindRenderItems ();  	ddlRender.SelectedValue = txtContent.Mode;  }  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnLoad,The following statement contains a magic number: if (!Page.IsPostBack) {  	var workflowStates = _workflowStateController.GetWorkflowStates (WorkflowID);  	var maxVersions = _htmlTextController.GetMaximumVersionHistory (PortalId);  	var userCanEdit = UserInfo.IsSuperUser || PortalSecurity.IsInRole (PortalSettings.AdministratorRoleName);  	lblMaxVersions.Text = maxVersions.ToString ();  	dgVersions.PageSize = Math.Min (Math.Max (maxVersions' 5)' 10);  	//min 5' max 10  	switch (workflowStates.Count) {  	case 1:  		CurrentWorkflowType = WorkflowType.DirectPublish;  		break;  	case 2:  		CurrentWorkflowType = WorkflowType.ContentStaging;  		break;  	}  	if (htmlContentItemID != -1) {  		DisplayContent (htmlContent);  		//DisplayPreview(htmlContent);  		DisplayHistory (htmlContent);  	} else {  		DisplayInitialContent (workflowStates [0] as WorkflowStateInfo);  	}  	divPublish.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  	phCurrentVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  	phPreviewVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  	//DisplayVersions();  	BindRenderItems ();  	ddlRender.SelectedValue = txtContent.Mode;  }  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnLoad,The following statement contains a magic number: if (!Page.IsPostBack) {  	var workflowStates = _workflowStateController.GetWorkflowStates (WorkflowID);  	var maxVersions = _htmlTextController.GetMaximumVersionHistory (PortalId);  	var userCanEdit = UserInfo.IsSuperUser || PortalSecurity.IsInRole (PortalSettings.AdministratorRoleName);  	lblMaxVersions.Text = maxVersions.ToString ();  	dgVersions.PageSize = Math.Min (Math.Max (maxVersions' 5)' 10);  	//min 5' max 10  	switch (workflowStates.Count) {  	case 1:  		CurrentWorkflowType = WorkflowType.DirectPublish;  		break;  	case 2:  		CurrentWorkflowType = WorkflowType.ContentStaging;  		break;  	}  	if (htmlContentItemID != -1) {  		DisplayContent (htmlContent);  		//DisplayPreview(htmlContent);  		DisplayHistory (htmlContent);  	} else {  		DisplayInitialContent (workflowStates [0] as WorkflowStateInfo);  	}  	divPublish.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  	phCurrentVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  	phPreviewVersion.Visible = CurrentWorkflowType != WorkflowType.DirectPublish;  	//DisplayVersions();  	BindRenderItems ();  	ddlRender.SelectedValue = txtContent.Mode;  }  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnLoad,The following statement contains a magic number: dgVersions.PageSize = Math.Min (Math.Max (maxVersions' 5)' 10);  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnLoad,The following statement contains a magic number: dgVersions.PageSize = Math.Min (Math.Max (maxVersions' 5)' 10);  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnLoad,The following statement contains a magic number: switch (workflowStates.Count) {  case 1:  	CurrentWorkflowType = WorkflowType.DirectPublish;  	break;  case 2:  	CurrentWorkflowType = WorkflowType.ContentStaging;  	break;  }  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnHistoryGridItemDataBound,The following statement contains a magic number: if (item.RowType == DataControlRowType.DataRow) {  	//Localize columns  	item.Cells [2].Text = Localization.GetString (item.Cells [2].Text' LocalResourceFile);  	item.Cells [3].Text = Localization.GetString (item.Cells [3].Text' LocalResourceFile);  }  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnHistoryGridItemDataBound,The following statement contains a magic number: if (item.RowType == DataControlRowType.DataRow) {  	//Localize columns  	item.Cells [2].Text = Localization.GetString (item.Cells [2].Text' LocalResourceFile);  	item.Cells [3].Text = Localization.GetString (item.Cells [3].Text' LocalResourceFile);  }  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnHistoryGridItemDataBound,The following statement contains a magic number: if (item.RowType == DataControlRowType.DataRow) {  	//Localize columns  	item.Cells [2].Text = Localization.GetString (item.Cells [2].Text' LocalResourceFile);  	item.Cells [3].Text = Localization.GetString (item.Cells [3].Text' LocalResourceFile);  }  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnHistoryGridItemDataBound,The following statement contains a magic number: if (item.RowType == DataControlRowType.DataRow) {  	//Localize columns  	item.Cells [2].Text = Localization.GetString (item.Cells [2].Text' LocalResourceFile);  	item.Cells [3].Text = Localization.GetString (item.Cells [3].Text' LocalResourceFile);  }  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnHistoryGridItemDataBound,The following statement contains a magic number: item.Cells [2].Text = Localization.GetString (item.Cells [2].Text' LocalResourceFile);  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnHistoryGridItemDataBound,The following statement contains a magic number: item.Cells [2].Text = Localization.GetString (item.Cells [2].Text' LocalResourceFile);  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnHistoryGridItemDataBound,The following statement contains a magic number: item.Cells [3].Text = Localization.GetString (item.Cells [3].Text' LocalResourceFile);  
Magic Number,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnHistoryGridItemDataBound,The following statement contains a magic number: item.Cells [3].Text = Localization.GetString (item.Cells [3].Text' LocalResourceFile);  
Missing Default,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,UpdateWorkflow,The following switch statement is missing a default case: switch (WorkFlowType) {  case "Module":  	ModuleController.Instance.UpdateModuleSetting (ObjectID' "WorkflowID"' WorkflowID.ToString ());  	break;  case "Page":  	TabController.Instance.UpdateTabSetting (ObjectID' "WorkflowID"' WorkflowID.ToString ());  	if (ReplaceExistingSettings) {  		//Get All Modules on the current Tab  		foreach (var kvp in ModuleController.Instance.GetTabModules (ObjectID)) {  			ClearModuleSettings (kvp.Value);  		}  	}  	break;  case "Site":  	PortalController.UpdatePortalSetting (ObjectID' "WorkflowID"' WorkflowID.ToString ());  	if (ReplaceExistingSettings) {  		//Get All Tabs aon the Site  		foreach (var kvp in TabController.Instance.GetTabsByPortal (ObjectID)) {  			TabController.Instance.DeleteTabSetting (kvp.Value.TabID' "WorkFlowID");  		}  		//Get All Modules in the current Site  		foreach (ModuleInfo objModule in ModuleController.Instance.GetModules (ObjectID)) {  			ClearModuleSettings (objModule);  		}  	}  	break;  }  
Missing Default,DotNetNuke.Modules.Html,HtmlTextController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Components\HtmlTextController.cs,UpgradeModule,The following switch statement is missing a default case: switch (Version) {  case "05.01.02":  	//remove the Code SubDirectory  	Config.RemoveCodeSubDirectory ("HTML");  	//Once the web.config entry is done we can safely remove the HTML folder  	var arrPaths = new string[1];  	arrPaths [0] = "App_Code\\HTML\\";  	FileSystemUtils.DeleteFiles (arrPaths);  	break;  case "06.00.00":  	DesktopModuleInfo desktopModule = DesktopModuleController.GetDesktopModuleByModuleName ("DNN_HTML"' Null.NullInteger);  	desktopModule.Category = "Common";  	DesktopModuleController.SaveDesktopModule (desktopModule' false' false);  	break;  case "06.02.00":  	AddNotificationTypes ();  	break;  }  
Missing Default,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnLoad,The following switch statement is missing a default case: switch (workflowStates.Count) {  case 1:  	CurrentWorkflowType = WorkflowType.DirectPublish;  	break;  case 2:  	CurrentWorkflowType = WorkflowType.ContentStaging;  	break;  }  
Missing Default,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnSaveClick,The following switch statement is missing a default case: switch (CurrentWorkflowType) {  case WorkflowType.DirectPublish:  	_htmlTextController.UpdateHtmlText (htmlContent' _htmlTextController.GetMaximumVersionHistory (PortalId));  	break;  case WorkflowType.ContentStaging:  	if (chkPublish.Checked) {  		//if it's already published set it to draft  		if (htmlContent.StateID == publishedStateID) {  			htmlContent.StateID = draftStateID;  		} else {  			htmlContent.StateID = publishedStateID;  			//here it's in published mode  		}  	} else {  		//if it's already published set it back to draft  		if ((htmlContent.StateID != draftStateID)) {  			htmlContent.StateID = draftStateID;  		}  	}  	_htmlTextController.UpdateHtmlText (htmlContent' _htmlTextController.GetMaximumVersionHistory (PortalId));  	break;  }  
Missing Default,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnVersionsGridItemCommand,The following switch statement is missing a default case: switch (e.CommandName.ToLower ()) {  case "remove":  	htmlContent = GetHTMLContent (e);  	_htmlTextController.DeleteHtmlText (ModuleId' htmlContent.ItemID);  	break;  case "rollback":  	htmlContent = GetHTMLContent (e);  	htmlContent.ItemID = -1;  	htmlContent.ModuleID = ModuleId;  	htmlContent.WorkflowID = WorkflowID;  	htmlContent.StateID = _workflowStateController.GetFirstWorkflowStateID (WorkflowID);  	_htmlTextController.UpdateHtmlText (htmlContent' _htmlTextController.GetMaximumVersionHistory (PortalId));  	break;  case "preview":  	htmlContent = GetHTMLContent (e);  	DisplayPreview (htmlContent);  	break;  }  
Missing Default,DotNetNuke.Modules.Html,EditHtml,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\EditHtml.ascx.cs,OnVersionsGridItemDataBound,The following switch statement is missing a default case: switch (imageButton.CommandName.ToLower ()) {  case "rollback":  	//hide rollback for the first item  	if (dgVersions.CurrentPageIndex == 0) {  		if ((e.Row.RowIndex == 0)) {  			imageButton.Visible = false;  			break;  		}  	}  	imageButton.Visible = true;  	break;  case "remove":  	var msg = GetLocalizedString ("DeleteVersion.Confirm");  	msg = msg.Replace ("[VERSION]"' htmlContent.Version.ToString ()).Replace ("[STATE]"' htmlContent.StateName).Replace ("[DATECREATED]"' htmlContent.CreatedOnDate.ToString ()).Replace ("[USERNAME]"' createdBy);  	imageButton.OnClientClick = "return confirm(\"" + msg + "\");";  	//hide the delete button  	var showDelete = UserInfo.IsSuperUser || PortalSecurity.IsInRole (PortalSettings.AdministratorRoleName);  	if (!showDelete) {  		showDelete = htmlContent.IsPublished == false;  	}  	imageButton.Visible = showDelete;  	break;  }  
Missing Default,DotNetNuke.Modules.Html,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HTML\Settings.ascx.cs,UpdateSettings,The following switch statement is missing a default case: switch (rblApplyTo.SelectedValue) {  case "Module":  	htmlTextController.UpdateWorkflow (ModuleId' rblApplyTo.SelectedValue' Int32.Parse (cboWorkflow.SelectedValue)' chkReplace.Checked);  	break;  case "Page":  	htmlTextController.UpdateWorkflow (TabId' rblApplyTo.SelectedValue' Int32.Parse (cboWorkflow.SelectedValue)' chkReplace.Checked);  	break;  case "Site":  	htmlTextController.UpdateWorkflow (PortalId' rblApplyTo.SelectedValue' Int32.Parse (cboWorkflow.SelectedValue)' chkReplace.Checked);  	break;  }  
