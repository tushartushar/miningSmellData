Implementation smell,Namespace,Class,File,Method,Description
Long Method,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,Export,The method has 156 lines of code.
Long Method,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,Import,The method has 140 lines of code.
Long Method,Dnn.ExportImport.Components.Scheduler,ExportImportScheduler,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Scheduler\ExportImportScheduler.cs,DoWork,The method has 120 lines of code.
Long Method,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ExportData,The method has 102 lines of code.
Long Method,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ImportData,The method has 125 lines of code.
Long Method,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessImportPage,The method has 147 lines of code.
Long Method,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ImportTabModulesAndRelatedItems,The method has 274 lines of code.
Long Method,Dnn.ExportImport.Components.Services,UsersDataExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersDataExportService.cs,ImportData,The method has 145 lines of code.
Long Method,Dnn.ExportImport.Components.Services,UsersExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersExportService.cs,ExportData,The method has 154 lines of code.
Long Method,Dnn.ExportImport.Components.Services,UsersExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersExportService.cs,ImportData,The method has 179 lines of code.
Long Method,Dnn.ExportImport.Components.Services,WorkflowsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\WorkflowsExportService.cs,ImportData,The method has 165 lines of code.
Complex Method,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,GetAllCategoriesToInclude,Cyclomatic complexity of the method is 15
Complex Method,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ImportData,Cyclomatic complexity of the method is 14
Complex Method,Dnn.ExportImport.Components.Services,ThemesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\ThemesExportService.cs,ExportData,Cyclomatic complexity of the method is 9
Complex Method,Dnn.ExportImport.Components.Services,ThemesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\ThemesExportService.cs,ImportData,Cyclomatic complexity of the method is 10
Complex Method,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ImportTabModulesAndRelatedItems,Cyclomatic complexity of the method is 10
Complex Method,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ImportPortableContent,Cyclomatic complexity of the method is 10
Complex Method,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessExportPages,Cyclomatic complexity of the method is 8
Complex Method,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,ExportData,Cyclomatic complexity of the method is 8
Complex Method,Dnn.ExportImport.Components.Services,PortalExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PortalExportService.cs,ExportData,Cyclomatic complexity of the method is 10
Complex Method,Dnn.ExportImport.Components.Services,RolesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\RolesExportService.cs,ExportData,Cyclomatic complexity of the method is 13
Complex Method,Dnn.ExportImport.Components.Services,RolesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\RolesExportService.cs,ImportData,Cyclomatic complexity of the method is 10
Complex Method,Dnn.ExportImport.Components.Services,UsersExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersExportService.cs,ExportData,Cyclomatic complexity of the method is 11
Complex Method,Dnn.ExportImport.Components.Services,VocabularyService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\VocabularyService.cs,ExportData,Cyclomatic complexity of the method is 11
Complex Method,Dnn.ExportImport.Components.Services,WorkflowsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\WorkflowsExportService.cs,ImportData,Cyclomatic complexity of the method is 17
Long Parameter List,Dnn.ExportImport.Components.Common,CompressionUtil,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Common\CompressionUtil.cs,UnZipArchiveExcept,The method has 5 parameters. Parameters: archivePath' extractFolder' overwrite' exceptionList' deleteFromSoure
Long Parameter List,Dnn.ExportImport.Components.Common,CompressionUtil,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Common\CompressionUtil.cs,UnZipFileFromArchive,The method has 5 parameters. Parameters: fileName' archivePath' extractFolder' overwrite' deleteFromSoure
Long Parameter List,Dnn.ExportImport.Components.Controllers,BaseController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\BaseController.cs,GetAllJobs,The method has 6 parameters. Parameters: portalId' currentPortalId' pageSize' pageIndex' jobType' keywords
Long Parameter List,Dnn.ExportImport.Components.Controllers,EntitiesController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\EntitiesController.cs,GetAllJobs,The method has 5 parameters. Parameters: portalId' pageSize' pageIndex' jobType' keywords
Long Parameter List,Dnn.ExportImport.Components.Controllers,EntitiesController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\EntitiesController.cs,GetPortalTabs,The method has 5 parameters. Parameters: portalId' includeDeleted' includeSystem' toDate' fromDate
Long Parameter List,Dnn.ExportImport.Components.Controllers,ImportController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\ImportController.cs,GetImportPackages,The method has 5 parameters. Parameters: total' keyword' order' pageIndex' pageSize
Long Parameter List,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,PrepareCheckPoints,The method has 5 parameters. Parameters: jobId' parentServices' implementors' includedItems' checkpoints
Long Parameter List,Dnn.ExportImport.Components.Interfaces,IEntitiesController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Interfaces\IEntitiesController.cs,GetAllJobs,The method has 5 parameters. Parameters: portalId' pageSize' pageIndex' jobType' keywords
Long Parameter List,Dnn.ExportImport.Components.Interfaces,IEntitiesController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Interfaces\IEntitiesController.cs,GetPortalTabs,The method has 5 parameters. Parameters: portalId' includeDeleted' includeSystem' toDate' fromDate
Long Parameter List,Dnn.ExportImport.Components.Providers,DataProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Providers\DataProvider.cs,UpdateRecordChangers,The method has 5 parameters. Parameters: tableName' primaryKeyName' primaryKeyId' createdBy' modifiedBy
Long Parameter List,Dnn.ExportImport.Components.Providers,DataProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Providers\DataProvider.cs,UpdateSettingRecordChangers,The method has 6 parameters. Parameters: tableName' primaryKeyName' parentKeyId' settingName' createdBy' modifiedBy
Long Parameter List,Dnn.ExportImport.Components.Providers,DataProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Providers\DataProvider.cs,AddNewJob,The method has 7 parameters. Parameters: portalId' userId' jobType' jobName' jobDescription' directory' serializedObject
Long Parameter List,Dnn.ExportImport.Components.Providers,DataProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Providers\DataProvider.cs,GetAllJobs,The method has 5 parameters. Parameters: portalId' pageSize' pageIndex' jobType' keywords
Long Parameter List,Dnn.ExportImport.Components.Providers,DataProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Providers\DataProvider.cs,GetAllUsers,The method has 6 parameters. Parameters: portalId' pageIndex' pageSize' includeDeleted' toDateUtc' fromDateUtc
Long Parameter List,Dnn.ExportImport.Components.Providers,DataProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Providers\DataProvider.cs,GetAllPortalTabs,The method has 5 parameters. Parameters: portalId' includeDeleted' includeSystem' toDate' fromDate
Long Parameter List,Dnn.ExportImport.Services,ExportImportController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Services\ExportImportController.cs,AllJobs,The method has 5 parameters. Parameters: portal' pageSize' pageIndex' jobType' keywords
Long Identifier,Dnn.ExportImport.Components.Scheduler,ExportImportScheduler,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Scheduler\ExportImportScheduler.cs,,The length of the parameter EmergencyScheduleFrequencyUnit is 30.
Long Identifier,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ExportData,The length of the parameter totalFolderPermissionsExported is 30.
Long Identifier,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ImportData,The length of the parameter totalFolderPermissionsImported is 30.
Long Identifier,Dnn.ExportImport.Components.Services,WorkflowsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\WorkflowsExportService.cs,ExportData,The length of the parameter contentWorkflowStatePermissions is 31.
Long Statement,Dnn.ExportImport.Components.Controllers,BaseController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\BaseController.cs,AddEventLog,The length of the statement  "                PortalSecurity.FilterFlag.NoScripting | PortalSecurity.FilterFlag.NoAngleBrackets | PortalSecurity.FilterFlag.NoMarkup); " is 120.
Long Statement,Dnn.ExportImport.Components.Controllers,BaseController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\BaseController.cs,BuildJobSummary,The length of the statement  "                ProcessedItems = checkpoint.ProcessedItems <= checkpoint.TotalItems ? checkpoint.ProcessedItems : checkpoint.TotalItems' " is 120.
Long Statement,Dnn.ExportImport.Components.Controllers,BaseController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\BaseController.cs,ToJobItem,The length of the statement  "            var name = job.JobType == JobType.Import ? JsonConvert.DeserializeObject<ImportDto>(job.JobObject)?.ExportDto?.ExportName : job.Name; " is 133.
Long Statement,Dnn.ExportImport.Components.Controllers,ExportController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\ExportController.cs,QueueOperation,The length of the statement  "            exportDto.ProductVersion = Globals.FormatVersion(DotNetNuke.Application.DotNetNukeContext.Current.Application.Version' true); " is 125.
Long Statement,Dnn.ExportImport.Components.Controllers,ImportController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\ImportController.cs,IsValidImportFolder,The length of the statement  "            return File.Exists(Path.Combine(folderPath' Constants.ExportManifestName)) && (File.Exists(Path.Combine(folderPath' Constants.ExportDbName)) || " is 143.
Long Statement,Dnn.ExportImport.Components.Controllers,SettingsController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\SettingsController.cs,GetAllSettings,The length of the statement  "            return CBO.GetCachedObject<List<ExportImportSetting>>(new CacheItemArgs(CacheKey' CacheDuration' CacheItemPriority.Normal)' " is 123.
Long Statement,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,Export,The length of the statement  "            scheduleHistoryItem.AddLogNote($"<br/><b>SITE EXPORT Preparing Check Points. JOB #{exportJob.JobId}: {exportJob.Name}</b>"); " is 124.
Long Statement,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,Export,The length of the statement  "            scheduleHistoryItem.AddLogNote($"<br/>Between [{exportDto.FromDateUtc ?? Constants.MinDbTime}] and [{exportDto.ToDateUtc:g}]"); " is 127.
Long Statement,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,Export,The length of the statement  "                            service.CheckPoint = checkpoints.FirstOrDefault(cp => cp.Category == service.Category && cp.AssemblyName == serviceAssembly); " is 125.
Long Statement,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,Import,The length of the statement  "                scheduleHistoryItem.AddLogNote($"<br/><b>SITE IMPORT Preparing Check Points. JOB #{importJob.JobId}: {importJob.Name}</b>"); " is 124.
Long Statement,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,Import,The length of the statement  "                            service.CheckPoint = checkpoints.FirstOrDefault(cp => cp.Category == service.Category && cp.AssemblyName == serviceAssembly) " is 124.
Long Statement,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,PrepareCheckPoints,The length of the statement  "                        service.CheckPoint = checkpoints.FirstOrDefault(cp => cp.Category == service.Category && cp.AssemblyName == serviceAssembly); " is 125.
Long Statement,Dnn.ExportImport.Components.Providers,DataProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Providers\DataProvider.cs,UpdateSettingRecordChangers,The length of the statement  "                "Export_GenedicUpdateSettingsRecordChangers"' tableName' primaryKeyName' parentKeyId' settingName' createdBy' modifiedBy); " is 122.
Long Statement,Dnn.ExportImport.Components.Providers,DataProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Providers\DataProvider.cs,UpsertJobChekpoint,The length of the statement  "                Null.SetNullInteger(Math.Floor(checkpoint.Progress))' checkpoint.TotalItems' checkpoint.ProcessedItems' _dataProvider.GetNull(checkpoint.StartDate)' checkpoint.Completed); " is 171.
Long Statement,Dnn.ExportImport.Components.Providers,DataProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Providers\DataProvider.cs,GetPropertyDefinitionsByPortal,The length of the statement  "                .ExecuteReader("Export_GetPropertyDefinitionsByPortal"' portalId' includeDeleted' toDate' _dataProvider.GetNull(fromDate)); " is 123.
Long Statement,Dnn.ExportImport.Components.Providers,DataProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Providers\DataProvider.cs,GetUsersCount,The length of the statement  "                .ExecuteScalar<int>("Export_GetAllUsers"' portalId' 0' 0' includeDeleted' toDateUtc' _dataProvider.GetNull(fromDateUtc)' true); " is 127.
Long Statement,Dnn.ExportImport.Components.Scheduler,ExportImportScheduler,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Scheduler\ExportImportScheduler.cs,DoWork,The length of the statement  "                                Logger.Error("The Schduler item stopped because main thread stopped' set schedule into emergency mode so it will start after app restart."); " is 140.
Long Statement,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ExportData,The length of the statement  "                                        .GetFiles(portalId' folder.FolderId' toDate' fromDate)).Where(x => x.Extension != Constants.TemplatesExtension).ToList(); " is 121.
Long Statement,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ExportData,The length of the statement  "                                CompressionUtil.AddFilesToArchive(zipArchive' files.Select(file => portal.HomeDirectoryMapPath + folder.FolderPath + GetActualFileName(file))' " is 142.
Long Statement,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ProcessFolder,The length of the statement  "            var existingFolder = CBO.FillObject<ExportFolder>(DotNetNuke.Data.DataProvider.Instance().GetFolder(portalId' folder.FolderPath ?? "")); " is 136.
Long Statement,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ProcessFolder,The length of the statement  "                    folder.ParentId = CBO.FillObject<ExportFolder>(DotNetNuke.Data.DataProvider.Instance().GetFolder(portalId' folder.ParentFolderPath ?? ""))?.FolderId; " is 149.
Long Statement,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ProcessFolderPermission,The length of the statement  "                    if (folderPermission.RoleId != null && folderPermission.RoleId > noRole && !string.IsNullOrEmpty(folderPermission.RoleName)) " is 124.
Long Statement,Dnn.ExportImport.Components.Services,ThemesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\ThemesExportService.cs,ImportData,The length of the statement  "            var packageZipFile = $"{Globals.ApplicationMapPath}{Constants.ExportFolder}{_exportImportJob.Directory.TrimEnd('\\'' '/')}\\{Constants.ExportZipThemes}"; " is 153.
Long Statement,Dnn.ExportImport.Components.Services,ThemesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\ThemesExportService.cs,ImportData,The length of the statement  "                var exporeFiles = Directory.Exists(tempFolder) ? Directory.GetFiles(tempFolder' "*.*"' SearchOption.AllDirectories) : new string[0]; " is 132.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ExportData,The length of the statement  "            var checkedPages = exportDto.Pages.Where(p => p.CheckedState == TriCheckedState.Checked || p.CheckedState == TriCheckedState.CheckedWithAllChildren); " is 149.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessImportPages,The length of the statement  "            var exportedTabs = Repository.GetItems<ExportTab>(x => x.IsSystem == (Category == Constants.Category_Templates)).ToList(); // ordered by TabID " is 142.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessImportPage,The length of the statement  "            var modifiedBy = Util.GetUserIdByName(_exportImportJob' otherTab.LastModifiedByUserID' otherTab.LastModifiedByUserName); " is 120.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessImportPage,The length of the statement  "                        var parentId = IgnoreParentMatch ? otherTab.ParentId.GetValueOrDefault(Null.NullInteger) : TryFindLocalParentTabId(otherTab' exportedTabs' localTabs); " is 150.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessImportPage,The length of the statement  "                            Result.AddLogEntry("Importing existing tab skipped as its parent was not found"' $"{otherTab.TabName} ({otherTab.TabPath})"' ReportLevel.Warn); " is 143.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessImportPage,The length of the statement  "                                Result.AddLogEntry("Importing existing tab skipped as its referenced page was not found"' $"{otherTab.TabName} ({otherTab.TabPath})"' ReportLevel.Warn); " is 152.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessImportPage,The length of the statement  "                        //Try to set the unique id of existing page same as source page unique id' if possible. This will help for future updates etc. " is 126.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessImportPage,The length of the statement  "                var parentId = IgnoreParentMatch ? otherTab.ParentId.GetValueOrDefault(Null.NullInteger) : TryFindLocalParentTabId(otherTab' exportedTabs' localTabs); " is 150.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessImportPage,The length of the statement  "                    Result.AddLogEntry("Importing new tab skipped as its parent was not found"' $"{otherTab.TabName} ({otherTab.TabPath})"' ReportLevel.Warn); " is 138.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessImportPage,The length of the statement  "                        Result.AddLogEntry("Importing existing tab skipped as its referenced page was not found"' $"{otherTab.TabName} ({otherTab.TabPath})"' ReportLevel.Warn); " is 152.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessImportPage,The length of the statement  "                //Try to set the unique id of existing page same as source page unique id' if possible. This will help for future updates etc. " is 126.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,RestoreTab,The length of the statement  "                TabWorkflowSettings.Instance.SetWorkflowEnabled(tab.PortalID' tab.TabID' changeControlStateForTab.IsWorkflowEnabledForTab); " is 123.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ImportTabPermissions,The length of the statement  "                    var permissionId = DataProvider.Instance().GetPermissionId(other.PermissionCode' other.PermissionKey' other.PermissionName); " is 124.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ImportTabUrls,The length of the statement  "                    var alias = PortalAliasController.Instance.GetPortalAliasesByPortalId(_importDto.PortalId).FirstOrDefault(a => a.IsPrimary); " is 124.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ImportTabModulesAndRelatedItems,The length of the statement  "                            modifiedBy = Util.GetUserIdByName(_exportImportJob' otherModule.LastModifiedByUserID' otherModule.LastModifiedByUserName); " is 122.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ImportTabModulesAndRelatedItems,The length of the statement  "                            modifiedBy = Util.GetUserIdByName(_exportImportJob' otherModule.LastModifiedByUserID' otherModule.LastModifiedByUserName); " is 122.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ImportModulePermissions,The length of the statement  "                    var permissionId = DataProvider.Instance().GetPermissionId(other.PermissionCode' other.PermissionKey' other.PermissionName); " is 124.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ImportPortableContent,The length of the statement  "                            var businessController = Reflection.CreateObject(module.DesktopModule.BusinessControllerClass' module.DesktopModule.BusinessControllerClass); " is 141.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,UpdateTabModuleSettingsChangers,The length of the statement  "            _dataProvider.UpdateSettingRecordChangers("TabModuleSettings"' "TabModuleID"' tabModuleId' settingName' createdBy' modifiedBy); " is 127.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,UpdateModulePermissionChangers,The length of the statement  "            _dataProvider.UpdateRecordChangers("ModulePermission"' "ModulePermissionID"' modulePermissionId' createdBy' modifiedBy); " is 120.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ExportModulePackage,The length of the statement  "                var packageZipFile = $"{Globals.ApplicationMapPath}{Constants.ExportFolder}{_exportImportJob.Directory.TrimEnd('\\'' '/')}\\{Constants.ExportZipPackages}"; " is 155.
Long Statement,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ExportModulePackage,The length of the statement  "                var package = PackageController.Instance.GetExtensionPackage(Null.NullInteger' p => p.PackageID == desktopModule.PackageID); " is 124.
Long Statement,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,ExportData,The length of the statement  "                var packagesZipFileFormat = $"{Globals.ApplicationMapPath}{Constants.ExportFolder}{{0}}\\{Constants.ExportZipPackages}"; " is 120.
Long Statement,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,ExportData,The length of the statement  "                    var extensionPackagesBackupFolder = Path.Combine(Globals.ApplicationMapPath' DotNetNuke.Services.Installer.Util.BackupInstallPackageFolder); " is 140.
Long Statement,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,ExportData,The length of the statement  "                    var skinPackageFiles = Directory.GetFiles(extensionPackagesBackupFolder).Where(f => IsValidPackage(f' fromDate' toDate)).ToList(); " is 130.
Long Statement,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,GenerateExportPackage,The length of the statement  "            return new ExportPackage { PackageFileName = fileName' PackageName = packageName' PackageType = packageType' Version = version }; " is 129.
Long Statement,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,ProcessImportModulePackages,The length of the statement  "            var packageZipFile = $"{Globals.ApplicationMapPath}{Constants.ExportFolder}{_exportImportJob.Directory.TrimEnd('\\'' '/')}\\{Constants.ExportZipPackages}"; " is 155.
Long Statement,Dnn.ExportImport.Components.Services,PortalExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PortalExportService.cs,ExportData,The length of the statement  "                    SettingsController.Instance.GetSetting(Constants.PortalSettingExportKey)?.SettingValue?.Split(new[] { ''' }' StringSplitOptions.RemoveEmptyEntries); " is 148.
Long Statement,Dnn.ExportImport.Components.Services,PortalExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PortalExportService.cs,ExportData,The length of the statement  "                    portalSettings = CBO.FillCollection<ExportPortalSetting>(DataProvider.Instance().GetPortalSettings(exportJob.PortalId' toDate' fromDate)); " is 138.
Long Statement,Dnn.ExportImport.Components.Services,PortalExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PortalExportService.cs,ExportData,The length of the statement  "                        portalSettings.Where(x => settingToMigrate.Any(setting => setting.Trim().Equals(x.SettingName' StringComparison.InvariantCultureIgnoreCase))).ToList(); " is 151.
Long Statement,Dnn.ExportImport.Components.Services,PortalExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PortalExportService.cs,ProcessPortalSettings,The length of the statement  "                CBO.FillCollection<ExportPortalSetting>(DataProvider.Instance().GetPortalSettings(portalId' DateUtils.GetDatabaseUtcTime().AddYears(1)' null)); " is 143.
Long Statement,Dnn.ExportImport.Components.Services,PortalExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PortalExportService.cs,ProcessPortalSettings,The length of the statement  "                    var createdBy = Util.GetUserIdByName(importJob' exportPortalSetting.CreatedByUserId' exportPortalSetting.CreatedByUserName); " is 124.
Long Statement,Dnn.ExportImport.Components.Services,PortalExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PortalExportService.cs,ProcessPortalLanguages,The length of the statement  "                CBO.FillCollection<ExportPortalLanguage>(DataProvider.Instance().GetPortalLanguages(portalId' DateUtils.GetDatabaseUtcTime().AddYears(1)' null)); " is 145.
Long Statement,Dnn.ExportImport.Components.Services,PortalExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PortalExportService.cs,ProcessPortalLanguages,The length of the statement  "                    var modifiedBy = Util.GetUserIdByName(importJob' exportPortalLanguage.LastModifiedByUserId' exportPortalLanguage.LastModifiedByUserName); " is 137.
Long Statement,Dnn.ExportImport.Components.Services,PortalExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PortalExportService.cs,ProcessPortalLanguages,The length of the statement  "                    var createdBy = Util.GetUserIdByName(importJob' exportPortalLanguage.CreatedByUserId' exportPortalLanguage.CreatedByUserName); " is 126.
Long Statement,Dnn.ExportImport.Components.Services,ProfilePropertiesService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\ProfilePropertiesService.cs,ImportData,The length of the statement  "                            var modifiedById = Util.GetUserIdByName(importJob' profileProperty.LastModifiedByUserId' profileProperty.LastModifiedByUserName); " is 129.
Long Statement,Dnn.ExportImport.Components.Services,RolesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\RolesExportService.cs,ProcessRoleGroups,The length of the statement  "            var localRoleGroups = CBO.FillCollection<ExportRoleGroup>(DataProvider.Instance().GetAllRoleGroups(portalId' DateUtils.GetDatabaseUtcTime().AddYears(1)' null)); " is 160.
Long Statement,Dnn.ExportImport.Components.Services,UsersDataExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersDataExportService.cs,ImportData,The length of the statement  "                    tableUserProfile.Columns.AddRange(UserProfileDatasetColumns.Select(column => new DataColumn(column.Item1' column.Item2)).ToArray()); " is 132.
Long Statement,Dnn.ExportImport.Components.Services,UsersDataExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersDataExportService.cs,ImportData,The length of the statement  "                    tableUserRoles.Columns.AddRange(UserRolesDatasetColumns.Select(column => new DataColumn(column.Item1' column.Item2)).ToArray()); " is 128.
Long Statement,Dnn.ExportImport.Components.Services,UsersDataExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersDataExportService.cs,ImportData,The length of the statement  "                                        userRoleRow["LastModifiedByUserId"] = Util.GetUserIdByName(importJob' user.LastModifiedByUserId' user.LastModifiedByUserName); " is 126.
Long Statement,Dnn.ExportImport.Components.Services,UsersDataExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersDataExportService.cs,ImportData,The length of the statement  "                                            if (userProfile.PropertyName.Equals("photo"' StringComparison.InvariantCultureIgnoreCase) && (value = GetUserPhotoId(portalId' value' user)) == null) " is 149.
Long Statement,Dnn.ExportImport.Components.Services,UsersDataExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersDataExportService.cs,ImportData,The length of the statement  "                                .BulkInsert("ExportImport_AddUpdateUserRolesBulk"' "@DataTable"' tableUserRoles' new Dictionary<string' object> { { "Overwrite"' overwrite } }); " is 144.
Long Statement,Dnn.ExportImport.Components.Services,UsersDataExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersDataExportService.cs,ImportData,The length of the statement  "                            Result.AddLogEntry($"Importing Users Data from {pageIndex * pageSize} to {pageIndex * pageSize + pageSize} exception"' ex.Message' ReportLevel.Error); " is 150.
Long Statement,Dnn.ExportImport.Components.Services,UsersExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersExportService.cs,ExportData,The length of the statement  "                        Result.AddLogEntry($"Exporting Users from {pageIndex * pageSize} to {pageIndex * pageSize + pageSize} exception"' ex.Message' ReportLevel.Error); " is 145.
Long Statement,Dnn.ExportImport.Components.Services,UsersExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersExportService.cs,ImportData,The length of the statement  "                                .BulkInsert("ExportImport_AddUpdateUsersBulk"' "@DataTable"' table' new Dictionary<string' object> { { "Overwrite"' overwrite } }); " is 131.
Long Statement,Dnn.ExportImport.Components.Services,UsersExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersExportService.cs,ImportData,The length of the statement  "                            Result.AddLogEntry($"Importing Users from {pageIndex * pageSize} to {pageIndex * pageSize + pageSize} exception"' ex.Message' ReportLevel.Error); " is 145.
Long Statement,Dnn.ExportImport.Components.Services,WorkflowsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\WorkflowsExportService.cs,ImportData,The length of the statement  "                                if (importPermission.RoleID != null && importPermission.RoleID > noRole && !string.IsNullOrEmpty(importPermission.RoleName)) " is 124.
Complex Conditional,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,Export,The conditional expression  "(firstIteration && includedItems.Any(x => x.Equals(service.Category' IgnoreCaseComp))) ||                              (!firstIteration && includedItems.Any(x => x.Equals(service.ParentCategory' IgnoreCaseComp)))"  is complex.
Complex Conditional,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,Import,The conditional expression  "(firstIteration && includedItems.Any(x => x.Equals(service.Category' IgnoreCaseComp))) ||                              (!firstIteration && includedItems.Any(x => x.Equals(service.ParentCategory' IgnoreCaseComp)))"  is complex.
Complex Conditional,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,PrepareCheckPoints,The conditional expression  "(firstIteration && includedItems.Any(x => x.Equals(service.Category' IgnoreCaseComp))) ||                          (!firstIteration && includedItems.Any(x => x.Equals(service.ParentCategory' IgnoreCaseComp)))"  is complex.
Complex Conditional,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ProcessFiles,The conditional expression  "(file.Content != null && existingFile.Content == null) ||                      (existingFile.Content != null && file.Content == null) ||                      (file.Content != null && existingFile.Content != null &&                       file.Content.SequenceEqual(existingFile.Content))"  is complex.
Complex Conditional,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,ProcessImportModulePackages,The conditional expression  "existPackage != null &&                                      (existPackage.Version > version ||                                       (existPackage.Version == version &&                                        importDto.CollisionResolution == CollisionResolution.Ignore))"  is complex.
Complex Conditional,Dnn.ExportImport.Components.Services,WorkflowsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\WorkflowsExportService.cs,ImportData,The conditional expression  "CheckCancelled(importJob) || CheckPoint.Stage >= 1 || CheckPoint.Completed || CheckPointStageCallback(this)"  is complex.
Empty Catch Block,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,ProcessImportModulePackages,The method has an empty catch block.
Magic Number,Dnn.ExportImport.Components.Common,CompressionUtil,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Common\CompressionUtil.cs,AddFileToArchive,The following statement contains a magic number: if (fileInfo.Length < 1610612736)              {                  archive.CreateEntryFromFile(file'                      string.IsNullOrEmpty(folder) ? entryName : Path.Combine(folder' entryName)' CompressionLevel.Fastest);                  return true;              }
Magic Number,Dnn.ExportImport.Components.Common,Util,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Common\Util.cs,FormatSize,The following statement contains a magic number: const long kb = 1024;
Magic Number,Dnn.ExportImport.Components.Controllers,BaseController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\BaseController.cs,GetAllJobs,The following statement contains a magic number: if (pageSize < 1) pageSize = 1;              else if (pageSize > 100) pageSize = 100;
Magic Number,Dnn.ExportImport.Components.Controllers,BaseController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\BaseController.cs,GetAllJobs,The following statement contains a magic number: if (pageSize < 1) pageSize = 1;              else if (pageSize > 100) pageSize = 100;
Magic Number,Dnn.ExportImport.Components.Controllers,ImportController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\ImportController.cs,GetImportPackages,The following statement contains a magic number: pageSize = pageSize > 100 ? 100 : pageSize;
Magic Number,Dnn.ExportImport.Components.Controllers,ImportController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\ImportController.cs,GetImportPackages,The following statement contains a magic number: pageSize = pageSize > 100 ? 100 : pageSize;
Magic Number,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,GetTimeoutPerSlot,The following statement contains a magic number: if (setting != null && !int.TryParse(setting.SettingValue' out value))              {                  // default max time to run a job is 8 hours                  value = (int)TimeSpan.FromHours(8).TotalSeconds;              }
Magic Number,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,GetTimeoutPerSlot,The following statement contains a magic number: if (value < 600)              {                  value = 600;              }              else if (value > 12 * 60 * 60)              {                  value = 12 * 60 * 60;              }
Magic Number,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,GetTimeoutPerSlot,The following statement contains a magic number: if (value < 600)              {                  value = 600;              }              else if (value > 12 * 60 * 60)              {                  value = 12 * 60 * 60;              }
Magic Number,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,GetTimeoutPerSlot,The following statement contains a magic number: if (value < 600)              {                  value = 600;              }              else if (value > 12 * 60 * 60)              {                  value = 12 * 60 * 60;              }
Magic Number,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,GetTimeoutPerSlot,The following statement contains a magic number: if (value < 600)              {                  value = 600;              }              else if (value > 12 * 60 * 60)              {                  value = 12 * 60 * 60;              }
Magic Number,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,GetTimeoutPerSlot,The following statement contains a magic number: if (value < 600)              {                  value = 600;              }              else if (value > 12 * 60 * 60)              {                  value = 12 * 60 * 60;              }
Magic Number,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,GetTimeoutPerSlot,The following statement contains a magic number: if (value < 600)              {                  value = 600;              }              else if (value > 12 * 60 * 60)              {                  value = 12 * 60 * 60;              }
Magic Number,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,GetTimeoutPerSlot,The following statement contains a magic number: if (value < 600)              {                  value = 600;              }              else if (value > 12 * 60 * 60)              {                  value = 12 * 60 * 60;              }
Magic Number,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,GetTimeoutPerSlot,The following statement contains a magic number: if (value < 600)              {                  value = 600;              }              else if (value > 12 * 60 * 60)              {                  value = 12 * 60 * 60;              }
Magic Number,Dnn.ExportImport.Components.Engines,ExportImportEngine,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Engines\ExportImportEngine.cs,AddLogsToDatabase,The following statement contains a magic number: using (var table = new DataTable("ExportImportJobLogs"))              {                  // must create the columns from scratch with each iteration                  table.Columns.AddRange(DatasetColumns.Select(                      column => new DataColumn(column.Item1' column.Item2)).ToArray());                    // batch specific amount of record each time                  const int batchSize = 500;                  var toSkip = 0;                  while (toSkip < completeLog.Count)                  {                      foreach (var item in completeLog.Skip(toSkip).Take(batchSize))                      {                          var row = table.NewRow();                          row["JobId"] = jobId;                          row["Name"] = item.Name.TrimToLength(Constants.LogColumnLength);                          row["Value"] = item.Value.TrimToLength(Constants.LogColumnLength);                          row["Level"] = (int)item.ReportLevel;                          row["CreatedOnDate"] = item.CreatedOnDate;                          table.Rows.Add(row);                      }                        PlatformDataProvider.Instance().BulkInsert("ExportImportJobLogs_AddBulk"' "@DataTable"' table);                      toSkip += batchSize;                      table.Rows.Clear();                  }              }
Magic Number,Dnn.ExportImport.Components.Providers,DataProvider,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Providers\DataProvider.cs,RemoveJob,The following statement contains a magic number: _dataProvider.ExecuteNonQuery(60' "ExportImportJobs_Remove"' jobId);
Magic Number,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ExportData,The following statement contains a magic number: try              {                  var assetsFile = string.Format(_assetsFolder' exportJob.Directory.TrimEnd('\\').TrimEnd('/'));                    if (CheckPoint.Stage == 0)                  {                      var fromDate = (exportDto.FromDateUtc ?? Constants.MinDbTime).ToLocalTime();                      var toDate = exportDto.ToDateUtc.ToLocalTime();                      var portal = PortalController.Instance.GetPortal(portalId);                        var folders =                          CBO.FillCollection<ExportFolder>(DataProvider.Instance()                              .GetFolders(portalId' toDate' fromDate)).ToList();                      var totalFolders = folders.Any() ? folders.Count : 0;                      folders = folders.Skip(skip).ToList();                          //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalFolders : CheckPoint.TotalItems;                      CheckPoint.ProcessedItems = skip;                      CheckPoint.Progress = CheckPoint.TotalItems > 0 ? skip * 100.0 / CheckPoint.TotalItems : 0;                      if (CheckPointStageCallback(this)) return;                      using (var zipArchive = CompressionUtil.OpenCreate(assetsFile))                      {                          foreach (var folder in folders)                          {                              if (CheckCancelled(exportJob)) break;                              var isUserFolder = false;                                var files =                                  CBO.FillCollection<ExportFile>(                                      DataProvider.Instance()                                          .GetFiles(portalId' folder.FolderId' toDate' fromDate)).Where(x => x.Extension != Constants.TemplatesExtension).ToList();                              int? userId;                              if (IsUserFolder(folder.FolderPath' out userId))                              {                                  isUserFolder = true;                                  folder.UserId = userId;                                  folder.Username =                                      UserController.GetUserById(portalId' Convert.ToInt32(userId))?.Username;                              }                              if (folder.ParentId != null && folder.ParentId > 0)                              {                                  //If parent id exists then change the parent folder id to parent id.                                  folder.ParentId =                                      Repository.GetItem<ExportFolder>(                                          x => x.FolderId == Convert.ToInt32(folder.ParentId))?.Id;                              }                                Repository.CreateItem(folder' null);                              totalFolderExported++;                              //Include permissions only if IncludePermissions=true                              if (exportDto.IncludePermissions)                              {                                  var permissions =                                      CBO.FillCollection<ExportFolderPermission>(DataProvider.Instance()                                          .GetFolderPermissionsByPath(portalId' folder.FolderPath' toDate' fromDate));                                  Repository.CreateItems(permissions' folder.Id);                                  totalFolderPermissionsExported += permissions.Count;                              }                              Repository.CreateItems(files' folder.Id);                              totalFilesExported += files.Count;                              var folderOffset = portal.HomeDirectoryMapPath.Length +                                                 (portal.HomeDirectoryMapPath.EndsWith("\\") ? 0 : 1);                                if (folder.StorageLocation != (int)FolderController.StorageLocationTypes.DatabaseSecure)                              {                                    CompressionUtil.AddFilesToArchive(zipArchive' files.Select(file => portal.HomeDirectoryMapPath + folder.FolderPath + GetActualFileName(file))'                                      folderOffset' isUserFolder ? "TempUsers" : null);                                }                              CheckPoint.ProcessedItems++;                              CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalFolders;                              CheckPoint.StageData = null;                              currentIndex++;                              //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                              if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                              Repository.RebuildIndex<ExportFolder>(x => x.Id' true);                              Repository.RebuildIndex<ExportFolder>(x => x.UserId);                              Repository.RebuildIndex<ExportFile>(x => x.ReferenceId);                          }                      }                      CheckPoint.Completed = true;                      CheckPoint.Stage++;                      currentIndex = 0;                      CheckPoint.Progress = 100;                  }              }              finally              {                  CheckPoint.StageData = currentIndex > 0 ? JsonConvert.SerializeObject(new { skip = currentIndex }) : null;                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Folders"' totalFolderExported.ToString());                  Result.AddSummary("Exported Folder Permissions"' totalFolderPermissionsExported.ToString());                  Result.AddSummary("Exported Files"' totalFilesExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ExportData,The following statement contains a magic number: try              {                  var assetsFile = string.Format(_assetsFolder' exportJob.Directory.TrimEnd('\\').TrimEnd('/'));                    if (CheckPoint.Stage == 0)                  {                      var fromDate = (exportDto.FromDateUtc ?? Constants.MinDbTime).ToLocalTime();                      var toDate = exportDto.ToDateUtc.ToLocalTime();                      var portal = PortalController.Instance.GetPortal(portalId);                        var folders =                          CBO.FillCollection<ExportFolder>(DataProvider.Instance()                              .GetFolders(portalId' toDate' fromDate)).ToList();                      var totalFolders = folders.Any() ? folders.Count : 0;                      folders = folders.Skip(skip).ToList();                          //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalFolders : CheckPoint.TotalItems;                      CheckPoint.ProcessedItems = skip;                      CheckPoint.Progress = CheckPoint.TotalItems > 0 ? skip * 100.0 / CheckPoint.TotalItems : 0;                      if (CheckPointStageCallback(this)) return;                      using (var zipArchive = CompressionUtil.OpenCreate(assetsFile))                      {                          foreach (var folder in folders)                          {                              if (CheckCancelled(exportJob)) break;                              var isUserFolder = false;                                var files =                                  CBO.FillCollection<ExportFile>(                                      DataProvider.Instance()                                          .GetFiles(portalId' folder.FolderId' toDate' fromDate)).Where(x => x.Extension != Constants.TemplatesExtension).ToList();                              int? userId;                              if (IsUserFolder(folder.FolderPath' out userId))                              {                                  isUserFolder = true;                                  folder.UserId = userId;                                  folder.Username =                                      UserController.GetUserById(portalId' Convert.ToInt32(userId))?.Username;                              }                              if (folder.ParentId != null && folder.ParentId > 0)                              {                                  //If parent id exists then change the parent folder id to parent id.                                  folder.ParentId =                                      Repository.GetItem<ExportFolder>(                                          x => x.FolderId == Convert.ToInt32(folder.ParentId))?.Id;                              }                                Repository.CreateItem(folder' null);                              totalFolderExported++;                              //Include permissions only if IncludePermissions=true                              if (exportDto.IncludePermissions)                              {                                  var permissions =                                      CBO.FillCollection<ExportFolderPermission>(DataProvider.Instance()                                          .GetFolderPermissionsByPath(portalId' folder.FolderPath' toDate' fromDate));                                  Repository.CreateItems(permissions' folder.Id);                                  totalFolderPermissionsExported += permissions.Count;                              }                              Repository.CreateItems(files' folder.Id);                              totalFilesExported += files.Count;                              var folderOffset = portal.HomeDirectoryMapPath.Length +                                                 (portal.HomeDirectoryMapPath.EndsWith("\\") ? 0 : 1);                                if (folder.StorageLocation != (int)FolderController.StorageLocationTypes.DatabaseSecure)                              {                                    CompressionUtil.AddFilesToArchive(zipArchive' files.Select(file => portal.HomeDirectoryMapPath + folder.FolderPath + GetActualFileName(file))'                                      folderOffset' isUserFolder ? "TempUsers" : null);                                }                              CheckPoint.ProcessedItems++;                              CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalFolders;                              CheckPoint.StageData = null;                              currentIndex++;                              //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                              if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                              Repository.RebuildIndex<ExportFolder>(x => x.Id' true);                              Repository.RebuildIndex<ExportFolder>(x => x.UserId);                              Repository.RebuildIndex<ExportFile>(x => x.ReferenceId);                          }                      }                      CheckPoint.Completed = true;                      CheckPoint.Stage++;                      currentIndex = 0;                      CheckPoint.Progress = 100;                  }              }              finally              {                  CheckPoint.StageData = currentIndex > 0 ? JsonConvert.SerializeObject(new { skip = currentIndex }) : null;                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Folders"' totalFolderExported.ToString());                  Result.AddSummary("Exported Folder Permissions"' totalFolderPermissionsExported.ToString());                  Result.AddSummary("Exported Files"' totalFilesExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ExportData,The following statement contains a magic number: try              {                  var assetsFile = string.Format(_assetsFolder' exportJob.Directory.TrimEnd('\\').TrimEnd('/'));                    if (CheckPoint.Stage == 0)                  {                      var fromDate = (exportDto.FromDateUtc ?? Constants.MinDbTime).ToLocalTime();                      var toDate = exportDto.ToDateUtc.ToLocalTime();                      var portal = PortalController.Instance.GetPortal(portalId);                        var folders =                          CBO.FillCollection<ExportFolder>(DataProvider.Instance()                              .GetFolders(portalId' toDate' fromDate)).ToList();                      var totalFolders = folders.Any() ? folders.Count : 0;                      folders = folders.Skip(skip).ToList();                          //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalFolders : CheckPoint.TotalItems;                      CheckPoint.ProcessedItems = skip;                      CheckPoint.Progress = CheckPoint.TotalItems > 0 ? skip * 100.0 / CheckPoint.TotalItems : 0;                      if (CheckPointStageCallback(this)) return;                      using (var zipArchive = CompressionUtil.OpenCreate(assetsFile))                      {                          foreach (var folder in folders)                          {                              if (CheckCancelled(exportJob)) break;                              var isUserFolder = false;                                var files =                                  CBO.FillCollection<ExportFile>(                                      DataProvider.Instance()                                          .GetFiles(portalId' folder.FolderId' toDate' fromDate)).Where(x => x.Extension != Constants.TemplatesExtension).ToList();                              int? userId;                              if (IsUserFolder(folder.FolderPath' out userId))                              {                                  isUserFolder = true;                                  folder.UserId = userId;                                  folder.Username =                                      UserController.GetUserById(portalId' Convert.ToInt32(userId))?.Username;                              }                              if (folder.ParentId != null && folder.ParentId > 0)                              {                                  //If parent id exists then change the parent folder id to parent id.                                  folder.ParentId =                                      Repository.GetItem<ExportFolder>(                                          x => x.FolderId == Convert.ToInt32(folder.ParentId))?.Id;                              }                                Repository.CreateItem(folder' null);                              totalFolderExported++;                              //Include permissions only if IncludePermissions=true                              if (exportDto.IncludePermissions)                              {                                  var permissions =                                      CBO.FillCollection<ExportFolderPermission>(DataProvider.Instance()                                          .GetFolderPermissionsByPath(portalId' folder.FolderPath' toDate' fromDate));                                  Repository.CreateItems(permissions' folder.Id);                                  totalFolderPermissionsExported += permissions.Count;                              }                              Repository.CreateItems(files' folder.Id);                              totalFilesExported += files.Count;                              var folderOffset = portal.HomeDirectoryMapPath.Length +                                                 (portal.HomeDirectoryMapPath.EndsWith("\\") ? 0 : 1);                                if (folder.StorageLocation != (int)FolderController.StorageLocationTypes.DatabaseSecure)                              {                                    CompressionUtil.AddFilesToArchive(zipArchive' files.Select(file => portal.HomeDirectoryMapPath + folder.FolderPath + GetActualFileName(file))'                                      folderOffset' isUserFolder ? "TempUsers" : null);                                }                              CheckPoint.ProcessedItems++;                              CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalFolders;                              CheckPoint.StageData = null;                              currentIndex++;                              //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                              if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                              Repository.RebuildIndex<ExportFolder>(x => x.Id' true);                              Repository.RebuildIndex<ExportFolder>(x => x.UserId);                              Repository.RebuildIndex<ExportFile>(x => x.ReferenceId);                          }                      }                      CheckPoint.Completed = true;                      CheckPoint.Stage++;                      currentIndex = 0;                      CheckPoint.Progress = 100;                  }              }              finally              {                  CheckPoint.StageData = currentIndex > 0 ? JsonConvert.SerializeObject(new { skip = currentIndex }) : null;                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Folders"' totalFolderExported.ToString());                  Result.AddSummary("Exported Folder Permissions"' totalFolderPermissionsExported.ToString());                  Result.AddSummary("Exported Files"' totalFilesExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ExportData,The following statement contains a magic number: try              {                  var assetsFile = string.Format(_assetsFolder' exportJob.Directory.TrimEnd('\\').TrimEnd('/'));                    if (CheckPoint.Stage == 0)                  {                      var fromDate = (exportDto.FromDateUtc ?? Constants.MinDbTime).ToLocalTime();                      var toDate = exportDto.ToDateUtc.ToLocalTime();                      var portal = PortalController.Instance.GetPortal(portalId);                        var folders =                          CBO.FillCollection<ExportFolder>(DataProvider.Instance()                              .GetFolders(portalId' toDate' fromDate)).ToList();                      var totalFolders = folders.Any() ? folders.Count : 0;                      folders = folders.Skip(skip).ToList();                          //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalFolders : CheckPoint.TotalItems;                      CheckPoint.ProcessedItems = skip;                      CheckPoint.Progress = CheckPoint.TotalItems > 0 ? skip * 100.0 / CheckPoint.TotalItems : 0;                      if (CheckPointStageCallback(this)) return;                      using (var zipArchive = CompressionUtil.OpenCreate(assetsFile))                      {                          foreach (var folder in folders)                          {                              if (CheckCancelled(exportJob)) break;                              var isUserFolder = false;                                var files =                                  CBO.FillCollection<ExportFile>(                                      DataProvider.Instance()                                          .GetFiles(portalId' folder.FolderId' toDate' fromDate)).Where(x => x.Extension != Constants.TemplatesExtension).ToList();                              int? userId;                              if (IsUserFolder(folder.FolderPath' out userId))                              {                                  isUserFolder = true;                                  folder.UserId = userId;                                  folder.Username =                                      UserController.GetUserById(portalId' Convert.ToInt32(userId))?.Username;                              }                              if (folder.ParentId != null && folder.ParentId > 0)                              {                                  //If parent id exists then change the parent folder id to parent id.                                  folder.ParentId =                                      Repository.GetItem<ExportFolder>(                                          x => x.FolderId == Convert.ToInt32(folder.ParentId))?.Id;                              }                                Repository.CreateItem(folder' null);                              totalFolderExported++;                              //Include permissions only if IncludePermissions=true                              if (exportDto.IncludePermissions)                              {                                  var permissions =                                      CBO.FillCollection<ExportFolderPermission>(DataProvider.Instance()                                          .GetFolderPermissionsByPath(portalId' folder.FolderPath' toDate' fromDate));                                  Repository.CreateItems(permissions' folder.Id);                                  totalFolderPermissionsExported += permissions.Count;                              }                              Repository.CreateItems(files' folder.Id);                              totalFilesExported += files.Count;                              var folderOffset = portal.HomeDirectoryMapPath.Length +                                                 (portal.HomeDirectoryMapPath.EndsWith("\\") ? 0 : 1);                                if (folder.StorageLocation != (int)FolderController.StorageLocationTypes.DatabaseSecure)                              {                                    CompressionUtil.AddFilesToArchive(zipArchive' files.Select(file => portal.HomeDirectoryMapPath + folder.FolderPath + GetActualFileName(file))'                                      folderOffset' isUserFolder ? "TempUsers" : null);                                }                              CheckPoint.ProcessedItems++;                              CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalFolders;                              CheckPoint.StageData = null;                              currentIndex++;                              //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                              if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                              Repository.RebuildIndex<ExportFolder>(x => x.Id' true);                              Repository.RebuildIndex<ExportFolder>(x => x.UserId);                              Repository.RebuildIndex<ExportFile>(x => x.ReferenceId);                          }                      }                      CheckPoint.Completed = true;                      CheckPoint.Stage++;                      currentIndex = 0;                      CheckPoint.Progress = 100;                  }              }              finally              {                  CheckPoint.StageData = currentIndex > 0 ? JsonConvert.SerializeObject(new { skip = currentIndex }) : null;                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Folders"' totalFolderExported.ToString());                  Result.AddSummary("Exported Folder Permissions"' totalFolderPermissionsExported.ToString());                  Result.AddSummary("Exported Files"' totalFilesExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage >= 2 || CheckPoint.Completed)                  return;
Magic Number,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 0)              {                  if (!File.Exists(assetsFile))                  {                      Result.AddLogEntry("AssetsFileNotFound"' "Assets file not found. Skipping assets import"'                          ReportLevel.Warn);                      CheckPoint.Completed = true;                      CheckPointStageCallback(this);                  }                  else                  {                      CompressionUtil.UnZipArchive(assetsFile' portal.HomeDirectoryMapPath'                          importDto.CollisionResolution == CollisionResolution.Overwrite);                      //Stage 1: Once unzipping of portal files is completed.                      CheckPoint.Stage++;                      CheckPoint.StageData = null;                      CheckPoint.Progress = 10;                      if (CheckPointStageCallback(this)) return;                  }              }
Magic Number,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 1)              {                  try                  {                      //Stage 2 starts                      var sourceFolders = Repository.GetAllItems<ExportFolder>(x => x.CreatedOnDate' true' skip).ToList();                        var totalFolders = sourceFolders.Any() ? sourceFolders.Count : 0;                      //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalFolders : CheckPoint.TotalItems;                      if (CheckPointStageCallback(this)) return;                        foreach (var sourceFolder in sourceFolders)                      {                          if (CheckCancelled(importJob)) break;                          // PROCESS FOLDERS                          //Create new or update existing folder                          if (ProcessFolder(importJob' importDto' sourceFolder))                          {                              totalFolderImported++;                                //Include permissions only if permissions were exported in package.                              if (importDto.ExportDto.IncludePermissions)                              {                                  // PROCESS FOLDER PERMISSIONS                                  var sourceFolderPermissions =                                      Repository.GetRelatedItems<ExportFolderPermission>(sourceFolder.Id).ToList();                                  //Replace folderId for each permission with new one.                                  sourceFolderPermissions.ForEach(x =>                                  {                                      x.FolderId = Convert.ToInt32(sourceFolder.FolderId);                                      x.FolderPath = sourceFolder.FolderPath;                                  });                                    // PROCESS FOLDER PERMISSIONS                                  //File local files in the system related to the folder path.                                  var localPermissions =                                      CBO.FillCollection<ExportFolderPermission>(DataProvider.Instance()                                          .GetFolderPermissionsByPath(portalId' sourceFolder.FolderPath'                                              DateUtils.GetDatabaseUtcTime().AddYears(1)' null));                                    foreach (var folderPermission in sourceFolderPermissions)                                  {                                      ProcessFolderPermission(importJob' importDto' folderPermission'                                          localPermissions);                                  }                                  totalFolderPermissionsImported += sourceFolderPermissions.Count;                              }                                // PROCESS FILES                              var sourceFiles =                                  Repository.GetRelatedItems<ExportFile>(sourceFolder.Id).ToList();                              //Replace folderId for each file with new one.                              sourceFiles.ForEach(x =>                              {                                  x.FolderId = Convert.ToInt32(sourceFolder.FolderId);                                  x.Folder = sourceFolder.FolderPath;                              });                                //File local files in the system related to the folder                              var localFiles =                                  CBO.FillCollection<ExportFile>(DataProvider.Instance()                                      .GetFiles(portalId' sourceFolder.FolderId'                                          DateUtils.GetDatabaseUtcTime().AddYears(1)' null));                                foreach (var file in sourceFiles)                              {                                  ProcessFiles(importJob' importDto' file' localFiles);                              }                              totalFilesImported += sourceFiles.Count;                          }                            currentIndex++;                          CheckPoint.ProcessedItems++;                          CheckPoint.Progress = 10 + CheckPoint.ProcessedItems * 90.0 / totalFolders;                          //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                          if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                      }                      currentIndex = 0;                      CheckPoint.Completed = true;                      CheckPoint.Stage++;                      CheckPoint.Progress = 100;                  }                  finally                  {                      CheckPoint.StageData = currentIndex > 0                          ? JsonConvert.SerializeObject(new { skip = currentIndex })                          : null;                      CheckPointStageCallback(this);                        Result.AddSummary("Imported Folders"' totalFolderImported.ToString());                      Result.AddSummary("Imported Folder Permissions"' totalFolderPermissionsImported.ToString());                      Result.AddSummary("Imported Files"' totalFilesImported.ToString());                        if (Directory.Exists(userFolderPath) && currentIndex == 0)                          Directory.Delete(userFolderPath' true);                  }              }
Magic Number,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 1)              {                  try                  {                      //Stage 2 starts                      var sourceFolders = Repository.GetAllItems<ExportFolder>(x => x.CreatedOnDate' true' skip).ToList();                        var totalFolders = sourceFolders.Any() ? sourceFolders.Count : 0;                      //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalFolders : CheckPoint.TotalItems;                      if (CheckPointStageCallback(this)) return;                        foreach (var sourceFolder in sourceFolders)                      {                          if (CheckCancelled(importJob)) break;                          // PROCESS FOLDERS                          //Create new or update existing folder                          if (ProcessFolder(importJob' importDto' sourceFolder))                          {                              totalFolderImported++;                                //Include permissions only if permissions were exported in package.                              if (importDto.ExportDto.IncludePermissions)                              {                                  // PROCESS FOLDER PERMISSIONS                                  var sourceFolderPermissions =                                      Repository.GetRelatedItems<ExportFolderPermission>(sourceFolder.Id).ToList();                                  //Replace folderId for each permission with new one.                                  sourceFolderPermissions.ForEach(x =>                                  {                                      x.FolderId = Convert.ToInt32(sourceFolder.FolderId);                                      x.FolderPath = sourceFolder.FolderPath;                                  });                                    // PROCESS FOLDER PERMISSIONS                                  //File local files in the system related to the folder path.                                  var localPermissions =                                      CBO.FillCollection<ExportFolderPermission>(DataProvider.Instance()                                          .GetFolderPermissionsByPath(portalId' sourceFolder.FolderPath'                                              DateUtils.GetDatabaseUtcTime().AddYears(1)' null));                                    foreach (var folderPermission in sourceFolderPermissions)                                  {                                      ProcessFolderPermission(importJob' importDto' folderPermission'                                          localPermissions);                                  }                                  totalFolderPermissionsImported += sourceFolderPermissions.Count;                              }                                // PROCESS FILES                              var sourceFiles =                                  Repository.GetRelatedItems<ExportFile>(sourceFolder.Id).ToList();                              //Replace folderId for each file with new one.                              sourceFiles.ForEach(x =>                              {                                  x.FolderId = Convert.ToInt32(sourceFolder.FolderId);                                  x.Folder = sourceFolder.FolderPath;                              });                                //File local files in the system related to the folder                              var localFiles =                                  CBO.FillCollection<ExportFile>(DataProvider.Instance()                                      .GetFiles(portalId' sourceFolder.FolderId'                                          DateUtils.GetDatabaseUtcTime().AddYears(1)' null));                                foreach (var file in sourceFiles)                              {                                  ProcessFiles(importJob' importDto' file' localFiles);                              }                              totalFilesImported += sourceFiles.Count;                          }                            currentIndex++;                          CheckPoint.ProcessedItems++;                          CheckPoint.Progress = 10 + CheckPoint.ProcessedItems * 90.0 / totalFolders;                          //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                          if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                      }                      currentIndex = 0;                      CheckPoint.Completed = true;                      CheckPoint.Stage++;                      CheckPoint.Progress = 100;                  }                  finally                  {                      CheckPoint.StageData = currentIndex > 0                          ? JsonConvert.SerializeObject(new { skip = currentIndex })                          : null;                      CheckPointStageCallback(this);                        Result.AddSummary("Imported Folders"' totalFolderImported.ToString());                      Result.AddSummary("Imported Folder Permissions"' totalFolderPermissionsImported.ToString());                      Result.AddSummary("Imported Files"' totalFilesImported.ToString());                        if (Directory.Exists(userFolderPath) && currentIndex == 0)                          Directory.Delete(userFolderPath' true);                  }              }
Magic Number,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 1)              {                  try                  {                      //Stage 2 starts                      var sourceFolders = Repository.GetAllItems<ExportFolder>(x => x.CreatedOnDate' true' skip).ToList();                        var totalFolders = sourceFolders.Any() ? sourceFolders.Count : 0;                      //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalFolders : CheckPoint.TotalItems;                      if (CheckPointStageCallback(this)) return;                        foreach (var sourceFolder in sourceFolders)                      {                          if (CheckCancelled(importJob)) break;                          // PROCESS FOLDERS                          //Create new or update existing folder                          if (ProcessFolder(importJob' importDto' sourceFolder))                          {                              totalFolderImported++;                                //Include permissions only if permissions were exported in package.                              if (importDto.ExportDto.IncludePermissions)                              {                                  // PROCESS FOLDER PERMISSIONS                                  var sourceFolderPermissions =                                      Repository.GetRelatedItems<ExportFolderPermission>(sourceFolder.Id).ToList();                                  //Replace folderId for each permission with new one.                                  sourceFolderPermissions.ForEach(x =>                                  {                                      x.FolderId = Convert.ToInt32(sourceFolder.FolderId);                                      x.FolderPath = sourceFolder.FolderPath;                                  });                                    // PROCESS FOLDER PERMISSIONS                                  //File local files in the system related to the folder path.                                  var localPermissions =                                      CBO.FillCollection<ExportFolderPermission>(DataProvider.Instance()                                          .GetFolderPermissionsByPath(portalId' sourceFolder.FolderPath'                                              DateUtils.GetDatabaseUtcTime().AddYears(1)' null));                                    foreach (var folderPermission in sourceFolderPermissions)                                  {                                      ProcessFolderPermission(importJob' importDto' folderPermission'                                          localPermissions);                                  }                                  totalFolderPermissionsImported += sourceFolderPermissions.Count;                              }                                // PROCESS FILES                              var sourceFiles =                                  Repository.GetRelatedItems<ExportFile>(sourceFolder.Id).ToList();                              //Replace folderId for each file with new one.                              sourceFiles.ForEach(x =>                              {                                  x.FolderId = Convert.ToInt32(sourceFolder.FolderId);                                  x.Folder = sourceFolder.FolderPath;                              });                                //File local files in the system related to the folder                              var localFiles =                                  CBO.FillCollection<ExportFile>(DataProvider.Instance()                                      .GetFiles(portalId' sourceFolder.FolderId'                                          DateUtils.GetDatabaseUtcTime().AddYears(1)' null));                                foreach (var file in sourceFiles)                              {                                  ProcessFiles(importJob' importDto' file' localFiles);                              }                              totalFilesImported += sourceFiles.Count;                          }                            currentIndex++;                          CheckPoint.ProcessedItems++;                          CheckPoint.Progress = 10 + CheckPoint.ProcessedItems * 90.0 / totalFolders;                          //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                          if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                      }                      currentIndex = 0;                      CheckPoint.Completed = true;                      CheckPoint.Stage++;                      CheckPoint.Progress = 100;                  }                  finally                  {                      CheckPoint.StageData = currentIndex > 0                          ? JsonConvert.SerializeObject(new { skip = currentIndex })                          : null;                      CheckPointStageCallback(this);                        Result.AddSummary("Imported Folders"' totalFolderImported.ToString());                      Result.AddSummary("Imported Folder Permissions"' totalFolderPermissionsImported.ToString());                      Result.AddSummary("Imported Files"' totalFilesImported.ToString());                        if (Directory.Exists(userFolderPath) && currentIndex == 0)                          Directory.Delete(userFolderPath' true);                  }              }
Magic Number,Dnn.ExportImport.Components.Services,AssetsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\AssetsExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 1)              {                  try                  {                      //Stage 2 starts                      var sourceFolders = Repository.GetAllItems<ExportFolder>(x => x.CreatedOnDate' true' skip).ToList();                        var totalFolders = sourceFolders.Any() ? sourceFolders.Count : 0;                      //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalFolders : CheckPoint.TotalItems;                      if (CheckPointStageCallback(this)) return;                        foreach (var sourceFolder in sourceFolders)                      {                          if (CheckCancelled(importJob)) break;                          // PROCESS FOLDERS                          //Create new or update existing folder                          if (ProcessFolder(importJob' importDto' sourceFolder))                          {                              totalFolderImported++;                                //Include permissions only if permissions were exported in package.                              if (importDto.ExportDto.IncludePermissions)                              {                                  // PROCESS FOLDER PERMISSIONS                                  var sourceFolderPermissions =                                      Repository.GetRelatedItems<ExportFolderPermission>(sourceFolder.Id).ToList();                                  //Replace folderId for each permission with new one.                                  sourceFolderPermissions.ForEach(x =>                                  {                                      x.FolderId = Convert.ToInt32(sourceFolder.FolderId);                                      x.FolderPath = sourceFolder.FolderPath;                                  });                                    // PROCESS FOLDER PERMISSIONS                                  //File local files in the system related to the folder path.                                  var localPermissions =                                      CBO.FillCollection<ExportFolderPermission>(DataProvider.Instance()                                          .GetFolderPermissionsByPath(portalId' sourceFolder.FolderPath'                                              DateUtils.GetDatabaseUtcTime().AddYears(1)' null));                                    foreach (var folderPermission in sourceFolderPermissions)                                  {                                      ProcessFolderPermission(importJob' importDto' folderPermission'                                          localPermissions);                                  }                                  totalFolderPermissionsImported += sourceFolderPermissions.Count;                              }                                // PROCESS FILES                              var sourceFiles =                                  Repository.GetRelatedItems<ExportFile>(sourceFolder.Id).ToList();                              //Replace folderId for each file with new one.                              sourceFiles.ForEach(x =>                              {                                  x.FolderId = Convert.ToInt32(sourceFolder.FolderId);                                  x.Folder = sourceFolder.FolderPath;                              });                                //File local files in the system related to the folder                              var localFiles =                                  CBO.FillCollection<ExportFile>(DataProvider.Instance()                                      .GetFiles(portalId' sourceFolder.FolderId'                                          DateUtils.GetDatabaseUtcTime().AddYears(1)' null));                                foreach (var file in sourceFiles)                              {                                  ProcessFiles(importJob' importDto' file' localFiles);                              }                              totalFilesImported += sourceFiles.Count;                          }                            currentIndex++;                          CheckPoint.ProcessedItems++;                          CheckPoint.Progress = 10 + CheckPoint.ProcessedItems * 90.0 / totalFolders;                          //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                          if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                      }                      currentIndex = 0;                      CheckPoint.Completed = true;                      CheckPoint.Stage++;                      CheckPoint.Progress = 100;                  }                  finally                  {                      CheckPoint.StageData = currentIndex > 0                          ? JsonConvert.SerializeObject(new { skip = currentIndex })                          : null;                      CheckPointStageCallback(this);                        Result.AddSummary("Imported Folders"' totalFolderImported.ToString());                      Result.AddSummary("Imported Folder Permissions"' totalFolderPermissionsImported.ToString());                      Result.AddSummary("Imported Files"' totalFilesImported.ToString());                        if (Directory.Exists(userFolderPath) && currentIndex == 0)                          Directory.Delete(userFolderPath' true);                  }              }
Magic Number,Dnn.ExportImport.Components.Services,ThemesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\ThemesExportService.cs,ExportData,The following statement contains a magic number: try              {                  var packagesZipFileFormat = $"{Globals.ApplicationMapPath}{Constants.ExportFolder}{{0}}\\{Constants.ExportZipThemes}";                  var packagesZipFile = string.Format(packagesZipFileFormat' exportJob.Directory.TrimEnd('\\').TrimEnd('/'));                    if (CheckPoint.Stage == 0)                  {                      //export skin packages.                      var exportThemes = GetExportThemes();                      var totalThemes = exportThemes.Count;                        //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalThemes : CheckPoint.TotalItems;                      if (CheckPointStageCallback(this)) return;                        foreach (var theme in exportThemes)                      {                          var filePath = SkinController.FormatSkinSrc(theme' _portalSettings);                          var physicalPath = Path.Combine(Globals.ApplicationMapPath' filePath.TrimStart('/'));                          if (Directory.Exists(physicalPath))                          {                              foreach (var file in Directory.GetFiles(physicalPath' "*.*"' SearchOption.AllDirectories))                              {                                  var folderOffset = Path.Combine(Globals.ApplicationMapPath' "Portals").Length + 1;                                  CompressionUtil.AddFileToArchive(file' packagesZipFile' folderOffset);                              }                              totalThemesExported += 1;                          }                            CheckPoint.ProcessedItems++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalThemes;                          currentIndex++;                          //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                          if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                      }                      CheckPoint.Stage++;                      CheckPoint.Completed = true;                      CheckPoint.Progress = 100;                  }              }              finally              {                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Themes"' totalThemesExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,ThemesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\ThemesExportService.cs,ExportData,The following statement contains a magic number: try              {                  var packagesZipFileFormat = $"{Globals.ApplicationMapPath}{Constants.ExportFolder}{{0}}\\{Constants.ExportZipThemes}";                  var packagesZipFile = string.Format(packagesZipFileFormat' exportJob.Directory.TrimEnd('\\').TrimEnd('/'));                    if (CheckPoint.Stage == 0)                  {                      //export skin packages.                      var exportThemes = GetExportThemes();                      var totalThemes = exportThemes.Count;                        //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalThemes : CheckPoint.TotalItems;                      if (CheckPointStageCallback(this)) return;                        foreach (var theme in exportThemes)                      {                          var filePath = SkinController.FormatSkinSrc(theme' _portalSettings);                          var physicalPath = Path.Combine(Globals.ApplicationMapPath' filePath.TrimStart('/'));                          if (Directory.Exists(physicalPath))                          {                              foreach (var file in Directory.GetFiles(physicalPath' "*.*"' SearchOption.AllDirectories))                              {                                  var folderOffset = Path.Combine(Globals.ApplicationMapPath' "Portals").Length + 1;                                  CompressionUtil.AddFileToArchive(file' packagesZipFile' folderOffset);                              }                              totalThemesExported += 1;                          }                            CheckPoint.ProcessedItems++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalThemes;                          currentIndex++;                          //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                          if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                      }                      CheckPoint.Stage++;                      CheckPoint.Completed = true;                      CheckPoint.Progress = 100;                  }              }              finally              {                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Themes"' totalThemesExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,ThemesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\ThemesExportService.cs,ExportData,The following statement contains a magic number: try              {                  var packagesZipFileFormat = $"{Globals.ApplicationMapPath}{Constants.ExportFolder}{{0}}\\{Constants.ExportZipThemes}";                  var packagesZipFile = string.Format(packagesZipFileFormat' exportJob.Directory.TrimEnd('\\').TrimEnd('/'));                    if (CheckPoint.Stage == 0)                  {                      //export skin packages.                      var exportThemes = GetExportThemes();                      var totalThemes = exportThemes.Count;                        //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalThemes : CheckPoint.TotalItems;                      if (CheckPointStageCallback(this)) return;                        foreach (var theme in exportThemes)                      {                          var filePath = SkinController.FormatSkinSrc(theme' _portalSettings);                          var physicalPath = Path.Combine(Globals.ApplicationMapPath' filePath.TrimStart('/'));                          if (Directory.Exists(physicalPath))                          {                              foreach (var file in Directory.GetFiles(physicalPath' "*.*"' SearchOption.AllDirectories))                              {                                  var folderOffset = Path.Combine(Globals.ApplicationMapPath' "Portals").Length + 1;                                  CompressionUtil.AddFileToArchive(file' packagesZipFile' folderOffset);                              }                              totalThemesExported += 1;                          }                            CheckPoint.ProcessedItems++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalThemes;                          currentIndex++;                          //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                          if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                      }                      CheckPoint.Stage++;                      CheckPoint.Completed = true;                      CheckPoint.Progress = 100;                  }              }              finally              {                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Themes"' totalThemesExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,ThemesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\ThemesExportService.cs,ImportData,The following statement contains a magic number: if (File.Exists(packageZipFile))              {                  CompressionUtil.UnZipArchive(packageZipFile' tempFolder);                  var exporeFiles = Directory.Exists(tempFolder) ? Directory.GetFiles(tempFolder' "*.*"' SearchOption.AllDirectories) : new string[0];                  var portalSettings = new PortalSettings(importDto.PortalId);                  _importCount = exporeFiles.Length;                    CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? exporeFiles.Length : CheckPoint.TotalItems;                  if (CheckPointStageCallback(this)) return;                    if (CheckPoint.Stage == 0)                  {                      try                      {                          foreach (var file in exporeFiles)                          {                              try                              {                                  var checkFolder = file.Replace(tempFolder + "\\"' string.Empty).Split('\\')[0];                                  var relativePath = file.Substring((tempFolder + "\\" + checkFolder + "\\").Length);                                  string targetPath;                                      if (checkFolder == "_default")                                  {                                      targetPath = Path.Combine(Globals.HostMapPath' relativePath);                                  }                                  else if (checkFolder.EndsWith("-System"))                                  {                                      targetPath = Path.Combine(portalSettings.HomeSystemDirectoryMapPath' relativePath);                                  }                                  else                                  {                                      targetPath = Path.Combine(portalSettings.HomeDirectoryMapPath' relativePath);                                  }                                    if (!File.Exists(targetPath) ||                                      importDto.CollisionResolution == CollisionResolution.Overwrite)                                  {                                      var directory = Path.GetDirectoryName(targetPath);                                      if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))                                      {                                          Directory.CreateDirectory(directory);                                      }                                        File.Copy(file' targetPath' true);                                  }                                    Result.AddLogEntry("Import Theme File completed"' targetPath);                                  CheckPoint.ProcessedItems++;                                  CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / exporeFiles.Length;                                  CheckPointStageCallback(this); // just to update the counts without exit logic                              }                              catch (Exception ex)                              {                                  Result.AddLogEntry("Import Theme error"' file);                                  Logger.Error(ex);                              }                          }                          CheckPoint.Stage++;                          CheckPoint.Completed = true;                      }                      finally                      {                          CheckPointStageCallback(this);                          FileSystemUtils.DeleteFolderRecursive(tempFolder);                      }                  }              }              else              {                  CheckPoint.Completed = true;                  CheckPointStageCallback(this);                  Result.AddLogEntry("ThemesFileNotFound"' "Themes file not found. Skipping themes import"' ReportLevel.Warn);              }
Magic Number,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ExportData,The following statement contains a magic number: CheckPoint.Progress = 100;
Magic Number,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ImportData,The following statement contains a magic number: CheckPoint.Progress = 100;
Magic Number,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessImportPages,The following statement contains a magic number: var progressStep = 100.0 / exportedTabs.OrderByDescending(x => x.Id).Count(x => x.Id < _totals.LastProcessedId);
Magic Number,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ImportPortableContent,The following statement contains a magic number: if (exportedContent.Count > 0)              {                  var moduleDef = ModuleDefinitionController.GetModuleDefinitionByID(localModule.ModuleDefID);                  var desktopModuleInfo = DesktopModuleController.GetDesktopModule(moduleDef.DesktopModuleID' _exportDto.PortalId);                  if (!string.IsNullOrEmpty(desktopModuleInfo?.BusinessControllerClass))                  {                      try                      {                          var module = _moduleController.GetModule(localModule.ModuleID' tabId' true);                          if (!string.IsNullOrEmpty(module.DesktopModule.BusinessControllerClass) && module.DesktopModule.IsPortable)                          {                              var businessController = Reflection.CreateObject(module.DesktopModule.BusinessControllerClass' module.DesktopModule.BusinessControllerClass);                              var controller = businessController as IPortable;                              if (controller != null)                              {                                  //Note: there is no chek whether the content exists or not to manage conflict resolution                                  if (isNew || _importDto.CollisionResolution == CollisionResolution.Overwrite)                                  {                                      var restoreCount = 0;                                      var version = DotNetNukeContext.Current.Application.Version.ToString(3);                                        bool tabVersionsEnabled;                                      bool tabWorkflowEnabled;                                      DisableVersioning(tabId' out tabVersionsEnabled' out tabWorkflowEnabled);                                        try                                      {                                          foreach (var moduleContent in exportedContent)                                          {                                              if (!moduleContent.IsRestored)                                              {                                                  try                                                  {                                                      var content = moduleContent.XmlContent;                                                      if (content.IndexOf('\x03') >= 0)                                                      {                                                          // exported data contains this character sometimes                                                          content = content.Replace('\x03'' ' ');                                                      }                                                        controller.ImportModule(localModule.ModuleID' content' version' _exportImportJob.CreatedByUserId);                                                      moduleContent.IsRestored = true;                                                      Repository.UpdateItem(moduleContent);                                                      restoreCount++;                                                  }                                                  catch (Exception ex)                                                  {                                                      Result.AddLogEntry("Error importing module data' Module ID=" + localModule.ModuleID' ex.Message' ReportLevel.Error);                                                      Logger.ErrorFormat("ModuleContent: (Module ID={0}). Error: {1}{2}{3}"'                                                          localModule.ModuleID' ex' Environment.NewLine' moduleContent.XmlContent);                                                  }                                              }                                          }                                      }                                      finally                                      {                                          RestoreVersioning(tabId' tabVersionsEnabled' tabWorkflowEnabled);                                      }                                        if (restoreCount > 0)                                      {                                          Result.AddLogEntry("Added/Updated module content inside Tab ID=" + tabId' "Module ID=" + localModule.ModuleID);                                          return restoreCount;                                      }                                  }                              }                          }                      }                      catch (Exception ex)                      {                          Result.AddLogEntry("Error cerating business class type"' desktopModuleInfo.BusinessControllerClass' ReportLevel.Error);                          Logger.Error("Error cerating business class type. " + ex);                      }                  }              }
Magic Number,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ProcessExportPages,The following statement contains a magic number: var progressStep = 100.0 / allTabs.Length;
Magic Number,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ResetContentsFlag,The following statement contains a magic number: const int batchSize = 100;
Magic Number,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,ExportData,The following statement contains a magic number: try              {                  var packagesZipFileFormat = $"{Globals.ApplicationMapPath}{Constants.ExportFolder}{{0}}\\{Constants.ExportZipPackages}";                  var packagesZipFile = string.Format(packagesZipFileFormat' exportJob.Directory.TrimEnd('\\').TrimEnd('/'));                    if (CheckPoint.Stage == 0)                  {                      var fromDate = exportDto.FromDateUtc ?? Constants.MinDbTime;                      var toDate = exportDto.ToDateUtc;                        //export skin packages.                      var extensionPackagesBackupFolder = Path.Combine(Globals.ApplicationMapPath' DotNetNuke.Services.Installer.Util.BackupInstallPackageFolder);                      var skinPackageFiles = Directory.GetFiles(extensionPackagesBackupFolder).Where(f => IsValidPackage(f' fromDate' toDate)).ToList();                      var totalPackages = skinPackageFiles.Count;                        //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalPackages : CheckPoint.TotalItems;                      if (CheckPointStageCallback(this)) return;                        foreach (var file in skinPackageFiles)                      {                          var exportPackage = GenerateExportPackage(file);                          if (exportPackage != null)                          {                              Repository.CreateItem(exportPackage' null);                              totalPackagesExported += 1;                              var folderOffset = Path.GetDirectoryName(file)?.Length + 1;                                CompressionUtil.AddFileToArchive(file' packagesZipFile' folderOffset.GetValueOrDefault(0));                          }                            CheckPoint.ProcessedItems++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalPackages;                          currentIndex++;                          //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                          if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                      }                        CheckPoint.Stage++;                      currentIndex = 0;                      CheckPoint.Completed = true;                      CheckPoint.Progress = 100;                  }              }              finally              {                  CheckPoint.StageData = currentIndex > 0 ? JsonConvert.SerializeObject(new { skip = currentIndex }) : null;                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Packages"' totalPackagesExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,ExportData,The following statement contains a magic number: try              {                  var packagesZipFileFormat = $"{Globals.ApplicationMapPath}{Constants.ExportFolder}{{0}}\\{Constants.ExportZipPackages}";                  var packagesZipFile = string.Format(packagesZipFileFormat' exportJob.Directory.TrimEnd('\\').TrimEnd('/'));                    if (CheckPoint.Stage == 0)                  {                      var fromDate = exportDto.FromDateUtc ?? Constants.MinDbTime;                      var toDate = exportDto.ToDateUtc;                        //export skin packages.                      var extensionPackagesBackupFolder = Path.Combine(Globals.ApplicationMapPath' DotNetNuke.Services.Installer.Util.BackupInstallPackageFolder);                      var skinPackageFiles = Directory.GetFiles(extensionPackagesBackupFolder).Where(f => IsValidPackage(f' fromDate' toDate)).ToList();                      var totalPackages = skinPackageFiles.Count;                        //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalPackages : CheckPoint.TotalItems;                      if (CheckPointStageCallback(this)) return;                        foreach (var file in skinPackageFiles)                      {                          var exportPackage = GenerateExportPackage(file);                          if (exportPackage != null)                          {                              Repository.CreateItem(exportPackage' null);                              totalPackagesExported += 1;                              var folderOffset = Path.GetDirectoryName(file)?.Length + 1;                                CompressionUtil.AddFileToArchive(file' packagesZipFile' folderOffset.GetValueOrDefault(0));                          }                            CheckPoint.ProcessedItems++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalPackages;                          currentIndex++;                          //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                          if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                      }                        CheckPoint.Stage++;                      currentIndex = 0;                      CheckPoint.Completed = true;                      CheckPoint.Progress = 100;                  }              }              finally              {                  CheckPoint.StageData = currentIndex > 0 ? JsonConvert.SerializeObject(new { skip = currentIndex }) : null;                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Packages"' totalPackagesExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,ExportData,The following statement contains a magic number: try              {                  var packagesZipFileFormat = $"{Globals.ApplicationMapPath}{Constants.ExportFolder}{{0}}\\{Constants.ExportZipPackages}";                  var packagesZipFile = string.Format(packagesZipFileFormat' exportJob.Directory.TrimEnd('\\').TrimEnd('/'));                    if (CheckPoint.Stage == 0)                  {                      var fromDate = exportDto.FromDateUtc ?? Constants.MinDbTime;                      var toDate = exportDto.ToDateUtc;                        //export skin packages.                      var extensionPackagesBackupFolder = Path.Combine(Globals.ApplicationMapPath' DotNetNuke.Services.Installer.Util.BackupInstallPackageFolder);                      var skinPackageFiles = Directory.GetFiles(extensionPackagesBackupFolder).Where(f => IsValidPackage(f' fromDate' toDate)).ToList();                      var totalPackages = skinPackageFiles.Count;                        //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalPackages : CheckPoint.TotalItems;                      if (CheckPointStageCallback(this)) return;                        foreach (var file in skinPackageFiles)                      {                          var exportPackage = GenerateExportPackage(file);                          if (exportPackage != null)                          {                              Repository.CreateItem(exportPackage' null);                              totalPackagesExported += 1;                              var folderOffset = Path.GetDirectoryName(file)?.Length + 1;                                CompressionUtil.AddFileToArchive(file' packagesZipFile' folderOffset.GetValueOrDefault(0));                          }                            CheckPoint.ProcessedItems++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalPackages;                          currentIndex++;                          //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                          if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                      }                        CheckPoint.Stage++;                      currentIndex = 0;                      CheckPoint.Completed = true;                      CheckPoint.Progress = 100;                  }              }              finally              {                  CheckPoint.StageData = currentIndex > 0 ? JsonConvert.SerializeObject(new { skip = currentIndex }) : null;                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Packages"' totalPackagesExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,GenerateExportPackage,The following statement contains a magic number: var packageName = match.Groups[2].Value;
Magic Number,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,GenerateExportPackage,The following statement contains a magic number: var version = new Version(match.Groups[3].Value);
Magic Number,Dnn.ExportImport.Components.Services,PackagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PackagesExportService.cs,ProcessImportModulePackages,The following statement contains a magic number: if (File.Exists(packageZipFile))              {                  CompressionUtil.UnZipArchive(packageZipFile' tempFolder);                  var exportPackages = Repository.GetAllItems<ExportPackage>().ToList();                    CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? exportPackages.Count : CheckPoint.TotalItems;                  if (CheckPointStageCallback(this)) return;                    if (CheckPoint.Stage == 0)                  {                      try                      {                          foreach (var exportPackage in exportPackages)                          {                              try                              {                                  var filePath = Path.Combine(tempFolder' exportPackage.PackageFileName);                                  if (!File.Exists(filePath))                                  {                                      continue;                                  }                                    var packageType = exportPackage.PackageType;                                  var packageName = exportPackage.PackageName;                                  var version = exportPackage.Version;                                    var existPackage = PackageController.Instance.GetExtensionPackage(Null.NullInteger'                                      p => p.PackageType == packageType && p.Name == packageName);                                  if (existPackage != null &&                                      (existPackage.Version > version ||                                       (existPackage.Version == version &&                                        importDto.CollisionResolution == CollisionResolution.Ignore)))                                  {                                      Result.AddLogEntry("Import Package ignores"'                                          $"{packageName} has higher version {existPackage.Version} installed' ignore import it");                                      continue;                                  }                                    InstallPackage(filePath);                                  Result.AddLogEntry("Import Package completed"' $"{packageName} version: {version}");                                  CheckPoint.ProcessedItems++;                                  CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / exportPackages.Count;                                  CheckPointStageCallback(this); // just to update the counts without exit logic                              }                              catch (Exception ex)                              {                                  Result.AddLogEntry("Import Package error"'                                      $"{exportPackage.PackageName} : {exportPackage.Version} - {ex.Message}");                                  Logger.Error(ex);                              }                          }                          CheckPoint.Stage++;                          CheckPoint.Completed = true;                      }                      finally                      {                          CheckPointStageCallback(this);                          try                          {                              FileSystemUtils.DeleteFolderRecursive(tempFolder);                          }                          catch (Exception)                          {                              //ignore                          }                      }                  }              }              else              {                  CheckPoint.Completed = true;                  CheckPointStageCallback(this);                  Result.AddLogEntry("PackagesFileNotFound"' "Packages file not found. Skipping packages import"' ReportLevel.Warn);              }
Magic Number,Dnn.ExportImport.Components.Services,PageTemplatesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PageTemplatesExportService.cs,ExportData,The following statement contains a magic number: try              {                  var templatesFile = string.Format(_templatesFolder' exportJob.Directory.TrimEnd('\\').TrimEnd('/'));                    if (CheckPoint.Stage == 0)                  {                      var fromDate = (exportDto.FromDateUtc ?? Constants.MinDbTime).ToLocalTime();                      var toDate = exportDto.ToDateUtc.ToLocalTime();                      var portal = PortalController.Instance.GetPortal(portalId);                        var templates =                          CBO.FillCollection<ExportPageTemplate>(                              DataProvider.Instance()                                  .GetFiles(portalId' null' toDate' fromDate))                              .Where(x => x.Extension == Constants.TemplatesExtension)                              .ToList();                      var totalTemplates = templates.Count;                        //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalTemplates : CheckPoint.TotalItems;                      if (CheckPointStageCallback(this)) return;                        foreach (var template in templates)                      {                          Repository.CreateItem(template' null);                          totalTemplatesExported += 1;                          var folderOffset = portal.HomeDirectoryMapPath.Length +                                             (portal.HomeDirectoryMapPath.EndsWith("\\") ? 0 : 1);                            var folder = FolderManager.Instance.GetFolder(template.FolderId);                          CompressionUtil.AddFileToArchive(                              portal.HomeDirectoryMapPath + folder.FolderPath + GetActualFileName(template)' templatesFile'                              folderOffset);                            CheckPoint.ProcessedItems++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalTemplates;                          currentIndex++;                          //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                          if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                      }                      CheckPoint.Stage++;                      currentIndex = 0;                      CheckPoint.Completed = true;                      CheckPoint.Progress = 100;                  }              }              finally              {                  CheckPoint.StageData = currentIndex > 0 ? JsonConvert.SerializeObject(new { skip = currentIndex }) : null;                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Templates"' totalTemplatesExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,PageTemplatesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PageTemplatesExportService.cs,ExportData,The following statement contains a magic number: try              {                  var templatesFile = string.Format(_templatesFolder' exportJob.Directory.TrimEnd('\\').TrimEnd('/'));                    if (CheckPoint.Stage == 0)                  {                      var fromDate = (exportDto.FromDateUtc ?? Constants.MinDbTime).ToLocalTime();                      var toDate = exportDto.ToDateUtc.ToLocalTime();                      var portal = PortalController.Instance.GetPortal(portalId);                        var templates =                          CBO.FillCollection<ExportPageTemplate>(                              DataProvider.Instance()                                  .GetFiles(portalId' null' toDate' fromDate))                              .Where(x => x.Extension == Constants.TemplatesExtension)                              .ToList();                      var totalTemplates = templates.Count;                        //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalTemplates : CheckPoint.TotalItems;                      if (CheckPointStageCallback(this)) return;                        foreach (var template in templates)                      {                          Repository.CreateItem(template' null);                          totalTemplatesExported += 1;                          var folderOffset = portal.HomeDirectoryMapPath.Length +                                             (portal.HomeDirectoryMapPath.EndsWith("\\") ? 0 : 1);                            var folder = FolderManager.Instance.GetFolder(template.FolderId);                          CompressionUtil.AddFileToArchive(                              portal.HomeDirectoryMapPath + folder.FolderPath + GetActualFileName(template)' templatesFile'                              folderOffset);                            CheckPoint.ProcessedItems++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalTemplates;                          currentIndex++;                          //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                          if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                      }                      CheckPoint.Stage++;                      currentIndex = 0;                      CheckPoint.Completed = true;                      CheckPoint.Progress = 100;                  }              }              finally              {                  CheckPoint.StageData = currentIndex > 0 ? JsonConvert.SerializeObject(new { skip = currentIndex }) : null;                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Templates"' totalTemplatesExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,PageTemplatesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PageTemplatesExportService.cs,ExportData,The following statement contains a magic number: try              {                  var templatesFile = string.Format(_templatesFolder' exportJob.Directory.TrimEnd('\\').TrimEnd('/'));                    if (CheckPoint.Stage == 0)                  {                      var fromDate = (exportDto.FromDateUtc ?? Constants.MinDbTime).ToLocalTime();                      var toDate = exportDto.ToDateUtc.ToLocalTime();                      var portal = PortalController.Instance.GetPortal(portalId);                        var templates =                          CBO.FillCollection<ExportPageTemplate>(                              DataProvider.Instance()                                  .GetFiles(portalId' null' toDate' fromDate))                              .Where(x => x.Extension == Constants.TemplatesExtension)                              .ToList();                      var totalTemplates = templates.Count;                        //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? totalTemplates : CheckPoint.TotalItems;                      if (CheckPointStageCallback(this)) return;                        foreach (var template in templates)                      {                          Repository.CreateItem(template' null);                          totalTemplatesExported += 1;                          var folderOffset = portal.HomeDirectoryMapPath.Length +                                             (portal.HomeDirectoryMapPath.EndsWith("\\") ? 0 : 1);                            var folder = FolderManager.Instance.GetFolder(template.FolderId);                          CompressionUtil.AddFileToArchive(                              portal.HomeDirectoryMapPath + folder.FolderPath + GetActualFileName(template)' templatesFile'                              folderOffset);                            CheckPoint.ProcessedItems++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalTemplates;                          currentIndex++;                          //After every 10 items' call the checkpoint stage. This is to avoid too many frequent updates to DB.                          if (currentIndex % 10 == 0 && CheckPointStageCallback(this)) return;                      }                      CheckPoint.Stage++;                      currentIndex = 0;                      CheckPoint.Completed = true;                      CheckPoint.Progress = 100;                  }              }              finally              {                  CheckPoint.StageData = currentIndex > 0 ? JsonConvert.SerializeObject(new { skip = currentIndex }) : null;                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Templates"' totalTemplatesExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,PageTemplatesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PageTemplatesExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage >= 2 || CheckPoint.Completed)                  return;
Magic Number,Dnn.ExportImport.Components.Services,PageTemplatesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PageTemplatesExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 0)              {                  if (!File.Exists(templatesFile))                  {                      Result.AddLogEntry("TemplatesFileNotFound"' "Templates file not found. Skipping templates import"'                          ReportLevel.Warn);                      CheckPoint.Completed = true;                      CheckPointStageCallback(this);                  }                  else                  {                      var portal = PortalController.Instance.GetPortal(portalId);                        CompressionUtil.UnZipArchive(templatesFile' portal.HomeDirectoryMapPath'                          importDto.CollisionResolution == CollisionResolution.Overwrite);                        Result.AddSummary("Imported templates"' totalTemplates.ToString());                      CheckPoint.Stage++;                      CheckPoint.StageData = null;                      CheckPoint.Progress = 90;                      CheckPoint.TotalItems = totalTemplates;                      CheckPoint.ProcessedItems = totalTemplates;                      if (CheckPointStageCallback(this)) return;                  }              }
Magic Number,Dnn.ExportImport.Components.Services,PageTemplatesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PageTemplatesExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 1)              {                  Func<ExportPageTemplate' object> predicate = x => x.Folder;                  var templates = Repository.GetAllItems(predicate).Select(x => x.Folder).Distinct();                  templates.ForEach(x => FolderManager.Instance.Synchronize(importJob.PortalId' x));                  CheckPoint.Stage++;                  CheckPoint.Completed = true;                  CheckPoint.Progress = 100;                  CheckPointStageCallback(this);              }
Magic Number,Dnn.ExportImport.Components.Services,PortalExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PortalExportService.cs,ExportData,The following statement contains a magic number: if (CheckPoint.Stage == 0)              {                  var portalSettings = new List<ExportPortalSetting>();                  var settingToMigrate =                      SettingsController.Instance.GetSetting(Constants.PortalSettingExportKey)?.SettingValue?.Split(new[] { ''' }' StringSplitOptions.RemoveEmptyEntries);                    if (settingToMigrate != null)                  {                      portalSettings = CBO.FillCollection<ExportPortalSetting>(DataProvider.Instance().GetPortalSettings(exportJob.PortalId' toDate' fromDate));                        //Migrate only allowed portal settings.                      portalSettings =                          portalSettings.Where(x => settingToMigrate.Any(setting => setting.Trim().Equals(x.SettingName' StringComparison.InvariantCultureIgnoreCase))).ToList();                        //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? portalSettings.Count : CheckPoint.TotalItems;                      if (CheckPoint.TotalItems == portalSettings.Count)                      {                          portalLanguages =                              CBO.FillCollection<ExportPortalLanguage>(                                  DataProvider.Instance().GetPortalLanguages(exportJob.PortalId' toDate' fromDate));                          CheckPoint.TotalItems += portalLanguages.Count;                      }                      CheckPointStageCallback(this);                        Repository.CreateItems(portalSettings);                  }                  Result.AddSummary("Exported Portal Settings"' portalSettings.Count.ToString());                    CheckPoint.Progress = 50;                  CheckPoint.ProcessedItems = portalSettings.Count;                  CheckPoint.Stage++;                  if (CheckPointStageCallback(this)) return;              }
Magic Number,Dnn.ExportImport.Components.Services,PortalExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PortalExportService.cs,ExportData,The following statement contains a magic number: if (CheckPoint.Stage == 1)              {                  if (CheckCancelled(exportJob)) return;                  if (portalLanguages == null)                      portalLanguages = CBO.FillCollection<ExportPortalLanguage>(DataProvider.Instance()                          .GetPortalLanguages(exportJob.PortalId' toDate' fromDate));                    Repository.CreateItems(portalLanguages);                  Result.AddSummary("Exported Portal Languages"' portalLanguages.Count.ToString());                  CheckPoint.Progress = 100;                  CheckPoint.Completed = true;                  CheckPoint.Stage++;                  CheckPoint.ProcessedItems += portalLanguages.Count;                  CheckPointStageCallback(this);              }
Magic Number,Dnn.ExportImport.Components.Services,PortalExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PortalExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 0)              {                  var portalSettings = Repository.GetAllItems<ExportPortalSetting>().ToList();                  ProcessPortalSettings(importJob' importDto' portalSettings);                  CheckPoint.TotalItems = GetImportTotal();                  Result.AddSummary("Imported Portal Settings"' portalSettings.Count.ToString());                  CheckPoint.Progress += 50;                  CheckPoint.Stage++;                  CheckPoint.ProcessedItems = portalSettings.Count;                  if (CheckPointStageCallback(this)) return;              }
Magic Number,Dnn.ExportImport.Components.Services,PortalExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PortalExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 1)              {                  var portalLanguages = Repository.GetAllItems<ExportPortalLanguage>().ToList();                  ProcessPortalLanguages(importJob' importDto' portalLanguages);                  Result.AddSummary("Imported Portal Languages"' portalLanguages.Count.ToString());                  CheckPoint.Progress += 50;                  CheckPoint.Completed = true;                  CheckPoint.Stage++;                  CheckPoint.ProcessedItems += portalLanguages.Count;                  CheckPointStageCallback(this);              }
Magic Number,Dnn.ExportImport.Components.Services,ProfilePropertiesService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\ProfilePropertiesService.cs,ExportData,The following statement contains a magic number: CheckPoint.Progress = 50;
Magic Number,Dnn.ExportImport.Components.Services,ProfilePropertiesService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\ProfilePropertiesService.cs,ExportData,The following statement contains a magic number: CheckPoint.Progress = 100;
Magic Number,Dnn.ExportImport.Components.Services,ProfilePropertiesService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\ProfilePropertiesService.cs,ImportData,The following statement contains a magic number: CheckPoint.Progress = 100;
Magic Number,Dnn.ExportImport.Components.Services,RolesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\RolesExportService.cs,ExportData,The following statement contains a magic number: if (CheckPoint.Stage > 2) return;
Magic Number,Dnn.ExportImport.Components.Services,RolesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\RolesExportService.cs,ExportData,The following statement contains a magic number: if (CheckPoint.Stage == 0)              {                  if (CheckCancelled(exportJob)) return;                    var roleGroups = CBO.FillCollection<ExportRoleGroup>(                      DataProvider.Instance().GetAllRoleGroups(exportJob.PortalId' toDate' fromDate));                    //Update the total items count in the check points. This should be updated only once.                  CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? roleGroups.Count : CheckPoint.TotalItems;                  if (CheckPoint.TotalItems == roleGroups.Count)                  {                      roles = CBO.FillCollection<ExportRole>(                          DataProvider.Instance().GetAllRoles(exportJob.PortalId' toDate' fromDate));                      roleSettings = CBO.FillCollection<ExportRoleSetting>(                          DataProvider.Instance().GetAllRoleSettings(exportJob.PortalId' toDate' fromDate));                      CheckPoint.TotalItems += roles.Count + roleSettings.Count;                  }                  CheckPointStageCallback(this);                    Repository.CreateItems(roleGroups);                  Result.AddSummary("Exported Role Groups"' roleGroups.Count.ToString());                  CheckPoint.ProcessedItems = roleGroups.Count;                  CheckPoint.Progress = 30;                  CheckPoint.Stage++;                  if (CheckPointStageCallback(this)) return;              }
Magic Number,Dnn.ExportImport.Components.Services,RolesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\RolesExportService.cs,ExportData,The following statement contains a magic number: if (CheckPoint.Stage == 1)              {                  if (CheckCancelled(exportJob)) return;                  if (roles == null)                      roles = CBO.FillCollection<ExportRole>(                      DataProvider.Instance().GetAllRoles(exportJob.PortalId' toDate' fromDate));                  Repository.CreateItems(roles);                  Result.AddSummary("Exported Roles"' roles.Count.ToString());                  CheckPoint.Progress = 80;                  CheckPoint.ProcessedItems += roles.Count;                  CheckPoint.Stage++;                  if (CheckPointStageCallback(this)) return;              }
Magic Number,Dnn.ExportImport.Components.Services,RolesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\RolesExportService.cs,ExportData,The following statement contains a magic number: if (CheckPoint.Stage == 2)              {                  if (CheckCancelled(exportJob)) return;                  if (roleSettings == null)                      roleSettings = CBO.FillCollection<ExportRoleSetting>(                         DataProvider.Instance().GetAllRoleSettings(exportJob.PortalId' toDate' fromDate));                  Repository.CreateItems(roleSettings);                  Result.AddSummary("Exported Role Settings"' roleSettings.Count.ToString());                  CheckPoint.Progress = 100;                  CheckPoint.ProcessedItems += roleSettings.Count;                  CheckPoint.Completed = true;                  CheckPoint.Stage++;                  CheckPointStageCallback(this);              }
Magic Number,Dnn.ExportImport.Components.Services,RolesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\RolesExportService.cs,ExportData,The following statement contains a magic number: if (CheckPoint.Stage == 2)              {                  if (CheckCancelled(exportJob)) return;                  if (roleSettings == null)                      roleSettings = CBO.FillCollection<ExportRoleSetting>(                         DataProvider.Instance().GetAllRoleSettings(exportJob.PortalId' toDate' fromDate));                  Repository.CreateItems(roleSettings);                  Result.AddSummary("Exported Role Settings"' roleSettings.Count.ToString());                  CheckPoint.Progress = 100;                  CheckPoint.ProcessedItems += roleSettings.Count;                  CheckPoint.Completed = true;                  CheckPoint.Stage++;                  CheckPointStageCallback(this);              }
Magic Number,Dnn.ExportImport.Components.Services,RolesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\RolesExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage > 2) return;
Magic Number,Dnn.ExportImport.Components.Services,RolesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\RolesExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 0)              {                  ProcessRoleGroups(importJob' importDto' otherRoleGroups);                  Repository.UpdateItems(otherRoleGroups);                  Result.AddSummary("Imported Role Groups"' otherRoleGroups.Count.ToString());                  CheckPoint.Progress = 40;                  CheckPoint.ProcessedItems = otherRoleGroups.Count;                  CheckPoint.Stage++;                  if (CheckPointStageCallback(this)) return;              }
Magic Number,Dnn.ExportImport.Components.Services,RolesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\RolesExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 1)              {                  Result.AddSummary("Imported Roles"' otherRoles.Count.ToString());                  ProcessRoles(importJob' importDto' otherRoleGroups' otherRoles);                  Repository.UpdateItems(otherRoles);                  CheckPoint.Progress = 50;                  CheckPoint.ProcessedItems += otherRoles.Count;                  CheckPoint.Stage++;                  if (CheckPointStageCallback(this)) return;              }
Magic Number,Dnn.ExportImport.Components.Services,RolesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\RolesExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 2)              {                  if (CheckCancelled(importJob)) return;                  var otherRoleSettings = Repository.GetAllItems<ExportRoleSetting>().ToList();                  ProcessRoleSettings(importJob' importDto' otherRoles' otherRoleSettings);                  Repository.UpdateItems(otherRoleSettings);                  Result.AddSummary("Imported Role Settings"' otherRoleSettings.Count.ToString());                  CheckPoint.Progress = 100;                  CheckPoint.ProcessedItems += otherRoleSettings.Count;                  CheckPoint.Completed = true;                  CheckPoint.Stage++;                  CheckPointStageCallback(this);              }
Magic Number,Dnn.ExportImport.Components.Services,RolesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\RolesExportService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 2)              {                  if (CheckCancelled(importJob)) return;                  var otherRoleSettings = Repository.GetAllItems<ExportRoleSetting>().ToList();                  ProcessRoleSettings(importJob' importDto' otherRoles' otherRoleSettings);                  Repository.UpdateItems(otherRoleSettings);                  Result.AddSummary("Imported Role Settings"' otherRoleSettings.Count.ToString());                  CheckPoint.Progress = 100;                  CheckPoint.ProcessedItems += otherRoleSettings.Count;                  CheckPoint.Completed = true;                  CheckPoint.Stage++;                  CheckPointStageCallback(this);              }
Magic Number,Dnn.ExportImport.Components.Services,UsersDataExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersDataExportService.cs,ExportData,The following statement contains a magic number: CheckPoint.Progress += 100;
Magic Number,Dnn.ExportImport.Components.Services,UsersDataExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersDataExportService.cs,ImportData,The following statement contains a magic number: try              {                  Repository.RebuildIndex<ExportUserRole>(x => x.ReferenceId);                  if (includeProfile)                      Repository.RebuildIndex<ExportUserProfile>(x => x.ReferenceId);                  var portalId = importJob.PortalId;                  using (var tableUserProfile = new DataTable("UserProfile"))                  using (var tableUserRoles = new DataTable("UserRoles"))                  {                      // must create the columns from scratch with each iteration                      tableUserProfile.Columns.AddRange(UserProfileDatasetColumns.Select(column => new DataColumn(column.Item1' column.Item2)).ToArray());                      tableUserRoles.Columns.AddRange(UserRolesDatasetColumns.Select(column => new DataColumn(column.Item1' column.Item2)).ToArray());                      var dataProvider = DotNetNuke.Data.DataProvider.Instance();                      while (totalProcessed < totalUsersToBeProcessed)                      {                          if (CheckCancelled(importJob)) return;                          var users = Repository.GetAllItems<ExportUser>(null' true' pageIndex * pageSize' pageSize).ToList();                          var tempUserRolesCount = 0;                          var tempUserProfileCount = 0;                          try                          {                              foreach (var user in users)                              {                                  if (CheckCancelled(importJob)) return;                                  //Find the correct userId from the system which was added/updated by UserExportService.                                  var userId = UserController.GetUserByName(user.Username)?.UserID;                                  if (userId != null)                                  {                                      var userRoles = Repository.GetRelatedItems<ExportUserRole>(user.Id).ToList();                                      foreach (var userRole in userRoles)                                      {                                          var roleId = Util.GetRoleIdByName(importJob.PortalId' userRole.RoleId' userRole.RoleName);                                          if (roleId == null) continue;                                          if (!(roleId > Convert.ToInt32(Globals.glbRoleNothing))) continue;                                          var userRoleRow = tableUserRoles.NewRow();                                          userRoleRow["PortalId"] = portalId;                                          userRoleRow["UserId"] = userId;                                          userRoleRow["RoleId"] = roleId;                                          userRoleRow["ExpiryDate"] = dataProvider.GetNull(userRole.ExpiryDate);                                          userRoleRow["IsTrialUsed"] = userRole.IsTrialUsed;                                          userRoleRow["EffectiveDate"] = dataProvider.GetNull(userRole.EffectiveDate);                                          userRoleRow["CreatedByUserId"] = Util.GetUserIdByName(importJob' user.CreatedByUserId' user.CreatedByUserName);                                          userRoleRow["LastModifiedByUserId"] = Util.GetUserIdByName(importJob' user.LastModifiedByUserId' user.LastModifiedByUserName);                                          userRoleRow["Status"] = userRole.Status;                                          userRoleRow["IsOwner"] = userRole.IsOwner;                                          userRoleRow["IsSuperUser"] = user.IsSuperUser;                                          tableUserRoles.Rows.Add(userRoleRow);                                          tempUserRolesCount++;                                      }                                      if (includeProfile)                                      {                                          var userProfiles =                                              Repository.GetRelatedItems<ExportUserProfile>(user.Id).ToList();                                          foreach (var userProfile in userProfiles)                                          {                                              var profileDefinitionId = Util.GetProfilePropertyId(importJob.PortalId'                                                  userProfile.PropertyDefinitionId' userProfile.PropertyName);                                              if (profileDefinitionId == null || profileDefinitionId == -1) continue;                                              var value = userProfile.PropertyValue;                                              if (userProfile.PropertyName.Equals("photo"' StringComparison.InvariantCultureIgnoreCase) && (value = GetUserPhotoId(portalId' value' user)) == null)                                              {                                                  continue;                                              }                                                var userProfileRow = tableUserProfile.NewRow();                                              userProfileRow["PortalId"] = importJob.PortalId;                                              userProfileRow["UserId"] = userId;                                              userProfileRow["PropertyDefinitionId"] = profileDefinitionId.Value;                                              userProfileRow["PropertyValue"] = value;                                              userProfileRow["PropertyText"] = userProfile.PropertyText;                                              userProfileRow["Visibility"] = userProfile.Visibility;                                              userProfileRow["ExtendedVisibility"] = userProfile.ExtendedVisibility;                                              userProfileRow["IsSuperUser"] = user.IsSuperUser;                                              tableUserProfile.Rows.Add(userProfileRow);                                              tempUserProfileCount++;                                          }                                      }                                  }                              }                              var overwrite = importDto.CollisionResolution == CollisionResolution.Overwrite;                              //Bulk insert the data in DB                              DotNetNuke.Data.DataProvider.Instance()                                  .BulkInsert("ExportImport_AddUpdateUserRolesBulk"' "@DataTable"' tableUserRoles' new Dictionary<string' object> { { "Overwrite"' overwrite } });                              totalUserRolesImported += tempUserRolesCount;                                if (includeProfile)                              {                                  DotNetNuke.Data.DataProvider.Instance()                                      .BulkInsert("ExportImport_AddUpdateUsersProfilesBulk"' "@DataTable"'                                          tableUserProfile' new Dictionary<string' object> { { "Overwrite"' overwrite } });                                  totalProfilesImported += tempUserProfileCount;                              }                                CheckPoint.ProcessedItems += users.Count;                              totalProcessed += users.Count;                              CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalUsers;                              CheckPoint.StageData = null;                          }                          catch (Exception ex)                          {                              Result.AddLogEntry($"Importing Users Data from {pageIndex * pageSize} to {pageIndex * pageSize + pageSize} exception"' ex.Message' ReportLevel.Error);                          }                          tableUserRoles.Rows.Clear();                          tableUserProfile.Rows.Clear();                          pageIndex++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalUsers;                          CheckPoint.Stage++;                          CheckPoint.StageData = null;                          if (CheckPointStageCallback(this)) return;                      }                  }                  CheckPoint.Completed = true;                  CheckPoint.Progress = 100;              }              finally              {                  CheckPointStageCallback(this);                  Result.AddSummary("Imported User Roles"' totalUserRolesImported.ToString());                  if (includeProfile)                  {                      Result.AddSummary("Imported User Profiles"' totalProfilesImported.ToString());                  }              }
Magic Number,Dnn.ExportImport.Components.Services,UsersDataExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersDataExportService.cs,ImportData,The following statement contains a magic number: try              {                  Repository.RebuildIndex<ExportUserRole>(x => x.ReferenceId);                  if (includeProfile)                      Repository.RebuildIndex<ExportUserProfile>(x => x.ReferenceId);                  var portalId = importJob.PortalId;                  using (var tableUserProfile = new DataTable("UserProfile"))                  using (var tableUserRoles = new DataTable("UserRoles"))                  {                      // must create the columns from scratch with each iteration                      tableUserProfile.Columns.AddRange(UserProfileDatasetColumns.Select(column => new DataColumn(column.Item1' column.Item2)).ToArray());                      tableUserRoles.Columns.AddRange(UserRolesDatasetColumns.Select(column => new DataColumn(column.Item1' column.Item2)).ToArray());                      var dataProvider = DotNetNuke.Data.DataProvider.Instance();                      while (totalProcessed < totalUsersToBeProcessed)                      {                          if (CheckCancelled(importJob)) return;                          var users = Repository.GetAllItems<ExportUser>(null' true' pageIndex * pageSize' pageSize).ToList();                          var tempUserRolesCount = 0;                          var tempUserProfileCount = 0;                          try                          {                              foreach (var user in users)                              {                                  if (CheckCancelled(importJob)) return;                                  //Find the correct userId from the system which was added/updated by UserExportService.                                  var userId = UserController.GetUserByName(user.Username)?.UserID;                                  if (userId != null)                                  {                                      var userRoles = Repository.GetRelatedItems<ExportUserRole>(user.Id).ToList();                                      foreach (var userRole in userRoles)                                      {                                          var roleId = Util.GetRoleIdByName(importJob.PortalId' userRole.RoleId' userRole.RoleName);                                          if (roleId == null) continue;                                          if (!(roleId > Convert.ToInt32(Globals.glbRoleNothing))) continue;                                          var userRoleRow = tableUserRoles.NewRow();                                          userRoleRow["PortalId"] = portalId;                                          userRoleRow["UserId"] = userId;                                          userRoleRow["RoleId"] = roleId;                                          userRoleRow["ExpiryDate"] = dataProvider.GetNull(userRole.ExpiryDate);                                          userRoleRow["IsTrialUsed"] = userRole.IsTrialUsed;                                          userRoleRow["EffectiveDate"] = dataProvider.GetNull(userRole.EffectiveDate);                                          userRoleRow["CreatedByUserId"] = Util.GetUserIdByName(importJob' user.CreatedByUserId' user.CreatedByUserName);                                          userRoleRow["LastModifiedByUserId"] = Util.GetUserIdByName(importJob' user.LastModifiedByUserId' user.LastModifiedByUserName);                                          userRoleRow["Status"] = userRole.Status;                                          userRoleRow["IsOwner"] = userRole.IsOwner;                                          userRoleRow["IsSuperUser"] = user.IsSuperUser;                                          tableUserRoles.Rows.Add(userRoleRow);                                          tempUserRolesCount++;                                      }                                      if (includeProfile)                                      {                                          var userProfiles =                                              Repository.GetRelatedItems<ExportUserProfile>(user.Id).ToList();                                          foreach (var userProfile in userProfiles)                                          {                                              var profileDefinitionId = Util.GetProfilePropertyId(importJob.PortalId'                                                  userProfile.PropertyDefinitionId' userProfile.PropertyName);                                              if (profileDefinitionId == null || profileDefinitionId == -1) continue;                                              var value = userProfile.PropertyValue;                                              if (userProfile.PropertyName.Equals("photo"' StringComparison.InvariantCultureIgnoreCase) && (value = GetUserPhotoId(portalId' value' user)) == null)                                              {                                                  continue;                                              }                                                var userProfileRow = tableUserProfile.NewRow();                                              userProfileRow["PortalId"] = importJob.PortalId;                                              userProfileRow["UserId"] = userId;                                              userProfileRow["PropertyDefinitionId"] = profileDefinitionId.Value;                                              userProfileRow["PropertyValue"] = value;                                              userProfileRow["PropertyText"] = userProfile.PropertyText;                                              userProfileRow["Visibility"] = userProfile.Visibility;                                              userProfileRow["ExtendedVisibility"] = userProfile.ExtendedVisibility;                                              userProfileRow["IsSuperUser"] = user.IsSuperUser;                                              tableUserProfile.Rows.Add(userProfileRow);                                              tempUserProfileCount++;                                          }                                      }                                  }                              }                              var overwrite = importDto.CollisionResolution == CollisionResolution.Overwrite;                              //Bulk insert the data in DB                              DotNetNuke.Data.DataProvider.Instance()                                  .BulkInsert("ExportImport_AddUpdateUserRolesBulk"' "@DataTable"' tableUserRoles' new Dictionary<string' object> { { "Overwrite"' overwrite } });                              totalUserRolesImported += tempUserRolesCount;                                if (includeProfile)                              {                                  DotNetNuke.Data.DataProvider.Instance()                                      .BulkInsert("ExportImport_AddUpdateUsersProfilesBulk"' "@DataTable"'                                          tableUserProfile' new Dictionary<string' object> { { "Overwrite"' overwrite } });                                  totalProfilesImported += tempUserProfileCount;                              }                                CheckPoint.ProcessedItems += users.Count;                              totalProcessed += users.Count;                              CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalUsers;                              CheckPoint.StageData = null;                          }                          catch (Exception ex)                          {                              Result.AddLogEntry($"Importing Users Data from {pageIndex * pageSize} to {pageIndex * pageSize + pageSize} exception"' ex.Message' ReportLevel.Error);                          }                          tableUserRoles.Rows.Clear();                          tableUserProfile.Rows.Clear();                          pageIndex++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalUsers;                          CheckPoint.Stage++;                          CheckPoint.StageData = null;                          if (CheckPointStageCallback(this)) return;                      }                  }                  CheckPoint.Completed = true;                  CheckPoint.Progress = 100;              }              finally              {                  CheckPointStageCallback(this);                  Result.AddSummary("Imported User Roles"' totalUserRolesImported.ToString());                  if (includeProfile)                  {                      Result.AddSummary("Imported User Profiles"' totalProfilesImported.ToString());                  }              }
Magic Number,Dnn.ExportImport.Components.Services,UsersDataExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersDataExportService.cs,ImportData,The following statement contains a magic number: try              {                  Repository.RebuildIndex<ExportUserRole>(x => x.ReferenceId);                  if (includeProfile)                      Repository.RebuildIndex<ExportUserProfile>(x => x.ReferenceId);                  var portalId = importJob.PortalId;                  using (var tableUserProfile = new DataTable("UserProfile"))                  using (var tableUserRoles = new DataTable("UserRoles"))                  {                      // must create the columns from scratch with each iteration                      tableUserProfile.Columns.AddRange(UserProfileDatasetColumns.Select(column => new DataColumn(column.Item1' column.Item2)).ToArray());                      tableUserRoles.Columns.AddRange(UserRolesDatasetColumns.Select(column => new DataColumn(column.Item1' column.Item2)).ToArray());                      var dataProvider = DotNetNuke.Data.DataProvider.Instance();                      while (totalProcessed < totalUsersToBeProcessed)                      {                          if (CheckCancelled(importJob)) return;                          var users = Repository.GetAllItems<ExportUser>(null' true' pageIndex * pageSize' pageSize).ToList();                          var tempUserRolesCount = 0;                          var tempUserProfileCount = 0;                          try                          {                              foreach (var user in users)                              {                                  if (CheckCancelled(importJob)) return;                                  //Find the correct userId from the system which was added/updated by UserExportService.                                  var userId = UserController.GetUserByName(user.Username)?.UserID;                                  if (userId != null)                                  {                                      var userRoles = Repository.GetRelatedItems<ExportUserRole>(user.Id).ToList();                                      foreach (var userRole in userRoles)                                      {                                          var roleId = Util.GetRoleIdByName(importJob.PortalId' userRole.RoleId' userRole.RoleName);                                          if (roleId == null) continue;                                          if (!(roleId > Convert.ToInt32(Globals.glbRoleNothing))) continue;                                          var userRoleRow = tableUserRoles.NewRow();                                          userRoleRow["PortalId"] = portalId;                                          userRoleRow["UserId"] = userId;                                          userRoleRow["RoleId"] = roleId;                                          userRoleRow["ExpiryDate"] = dataProvider.GetNull(userRole.ExpiryDate);                                          userRoleRow["IsTrialUsed"] = userRole.IsTrialUsed;                                          userRoleRow["EffectiveDate"] = dataProvider.GetNull(userRole.EffectiveDate);                                          userRoleRow["CreatedByUserId"] = Util.GetUserIdByName(importJob' user.CreatedByUserId' user.CreatedByUserName);                                          userRoleRow["LastModifiedByUserId"] = Util.GetUserIdByName(importJob' user.LastModifiedByUserId' user.LastModifiedByUserName);                                          userRoleRow["Status"] = userRole.Status;                                          userRoleRow["IsOwner"] = userRole.IsOwner;                                          userRoleRow["IsSuperUser"] = user.IsSuperUser;                                          tableUserRoles.Rows.Add(userRoleRow);                                          tempUserRolesCount++;                                      }                                      if (includeProfile)                                      {                                          var userProfiles =                                              Repository.GetRelatedItems<ExportUserProfile>(user.Id).ToList();                                          foreach (var userProfile in userProfiles)                                          {                                              var profileDefinitionId = Util.GetProfilePropertyId(importJob.PortalId'                                                  userProfile.PropertyDefinitionId' userProfile.PropertyName);                                              if (profileDefinitionId == null || profileDefinitionId == -1) continue;                                              var value = userProfile.PropertyValue;                                              if (userProfile.PropertyName.Equals("photo"' StringComparison.InvariantCultureIgnoreCase) && (value = GetUserPhotoId(portalId' value' user)) == null)                                              {                                                  continue;                                              }                                                var userProfileRow = tableUserProfile.NewRow();                                              userProfileRow["PortalId"] = importJob.PortalId;                                              userProfileRow["UserId"] = userId;                                              userProfileRow["PropertyDefinitionId"] = profileDefinitionId.Value;                                              userProfileRow["PropertyValue"] = value;                                              userProfileRow["PropertyText"] = userProfile.PropertyText;                                              userProfileRow["Visibility"] = userProfile.Visibility;                                              userProfileRow["ExtendedVisibility"] = userProfile.ExtendedVisibility;                                              userProfileRow["IsSuperUser"] = user.IsSuperUser;                                              tableUserProfile.Rows.Add(userProfileRow);                                              tempUserProfileCount++;                                          }                                      }                                  }                              }                              var overwrite = importDto.CollisionResolution == CollisionResolution.Overwrite;                              //Bulk insert the data in DB                              DotNetNuke.Data.DataProvider.Instance()                                  .BulkInsert("ExportImport_AddUpdateUserRolesBulk"' "@DataTable"' tableUserRoles' new Dictionary<string' object> { { "Overwrite"' overwrite } });                              totalUserRolesImported += tempUserRolesCount;                                if (includeProfile)                              {                                  DotNetNuke.Data.DataProvider.Instance()                                      .BulkInsert("ExportImport_AddUpdateUsersProfilesBulk"' "@DataTable"'                                          tableUserProfile' new Dictionary<string' object> { { "Overwrite"' overwrite } });                                  totalProfilesImported += tempUserProfileCount;                              }                                CheckPoint.ProcessedItems += users.Count;                              totalProcessed += users.Count;                              CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalUsers;                              CheckPoint.StageData = null;                          }                          catch (Exception ex)                          {                              Result.AddLogEntry($"Importing Users Data from {pageIndex * pageSize} to {pageIndex * pageSize + pageSize} exception"' ex.Message' ReportLevel.Error);                          }                          tableUserRoles.Rows.Clear();                          tableUserProfile.Rows.Clear();                          pageIndex++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalUsers;                          CheckPoint.Stage++;                          CheckPoint.StageData = null;                          if (CheckPointStageCallback(this)) return;                      }                  }                  CheckPoint.Completed = true;                  CheckPoint.Progress = 100;              }              finally              {                  CheckPointStageCallback(this);                  Result.AddSummary("Imported User Roles"' totalUserRolesImported.ToString());                  if (includeProfile)                  {                      Result.AddSummary("Imported User Profiles"' totalProfilesImported.ToString());                  }              }
Magic Number,Dnn.ExportImport.Components.Services,UsersExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersExportService.cs,ExportData,The following statement contains a magic number: try              {                  while (pageIndex < totalPages)                  {                      if (CheckCancelled(exportJob)) return;                      var exportUsersList = new List<ExportUser>();                      var exportAspnetUserList = new List<ExportAspnetUser>();                      var exportAspnetMembershipList = new List<ExportAspnetMembership>();                      var exportUserRoleList = new List<ExportUserRole>();                      var exportUserPortalList = new List<ExportUserPortal>();                      var exportUserAuthenticationList = new List<ExportUserAuthentication>();                      var exportUserProfileList = new List<ExportUserProfile>();                      try                      {                          using (var reader = DataProvider.Instance()                              .GetAllUsers(portalId' pageIndex' pageSize' exportDto.IncludeDeletions' toDateUtc' fromDateUtc))                          {                              CBO.FillCollection(reader' exportUsersList' false);                              reader.NextResult();                                CBO.FillCollection(reader' exportUserAuthenticationList' false);                              reader.NextResult();                                CBO.FillCollection(reader' exportUserRoleList' false);                              reader.NextResult();                                if (includeProfile)                              {                                  CBO.FillCollection(reader' exportUserProfileList' false);                              }                              reader.NextResult();                                CBO.FillCollection(reader' exportUserPortalList' false);                              reader.NextResult();                                CBO.FillCollection(reader' exportAspnetUserList' false);                              reader.NextResult();                                CBO.FillCollection(reader' exportAspnetMembershipList' true);                          }                            Repository.CreateItems(exportUsersList' null);                          totalUsersExported += exportUsersList.Count;                            exportUserAuthenticationList.ForEach(                              x =>                              {                                  x.ReferenceId = exportUsersList.FirstOrDefault(user => user.UserId == x.UserId)?.Id;                              });                          Repository.CreateItems(exportUserAuthenticationList' null);                          totalAuthenticationExported += exportUserAuthenticationList.Count;                            exportUserRoleList.ForEach(                              x =>                              {                                  x.ReferenceId = exportUsersList.FirstOrDefault(user => user.UserId == x.UserId)?.Id;                              });                          Repository.CreateItems(exportUserRoleList' null);                          totalUserRolesExported += exportUserRoleList.Count;                          if (includeProfile)                          {                              exportUserProfileList.ForEach(                                  x =>                                  {                                      x.ReferenceId = exportUsersList.FirstOrDefault(user => user.UserId == x.UserId)?.Id;                                  });                              Repository.CreateItems(exportUserProfileList' null);                              totalProfilesExported += exportUserProfileList.Count;                          }                          exportUserPortalList.ForEach(                              x =>                              {                                  x.ReferenceId = exportUsersList.FirstOrDefault(user => user.UserId == x.UserId)?.Id;                              });                          Repository.CreateItems(exportUserPortalList' null);                          totalPortalsExported += exportUserPortalList.Count;                            exportAspnetUserList.ForEach(                              x =>                              {                                  x.ReferenceId = exportUsersList.FirstOrDefault(user => user.Username == x.UserName)?.Id;                              });                          Repository.CreateItems(exportAspnetUserList' null);                          totalAspnetUserExported += exportAspnetUserList.Count;                            exportAspnetMembershipList.ForEach(                              x =>                              {                                  x.ReferenceId = exportAspnetUserList.FirstOrDefault(user => user.UserId == x.UserId)?.Id;                              });                          Repository.CreateItems(exportAspnetMembershipList' null);                          totalAspnetMembershipExported += exportAspnetMembershipList.Count;                            CheckPoint.ProcessedItems += exportUsersList.Count;                      }                      catch (Exception ex)                      {                          Result.AddLogEntry($"Exporting Users from {pageIndex * pageSize} to {pageIndex * pageSize + pageSize} exception"' ex.Message' ReportLevel.Error);                      }                      CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalUsers;                      CheckPoint.Stage++;                      if (CheckPointStageCallback(this)) return;                      //Rebuild the indexes in the exported database.                      Repository.RebuildIndex<ExportUser>(x => x.Id' true);                      Repository.RebuildIndex<ExportUserPortal>(x => x.ReferenceId);                      Repository.RebuildIndex<ExportAspnetUser>(x => x.ReferenceId);                      Repository.RebuildIndex<ExportAspnetMembership>(x => x.ReferenceId);                      Repository.RebuildIndex<ExportUserAuthentication>(x => x.ReferenceId);                      Repository.RebuildIndex<ExportUserRole>(x => x.ReferenceId);                      if (includeProfile)                          Repository.RebuildIndex<ExportUserProfile>(x => x.ReferenceId);                      pageIndex++;                  }                  CheckPoint.Completed = true;                  CheckPoint.Progress = 100;              }              finally              {                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Users"' totalUsersExported.ToString());                  Result.AddSummary("Exported User Portals"' totalPortalsExported.ToString());                  Result.AddSummary("Exported User Roles"' totalUserRolesExported.ToString());                  if (includeProfile)                  {                      Result.AddSummary("Exported User Profiles"' totalProfilesExported.ToString());                  }                  Result.AddSummary("Exported User Authentication"' totalAuthenticationExported.ToString());                  Result.AddSummary("Exported Aspnet User"' totalAspnetUserExported.ToString());                  Result.AddSummary("Exported Aspnet Membership"' totalAspnetMembershipExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,UsersExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersExportService.cs,ExportData,The following statement contains a magic number: try              {                  while (pageIndex < totalPages)                  {                      if (CheckCancelled(exportJob)) return;                      var exportUsersList = new List<ExportUser>();                      var exportAspnetUserList = new List<ExportAspnetUser>();                      var exportAspnetMembershipList = new List<ExportAspnetMembership>();                      var exportUserRoleList = new List<ExportUserRole>();                      var exportUserPortalList = new List<ExportUserPortal>();                      var exportUserAuthenticationList = new List<ExportUserAuthentication>();                      var exportUserProfileList = new List<ExportUserProfile>();                      try                      {                          using (var reader = DataProvider.Instance()                              .GetAllUsers(portalId' pageIndex' pageSize' exportDto.IncludeDeletions' toDateUtc' fromDateUtc))                          {                              CBO.FillCollection(reader' exportUsersList' false);                              reader.NextResult();                                CBO.FillCollection(reader' exportUserAuthenticationList' false);                              reader.NextResult();                                CBO.FillCollection(reader' exportUserRoleList' false);                              reader.NextResult();                                if (includeProfile)                              {                                  CBO.FillCollection(reader' exportUserProfileList' false);                              }                              reader.NextResult();                                CBO.FillCollection(reader' exportUserPortalList' false);                              reader.NextResult();                                CBO.FillCollection(reader' exportAspnetUserList' false);                              reader.NextResult();                                CBO.FillCollection(reader' exportAspnetMembershipList' true);                          }                            Repository.CreateItems(exportUsersList' null);                          totalUsersExported += exportUsersList.Count;                            exportUserAuthenticationList.ForEach(                              x =>                              {                                  x.ReferenceId = exportUsersList.FirstOrDefault(user => user.UserId == x.UserId)?.Id;                              });                          Repository.CreateItems(exportUserAuthenticationList' null);                          totalAuthenticationExported += exportUserAuthenticationList.Count;                            exportUserRoleList.ForEach(                              x =>                              {                                  x.ReferenceId = exportUsersList.FirstOrDefault(user => user.UserId == x.UserId)?.Id;                              });                          Repository.CreateItems(exportUserRoleList' null);                          totalUserRolesExported += exportUserRoleList.Count;                          if (includeProfile)                          {                              exportUserProfileList.ForEach(                                  x =>                                  {                                      x.ReferenceId = exportUsersList.FirstOrDefault(user => user.UserId == x.UserId)?.Id;                                  });                              Repository.CreateItems(exportUserProfileList' null);                              totalProfilesExported += exportUserProfileList.Count;                          }                          exportUserPortalList.ForEach(                              x =>                              {                                  x.ReferenceId = exportUsersList.FirstOrDefault(user => user.UserId == x.UserId)?.Id;                              });                          Repository.CreateItems(exportUserPortalList' null);                          totalPortalsExported += exportUserPortalList.Count;                            exportAspnetUserList.ForEach(                              x =>                              {                                  x.ReferenceId = exportUsersList.FirstOrDefault(user => user.Username == x.UserName)?.Id;                              });                          Repository.CreateItems(exportAspnetUserList' null);                          totalAspnetUserExported += exportAspnetUserList.Count;                            exportAspnetMembershipList.ForEach(                              x =>                              {                                  x.ReferenceId = exportAspnetUserList.FirstOrDefault(user => user.UserId == x.UserId)?.Id;                              });                          Repository.CreateItems(exportAspnetMembershipList' null);                          totalAspnetMembershipExported += exportAspnetMembershipList.Count;                            CheckPoint.ProcessedItems += exportUsersList.Count;                      }                      catch (Exception ex)                      {                          Result.AddLogEntry($"Exporting Users from {pageIndex * pageSize} to {pageIndex * pageSize + pageSize} exception"' ex.Message' ReportLevel.Error);                      }                      CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalUsers;                      CheckPoint.Stage++;                      if (CheckPointStageCallback(this)) return;                      //Rebuild the indexes in the exported database.                      Repository.RebuildIndex<ExportUser>(x => x.Id' true);                      Repository.RebuildIndex<ExportUserPortal>(x => x.ReferenceId);                      Repository.RebuildIndex<ExportAspnetUser>(x => x.ReferenceId);                      Repository.RebuildIndex<ExportAspnetMembership>(x => x.ReferenceId);                      Repository.RebuildIndex<ExportUserAuthentication>(x => x.ReferenceId);                      Repository.RebuildIndex<ExportUserRole>(x => x.ReferenceId);                      if (includeProfile)                          Repository.RebuildIndex<ExportUserProfile>(x => x.ReferenceId);                      pageIndex++;                  }                  CheckPoint.Completed = true;                  CheckPoint.Progress = 100;              }              finally              {                  CheckPointStageCallback(this);                  Result.AddSummary("Exported Users"' totalUsersExported.ToString());                  Result.AddSummary("Exported User Portals"' totalPortalsExported.ToString());                  Result.AddSummary("Exported User Roles"' totalUserRolesExported.ToString());                  if (includeProfile)                  {                      Result.AddSummary("Exported User Profiles"' totalProfilesExported.ToString());                  }                  Result.AddSummary("Exported User Authentication"' totalAuthenticationExported.ToString());                  Result.AddSummary("Exported Aspnet User"' totalAspnetUserExported.ToString());                  Result.AddSummary("Exported Aspnet Membership"' totalAspnetMembershipExported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,UsersExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersExportService.cs,ImportData,The following statement contains a magic number: try              {                  Repository.RebuildIndex<ExportUser>(x => x.Id' true);                  Repository.RebuildIndex<ExportUserPortal>(x => x.ReferenceId);                  Repository.RebuildIndex<ExportAspnetUser>(x => x.ReferenceId);                  Repository.RebuildIndex<ExportAspnetMembership>(x => x.ReferenceId);                  Repository.RebuildIndex<ExportUserAuthentication>(x => x.ReferenceId);                  var portalId = importJob.PortalId;                  var dataProvider = DotNetNuke.Data.DataProvider.Instance();                  using (var table = new DataTable("Users"))                  {                      // must create the columns from scratch with each iteration                      table.Columns.AddRange(                          UsersDatasetColumns.Select(column => new DataColumn(column.Item1' column.Item2)).ToArray());                      while (totalUsersImported < totalUsersToBeProcessed)                      {                          if (CheckCancelled(importJob)) return;                          var users =                              Repository.GetAllItems<ExportUser>(null' true' pageIndex * pageSize' pageSize).ToList();                          var tempAspUserCount = 0;                          var tempAspMembershipCount = 0;                          var tempUserPortalCount = 0;                          var tempUserAuthenticationCount = 0;                          try                          {                              foreach (var user in users)                              {                                  if (CheckCancelled(importJob)) return;                                  var row = table.NewRow();                                    var userPortal = Repository.GetRelatedItems<ExportUserPortal>(user.Id).FirstOrDefault();                                  var userAuthentication = Repository.GetRelatedItems<ExportUserAuthentication>(user.Id).FirstOrDefault();                                  //Aspnet Users and Membership                                  var aspNetUser = Repository.GetRelatedItems<ExportAspnetUser>(user.Id).FirstOrDefault();                                  var aspnetMembership = aspNetUser != null                                      ? Repository.GetRelatedItems<ExportAspnetMembership>(aspNetUser.Id).FirstOrDefault()                                      : null;                                    row["PortalId"] = portalId;                                  row["Username"] = user.Username;                                  row["FirstName"] = string.IsNullOrEmpty(user.FirstName) ? string.Empty : user.FirstName;                                  row["LastName"] = string.IsNullOrEmpty(user.LastName) ? string.Empty : user.LastName;                                  row["AffiliateId"] = dataProvider.GetNull(user.AffiliateId);                                  row["IsSuperUser"] = user.IsSuperUser;                                  row["Email"] = user.Email;                                  row["DisplayName"] = string.IsNullOrEmpty(user.DisplayName) ? string.Empty : user.DisplayName;                                  row["UpdatePassword"] = user.UpdatePassword;                                  row["CreatedByUserID"] = Util.GetUserIdByName(importJob' user.CreatedByUserId' user.CreatedByUserName);                                  row["LastIPAddress"] = dataProvider.GetNull(user.LastIpAddress);                                  row["PasswordResetToken"] = dataProvider.GetNull(user.PasswordResetToken);                                  row["PasswordResetExpiration"] = dataProvider.GetNull(user.PasswordResetExpiration);                                  row["LastModifiedByUserID"] = Util.GetUserIdByName(importJob' user.LastModifiedByUserId' user.LastModifiedByUserName);                                    if (userPortal != null)                                  {                                      tempUserPortalCount += 1;                                      row["Authorised"] = userPortal.Authorised;                                      row["VanityUrl"] = userPortal.VanityUrl;                                      row["RefreshRoles"] = userPortal.RefreshRoles;                                      row["IsDeleted"] = userPortal.IsDeleted;                                  }                                  else                                  {                                      row["Authorised"] = DBNull.Value;                                      row["VanityUrl"] = DBNull.Value;                                      row["RefreshRoles"] = DBNull.Value;                                      row["IsDeleted"] = DBNull.Value;                                  }                                  if (userAuthentication != null)                                  {                                      tempUserAuthenticationCount += 1;                                      row["AuthenticationType"] = userAuthentication?.AuthenticationType;                                      row["AuthenticationToken"] = userAuthentication?.AuthenticationToken;                                  }                                  else                                  {                                      row["AuthenticationType"] = DBNull.Value;                                      row["AuthenticationToken"] = DBNull.Value;                                  }                                    if (aspNetUser != null)                                  {                                      tempAspUserCount += 1;                                      row["ApplicationId"] = GetApplicationId();                                      row["AspUserId"] = aspNetUser.UserId;                                      row["MobileAlias"] = aspNetUser.MobileAlias;                                      row["IsAnonymous"] = aspNetUser.IsAnonymous;                                      if (aspnetMembership != null)                                      {                                          tempAspMembershipCount += 1;                                          row["Password"] = string.IsNullOrEmpty(aspnetMembership.Password) ? string.Empty : aspnetMembership.Password;                                          row["PasswordFormat"] = aspnetMembership.PasswordFormat;                                          row["PasswordSalt"] = aspnetMembership.PasswordSalt;                                          row["MobilePIN"] = aspnetMembership.MobilePin;                                          row["PasswordQuestion"] = aspnetMembership.PasswordQuestion;                                          row["PasswordAnswer"] = aspnetMembership.PasswordAnswer;                                          row["IsApproved"] = aspnetMembership.IsApproved;                                          row["IsLockedOut"] = aspnetMembership.IsLockedOut;                                          row["FailedPasswordAttemptCount"] = aspnetMembership.FailedPasswordAttemptCount;                                          row["FailedPasswordAnswerAttemptCount"] = aspnetMembership.FailedPasswordAnswerAttemptCount;                                          row["Comment"] = aspnetMembership.Comment;                                      }                                  }                                  else                                  {                                      row["ApplicationId"] = DBNull.Value;                                      row["AspUserId"] = DBNull.Value;                                      row["MobileAlias"] = DBNull.Value;                                      row["IsAnonymous"] = DBNull.Value;                                      row["Password"] = DBNull.Value;                                      row["PasswordFormat"] = DBNull.Value;                                      row["PasswordSalt"] = DBNull.Value;                                      row["MobilePIN"] = DBNull.Value;                                      row["PasswordQuestion"] = DBNull.Value;                                      row["PasswordAnswer"] = DBNull.Value;                                      row["IsApproved"] = DBNull.Value;                                      row["IsLockedOut"] = DBNull.Value;                                      row["FailedPasswordAttemptCount"] = DBNull.Value;                                      row["FailedPasswordAnswerAttemptCount"] = DBNull.Value;                                      row["Comment"] = DBNull.Value;                                  }                                    table.Rows.Add(row);                              }                              var overwrite = importDto.CollisionResolution == CollisionResolution.Overwrite;                              //Bulk insert the data in DB                              DotNetNuke.Data.DataProvider.Instance()                                  .BulkInsert("ExportImport_AddUpdateUsersBulk"' "@DataTable"' table' new Dictionary<string' object> { { "Overwrite"' overwrite } });                              totalUsersImported += users.Count;                              totalAspnetUserImported += tempAspUserCount;                              totalAspnetMembershipImported += tempAspMembershipCount;                              totalPortalsImported += tempUserPortalCount;                              totalUserAuthenticationCount += tempUserAuthenticationCount;                              CheckPoint.ProcessedItems += users.Count;                          }                          catch (Exception ex)                          {                              Result.AddLogEntry($"Importing Users from {pageIndex * pageSize} to {pageIndex * pageSize + pageSize} exception"' ex.Message' ReportLevel.Error);                          }                          table.Rows.Clear();                          pageIndex++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalUsers;                          CheckPoint.Stage++;                          CheckPoint.StageData = null;                          if (CheckPointStageCallback(this)) return;                      }                  }                  CheckPoint.Completed = true;                  CheckPoint.Progress = 100;              }              finally              {                  CheckPointStageCallback(this);                  Result.AddSummary("Imported Users"' totalUsersImported.ToString());                  Result.AddSummary("Imported User Portals"' totalPortalsImported.ToString());                  Result.AddSummary("Import User Authentications"' totalUserAuthenticationCount.ToString());                  Result.AddSummary("Imported Aspnet Users"' totalAspnetUserImported.ToString());                  Result.AddSummary("Imported Aspnet Memberships"' totalAspnetMembershipImported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,UsersExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\UsersExportService.cs,ImportData,The following statement contains a magic number: try              {                  Repository.RebuildIndex<ExportUser>(x => x.Id' true);                  Repository.RebuildIndex<ExportUserPortal>(x => x.ReferenceId);                  Repository.RebuildIndex<ExportAspnetUser>(x => x.ReferenceId);                  Repository.RebuildIndex<ExportAspnetMembership>(x => x.ReferenceId);                  Repository.RebuildIndex<ExportUserAuthentication>(x => x.ReferenceId);                  var portalId = importJob.PortalId;                  var dataProvider = DotNetNuke.Data.DataProvider.Instance();                  using (var table = new DataTable("Users"))                  {                      // must create the columns from scratch with each iteration                      table.Columns.AddRange(                          UsersDatasetColumns.Select(column => new DataColumn(column.Item1' column.Item2)).ToArray());                      while (totalUsersImported < totalUsersToBeProcessed)                      {                          if (CheckCancelled(importJob)) return;                          var users =                              Repository.GetAllItems<ExportUser>(null' true' pageIndex * pageSize' pageSize).ToList();                          var tempAspUserCount = 0;                          var tempAspMembershipCount = 0;                          var tempUserPortalCount = 0;                          var tempUserAuthenticationCount = 0;                          try                          {                              foreach (var user in users)                              {                                  if (CheckCancelled(importJob)) return;                                  var row = table.NewRow();                                    var userPortal = Repository.GetRelatedItems<ExportUserPortal>(user.Id).FirstOrDefault();                                  var userAuthentication = Repository.GetRelatedItems<ExportUserAuthentication>(user.Id).FirstOrDefault();                                  //Aspnet Users and Membership                                  var aspNetUser = Repository.GetRelatedItems<ExportAspnetUser>(user.Id).FirstOrDefault();                                  var aspnetMembership = aspNetUser != null                                      ? Repository.GetRelatedItems<ExportAspnetMembership>(aspNetUser.Id).FirstOrDefault()                                      : null;                                    row["PortalId"] = portalId;                                  row["Username"] = user.Username;                                  row["FirstName"] = string.IsNullOrEmpty(user.FirstName) ? string.Empty : user.FirstName;                                  row["LastName"] = string.IsNullOrEmpty(user.LastName) ? string.Empty : user.LastName;                                  row["AffiliateId"] = dataProvider.GetNull(user.AffiliateId);                                  row["IsSuperUser"] = user.IsSuperUser;                                  row["Email"] = user.Email;                                  row["DisplayName"] = string.IsNullOrEmpty(user.DisplayName) ? string.Empty : user.DisplayName;                                  row["UpdatePassword"] = user.UpdatePassword;                                  row["CreatedByUserID"] = Util.GetUserIdByName(importJob' user.CreatedByUserId' user.CreatedByUserName);                                  row["LastIPAddress"] = dataProvider.GetNull(user.LastIpAddress);                                  row["PasswordResetToken"] = dataProvider.GetNull(user.PasswordResetToken);                                  row["PasswordResetExpiration"] = dataProvider.GetNull(user.PasswordResetExpiration);                                  row["LastModifiedByUserID"] = Util.GetUserIdByName(importJob' user.LastModifiedByUserId' user.LastModifiedByUserName);                                    if (userPortal != null)                                  {                                      tempUserPortalCount += 1;                                      row["Authorised"] = userPortal.Authorised;                                      row["VanityUrl"] = userPortal.VanityUrl;                                      row["RefreshRoles"] = userPortal.RefreshRoles;                                      row["IsDeleted"] = userPortal.IsDeleted;                                  }                                  else                                  {                                      row["Authorised"] = DBNull.Value;                                      row["VanityUrl"] = DBNull.Value;                                      row["RefreshRoles"] = DBNull.Value;                                      row["IsDeleted"] = DBNull.Value;                                  }                                  if (userAuthentication != null)                                  {                                      tempUserAuthenticationCount += 1;                                      row["AuthenticationType"] = userAuthentication?.AuthenticationType;                                      row["AuthenticationToken"] = userAuthentication?.AuthenticationToken;                                  }                                  else                                  {                                      row["AuthenticationType"] = DBNull.Value;                                      row["AuthenticationToken"] = DBNull.Value;                                  }                                    if (aspNetUser != null)                                  {                                      tempAspUserCount += 1;                                      row["ApplicationId"] = GetApplicationId();                                      row["AspUserId"] = aspNetUser.UserId;                                      row["MobileAlias"] = aspNetUser.MobileAlias;                                      row["IsAnonymous"] = aspNetUser.IsAnonymous;                                      if (aspnetMembership != null)                                      {                                          tempAspMembershipCount += 1;                                          row["Password"] = string.IsNullOrEmpty(aspnetMembership.Password) ? string.Empty : aspnetMembership.Password;                                          row["PasswordFormat"] = aspnetMembership.PasswordFormat;                                          row["PasswordSalt"] = aspnetMembership.PasswordSalt;                                          row["MobilePIN"] = aspnetMembership.MobilePin;                                          row["PasswordQuestion"] = aspnetMembership.PasswordQuestion;                                          row["PasswordAnswer"] = aspnetMembership.PasswordAnswer;                                          row["IsApproved"] = aspnetMembership.IsApproved;                                          row["IsLockedOut"] = aspnetMembership.IsLockedOut;                                          row["FailedPasswordAttemptCount"] = aspnetMembership.FailedPasswordAttemptCount;                                          row["FailedPasswordAnswerAttemptCount"] = aspnetMembership.FailedPasswordAnswerAttemptCount;                                          row["Comment"] = aspnetMembership.Comment;                                      }                                  }                                  else                                  {                                      row["ApplicationId"] = DBNull.Value;                                      row["AspUserId"] = DBNull.Value;                                      row["MobileAlias"] = DBNull.Value;                                      row["IsAnonymous"] = DBNull.Value;                                      row["Password"] = DBNull.Value;                                      row["PasswordFormat"] = DBNull.Value;                                      row["PasswordSalt"] = DBNull.Value;                                      row["MobilePIN"] = DBNull.Value;                                      row["PasswordQuestion"] = DBNull.Value;                                      row["PasswordAnswer"] = DBNull.Value;                                      row["IsApproved"] = DBNull.Value;                                      row["IsLockedOut"] = DBNull.Value;                                      row["FailedPasswordAttemptCount"] = DBNull.Value;                                      row["FailedPasswordAnswerAttemptCount"] = DBNull.Value;                                      row["Comment"] = DBNull.Value;                                  }                                    table.Rows.Add(row);                              }                              var overwrite = importDto.CollisionResolution == CollisionResolution.Overwrite;                              //Bulk insert the data in DB                              DotNetNuke.Data.DataProvider.Instance()                                  .BulkInsert("ExportImport_AddUpdateUsersBulk"' "@DataTable"' table' new Dictionary<string' object> { { "Overwrite"' overwrite } });                              totalUsersImported += users.Count;                              totalAspnetUserImported += tempAspUserCount;                              totalAspnetMembershipImported += tempAspMembershipCount;                              totalPortalsImported += tempUserPortalCount;                              totalUserAuthenticationCount += tempUserAuthenticationCount;                              CheckPoint.ProcessedItems += users.Count;                          }                          catch (Exception ex)                          {                              Result.AddLogEntry($"Importing Users from {pageIndex * pageSize} to {pageIndex * pageSize + pageSize} exception"' ex.Message' ReportLevel.Error);                          }                          table.Rows.Clear();                          pageIndex++;                          CheckPoint.Progress = CheckPoint.ProcessedItems * 100.0 / totalUsers;                          CheckPoint.Stage++;                          CheckPoint.StageData = null;                          if (CheckPointStageCallback(this)) return;                      }                  }                  CheckPoint.Completed = true;                  CheckPoint.Progress = 100;              }              finally              {                  CheckPointStageCallback(this);                  Result.AddSummary("Imported Users"' totalUsersImported.ToString());                  Result.AddSummary("Imported User Portals"' totalPortalsImported.ToString());                  Result.AddSummary("Import User Authentications"' totalUserAuthenticationCount.ToString());                  Result.AddSummary("Imported Aspnet Users"' totalAspnetUserImported.ToString());                  Result.AddSummary("Imported Aspnet Memberships"' totalAspnetMembershipImported.ToString());              }
Magic Number,Dnn.ExportImport.Components.Services,VocabularyService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\VocabularyService.cs,ExportData,The following statement contains a magic number: if (CheckPoint.Stage == 0)              {                  var taxonomyTerms = GetTaxonomyTerms(exportDto.PortalId' toDate' fromDate);                  var taxonomyVocabularies = GetTaxonomyVocabularies(exportDto.PortalId' toDate' fromDate);                  if (taxonomyTerms.Count > 0 || taxonomyVocabularies.Count > 0)                  {                      var scopeTypes = CBO.FillCollection<TaxonomyScopeType>(DataProvider.Instance().GetAllScopeTypes());                      //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? scopeTypes.Count : CheckPoint.TotalItems;                      if (CheckPoint.TotalItems == scopeTypes.Count)                      {                          vocabularyTypes = CBO.FillCollection<TaxonomyVocabularyType>(DataProvider.Instance().GetAllVocabularyTypes());                          taxonomyTerms = GetTaxonomyTerms(exportDto.PortalId' toDate' fromDate);                          taxonomyVocabularies = GetTaxonomyVocabularies(exportDto.PortalId' toDate' fromDate);                          CheckPoint.TotalItems += taxonomyTerms.Count + taxonomyVocabularies.Count;                      }                      CheckPointStageCallback(this);                        Repository.CreateItems(scopeTypes);                      //Result.AddSummary("Exported Taxonomy Scopes"' scopeTypes.Count.ToString()); -- not imported so don't show                      //CheckPoint.ProcessedItems += scopeTypes.Count;                  }                  CheckPoint.Progress = 25;                    if (taxonomyVocabularies == null) taxonomyVocabularies = GetTaxonomyVocabularies(exportDto.PortalId' toDate' fromDate);                  if (taxonomyTerms.Count > 0 || taxonomyVocabularies.Count > 0)                  {                      if (vocabularyTypes == null)                          vocabularyTypes = CBO.FillCollection<TaxonomyVocabularyType>(DataProvider.Instance().GetAllVocabularyTypes());                      Repository.CreateItems(vocabularyTypes);                      //Result.AddSummary("Exported Vocabulary Types"' vocabularyTypes.Count.ToString()); -- not imported so don't show                      //CheckPoint.ProcessedItems += vocabularyTypes.Count;                  }                    Repository.CreateItems(taxonomyTerms);                  Result.AddSummary("Exported Vocabularies"' taxonomyTerms.Count.ToString());                  CheckPoint.Progress = 75;                  CheckPoint.ProcessedItems += taxonomyTerms.Count;                  CheckPoint.Stage++;                  if (CheckPointStageCallback(this)) return;                    if (taxonomyVocabularies == null) taxonomyVocabularies = GetTaxonomyVocabularies(exportDto.PortalId' toDate' fromDate);                  Repository.CreateItems(taxonomyVocabularies);                  Result.AddSummary("Exported Terms"' taxonomyVocabularies.Count.ToString());                  CheckPoint.Progress = 100;                  CheckPoint.ProcessedItems += taxonomyVocabularies.Count;                  CheckPoint.Stage++;                  CheckPoint.Completed = true;                  CheckPointStageCallback(this);              }
Magic Number,Dnn.ExportImport.Components.Services,VocabularyService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\VocabularyService.cs,ExportData,The following statement contains a magic number: if (CheckPoint.Stage == 0)              {                  var taxonomyTerms = GetTaxonomyTerms(exportDto.PortalId' toDate' fromDate);                  var taxonomyVocabularies = GetTaxonomyVocabularies(exportDto.PortalId' toDate' fromDate);                  if (taxonomyTerms.Count > 0 || taxonomyVocabularies.Count > 0)                  {                      var scopeTypes = CBO.FillCollection<TaxonomyScopeType>(DataProvider.Instance().GetAllScopeTypes());                      //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? scopeTypes.Count : CheckPoint.TotalItems;                      if (CheckPoint.TotalItems == scopeTypes.Count)                      {                          vocabularyTypes = CBO.FillCollection<TaxonomyVocabularyType>(DataProvider.Instance().GetAllVocabularyTypes());                          taxonomyTerms = GetTaxonomyTerms(exportDto.PortalId' toDate' fromDate);                          taxonomyVocabularies = GetTaxonomyVocabularies(exportDto.PortalId' toDate' fromDate);                          CheckPoint.TotalItems += taxonomyTerms.Count + taxonomyVocabularies.Count;                      }                      CheckPointStageCallback(this);                        Repository.CreateItems(scopeTypes);                      //Result.AddSummary("Exported Taxonomy Scopes"' scopeTypes.Count.ToString()); -- not imported so don't show                      //CheckPoint.ProcessedItems += scopeTypes.Count;                  }                  CheckPoint.Progress = 25;                    if (taxonomyVocabularies == null) taxonomyVocabularies = GetTaxonomyVocabularies(exportDto.PortalId' toDate' fromDate);                  if (taxonomyTerms.Count > 0 || taxonomyVocabularies.Count > 0)                  {                      if (vocabularyTypes == null)                          vocabularyTypes = CBO.FillCollection<TaxonomyVocabularyType>(DataProvider.Instance().GetAllVocabularyTypes());                      Repository.CreateItems(vocabularyTypes);                      //Result.AddSummary("Exported Vocabulary Types"' vocabularyTypes.Count.ToString()); -- not imported so don't show                      //CheckPoint.ProcessedItems += vocabularyTypes.Count;                  }                    Repository.CreateItems(taxonomyTerms);                  Result.AddSummary("Exported Vocabularies"' taxonomyTerms.Count.ToString());                  CheckPoint.Progress = 75;                  CheckPoint.ProcessedItems += taxonomyTerms.Count;                  CheckPoint.Stage++;                  if (CheckPointStageCallback(this)) return;                    if (taxonomyVocabularies == null) taxonomyVocabularies = GetTaxonomyVocabularies(exportDto.PortalId' toDate' fromDate);                  Repository.CreateItems(taxonomyVocabularies);                  Result.AddSummary("Exported Terms"' taxonomyVocabularies.Count.ToString());                  CheckPoint.Progress = 100;                  CheckPoint.ProcessedItems += taxonomyVocabularies.Count;                  CheckPoint.Stage++;                  CheckPoint.Completed = true;                  CheckPointStageCallback(this);              }
Magic Number,Dnn.ExportImport.Components.Services,VocabularyService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\VocabularyService.cs,ExportData,The following statement contains a magic number: if (CheckPoint.Stage == 0)              {                  var taxonomyTerms = GetTaxonomyTerms(exportDto.PortalId' toDate' fromDate);                  var taxonomyVocabularies = GetTaxonomyVocabularies(exportDto.PortalId' toDate' fromDate);                  if (taxonomyTerms.Count > 0 || taxonomyVocabularies.Count > 0)                  {                      var scopeTypes = CBO.FillCollection<TaxonomyScopeType>(DataProvider.Instance().GetAllScopeTypes());                      //Update the total items count in the check points. This should be updated only once.                      CheckPoint.TotalItems = CheckPoint.TotalItems <= 0 ? scopeTypes.Count : CheckPoint.TotalItems;                      if (CheckPoint.TotalItems == scopeTypes.Count)                      {                          vocabularyTypes = CBO.FillCollection<TaxonomyVocabularyType>(DataProvider.Instance().GetAllVocabularyTypes());                          taxonomyTerms = GetTaxonomyTerms(exportDto.PortalId' toDate' fromDate);                          taxonomyVocabularies = GetTaxonomyVocabularies(exportDto.PortalId' toDate' fromDate);                          CheckPoint.TotalItems += taxonomyTerms.Count + taxonomyVocabularies.Count;                      }                      CheckPointStageCallback(this);                        Repository.CreateItems(scopeTypes);                      //Result.AddSummary("Exported Taxonomy Scopes"' scopeTypes.Count.ToString()); -- not imported so don't show                      //CheckPoint.ProcessedItems += scopeTypes.Count;                  }                  CheckPoint.Progress = 25;                    if (taxonomyVocabularies == null) taxonomyVocabularies = GetTaxonomyVocabularies(exportDto.PortalId' toDate' fromDate);                  if (taxonomyTerms.Count > 0 || taxonomyVocabularies.Count > 0)                  {                      if (vocabularyTypes == null)                          vocabularyTypes = CBO.FillCollection<TaxonomyVocabularyType>(DataProvider.Instance().GetAllVocabularyTypes());                      Repository.CreateItems(vocabularyTypes);                      //Result.AddSummary("Exported Vocabulary Types"' vocabularyTypes.Count.ToString()); -- not imported so don't show                      //CheckPoint.ProcessedItems += vocabularyTypes.Count;                  }                    Repository.CreateItems(taxonomyTerms);                  Result.AddSummary("Exported Vocabularies"' taxonomyTerms.Count.ToString());                  CheckPoint.Progress = 75;                  CheckPoint.ProcessedItems += taxonomyTerms.Count;                  CheckPoint.Stage++;                  if (CheckPointStageCallback(this)) return;                    if (taxonomyVocabularies == null) taxonomyVocabularies = GetTaxonomyVocabularies(exportDto.PortalId' toDate' fromDate);                  Repository.CreateItems(taxonomyVocabularies);                  Result.AddSummary("Exported Terms"' taxonomyVocabularies.Count.ToString());                  CheckPoint.Progress = 100;                  CheckPoint.ProcessedItems += taxonomyVocabularies.Count;                  CheckPoint.Stage++;                  CheckPoint.Completed = true;                  CheckPointStageCallback(this);              }
Magic Number,Dnn.ExportImport.Components.Services,VocabularyService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\VocabularyService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 0)              {                  var otherScopeTypes = Repository.GetAllItems<TaxonomyScopeType>().ToList();                  //the table Taxonomy_ScopeTypes is used for lookup only and never changed/updated in the database                  //CheckPoint.Progress = 10;                    //var otherVocabularyTypes = Repository.GetAllItems<TaxonomyVocabularyType>().ToList();                  //the table Taxonomy_VocabularyTypes is used for lookup only and never changed/updated in the database                  CheckPoint.Progress = 20;                    var otherVocabularies = Repository.GetAllItems<TaxonomyVocabulary>().ToList();                  ProcessVocabularies(importJob' importDto' otherScopeTypes' otherVocabularies);                  Repository.UpdateItems(otherVocabularies);                  Result.AddSummary("Imported Vocabularies"' otherVocabularies.Count.ToString());                  CheckPoint.Progress = 60;                  CheckPoint.ProcessedItems += otherVocabularies.Count;                    var otherTaxonomyTerms = Repository.GetAllItems<TaxonomyTerm>().ToList();                  ProcessTaxonomyTerms(importJob' importDto' otherVocabularies' otherTaxonomyTerms);                  Repository.UpdateItems(otherTaxonomyTerms);                  Result.AddSummary("Imported Terms"' otherTaxonomyTerms.Count.ToString());                  CheckPoint.Progress = 100;                  CheckPoint.ProcessedItems += otherTaxonomyTerms.Count;                  CheckPoint.Stage++;                  CheckPoint.Completed = true;                  CheckPointStageCallback(this);              }
Magic Number,Dnn.ExportImport.Components.Services,VocabularyService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\VocabularyService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 0)              {                  var otherScopeTypes = Repository.GetAllItems<TaxonomyScopeType>().ToList();                  //the table Taxonomy_ScopeTypes is used for lookup only and never changed/updated in the database                  //CheckPoint.Progress = 10;                    //var otherVocabularyTypes = Repository.GetAllItems<TaxonomyVocabularyType>().ToList();                  //the table Taxonomy_VocabularyTypes is used for lookup only and never changed/updated in the database                  CheckPoint.Progress = 20;                    var otherVocabularies = Repository.GetAllItems<TaxonomyVocabulary>().ToList();                  ProcessVocabularies(importJob' importDto' otherScopeTypes' otherVocabularies);                  Repository.UpdateItems(otherVocabularies);                  Result.AddSummary("Imported Vocabularies"' otherVocabularies.Count.ToString());                  CheckPoint.Progress = 60;                  CheckPoint.ProcessedItems += otherVocabularies.Count;                    var otherTaxonomyTerms = Repository.GetAllItems<TaxonomyTerm>().ToList();                  ProcessTaxonomyTerms(importJob' importDto' otherVocabularies' otherTaxonomyTerms);                  Repository.UpdateItems(otherTaxonomyTerms);                  Result.AddSummary("Imported Terms"' otherTaxonomyTerms.Count.ToString());                  CheckPoint.Progress = 100;                  CheckPoint.ProcessedItems += otherTaxonomyTerms.Count;                  CheckPoint.Stage++;                  CheckPoint.Completed = true;                  CheckPointStageCallback(this);              }
Magic Number,Dnn.ExportImport.Components.Services,VocabularyService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\VocabularyService.cs,ImportData,The following statement contains a magic number: if (CheckPoint.Stage == 0)              {                  var otherScopeTypes = Repository.GetAllItems<TaxonomyScopeType>().ToList();                  //the table Taxonomy_ScopeTypes is used for lookup only and never changed/updated in the database                  //CheckPoint.Progress = 10;                    //var otherVocabularyTypes = Repository.GetAllItems<TaxonomyVocabularyType>().ToList();                  //the table Taxonomy_VocabularyTypes is used for lookup only and never changed/updated in the database                  CheckPoint.Progress = 20;                    var otherVocabularies = Repository.GetAllItems<TaxonomyVocabulary>().ToList();                  ProcessVocabularies(importJob' importDto' otherScopeTypes' otherVocabularies);                  Repository.UpdateItems(otherVocabularies);                  Result.AddSummary("Imported Vocabularies"' otherVocabularies.Count.ToString());                  CheckPoint.Progress = 60;                  CheckPoint.ProcessedItems += otherVocabularies.Count;                    var otherTaxonomyTerms = Repository.GetAllItems<TaxonomyTerm>().ToList();                  ProcessTaxonomyTerms(importJob' importDto' otherVocabularies' otherTaxonomyTerms);                  Repository.UpdateItems(otherTaxonomyTerms);                  Result.AddSummary("Imported Terms"' otherTaxonomyTerms.Count.ToString());                  CheckPoint.Progress = 100;                  CheckPoint.ProcessedItems += otherTaxonomyTerms.Count;                  CheckPoint.Stage++;                  CheckPoint.Completed = true;                  CheckPointStageCallback(this);              }
Magic Number,Dnn.ExportImport.Components.Services,WorkflowsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\WorkflowsExportService.cs,ExportData,The following statement contains a magic number: CheckPoint.Progress = 100;
Magic Number,Dnn.ExportImport.Components.Services,WorkflowsExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\WorkflowsExportService.cs,ImportData,The following statement contains a magic number: CheckPoint.Progress = 100;
Duplicate Code,Dnn.ExportImport.Components.Services,PagesExportService,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Services\PagesExportService.cs,ImportTabModulesAndRelatedItems,The method contains a code clone-set at the following line numbers (starting from the method definition): ((35' 54)' (132' 151))
Missing Default,Dnn.ExportImport.Components.Controllers,BusinessController,C:\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\DnnExportImport\Components\Controllers\BusinessController.cs,UpgradeModule,The following switch statement is missing a default case: switch (version)                  {                      case "09.01.00":                          //AddNewLogTypes(); // moved to SQL migration script                          break;                  }
