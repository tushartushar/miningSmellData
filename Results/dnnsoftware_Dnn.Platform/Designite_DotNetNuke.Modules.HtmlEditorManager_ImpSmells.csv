Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetNuke.Modules.HtmlEditorManager.Components,UpgradeController,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HtmlEditorManager\Components\UpgradeController.cs,UpgradeModule,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Modules.HtmlEditorManager.Components,UpgradeController,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HtmlEditorManager\Components\UpgradeController.cs,UpdateRadCfgFiles,Cyclomatic complexity of the method is 8
Long Statement,DotNetNuke.Modules.HtmlEditorManager.Components,UpgradeController,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HtmlEditorManager\Components\UpgradeController.cs,UpgradeModule,The length of the statement  "                        TabInfo editorPage = Upgrade.AddHostPage(pageName' pageDescription' ModuleFolder + "/images/HtmlEditorManager_Standard_16x16.png"' ModuleFolder + "/images/HtmlEditorManager_Standard_32x32.png"' false); " is 201.
Long Statement,DotNetNuke.Modules.HtmlEditorManager.Components,UpgradeController,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HtmlEditorManager\Components\UpgradeController.cs,UpgradeModule,The length of the statement  "                        Upgrade.AddModuleToPage(editorPage' moduleDefId' pageName' ModuleFolder + "/images/HtmlEditorManager_Standard_32x32.png"' true); " is 128.
Long Statement,DotNetNuke.Modules.HtmlEditorManager.Components,UpgradeController,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HtmlEditorManager\Components\UpgradeController.cs,RadEditorProviderInstalled,The length of the statement  "            return PackageController.Instance.GetExtensionPackage(Null.NullInteger' p => p.Name.Equals("DotNetNuke.RadEditorProvider")) != null; " is 132.
Long Statement,DotNetNuke.Modules.HtmlEditorManager.Presenters,ProviderConfigurationPresenter,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HtmlEditorManager\Presenters\ProviderConfigurationPresenter.cs,View_Initialize,The length of the statement  "            ClientResourceManager.RegisterStyleSheet(View.Editor.Page' "~/Portals/_default/Skins/_default/WebControlSkin/Default/ComboBox.Default.css"); " is 140.
Long Statement,DotNetNuke.Modules.HtmlEditorManager.Presenters,ProviderConfigurationPresenter,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HtmlEditorManager\Presenters\ProviderConfigurationPresenter.cs,LoadCurrentEditor,The length of the statement  "            return ((TemplateControl)this.View).LoadControl("~/DesktopModules/Admin/HtmlEditorManager/Controls/InvalidConfiguration.ascx"); " is 127.
Magic Number,DotNetNuke.Modules.HtmlEditorManager.Components,UpgradeController,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HtmlEditorManager\Components\UpgradeController.cs,UpdateTelerikEncryptionKey,The following statement contains a magic number: var newKey = PortalSecurity.Instance.CreateKey(32);
Magic Number,DotNetNuke.Modules.HtmlEditorManager.Components,UpgradeController,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HtmlEditorManager\Components\UpgradeController.cs,UpdateTelerikEncryptionKey,The following statement contains a magic number: string.IsNullOrEmpty(currentKey) || defaultValue.Equals(currentKey) || currentKey.Length < 40
Missing Default,DotNetNuke.Modules.HtmlEditorManager.Components,UpgradeController,D:\research\architectureSmells\repos\dnnsoftware_Dnn.Platform\DNN Platform\Modules\HtmlEditorManager\Components\UpgradeController.cs,UpgradeModule,The following switch statement is missing a default case: switch (version)                  {                      case "07.04.00":                          const string ResourceFile = ModuleFolder + "/App_LocalResources/ProviderConfiguration.ascx.resx";                          string pageName = Localization.GetString("HTMLEditorPageName"' ResourceFile);                          string pageDescription = Localization.GetString("HTMLEditorPageDescription"' ResourceFile);                            // Create HTML Editor Config Page (or get existing one)                          TabInfo editorPage = Upgrade.AddHostPage(pageName' pageDescription' ModuleFolder + "/images/HtmlEditorManager_Standard_16x16.png"' ModuleFolder + "/images/HtmlEditorManager_Standard_32x32.png"' false);                            // Find the RadEditor control and remove it                          Upgrade.RemoveModule("RadEditor Manager"' editorPage.TabName' editorPage.ParentId' false);                            // Add Module To Page                          int moduleDefId = this.GetModuleDefinitionID("DotNetNuke.HtmlEditorManager"' "Html Editor Management");                          Upgrade.AddModuleToPage(editorPage' moduleDefId' pageName' ModuleFolder + "/images/HtmlEditorManager_Standard_32x32.png"' true);                            foreach (var item in DesktopModuleController.GetDesktopModules(Null.NullInteger))                          {                              DesktopModuleInfo moduleInfo = item.Value;                                if (moduleInfo.ModuleName == "DotNetNuke.HtmlEditorManager")                              {                                  moduleInfo.Category = "Host";                                  DesktopModuleController.SaveDesktopModule(moduleInfo' false' false);                              }                          }                            break;                      case "09.01.01":                          if (RadEditorProviderInstalled())                          {                              UpdateRadCfgFiles();                          }                          if (TelerikAssemblyExists())                          {                              UpdateWebConfigFile();                          }                          break;                      case "09.02.00":                          if (TelerikAssemblyExists())                          {                              UpdateTelerikEncryptionKey("Telerik.Web.UI.DialogParametersEncryptionKey");                          }                          break;                      case "09.02.01":                          if (TelerikAssemblyExists())                          {                              UpdateTelerikEncryptionKey("Telerik.Upload.ConfigurationHashKey");                          }                          break;                  }
