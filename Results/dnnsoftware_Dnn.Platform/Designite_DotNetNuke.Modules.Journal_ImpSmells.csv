Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DotNetNuke.Modules.Journal.Components,FeatureController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\FeatureController.cs,GetModifiedSearchDocuments,Cyclomatic complexity of the method is 10
Complex Method,DotNetNuke.Modules.Journal.Components,FeatureController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\FeatureController.cs,HasViewPermission,Cyclomatic complexity of the method is 9
Complex Method,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetList,Cyclomatic complexity of the method is 17
Complex Method,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetImageFromURL,Cyclomatic complexity of the method is 11
Complex Method,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,Cyclomatic complexity of the method is 21
Complex Method,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,Cyclomatic complexity of the method is 18
Complex Method,DotNetNuke.Modules.Journal,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Settings.ascx.designer.cs,LoadSettings,Cyclomatic complexity of the method is 18
Complex Method,DotNetNuke.Modules.Journal,View,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\View.ascx.designer.cs,OnInit,Cyclomatic complexity of the method is 19
Long Parameter List,DotNetNuke.Modules.Journal.Components,JournalControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalControl.cs,GetProperty,The method has 6 parameters.
Long Parameter List,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,JournalParser,The method has 5 parameters.
Long Parameter List,DotNetNuke.Modules.Journal.Components,ProfilePicPropertyAccess,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\ProfilePicPropertyAccess.cs,GetProperty,The method has 6 parameters.
Long Statement,DotNetNuke.Modules.Journal.Components,FeatureController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\FeatureController.cs,GetModifiedSearchDocuments,The length of the statement  "			using (var reader = DataProvider.Instance ().ExecuteReader ("Journal_GetSearchItems"' moduleInfo.PortalID' moduleInfo.TabModuleID' beginDateUtc' lastJournalId' Constants.SearchBatchSize)) { " is 189.
Long Statement,DotNetNuke.Modules.Journal.Components,FeatureController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\FeatureController.cs,HasViewPermission,The length of the statement  "		var isAdmin = currentUser.IsInRole (RoleController.Instance.GetRoleById (portalSettings.PortalId' portalSettings.AdministratorRoleId).RoleName); " is 144.
Long Statement,DotNetNuke.Modules.Journal.Components,FeatureController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\FeatureController.cs,HasViewPermission,The length of the statement  "		if (!HttpContext.Current.Request.IsAuthenticated || (!currentUser.IsSuperUser && !isAdmin && currentUser.IsInRole ("Unverified Users"))) { " is 138.
Long Statement,DotNetNuke.Modules.Journal.Components,FeatureController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\FeatureController.cs,HasViewPermission,The length of the statement  "		return targetUser != null && targetUser.Social.Friend != null && targetUser.Social.Friend.Status == RelationshipStatus.Accepted; " is 128.
Long Statement,DotNetNuke.Modules.Journal.Components,FeatureController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\FeatureController.cs,GetDocUrl,The length of the statement  "		url = Globals.NavigateURL (portalSettings.UserTabId' string.Empty' string.Format ("userId={0}"' profileId)' "jid=" + journalId); " is 128.
Long Statement,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetList,The length of the statement  "		var journal = JournalController.Instance.GetJournalItem (PortalSettings.PortalId' CurrentUser.UserID' JournalId' false' false' true); " is 133.
Long Statement,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetList,The length of the statement  "		journalList = journalControllerInternal.GetJournalItemsByProfile (OwnerPortalId' ModuleId' CurrentUser.UserID' ProfileId' currentIndex' rows); " is 142.
Long Statement,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetList,The length of the statement  "		journalList = journalControllerInternal.GetJournalItemsByGroup (OwnerPortalId' ModuleId' CurrentUser.UserID' SocialGroupId' currentIndex' rows); " is 144.
Long Statement,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetList,The length of the statement  "		journalList = journalControllerInternal.GetJournalItems (OwnerPortalId' ModuleId' CurrentUser.UserID' currentIndex' rows); " is 122.
Long Statement,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,The length of the statement  "				if (string.IsNullOrEmpty (ji.ItemData.ImageUrl) && originalImageUrl.ToLower ().StartsWith ("/linkclick.aspx?") && AcceptedFileExtensions.Contains (file.Extension.ToLower ())) { " is 176.
Long Statement,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Delete,The length of the statement  "		if (ji.UserId == UserInfo.UserID || ji.ProfileId == UserInfo.UserID || UserInfo.IsInRole (PortalSettings.AdministratorRoleName)) { " is 130.
Long Statement,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,SoftDelete,The length of the statement  "		if (ji.UserId == UserInfo.UserID || ji.ProfileId == UserInfo.UserID || UserInfo.IsInRole (PortalSettings.AdministratorRoleName)) { " is 130.
Long Statement,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,CommentDelete,The length of the statement  "		if (ci.UserId == UserInfo.UserID || ji.UserId == UserInfo.UserID || UserInfo.IsInRole (PortalSettings.AdministratorRoleName)) { " is 127.
Long Statement,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,GetSuggestions,The length of the statement  "			if (ur.Status == RelationshipStatus.Accepted && targetUser != null && ((relationship.RelationshipTypeId == (int)DefaultRelationshipTypes.Followers && ur.RelatedUserId == UserInfo.UserID) || relationship.RelationshipTypeId == (int)DefaultRelationshipTypes.Friends) && (targetUser.DisplayName.ToLowerInvariant ().Contains (keyword.ToLowerInvariant ()) || targetUser.DisplayName.ToLowerInvariant ().Contains (keyword.Replace ("-"' " ").ToLowerInvariant ())) && findedUsers.All (s => s.userId != targetUser.UserID)) { " is 513.
Long Statement,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,ParseMentions,The length of the statement  "			var relationship = RelationshipController.Instance.GetFollowingRelationship (UserInfo' user) ?? RelationshipController.Instance.GetFriendRelationship (UserInfo' user); " is 167.
Long Statement,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,ParseMentions,The length of the statement  "				var userLink = string.Format ("<a href=\"{0}\" class=\"userLink\" target=\"_blank\">{1}</a>"' Globals.UserProfileURL (user.UserID)' MentionIdentityChar + user.DisplayName); " is 172.
Long Statement,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,SendMentionNotifications,The length of the statement  "	var notificationType = DotNetNuke.Services.Social.Notifications.NotificationsController.Instance.GetNotificationType ("JournalMention"); " is 136.
Long Statement,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,SendMentionNotifications,The length of the statement  "		var mentionText = originalSummary.Substring (originalSummary.IndexOf (MentionIdentityChar + key' StringComparison.InvariantCultureIgnoreCase)); " is 143.
Long Statement,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,SendMentionNotifications,The length of the statement  "		Services.Social.Notifications.NotificationsController.Instance.SendNotification (notification' PortalSettings.PortalId' null' new List<UserInfo> { " is 146.
Long Statement,DotNetNuke.Modules.Journal,MyFiles,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\MyFiles.ascx.cs,btnUp_Upload,The length of the statement  "		message = string.Format (Localization.GetString ("RestrictedFileType")' fileUp.PostedFile.FileName' Host.AllowedExtensionWhitelist.ToDisplayString ()); " is 151.
Long Statement,DotNetNuke.Modules.Journal,MyFiles,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\MyFiles.ascx.cs,btnUp_Upload,The length of the statement  "		litOut.Text = "<script type=\"text/javascript\">var fileInfo=" + JsonExtensionsWeb.ToJsonString (fi) + ";alert(fileInfo.FileName);</script>"; " is 141.
Long Statement,DotNetNuke.Modules.Journal,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Settings.ascx.designer.cs,LoadSettings,The length of the statement  "				drpDefaultPageSize.SelectedIndex = drpDefaultPageSize.Items.IndexOf (drpDefaultPageSize.Items.FindByValue (Settings [Constants.DefaultPageSize].ToString ())); " is 158.
Long Statement,DotNetNuke.Modules.Journal,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Settings.ascx.designer.cs,LoadSettings,The length of the statement  "				drpMaxMessageLength.SelectedIndex = drpMaxMessageLength.Items.IndexOf (drpMaxMessageLength.Items.FindByValue (Settings [Constants.MaxCharacters].ToString ())); " is 159.
Long Statement,DotNetNuke.Modules.Journal,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Settings.ascx.designer.cs,UpdateSettings,The length of the statement  "		ModuleController.Instance.UpdateModuleSetting (this.ModuleId' Constants.DefaultPageSize' drpDefaultPageSize.SelectedItem.Value); " is 128.
Long Statement,DotNetNuke.Modules.Journal,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Settings.ascx.designer.cs,UpdateSettings,The length of the statement  "		ModuleController.Instance.UpdateModuleSetting (this.ModuleId' Constants.AllowPhotos' chkAllowPhotos.Checked.ToString ()); " is 121.
Long Statement,DotNetNuke.Modules.Journal,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Settings.ascx.designer.cs,UpdateSettings,The length of the statement  "		ModuleController.Instance.UpdateModuleSetting (this.ModuleId' Constants.AllowResizePhotos' chkAllowResize.Checked.ToString ()); " is 127.
Long Statement,DotNetNuke.Modules.Journal,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Settings.ascx.designer.cs,UpdateSettings,The length of the statement  "		ModuleController.Instance.UpdateModuleSetting (this.ModuleId' Constants.JournalEditorEnabled' chkEnableEditor.Checked.ToString ()); " is 131.
Long Statement,DotNetNuke.Modules.Journal,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Settings.ascx.designer.cs,UpdateSettings,The length of the statement  "		ModuleController.Instance.UpdateModuleSetting (this.ModuleId' Constants.MaxCharacters' drpMaxMessageLength.SelectedItem.Value); " is 127.
Long Statement,DotNetNuke.Modules.Journal,Settings,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Settings.ascx.designer.cs,BindJournalTypes,The length of the statement  "		chkJournalFilters.Items.Add (new ListItem (Localization.GetString (journalTypeInfo.JournalType' "~/desktopmodules/journal/app_localresources/sharedresources.resx")' journalTypeInfo.JournalTypeId.ToString ())); " is 209.
Long Statement,DotNetNuke.Modules.Journal,View,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\View.ascx.designer.cs,OnInit,The length of the statement  "	var isAdmin = UserInfo.IsInRole (RoleController.Instance.GetRoleById (PortalId' PortalSettings.AdministratorRoleId).RoleName); " is 126.
Complex Conditional,DotNetNuke.Modules.Journal.Components,FeatureController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\FeatureController.cs,HasViewPermission,The conditional expression  "!HttpContext.Current.Request.IsAuthenticated || (!currentUser.IsSuperUser && !isAdmin && currentUser.IsInRole ("Unverified Users"))"  is complex.
Complex Conditional,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetList,The conditional expression  "isAdmin || CurrentUser.UserID == ji.UserId || (ProfileId > Null.NullInteger && CurrentUser.UserID == ProfileId)"  is complex.
Complex Conditional,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,GetSuggestions,The conditional expression  "ur.Status == RelationshipStatus.Accepted && targetUser != null && ((relationship.RelationshipTypeId == (int)DefaultRelationshipTypes.Followers && ur.RelatedUserId == UserInfo.UserID) || relationship.RelationshipTypeId == (int)DefaultRelationshipTypes.Friends) && (targetUser.DisplayName.ToLowerInvariant ().Contains (keyword.ToLowerInvariant ()) || targetUser.DisplayName.ToLowerInvariant ().Contains (keyword.Replace ("-"' " ").ToLowerInvariant ())) && findedUsers.All (s => s.userId != targetUser.UserID)"  is complex.
Complex Conditional,DotNetNuke.Modules.Journal,View,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\View.ascx.designer.cs,OnInit,The conditional expression  "!Request.IsAuthenticated || (!UserInfo.IsSuperUser && !isAdmin && UserInfo.IsInRole ("Unverified Users"))"  is complex.
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (xLikes.Count == 1 && ji.CurrentUserLikes) {  	sb.Append ("{resx:youlikethis}");  } else if (xLikes.Count > 1) {  	if (ji.CurrentUserLikes) {  		sb.Append ("{resx:you}");  		xc += 1;  	}  	foreach (XmlNode l in xLikes) {  		int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  		string name = l.Attributes ["un"].Value;  		if (userId != CurrentUser.UserID) {  			if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  				sb.Append ("' ");  			} else if (xc > 0 & xc < xLikes.Count & xc < 3) {  				sb.Append (" {resx:and} ");  			} else if (xc >= 3) {  				int diff = (xLikes.Count - xc);  				sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  				if (diff > 1) {  					sb.Append (" {resx:others}");  				} else {  					sb.Append (" {resx:other}");  				}  				break;  				// TODO: might not be correct. Was : Exit For  			}  			sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  			xc += 1;  		}  	}  	if (xc == 1) {  		sb.Append (" {resx:likesthis}");  	} else if (xc > 1) {  		sb.Append (" {resx:likethis}");  	}  } else {  	foreach (XmlNode l in xLikes) {  		int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  		string name = l.Attributes ["un"].Value;  		sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  		xc += 1;  		if (xc == xLikes.Count - 1) {  			sb.Append (" {resx:and} ");  		} else if (xc < xLikes.Count - 1) {  			sb.Append ("' ");  		}  	}  	if (xc == 1) {  		sb.Append (" {resx:likesthis}");  	} else if (xc > 1) {  		sb.Append (" {resx:likethis}");  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (xLikes.Count == 1 && ji.CurrentUserLikes) {  	sb.Append ("{resx:youlikethis}");  } else if (xLikes.Count > 1) {  	if (ji.CurrentUserLikes) {  		sb.Append ("{resx:you}");  		xc += 1;  	}  	foreach (XmlNode l in xLikes) {  		int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  		string name = l.Attributes ["un"].Value;  		if (userId != CurrentUser.UserID) {  			if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  				sb.Append ("' ");  			} else if (xc > 0 & xc < xLikes.Count & xc < 3) {  				sb.Append (" {resx:and} ");  			} else if (xc >= 3) {  				int diff = (xLikes.Count - xc);  				sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  				if (diff > 1) {  					sb.Append (" {resx:others}");  				} else {  					sb.Append (" {resx:other}");  				}  				break;  				// TODO: might not be correct. Was : Exit For  			}  			sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  			xc += 1;  		}  	}  	if (xc == 1) {  		sb.Append (" {resx:likesthis}");  	} else if (xc > 1) {  		sb.Append (" {resx:likethis}");  	}  } else {  	foreach (XmlNode l in xLikes) {  		int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  		string name = l.Attributes ["un"].Value;  		sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  		xc += 1;  		if (xc == xLikes.Count - 1) {  			sb.Append (" {resx:and} ");  		} else if (xc < xLikes.Count - 1) {  			sb.Append ("' ");  		}  	}  	if (xc == 1) {  		sb.Append (" {resx:likesthis}");  	} else if (xc > 1) {  		sb.Append (" {resx:likethis}");  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (xLikes.Count == 1 && ji.CurrentUserLikes) {  	sb.Append ("{resx:youlikethis}");  } else if (xLikes.Count > 1) {  	if (ji.CurrentUserLikes) {  		sb.Append ("{resx:you}");  		xc += 1;  	}  	foreach (XmlNode l in xLikes) {  		int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  		string name = l.Attributes ["un"].Value;  		if (userId != CurrentUser.UserID) {  			if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  				sb.Append ("' ");  			} else if (xc > 0 & xc < xLikes.Count & xc < 3) {  				sb.Append (" {resx:and} ");  			} else if (xc >= 3) {  				int diff = (xLikes.Count - xc);  				sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  				if (diff > 1) {  					sb.Append (" {resx:others}");  				} else {  					sb.Append (" {resx:other}");  				}  				break;  				// TODO: might not be correct. Was : Exit For  			}  			sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  			xc += 1;  		}  	}  	if (xc == 1) {  		sb.Append (" {resx:likesthis}");  	} else if (xc > 1) {  		sb.Append (" {resx:likethis}");  	}  } else {  	foreach (XmlNode l in xLikes) {  		int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  		string name = l.Attributes ["un"].Value;  		sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  		xc += 1;  		if (xc == xLikes.Count - 1) {  			sb.Append (" {resx:and} ");  		} else if (xc < xLikes.Count - 1) {  			sb.Append ("' ");  		}  	}  	if (xc == 1) {  		sb.Append (" {resx:likesthis}");  	} else if (xc > 1) {  		sb.Append (" {resx:likethis}");  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (xLikes.Count > 1) {  	if (ji.CurrentUserLikes) {  		sb.Append ("{resx:you}");  		xc += 1;  	}  	foreach (XmlNode l in xLikes) {  		int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  		string name = l.Attributes ["un"].Value;  		if (userId != CurrentUser.UserID) {  			if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  				sb.Append ("' ");  			} else if (xc > 0 & xc < xLikes.Count & xc < 3) {  				sb.Append (" {resx:and} ");  			} else if (xc >= 3) {  				int diff = (xLikes.Count - xc);  				sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  				if (diff > 1) {  					sb.Append (" {resx:others}");  				} else {  					sb.Append (" {resx:other}");  				}  				break;  				// TODO: might not be correct. Was : Exit For  			}  			sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  			xc += 1;  		}  	}  	if (xc == 1) {  		sb.Append (" {resx:likesthis}");  	} else if (xc > 1) {  		sb.Append (" {resx:likethis}");  	}  } else {  	foreach (XmlNode l in xLikes) {  		int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  		string name = l.Attributes ["un"].Value;  		sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  		xc += 1;  		if (xc == xLikes.Count - 1) {  			sb.Append (" {resx:and} ");  		} else if (xc < xLikes.Count - 1) {  			sb.Append ("' ");  		}  	}  	if (xc == 1) {  		sb.Append (" {resx:likesthis}");  	} else if (xc > 1) {  		sb.Append (" {resx:likethis}");  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (xLikes.Count > 1) {  	if (ji.CurrentUserLikes) {  		sb.Append ("{resx:you}");  		xc += 1;  	}  	foreach (XmlNode l in xLikes) {  		int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  		string name = l.Attributes ["un"].Value;  		if (userId != CurrentUser.UserID) {  			if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  				sb.Append ("' ");  			} else if (xc > 0 & xc < xLikes.Count & xc < 3) {  				sb.Append (" {resx:and} ");  			} else if (xc >= 3) {  				int diff = (xLikes.Count - xc);  				sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  				if (diff > 1) {  					sb.Append (" {resx:others}");  				} else {  					sb.Append (" {resx:other}");  				}  				break;  				// TODO: might not be correct. Was : Exit For  			}  			sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  			xc += 1;  		}  	}  	if (xc == 1) {  		sb.Append (" {resx:likesthis}");  	} else if (xc > 1) {  		sb.Append (" {resx:likethis}");  	}  } else {  	foreach (XmlNode l in xLikes) {  		int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  		string name = l.Attributes ["un"].Value;  		sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  		xc += 1;  		if (xc == xLikes.Count - 1) {  			sb.Append (" {resx:and} ");  		} else if (xc < xLikes.Count - 1) {  			sb.Append ("' ");  		}  	}  	if (xc == 1) {  		sb.Append (" {resx:likesthis}");  	} else if (xc > 1) {  		sb.Append (" {resx:likethis}");  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (xLikes.Count > 1) {  	if (ji.CurrentUserLikes) {  		sb.Append ("{resx:you}");  		xc += 1;  	}  	foreach (XmlNode l in xLikes) {  		int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  		string name = l.Attributes ["un"].Value;  		if (userId != CurrentUser.UserID) {  			if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  				sb.Append ("' ");  			} else if (xc > 0 & xc < xLikes.Count & xc < 3) {  				sb.Append (" {resx:and} ");  			} else if (xc >= 3) {  				int diff = (xLikes.Count - xc);  				sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  				if (diff > 1) {  					sb.Append (" {resx:others}");  				} else {  					sb.Append (" {resx:other}");  				}  				break;  				// TODO: might not be correct. Was : Exit For  			}  			sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  			xc += 1;  		}  	}  	if (xc == 1) {  		sb.Append (" {resx:likesthis}");  	} else if (xc > 1) {  		sb.Append (" {resx:likethis}");  	}  } else {  	foreach (XmlNode l in xLikes) {  		int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  		string name = l.Attributes ["un"].Value;  		sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  		xc += 1;  		if (xc == xLikes.Count - 1) {  			sb.Append (" {resx:and} ");  		} else if (xc < xLikes.Count - 1) {  			sb.Append ("' ");  		}  	}  	if (xc == 1) {  		sb.Append (" {resx:likesthis}");  	} else if (xc > 1) {  		sb.Append (" {resx:likethis}");  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: foreach (XmlNode l in xLikes) {  	int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  	string name = l.Attributes ["un"].Value;  	if (userId != CurrentUser.UserID) {  		if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  			sb.Append ("' ");  		} else if (xc > 0 & xc < xLikes.Count & xc < 3) {  			sb.Append (" {resx:and} ");  		} else if (xc >= 3) {  			int diff = (xLikes.Count - xc);  			sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  			if (diff > 1) {  				sb.Append (" {resx:others}");  			} else {  				sb.Append (" {resx:other}");  			}  			break;  			// TODO: might not be correct. Was : Exit For  		}  		sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  		xc += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: foreach (XmlNode l in xLikes) {  	int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  	string name = l.Attributes ["un"].Value;  	if (userId != CurrentUser.UserID) {  		if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  			sb.Append ("' ");  		} else if (xc > 0 & xc < xLikes.Count & xc < 3) {  			sb.Append (" {resx:and} ");  		} else if (xc >= 3) {  			int diff = (xLikes.Count - xc);  			sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  			if (diff > 1) {  				sb.Append (" {resx:others}");  			} else {  				sb.Append (" {resx:other}");  			}  			break;  			// TODO: might not be correct. Was : Exit For  		}  		sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  		xc += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: foreach (XmlNode l in xLikes) {  	int userId = Convert.ToInt32 (l.Attributes ["uid"].Value);  	string name = l.Attributes ["un"].Value;  	if (userId != CurrentUser.UserID) {  		if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  			sb.Append ("' ");  		} else if (xc > 0 & xc < xLikes.Count & xc < 3) {  			sb.Append (" {resx:and} ");  		} else if (xc >= 3) {  			int diff = (xLikes.Count - xc);  			sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  			if (diff > 1) {  				sb.Append (" {resx:others}");  			} else {  				sb.Append (" {resx:other}");  			}  			break;  			// TODO: might not be correct. Was : Exit For  		}  		sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  		xc += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (userId != CurrentUser.UserID) {  	if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  		sb.Append ("' ");  	} else if (xc > 0 & xc < xLikes.Count & xc < 3) {  		sb.Append (" {resx:and} ");  	} else if (xc >= 3) {  		int diff = (xLikes.Count - xc);  		sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  		if (diff > 1) {  			sb.Append (" {resx:others}");  		} else {  			sb.Append (" {resx:other}");  		}  		break;  		// TODO: might not be correct. Was : Exit For  	}  	sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  	xc += 1;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (userId != CurrentUser.UserID) {  	if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  		sb.Append ("' ");  	} else if (xc > 0 & xc < xLikes.Count & xc < 3) {  		sb.Append (" {resx:and} ");  	} else if (xc >= 3) {  		int diff = (xLikes.Count - xc);  		sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  		if (diff > 1) {  			sb.Append (" {resx:others}");  		} else {  			sb.Append (" {resx:other}");  		}  		break;  		// TODO: might not be correct. Was : Exit For  	}  	sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  	xc += 1;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (userId != CurrentUser.UserID) {  	if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  		sb.Append ("' ");  	} else if (xc > 0 & xc < xLikes.Count & xc < 3) {  		sb.Append (" {resx:and} ");  	} else if (xc >= 3) {  		int diff = (xLikes.Count - xc);  		sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  		if (diff > 1) {  			sb.Append (" {resx:others}");  		} else {  			sb.Append (" {resx:other}");  		}  		break;  		// TODO: might not be correct. Was : Exit For  	}  	sb.AppendFormat ("<span id=\"user-{0}\" class=\"juser\">{1}</span>"' userId' name);  	xc += 1;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  	sb.Append ("' ");  } else if (xc > 0 & xc < xLikes.Count & xc < 3) {  	sb.Append (" {resx:and} ");  } else if (xc >= 3) {  	int diff = (xLikes.Count - xc);  	sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  	if (diff > 1) {  		sb.Append (" {resx:others}");  	} else {  		sb.Append (" {resx:other}");  	}  	break;  	// TODO: might not be correct. Was : Exit For  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  	sb.Append ("' ");  } else if (xc > 0 & xc < xLikes.Count & xc < 3) {  	sb.Append (" {resx:and} ");  } else if (xc >= 3) {  	int diff = (xLikes.Count - xc);  	sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  	if (diff > 1) {  		sb.Append (" {resx:others}");  	} else {  		sb.Append (" {resx:other}");  	}  	break;  	// TODO: might not be correct. Was : Exit For  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (xc < xLikes.Count - 1 && xc > 0 && xc < 3) {  	sb.Append ("' ");  } else if (xc > 0 & xc < xLikes.Count & xc < 3) {  	sb.Append (" {resx:and} ");  } else if (xc >= 3) {  	int diff = (xLikes.Count - xc);  	sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  	if (diff > 1) {  		sb.Append (" {resx:others}");  	} else {  		sb.Append (" {resx:other}");  	}  	break;  	// TODO: might not be correct. Was : Exit For  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (xc > 0 & xc < xLikes.Count & xc < 3) {  	sb.Append (" {resx:and} ");  } else if (xc >= 3) {  	int diff = (xLikes.Count - xc);  	sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  	if (diff > 1) {  		sb.Append (" {resx:others}");  	} else {  		sb.Append (" {resx:other}");  	}  	break;  	// TODO: might not be correct. Was : Exit For  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (xc > 0 & xc < xLikes.Count & xc < 3) {  	sb.Append (" {resx:and} ");  } else if (xc >= 3) {  	int diff = (xLikes.Count - xc);  	sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  	if (diff > 1) {  		sb.Append (" {resx:others}");  	} else {  		sb.Append (" {resx:other}");  	}  	break;  	// TODO: might not be correct. Was : Exit For  }  
Magic Number,DotNetNuke.Modules.Journal.Components,JournalParser,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalParser.cs,GetLikeListHTML,The following statement contains a magic number: if (xc >= 3) {  	int diff = (xLikes.Count - xc);  	sb.Append (" {resx:and} " + (xLikes.Count - xc).ToString (CultureInfo.InvariantCulture));  	if (diff > 1) {  		sb.Append (" {resx:others}");  	} else {  		sb.Append (" {resx:other}");  	}  	break;  	// TODO: might not be correct. Was : Exit For  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (m.Success) {  	link.Title = m.Groups [2].ToString ().Trim ();  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: link.Title = m.Groups [2].ToString ().Trim ();  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sTempDesc = match.Groups [0].Value;  	foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  			link.Description = subM.Groups [9].Value;  		} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  			link.Description = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  			link.Title = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  			sImage = subM.Groups [9].Value;  			ImageInfo img = new ImageInfo ();  			img.URL = sImage;  			link.Images.Add (img);  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sTempDesc = match.Groups [0].Value;  	foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  			link.Description = subM.Groups [9].Value;  		} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  			link.Description = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  			link.Title = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  			sImage = subM.Groups [9].Value;  			ImageInfo img = new ImageInfo ();  			img.URL = sImage;  			link.Images.Add (img);  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sTempDesc = match.Groups [0].Value;  	foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  			link.Description = subM.Groups [9].Value;  		} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  			link.Description = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  			link.Title = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  			sImage = subM.Groups [9].Value;  			ImageInfo img = new ImageInfo ();  			img.URL = sImage;  			link.Images.Add (img);  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sTempDesc = match.Groups [0].Value;  	foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  			link.Description = subM.Groups [9].Value;  		} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  			link.Description = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  			link.Title = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  			sImage = subM.Groups [9].Value;  			ImageInfo img = new ImageInfo ();  			img.URL = sImage;  			link.Images.Add (img);  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sTempDesc = match.Groups [0].Value;  	foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  			link.Description = subM.Groups [9].Value;  		} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  			link.Description = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  			link.Title = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  			sImage = subM.Groups [9].Value;  			ImageInfo img = new ImageInfo ();  			img.URL = sImage;  			link.Images.Add (img);  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sTempDesc = match.Groups [0].Value;  	foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  			link.Description = subM.Groups [9].Value;  		} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  			link.Description = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  			link.Title = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  			sImage = subM.Groups [9].Value;  			ImageInfo img = new ImageInfo ();  			img.URL = sImage;  			link.Images.Add (img);  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sTempDesc = match.Groups [0].Value;  	foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  			link.Description = subM.Groups [9].Value;  		} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  			link.Description = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  			link.Title = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  			sImage = subM.Groups [9].Value;  			ImageInfo img = new ImageInfo ();  			img.URL = sImage;  			link.Images.Add (img);  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sTempDesc = match.Groups [0].Value;  	foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  			link.Description = subM.Groups [9].Value;  		} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  			link.Description = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  			link.Title = subM.Groups [9].Value;  		}  		if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  			sImage = subM.Groups [9].Value;  			ImageInfo img = new ImageInfo ();  			img.URL = sImage;  			link.Images.Add (img);  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  		link.Description = subM.Groups [9].Value;  	} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  		link.Description = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  		link.Title = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  		sImage = subM.Groups [9].Value;  		ImageInfo img = new ImageInfo ();  		img.URL = sImage;  		link.Images.Add (img);  		i += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  		link.Description = subM.Groups [9].Value;  	} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  		link.Description = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  		link.Title = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  		sImage = subM.Groups [9].Value;  		ImageInfo img = new ImageInfo ();  		img.URL = sImage;  		link.Images.Add (img);  		i += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  		link.Description = subM.Groups [9].Value;  	} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  		link.Description = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  		link.Title = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  		sImage = subM.Groups [9].Value;  		ImageInfo img = new ImageInfo ();  		img.URL = sImage;  		link.Images.Add (img);  		i += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  		link.Description = subM.Groups [9].Value;  	} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  		link.Description = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  		link.Title = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  		sImage = subM.Groups [9].Value;  		ImageInfo img = new ImageInfo ();  		img.URL = sImage;  		link.Images.Add (img);  		i += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  		link.Description = subM.Groups [9].Value;  	} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  		link.Description = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  		link.Title = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  		sImage = subM.Groups [9].Value;  		ImageInfo img = new ImageInfo ();  		img.URL = sImage;  		link.Images.Add (img);  		i += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  		link.Description = subM.Groups [9].Value;  	} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  		link.Description = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  		link.Title = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  		sImage = subM.Groups [9].Value;  		ImageInfo img = new ImageInfo ();  		img.URL = sImage;  		link.Images.Add (img);  		i += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  		link.Description = subM.Groups [9].Value;  	} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  		link.Description = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  		link.Title = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  		sImage = subM.Groups [9].Value;  		ImageInfo img = new ImageInfo ();  		img.URL = sImage;  		link.Images.Add (img);  		i += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match subM in MetaSubRegex.Matches (sTempDesc)) {  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  		link.Description = subM.Groups [9].Value;  	} else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  		link.Description = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  		link.Title = subM.Groups [9].Value;  	}  	if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  		sImage = subM.Groups [9].Value;  		ImageInfo img = new ImageInfo ();  		img.URL = sImage;  		link.Images.Add (img);  		i += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  	link.Description = subM.Groups [9].Value;  } else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  	link.Description = subM.Groups [9].Value;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  	link.Description = subM.Groups [9].Value;  } else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  	link.Description = subM.Groups [9].Value;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  	link.Description = subM.Groups [9].Value;  } else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  	link.Description = subM.Groups [9].Value;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (subM.Groups [4].Value.ToUpperInvariant () == "OG:DESCRIPTION") {  	link.Description = subM.Groups [9].Value;  } else if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  	link.Description = subM.Groups [9].Value;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: link.Description = subM.Groups [9].Value;  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  	link.Description = subM.Groups [9].Value;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (subM.Groups [4].Value.ToUpperInvariant () == "DESCRIPTION".ToUpperInvariant ()) {  	link.Description = subM.Groups [9].Value;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: link.Description = subM.Groups [9].Value;  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  	link.Title = subM.Groups [9].Value;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (subM.Groups [4].Value.ToUpperInvariant () == "OG:TITLE") {  	link.Title = subM.Groups [9].Value;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: link.Title = subM.Groups [9].Value;  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  	sImage = subM.Groups [9].Value;  	ImageInfo img = new ImageInfo ();  	img.URL = sImage;  	link.Images.Add (img);  	i += 1;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (subM.Groups [4].Value.ToUpperInvariant () == "OG:IMAGE") {  	sImage = subM.Groups [9].Value;  	ImageInfo img = new ImageInfo ();  	img.URL = sImage;  	link.Images.Add (img);  	i += 1;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: sImage = subM.Groups [9].Value;  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sImg = match.Groups [5].Value;  	if (string.IsNullOrEmpty (sImg)) {  		sImg = match.Groups [8].Value;  	}  	if (!string.IsNullOrEmpty (sImg)) {  		if (!sImg.Contains ("http")) {  			sImg = hostUrl + sImg;  		}  		ImageInfo img = new ImageInfo ();  		img.URL = sImg;  		if (!imgList.Contains (sImg)) {  			Bitmap bmp = Utilities.GetImageFromURL (sImg);  			if ((bmp != null)) {  				if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  					link.Images.Add (img);  					imgList += sImg;  					i += 1;  				}  			}  		}  		if (i == 10) {  			break;  			// TODO: might not be correct. Was : Exit For  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sImg = match.Groups [5].Value;  	if (string.IsNullOrEmpty (sImg)) {  		sImg = match.Groups [8].Value;  	}  	if (!string.IsNullOrEmpty (sImg)) {  		if (!sImg.Contains ("http")) {  			sImg = hostUrl + sImg;  		}  		ImageInfo img = new ImageInfo ();  		img.URL = sImg;  		if (!imgList.Contains (sImg)) {  			Bitmap bmp = Utilities.GetImageFromURL (sImg);  			if ((bmp != null)) {  				if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  					link.Images.Add (img);  					imgList += sImg;  					i += 1;  				}  			}  		}  		if (i == 10) {  			break;  			// TODO: might not be correct. Was : Exit For  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sImg = match.Groups [5].Value;  	if (string.IsNullOrEmpty (sImg)) {  		sImg = match.Groups [8].Value;  	}  	if (!string.IsNullOrEmpty (sImg)) {  		if (!sImg.Contains ("http")) {  			sImg = hostUrl + sImg;  		}  		ImageInfo img = new ImageInfo ();  		img.URL = sImg;  		if (!imgList.Contains (sImg)) {  			Bitmap bmp = Utilities.GetImageFromURL (sImg);  			if ((bmp != null)) {  				if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  					link.Images.Add (img);  					imgList += sImg;  					i += 1;  				}  			}  		}  		if (i == 10) {  			break;  			// TODO: might not be correct. Was : Exit For  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sImg = match.Groups [5].Value;  	if (string.IsNullOrEmpty (sImg)) {  		sImg = match.Groups [8].Value;  	}  	if (!string.IsNullOrEmpty (sImg)) {  		if (!sImg.Contains ("http")) {  			sImg = hostUrl + sImg;  		}  		ImageInfo img = new ImageInfo ();  		img.URL = sImg;  		if (!imgList.Contains (sImg)) {  			Bitmap bmp = Utilities.GetImageFromURL (sImg);  			if ((bmp != null)) {  				if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  					link.Images.Add (img);  					imgList += sImg;  					i += 1;  				}  			}  		}  		if (i == 10) {  			break;  			// TODO: might not be correct. Was : Exit For  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sImg = match.Groups [5].Value;  	if (string.IsNullOrEmpty (sImg)) {  		sImg = match.Groups [8].Value;  	}  	if (!string.IsNullOrEmpty (sImg)) {  		if (!sImg.Contains ("http")) {  			sImg = hostUrl + sImg;  		}  		ImageInfo img = new ImageInfo ();  		img.URL = sImg;  		if (!imgList.Contains (sImg)) {  			Bitmap bmp = Utilities.GetImageFromURL (sImg);  			if ((bmp != null)) {  				if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  					link.Images.Add (img);  					imgList += sImg;  					i += 1;  				}  			}  		}  		if (i == 10) {  			break;  			// TODO: might not be correct. Was : Exit For  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sImg = match.Groups [5].Value;  	if (string.IsNullOrEmpty (sImg)) {  		sImg = match.Groups [8].Value;  	}  	if (!string.IsNullOrEmpty (sImg)) {  		if (!sImg.Contains ("http")) {  			sImg = hostUrl + sImg;  		}  		ImageInfo img = new ImageInfo ();  		img.URL = sImg;  		if (!imgList.Contains (sImg)) {  			Bitmap bmp = Utilities.GetImageFromURL (sImg);  			if ((bmp != null)) {  				if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  					link.Images.Add (img);  					imgList += sImg;  					i += 1;  				}  			}  		}  		if (i == 10) {  			break;  			// TODO: might not be correct. Was : Exit For  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: foreach (Match match in matches) {  	string sImg = match.Groups [5].Value;  	if (string.IsNullOrEmpty (sImg)) {  		sImg = match.Groups [8].Value;  	}  	if (!string.IsNullOrEmpty (sImg)) {  		if (!sImg.Contains ("http")) {  			sImg = hostUrl + sImg;  		}  		ImageInfo img = new ImageInfo ();  		img.URL = sImg;  		if (!imgList.Contains (sImg)) {  			Bitmap bmp = Utilities.GetImageFromURL (sImg);  			if ((bmp != null)) {  				if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  					link.Images.Add (img);  					imgList += sImg;  					i += 1;  				}  			}  		}  		if (i == 10) {  			break;  			// TODO: might not be correct. Was : Exit For  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (string.IsNullOrEmpty (sImg)) {  	sImg = match.Groups [8].Value;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: sImg = match.Groups [8].Value;  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (!string.IsNullOrEmpty (sImg)) {  	if (!sImg.Contains ("http")) {  		sImg = hostUrl + sImg;  	}  	ImageInfo img = new ImageInfo ();  	img.URL = sImg;  	if (!imgList.Contains (sImg)) {  		Bitmap bmp = Utilities.GetImageFromURL (sImg);  		if ((bmp != null)) {  			if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  				link.Images.Add (img);  				imgList += sImg;  				i += 1;  			}  		}  	}  	if (i == 10) {  		break;  		// TODO: might not be correct. Was : Exit For  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (!string.IsNullOrEmpty (sImg)) {  	if (!sImg.Contains ("http")) {  		sImg = hostUrl + sImg;  	}  	ImageInfo img = new ImageInfo ();  	img.URL = sImg;  	if (!imgList.Contains (sImg)) {  		Bitmap bmp = Utilities.GetImageFromURL (sImg);  		if ((bmp != null)) {  			if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  				link.Images.Add (img);  				imgList += sImg;  				i += 1;  			}  		}  	}  	if (i == 10) {  		break;  		// TODO: might not be correct. Was : Exit For  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (!string.IsNullOrEmpty (sImg)) {  	if (!sImg.Contains ("http")) {  		sImg = hostUrl + sImg;  	}  	ImageInfo img = new ImageInfo ();  	img.URL = sImg;  	if (!imgList.Contains (sImg)) {  		Bitmap bmp = Utilities.GetImageFromURL (sImg);  		if ((bmp != null)) {  			if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  				link.Images.Add (img);  				imgList += sImg;  				i += 1;  			}  		}  	}  	if (i == 10) {  		break;  		// TODO: might not be correct. Was : Exit For  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (!string.IsNullOrEmpty (sImg)) {  	if (!sImg.Contains ("http")) {  		sImg = hostUrl + sImg;  	}  	ImageInfo img = new ImageInfo ();  	img.URL = sImg;  	if (!imgList.Contains (sImg)) {  		Bitmap bmp = Utilities.GetImageFromURL (sImg);  		if ((bmp != null)) {  			if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  				link.Images.Add (img);  				imgList += sImg;  				i += 1;  			}  		}  	}  	if (i == 10) {  		break;  		// TODO: might not be correct. Was : Exit For  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (!string.IsNullOrEmpty (sImg)) {  	if (!sImg.Contains ("http")) {  		sImg = hostUrl + sImg;  	}  	ImageInfo img = new ImageInfo ();  	img.URL = sImg;  	if (!imgList.Contains (sImg)) {  		Bitmap bmp = Utilities.GetImageFromURL (sImg);  		if ((bmp != null)) {  			if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  				link.Images.Add (img);  				imgList += sImg;  				i += 1;  			}  		}  	}  	if (i == 10) {  		break;  		// TODO: might not be correct. Was : Exit For  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (!imgList.Contains (sImg)) {  	Bitmap bmp = Utilities.GetImageFromURL (sImg);  	if ((bmp != null)) {  		if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  			link.Images.Add (img);  			imgList += sImg;  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (!imgList.Contains (sImg)) {  	Bitmap bmp = Utilities.GetImageFromURL (sImg);  	if ((bmp != null)) {  		if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  			link.Images.Add (img);  			imgList += sImg;  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (!imgList.Contains (sImg)) {  	Bitmap bmp = Utilities.GetImageFromURL (sImg);  	if ((bmp != null)) {  		if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  			link.Images.Add (img);  			imgList += sImg;  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (!imgList.Contains (sImg)) {  	Bitmap bmp = Utilities.GetImageFromURL (sImg);  	if ((bmp != null)) {  		if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  			link.Images.Add (img);  			imgList += sImg;  			i += 1;  		}  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if ((bmp != null)) {  	if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  		link.Images.Add (img);  		imgList += sImg;  		i += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if ((bmp != null)) {  	if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  		link.Images.Add (img);  		imgList += sImg;  		i += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if ((bmp != null)) {  	if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  		link.Images.Add (img);  		imgList += sImg;  		i += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if ((bmp != null)) {  	if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  		link.Images.Add (img);  		imgList += sImg;  		i += 1;  	}  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  	link.Images.Add (img);  	imgList += sImg;  	i += 1;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  	link.Images.Add (img);  	imgList += sImg;  	i += 1;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  	link.Images.Add (img);  	imgList += sImg;  	i += 1;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (bmp.Height > 25 & bmp.Height < 500 & bmp.Width > 25 & bmp.Width < 500) {  	link.Images.Add (img);  	imgList += sImg;  	i += 1;  }  
Magic Number,DotNetNuke.Modules.Journal.Components,Utilities,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\Utilities.cs,GetLinkData,The following statement contains a magic number: if (i == 10) {  	break;  	// TODO: might not be correct. Was : Exit For  }  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,The following statement contains a magic number: try {  	var journalTypeId = 1;  	switch (postData.JournalType) {  	case "link":  		journalTypeId = 2;  		break;  	case "photo":  		journalTypeId = 3;  		break;  	case "file":  		journalTypeId = 4;  		break;  	}  	if (postData.ProfileId == -1) {  		postData.ProfileId = UserInfo.UserID;  	}  	if (postData.GroupId > 0) {  		postData.ProfileId = -1;  		RoleInfo roleInfo = RoleController.Instance.GetRoleById (ActiveModule.OwnerPortalID' postData.GroupId);  		if (roleInfo != null && !roleInfo.IsPublic) {  			postData.SecuritySet = "R";  		}  	}  	var ji = new JournalItem {  		JournalId = -1'  		JournalTypeId = journalTypeId'  		PortalId = ActiveModule.OwnerPortalID'  		UserId = UserInfo.UserID'  		SocialGroupId = postData.GroupId'  		ProfileId = postData.ProfileId'  		Summary = postData.Text ?? ""'  		SecuritySet = postData.SecuritySet  	};  	ji.Title = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (ji.Title));  	ji.Summary = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (ji.Summary));  	var ps = new PortalSecurity ();  	ji.Title = ps.InputFilter (ji.Title' PortalSecurity.FilterFlag.NoScripting);  	ji.Title = Utilities.RemoveHTML (ji.Title);  	ji.Title = ps.InputFilter (ji.Title' PortalSecurity.FilterFlag.NoMarkup);  	ji.Summary = ps.InputFilter (ji.Summary' PortalSecurity.FilterFlag.NoScripting);  	ji.Summary = Utilities.RemoveHTML (ji.Summary);  	ji.Summary = ps.InputFilter (ji.Summary' PortalSecurity.FilterFlag.NoMarkup);  	//parse the mentions context in post data  	var originalSummary = ji.Summary;  	IDictionary<string' UserInfo> mentionedUsers = new Dictionary<string' UserInfo> ();  	ji.Summary = ParseMentions (ji.Summary' postData.Mentions' ref mentionedUsers);  	if (ji.Summary.Length > 2000) {  		ji.Body = ji.Summary;  		ji.Summary = null;  	}  	if (!string.IsNullOrEmpty (postData.ItemData)) {  		ji.ItemData = postData.ItemData.FromJson<ItemData> ();  		var originalImageUrl = ji.ItemData.ImageUrl;  		if (!IsImageFile (ji.ItemData.ImageUrl))  			ji.ItemData.ImageUrl = string.Empty;  		ji.ItemData.Description = HttpUtility.UrlDecode (ji.ItemData.Description);  		if (!string.IsNullOrEmpty (ji.ItemData.Url) && ji.ItemData.Url.StartsWith ("fileid=")) {  			var fileId = Convert.ToInt32 (ji.ItemData.Url.Replace ("fileid="' string.Empty).Trim ());  			var file = FileManager.Instance.GetFile (fileId);  			ji.ItemData.Title = file.FileName;  			ji.ItemData.Url = Globals.LinkClick (ji.ItemData.Url' Null.NullInteger' Null.NullInteger);  			if (string.IsNullOrEmpty (ji.ItemData.ImageUrl) && originalImageUrl.ToLower ().StartsWith ("/linkclick.aspx?") && AcceptedFileExtensions.Contains (file.Extension.ToLower ())) {  				ji.ItemData.ImageUrl = originalImageUrl;  			}  		}  	}  	JournalController.Instance.SaveJournalItem (ji' ActiveModule);  	SendMentionNotifications (mentionedUsers' ji' originalSummary);  	return Request.CreateResponse (HttpStatusCode.OK' ji);  } catch (Exception exc) {  	Logger.Error (exc);  	return Request.CreateErrorResponse (HttpStatusCode.InternalServerError' exc);  }  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,The following statement contains a magic number: try {  	var journalTypeId = 1;  	switch (postData.JournalType) {  	case "link":  		journalTypeId = 2;  		break;  	case "photo":  		journalTypeId = 3;  		break;  	case "file":  		journalTypeId = 4;  		break;  	}  	if (postData.ProfileId == -1) {  		postData.ProfileId = UserInfo.UserID;  	}  	if (postData.GroupId > 0) {  		postData.ProfileId = -1;  		RoleInfo roleInfo = RoleController.Instance.GetRoleById (ActiveModule.OwnerPortalID' postData.GroupId);  		if (roleInfo != null && !roleInfo.IsPublic) {  			postData.SecuritySet = "R";  		}  	}  	var ji = new JournalItem {  		JournalId = -1'  		JournalTypeId = journalTypeId'  		PortalId = ActiveModule.OwnerPortalID'  		UserId = UserInfo.UserID'  		SocialGroupId = postData.GroupId'  		ProfileId = postData.ProfileId'  		Summary = postData.Text ?? ""'  		SecuritySet = postData.SecuritySet  	};  	ji.Title = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (ji.Title));  	ji.Summary = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (ji.Summary));  	var ps = new PortalSecurity ();  	ji.Title = ps.InputFilter (ji.Title' PortalSecurity.FilterFlag.NoScripting);  	ji.Title = Utilities.RemoveHTML (ji.Title);  	ji.Title = ps.InputFilter (ji.Title' PortalSecurity.FilterFlag.NoMarkup);  	ji.Summary = ps.InputFilter (ji.Summary' PortalSecurity.FilterFlag.NoScripting);  	ji.Summary = Utilities.RemoveHTML (ji.Summary);  	ji.Summary = ps.InputFilter (ji.Summary' PortalSecurity.FilterFlag.NoMarkup);  	//parse the mentions context in post data  	var originalSummary = ji.Summary;  	IDictionary<string' UserInfo> mentionedUsers = new Dictionary<string' UserInfo> ();  	ji.Summary = ParseMentions (ji.Summary' postData.Mentions' ref mentionedUsers);  	if (ji.Summary.Length > 2000) {  		ji.Body = ji.Summary;  		ji.Summary = null;  	}  	if (!string.IsNullOrEmpty (postData.ItemData)) {  		ji.ItemData = postData.ItemData.FromJson<ItemData> ();  		var originalImageUrl = ji.ItemData.ImageUrl;  		if (!IsImageFile (ji.ItemData.ImageUrl))  			ji.ItemData.ImageUrl = string.Empty;  		ji.ItemData.Description = HttpUtility.UrlDecode (ji.ItemData.Description);  		if (!string.IsNullOrEmpty (ji.ItemData.Url) && ji.ItemData.Url.StartsWith ("fileid=")) {  			var fileId = Convert.ToInt32 (ji.ItemData.Url.Replace ("fileid="' string.Empty).Trim ());  			var file = FileManager.Instance.GetFile (fileId);  			ji.ItemData.Title = file.FileName;  			ji.ItemData.Url = Globals.LinkClick (ji.ItemData.Url' Null.NullInteger' Null.NullInteger);  			if (string.IsNullOrEmpty (ji.ItemData.ImageUrl) && originalImageUrl.ToLower ().StartsWith ("/linkclick.aspx?") && AcceptedFileExtensions.Contains (file.Extension.ToLower ())) {  				ji.ItemData.ImageUrl = originalImageUrl;  			}  		}  	}  	JournalController.Instance.SaveJournalItem (ji' ActiveModule);  	SendMentionNotifications (mentionedUsers' ji' originalSummary);  	return Request.CreateResponse (HttpStatusCode.OK' ji);  } catch (Exception exc) {  	Logger.Error (exc);  	return Request.CreateErrorResponse (HttpStatusCode.InternalServerError' exc);  }  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,The following statement contains a magic number: try {  	var journalTypeId = 1;  	switch (postData.JournalType) {  	case "link":  		journalTypeId = 2;  		break;  	case "photo":  		journalTypeId = 3;  		break;  	case "file":  		journalTypeId = 4;  		break;  	}  	if (postData.ProfileId == -1) {  		postData.ProfileId = UserInfo.UserID;  	}  	if (postData.GroupId > 0) {  		postData.ProfileId = -1;  		RoleInfo roleInfo = RoleController.Instance.GetRoleById (ActiveModule.OwnerPortalID' postData.GroupId);  		if (roleInfo != null && !roleInfo.IsPublic) {  			postData.SecuritySet = "R";  		}  	}  	var ji = new JournalItem {  		JournalId = -1'  		JournalTypeId = journalTypeId'  		PortalId = ActiveModule.OwnerPortalID'  		UserId = UserInfo.UserID'  		SocialGroupId = postData.GroupId'  		ProfileId = postData.ProfileId'  		Summary = postData.Text ?? ""'  		SecuritySet = postData.SecuritySet  	};  	ji.Title = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (ji.Title));  	ji.Summary = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (ji.Summary));  	var ps = new PortalSecurity ();  	ji.Title = ps.InputFilter (ji.Title' PortalSecurity.FilterFlag.NoScripting);  	ji.Title = Utilities.RemoveHTML (ji.Title);  	ji.Title = ps.InputFilter (ji.Title' PortalSecurity.FilterFlag.NoMarkup);  	ji.Summary = ps.InputFilter (ji.Summary' PortalSecurity.FilterFlag.NoScripting);  	ji.Summary = Utilities.RemoveHTML (ji.Summary);  	ji.Summary = ps.InputFilter (ji.Summary' PortalSecurity.FilterFlag.NoMarkup);  	//parse the mentions context in post data  	var originalSummary = ji.Summary;  	IDictionary<string' UserInfo> mentionedUsers = new Dictionary<string' UserInfo> ();  	ji.Summary = ParseMentions (ji.Summary' postData.Mentions' ref mentionedUsers);  	if (ji.Summary.Length > 2000) {  		ji.Body = ji.Summary;  		ji.Summary = null;  	}  	if (!string.IsNullOrEmpty (postData.ItemData)) {  		ji.ItemData = postData.ItemData.FromJson<ItemData> ();  		var originalImageUrl = ji.ItemData.ImageUrl;  		if (!IsImageFile (ji.ItemData.ImageUrl))  			ji.ItemData.ImageUrl = string.Empty;  		ji.ItemData.Description = HttpUtility.UrlDecode (ji.ItemData.Description);  		if (!string.IsNullOrEmpty (ji.ItemData.Url) && ji.ItemData.Url.StartsWith ("fileid=")) {  			var fileId = Convert.ToInt32 (ji.ItemData.Url.Replace ("fileid="' string.Empty).Trim ());  			var file = FileManager.Instance.GetFile (fileId);  			ji.ItemData.Title = file.FileName;  			ji.ItemData.Url = Globals.LinkClick (ji.ItemData.Url' Null.NullInteger' Null.NullInteger);  			if (string.IsNullOrEmpty (ji.ItemData.ImageUrl) && originalImageUrl.ToLower ().StartsWith ("/linkclick.aspx?") && AcceptedFileExtensions.Contains (file.Extension.ToLower ())) {  				ji.ItemData.ImageUrl = originalImageUrl;  			}  		}  	}  	JournalController.Instance.SaveJournalItem (ji' ActiveModule);  	SendMentionNotifications (mentionedUsers' ji' originalSummary);  	return Request.CreateResponse (HttpStatusCode.OK' ji);  } catch (Exception exc) {  	Logger.Error (exc);  	return Request.CreateErrorResponse (HttpStatusCode.InternalServerError' exc);  }  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,The following statement contains a magic number: try {  	var journalTypeId = 1;  	switch (postData.JournalType) {  	case "link":  		journalTypeId = 2;  		break;  	case "photo":  		journalTypeId = 3;  		break;  	case "file":  		journalTypeId = 4;  		break;  	}  	if (postData.ProfileId == -1) {  		postData.ProfileId = UserInfo.UserID;  	}  	if (postData.GroupId > 0) {  		postData.ProfileId = -1;  		RoleInfo roleInfo = RoleController.Instance.GetRoleById (ActiveModule.OwnerPortalID' postData.GroupId);  		if (roleInfo != null && !roleInfo.IsPublic) {  			postData.SecuritySet = "R";  		}  	}  	var ji = new JournalItem {  		JournalId = -1'  		JournalTypeId = journalTypeId'  		PortalId = ActiveModule.OwnerPortalID'  		UserId = UserInfo.UserID'  		SocialGroupId = postData.GroupId'  		ProfileId = postData.ProfileId'  		Summary = postData.Text ?? ""'  		SecuritySet = postData.SecuritySet  	};  	ji.Title = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (ji.Title));  	ji.Summary = HttpUtility.HtmlDecode (HttpUtility.UrlDecode (ji.Summary));  	var ps = new PortalSecurity ();  	ji.Title = ps.InputFilter (ji.Title' PortalSecurity.FilterFlag.NoScripting);  	ji.Title = Utilities.RemoveHTML (ji.Title);  	ji.Title = ps.InputFilter (ji.Title' PortalSecurity.FilterFlag.NoMarkup);  	ji.Summary = ps.InputFilter (ji.Summary' PortalSecurity.FilterFlag.NoScripting);  	ji.Summary = Utilities.RemoveHTML (ji.Summary);  	ji.Summary = ps.InputFilter (ji.Summary' PortalSecurity.FilterFlag.NoMarkup);  	//parse the mentions context in post data  	var originalSummary = ji.Summary;  	IDictionary<string' UserInfo> mentionedUsers = new Dictionary<string' UserInfo> ();  	ji.Summary = ParseMentions (ji.Summary' postData.Mentions' ref mentionedUsers);  	if (ji.Summary.Length > 2000) {  		ji.Body = ji.Summary;  		ji.Summary = null;  	}  	if (!string.IsNullOrEmpty (postData.ItemData)) {  		ji.ItemData = postData.ItemData.FromJson<ItemData> ();  		var originalImageUrl = ji.ItemData.ImageUrl;  		if (!IsImageFile (ji.ItemData.ImageUrl))  			ji.ItemData.ImageUrl = string.Empty;  		ji.ItemData.Description = HttpUtility.UrlDecode (ji.ItemData.Description);  		if (!string.IsNullOrEmpty (ji.ItemData.Url) && ji.ItemData.Url.StartsWith ("fileid=")) {  			var fileId = Convert.ToInt32 (ji.ItemData.Url.Replace ("fileid="' string.Empty).Trim ());  			var file = FileManager.Instance.GetFile (fileId);  			ji.ItemData.Title = file.FileName;  			ji.ItemData.Url = Globals.LinkClick (ji.ItemData.Url' Null.NullInteger' Null.NullInteger);  			if (string.IsNullOrEmpty (ji.ItemData.ImageUrl) && originalImageUrl.ToLower ().StartsWith ("/linkclick.aspx?") && AcceptedFileExtensions.Contains (file.Extension.ToLower ())) {  				ji.ItemData.ImageUrl = originalImageUrl;  			}  		}  	}  	JournalController.Instance.SaveJournalItem (ji' ActiveModule);  	SendMentionNotifications (mentionedUsers' ji' originalSummary);  	return Request.CreateResponse (HttpStatusCode.OK' ji);  } catch (Exception exc) {  	Logger.Error (exc);  	return Request.CreateErrorResponse (HttpStatusCode.InternalServerError' exc);  }  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,The following statement contains a magic number: switch (postData.JournalType) {  case "link":  	journalTypeId = 2;  	break;  case "photo":  	journalTypeId = 3;  	break;  case "file":  	journalTypeId = 4;  	break;  }  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,The following statement contains a magic number: switch (postData.JournalType) {  case "link":  	journalTypeId = 2;  	break;  case "photo":  	journalTypeId = 3;  	break;  case "file":  	journalTypeId = 4;  	break;  }  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,The following statement contains a magic number: switch (postData.JournalType) {  case "link":  	journalTypeId = 2;  	break;  case "photo":  	journalTypeId = 3;  	break;  case "file":  	journalTypeId = 4;  	break;  }  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,The following statement contains a magic number: journalTypeId = 2;  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,The following statement contains a magic number: journalTypeId = 3;  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,The following statement contains a magic number: journalTypeId = 4;  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,The following statement contains a magic number: if (ji.Summary.Length > 2000) {  	ji.Body = ji.Summary;  	ji.Summary = null;  }  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,GetListForProfile,The following statement contains a magic number: try {  	var jp = new JournalParser (PortalSettings' ActiveModule.ModuleID' postData.ProfileId' postData.GroupId' UserInfo);  	return Request.CreateResponse (HttpStatusCode.OK' jp.GetList (postData.RowIndex' postData.MaxRows)' "text/html");  } catch (Exception exc) {  	Logger.Error (exc);  	throw new HttpException (500' exc.Message);  }  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,GetListForProfile,The following statement contains a magic number: throw new HttpException (500' exc.Message);  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,GetSuggestions,The following statement contains a magic number: try {  	var findedUsers = new List<SuggestDTO> ();  	var relations = RelationshipController.Instance.GetUserRelationships (UserInfo);  	foreach (var ur in relations) {  		var targetUserId = ur.UserId == UserInfo.UserID ? ur.RelatedUserId : ur.UserId;  		var targetUser = UserController.GetUserById (PortalSettings.PortalId' targetUserId);  		var relationship = RelationshipController.Instance.GetRelationship (ur.RelationshipId);  		if (ur.Status == RelationshipStatus.Accepted && targetUser != null && ((relationship.RelationshipTypeId == (int)DefaultRelationshipTypes.Followers && ur.RelatedUserId == UserInfo.UserID) || relationship.RelationshipTypeId == (int)DefaultRelationshipTypes.Friends) && (targetUser.DisplayName.ToLowerInvariant ().Contains (keyword.ToLowerInvariant ()) || targetUser.DisplayName.ToLowerInvariant ().Contains (keyword.Replace ("-"' " ").ToLowerInvariant ())) && findedUsers.All (s => s.userId != targetUser.UserID)) {  			findedUsers.Add (new SuggestDTO {  				displayName = targetUser.DisplayName.Replace (" "' "-")'  				userId = targetUser.UserID'  				avatar = targetUser.Profile.PhotoURL'  				key = keyword  			});  		}  	}  	return Request.CreateResponse (HttpStatusCode.OK' findedUsers.Cast<object> ().Take (5));  } catch (Exception exc) {  	Logger.Error (exc);  	return Request.CreateErrorResponse (HttpStatusCode.InternalServerError' exc);  }  
Magic Number,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,GetSuggestions,The following statement contains a magic number: return Request.CreateResponse (HttpStatusCode.OK' findedUsers.Cast<object> ().Take (5));  
Missing Default,DotNetNuke.Modules.Journal.Components,JournalControl,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\Components\JournalControl.cs,GetProperty,The following switch statement is missing a default case: switch (propertyName) {  case "commentlink":  	return CommentLink;  case "likelink":  	return LikeLink;  case "likelist":  	return LikeList;  case "commentarea":  	return CommentArea;  case "authornamelink":  	return AuthorNameLink;  }  
Missing Default,DotNetNuke.Modules.Journal,ServicesController,F:\newReposMay17\dnnsoftware_Dnn.Platform\DNN Platform\Modules\Journal\ServicesController.cs,Create,The following switch statement is missing a default case: switch (postData.JournalType) {  case "link":  	journalTypeId = 2;  	break;  case "photo":  	journalTypeId = 3;  	break;  case "file":  	journalTypeId = 4;  	break;  }  
