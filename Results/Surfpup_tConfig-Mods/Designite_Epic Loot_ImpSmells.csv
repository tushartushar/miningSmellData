Implementation smell,Namespace,Class,File,Method,Description
Long Method,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The method has 447 lines of code.
Complex Method,Epic_Loot,GPrefix,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\GPrefix.cs,Roll,Cyclomatic complexity of the method is 24
Long Parameter List,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetSendIntercept,The method has 12 parameters.
Long Parameter List,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetReceiveIntercept,The method has 5 parameters.
Long Parameter List,Epic_Loot,NPC_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\NPC Affixes.cs,DefineNPCAffixes,The method has 12 parameters.
Long Parameter List,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The method has 169 parameters.
Long Parameter List,Epic_Loot,DPrefix,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\DPrefix.cs,AddDel,The method has 5 parameters.
Long Parameter List,Epic_Loot,DPrefix,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\DPrefix.cs,AddDel,The method has 5 parameters.
Long Statement,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetReceiveIntercept,The length of the statement  "			//Console.WriteLine("NPC Index " + npcIndex + "' size=" + size + "' index=" + num + "' start=" + start + "' length=" + length); " is 127.
Long Statement,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The length of the statement  "	Prefix.Requirement armor = (Item item) => (item.accessory || item.bodySlot != -1 || item.legSlot != -1 || item.headSlot != -1); " is 127.
Long Statement,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The length of the statement  "		new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)' " is 121.
Long Statement,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The length of the statement  "			PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  { " is 128.
Long Statement,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The length of the statement  "				int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner); " is 132.
Long Statement,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The length of the statement  "		/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; })." is 164.
Long Statement,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The length of the statement  "            AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'" is 412.
Long Statement,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The length of the statement  "			return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  { " is 133.
Long Statement,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The length of the statement  "                        i.color = new Color(ModGeneric.colors[index].R' ModGeneric.colors[index].G' ModGeneric.colors[index].B' ModGeneric.colors[index].A);" is 132.
Long Statement,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The length of the statement  "                    }; }' (int index) => { return "The item appears "+ModGeneric.colorNames[index] + "("+index+")"; }' 0' ModGeneric.colors.Count - 1);" is 131.
Long Statement,Epic_Loot,ModGeneric,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Generic.cs,OnLoad,The length of the statement  "	var props = typeof(Color).GetProperties (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static); " is 120.
Long Statement,Epic_Loot,Global_NPC,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\NPC\NPC.cs,Initialize,The length of the statement  "	//NetMessage.SendModData(ModWorld.modIndex' ModWorld.SYNC_AFFIXES' -1' -1' (byte)playerID' (byte)enemyID); //need to send player ID ... " is 135.
Long Statement,Epic_Loot,Global_NPC,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\NPC\NPC.cs,NPCLoot,The length of the statement  "		if (item.damage <= (int)(npc.damage / 2f) && item.defense <= (int)(npc.defense / 2f) && item.maxStack == 1 && item.accessory == false && item.pick == 0 && item.hammer == 0 && item.axe == 0) { " is 191.
Complex Conditional,Epic_Loot,Global_NPC,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\NPC\NPC.cs,NPCLoot,The conditional expression  "item.damage <= (int)(npc.damage / 2f) && item.defense <= (int)(npc.defense / 2f) && item.maxStack == 1 && item.accessory == false && item.pick == 0 && item.hammer == 0 && item.axe == 0"  is complex.
Empty Catch Block,Epic_Loot,Global_Item,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Item\Item.cs,AffixName,The method has an empty catch block.
Magic Number,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetSendIntercept,The following statement contains a magic number: if (msgType == 23)//NPC update being sent   {  	//We'll send affix data over as well  	int npcIndex = number;  	MemoryStream stream = new MemoryStream ();  	BinaryWriter writer = new BinaryWriter (stream);  	Main.npc [npcIndex].RunMethod ("Save"' writer);  	num2 += stream.ToArray ().Length;  	//Console.WriteLine("Saved affixes for " + npcIndex + "' size=" + stream.ToArray().Length+"' index="+(num3+4));  	//Sending the size of the extra data  	byte[] bytes = BitConverter.GetBytes (stream.ToArray ().Length);  	Buffer.BlockCopy (bytes' 0' NetMessage.buffer [num].writeBuffer' num3' 4);  	num3 += 4;  	num2 += 4;  	if (stream.ToArray ().Length > 0) {  		Buffer.BlockCopy (stream.ToArray ()' 0' NetMessage.buffer [num].writeBuffer' num3' stream.ToArray ().Length);  		num3 += stream.ToArray ().Length;  	}  }  
Magic Number,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetSendIntercept,The following statement contains a magic number: if (msgType == 23)//NPC update being sent   {  	//We'll send affix data over as well  	int npcIndex = number;  	MemoryStream stream = new MemoryStream ();  	BinaryWriter writer = new BinaryWriter (stream);  	Main.npc [npcIndex].RunMethod ("Save"' writer);  	num2 += stream.ToArray ().Length;  	//Console.WriteLine("Saved affixes for " + npcIndex + "' size=" + stream.ToArray().Length+"' index="+(num3+4));  	//Sending the size of the extra data  	byte[] bytes = BitConverter.GetBytes (stream.ToArray ().Length);  	Buffer.BlockCopy (bytes' 0' NetMessage.buffer [num].writeBuffer' num3' 4);  	num3 += 4;  	num2 += 4;  	if (stream.ToArray ().Length > 0) {  		Buffer.BlockCopy (stream.ToArray ()' 0' NetMessage.buffer [num].writeBuffer' num3' stream.ToArray ().Length);  		num3 += stream.ToArray ().Length;  	}  }  
Magic Number,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetSendIntercept,The following statement contains a magic number: if (msgType == 23)//NPC update being sent   {  	//We'll send affix data over as well  	int npcIndex = number;  	MemoryStream stream = new MemoryStream ();  	BinaryWriter writer = new BinaryWriter (stream);  	Main.npc [npcIndex].RunMethod ("Save"' writer);  	num2 += stream.ToArray ().Length;  	//Console.WriteLine("Saved affixes for " + npcIndex + "' size=" + stream.ToArray().Length+"' index="+(num3+4));  	//Sending the size of the extra data  	byte[] bytes = BitConverter.GetBytes (stream.ToArray ().Length);  	Buffer.BlockCopy (bytes' 0' NetMessage.buffer [num].writeBuffer' num3' 4);  	num3 += 4;  	num2 += 4;  	if (stream.ToArray ().Length > 0) {  		Buffer.BlockCopy (stream.ToArray ()' 0' NetMessage.buffer [num].writeBuffer' num3' stream.ToArray ().Length);  		num3 += stream.ToArray ().Length;  	}  }  
Magic Number,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetSendIntercept,The following statement contains a magic number: if (msgType == 23)//NPC update being sent   {  	//We'll send affix data over as well  	int npcIndex = number;  	MemoryStream stream = new MemoryStream ();  	BinaryWriter writer = new BinaryWriter (stream);  	Main.npc [npcIndex].RunMethod ("Save"' writer);  	num2 += stream.ToArray ().Length;  	//Console.WriteLine("Saved affixes for " + npcIndex + "' size=" + stream.ToArray().Length+"' index="+(num3+4));  	//Sending the size of the extra data  	byte[] bytes = BitConverter.GetBytes (stream.ToArray ().Length);  	Buffer.BlockCopy (bytes' 0' NetMessage.buffer [num].writeBuffer' num3' 4);  	num3 += 4;  	num2 += 4;  	if (stream.ToArray ().Length > 0) {  		Buffer.BlockCopy (stream.ToArray ()' 0' NetMessage.buffer [num].writeBuffer' num3' stream.ToArray ().Length);  		num3 += stream.ToArray ().Length;  	}  }  
Magic Number,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetSendIntercept,The following statement contains a magic number: Buffer.BlockCopy (bytes' 0' NetMessage.buffer [num].writeBuffer' num3' 4);  
Magic Number,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetSendIntercept,The following statement contains a magic number: num3 += 4;  
Magic Number,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetSendIntercept,The following statement contains a magic number: num2 += 4;  
Magic Number,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetReceiveIntercept,The following statement contains a magic number: if (msgType == 23 && Main.netMode == 1) {  	int npcIndex = (int)BitConverter.ToInt16 (msgBuffer.readBuffer' start + 1);  	if (num < start + length) {  		int size = BitConverter.ToInt32 (msgBuffer.readBuffer' num);  		num += 4;  		//Console.WriteLine("NPC Index " + npcIndex + "' size=" + size + "' index=" + num + "' start=" + start + "' length=" + length);  		if (size > 0) {  			MemoryStream readStream = new MemoryStream (msgBuffer.readBuffer' num' size);  			BinaryReader reader = new BinaryReader (readStream);  			Main.npc [npcIndex].RunMethod ("Load"' reader' -1);  			num += size;  		}  	}  	//else Console.WriteLine("Invalid index: index=" + num + "' start=" + start + "' length=" + length);  }  
Magic Number,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetReceiveIntercept,The following statement contains a magic number: if (msgType == 23 && Main.netMode == 1) {  	int npcIndex = (int)BitConverter.ToInt16 (msgBuffer.readBuffer' start + 1);  	if (num < start + length) {  		int size = BitConverter.ToInt32 (msgBuffer.readBuffer' num);  		num += 4;  		//Console.WriteLine("NPC Index " + npcIndex + "' size=" + size + "' index=" + num + "' start=" + start + "' length=" + length);  		if (size > 0) {  			MemoryStream readStream = new MemoryStream (msgBuffer.readBuffer' num' size);  			BinaryReader reader = new BinaryReader (readStream);  			Main.npc [npcIndex].RunMethod ("Load"' reader' -1);  			num += size;  		}  	}  	//else Console.WriteLine("Invalid index: index=" + num + "' start=" + start + "' length=" + length);  }  
Magic Number,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetReceiveIntercept,The following statement contains a magic number: if (num < start + length) {  	int size = BitConverter.ToInt32 (msgBuffer.readBuffer' num);  	num += 4;  	//Console.WriteLine("NPC Index " + npcIndex + "' size=" + size + "' index=" + num + "' start=" + start + "' length=" + length);  	if (size > 0) {  		MemoryStream readStream = new MemoryStream (msgBuffer.readBuffer' num' size);  		BinaryReader reader = new BinaryReader (readStream);  		Main.npc [npcIndex].RunMethod ("Load"' reader' -1);  		num += size;  	}  }  
Magic Number,Epic_Loot,ModWorld,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\World.cs,NetReceiveIntercept,The following statement contains a magic number: num += 4;  
Magic Number,Epic_Loot,Global_Item,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Item\Item.cs,OverridePrefix,The following statement contains a magic number: if (pre == -3) {  	//Return whether there are valid prefixes  	ArrayList valid = new ArrayList ();  	for (int i = 0; i < ModGeneric.prefixes.Count; i++) {  		if (ModGeneric.prefixes [i].Check (item))  			valid.Add (i);  	}  	return valid.Count > 0;  	//ability to reforge  	//return true;  }  
Magic Number,Epic_Loot,Global_Item,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Item\Item.cs,OverridePrefix,The following statement contains a magic number: if (pre == -2) {  	//Reset item stats to clear prefixes  	Item i;  	if (this.item.name != null && Config.itemDefs.byName.TryGetValue (this.item.name' out i)) {  		Config.CopyAttributes (this.item' i);  	}  }  
Magic Number,Epic_Loot,Global_Item,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Item\Item.cs,InitAffixes,The following statement contains a magic number: if (totalRand > 0f) {  	combined.AddTip ("Rarity: " + avgRand);  	avgRand = avgRand / totalRand;  	int rare = Rand.SkewedRand (0' 6' avgRand);  	item.rare += rare;  }  
Magic Number,Epic_Loot,Global_Item,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Item\Item.cs,InitAffixes,The following statement contains a magic number: if (item.rare > 6) {  	item.rare = 6;  }  
Magic Number,Epic_Loot,Global_Item,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Item\Item.cs,InitAffixes,The following statement contains a magic number: if (item.rare > 6) {  	item.rare = 6;  }  
Magic Number,Epic_Loot,Global_Item,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Item\Item.cs,InitAffixes,The following statement contains a magic number: item.rare = 6;  
Magic Number,Epic_Loot,NPC_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\NPC Affixes.cs,DefineNPCAffixes,The following statement contains a magic number: ModGeneric.npcAffixes.AddRange (new NPCAffix[] {  	new NPCAffix ("Guarding").AddDel ("Initialize"' (int val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.defense += val;  		};  		return d;  	}' 1' 10)'  	new NPCAffix ("Stubborn").AddDel ("Initialize"' (float val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.lifeMax = (int)((float)npc.lifeMax * val);  			npc.life = npc.lifeMax;  		};  		return d;  	}' 1.05f' 1.2f)'  	new NPCAffix ("Menacing").AddAffix ("Angry"' "Menacing").AddDel ("Initialize"' (float val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.defDamage = (int)((float)npc.defDamage * val);  			npc.damage = npc.defDamage;  		};  		return d;  	}' 1.05f' 1.2f)'  	new NPCAffix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").AddDel ("Initialize"' (float val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.scale += val;  			if (namedNPCs.Contains (npc.name)) {  				//REQUIRED check if you want the hitboxes to be correct!  				npc.width = (int)((float)npc.width * (1f + val));  				npc.height = (int)((float)npc.height * (1f + val));  			}  		};  		return d;  	}' 0.10f' 0.5f)'  	new NPCAffix ("Quick").AddDel ("PostAI"' (int val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.RunMethod ("MultipleAI"' val);  		};  		return d;  	}' 50' 100)'  	new NPCAffix ("Rejuvenating").AddDel ("UpdateNPC"' (int val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.lifeRegen += val;  		};  		return d;  	}' 1' 20)'  //Disabled for lag/excessive summoning purposes  /*new NPCAffix("Summoner").AddDel("PostAI"' (int val) => { Initialize_Del d = (NPC npc) => {  				if((Main.netMode == 2 || Main.netMode == 0) && ModGeneric.rand.Next(50000) < val) { 					NPC.NewNPC((int) npc.position.X' (int) npc.position.Y' npc.type); 				} 			}; return d; }' 1' 1000)'*/});  
Magic Number,Epic_Loot,NPC_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\NPC Affixes.cs,DefineNPCAffixes,The following statement contains a magic number: ModGeneric.npcAffixes.AddRange (new NPCAffix[] {  	new NPCAffix ("Guarding").AddDel ("Initialize"' (int val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.defense += val;  		};  		return d;  	}' 1' 10)'  	new NPCAffix ("Stubborn").AddDel ("Initialize"' (float val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.lifeMax = (int)((float)npc.lifeMax * val);  			npc.life = npc.lifeMax;  		};  		return d;  	}' 1.05f' 1.2f)'  	new NPCAffix ("Menacing").AddAffix ("Angry"' "Menacing").AddDel ("Initialize"' (float val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.defDamage = (int)((float)npc.defDamage * val);  			npc.damage = npc.defDamage;  		};  		return d;  	}' 1.05f' 1.2f)'  	new NPCAffix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").AddDel ("Initialize"' (float val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.scale += val;  			if (namedNPCs.Contains (npc.name)) {  				//REQUIRED check if you want the hitboxes to be correct!  				npc.width = (int)((float)npc.width * (1f + val));  				npc.height = (int)((float)npc.height * (1f + val));  			}  		};  		return d;  	}' 0.10f' 0.5f)'  	new NPCAffix ("Quick").AddDel ("PostAI"' (int val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.RunMethod ("MultipleAI"' val);  		};  		return d;  	}' 50' 100)'  	new NPCAffix ("Rejuvenating").AddDel ("UpdateNPC"' (int val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.lifeRegen += val;  		};  		return d;  	}' 1' 20)'  //Disabled for lag/excessive summoning purposes  /*new NPCAffix("Summoner").AddDel("PostAI"' (int val) => { Initialize_Del d = (NPC npc) => {  				if((Main.netMode == 2 || Main.netMode == 0) && ModGeneric.rand.Next(50000) < val) { 					NPC.NewNPC((int) npc.position.X' (int) npc.position.Y' npc.type); 				} 			}; return d; }' 1' 1000)'*/});  
Magic Number,Epic_Loot,NPC_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\NPC Affixes.cs,DefineNPCAffixes,The following statement contains a magic number: ModGeneric.npcAffixes.AddRange (new NPCAffix[] {  	new NPCAffix ("Guarding").AddDel ("Initialize"' (int val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.defense += val;  		};  		return d;  	}' 1' 10)'  	new NPCAffix ("Stubborn").AddDel ("Initialize"' (float val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.lifeMax = (int)((float)npc.lifeMax * val);  			npc.life = npc.lifeMax;  		};  		return d;  	}' 1.05f' 1.2f)'  	new NPCAffix ("Menacing").AddAffix ("Angry"' "Menacing").AddDel ("Initialize"' (float val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.defDamage = (int)((float)npc.defDamage * val);  			npc.damage = npc.defDamage;  		};  		return d;  	}' 1.05f' 1.2f)'  	new NPCAffix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").AddDel ("Initialize"' (float val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.scale += val;  			if (namedNPCs.Contains (npc.name)) {  				//REQUIRED check if you want the hitboxes to be correct!  				npc.width = (int)((float)npc.width * (1f + val));  				npc.height = (int)((float)npc.height * (1f + val));  			}  		};  		return d;  	}' 0.10f' 0.5f)'  	new NPCAffix ("Quick").AddDel ("PostAI"' (int val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.RunMethod ("MultipleAI"' val);  		};  		return d;  	}' 50' 100)'  	new NPCAffix ("Rejuvenating").AddDel ("UpdateNPC"' (int val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.lifeRegen += val;  		};  		return d;  	}' 1' 20)'  //Disabled for lag/excessive summoning purposes  /*new NPCAffix("Summoner").AddDel("PostAI"' (int val) => { Initialize_Del d = (NPC npc) => {  				if((Main.netMode == 2 || Main.netMode == 0) && ModGeneric.rand.Next(50000) < val) { 					NPC.NewNPC((int) npc.position.X' (int) npc.position.Y' npc.type); 				} 			}; return d; }' 1' 1000)'*/});  
Magic Number,Epic_Loot,NPC_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\NPC Affixes.cs,DefineNPCAffixes,The following statement contains a magic number: ModGeneric.npcAffixes.AddRange (new NPCAffix[] {  	new NPCAffix ("Guarding").AddDel ("Initialize"' (int val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.defense += val;  		};  		return d;  	}' 1' 10)'  	new NPCAffix ("Stubborn").AddDel ("Initialize"' (float val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.lifeMax = (int)((float)npc.lifeMax * val);  			npc.life = npc.lifeMax;  		};  		return d;  	}' 1.05f' 1.2f)'  	new NPCAffix ("Menacing").AddAffix ("Angry"' "Menacing").AddDel ("Initialize"' (float val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.defDamage = (int)((float)npc.defDamage * val);  			npc.damage = npc.defDamage;  		};  		return d;  	}' 1.05f' 1.2f)'  	new NPCAffix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").AddDel ("Initialize"' (float val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.scale += val;  			if (namedNPCs.Contains (npc.name)) {  				//REQUIRED check if you want the hitboxes to be correct!  				npc.width = (int)((float)npc.width * (1f + val));  				npc.height = (int)((float)npc.height * (1f + val));  			}  		};  		return d;  	}' 0.10f' 0.5f)'  	new NPCAffix ("Quick").AddDel ("PostAI"' (int val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.RunMethod ("MultipleAI"' val);  		};  		return d;  	}' 50' 100)'  	new NPCAffix ("Rejuvenating").AddDel ("UpdateNPC"' (int val) =>  {  		Initialize_Del d = (NPC npc) =>  {  			npc.lifeRegen += val;  		};  		return d;  	}' 1' 20)'  //Disabled for lag/excessive summoning purposes  /*new NPCAffix("Summoner").AddDel("PostAI"' (int val) => { Initialize_Del d = (NPC npc) => {  				if((Main.netMode == 2 || Main.netMode == 0) && ModGeneric.rand.Next(50000) < val) { 					NPC.NewNPC((int) npc.position.X' (int) npc.position.Y' npc.type); 				} 			}; return d; }' 1' 1000)'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: ModGeneric.prefixes.AddRange (new DPrefix[] {  	new DPrefix ("Guarding").AddAffix ("Hard"' "Guarding"' "Armored"' "Warding").Require (armor).AddPlayerDefense (1' 4)'  	new DPrefix ("Arcane").Require (armor).AddPlayerMana (1' 30)'  	new DPrefix ("Precise").Require (armor).AddPlayerCrit (1' 3)'  	new DPrefix ("Spiked").AddAffix ("Jagged"' "Spiked"' "Angry"' "Menacing").Require (armor).AddPlayerDmg (0.01f' 0.05f)'  	new DPrefix ("Rash").AddAffix ("Brisk"' "Fleeting"' "Hasty"' "Quick").Require (armor).AddPlayerMeleespeed (0.01f' 0.05f)'  	//new DPrefix("Fleeting").Require(armor).AddPlayerMovespeed(0.01f'0.05f)'  	new DPrefix ("Speedy").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.baseSpeed += val;  			player.maximumMaxSpeed += val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Strong").AddAffix ("Strong"' "Knockbackity").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.knockBack *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Knockback"; }  	new DPrefix ("Large").AddAffix ("Large"' "Huge"' "Hugemongous").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.scale *= v;  		};  	}' null' 1.05f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Size"; }  	new DPrefix ("Swift").Require (ranged).DMod ((float v) =>  {  		return (Item i) =>  {  			i.shootSpeed *= v;  		};  	}' null' 1.01f' 1.20f)'  	//' (float v) => { return "+"+((v-1f)*100f)+"% Projectile Velocity"; }  	new DPrefix ("Adept").Require (magic).DMod ((float v) =>  {  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v)));  		};  	}' null' 0.01f' 0.20f)'  	//' (float v) => { return "-"+((v)*100f)+"% Mana Cost"; }  	new DPrefix ("Quick").Require (weapon).DMod ((float v) =>  {  		return (Item i) =>  {  			v = 1f - (v - 1f);  			i.useAnimation = (int)Math.Round ((double)((float)i.useAnimation * v));  			i.useTime = (int)Math.Round ((double)((float)i.useTime * v));  			i.reuseDelay = (int)Math.Round ((double)((float)i.reuseDelay * v));  		};  	}' null' 1.01f' 1.20f)'  	new DPrefix ("Dangerous").Require (weapon).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  		};  	}' null' 1' 10)'  	new DPrefix ("Painful").Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.10f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  		};  	}' null' 1.10f' 1.20f)'  	new DPrefix ("Miner's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.pickSpeed -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Lucky").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			Codable.RunGlobalMethod ("ModPlayer"' "IncreaseMF"' val);  		};  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  	}' 0.001f' 0.10f)'  	new DPrefix ("Angelic").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Respawn");  	}' 10' 50)'  	new DPrefix ("Celestial").Require (armor).AddDel ("OnSpawn"' (int val) =>  {  		OnSpawn_Del d = (Player p' int i) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " MP On Respawn");  	}' 10' 40)'  	new DPrefix ("Battle-Ready").AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.spawnRate = (int)((double)NPC.spawnRate * (1f - val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  	}' 0.01f' 0.20f).AddDel ("UpdateSpawn"' (float val) =>  {  		Action d = () =>  {  			NPC.maxSpawns = (int)((float)NPC.maxSpawns * (1f + val));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  	}' 0.01f' 0.20f)'  	new DPrefix ("Vital").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.statLifeMax2 += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Max HP"' true);  	}' 1' 30)'  	new DPrefix ("Mage's").Require (armor).DMod ((float val) =>  {  		return (Player player) =>  {  			player.manaCost -= val;  		};  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  	}' 0.01f' 0.05f)'  	new DPrefix ("Rejuvenating").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.lifeRegen += v;  		};  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Life Regen"' true);  	}' 1' 2)'  	new DPrefix ("Thirsty").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.potionDelayTime -= (v * 60);  		};  	}' (int val) =>  {  		return new MouseTip ("Reduces potion cooldown by " + val + " seconds"' true);  	}' 1' 5)'  	new DPrefix ("Builder's").Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.blockRange += v;  		};  	}' (int val) =>  {  		return new MouseTip ("Increases range of block placement by " + val' true);  	}' 1' 2)'  	new DPrefix ("Magnum").Require (ranged).AddDel ("PreShoot"' (float v) =>  {  		PreShoot_Del d = (Player P' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			int num41 = Projectile.NewProjectile (ShootPos.X' ShootPos.Y' ShootVelocity.X' ShootVelocity.Y' projType' Damage' knockback' owner);  			if (projType == 80) {  				Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  				Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  			}  			Main.projectile [num41].scale += (1f + v);  			return false;  		};  		return d;  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  	}' 0.01f' 0.10f)'  	new DPrefix ("Vampiric").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statLife += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Vampiric Ranged").AddAffix ("Vampiric").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statLife += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching").Require (melee).AddDel ("DealtNPC"' (int val) =>  {  		DealtNPC_Del d = (Player p' NPC npc' double dmg) =>  {  			p.statMana += val;  		};  		return d;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " Mana On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Leeching Ranged").AddAffix ("Leeching").Require (proj).AddDel ("RegisterProjectile"' (int val) =>  {  		Action<Projectile> code = (Projectile p) =>  {  			p.RegisterDel (ref p.DealtNPC' (NPC npc' double dmg' Player pl) =>  {  				pl.statMana += val;  			}' "DealtNPC");  		};  		return code;  	}' (int val) =>  {  		return new MouseTip ("+" + val + " HP On Hit"' true);  	}' 1' 5)'  	new DPrefix ("Stabby").Require (melee).Require ((Item i) =>  {  		return i.useStyle == 1;  	}).DMod ((int v) =>  {  		return (Item i) =>  {  			i.crit += v;  			i.useStyle = 3;  		};  	}' (int val) =>  {  		return new MouseTip ("Stick 'em with the pointy end"' true);  	}' 5' 15)'  	new DPrefix ("of Willpower"' true).Require (weapon).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.15f))) > 0;  	}).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * v));  			i.magic = true;  			int manaBonus = (int)Math.Round ((double)(((float)i.damage * (v - 1f)) / 2f)) + 1;  			i.mana += manaBonus;  			i.toolTip7 = "+" + manaBonus + " mana cost";  		};  	}' null' 1.15f' 1.25f)'  	new DPrefix ("Vengeful").Require (melee).Require ((Item item) =>  {  		return (int)Math.Round ((double)((float)item.damage * (0.20f))) > 0;  	}).AddDel ("DamageNPC"' (float val) =>  {  		Events.Player.DamageNPC_Del d = (Player p' NPC npc' ref int dmg' ref float k) =>  {  			dmg += (int)Math.Round ((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val)));  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  	}' 0.20f' 0.5f)'  	/*new DPrefix("Vengeful Ranged").AddAffix("Vengeful").Require(proj).Require((Item item) => { return (int)Math.Round((double)((float)item.damage * (0.20f))) > 0; }).             AddDel( "RegisterProjectile"' (float val) => { Action<Projectile> code = (Projectile pr) => {  pr.RegisterDel(ref pr.DamageNPC' (NPC npc' ref int dmg' ref float k) => { dmg+=(int)Math.Round((double)((float)dmg * ((1f - (p.statLife / p.statLifeMax)) * val))) }' "DamageNPC"); }; return code; }' (float val) => { return new MouseTip("+"+Math.Round((float)(val*100f)' 2)+" Vengeance Damage"' true); }' 0.20f' 0.5f)'         */new DPrefix ("Sacrificial")//This affix will replace mana cost with health cost  	//The crappier affixes will make the health to mana ratio bad..  	//As in' it might reduce mana cost by 2 but increase health cost by 10.  	.Require (magic).AddVal (0.1f' 1f)//.AddVal(0f'1f) //Dummy value to use for storing something  	.DMod ((float[] v) =>  {  		//Reduce mana cost  		return (Item i) =>  {  			i.mana = (int)Math.Round ((double)((float)i.mana * (1f - v [0])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  		});  	}).AddVal (4f' 1f).AddDel ("CanUse"' (float[] v) =>  {  		//CanUse_Del d =  		return (CanUse_Del)((Player p' int ind) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDel ("PreShoot"' (float[] v) =>  {  		//CanUse_Del d =  		return (PreShoot_Del)((Player p' Vector2 ShootPos' Vector2 ShootVelocity' int projType' int Damage' float knockback' int owner) =>  {  			Item i = p.inventory [p.selectedItem];  			int amt = (int)Math.Round ((double)((float)i.mana / (1f - v [0])));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			//Main.NewText("test2");  			if (healthCost > p.statLife)  				return false;  			float defMod = (p.statDefense / 2f);  			//Main.NewText(healthCost+": "+defMod);  			int dmg = (int)((healthCost) + defMod);  			p.Hurt (dmg' 0);  			return true;  		});  		//return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  			int healthCost = (int)Math.Round ((double)(amt * v [1]));  			return new MouseTip ("+" + amt + " Health Cost"' true' true);  		});  	})'  	new DPrefix ("Kamikaze")//Increases damage' reduces defense' by the same percentage  	.Require (armor).AddVal (0.1f' 1f).AddVal (1f' 0.8f).DMod ((float[] v) =>  {  		return (Player p) =>  {  			//Increase damage  			p.magicDamage += v [0];  			p.rangedDamage += v [0];  			p.meleeDamage += v [0];  			//Decrease defense  			p.statDefense = (int)(p.statDefense * (1f - (v [0] * v [1])));  		};  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  		});  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  		});  	})'  	new DPrefix ("Thorned").Require (armor).AddVal (1' 20)//Damage  	.AddVal (0.1f' 2f)//Knockback  	.AddDel ("DealtPlayer"' (float[] v) =>  {  		DealtPlayer d = (Player player' double damage' NPC npc) =>  {  			npc.StrikeNPC ((int)v [0]' v [1]' npc.direction * -1);  		};  		return d;  	}).AddDTip ((float[] v) =>  {  		return (Prefix.TipMod)((Item i) =>  {  			return new MouseTip ("+" + (int)v [0] + " Thorns Damage with " + v [1] + " knockback"' true);  		});  	})'  /*new DPrefix("Dodgy")                  .Require(armor)                 .AddVal(0.01f' 0.03f)                 .AddDel( "DamagePlayer"' (float[] v) => {                      return (DamagePlayer_Del) ((Player p' ref int damage' NPC npc) => {                          //if(ModGeneric.rand.Next() < v[0])                          damage = 0;                     });                 })'*/});  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed & Max Speed"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Mining Speed"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 4) + "% Magic Find"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Increased Spawn Rate"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Max Spawns"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("-" + Math.Round (val' 2) + "% Mana Cost"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return (Player p) =>  {  	p.potionDelayTime -= (v * 60);  };  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: p.potionDelayTime -= (v * 60);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: if (projType == 80) {  	Main.projectile [num41].ai [0] = (float)Player.tileTargetX;  	Main.projectile [num41].ai [1] = (float)Player.tileTargetY;  }  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Increased Projectile Size"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return (Item i) =>  {  	i.crit += v;  	i.useStyle = 3;  };  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: i.useStyle = 3;  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + " Vengeance Damage"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return (Prefix.TipMod)((Item i) =>  {  	int amt = (int)Math.Round ((double)((float)i.mana * v [0]));  	return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  });  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("-" + Math.Round ((double)v [0] * 100f' 2) + "% (" + amt + ") Mana Cost"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return (Prefix.TipMod)((Item i) =>  {  	return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  });  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((double)v [0] * 100f' 2) + "% Damage"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return (Prefix.TipMod)((Item i) =>  {  	return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  });  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("-" + Math.Round ((double)(v [0] * v [1]) * 100f' 2) + "% Defense"' true' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: heavyOrLight.AddPrefixes (new DPrefix[] {  	new DPrefix ("Heavy").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * (v)));  			i.knockBack *= (v);  		};  	}' null' 1.05f' 1.30f).AddDel ("UpdatePlayer"' (float val) =>  {  		UpdatePlayer_Del d = (Player player) =>  {  			player.moveSpeed -= (0.51f - val);  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round ((float)((0.51f - val) * 100f)' 2) + "% Movement Speed"' true' true);  	}' 0.01f' 0.50f)'  	new DPrefix ("Light").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * (1f - v)));  			i.knockBack *= (1f - v);  		};  	}' null' 0.3f' 0.05f).AddDel ("UpdatePlayer"' (float val) =>  {  		UpdatePlayer_Del d = (Player player) =>  {  			player.moveSpeed += val;  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed"' true' false);  	}' 0.01f' 0.25f)'  }' melee);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: heavyOrLight.AddPrefixes (new DPrefix[] {  	new DPrefix ("Heavy").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * (v)));  			i.knockBack *= (v);  		};  	}' null' 1.05f' 1.30f).AddDel ("UpdatePlayer"' (float val) =>  {  		UpdatePlayer_Del d = (Player player) =>  {  			player.moveSpeed -= (0.51f - val);  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("-" + Math.Round ((float)((0.51f - val) * 100f)' 2) + "% Movement Speed"' true' true);  	}' 0.01f' 0.50f)'  	new DPrefix ("Light").Require (melee).DMod ((float v) =>  {  		return (Item i) =>  {  			i.damage = (int)Math.Round ((double)((float)i.damage * (1f - v)));  			i.knockBack *= (1f - v);  		};  	}' null' 0.3f' 0.05f).AddDel ("UpdatePlayer"' (float val) =>  {  		UpdatePlayer_Del d = (Player player) =>  {  			player.moveSpeed += val;  		};  		return d;  	}' (float val) =>  {  		return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed"' true' false);  	}' 0.01f' 0.25f)'  }' melee);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("-" + Math.Round ((float)((0.51f - val) * 100f)' 2) + "% Movement Speed"' true' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)(val * 100f)' 2) + "% Movement Speed"' true' false);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: debuffImmune.AddPrefixes (new DPrefix[] {  	//Debuff Immunities  	new DPrefix ("of Protective Armor"' true).Require (armor).Mod ((Player p) =>  {  		p.brokenArmor = false;  	}).AddTip ("Provides immunity to Broken Armor debuff")'  	new DPrefix ("of Protective Skin"' true).Require (armor).Mod ((Player p) =>  {  		p.bleed = false;  	}).AddTip ("Provides immunity to Bleeding debuff")'  	new DPrefix ("of Protective Mind"' true).Require (armor).Mod ((Player p) =>  {  		p.confused = false;  	}).AddTip ("Provides immunity to Confused debuff")'  	new DPrefix ("of Protective Agility"' true).Require (armor).Mod ((Player p) =>  {  		p.slow = false;  	}).AddTip ("Provides immunity to Slow debuff")'  	new DPrefix ("of Protective Voice"' true).Require (armor).Mod ((Player p) =>  {  		p.silence = false;  	}).AddTip ("Provides immunity to Silence debuff")'  	new DPrefix ("of Protective Antidote"' true).Require (armor).Mod ((Player p) =>  {  		p.poisoned = false;  	}).AddTip ("Provides immunity to Poison debuff")'  	new DPrefix ("of Protective Sight"' true).Require (armor).Mod ((Player p) =>  {  		p.blind = false;  	}).AddTip ("Provides immunity to Blind debuff")'  	new DPrefix ("of Protective Blessing"' true).Require (armor).Mod ((Player p) =>  {  		p.noItems = false;  	}).AddTip ("Provides immunity to Cursed debuff")'  	new DPrefix ("of Protective Flames"' true).Require (armor).Mod ((Player p) =>  {  		p.onFire = false;  		p.onFire2 = false;  	}).AddTip ("Provides immunity to Fire debuff")'  	//IDEA: Provide immunity to custom mod debuffs as well by looping through player's buffs and deleting it  	//Deadly Class  	new DPrefix ("of the Deadly Mage"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.magicDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Magic Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Warrior"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.meleeDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Melee Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Rogue"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.rangedDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Ranged Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of Water Walking"' true).Require (armor).Mod ((Player player) =>  {  		player.waterWalk = true;  	}).AddTip ("Gives the ability to walk on water")'  	new DPrefix ("of Mage Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.magicCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Magic Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Warrior Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.meleeCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Melee Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Rogue Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.rangedCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Ranged Crit Chance"' true);  	}' 2' 10)'  }' armor);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: debuffImmune.AddPrefixes (new DPrefix[] {  	//Debuff Immunities  	new DPrefix ("of Protective Armor"' true).Require (armor).Mod ((Player p) =>  {  		p.brokenArmor = false;  	}).AddTip ("Provides immunity to Broken Armor debuff")'  	new DPrefix ("of Protective Skin"' true).Require (armor).Mod ((Player p) =>  {  		p.bleed = false;  	}).AddTip ("Provides immunity to Bleeding debuff")'  	new DPrefix ("of Protective Mind"' true).Require (armor).Mod ((Player p) =>  {  		p.confused = false;  	}).AddTip ("Provides immunity to Confused debuff")'  	new DPrefix ("of Protective Agility"' true).Require (armor).Mod ((Player p) =>  {  		p.slow = false;  	}).AddTip ("Provides immunity to Slow debuff")'  	new DPrefix ("of Protective Voice"' true).Require (armor).Mod ((Player p) =>  {  		p.silence = false;  	}).AddTip ("Provides immunity to Silence debuff")'  	new DPrefix ("of Protective Antidote"' true).Require (armor).Mod ((Player p) =>  {  		p.poisoned = false;  	}).AddTip ("Provides immunity to Poison debuff")'  	new DPrefix ("of Protective Sight"' true).Require (armor).Mod ((Player p) =>  {  		p.blind = false;  	}).AddTip ("Provides immunity to Blind debuff")'  	new DPrefix ("of Protective Blessing"' true).Require (armor).Mod ((Player p) =>  {  		p.noItems = false;  	}).AddTip ("Provides immunity to Cursed debuff")'  	new DPrefix ("of Protective Flames"' true).Require (armor).Mod ((Player p) =>  {  		p.onFire = false;  		p.onFire2 = false;  	}).AddTip ("Provides immunity to Fire debuff")'  	//IDEA: Provide immunity to custom mod debuffs as well by looping through player's buffs and deleting it  	//Deadly Class  	new DPrefix ("of the Deadly Mage"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.magicDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Magic Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Warrior"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.meleeDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Melee Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Rogue"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.rangedDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Ranged Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of Water Walking"' true).Require (armor).Mod ((Player player) =>  {  		player.waterWalk = true;  	}).AddTip ("Gives the ability to walk on water")'  	new DPrefix ("of Mage Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.magicCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Magic Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Warrior Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.meleeCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Melee Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Rogue Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.rangedCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Ranged Crit Chance"' true);  	}' 2' 10)'  }' armor);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: debuffImmune.AddPrefixes (new DPrefix[] {  	//Debuff Immunities  	new DPrefix ("of Protective Armor"' true).Require (armor).Mod ((Player p) =>  {  		p.brokenArmor = false;  	}).AddTip ("Provides immunity to Broken Armor debuff")'  	new DPrefix ("of Protective Skin"' true).Require (armor).Mod ((Player p) =>  {  		p.bleed = false;  	}).AddTip ("Provides immunity to Bleeding debuff")'  	new DPrefix ("of Protective Mind"' true).Require (armor).Mod ((Player p) =>  {  		p.confused = false;  	}).AddTip ("Provides immunity to Confused debuff")'  	new DPrefix ("of Protective Agility"' true).Require (armor).Mod ((Player p) =>  {  		p.slow = false;  	}).AddTip ("Provides immunity to Slow debuff")'  	new DPrefix ("of Protective Voice"' true).Require (armor).Mod ((Player p) =>  {  		p.silence = false;  	}).AddTip ("Provides immunity to Silence debuff")'  	new DPrefix ("of Protective Antidote"' true).Require (armor).Mod ((Player p) =>  {  		p.poisoned = false;  	}).AddTip ("Provides immunity to Poison debuff")'  	new DPrefix ("of Protective Sight"' true).Require (armor).Mod ((Player p) =>  {  		p.blind = false;  	}).AddTip ("Provides immunity to Blind debuff")'  	new DPrefix ("of Protective Blessing"' true).Require (armor).Mod ((Player p) =>  {  		p.noItems = false;  	}).AddTip ("Provides immunity to Cursed debuff")'  	new DPrefix ("of Protective Flames"' true).Require (armor).Mod ((Player p) =>  {  		p.onFire = false;  		p.onFire2 = false;  	}).AddTip ("Provides immunity to Fire debuff")'  	//IDEA: Provide immunity to custom mod debuffs as well by looping through player's buffs and deleting it  	//Deadly Class  	new DPrefix ("of the Deadly Mage"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.magicDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Magic Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Warrior"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.meleeDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Melee Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Rogue"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.rangedDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Ranged Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of Water Walking"' true).Require (armor).Mod ((Player player) =>  {  		player.waterWalk = true;  	}).AddTip ("Gives the ability to walk on water")'  	new DPrefix ("of Mage Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.magicCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Magic Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Warrior Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.meleeCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Melee Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Rogue Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.rangedCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Ranged Crit Chance"' true);  	}' 2' 10)'  }' armor);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: debuffImmune.AddPrefixes (new DPrefix[] {  	//Debuff Immunities  	new DPrefix ("of Protective Armor"' true).Require (armor).Mod ((Player p) =>  {  		p.brokenArmor = false;  	}).AddTip ("Provides immunity to Broken Armor debuff")'  	new DPrefix ("of Protective Skin"' true).Require (armor).Mod ((Player p) =>  {  		p.bleed = false;  	}).AddTip ("Provides immunity to Bleeding debuff")'  	new DPrefix ("of Protective Mind"' true).Require (armor).Mod ((Player p) =>  {  		p.confused = false;  	}).AddTip ("Provides immunity to Confused debuff")'  	new DPrefix ("of Protective Agility"' true).Require (armor).Mod ((Player p) =>  {  		p.slow = false;  	}).AddTip ("Provides immunity to Slow debuff")'  	new DPrefix ("of Protective Voice"' true).Require (armor).Mod ((Player p) =>  {  		p.silence = false;  	}).AddTip ("Provides immunity to Silence debuff")'  	new DPrefix ("of Protective Antidote"' true).Require (armor).Mod ((Player p) =>  {  		p.poisoned = false;  	}).AddTip ("Provides immunity to Poison debuff")'  	new DPrefix ("of Protective Sight"' true).Require (armor).Mod ((Player p) =>  {  		p.blind = false;  	}).AddTip ("Provides immunity to Blind debuff")'  	new DPrefix ("of Protective Blessing"' true).Require (armor).Mod ((Player p) =>  {  		p.noItems = false;  	}).AddTip ("Provides immunity to Cursed debuff")'  	new DPrefix ("of Protective Flames"' true).Require (armor).Mod ((Player p) =>  {  		p.onFire = false;  		p.onFire2 = false;  	}).AddTip ("Provides immunity to Fire debuff")'  	//IDEA: Provide immunity to custom mod debuffs as well by looping through player's buffs and deleting it  	//Deadly Class  	new DPrefix ("of the Deadly Mage"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.magicDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Magic Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Warrior"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.meleeDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Melee Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Rogue"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.rangedDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Ranged Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of Water Walking"' true).Require (armor).Mod ((Player player) =>  {  		player.waterWalk = true;  	}).AddTip ("Gives the ability to walk on water")'  	new DPrefix ("of Mage Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.magicCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Magic Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Warrior Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.meleeCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Melee Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Rogue Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.rangedCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Ranged Crit Chance"' true);  	}' 2' 10)'  }' armor);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: debuffImmune.AddPrefixes (new DPrefix[] {  	//Debuff Immunities  	new DPrefix ("of Protective Armor"' true).Require (armor).Mod ((Player p) =>  {  		p.brokenArmor = false;  	}).AddTip ("Provides immunity to Broken Armor debuff")'  	new DPrefix ("of Protective Skin"' true).Require (armor).Mod ((Player p) =>  {  		p.bleed = false;  	}).AddTip ("Provides immunity to Bleeding debuff")'  	new DPrefix ("of Protective Mind"' true).Require (armor).Mod ((Player p) =>  {  		p.confused = false;  	}).AddTip ("Provides immunity to Confused debuff")'  	new DPrefix ("of Protective Agility"' true).Require (armor).Mod ((Player p) =>  {  		p.slow = false;  	}).AddTip ("Provides immunity to Slow debuff")'  	new DPrefix ("of Protective Voice"' true).Require (armor).Mod ((Player p) =>  {  		p.silence = false;  	}).AddTip ("Provides immunity to Silence debuff")'  	new DPrefix ("of Protective Antidote"' true).Require (armor).Mod ((Player p) =>  {  		p.poisoned = false;  	}).AddTip ("Provides immunity to Poison debuff")'  	new DPrefix ("of Protective Sight"' true).Require (armor).Mod ((Player p) =>  {  		p.blind = false;  	}).AddTip ("Provides immunity to Blind debuff")'  	new DPrefix ("of Protective Blessing"' true).Require (armor).Mod ((Player p) =>  {  		p.noItems = false;  	}).AddTip ("Provides immunity to Cursed debuff")'  	new DPrefix ("of Protective Flames"' true).Require (armor).Mod ((Player p) =>  {  		p.onFire = false;  		p.onFire2 = false;  	}).AddTip ("Provides immunity to Fire debuff")'  	//IDEA: Provide immunity to custom mod debuffs as well by looping through player's buffs and deleting it  	//Deadly Class  	new DPrefix ("of the Deadly Mage"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.magicDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Magic Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Warrior"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.meleeDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Melee Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Rogue"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.rangedDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Ranged Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of Water Walking"' true).Require (armor).Mod ((Player player) =>  {  		player.waterWalk = true;  	}).AddTip ("Gives the ability to walk on water")'  	new DPrefix ("of Mage Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.magicCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Magic Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Warrior Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.meleeCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Melee Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Rogue Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.rangedCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Ranged Crit Chance"' true);  	}' 2' 10)'  }' armor);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: debuffImmune.AddPrefixes (new DPrefix[] {  	//Debuff Immunities  	new DPrefix ("of Protective Armor"' true).Require (armor).Mod ((Player p) =>  {  		p.brokenArmor = false;  	}).AddTip ("Provides immunity to Broken Armor debuff")'  	new DPrefix ("of Protective Skin"' true).Require (armor).Mod ((Player p) =>  {  		p.bleed = false;  	}).AddTip ("Provides immunity to Bleeding debuff")'  	new DPrefix ("of Protective Mind"' true).Require (armor).Mod ((Player p) =>  {  		p.confused = false;  	}).AddTip ("Provides immunity to Confused debuff")'  	new DPrefix ("of Protective Agility"' true).Require (armor).Mod ((Player p) =>  {  		p.slow = false;  	}).AddTip ("Provides immunity to Slow debuff")'  	new DPrefix ("of Protective Voice"' true).Require (armor).Mod ((Player p) =>  {  		p.silence = false;  	}).AddTip ("Provides immunity to Silence debuff")'  	new DPrefix ("of Protective Antidote"' true).Require (armor).Mod ((Player p) =>  {  		p.poisoned = false;  	}).AddTip ("Provides immunity to Poison debuff")'  	new DPrefix ("of Protective Sight"' true).Require (armor).Mod ((Player p) =>  {  		p.blind = false;  	}).AddTip ("Provides immunity to Blind debuff")'  	new DPrefix ("of Protective Blessing"' true).Require (armor).Mod ((Player p) =>  {  		p.noItems = false;  	}).AddTip ("Provides immunity to Cursed debuff")'  	new DPrefix ("of Protective Flames"' true).Require (armor).Mod ((Player p) =>  {  		p.onFire = false;  		p.onFire2 = false;  	}).AddTip ("Provides immunity to Fire debuff")'  	//IDEA: Provide immunity to custom mod debuffs as well by looping through player's buffs and deleting it  	//Deadly Class  	new DPrefix ("of the Deadly Mage"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.magicDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Magic Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Warrior"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.meleeDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Melee Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Rogue"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.rangedDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Ranged Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of Water Walking"' true).Require (armor).Mod ((Player player) =>  {  		player.waterWalk = true;  	}).AddTip ("Gives the ability to walk on water")'  	new DPrefix ("of Mage Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.magicCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Magic Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Warrior Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.meleeCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Melee Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Rogue Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.rangedCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Ranged Crit Chance"' true);  	}' 2' 10)'  }' armor);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: debuffImmune.AddPrefixes (new DPrefix[] {  	//Debuff Immunities  	new DPrefix ("of Protective Armor"' true).Require (armor).Mod ((Player p) =>  {  		p.brokenArmor = false;  	}).AddTip ("Provides immunity to Broken Armor debuff")'  	new DPrefix ("of Protective Skin"' true).Require (armor).Mod ((Player p) =>  {  		p.bleed = false;  	}).AddTip ("Provides immunity to Bleeding debuff")'  	new DPrefix ("of Protective Mind"' true).Require (armor).Mod ((Player p) =>  {  		p.confused = false;  	}).AddTip ("Provides immunity to Confused debuff")'  	new DPrefix ("of Protective Agility"' true).Require (armor).Mod ((Player p) =>  {  		p.slow = false;  	}).AddTip ("Provides immunity to Slow debuff")'  	new DPrefix ("of Protective Voice"' true).Require (armor).Mod ((Player p) =>  {  		p.silence = false;  	}).AddTip ("Provides immunity to Silence debuff")'  	new DPrefix ("of Protective Antidote"' true).Require (armor).Mod ((Player p) =>  {  		p.poisoned = false;  	}).AddTip ("Provides immunity to Poison debuff")'  	new DPrefix ("of Protective Sight"' true).Require (armor).Mod ((Player p) =>  {  		p.blind = false;  	}).AddTip ("Provides immunity to Blind debuff")'  	new DPrefix ("of Protective Blessing"' true).Require (armor).Mod ((Player p) =>  {  		p.noItems = false;  	}).AddTip ("Provides immunity to Cursed debuff")'  	new DPrefix ("of Protective Flames"' true).Require (armor).Mod ((Player p) =>  {  		p.onFire = false;  		p.onFire2 = false;  	}).AddTip ("Provides immunity to Fire debuff")'  	//IDEA: Provide immunity to custom mod debuffs as well by looping through player's buffs and deleting it  	//Deadly Class  	new DPrefix ("of the Deadly Mage"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.magicDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Magic Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Warrior"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.meleeDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Melee Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Rogue"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.rangedDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Ranged Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of Water Walking"' true).Require (armor).Mod ((Player player) =>  {  		player.waterWalk = true;  	}).AddTip ("Gives the ability to walk on water")'  	new DPrefix ("of Mage Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.magicCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Magic Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Warrior Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.meleeCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Melee Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Rogue Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.rangedCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Ranged Crit Chance"' true);  	}' 2' 10)'  }' armor);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: debuffImmune.AddPrefixes (new DPrefix[] {  	//Debuff Immunities  	new DPrefix ("of Protective Armor"' true).Require (armor).Mod ((Player p) =>  {  		p.brokenArmor = false;  	}).AddTip ("Provides immunity to Broken Armor debuff")'  	new DPrefix ("of Protective Skin"' true).Require (armor).Mod ((Player p) =>  {  		p.bleed = false;  	}).AddTip ("Provides immunity to Bleeding debuff")'  	new DPrefix ("of Protective Mind"' true).Require (armor).Mod ((Player p) =>  {  		p.confused = false;  	}).AddTip ("Provides immunity to Confused debuff")'  	new DPrefix ("of Protective Agility"' true).Require (armor).Mod ((Player p) =>  {  		p.slow = false;  	}).AddTip ("Provides immunity to Slow debuff")'  	new DPrefix ("of Protective Voice"' true).Require (armor).Mod ((Player p) =>  {  		p.silence = false;  	}).AddTip ("Provides immunity to Silence debuff")'  	new DPrefix ("of Protective Antidote"' true).Require (armor).Mod ((Player p) =>  {  		p.poisoned = false;  	}).AddTip ("Provides immunity to Poison debuff")'  	new DPrefix ("of Protective Sight"' true).Require (armor).Mod ((Player p) =>  {  		p.blind = false;  	}).AddTip ("Provides immunity to Blind debuff")'  	new DPrefix ("of Protective Blessing"' true).Require (armor).Mod ((Player p) =>  {  		p.noItems = false;  	}).AddTip ("Provides immunity to Cursed debuff")'  	new DPrefix ("of Protective Flames"' true).Require (armor).Mod ((Player p) =>  {  		p.onFire = false;  		p.onFire2 = false;  	}).AddTip ("Provides immunity to Fire debuff")'  	//IDEA: Provide immunity to custom mod debuffs as well by looping through player's buffs and deleting it  	//Deadly Class  	new DPrefix ("of the Deadly Mage"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.magicDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Magic Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Warrior"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.meleeDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Melee Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Rogue"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.rangedDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Ranged Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of Water Walking"' true).Require (armor).Mod ((Player player) =>  {  		player.waterWalk = true;  	}).AddTip ("Gives the ability to walk on water")'  	new DPrefix ("of Mage Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.magicCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Magic Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Warrior Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.meleeCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Melee Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Rogue Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.rangedCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Ranged Crit Chance"' true);  	}' 2' 10)'  }' armor);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: debuffImmune.AddPrefixes (new DPrefix[] {  	//Debuff Immunities  	new DPrefix ("of Protective Armor"' true).Require (armor).Mod ((Player p) =>  {  		p.brokenArmor = false;  	}).AddTip ("Provides immunity to Broken Armor debuff")'  	new DPrefix ("of Protective Skin"' true).Require (armor).Mod ((Player p) =>  {  		p.bleed = false;  	}).AddTip ("Provides immunity to Bleeding debuff")'  	new DPrefix ("of Protective Mind"' true).Require (armor).Mod ((Player p) =>  {  		p.confused = false;  	}).AddTip ("Provides immunity to Confused debuff")'  	new DPrefix ("of Protective Agility"' true).Require (armor).Mod ((Player p) =>  {  		p.slow = false;  	}).AddTip ("Provides immunity to Slow debuff")'  	new DPrefix ("of Protective Voice"' true).Require (armor).Mod ((Player p) =>  {  		p.silence = false;  	}).AddTip ("Provides immunity to Silence debuff")'  	new DPrefix ("of Protective Antidote"' true).Require (armor).Mod ((Player p) =>  {  		p.poisoned = false;  	}).AddTip ("Provides immunity to Poison debuff")'  	new DPrefix ("of Protective Sight"' true).Require (armor).Mod ((Player p) =>  {  		p.blind = false;  	}).AddTip ("Provides immunity to Blind debuff")'  	new DPrefix ("of Protective Blessing"' true).Require (armor).Mod ((Player p) =>  {  		p.noItems = false;  	}).AddTip ("Provides immunity to Cursed debuff")'  	new DPrefix ("of Protective Flames"' true).Require (armor).Mod ((Player p) =>  {  		p.onFire = false;  		p.onFire2 = false;  	}).AddTip ("Provides immunity to Fire debuff")'  	//IDEA: Provide immunity to custom mod debuffs as well by looping through player's buffs and deleting it  	//Deadly Class  	new DPrefix ("of the Deadly Mage"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.magicDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Magic Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Warrior"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.meleeDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Melee Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Rogue"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.rangedDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Ranged Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of Water Walking"' true).Require (armor).Mod ((Player player) =>  {  		player.waterWalk = true;  	}).AddTip ("Gives the ability to walk on water")'  	new DPrefix ("of Mage Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.magicCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Magic Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Warrior Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.meleeCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Melee Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Rogue Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.rangedCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Ranged Crit Chance"' true);  	}' 2' 10)'  }' armor);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: debuffImmune.AddPrefixes (new DPrefix[] {  	//Debuff Immunities  	new DPrefix ("of Protective Armor"' true).Require (armor).Mod ((Player p) =>  {  		p.brokenArmor = false;  	}).AddTip ("Provides immunity to Broken Armor debuff")'  	new DPrefix ("of Protective Skin"' true).Require (armor).Mod ((Player p) =>  {  		p.bleed = false;  	}).AddTip ("Provides immunity to Bleeding debuff")'  	new DPrefix ("of Protective Mind"' true).Require (armor).Mod ((Player p) =>  {  		p.confused = false;  	}).AddTip ("Provides immunity to Confused debuff")'  	new DPrefix ("of Protective Agility"' true).Require (armor).Mod ((Player p) =>  {  		p.slow = false;  	}).AddTip ("Provides immunity to Slow debuff")'  	new DPrefix ("of Protective Voice"' true).Require (armor).Mod ((Player p) =>  {  		p.silence = false;  	}).AddTip ("Provides immunity to Silence debuff")'  	new DPrefix ("of Protective Antidote"' true).Require (armor).Mod ((Player p) =>  {  		p.poisoned = false;  	}).AddTip ("Provides immunity to Poison debuff")'  	new DPrefix ("of Protective Sight"' true).Require (armor).Mod ((Player p) =>  {  		p.blind = false;  	}).AddTip ("Provides immunity to Blind debuff")'  	new DPrefix ("of Protective Blessing"' true).Require (armor).Mod ((Player p) =>  {  		p.noItems = false;  	}).AddTip ("Provides immunity to Cursed debuff")'  	new DPrefix ("of Protective Flames"' true).Require (armor).Mod ((Player p) =>  {  		p.onFire = false;  		p.onFire2 = false;  	}).AddTip ("Provides immunity to Fire debuff")'  	//IDEA: Provide immunity to custom mod debuffs as well by looping through player's buffs and deleting it  	//Deadly Class  	new DPrefix ("of the Deadly Mage"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.magicDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Magic Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Warrior"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.meleeDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Melee Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Rogue"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.rangedDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Ranged Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of Water Walking"' true).Require (armor).Mod ((Player player) =>  {  		player.waterWalk = true;  	}).AddTip ("Gives the ability to walk on water")'  	new DPrefix ("of Mage Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.magicCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Magic Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Warrior Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.meleeCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Melee Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Rogue Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.rangedCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Ranged Crit Chance"' true);  	}' 2' 10)'  }' armor);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: debuffImmune.AddPrefixes (new DPrefix[] {  	//Debuff Immunities  	new DPrefix ("of Protective Armor"' true).Require (armor).Mod ((Player p) =>  {  		p.brokenArmor = false;  	}).AddTip ("Provides immunity to Broken Armor debuff")'  	new DPrefix ("of Protective Skin"' true).Require (armor).Mod ((Player p) =>  {  		p.bleed = false;  	}).AddTip ("Provides immunity to Bleeding debuff")'  	new DPrefix ("of Protective Mind"' true).Require (armor).Mod ((Player p) =>  {  		p.confused = false;  	}).AddTip ("Provides immunity to Confused debuff")'  	new DPrefix ("of Protective Agility"' true).Require (armor).Mod ((Player p) =>  {  		p.slow = false;  	}).AddTip ("Provides immunity to Slow debuff")'  	new DPrefix ("of Protective Voice"' true).Require (armor).Mod ((Player p) =>  {  		p.silence = false;  	}).AddTip ("Provides immunity to Silence debuff")'  	new DPrefix ("of Protective Antidote"' true).Require (armor).Mod ((Player p) =>  {  		p.poisoned = false;  	}).AddTip ("Provides immunity to Poison debuff")'  	new DPrefix ("of Protective Sight"' true).Require (armor).Mod ((Player p) =>  {  		p.blind = false;  	}).AddTip ("Provides immunity to Blind debuff")'  	new DPrefix ("of Protective Blessing"' true).Require (armor).Mod ((Player p) =>  {  		p.noItems = false;  	}).AddTip ("Provides immunity to Cursed debuff")'  	new DPrefix ("of Protective Flames"' true).Require (armor).Mod ((Player p) =>  {  		p.onFire = false;  		p.onFire2 = false;  	}).AddTip ("Provides immunity to Fire debuff")'  	//IDEA: Provide immunity to custom mod debuffs as well by looping through player's buffs and deleting it  	//Deadly Class  	new DPrefix ("of the Deadly Mage"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.magicDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Magic Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Warrior"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.meleeDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Melee Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Rogue"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.rangedDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Ranged Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of Water Walking"' true).Require (armor).Mod ((Player player) =>  {  		player.waterWalk = true;  	}).AddTip ("Gives the ability to walk on water")'  	new DPrefix ("of Mage Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.magicCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Magic Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Warrior Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.meleeCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Melee Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Rogue Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.rangedCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Ranged Crit Chance"' true);  	}' 2' 10)'  }' armor);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: debuffImmune.AddPrefixes (new DPrefix[] {  	//Debuff Immunities  	new DPrefix ("of Protective Armor"' true).Require (armor).Mod ((Player p) =>  {  		p.brokenArmor = false;  	}).AddTip ("Provides immunity to Broken Armor debuff")'  	new DPrefix ("of Protective Skin"' true).Require (armor).Mod ((Player p) =>  {  		p.bleed = false;  	}).AddTip ("Provides immunity to Bleeding debuff")'  	new DPrefix ("of Protective Mind"' true).Require (armor).Mod ((Player p) =>  {  		p.confused = false;  	}).AddTip ("Provides immunity to Confused debuff")'  	new DPrefix ("of Protective Agility"' true).Require (armor).Mod ((Player p) =>  {  		p.slow = false;  	}).AddTip ("Provides immunity to Slow debuff")'  	new DPrefix ("of Protective Voice"' true).Require (armor).Mod ((Player p) =>  {  		p.silence = false;  	}).AddTip ("Provides immunity to Silence debuff")'  	new DPrefix ("of Protective Antidote"' true).Require (armor).Mod ((Player p) =>  {  		p.poisoned = false;  	}).AddTip ("Provides immunity to Poison debuff")'  	new DPrefix ("of Protective Sight"' true).Require (armor).Mod ((Player p) =>  {  		p.blind = false;  	}).AddTip ("Provides immunity to Blind debuff")'  	new DPrefix ("of Protective Blessing"' true).Require (armor).Mod ((Player p) =>  {  		p.noItems = false;  	}).AddTip ("Provides immunity to Cursed debuff")'  	new DPrefix ("of Protective Flames"' true).Require (armor).Mod ((Player p) =>  {  		p.onFire = false;  		p.onFire2 = false;  	}).AddTip ("Provides immunity to Fire debuff")'  	//IDEA: Provide immunity to custom mod debuffs as well by looping through player's buffs and deleting it  	//Deadly Class  	new DPrefix ("of the Deadly Mage"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.magicDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Magic Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Warrior"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.meleeDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Melee Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of the Deadly Rogue"' true).Require (armor).DMod ((float v) =>  {  		return (Player p) =>  {  			p.rangedDamage += v;  		};  	}' (float v) =>  {  		return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Ranged Damage"' true);  	}' 0.02f' 0.10f)'  	new DPrefix ("of Water Walking"' true).Require (armor).Mod ((Player player) =>  {  		player.waterWalk = true;  	}).AddTip ("Gives the ability to walk on water")'  	new DPrefix ("of Mage Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.magicCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Magic Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Warrior Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.meleeCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Melee Crit Chance"' true);  	}' 2' 10)'  	new DPrefix ("of Rogue Precision"' true).Require (armor).DMod ((int v) =>  {  		return (Player p) =>  {  			p.rangedCrit += v;  		};  	}' (int v) =>  {  		return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Ranged Crit Chance"' true);  	}' 2' 10)'  }' armor);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Magic Damage"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Melee Damage"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)(v * 100f)' 2) + "% Ranged Damage"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Magic Crit Chance"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Melee Crit Chance"' true);  
Magic Number,Epic_Loot,Item_Affixes,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Affixes\Item Affixes.cs,DefinePrefixes,The following statement contains a magic number: return new MouseTip ("+" + Math.Round ((float)v' 2) + "% Ranged Crit Chance"' true);  
Magic Number,Epic_Loot,ModGeneric,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Generic.cs,UpdateSpawn,The following statement contains a magic number: for (int j = 0; j < 255; j++) {  	if (Main.player [j].active && !Main.player [j].dead) {  		Item item = Main.player [j].inventory [Main.player [j].selectedItem];  		RunMethod (item' "UpdateSpawn");  		for (int i = 0; i < 8; i++) {  			item = Main.player [j].armor [i];  			RunMethod (item' "UpdateSpawn");  		}  	}  }  
Magic Number,Epic_Loot,ModGeneric,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Generic.cs,UpdateSpawn,The following statement contains a magic number: for (int j = 0; j < 255; j++) {  	if (Main.player [j].active && !Main.player [j].dead) {  		Item item = Main.player [j].inventory [Main.player [j].selectedItem];  		RunMethod (item' "UpdateSpawn");  		for (int i = 0; i < 8; i++) {  			item = Main.player [j].armor [i];  			RunMethod (item' "UpdateSpawn");  		}  	}  }  
Magic Number,Epic_Loot,ModGeneric,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Generic.cs,UpdateSpawn,The following statement contains a magic number: if (Main.player [j].active && !Main.player [j].dead) {  	Item item = Main.player [j].inventory [Main.player [j].selectedItem];  	RunMethod (item' "UpdateSpawn");  	for (int i = 0; i < 8; i++) {  		item = Main.player [j].armor [i];  		RunMethod (item' "UpdateSpawn");  	}  }  
Magic Number,Epic_Loot,ModGeneric,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\Global\Generic.cs,UpdateSpawn,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	item = Main.player [j].armor [i];  	RunMethod (item' "UpdateSpawn");  }  
Magic Number,Epic_Loot,Global_NPC,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\NPC\NPC.cs,UpdateNPC,The following statement contains a magic number: if (!netTransferred) {  	//Synchronize  	if (Main.netMode == 2) {  		//Client  		//this.npc.life = this.npc.lifeMax;  		MemoryStream sendStream = new MemoryStream ();  		BinaryWriter w = new BinaryWriter (sendStream);  		this.Save (w);  		NetMessage.SendModData (ModWorld.modIndex' ModWorld.SYNC_AFFIXES' -1' -1' this.npc.whoAmI' sendStream);  		w.Close ();  	}  }  
Magic Number,Epic_Loot,Global_NPC,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\NPC\NPC.cs,UpdateNPC,The following statement contains a magic number: if (Main.netMode == 2) {  	//Client  	//this.npc.life = this.npc.lifeMax;  	MemoryStream sendStream = new MemoryStream ();  	BinaryWriter w = new BinaryWriter (sendStream);  	this.Save (w);  	NetMessage.SendModData (ModWorld.modIndex' ModWorld.SYNC_AFFIXES' -1' -1' this.npc.whoAmI' sendStream);  	w.Close ();  }  
Magic Number,Epic_Loot,Global_NPC,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\NPC\NPC.cs,MultipleAI,The following statement contains a magic number: if (!AIran) {  	AIran = true;  	if (ModGeneric.rand.Next (100) <= val)  		npc.AI ();  }  
Magic Number,Epic_Loot,Global_NPC,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\NPC\NPC.cs,MultipleAI,The following statement contains a magic number: if (ModGeneric.rand.Next (100) <= val)  	npc.AI ();  
Magic Number,Epic_Loot,Global_NPC,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\NPC\NPC.cs,NPCLoot,The following statement contains a magic number: if (npc.boss)  	amt *= 3;  
Magic Number,Epic_Loot,Global_NPC,C:\repos\Surfpup_tConfig-Mods\Epic Loot\Epic Loot\NPC\NPC.cs,NPCLoot,The following statement contains a magic number: amt *= 3;  
