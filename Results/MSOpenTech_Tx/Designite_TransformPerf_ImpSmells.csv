Implementation smell,Namespace,Class,File,Method,Description
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,RunForever,The following statement contains a magic number: switch (queryId)             {                 case 1:                     {                         var windows = from w in subject.Window(TimeSpan.FromSeconds(1))                                       from c in w.Count()                                       select c;                          windows.Subscribe(l => Console.WriteLine("Q1 Using EtwManifestTypeMap<T> and Rx for count : {0:n}"' l));                          ProduceEvents(transform);                         break;                     }                  case 2:                     {                         var query = subject                             .Scan((long)0' (m' _) => m + 1)                             .Sample(TimeSpan.FromSeconds(1))                             .StartWith(0)                             .Buffer(2' 1);                          query.Subscribe(b => Console.WriteLine("Q2 total={0:n} diff={1:n}"' b[1]' b[1] - b[0]));                          ProduceEvents(transform);                         break;                     }                  case 3:                     {                          long counter = 0;                         var query = subject.Subscribe(_ => counter++);                          var tim = Observable.Interval(TimeSpan.FromSeconds(1))                             .Subscribe(_ =>                             {                                 Console.WriteLine("Q3 {0:n}"' counter);                                 counter = 0;                             });                          ProduceEvents(transform);                         break;                     }             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,RunForever,The following statement contains a magic number: switch (queryId)             {                 case 1:                     {                         var windows = from w in subject.Window(TimeSpan.FromSeconds(1))                                       from c in w.Count()                                       select c;                          windows.Subscribe(l => Console.WriteLine("Q1 Using EtwManifestTypeMap<T> and Rx for count : {0:n}"' l));                          ProduceEvents(transform);                         break;                     }                  case 2:                     {                         var query = subject                             .Scan((long)0' (m' _) => m + 1)                             .Sample(TimeSpan.FromSeconds(1))                             .StartWith(0)                             .Buffer(2' 1);                          query.Subscribe(b => Console.WriteLine("Q2 total={0:n} diff={1:n}"' b[1]' b[1] - b[0]));                          ProduceEvents(transform);                         break;                     }                  case 3:                     {                          long counter = 0;                         var query = subject.Subscribe(_ => counter++);                          var tim = Observable.Interval(TimeSpan.FromSeconds(1))                             .Subscribe(_ =>                             {                                 Console.WriteLine("Q3 {0:n}"' counter);                                 counter = 0;                             });                          ProduceEvents(transform);                         break;                     }             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,RunForever,The following statement contains a magic number: switch (queryId)             {                 case 1:                     {                         var windows = from w in subject.Window(TimeSpan.FromSeconds(1))                                       from c in w.Count()                                       select c;                          windows.Subscribe(l => Console.WriteLine("Q1 Using EtwManifestTypeMap<T> and Rx for count : {0:n}"' l));                          ProduceEvents(transform);                         break;                     }                  case 2:                     {                         var query = subject                             .Scan((long)0' (m' _) => m + 1)                             .Sample(TimeSpan.FromSeconds(1))                             .StartWith(0)                             .Buffer(2' 1);                          query.Subscribe(b => Console.WriteLine("Q2 total={0:n} diff={1:n}"' b[1]' b[1] - b[0]));                          ProduceEvents(transform);                         break;                     }                  case 3:                     {                          long counter = 0;                         var query = subject.Subscribe(_ => counter++);                          var tim = Observable.Interval(TimeSpan.FromSeconds(1))                             .Subscribe(_ =>                             {                                 Console.WriteLine("Q3 {0:n}"' counter);                                 counter = 0;                             });                          ProduceEvents(transform);                         break;                     }             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Magic Number,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,Init,The following statement contains a magic number: switch(size)             {                 case EventSize.Small:                     userData = GCHandle.Alloc(new SmallEventStruct { ID = 42 }' GCHandleType.Pinned);                     outputType = typeof(SmallEvent);                     break;                  case EventSize.Medium:                     {                         var str = new MediumEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                         }                          userData = GCHandle.Alloc(str' GCHandleType.Pinned);                         outputType = typeof(MediumEvent);                     }                     break;                  case EventSize.Large:                     {                        var str = new LargeEventStruct                         {                             ID = 42'                             number1 = 1'                             number2 = 2'                             number3 = 3'                             number4 = 4'                             number5 = 5'                             number6 = 6'                             number7 = 7'                             number8 = 8'                             number9 = 9'                             number10 = 10'                         };                          for (int i = 0; i < 1023; i++)                         {                             str.string1[i] = '1';                             str.string2[i] = '2';                             str.string3[i] = '3';                             str.string4[i] = '4';                             str.string5[i] = '5';                             str.string6[i] = '6';                             str.string7[i] = '7';                             str.string8[i] = '8';                             str.string9[i] = '9';                             str.string10[i] = 'a';                         }                         userData = GCHandle.Alloc(str' GCHandleType.Pinned);                        outputType = typeof(LargeEvent);                     }                     break;                   default:                     throw new Exception("unknown size");             }
Missing Default,TransformPerf,Program,C:\research\architectureSmells\repos\MSOpenTech_Tx\Samples\Performance\TransformPerf\Program.cs,RunForever,The following switch statement is missing a default case: switch (queryId)             {                 case 1:                     {                         var windows = from w in subject.Window(TimeSpan.FromSeconds(1))                                       from c in w.Count()                                       select c;                          windows.Subscribe(l => Console.WriteLine("Q1 Using EtwManifestTypeMap<T> and Rx for count : {0:n}"' l));                          ProduceEvents(transform);                         break;                     }                  case 2:                     {                         var query = subject                             .Scan((long)0' (m' _) => m + 1)                             .Sample(TimeSpan.FromSeconds(1))                             .StartWith(0)                             .Buffer(2' 1);                          query.Subscribe(b => Console.WriteLine("Q2 total={0:n} diff={1:n}"' b[1]' b[1] - b[0]));                          ProduceEvents(transform);                         break;                     }                  case 3:                     {                          long counter = 0;                         var query = subject.Subscribe(_ => counter++);                          var tim = Observable.Interval(TimeSpan.FromSeconds(1))                             .Subscribe(_ =>                             {                                 Console.WriteLine("Q3 {0:n}"' counter);                                 counter = 0;                             });                          ProduceEvents(transform);                         break;                     }             }
