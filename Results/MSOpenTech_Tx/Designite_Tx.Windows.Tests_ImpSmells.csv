Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_Parse_Format,The length of the statement  "            Assert.AreEqual("Parsed request (request pointer 18446738026454074672' method 4) with URI http://georgis2:80/windir.txt"' msg);" is 127.
Long Statement,Tx.Windows.Tests,W3CTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\W3CTest.cs,W3C_Parsing,The length of the statement  "            Assert.AreEqual(@"Mozilla/5.0+(compatible;+MSIE+10.0;+Windows+NT+6.2;+WOW64;+Trident/6.0)"' @event.cs_User_Agent' false' CultureInfo.InvariantCulture);" is 151.
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwObservableFirst,The following statement contains a magic number: observable                 .Take(1)                 .Do(                 nativeEvent =>                 {                     try                     {                         Assert.AreEqual(new Guid("00000100-0000-0003-193d-42fb30bbcb01")' nativeEvent.ActivityId);                         Assert.AreEqual(16' nativeEvent.Channel);                         Assert.AreEqual(0' nativeEvent.EventProperty);                         Assert.IsNotNull(nativeEvent.ExtendedData);                         Assert.AreEqual(0' nativeEvent.ExtendedDataCount);                         Assert.AreEqual(576' nativeEvent.Flags);                         Assert.AreEqual(0' nativeEvent.HeaderType);                         Assert.AreEqual(21' nativeEvent.Id);                         Assert.AreEqual(9223372036854775824L' nativeEvent.Keyword);                         Assert.AreEqual(4' nativeEvent.Level);                         Assert.AreEqual(28' nativeEvent.Opcode);                         Assert.AreEqual((uint)0' nativeEvent.ProcessId);                         Assert.AreEqual((uint)677443' nativeEvent.ProcessorTime);                         Assert.AreEqual((ushort)152' nativeEvent.Size);                         Assert.AreEqual((ushort)4' nativeEvent.Task);                         Assert.AreEqual(new Guid("dd5ef90a-6398-47a4-ad34-4dcecdef795f")' nativeEvent.ProviderId);                         Assert.AreEqual((uint)0' nativeEvent.ThreadId);                         Assert.AreEqual(DateTimeOffset.FromFileTime(129402940472257591L)' nativeEvent.TimeStamp);                         Assert.AreEqual(129402940472257591L' nativeEvent.TimeStampRaw);                         Assert.IsNotNull(nativeEvent.UserContext);                         Assert.IsNotNull(nativeEvent.UserData);                         Assert.AreEqual((ushort)72' nativeEvent.UserDataLength);                         Assert.AreEqual(0' nativeEvent.Version);                     }                     catch (AssertFailedException assertError)                     {                         failureMessage = assertError.Message;                     }                 })                 .Wait();
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwObservableFirst,The following statement contains a magic number: observable                 .Take(1)                 .Do(                 nativeEvent =>                 {                     try                     {                         Assert.AreEqual(new Guid("00000100-0000-0003-193d-42fb30bbcb01")' nativeEvent.ActivityId);                         Assert.AreEqual(16' nativeEvent.Channel);                         Assert.AreEqual(0' nativeEvent.EventProperty);                         Assert.IsNotNull(nativeEvent.ExtendedData);                         Assert.AreEqual(0' nativeEvent.ExtendedDataCount);                         Assert.AreEqual(576' nativeEvent.Flags);                         Assert.AreEqual(0' nativeEvent.HeaderType);                         Assert.AreEqual(21' nativeEvent.Id);                         Assert.AreEqual(9223372036854775824L' nativeEvent.Keyword);                         Assert.AreEqual(4' nativeEvent.Level);                         Assert.AreEqual(28' nativeEvent.Opcode);                         Assert.AreEqual((uint)0' nativeEvent.ProcessId);                         Assert.AreEqual((uint)677443' nativeEvent.ProcessorTime);                         Assert.AreEqual((ushort)152' nativeEvent.Size);                         Assert.AreEqual((ushort)4' nativeEvent.Task);                         Assert.AreEqual(new Guid("dd5ef90a-6398-47a4-ad34-4dcecdef795f")' nativeEvent.ProviderId);                         Assert.AreEqual((uint)0' nativeEvent.ThreadId);                         Assert.AreEqual(DateTimeOffset.FromFileTime(129402940472257591L)' nativeEvent.TimeStamp);                         Assert.AreEqual(129402940472257591L' nativeEvent.TimeStampRaw);                         Assert.IsNotNull(nativeEvent.UserContext);                         Assert.IsNotNull(nativeEvent.UserData);                         Assert.AreEqual((ushort)72' nativeEvent.UserDataLength);                         Assert.AreEqual(0' nativeEvent.Version);                     }                     catch (AssertFailedException assertError)                     {                         failureMessage = assertError.Message;                     }                 })                 .Wait();
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwObservableFirst,The following statement contains a magic number: observable                 .Take(1)                 .Do(                 nativeEvent =>                 {                     try                     {                         Assert.AreEqual(new Guid("00000100-0000-0003-193d-42fb30bbcb01")' nativeEvent.ActivityId);                         Assert.AreEqual(16' nativeEvent.Channel);                         Assert.AreEqual(0' nativeEvent.EventProperty);                         Assert.IsNotNull(nativeEvent.ExtendedData);                         Assert.AreEqual(0' nativeEvent.ExtendedDataCount);                         Assert.AreEqual(576' nativeEvent.Flags);                         Assert.AreEqual(0' nativeEvent.HeaderType);                         Assert.AreEqual(21' nativeEvent.Id);                         Assert.AreEqual(9223372036854775824L' nativeEvent.Keyword);                         Assert.AreEqual(4' nativeEvent.Level);                         Assert.AreEqual(28' nativeEvent.Opcode);                         Assert.AreEqual((uint)0' nativeEvent.ProcessId);                         Assert.AreEqual((uint)677443' nativeEvent.ProcessorTime);                         Assert.AreEqual((ushort)152' nativeEvent.Size);                         Assert.AreEqual((ushort)4' nativeEvent.Task);                         Assert.AreEqual(new Guid("dd5ef90a-6398-47a4-ad34-4dcecdef795f")' nativeEvent.ProviderId);                         Assert.AreEqual((uint)0' nativeEvent.ThreadId);                         Assert.AreEqual(DateTimeOffset.FromFileTime(129402940472257591L)' nativeEvent.TimeStamp);                         Assert.AreEqual(129402940472257591L' nativeEvent.TimeStampRaw);                         Assert.IsNotNull(nativeEvent.UserContext);                         Assert.IsNotNull(nativeEvent.UserData);                         Assert.AreEqual((ushort)72' nativeEvent.UserDataLength);                         Assert.AreEqual(0' nativeEvent.Version);                     }                     catch (AssertFailedException assertError)                     {                         failureMessage = assertError.Message;                     }                 })                 .Wait();
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwObservableFirst,The following statement contains a magic number: observable                 .Take(1)                 .Do(                 nativeEvent =>                 {                     try                     {                         Assert.AreEqual(new Guid("00000100-0000-0003-193d-42fb30bbcb01")' nativeEvent.ActivityId);                         Assert.AreEqual(16' nativeEvent.Channel);                         Assert.AreEqual(0' nativeEvent.EventProperty);                         Assert.IsNotNull(nativeEvent.ExtendedData);                         Assert.AreEqual(0' nativeEvent.ExtendedDataCount);                         Assert.AreEqual(576' nativeEvent.Flags);                         Assert.AreEqual(0' nativeEvent.HeaderType);                         Assert.AreEqual(21' nativeEvent.Id);                         Assert.AreEqual(9223372036854775824L' nativeEvent.Keyword);                         Assert.AreEqual(4' nativeEvent.Level);                         Assert.AreEqual(28' nativeEvent.Opcode);                         Assert.AreEqual((uint)0' nativeEvent.ProcessId);                         Assert.AreEqual((uint)677443' nativeEvent.ProcessorTime);                         Assert.AreEqual((ushort)152' nativeEvent.Size);                         Assert.AreEqual((ushort)4' nativeEvent.Task);                         Assert.AreEqual(new Guid("dd5ef90a-6398-47a4-ad34-4dcecdef795f")' nativeEvent.ProviderId);                         Assert.AreEqual((uint)0' nativeEvent.ThreadId);                         Assert.AreEqual(DateTimeOffset.FromFileTime(129402940472257591L)' nativeEvent.TimeStamp);                         Assert.AreEqual(129402940472257591L' nativeEvent.TimeStampRaw);                         Assert.IsNotNull(nativeEvent.UserContext);                         Assert.IsNotNull(nativeEvent.UserData);                         Assert.AreEqual((ushort)72' nativeEvent.UserDataLength);                         Assert.AreEqual(0' nativeEvent.Version);                     }                     catch (AssertFailedException assertError)                     {                         failureMessage = assertError.Message;                     }                 })                 .Wait();
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwObservableFirst,The following statement contains a magic number: observable                 .Take(1)                 .Do(                 nativeEvent =>                 {                     try                     {                         Assert.AreEqual(new Guid("00000100-0000-0003-193d-42fb30bbcb01")' nativeEvent.ActivityId);                         Assert.AreEqual(16' nativeEvent.Channel);                         Assert.AreEqual(0' nativeEvent.EventProperty);                         Assert.IsNotNull(nativeEvent.ExtendedData);                         Assert.AreEqual(0' nativeEvent.ExtendedDataCount);                         Assert.AreEqual(576' nativeEvent.Flags);                         Assert.AreEqual(0' nativeEvent.HeaderType);                         Assert.AreEqual(21' nativeEvent.Id);                         Assert.AreEqual(9223372036854775824L' nativeEvent.Keyword);                         Assert.AreEqual(4' nativeEvent.Level);                         Assert.AreEqual(28' nativeEvent.Opcode);                         Assert.AreEqual((uint)0' nativeEvent.ProcessId);                         Assert.AreEqual((uint)677443' nativeEvent.ProcessorTime);                         Assert.AreEqual((ushort)152' nativeEvent.Size);                         Assert.AreEqual((ushort)4' nativeEvent.Task);                         Assert.AreEqual(new Guid("dd5ef90a-6398-47a4-ad34-4dcecdef795f")' nativeEvent.ProviderId);                         Assert.AreEqual((uint)0' nativeEvent.ThreadId);                         Assert.AreEqual(DateTimeOffset.FromFileTime(129402940472257591L)' nativeEvent.TimeStamp);                         Assert.AreEqual(129402940472257591L' nativeEvent.TimeStampRaw);                         Assert.IsNotNull(nativeEvent.UserContext);                         Assert.IsNotNull(nativeEvent.UserData);                         Assert.AreEqual((ushort)72' nativeEvent.UserDataLength);                         Assert.AreEqual(0' nativeEvent.Version);                     }                     catch (AssertFailedException assertError)                     {                         failureMessage = assertError.Message;                     }                 })                 .Wait();
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwObservableFirst,The following statement contains a magic number: observable                 .Take(1)                 .Do(                 nativeEvent =>                 {                     try                     {                         Assert.AreEqual(new Guid("00000100-0000-0003-193d-42fb30bbcb01")' nativeEvent.ActivityId);                         Assert.AreEqual(16' nativeEvent.Channel);                         Assert.AreEqual(0' nativeEvent.EventProperty);                         Assert.IsNotNull(nativeEvent.ExtendedData);                         Assert.AreEqual(0' nativeEvent.ExtendedDataCount);                         Assert.AreEqual(576' nativeEvent.Flags);                         Assert.AreEqual(0' nativeEvent.HeaderType);                         Assert.AreEqual(21' nativeEvent.Id);                         Assert.AreEqual(9223372036854775824L' nativeEvent.Keyword);                         Assert.AreEqual(4' nativeEvent.Level);                         Assert.AreEqual(28' nativeEvent.Opcode);                         Assert.AreEqual((uint)0' nativeEvent.ProcessId);                         Assert.AreEqual((uint)677443' nativeEvent.ProcessorTime);                         Assert.AreEqual((ushort)152' nativeEvent.Size);                         Assert.AreEqual((ushort)4' nativeEvent.Task);                         Assert.AreEqual(new Guid("dd5ef90a-6398-47a4-ad34-4dcecdef795f")' nativeEvent.ProviderId);                         Assert.AreEqual((uint)0' nativeEvent.ThreadId);                         Assert.AreEqual(DateTimeOffset.FromFileTime(129402940472257591L)' nativeEvent.TimeStamp);                         Assert.AreEqual(129402940472257591L' nativeEvent.TimeStampRaw);                         Assert.IsNotNull(nativeEvent.UserContext);                         Assert.IsNotNull(nativeEvent.UserData);                         Assert.AreEqual((ushort)72' nativeEvent.UserDataLength);                         Assert.AreEqual(0' nativeEvent.Version);                     }                     catch (AssertFailedException assertError)                     {                         failureMessage = assertError.Message;                     }                 })                 .Wait();
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwObservableFirst,The following statement contains a magic number: observable                 .Take(1)                 .Do(                 nativeEvent =>                 {                     try                     {                         Assert.AreEqual(new Guid("00000100-0000-0003-193d-42fb30bbcb01")' nativeEvent.ActivityId);                         Assert.AreEqual(16' nativeEvent.Channel);                         Assert.AreEqual(0' nativeEvent.EventProperty);                         Assert.IsNotNull(nativeEvent.ExtendedData);                         Assert.AreEqual(0' nativeEvent.ExtendedDataCount);                         Assert.AreEqual(576' nativeEvent.Flags);                         Assert.AreEqual(0' nativeEvent.HeaderType);                         Assert.AreEqual(21' nativeEvent.Id);                         Assert.AreEqual(9223372036854775824L' nativeEvent.Keyword);                         Assert.AreEqual(4' nativeEvent.Level);                         Assert.AreEqual(28' nativeEvent.Opcode);                         Assert.AreEqual((uint)0' nativeEvent.ProcessId);                         Assert.AreEqual((uint)677443' nativeEvent.ProcessorTime);                         Assert.AreEqual((ushort)152' nativeEvent.Size);                         Assert.AreEqual((ushort)4' nativeEvent.Task);                         Assert.AreEqual(new Guid("dd5ef90a-6398-47a4-ad34-4dcecdef795f")' nativeEvent.ProviderId);                         Assert.AreEqual((uint)0' nativeEvent.ThreadId);                         Assert.AreEqual(DateTimeOffset.FromFileTime(129402940472257591L)' nativeEvent.TimeStamp);                         Assert.AreEqual(129402940472257591L' nativeEvent.TimeStampRaw);                         Assert.IsNotNull(nativeEvent.UserContext);                         Assert.IsNotNull(nativeEvent.UserData);                         Assert.AreEqual((ushort)72' nativeEvent.UserDataLength);                         Assert.AreEqual(0' nativeEvent.Version);                     }                     catch (AssertFailedException assertError)                     {                         failureMessage = assertError.Message;                     }                 })                 .Wait();
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwObservableFirst,The following statement contains a magic number: observable                 .Take(1)                 .Do(                 nativeEvent =>                 {                     try                     {                         Assert.AreEqual(new Guid("00000100-0000-0003-193d-42fb30bbcb01")' nativeEvent.ActivityId);                         Assert.AreEqual(16' nativeEvent.Channel);                         Assert.AreEqual(0' nativeEvent.EventProperty);                         Assert.IsNotNull(nativeEvent.ExtendedData);                         Assert.AreEqual(0' nativeEvent.ExtendedDataCount);                         Assert.AreEqual(576' nativeEvent.Flags);                         Assert.AreEqual(0' nativeEvent.HeaderType);                         Assert.AreEqual(21' nativeEvent.Id);                         Assert.AreEqual(9223372036854775824L' nativeEvent.Keyword);                         Assert.AreEqual(4' nativeEvent.Level);                         Assert.AreEqual(28' nativeEvent.Opcode);                         Assert.AreEqual((uint)0' nativeEvent.ProcessId);                         Assert.AreEqual((uint)677443' nativeEvent.ProcessorTime);                         Assert.AreEqual((ushort)152' nativeEvent.Size);                         Assert.AreEqual((ushort)4' nativeEvent.Task);                         Assert.AreEqual(new Guid("dd5ef90a-6398-47a4-ad34-4dcecdef795f")' nativeEvent.ProviderId);                         Assert.AreEqual((uint)0' nativeEvent.ThreadId);                         Assert.AreEqual(DateTimeOffset.FromFileTime(129402940472257591L)' nativeEvent.TimeStamp);                         Assert.AreEqual(129402940472257591L' nativeEvent.TimeStampRaw);                         Assert.IsNotNull(nativeEvent.UserContext);                         Assert.IsNotNull(nativeEvent.UserData);                         Assert.AreEqual((ushort)72' nativeEvent.UserDataLength);                         Assert.AreEqual(0' nativeEvent.Version);                     }                     catch (AssertFailedException assertError)                     {                         failureMessage = assertError.Message;                     }                 })                 .Wait();
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwObservableFirst,The following statement contains a magic number: observable                 .Take(1)                 .Do(                 nativeEvent =>                 {                     try                     {                         Assert.AreEqual(new Guid("00000100-0000-0003-193d-42fb30bbcb01")' nativeEvent.ActivityId);                         Assert.AreEqual(16' nativeEvent.Channel);                         Assert.AreEqual(0' nativeEvent.EventProperty);                         Assert.IsNotNull(nativeEvent.ExtendedData);                         Assert.AreEqual(0' nativeEvent.ExtendedDataCount);                         Assert.AreEqual(576' nativeEvent.Flags);                         Assert.AreEqual(0' nativeEvent.HeaderType);                         Assert.AreEqual(21' nativeEvent.Id);                         Assert.AreEqual(9223372036854775824L' nativeEvent.Keyword);                         Assert.AreEqual(4' nativeEvent.Level);                         Assert.AreEqual(28' nativeEvent.Opcode);                         Assert.AreEqual((uint)0' nativeEvent.ProcessId);                         Assert.AreEqual((uint)677443' nativeEvent.ProcessorTime);                         Assert.AreEqual((ushort)152' nativeEvent.Size);                         Assert.AreEqual((ushort)4' nativeEvent.Task);                         Assert.AreEqual(new Guid("dd5ef90a-6398-47a4-ad34-4dcecdef795f")' nativeEvent.ProviderId);                         Assert.AreEqual((uint)0' nativeEvent.ThreadId);                         Assert.AreEqual(DateTimeOffset.FromFileTime(129402940472257591L)' nativeEvent.TimeStamp);                         Assert.AreEqual(129402940472257591L' nativeEvent.TimeStampRaw);                         Assert.IsNotNull(nativeEvent.UserContext);                         Assert.IsNotNull(nativeEvent.UserData);                         Assert.AreEqual((ushort)72' nativeEvent.UserDataLength);                         Assert.AreEqual(0' nativeEvent.Version);                     }                     catch (AssertFailedException assertError)                     {                         failureMessage = assertError.Message;                     }                 })                 .Wait();
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwObservableFirst,The following statement contains a magic number: observable                 .Take(1)                 .Do(                 nativeEvent =>                 {                     try                     {                         Assert.AreEqual(new Guid("00000100-0000-0003-193d-42fb30bbcb01")' nativeEvent.ActivityId);                         Assert.AreEqual(16' nativeEvent.Channel);                         Assert.AreEqual(0' nativeEvent.EventProperty);                         Assert.IsNotNull(nativeEvent.ExtendedData);                         Assert.AreEqual(0' nativeEvent.ExtendedDataCount);                         Assert.AreEqual(576' nativeEvent.Flags);                         Assert.AreEqual(0' nativeEvent.HeaderType);                         Assert.AreEqual(21' nativeEvent.Id);                         Assert.AreEqual(9223372036854775824L' nativeEvent.Keyword);                         Assert.AreEqual(4' nativeEvent.Level);                         Assert.AreEqual(28' nativeEvent.Opcode);                         Assert.AreEqual((uint)0' nativeEvent.ProcessId);                         Assert.AreEqual((uint)677443' nativeEvent.ProcessorTime);                         Assert.AreEqual((ushort)152' nativeEvent.Size);                         Assert.AreEqual((ushort)4' nativeEvent.Task);                         Assert.AreEqual(new Guid("dd5ef90a-6398-47a4-ad34-4dcecdef795f")' nativeEvent.ProviderId);                         Assert.AreEqual((uint)0' nativeEvent.ThreadId);                         Assert.AreEqual(DateTimeOffset.FromFileTime(129402940472257591L)' nativeEvent.TimeStamp);                         Assert.AreEqual(129402940472257591L' nativeEvent.TimeStampRaw);                         Assert.IsNotNull(nativeEvent.UserContext);                         Assert.IsNotNull(nativeEvent.UserData);                         Assert.AreEqual((ushort)72' nativeEvent.UserDataLength);                         Assert.AreEqual(0' nativeEvent.Version);                     }                     catch (AssertFailedException assertError)                     {                         failureMessage = assertError.Message;                     }                 })                 .Wait();
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwObservableFirst,The following statement contains a magic number: observable                 .Take(1)                 .Do(                 nativeEvent =>                 {                     try                     {                         Assert.AreEqual(new Guid("00000100-0000-0003-193d-42fb30bbcb01")' nativeEvent.ActivityId);                         Assert.AreEqual(16' nativeEvent.Channel);                         Assert.AreEqual(0' nativeEvent.EventProperty);                         Assert.IsNotNull(nativeEvent.ExtendedData);                         Assert.AreEqual(0' nativeEvent.ExtendedDataCount);                         Assert.AreEqual(576' nativeEvent.Flags);                         Assert.AreEqual(0' nativeEvent.HeaderType);                         Assert.AreEqual(21' nativeEvent.Id);                         Assert.AreEqual(9223372036854775824L' nativeEvent.Keyword);                         Assert.AreEqual(4' nativeEvent.Level);                         Assert.AreEqual(28' nativeEvent.Opcode);                         Assert.AreEqual((uint)0' nativeEvent.ProcessId);                         Assert.AreEqual((uint)677443' nativeEvent.ProcessorTime);                         Assert.AreEqual((ushort)152' nativeEvent.Size);                         Assert.AreEqual((ushort)4' nativeEvent.Task);                         Assert.AreEqual(new Guid("dd5ef90a-6398-47a4-ad34-4dcecdef795f")' nativeEvent.ProviderId);                         Assert.AreEqual((uint)0' nativeEvent.ThreadId);                         Assert.AreEqual(DateTimeOffset.FromFileTime(129402940472257591L)' nativeEvent.TimeStamp);                         Assert.AreEqual(129402940472257591L' nativeEvent.TimeStampRaw);                         Assert.IsNotNull(nativeEvent.UserContext);                         Assert.IsNotNull(nativeEvent.UserData);                         Assert.AreEqual((ushort)72' nativeEvent.UserDataLength);                         Assert.AreEqual(0' nativeEvent.Version);                     }                     catch (AssertFailedException assertError)                     {                         failureMessage = assertError.Message;                     }                 })                 .Wait();
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwObservableFirst,The following statement contains a magic number: observable                 .Take(1)                 .Do(                 nativeEvent =>                 {                     try                     {                         Assert.AreEqual(new Guid("00000100-0000-0003-193d-42fb30bbcb01")' nativeEvent.ActivityId);                         Assert.AreEqual(16' nativeEvent.Channel);                         Assert.AreEqual(0' nativeEvent.EventProperty);                         Assert.IsNotNull(nativeEvent.ExtendedData);                         Assert.AreEqual(0' nativeEvent.ExtendedDataCount);                         Assert.AreEqual(576' nativeEvent.Flags);                         Assert.AreEqual(0' nativeEvent.HeaderType);                         Assert.AreEqual(21' nativeEvent.Id);                         Assert.AreEqual(9223372036854775824L' nativeEvent.Keyword);                         Assert.AreEqual(4' nativeEvent.Level);                         Assert.AreEqual(28' nativeEvent.Opcode);                         Assert.AreEqual((uint)0' nativeEvent.ProcessId);                         Assert.AreEqual((uint)677443' nativeEvent.ProcessorTime);                         Assert.AreEqual((ushort)152' nativeEvent.Size);                         Assert.AreEqual((ushort)4' nativeEvent.Task);                         Assert.AreEqual(new Guid("dd5ef90a-6398-47a4-ad34-4dcecdef795f")' nativeEvent.ProviderId);                         Assert.AreEqual((uint)0' nativeEvent.ThreadId);                         Assert.AreEqual(DateTimeOffset.FromFileTime(129402940472257591L)' nativeEvent.TimeStamp);                         Assert.AreEqual(129402940472257591L' nativeEvent.TimeStampRaw);                         Assert.IsNotNull(nativeEvent.UserContext);                         Assert.IsNotNull(nativeEvent.UserData);                         Assert.AreEqual((ushort)72' nativeEvent.UserDataLength);                         Assert.AreEqual(0' nativeEvent.Version);                     }                     catch (AssertFailedException assertError)                     {                         failureMessage = assertError.Message;                     }                 })                 .Wait();
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwObservableTest,The following statement contains a magic number: Assert.AreEqual(2041' count);
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwFileSourceTest,The following statement contains a magic number: var parsed = from p in source                         where p.Id == 2                         select p.TimeStamp;
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwFileSourceTest,The following statement contains a magic number: var buf = parsed.Take(13).Buffer(TimeSpan.FromSeconds(1)' source.Scheduler);
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwFileSourceTest,The following statement contains a magic number: Assert.AreEqual(2' list.Count());
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwFileSourceTest,The following statement contains a magic number: Assert.AreEqual(7' list.First().Count);
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwFileSourceTest,The following statement contains a magic number: Assert.AreEqual(6' list.Skip(1).First().Count);
Magic Number,Tx.Windows.Tests,EtwTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EtwTest.cs,EtwParser,The following statement contains a magic number: Assert.AreEqual(2041' count);
Magic Number,Tx.Windows.Tests,EventNormalizerTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EventNormalizerTest.cs,EtlEventTypeStatistics,The following statement contains a magic number: Assert.AreEqual(12' list.Count());
Magic Number,Tx.Windows.Tests,EventNormalizerTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EventNormalizerTest.cs,EvtxEventTypeStatistics,The following statement contains a magic number: Assert.AreEqual(12' list.Count());
Magic Number,Tx.Windows.Tests,EventNormalizerTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EventNormalizerTest.cs,BothEtlAndEvtx,The following statement contains a magic number: Assert.AreEqual(12' list.Count());
Magic Number,Tx.Windows.Tests,EvtxTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\EvtxTest.cs,EvtxReader,The following statement contains a magic number: Assert.AreEqual(2041' count);
Magic Number,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_Parse,The following statement contains a magic number: Assert.AreEqual(291' count);
Magic Number,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_FastSend,The following statement contains a magic number: Assert.AreEqual(289' count);
Magic Number,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_WholeRequest,The following statement contains a magic number: Assert.AreEqual(289' count);
Magic Number,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_AggregateDuration,The following statement contains a magic number: var statistics = from r in requests                              group r by new                              {                                  Milliseconds = Math.Ceiling(r.Duration.TotalMilliseconds * 10) / 10'                                  Url = r.Url                              } into groups                              from c in groups.Count()                              select new                              {                                  groups.Key.Url'                                  groups.Key.Milliseconds'                                  Count = c                              };
Magic Number,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_AggregateDuration,The following statement contains a magic number: var statistics = from r in requests                              group r by new                              {                                  Milliseconds = Math.Ceiling(r.Duration.TotalMilliseconds * 10) / 10'                                  Url = r.Url                              } into groups                              from c in groups.Count()                              select new                              {                                  groups.Key.Url'                                  groups.Key.Milliseconds'                                  Count = c                              };
Magic Number,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_AggregateDuration,The following statement contains a magic number: Assert.AreEqual(7' list.Count());
Magic Number,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_SlowRequests,The following statement contains a magic number: var slow = from r in requests                        where r.Duration.TotalMilliseconds > 0.5                        select r;
Magic Number,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_SlowRequests,The following statement contains a magic number: Assert.AreEqual(2' list.Count());
Magic Number,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_SinglePass,The following statement contains a magic number: var statistics = from r in requests                              group r by new                              {                                  Milliseconds = Math.Ceiling(r.Duration.TotalMilliseconds * 10) / 10'                                  Url = r.Url                              } into groups                              from c in groups.Count()                              select new                              {                                  groups.Key.Url'                                  groups.Key.Milliseconds'                                  Count = c                              };
Magic Number,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_SinglePass,The following statement contains a magic number: var statistics = from r in requests                              group r by new                              {                                  Milliseconds = Math.Ceiling(r.Duration.TotalMilliseconds * 10) / 10'                                  Url = r.Url                              } into groups                              from c in groups.Count()                              select new                              {                                  groups.Key.Url'                                  groups.Key.Milliseconds'                                  Count = c                              };
Magic Number,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_SinglePass,The following statement contains a magic number: var slow = from r in requests                        where r.Duration.TotalMilliseconds > 0.5                        select r;
Magic Number,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_SinglePass,The following statement contains a magic number: Assert.AreEqual(7' statisticsList.Count());
Magic Number,Tx.Windows.Tests,HttpQueriesTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\HttpQueriesTest.cs,HTTP_SinglePass,The following statement contains a magic number: Assert.AreEqual(2' slowList.Count());
Magic Number,Tx.Windows.Tests,PerfCounterTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PerfCounterTest.cs,BlgCount,The following statement contains a magic number: Assert.AreEqual(6000' count);
Magic Number,Tx.Windows.Tests,PerfCounterTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PerfCounterTest.cs,BlgStatistics,The following statement contains a magic number: Assert.AreEqual(3000' count);
Magic Number,Tx.Windows.Tests,PerfCounterTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PerfCounterTest.cs,BlgPivot,The following statement contains a magic number: Assert.AreEqual(600' all.Length);
Magic Number,Tx.Windows.Tests,PerfCounterTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PerfCounterTest.cs,BlgPivotTwo,The following statement contains a magic number: Assert.AreEqual(3000' processor.Count());
Magic Number,Tx.Windows.Tests,PerfCounterTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PerfCounterTest.cs,BlgPivotTwo,The following statement contains a magic number: Assert.AreEqual(600' disk.Count());
Magic Number,Tx.Windows.Tests,PerfCounterTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PerfCounterTest.cs,BlgFirst,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(634969254188440000' TimeSpan.Zero)' result.Timestamp.ToUniversalTime());
Magic Number,Tx.Windows.Tests,PlaybackTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PlaybackTest.cs,PlayOne,The following statement contains a magic number: Assert.AreEqual(291' count);
Magic Number,Tx.Windows.Tests,PlaybackTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PlaybackTest.cs,OfType,The following statement contains a magic number: Assert.AreEqual(291' count);
Magic Number,Tx.Windows.Tests,PlaybackTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PlaybackTest.cs,PlayTwo,The following statement contains a magic number: Assert.AreEqual(291' parseCount);
Magic Number,Tx.Windows.Tests,PlaybackTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PlaybackTest.cs,PlayTwo,The following statement contains a magic number: Assert.AreEqual(289' fastSendCount);
Magic Number,Tx.Windows.Tests,PlaybackTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PlaybackTest.cs,PlayTwoBothEtlAndEvtx,The following statement contains a magic number: Assert.AreEqual(582' parseCount);
Magic Number,Tx.Windows.Tests,PlaybackTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PlaybackTest.cs,PlayTwoBothEtlAndEvtx,The following statement contains a magic number: Assert.AreEqual(578' fastSendCount);
Magic Number,Tx.Windows.Tests,PlaybackTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PlaybackTest.cs,PlayRoot,The following statement contains a magic number: Assert.AreEqual(2041' count);
Magic Number,Tx.Windows.Tests,PlaybackTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PlaybackTest.cs,PlayRootAndKnownType,The following statement contains a magic number: Assert.AreEqual(2041 + 291' count);
Magic Number,Tx.Windows.Tests,PlaybackTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PlaybackTest.cs,PlayRootAndKnownType,The following statement contains a magic number: Assert.AreEqual(2041 + 291' count);
Magic Number,Tx.Windows.Tests,PlaybackTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\PlaybackTest.cs,PlayRootAndKnownType,The following statement contains a magic number: Assert.AreEqual(291' parseCount);
Magic Number,Tx.Windows.Tests,ProcessTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\ProcessTest.cs,ProcessStartTest,The following statement contains a magic number: Assert.AreEqual(4' count);
Magic Number,Tx.Windows.Tests,ProcessTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\ProcessTest.cs,ProcessStopTest,The following statement contains a magic number: Assert.AreEqual(4' count);
Magic Number,Tx.Windows.Tests,ProcessTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\ProcessTest.cs,JoinStartStopTest,The following statement contains a magic number: Assert.AreEqual(2' count);
Magic Number,Tx.Windows.Tests,TypeStatisticsTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\TypeStatisticsTest.cs,EtwTypeStatistics,The following statement contains a magic number: Assert.AreEqual(12' stat.Statistics.Count);
Magic Number,Tx.Windows.Tests,TypeStatisticsTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\TypeStatisticsTest.cs,EvtxTypeStatistics,The following statement contains a magic number: Assert.AreEqual(12' stat.Statistics.Count);
Magic Number,Tx.Windows.Tests,W3CTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\W3CTest.cs,W3CbasicRead,The following statement contains a magic number: Assert.AreEqual(17' count);
Magic Number,Tx.Windows.Tests,W3CTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\W3CTest.cs,W3C_Parsing,The following statement contains a magic number: Assert.AreEqual(new DateTime(635063969570000000L' DateTimeKind.Unspecified)' @event.dateTime);
Magic Number,Tx.Windows.Tests,W3CTest,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Windows.Tests\W3CTest.cs,W3CPlayback,The following statement contains a magic number: Assert.AreEqual(17' count);
