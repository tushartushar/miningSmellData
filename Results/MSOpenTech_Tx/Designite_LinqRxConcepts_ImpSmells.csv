Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Reactive,ByteArrayExtensions,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\CSharp\ByteArrayExtensions.cs,ToHexDump,Cyclomatic complexity of the method is 10
Magic Number,System.Reactive,ByteArrayExtensions,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\CSharp\ByteArrayExtensions.cs,ToHexDump,The following statement contains a magic number: while (lineOffset < bytes.Length)              {                  // output line offset from the start of the buffer                  sb.Append(lineOffset.ToString("x4"));                  sb.Append(": ");                    // output hex dump                  int endOffset = Math.Min(lineOffset + 16' bytes.Length);                  int index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      if (index == 8)                          sb.Append(' ');                                             index++;                      sb.Append(bytes[byteOffset].ToString("x2"));                      sb.Append(' ');                  }                    // fill in the blanks if we cut off without completing entire line                  int lineLength = endOffset - lineOffset;                  if (lineLength < 16)                  {                      for (int i = lineLength; i < 16; i++ )                      {                          if (index == 8)                              sb.Append(' ');                            index++;                                                    sb.Append("   ");                      }                  }                    sb.Append("  ");                    // output character dump                  index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      index++;                      byte b = bytes[byteOffset];                      if (b > 32)                          sb.Append((char)b);                      else                          sb.Append('.');                        if (index == 8)                          sb.Append(' ');                  }                    sb.AppendLine();                  lineOffset += 16;              }
Magic Number,System.Reactive,ByteArrayExtensions,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\CSharp\ByteArrayExtensions.cs,ToHexDump,The following statement contains a magic number: while (lineOffset < bytes.Length)              {                  // output line offset from the start of the buffer                  sb.Append(lineOffset.ToString("x4"));                  sb.Append(": ");                    // output hex dump                  int endOffset = Math.Min(lineOffset + 16' bytes.Length);                  int index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      if (index == 8)                          sb.Append(' ');                                             index++;                      sb.Append(bytes[byteOffset].ToString("x2"));                      sb.Append(' ');                  }                    // fill in the blanks if we cut off without completing entire line                  int lineLength = endOffset - lineOffset;                  if (lineLength < 16)                  {                      for (int i = lineLength; i < 16; i++ )                      {                          if (index == 8)                              sb.Append(' ');                            index++;                                                    sb.Append("   ");                      }                  }                    sb.Append("  ");                    // output character dump                  index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      index++;                      byte b = bytes[byteOffset];                      if (b > 32)                          sb.Append((char)b);                      else                          sb.Append('.');                        if (index == 8)                          sb.Append(' ');                  }                    sb.AppendLine();                  lineOffset += 16;              }
Magic Number,System.Reactive,ByteArrayExtensions,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\CSharp\ByteArrayExtensions.cs,ToHexDump,The following statement contains a magic number: while (lineOffset < bytes.Length)              {                  // output line offset from the start of the buffer                  sb.Append(lineOffset.ToString("x4"));                  sb.Append(": ");                    // output hex dump                  int endOffset = Math.Min(lineOffset + 16' bytes.Length);                  int index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      if (index == 8)                          sb.Append(' ');                                             index++;                      sb.Append(bytes[byteOffset].ToString("x2"));                      sb.Append(' ');                  }                    // fill in the blanks if we cut off without completing entire line                  int lineLength = endOffset - lineOffset;                  if (lineLength < 16)                  {                      for (int i = lineLength; i < 16; i++ )                      {                          if (index == 8)                              sb.Append(' ');                            index++;                                                    sb.Append("   ");                      }                  }                    sb.Append("  ");                    // output character dump                  index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      index++;                      byte b = bytes[byteOffset];                      if (b > 32)                          sb.Append((char)b);                      else                          sb.Append('.');                        if (index == 8)                          sb.Append(' ');                  }                    sb.AppendLine();                  lineOffset += 16;              }
Magic Number,System.Reactive,ByteArrayExtensions,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\CSharp\ByteArrayExtensions.cs,ToHexDump,The following statement contains a magic number: while (lineOffset < bytes.Length)              {                  // output line offset from the start of the buffer                  sb.Append(lineOffset.ToString("x4"));                  sb.Append(": ");                    // output hex dump                  int endOffset = Math.Min(lineOffset + 16' bytes.Length);                  int index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      if (index == 8)                          sb.Append(' ');                                             index++;                      sb.Append(bytes[byteOffset].ToString("x2"));                      sb.Append(' ');                  }                    // fill in the blanks if we cut off without completing entire line                  int lineLength = endOffset - lineOffset;                  if (lineLength < 16)                  {                      for (int i = lineLength; i < 16; i++ )                      {                          if (index == 8)                              sb.Append(' ');                            index++;                                                    sb.Append("   ");                      }                  }                    sb.Append("  ");                    // output character dump                  index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      index++;                      byte b = bytes[byteOffset];                      if (b > 32)                          sb.Append((char)b);                      else                          sb.Append('.');                        if (index == 8)                          sb.Append(' ');                  }                    sb.AppendLine();                  lineOffset += 16;              }
Magic Number,System.Reactive,ByteArrayExtensions,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\CSharp\ByteArrayExtensions.cs,ToHexDump,The following statement contains a magic number: while (lineOffset < bytes.Length)              {                  // output line offset from the start of the buffer                  sb.Append(lineOffset.ToString("x4"));                  sb.Append(": ");                    // output hex dump                  int endOffset = Math.Min(lineOffset + 16' bytes.Length);                  int index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      if (index == 8)                          sb.Append(' ');                                             index++;                      sb.Append(bytes[byteOffset].ToString("x2"));                      sb.Append(' ');                  }                    // fill in the blanks if we cut off without completing entire line                  int lineLength = endOffset - lineOffset;                  if (lineLength < 16)                  {                      for (int i = lineLength; i < 16; i++ )                      {                          if (index == 8)                              sb.Append(' ');                            index++;                                                    sb.Append("   ");                      }                  }                    sb.Append("  ");                    // output character dump                  index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      index++;                      byte b = bytes[byteOffset];                      if (b > 32)                          sb.Append((char)b);                      else                          sb.Append('.');                        if (index == 8)                          sb.Append(' ');                  }                    sb.AppendLine();                  lineOffset += 16;              }
Magic Number,System.Reactive,ByteArrayExtensions,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\CSharp\ByteArrayExtensions.cs,ToHexDump,The following statement contains a magic number: while (lineOffset < bytes.Length)              {                  // output line offset from the start of the buffer                  sb.Append(lineOffset.ToString("x4"));                  sb.Append(": ");                    // output hex dump                  int endOffset = Math.Min(lineOffset + 16' bytes.Length);                  int index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      if (index == 8)                          sb.Append(' ');                                             index++;                      sb.Append(bytes[byteOffset].ToString("x2"));                      sb.Append(' ');                  }                    // fill in the blanks if we cut off without completing entire line                  int lineLength = endOffset - lineOffset;                  if (lineLength < 16)                  {                      for (int i = lineLength; i < 16; i++ )                      {                          if (index == 8)                              sb.Append(' ');                            index++;                                                    sb.Append("   ");                      }                  }                    sb.Append("  ");                    // output character dump                  index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      index++;                      byte b = bytes[byteOffset];                      if (b > 32)                          sb.Append((char)b);                      else                          sb.Append('.');                        if (index == 8)                          sb.Append(' ');                  }                    sb.AppendLine();                  lineOffset += 16;              }
Magic Number,System.Reactive,ByteArrayExtensions,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\CSharp\ByteArrayExtensions.cs,ToHexDump,The following statement contains a magic number: while (lineOffset < bytes.Length)              {                  // output line offset from the start of the buffer                  sb.Append(lineOffset.ToString("x4"));                  sb.Append(": ");                    // output hex dump                  int endOffset = Math.Min(lineOffset + 16' bytes.Length);                  int index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      if (index == 8)                          sb.Append(' ');                                             index++;                      sb.Append(bytes[byteOffset].ToString("x2"));                      sb.Append(' ');                  }                    // fill in the blanks if we cut off without completing entire line                  int lineLength = endOffset - lineOffset;                  if (lineLength < 16)                  {                      for (int i = lineLength; i < 16; i++ )                      {                          if (index == 8)                              sb.Append(' ');                            index++;                                                    sb.Append("   ");                      }                  }                    sb.Append("  ");                    // output character dump                  index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      index++;                      byte b = bytes[byteOffset];                      if (b > 32)                          sb.Append((char)b);                      else                          sb.Append('.');                        if (index == 8)                          sb.Append(' ');                  }                    sb.AppendLine();                  lineOffset += 16;              }
Magic Number,System.Reactive,ByteArrayExtensions,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\CSharp\ByteArrayExtensions.cs,ToHexDump,The following statement contains a magic number: while (lineOffset < bytes.Length)              {                  // output line offset from the start of the buffer                  sb.Append(lineOffset.ToString("x4"));                  sb.Append(": ");                    // output hex dump                  int endOffset = Math.Min(lineOffset + 16' bytes.Length);                  int index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      if (index == 8)                          sb.Append(' ');                                             index++;                      sb.Append(bytes[byteOffset].ToString("x2"));                      sb.Append(' ');                  }                    // fill in the blanks if we cut off without completing entire line                  int lineLength = endOffset - lineOffset;                  if (lineLength < 16)                  {                      for (int i = lineLength; i < 16; i++ )                      {                          if (index == 8)                              sb.Append(' ');                            index++;                                                    sb.Append("   ");                      }                  }                    sb.Append("  ");                    // output character dump                  index = 0;                  for (int byteOffset = lineOffset; byteOffset < endOffset; byteOffset++)                  {                      index++;                      byte b = bytes[byteOffset];                      if (b > 32)                          sb.Append((char)b);                      else                          sb.Append('.');                        if (index == 8)                          sb.Append(' ');                  }                    sb.AppendLine();                  lineOffset += 16;              }
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,ExensionMethods,The following statement contains a magic number: byte[] buffer = new byte[42];
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,FunctionsAndAnonymousMethods,The following statement contains a magic number: Func<int' bool> isEven = i => (i % 2) == 0;
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,FunctionsAndAnonymousMethods,The following statement contains a magic number: Console.WriteLine(isEven(5));
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,FunctionsAndAnonymousMethods,The following statement contains a magic number: Console.WriteLine(isIncrementing(2));
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,FunctionsAndAnonymousMethods,The following statement contains a magic number: Console.WriteLine(isIncrementing(2));
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,FunctionsAndAnonymousMethods,The following statement contains a magic number: Console.WriteLine(isIncrementing(3));
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,LinqToObjects,The following statement contains a magic number: IEnumerable<string> pipeline = EvtxEnumerable.ReadLog("Security")                  .Take(1000)                       .Where(e => e.Id == 4688)                  .Select(e => e.ToXml())                  .ToArray();
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,LinqToObjects,The following statement contains a magic number: IEnumerable<string> pipeline = EvtxEnumerable.ReadLog("Security")                  .Take(1000)                       .Where(e => e.Id == 4688)                  .Select(e => e.ToXml())                  .ToArray();
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,LinqToObjects,The following statement contains a magic number: IEnumerable<string> query = (                              from e in EvtxEnumerable.ReadLog("Security").Take(1000)                              where e.Id == 4688                              select e.ToXml()                          ).ToArray();
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,LinqToObjects,The following statement contains a magic number: IEnumerable<string> query = (                              from e in EvtxEnumerable.ReadLog("Security").Take(1000)                              where e.Id == 4688                              select e.ToXml()                          ).ToArray();
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,LinqOperators,The following statement contains a magic number: var processStart = all.Filter(e => e.Id == 4688).Take(10);
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,LinqOperators,The following statement contains a magic number: var processStart = all.Filter(e => e.Id == 4688).Take(10);
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,LinqOperators,The following statement contains a magic number: foreach(var ps in processStart)              {                  Console.WriteLine(ps.Properties[5].Value);              }
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,RxOperators,The following statement contains a magic number: var result = all                  .Where(e => e.Id == 4688)                  .Select(e => e.ToXml())                  .Select(xml => Xml2Dynamic(xml))                  .Select(d => Dynamic2Csv(d));
Magic Number,LinqAndRxConcepts,Program,C:\repos\MSOpenTech_Tx\Samples\LinqRxConcepts\Program.cs,PushInsidePull,The following statement contains a magic number: IEnumerable<string> all = EvtxEnumerable.ReadLog("Security")                  .Take(1000)                  .Select(e => e.ToXml())                  .ToArray();
