Implementation smell,Namespace,Class,File,Method,Description
Long Method,Tx.Windows,EtwTypeMap,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwTypeMap.cs,GetTransform,The method has 144 lines of code.
Long Parameter List,Tx.Windows,ManifestEventAttribute,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\Configuration\ManifestEventAttribute.cs,ManifestEventAttribute,The method has 7 parameters. Parameters: providerGuid' eventId' version' opcode' level' channel' keywords
Long Parameter List,Tx.Windows,EtwFileReader,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwFileReader.cs,EtwFileReader,The method has 5 parameters. Parameters: observer' sequential' startTime' endTime' etlFiles
Long Parameter List,Tx.Windows,EtwNativeMethods,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeMethods.cs,TdhGetEventInformation,The method has 5 parameters. Parameters: Event' TdhContextCount' TdhContext' eventInfoPtr' BufferSize
Long Parameter List,Tx.Windows,PdhNativeMethods,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\PerfCounters\PdhNativeMethods.cs,PdhGetFormattedCounterArray,The method has 5 parameters. Parameters: phCounter' dwFormat' dwBufferSize' dwBufferCount' itemBuffer
Long Parameter List,Tx.Windows,PdhNativeMethods,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\PerfCounters\PdhNativeMethods.cs,PdhEnumObjects,The method has 6 parameters. Parameters: szDataSource' szMachineName' mszObjectList' pcchBufferLength' dwDetailLevel' bRefresh
Long Parameter List,Tx.Windows,PdhNativeMethods,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\PerfCounters\PdhNativeMethods.cs,PdhEnumObjectItems,The method has 9 parameters. Parameters: szDataSource' szMachineName' szObjectName' mszCounterList' pcchCounterListLength' mszInstanceList' pcchInstanceListLength' dwDetailLevel' dwFlags
Long Parameter List,Tx.Windows,PdhUtils,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\PerfCounters\PdhUtils.cs,GetCounterAndInstanceList,The method has 5 parameters. Parameters: logFilename' machineName' objectName' counterList' instanceList
Long Identifier,Tx.Windows,EtwNativeMethods,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeMethods.cs,,The length of the parameter EVENT_HEADER_FLAG_32_BIT_HEADER is 31.
Long Identifier,Tx.Windows,EtwNativeMethods,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeMethods.cs,,The length of the parameter EVENT_HEADER_FLAG_64_BIT_HEADER is 31.
Long Identifier,Tx.Windows,EtwNativeMethods,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeMethods.cs,,The length of the parameter EVENT_HEADER_FLAG_PROCESSOR_INDEX is 33.
Long Statement,Tx.Windows,EvtxManifestTypeMap,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\Evtx\EvtxManifestTypeMap.cs,GetInputKey,The length of the statement  "                    ProviderId = evt.ProviderId.HasValue ? evt.ProviderId.Value : Guid.Empty' // looks like in evtx files we can also have name instead of Guid? " is 140.
Complex Conditional,Tx.Windows,PerfCounterReader,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\PerfCounters\PerfCounteReader.cs,ProduceCounterSamples,The conditional expression  "status == PdhStatus.PDH_INVALID_DATA                          || status == PdhStatus.PDH_CALC_NEGATIVE_VALUE                          || status == PdhStatus.PDH_CALC_NEGATIVE_DENOMINATOR                          || status == PdhStatus.PDH_CALC_NEGATIVE_TIMEBASE"  is complex.
Magic Number,Tx.Windows,EtwFileReader,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwFileReader.cs,TryConvertToFILETIME,The following statement contains a magic number: fileTime.dwHighDateTime = (int)(lfileTime >> 32);
Magic Number,Tx.Windows,EtwNativeEvent,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeEvent.cs,ReadBoolean,The following statement contains a magic number: _data += 4;
Magic Number,Tx.Windows,EtwNativeEvent,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeEvent.cs,ReadGuid,The following statement contains a magic number: var value = new Guid(                  *((int*) _data)'                  *((short*) (_data + 4))'                  *((short*) (_data + 6))'                  *(_data + 8)'                  *(_data + 9)'                  *(_data + 10)'                  *(_data + 11)'                  *(_data + 12)'                  *(_data + 13)'                  *(_data + 14)'                  *(_data + 15));
Magic Number,Tx.Windows,EtwNativeEvent,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeEvent.cs,ReadGuid,The following statement contains a magic number: var value = new Guid(                  *((int*) _data)'                  *((short*) (_data + 4))'                  *((short*) (_data + 6))'                  *(_data + 8)'                  *(_data + 9)'                  *(_data + 10)'                  *(_data + 11)'                  *(_data + 12)'                  *(_data + 13)'                  *(_data + 14)'                  *(_data + 15));
Magic Number,Tx.Windows,EtwNativeEvent,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeEvent.cs,ReadGuid,The following statement contains a magic number: var value = new Guid(                  *((int*) _data)'                  *((short*) (_data + 4))'                  *((short*) (_data + 6))'                  *(_data + 8)'                  *(_data + 9)'                  *(_data + 10)'                  *(_data + 11)'                  *(_data + 12)'                  *(_data + 13)'                  *(_data + 14)'                  *(_data + 15));
Magic Number,Tx.Windows,EtwNativeEvent,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeEvent.cs,ReadGuid,The following statement contains a magic number: var value = new Guid(                  *((int*) _data)'                  *((short*) (_data + 4))'                  *((short*) (_data + 6))'                  *(_data + 8)'                  *(_data + 9)'                  *(_data + 10)'                  *(_data + 11)'                  *(_data + 12)'                  *(_data + 13)'                  *(_data + 14)'                  *(_data + 15));
Magic Number,Tx.Windows,EtwNativeEvent,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeEvent.cs,ReadGuid,The following statement contains a magic number: var value = new Guid(                  *((int*) _data)'                  *((short*) (_data + 4))'                  *((short*) (_data + 6))'                  *(_data + 8)'                  *(_data + 9)'                  *(_data + 10)'                  *(_data + 11)'                  *(_data + 12)'                  *(_data + 13)'                  *(_data + 14)'                  *(_data + 15));
Magic Number,Tx.Windows,EtwNativeEvent,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeEvent.cs,ReadGuid,The following statement contains a magic number: var value = new Guid(                  *((int*) _data)'                  *((short*) (_data + 4))'                  *((short*) (_data + 6))'                  *(_data + 8)'                  *(_data + 9)'                  *(_data + 10)'                  *(_data + 11)'                  *(_data + 12)'                  *(_data + 13)'                  *(_data + 14)'                  *(_data + 15));
Magic Number,Tx.Windows,EtwNativeEvent,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeEvent.cs,ReadGuid,The following statement contains a magic number: var value = new Guid(                  *((int*) _data)'                  *((short*) (_data + 4))'                  *((short*) (_data + 6))'                  *(_data + 8)'                  *(_data + 9)'                  *(_data + 10)'                  *(_data + 11)'                  *(_data + 12)'                  *(_data + 13)'                  *(_data + 14)'                  *(_data + 15));
Magic Number,Tx.Windows,EtwNativeEvent,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeEvent.cs,ReadGuid,The following statement contains a magic number: var value = new Guid(                  *((int*) _data)'                  *((short*) (_data + 4))'                  *((short*) (_data + 6))'                  *(_data + 8)'                  *(_data + 9)'                  *(_data + 10)'                  *(_data + 11)'                  *(_data + 12)'                  *(_data + 13)'                  *(_data + 14)'                  *(_data + 15));
Magic Number,Tx.Windows,EtwNativeEvent,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeEvent.cs,ReadGuid,The following statement contains a magic number: var value = new Guid(                  *((int*) _data)'                  *((short*) (_data + 4))'                  *((short*) (_data + 6))'                  *(_data + 8)'                  *(_data + 9)'                  *(_data + 10)'                  *(_data + 11)'                  *(_data + 12)'                  *(_data + 13)'                  *(_data + 14)'                  *(_data + 15));
Magic Number,Tx.Windows,EtwNativeEvent,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwNativeEvent.cs,ReadGuid,The following statement contains a magic number: var value = new Guid(                  *((int*) _data)'                  *((short*) (_data + 4))'                  *((short*) (_data + 6))'                  *(_data + 8)'                  *(_data + 9)'                  *(_data + 10)'                  *(_data + 11)'                  *(_data + 12)'                  *(_data + 13)'                  *(_data + 14)'                  *(_data + 15));
Magic Number,Tx.Windows,EtwObservable,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwObservable.cs,FromFiles,The following statement contains a magic number: if (etlFiles.Length == 0 || etlFiles.Length > 63)                  throw new ArgumentException("the supported count of files is from 1 to 63");
Magic Number,Tx.Windows,EtwObservable,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwObservable.cs,FromFiles,The following statement contains a magic number: if (etlFiles.Length == 0 || etlFiles.Length > 63)                  throw new ArgumentException("the supported count of files is from 1 to 63");
Magic Number,Tx.Windows,EtwTypeMap,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwTypeMap.cs,GetRelatedActivityId,The following statement contains a magic number: for (int ext = 0; ext < extendedDataCount; ext++)              {                  unsafe                  {                      EventHeaderExtendedDataItem extendedDataItem =                          *((EventHeaderExtendedDataItem*) extendedData.ToPointer());                      if (extendedDataItem.ExtType != EventHeaderExtType.RelatedActivityId)                          continue;                          var value = new byte[16];                      fixed (byte* pb = value)                      {                          TypeServiceUtil.MemCopy((byte*) extendedDataItem.DataPtr.ToPointer()' pb' 16);                      }                      relatedActivityId = new Guid(value);                      break;                  }              }
Magic Number,Tx.Windows,EtwTypeMap,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\EtwTypeMap.cs,GetRelatedActivityId,The following statement contains a magic number: for (int ext = 0; ext < extendedDataCount; ext++)              {                  unsafe                  {                      EventHeaderExtendedDataItem extendedDataItem =                          *((EventHeaderExtendedDataItem*) extendedData.ToPointer());                      if (extendedDataItem.ExtType != EventHeaderExtType.RelatedActivityId)                          continue;                          var value = new byte[16];                      fixed (byte* pb = value)                      {                          TypeServiceUtil.MemCopy((byte*) extendedDataItem.DataPtr.ToPointer()' pb' 16);                      }                      relatedActivityId = new Guid(value);                      break;                  }              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy >= 16)              {                  do                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                      ((int*) destPtr)[2] = ((int*) srcPtr)[2];                      ((int*) destPtr)[3] = ((int*) srcPtr)[3];                        destPtr += 16;                      srcPtr += 16;                  } while ((bytesToCopy -= 16) >= 16);              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy >= 16)              {                  do                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                      ((int*) destPtr)[2] = ((int*) srcPtr)[2];                      ((int*) destPtr)[3] = ((int*) srcPtr)[3];                        destPtr += 16;                      srcPtr += 16;                  } while ((bytesToCopy -= 16) >= 16);              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy >= 16)              {                  do                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                      ((int*) destPtr)[2] = ((int*) srcPtr)[2];                      ((int*) destPtr)[3] = ((int*) srcPtr)[3];                        destPtr += 16;                      srcPtr += 16;                  } while ((bytesToCopy -= 16) >= 16);              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy >= 16)              {                  do                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                      ((int*) destPtr)[2] = ((int*) srcPtr)[2];                      ((int*) destPtr)[3] = ((int*) srcPtr)[3];                        destPtr += 16;                      srcPtr += 16;                  } while ((bytesToCopy -= 16) >= 16);              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy >= 16)              {                  do                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                      ((int*) destPtr)[2] = ((int*) srcPtr)[2];                      ((int*) destPtr)[3] = ((int*) srcPtr)[3];                        destPtr += 16;                      srcPtr += 16;                  } while ((bytesToCopy -= 16) >= 16);              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy >= 16)              {                  do                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                      ((int*) destPtr)[2] = ((int*) srcPtr)[2];                      ((int*) destPtr)[3] = ((int*) srcPtr)[3];                        destPtr += 16;                      srcPtr += 16;                  } while ((bytesToCopy -= 16) >= 16);              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy >= 16)              {                  do                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                      ((int*) destPtr)[2] = ((int*) srcPtr)[2];                      ((int*) destPtr)[3] = ((int*) srcPtr)[3];                        destPtr += 16;                      srcPtr += 16;                  } while ((bytesToCopy -= 16) >= 16);              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy >= 16)              {                  do                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                      ((int*) destPtr)[2] = ((int*) srcPtr)[2];                      ((int*) destPtr)[3] = ((int*) srcPtr)[3];                        destPtr += 16;                      srcPtr += 16;                  } while ((bytesToCopy -= 16) >= 16);              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy >= 16)              {                  do                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                      ((int*) destPtr)[2] = ((int*) srcPtr)[2];                      ((int*) destPtr)[3] = ((int*) srcPtr)[3];                        destPtr += 16;                      srcPtr += 16;                  } while ((bytesToCopy -= 16) >= 16);              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy > 0) // protection against negative len and optimization for len==16*N              {                  if ((bytesToCopy & 8) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                        destPtr += 8;                      srcPtr += 8;                  }                    if ((bytesToCopy & 4) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      destPtr += 4;                      srcPtr += 4;                  }                    if ((bytesToCopy & 2) != 0)                  {                      ((short*) destPtr)[0] = ((short*) srcPtr)[0];                      destPtr += 2;                      srcPtr += 2;                  }                    if ((bytesToCopy & 1) != 0)                  {                      *destPtr = *srcPtr;                  }              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy > 0) // protection against negative len and optimization for len==16*N              {                  if ((bytesToCopy & 8) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                        destPtr += 8;                      srcPtr += 8;                  }                    if ((bytesToCopy & 4) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      destPtr += 4;                      srcPtr += 4;                  }                    if ((bytesToCopy & 2) != 0)                  {                      ((short*) destPtr)[0] = ((short*) srcPtr)[0];                      destPtr += 2;                      srcPtr += 2;                  }                    if ((bytesToCopy & 1) != 0)                  {                      *destPtr = *srcPtr;                  }              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy > 0) // protection against negative len and optimization for len==16*N              {                  if ((bytesToCopy & 8) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                        destPtr += 8;                      srcPtr += 8;                  }                    if ((bytesToCopy & 4) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      destPtr += 4;                      srcPtr += 4;                  }                    if ((bytesToCopy & 2) != 0)                  {                      ((short*) destPtr)[0] = ((short*) srcPtr)[0];                      destPtr += 2;                      srcPtr += 2;                  }                    if ((bytesToCopy & 1) != 0)                  {                      *destPtr = *srcPtr;                  }              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy > 0) // protection against negative len and optimization for len==16*N              {                  if ((bytesToCopy & 8) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                        destPtr += 8;                      srcPtr += 8;                  }                    if ((bytesToCopy & 4) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      destPtr += 4;                      srcPtr += 4;                  }                    if ((bytesToCopy & 2) != 0)                  {                      ((short*) destPtr)[0] = ((short*) srcPtr)[0];                      destPtr += 2;                      srcPtr += 2;                  }                    if ((bytesToCopy & 1) != 0)                  {                      *destPtr = *srcPtr;                  }              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy > 0) // protection against negative len and optimization for len==16*N              {                  if ((bytesToCopy & 8) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                        destPtr += 8;                      srcPtr += 8;                  }                    if ((bytesToCopy & 4) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      destPtr += 4;                      srcPtr += 4;                  }                    if ((bytesToCopy & 2) != 0)                  {                      ((short*) destPtr)[0] = ((short*) srcPtr)[0];                      destPtr += 2;                      srcPtr += 2;                  }                    if ((bytesToCopy & 1) != 0)                  {                      *destPtr = *srcPtr;                  }              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy > 0) // protection against negative len and optimization for len==16*N              {                  if ((bytesToCopy & 8) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                        destPtr += 8;                      srcPtr += 8;                  }                    if ((bytesToCopy & 4) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      destPtr += 4;                      srcPtr += 4;                  }                    if ((bytesToCopy & 2) != 0)                  {                      ((short*) destPtr)[0] = ((short*) srcPtr)[0];                      destPtr += 2;                      srcPtr += 2;                  }                    if ((bytesToCopy & 1) != 0)                  {                      *destPtr = *srcPtr;                  }              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy > 0) // protection against negative len and optimization for len==16*N              {                  if ((bytesToCopy & 8) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                        destPtr += 8;                      srcPtr += 8;                  }                    if ((bytesToCopy & 4) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      destPtr += 4;                      srcPtr += 4;                  }                    if ((bytesToCopy & 2) != 0)                  {                      ((short*) destPtr)[0] = ((short*) srcPtr)[0];                      destPtr += 2;                      srcPtr += 2;                  }                    if ((bytesToCopy & 1) != 0)                  {                      *destPtr = *srcPtr;                  }              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy > 0) // protection against negative len and optimization for len==16*N              {                  if ((bytesToCopy & 8) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                        destPtr += 8;                      srcPtr += 8;                  }                    if ((bytesToCopy & 4) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      destPtr += 4;                      srcPtr += 4;                  }                    if ((bytesToCopy & 2) != 0)                  {                      ((short*) destPtr)[0] = ((short*) srcPtr)[0];                      destPtr += 2;                      srcPtr += 2;                  }                    if ((bytesToCopy & 1) != 0)                  {                      *destPtr = *srcPtr;                  }              }
Magic Number,Tx.Windows,TypeServiceUtil,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EtwNative\TypeUtil.cs,MemCopy,The following statement contains a magic number: if (bytesToCopy > 0) // protection against negative len and optimization for len==16*N              {                  if ((bytesToCopy & 8) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      ((int*) destPtr)[1] = ((int*) srcPtr)[1];                        destPtr += 8;                      srcPtr += 8;                  }                    if ((bytesToCopy & 4) != 0)                  {                      ((int*) destPtr)[0] = ((int*) srcPtr)[0];                      destPtr += 4;                      srcPtr += 4;                  }                    if ((bytesToCopy & 2) != 0)                  {                      ((short*) destPtr)[0] = ((short*) srcPtr)[0];                      destPtr += 2;                      srcPtr += 2;                  }                    if ((bytesToCopy & 1) != 0)                  {                      *destPtr = *srcPtr;                  }              }
Magic Number,Tx.Windows,EventFormatter,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\EventFormatter.cs,CompileFormatString,The following statement contains a magic number: while (startIndex < format.Length - 1)              {                  int percentIndex = format.IndexOf('%'' startIndex); // no more arguments                    SkipEscapedPercent:                    if (percentIndex < 0)                  {                      string last = format.Substring(startIndex);                      tokens.Add(Expression.Constant(last));                      break;                  }                  if (format[percentIndex + 1] == '%') // special case %% means % escaped                  {                      percentIndex = format.IndexOf('%'' percentIndex + 2);                      goto SkipEscapedPercent;                  }                    string prefix = format.Substring(startIndex' percentIndex - startIndex);                  tokens.Add(Expression.Constant(prefix));                    int beginNumberIndex = percentIndex + 1;                  int endNumberIndex = beginNumberIndex;                  while (endNumberIndex < format.Length)                  {                      if (format[endNumberIndex] < '0' || format[endNumberIndex] > '9')                          break;                        endNumberIndex++;                  }                    string s = format.Substring(beginNumberIndex' endNumberIndex - beginNumberIndex);                  PropertyInfo p = properties[int.Parse(s) - 1]; // the indexes in the formatting strings are 1-based                  tokens.Add(                      Expression.Call(                          Expression.Property(par' p)'                          p.PropertyType.GetMethod("ToString"' new Type[] {})));                    startIndex = endNumberIndex;              }
Magic Number,Tx.Windows,W3CEnumerable,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\IIS\W3CEnumerable.cs,GetTransformExpression,The following statement contains a magic number: Expression<Func<string[]' W3CEvent>> template = (tok) => new W3CEvent { c_ip = tok[8] };
Magic Number,Tx.Windows,PerfCounterInfo,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\PerfCounters\PerfCounterInfo.cs,PerfCounterInfo,The following statement contains a magic number: if (tokens.Length < 3)              {                  _machine = Environment.MachineName;                  _counterSet = tokens[0];                  _counterName = tokens[1];              }              else              {                  _machine = tokens[0];                  _counterSet = tokens[1];                  _counterName = tokens[2];                  _counterHandle = handle;              }
Magic Number,Tx.Windows,PerfCounterInfo,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\PerfCounters\PerfCounterInfo.cs,PerfCounterInfo,The following statement contains a magic number: if (tokens.Length < 3)              {                  _machine = Environment.MachineName;                  _counterSet = tokens[0];                  _counterName = tokens[1];              }              else              {                  _machine = tokens[0];                  _counterSet = tokens[1];                  _counterName = tokens[2];                  _counterHandle = handle;              }
Magic Number,Tx.Windows,PerfCounterInfo,C:\repos\MSOpenTech_Tx\Source\Tx.Windows\PerfCounters\PerfCounterInfo.cs,PerfCounterInfo,The following statement contains a magic number: if (_counterSet.EndsWith(")"))              {                  int openIndex = _counterSet.LastIndexOf('(');                  _instance = _counterSet.Substring(openIndex + 1' _counterSet.Length - openIndex - 2);                  _counterSet = _counterSet.Substring(0' openIndex);              }
