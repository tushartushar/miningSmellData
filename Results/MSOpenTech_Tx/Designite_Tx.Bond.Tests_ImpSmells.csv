Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Tx.Bond.Tests,EnvelopeTypeMapTests,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Bond.Tests\EnvelopeTypeMapTests.cs,DeserializeJson,The length of the statement  "            var envelope = new SimpleEnvelope(Protocol.Json' new Guid("daf0be6e-da1e-5a6a-0d49-69782745c885")' Encoding.UTF8.GetBytes(@"""A"""));" is 133.
Long Statement,Tx.Bond.Tests,EnvelopeTypeMapTests,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Bond.Tests\EnvelopeTypeMapTests.cs,DeserializeBondV1,The length of the statement  "            var envelope = new SimpleEnvelope(Protocol.CompactBinaryV1' new Guid("daf0be6e-da1e-5a6a-0d49-69782745c886")' new byte[] { 41' 1' 65' 0 });" is 139.
Long Statement,Tx.Bond.Tests,EnvelopeTypeMapTests,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Bond.Tests\EnvelopeTypeMapTests.cs,DeserializeMixedStream,The length of the statement  "                new SimpleEnvelope(Protocol.Json' Guid.Parse("daf0be6e-da1e-5a6a-0d49-69782745c885")' Encoding.UTF8.GetBytes(@"""A"""))' " is 120.
Long Statement,Tx.Bond.Tests,EnvelopeTypeMapTests,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Bond.Tests\EnvelopeTypeMapTests.cs,DeserializeMixedStream,The length of the statement  "                new SimpleEnvelope(Protocol.CompactBinaryV1' new Guid("daf0be6e-da1e-5a6a-0d49-69782745c886")' new byte[] { 41' 1' 65' 0 })' " is 124.
Magic Number,Tx.Bond.Tests,EnvelopeTypeMapTests,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Bond.Tests\EnvelopeTypeMapTests.cs,DeserializeBondV1,The following statement contains a magic number: var envelope = new SimpleEnvelope(Protocol.CompactBinaryV1' new Guid("daf0be6e-da1e-5a6a-0d49-69782745c886")' new byte[] { 41' 1' 65' 0 });
Magic Number,Tx.Bond.Tests,EnvelopeTypeMapTests,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Bond.Tests\EnvelopeTypeMapTests.cs,DeserializeBondV1,The following statement contains a magic number: var envelope = new SimpleEnvelope(Protocol.CompactBinaryV1' new Guid("daf0be6e-da1e-5a6a-0d49-69782745c886")' new byte[] { 41' 1' 65' 0 });
Magic Number,Tx.Bond.Tests,EnvelopeTypeMapTests,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Bond.Tests\EnvelopeTypeMapTests.cs,DeserializeMixedStream,The following statement contains a magic number: var input = new[]             {                 new SimpleEnvelope(Protocol.Json' Guid.Parse("daf0be6e-da1e-5a6a-0d49-69782745c885")' Encoding.UTF8.GetBytes(@"""A"""))'                  new SimpleEnvelope(Protocol.Json' Guid.Parse("daf0be6e-da1e-5a6a-0d49-69782745c885")' new byte[0])'                  new SimpleEnvelope(Protocol.CompactBinaryV1' new Guid("daf0be6e-da1e-5a6a-0d49-69782745c886")' new byte[] { 41' 1' 65' 0 })'              };
Magic Number,Tx.Bond.Tests,EnvelopeTypeMapTests,C:\research\architectureSmells\repos\MSOpenTech_Tx\Test\Tx.Bond.Tests\EnvelopeTypeMapTests.cs,DeserializeMixedStream,The following statement contains a magic number: var input = new[]             {                 new SimpleEnvelope(Protocol.Json' Guid.Parse("daf0be6e-da1e-5a6a-0d49-69782745c885")' Encoding.UTF8.GetBytes(@"""A"""))'                  new SimpleEnvelope(Protocol.Json' Guid.Parse("daf0be6e-da1e-5a6a-0d49-69782745c885")' new byte[0])'                  new SimpleEnvelope(Protocol.CompactBinaryV1' new Guid("daf0be6e-da1e-5a6a-0d49-69782745c886")' new byte[] { 41' 1' 65' 0 })'              };
