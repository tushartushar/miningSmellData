Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,GetVarBindValue,Cyclomatic complexity of the method is 12
Complex Method,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeVarBinds,Cyclomatic complexity of the method is 13
Complex Method,Tx.Network.Snmp.Dynamic,TrapTypeMap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Dynamic\TrapTypeMap.cs,CreateTransform,Cyclomatic complexity of the method is 12
Complex Method,Tx.Network.Syslogs,SyslogParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Syslogs\SyslogParser.cs,Parse,Cyclomatic complexity of the method is 9
Long Parameter List,Tx.Network,IpPacketHeader,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\IpPacketHeader.cs,IpPacketHeader,The method has 12 parameters. Parameters: sourceIpAddress' destinationIpAddress' isIp6' internetHeaderLength' dscpValue' explicitCongestionNotice' ipPacketLength' fragmentGroupId' ipHeaderFlags' fragmentOffset' timeToLive' packetHeaderChecksum
Long Parameter List,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The method has 5 parameters. Parameters: receivedTime' reuseOriginalBuffer' packetBytes' offset' packetBytesLength
Long Parameter List,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,GetVarBindValue,The method has 5 parameters. Parameters: bytes' offset' length' tagInfo' value
Long Parameter List,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,MakeVarBinds,The method has 5 parameters. Parameters: varBinds' key' value' tag' varbindCount
Long Parameter List,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeClassConstructType,The method has 5 parameters. Parameters: data' offset' asn1Class' constructType' tag
Long Parameter List,Tx.Network.Snmp,SnmpDatagramV2C,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SnmpDatagram.cs,SnmpDatagramV2C,The method has 8 parameters. Parameters: receivedTime' sourceIpAddress' header' varBinds' pduType' requestId' errorStatus' errorIndex
Long Parameter List,Tx.Network.Snmp,SnmpEncodeDecoder,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SnmpEncodeDecoder.cs,NextValueLength,The method has 6 parameters. Parameters: bytes' offset' classValidations' constructValidations' typeValidations' length
Long Parameter List,Tx.Network.Syslogs,Syslog,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Syslogs\Syslog.cs,Syslog,The method has 6 parameters. Parameters: receivedTime' sourceIpAddress' severity' facility' message' namedCollectedMatches
Long Statement,Tx.Network,ByteArrayExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\ExtensionMethods.cs,ReadNetOrderUShort,The length of the statement  "            return (ushort)IPAddress.NetworkToHostOrder(((0xffff >> bitPosition) & BitConverter.ToUInt16(bytes' bufferOffset) >> bitShift)); " is 128.
Long Statement,Tx.Network,Block,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,ReadEndOfPacket,The length of the statement  "                throw new Exception("The Toatal Block Length at the end of bock " + Enum.GetName(typeof(BlockType)' this.Type) +" does not match the length");" is 142.
Long Statement,Tx.Network,BaseUdpReceiver<T>,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\BaseUdpReceiver.cs,Start,The length of the statement  "            this.socket = new Socket(AddressFamily.InterNetwork' SocketType.Raw' ProtocolType.Udp) { ReceiveBufferSize = int.MaxValue };" is 124.
Long Statement,Tx.Network,BaseUdpReceiver<T>,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\BaseUdpReceiver.cs,ReceiveCompletedHandler,The length of the statement  "                this.GetDataProcessorAndReceive(); //failed to get a processor at the beginning' try now since an enqueue was performed." is 120.
Long Statement,Tx.Network,NetworkTransformExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\NetworkTransformExtensions.cs,UdpHeaderToWireBytes,The length of the statement  "                outPacket.Write(BitConverter.GetBytes(NetworkOrderUshort(input.UdpDatagramHeader.UdpCheckSum))' 0' 2); //should be zero if we haven't calculated it yet." is 152.
Long Statement,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,ReadIPAddress,The length of the statement  "            return new System.Net.IPAddress(new byte[]{bytes[startOffset]' bytes[startOffset +1]' bytes[startOffset+2]'bytes[startOffset+3]}); " is 130.
Long Statement,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeIPAddress,The length of the statement  "            offset = bytes.EncodeClassConstructType(offset' Asn1Class.Application' ConstructType.Primitive' (byte)Asn1SnmpTag.IpAddress); " is 125.
Long Statement,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeOctetString,The length of the statement  "            offset = data.EncodeClassConstructType(offset' Asn1Class.Universal' ConstructType.Primitive' (byte)Asn1Tag.OctetString); " is 120.
Long Statement,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeOid,The length of the statement  "            offset = data.EncodeClassConstructType(offset' Asn1Class.Universal' ConstructType.Primitive' (byte)Asn1Tag.ObjectIdentifier); " is 125.
Long Statement,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The length of the statement  "            int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 }; " is 121.
Long Statement,Tx.Network.Snmp,SnmpEncodeDecoder,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SnmpEncodeDecoder.cs,ToSnmpEncodedByteArray,The length of the statement  "            offset = headerBytes.EncodeClassConstructType(offset' Asn1Class.ContextSpecific' ConstructType.Constructed' (byte)snmpPacket.PduType); " is 134.
Long Statement,Tx.Network.Snmp,SnmpEncodeDecoder,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SnmpEncodeDecoder.cs,ToSnmpEncodedByteArray,The length of the statement  "            offset = headerBytes.EncodeClassConstructType(offset' Asn1Class.Universal' ConstructType.Constructed' (byte)Asn1Tag.Sequence); " is 126.
Long Statement,Tx.Network.Snmp,SnmpEncodeDecoder,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SnmpEncodeDecoder.cs,ToSnmpEncodedByteArray,The length of the statement  "            newOffset = allBytes.EncodeClassConstructType(newOffset' Asn1Class.Universal' ConstructType.Constructed' (byte)Asn1Tag.Sequence); " is 129.
Long Statement,Tx.Network.Snmp,SnmpEncodeDecoder,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SnmpEncodeDecoder.cs,ToSnmpDatagram,The length of the statement  "                offset = bytes.NextValueLength(offset' (int)Asn1Class.Universal' (int)ConstructType.Constructed' (int)Asn1Tag.Sequence' out length); " is 132.
Long Statement,Tx.Network.Snmp,SnmpEncodeDecoder,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SnmpEncodeDecoder.cs,ToSnmpDatagram,The length of the statement  "                offset = bytes.NextValueLength(offset' (int)Asn1Class.Universal' (int)ConstructType.Constructed' (int)Asn1Tag.Sequence' out length); " is 132.
Long Statement,Tx.Network.Snmp,SnmpEncodeDecoder,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SnmpEncodeDecoder.cs,NextValueLength,The length of the statement  "                throw new DataMisalignedException("Data Malformated/Expected Asn1 Class tag is: " + ((Asn1Class)classValidations).ToString()); " is 126.
Long Statement,Tx.Network.Snmp,SnmpEncodeDecoder,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SnmpEncodeDecoder.cs,NextValueLength,The length of the statement  "                throw new DataMisalignedException("Data Malformated/Expected ConstructType tag is: " + ((ConstructType)constructValidations).ToString()); " is 137.
Long Statement,Tx.Network.Snmp,SnmpEncodeDecoder,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SnmpEncodeDecoder.cs,NextValueLength,The length of the statement  "                    throw new DataMisalignedException("Data Malformated/Expected Asn1Snmp tag is: " + ((Asn1SnmpTag)typeValidations).ToString()); " is 125.
Long Statement,Tx.Network.Snmp.Dynamic,SnmpTrapTypeMap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Dynamic\SnmpTrapTypeMap.cs,GetInputKey,The length of the statement  "            if (this.snmpDatagram == null && string.Equals(envelope.Protocol' Protocol.SnmpTrap' StringComparison.OrdinalIgnoreCase))" is 121.
Long Statement,Tx.Network.Snmp.Dynamic,TrapTypeMap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Dynamic\TrapTypeMap.cs,CreateTransform,The length of the statement  "            var varbindValueField = typeof(VarBind).GetField("Value"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.DeclaredOnly); " is 131.
Long Statement,Tx.Network.Snmp.Dynamic,TrapTypeMap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Dynamic\TrapTypeMap.cs,CreateTransform,The length of the statement  "                var foundValue = Expression.Call(getVarBindMethod' Expression.Property(parameter' pduVarBindsField)' Expression.Constant(notificationObjectIdentifier.Oid)' varbindVar); " is 168.
Long Statement,Tx.Network.Syslogs,SyslogParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Syslogs\SyslogParser.cs,Parse,The length of the statement  "            return this.Parse(receivedPacket.Data.AsByteArraySegment()' receivedPacket.ReceivedTime' receivedPacket.PacketHeader.SourceIpAddress.ToString());" is 145.
Empty Catch Block,Tx.Network,BaseUdpReceiver<T>,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\BaseUdpReceiver.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Tx.Network.Snmp.Dynamic,TrapTypeMap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Dynamic\TrapTypeMap.cs,GetSnmpDatagram,The method has an empty catch block.
Empty Catch Block,Tx.Network.Snmp.Dynamic,TrapTypeMap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Dynamic\TrapTypeMap.cs,GetRawOctetStringBytes,The method has an empty catch block.
Magic Number,Tx.Network,ByteArrayExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\ExtensionMethods.cs,ReadBits,The following statement contains a magic number: var bitShift = 8 - bitPosition - bitLength;
Magic Number,Tx.Network,ByteArrayExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\ExtensionMethods.cs,ReadNetOrderUShort,The following statement contains a magic number: var bitShift = 16 - bitPosition - bitLength;
Magic Number,Tx.Network,ByteArrayExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\ExtensionMethods.cs,ReadNetOrderUShort,The following statement contains a magic number: bytes.Length - bufferOffset < 2
Magic Number,Tx.Network,ByteArrayExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\ExtensionMethods.cs,ReadUShort,The following statement contains a magic number: bytes.Length - bufferOffset < 2
Magic Number,Tx.Network,ByteArrayExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\ExtensionMethods.cs,ReadIpAddress,The following statement contains a magic number: var ipBytes = new byte[4];
Magic Number,Tx.Network,ByteArrayExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\ExtensionMethods.cs,ReadIpAddress,The following statement contains a magic number: Array.Copy(bytes' bufferOffset' ipBytes' 0' 4);
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: var ipVers = packetBytes.ReadBits(offset' 0' 4);
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: ipVers != 4
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: var internetHeaderLength = packetBytes.ReadBits(offset++' 4' 4);
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: var internetHeaderLength = packetBytes.ReadBits(offset++' 4' 4);
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: var dscpValue = packetBytes.ReadBits(offset' 0' 6);
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: var explicitCongestionNotice = packetBytes.ReadBits(offset++' 6' 2);
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: var explicitCongestionNotice = packetBytes.ReadBits(offset++' 6' 2);
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: offset += 2;
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: offset += 2;
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: var ipHeaderFlags = packetBytes.ReadBits(offset' 0' 3);
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: var fragmentOffset = packetBytes.ReadNetOrderUShort(offset' 3' 13);
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: var fragmentOffset = packetBytes.ReadNetOrderUShort(offset' 3' 13);
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: offset += 2;
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: offset += 2;
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: offset += 4;
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: offset += 4;
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: int length = (internetHeaderLength - 5) * 4;
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: int length = (internetHeaderLength - 5) * 4;
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: internetHeaderLength > 5
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: int length = ipPacketLength - (internetHeaderLength * 4);
Magic Number,Tx.Network,PacketParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Ip\PacketParser.cs,Parse,The following statement contains a magic number: ipPacketLength > 4 * internetHeaderLength
Magic Number,Tx.Network,Pcap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\Pcap.cs,ReadFile,The following statement contains a magic number: length <= (24 + 16)
Magic Number,Tx.Network,Pcap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\Pcap.cs,ReadFile,The following statement contains a magic number: length <= (24 + 16)
Magic Number,Tx.Network,Pcap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\Pcap.cs,ReadFile,The following statement contains a magic number: pos += 24;
Magic Number,Tx.Network,Pcap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\Pcap.cs,ReadFile,The following statement contains a magic number: pos += 16;
Magic Number,Tx.Network,Pcap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\Pcap.cs,ReadFile,The following statement contains a magic number: yield return new PcapRecord                         {                             Data = data'                             NetworkId = network'                             Timestamp = new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero)                                 .AddSeconds(ts_sec + thiszone)                                 .AddMilliseconds((ts_usec == 0 || ts_usec >= 1000000) ? ts_usec : ts_usec / 1000)                         };
Magic Number,Tx.Network,Pcap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\Pcap.cs,ReadFile,The following statement contains a magic number: yield return new PcapRecord                         {                             Data = data'                             NetworkId = network'                             Timestamp = new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero)                                 .AddSeconds(ts_sec + thiszone)                                 .AddMilliseconds((ts_usec == 0 || ts_usec >= 1000000) ? ts_usec : ts_usec / 1000)                         };
Magic Number,Tx.Network,Pcap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\Pcap.cs,ReadFile,The following statement contains a magic number: yield return new PcapRecord                         {                             Data = data'                             NetworkId = network'                             Timestamp = new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero)                                 .AddSeconds(ts_sec + thiszone)                                 .AddMilliseconds((ts_usec == 0 || ts_usec >= 1000000) ? ts_usec : ts_usec / 1000)                         };
Magic Number,Tx.Network,Pcap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\Pcap.cs,ReadFile,The following statement contains a magic number: (pos + 16) < length
Magic Number,Tx.Network,Block,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,ReadAsciiOption,The following statement contains a magic number: int readLen = len + (4 - len % 4) % 4;
Magic Number,Tx.Network,Block,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,ReadAsciiOption,The following statement contains a magic number: int readLen = len + (4 - len % 4) % 4;
Magic Number,Tx.Network,Block,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,ReadAsciiOption,The following statement contains a magic number: int readLen = len + (4 - len % 4) % 4;
Magic Number,Tx.Network,Block,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,ReadBytesOption,The following statement contains a magic number: int readLen = len + (4 - len % 4) % 4;
Magic Number,Tx.Network,Block,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,ReadBytesOption,The following statement contains a magic number: int readLen = len + (4 - len % 4) % 4;
Magic Number,Tx.Network,Block,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,ReadBytesOption,The following statement contains a magic number: int readLen = len + (4 - len % 4) % 4;
Magic Number,Tx.Network,GenericBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,GenericBlock,The following statement contains a magic number: Body = reader.ReadBytes((int)Length - 12);
Magic Number,Tx.Network,EnhancedPacketBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,EnhancedPacketBlock,The following statement contains a magic number: long offset = (new DateTime(1970' 1' 1) - new DateTime(1601' 1' 1)).Ticks;
Magic Number,Tx.Network,EnhancedPacketBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,EnhancedPacketBlock,The following statement contains a magic number: long offset = (new DateTime(1970' 1' 1) - new DateTime(1601' 1' 1)).Ticks;
Magic Number,Tx.Network,EnhancedPacketBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,EnhancedPacketBlock,The following statement contains a magic number: long ticks = offset + ((timestampHigh << 32) | timestampLow) * InterfaceDescription.TimeMultiplier;
Magic Number,Tx.Network,EnhancedPacketBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,EnhancedPacketBlock,The following statement contains a magic number: uint optionsLen = Length - 8*4 - CapturedLen;
Magic Number,Tx.Network,EnhancedPacketBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,EnhancedPacketBlock,The following statement contains a magic number: uint optionsLen = Length - 8*4 - CapturedLen;
Magic Number,Tx.Network,SectionHeaderBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,SectionHeaderBlock,The following statement contains a magic number: uint optionsLen = Length - 7 * 4;
Magic Number,Tx.Network,SectionHeaderBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,SectionHeaderBlock,The following statement contains a magic number: uint optionsLen = Length - 7 * 4;
Magic Number,Tx.Network,InterfaceDescriptionBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,InterfaceDescriptionBlock,The following statement contains a magic number: uint optionsLen = Length - 5 * 4;
Magic Number,Tx.Network,InterfaceDescriptionBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,InterfaceDescriptionBlock,The following statement contains a magic number: uint optionsLen = Length - 5 * 4;
Magic Number,Tx.Network,InterfaceDescriptionBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,InterfaceDescriptionBlock,The following statement contains a magic number: TimeMultiplier = 10;
Magic Number,Tx.Network,InterfaceDescriptionBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,InterfaceDescriptionBlock,The following statement contains a magic number: switch (optionCode)                 {                     case 2:                         Name = ReadAsciiOption(reader' optionLength);                         continue;                      case 3:                         Description = ReadAsciiOption(reader' optionLength);                         continue;                      case 9:                         byte[] buffer = ReadBytesOption(reader' 1);                         byte b = buffer[0];                         if ((b & 0x80) == 0)                             TimeMultiplier = (long)(10E6 / Math.Pow(10' b));                         else                             TimeMultiplier = (long)(10E6 / Math.Pow(2' b));                         continue;                      default: // This is some unsupported option' but we still havo to read to skip it                         ReadBytesOption(reader' optionLength);                         continue;                 }
Magic Number,Tx.Network,InterfaceDescriptionBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,InterfaceDescriptionBlock,The following statement contains a magic number: switch (optionCode)                 {                     case 2:                         Name = ReadAsciiOption(reader' optionLength);                         continue;                      case 3:                         Description = ReadAsciiOption(reader' optionLength);                         continue;                      case 9:                         byte[] buffer = ReadBytesOption(reader' 1);                         byte b = buffer[0];                         if ((b & 0x80) == 0)                             TimeMultiplier = (long)(10E6 / Math.Pow(10' b));                         else                             TimeMultiplier = (long)(10E6 / Math.Pow(2' b));                         continue;                      default: // This is some unsupported option' but we still havo to read to skip it                         ReadBytesOption(reader' optionLength);                         continue;                 }
Magic Number,Tx.Network,InterfaceDescriptionBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,InterfaceDescriptionBlock,The following statement contains a magic number: switch (optionCode)                 {                     case 2:                         Name = ReadAsciiOption(reader' optionLength);                         continue;                      case 3:                         Description = ReadAsciiOption(reader' optionLength);                         continue;                      case 9:                         byte[] buffer = ReadBytesOption(reader' 1);                         byte b = buffer[0];                         if ((b & 0x80) == 0)                             TimeMultiplier = (long)(10E6 / Math.Pow(10' b));                         else                             TimeMultiplier = (long)(10E6 / Math.Pow(2' b));                         continue;                      default: // This is some unsupported option' but we still havo to read to skip it                         ReadBytesOption(reader' optionLength);                         continue;                 }
Magic Number,Tx.Network,InterfaceDescriptionBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,InterfaceDescriptionBlock,The following statement contains a magic number: switch (optionCode)                 {                     case 2:                         Name = ReadAsciiOption(reader' optionLength);                         continue;                      case 3:                         Description = ReadAsciiOption(reader' optionLength);                         continue;                      case 9:                         byte[] buffer = ReadBytesOption(reader' 1);                         byte b = buffer[0];                         if ((b & 0x80) == 0)                             TimeMultiplier = (long)(10E6 / Math.Pow(10' b));                         else                             TimeMultiplier = (long)(10E6 / Math.Pow(2' b));                         continue;                      default: // This is some unsupported option' but we still havo to read to skip it                         ReadBytesOption(reader' optionLength);                         continue;                 }
Magic Number,Tx.Network,InterfaceDescriptionBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,InterfaceDescriptionBlock,The following statement contains a magic number: switch (optionCode)                 {                     case 2:                         Name = ReadAsciiOption(reader' optionLength);                         continue;                      case 3:                         Description = ReadAsciiOption(reader' optionLength);                         continue;                      case 9:                         byte[] buffer = ReadBytesOption(reader' 1);                         byte b = buffer[0];                         if ((b & 0x80) == 0)                             TimeMultiplier = (long)(10E6 / Math.Pow(10' b));                         else                             TimeMultiplier = (long)(10E6 / Math.Pow(2' b));                         continue;                      default: // This is some unsupported option' but we still havo to read to skip it                         ReadBytesOption(reader' optionLength);                         continue;                 }
Magic Number,Tx.Network,InterfaceDescriptionBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,InterfaceDescriptionBlock,The following statement contains a magic number: switch (optionCode)                 {                     case 2:                         Name = ReadAsciiOption(reader' optionLength);                         continue;                      case 3:                         Description = ReadAsciiOption(reader' optionLength);                         continue;                      case 9:                         byte[] buffer = ReadBytesOption(reader' 1);                         byte b = buffer[0];                         if ((b & 0x80) == 0)                             TimeMultiplier = (long)(10E6 / Math.Pow(10' b));                         else                             TimeMultiplier = (long)(10E6 / Math.Pow(2' b));                         continue;                      default: // This is some unsupported option' but we still havo to read to skip it                         ReadBytesOption(reader' optionLength);                         continue;                 }
Magic Number,Tx.Network,InterfaceDescriptionBlock,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNg.cs,InterfaceDescriptionBlock,The following statement contains a magic number: switch (optionCode)                 {                     case 2:                         Name = ReadAsciiOption(reader' optionLength);                         continue;                      case 3:                         Description = ReadAsciiOption(reader' optionLength);                         continue;                      case 9:                         byte[] buffer = ReadBytesOption(reader' 1);                         byte b = buffer[0];                         if ((b & 0x80) == 0)                             TimeMultiplier = (long)(10E6 / Math.Pow(10' b));                         else                             TimeMultiplier = (long)(10E6 / Math.Pow(2' b));                         continue;                      default: // This is some unsupported option' but we still havo to read to skip it                         ReadBytesOption(reader' optionLength);                         continue;                 }
Magic Number,Tx.Network,PcapNgWriter,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNgWriter.cs,OnNext,The following statement contains a magic number: var length = 12 + (value.Length / 4 + 1) * 4;
Magic Number,Tx.Network,PcapNgWriter,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNgWriter.cs,OnNext,The following statement contains a magic number: var length = 12 + (value.Length / 4 + 1) * 4;
Magic Number,Tx.Network,PcapNgWriter,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNgWriter.cs,OnNext,The following statement contains a magic number: var length = 12 + (value.Length / 4 + 1) * 4;
Magic Number,Tx.Network,PcapNgWriter,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNgWriter.cs,OnNext,The following statement contains a magic number: var padSize = length - 12 - value.Length;
Magic Number,Tx.Network,PcapNgWriter,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNgWriter.cs,OnNext,The following statement contains a magic number: this.stream.Write(size' 0' 4);
Magic Number,Tx.Network,PcapNgWriter,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Pcap\PcapNgWriter.cs,OnNext,The following statement contains a magic number: this.stream.Write(size' 0' 4);
Magic Number,Tx.Network,Enterprises,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Enterprises.cs,GetEnterpriseName,The following statement contains a magic number: string.IsNullOrEmpty(oid) || oid.Length < 6
Magic Number,Tx.Network,Enterprises,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Enterprises.cs,GetEnterpriseName,The following statement contains a magic number: enterprise = "Unknown (" + oid.Oids[6] + ")";
Magic Number,Tx.Network,Enterprises,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Enterprises.cs,GetEnterpriseName,The following statement contains a magic number: !Names.TryGetValue(oid.Oids[6]' out enterprise)
Magic Number,Tx.Network,Enterprises,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Enterprises.cs,GetEnterpriseName,The following statement contains a magic number: oid.IsSubOid(prefixOid) && oid.Oids.Count > 6
Magic Number,Tx.Network,Extensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\Extensions.cs,ToUdpDatagram,The following statement contains a magic number: udpDatagramHeader = new UdpDatagramHeader(                     packetData.Array.ReadNetOrderUShort(packetData.Offset)'                     packetData.Array.ReadNetOrderUShort(2 + packetData.Offset)'                     packetData.Array.ReadNetOrderUShort(4 + packetData.Offset)'                     packetData.Array.ReadNetOrderUShort(6 + packetData.Offset));
Magic Number,Tx.Network,Extensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\Extensions.cs,ToUdpDatagram,The following statement contains a magic number: udpDatagramHeader = new UdpDatagramHeader(                     packetData.Array.ReadNetOrderUShort(packetData.Offset)'                     packetData.Array.ReadNetOrderUShort(2 + packetData.Offset)'                     packetData.Array.ReadNetOrderUShort(4 + packetData.Offset)'                     packetData.Array.ReadNetOrderUShort(6 + packetData.Offset));
Magic Number,Tx.Network,Extensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\Extensions.cs,ToUdpDatagram,The following statement contains a magic number: udpDatagramHeader = new UdpDatagramHeader(                     packetData.Array.ReadNetOrderUShort(packetData.Offset)'                     packetData.Array.ReadNetOrderUShort(2 + packetData.Offset)'                     packetData.Array.ReadNetOrderUShort(4 + packetData.Offset)'                     packetData.Array.ReadNetOrderUShort(6 + packetData.Offset));
Magic Number,Tx.Network,Extensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\Extensions.cs,ToUdpDatagram,The following statement contains a magic number: ipPacket.PacketData.Count > 8
Magic Number,Tx.Network,Extensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\Extensions.cs,ToUdpDatagram,The following statement contains a magic number: udpData = new ArraySegment<byte>(                     packetData.Array'                     packetData.Offset + 8'                     packetData.Count - 8);
Magic Number,Tx.Network,Extensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\Extensions.cs,ToUdpDatagram,The following statement contains a magic number: udpData = new ArraySegment<byte>(                     packetData.Array'                     packetData.Offset + 8'                     packetData.Count - 8);
Magic Number,Tx.Network,NetworkTransformExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\NetworkTransformExtensions.cs,UdpHeaderToWireBytes,The following statement contains a magic number: outPacket.Write(BitConverter.GetBytes(NetworkOrderUshort(input.UdpDatagramHeader.SourcePort))' 0' 2);
Magic Number,Tx.Network,NetworkTransformExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\NetworkTransformExtensions.cs,UdpHeaderToWireBytes,The following statement contains a magic number: outPacket.Write(BitConverter.GetBytes(NetworkOrderUshort(input.UdpDatagramHeader.DestinationPort))' 0' 2);
Magic Number,Tx.Network,NetworkTransformExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\NetworkTransformExtensions.cs,UdpHeaderToWireBytes,The following statement contains a magic number: outPacket.Write(BitConverter.GetBytes(NetworkOrderUshort(input.UdpDatagramHeader.UdpLength))' 0' 2);
Magic Number,Tx.Network,NetworkTransformExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\NetworkTransformExtensions.cs,UdpHeaderToWireBytes,The following statement contains a magic number: outPacket.Write(BitConverter.GetBytes(NetworkOrderUshort(input.UdpDatagramHeader.UdpCheckSum))' 0' 2);
Magic Number,Tx.Network,NetworkTransformExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\NetworkTransformExtensions.cs,GetInternetChecksum,The following statement contains a magic number: _input.Length % 2 != 0
Magic Number,Tx.Network,NetworkTransformExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\NetworkTransformExtensions.cs,GetInternetChecksum,The following statement contains a magic number: j < 4
Magic Number,Tx.Network,NetworkTransformExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\NetworkTransformExtensions.cs,UdpPseudoHeader,The following statement contains a magic number: builder.Write(input.PacketHeader.SourceIpAddress.GetAddressBytes()' 0' 4);
Magic Number,Tx.Network,NetworkTransformExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\NetworkTransformExtensions.cs,UdpPseudoHeader,The following statement contains a magic number: builder.Write(input.PacketHeader.DestinationIpAddress.GetAddressBytes()' 0' 4);
Magic Number,Tx.Network,NetworkTransformExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\NetworkTransformExtensions.cs,UdpPseudoHeader,The following statement contains a magic number: builder.Write(BitConverter.GetBytes(NetworkOrderUshort(input.UdpDatagramHeader.UdpLength))' 0' 2);
Magic Number,Tx.Network,NetworkTransformExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\NetworkTransformExtensions.cs,GetUdpCheckSum,The following statement contains a magic number: udpCk.Write(BitConverter.GetBytes(NetworkOrderUshort(input.UdpDatagramHeader.SourcePort))' 0' 2);
Magic Number,Tx.Network,NetworkTransformExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\NetworkTransformExtensions.cs,GetUdpCheckSum,The following statement contains a magic number: udpCk.Write(BitConverter.GetBytes(NetworkOrderUshort(input.UdpDatagramHeader.DestinationPort))' 0' 2);
Magic Number,Tx.Network,NetworkTransformExtentions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Udp\NetworkTransformExtensions.cs,GetUdpCheckSum,The following statement contains a magic number: udpCk.Write(BitConverter.GetBytes(NetworkOrderUshort(input.UdpDatagramHeader.UdpLength))' 0' 2);
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,DecodeToClassConstructType,The following statement contains a magic number: return new Asn1TagInfo((byteToDecode & 0xC0) >> 6' (byteToDecode & 0x20) >> 5' byteToDecode & 0x1F);
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,DecodeToClassConstructType,The following statement contains a magic number: return new Asn1TagInfo((byteToDecode & 0xC0) >> 6' (byteToDecode & 0x20) >> 5' byteToDecode & 0x1F);
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,ReadUnsignedInteger,The following statement contains a magic number: value = (value << 8) | bytes[i];
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,ReadInteger,The following statement contains a magic number: value = (value << 8) | bytes[i];
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,ReadLongInteger,The following statement contains a magic number: value = (value << 8) | bytes[i];
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,ReadUnsignedLong,The following statement contains a magic number: value = (value << 8) | bytes[i];
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,ReadIPAddress,The following statement contains a magic number: return new System.Net.IPAddress(new byte[]{bytes[startOffset]' bytes[startOffset +1]' bytes[startOffset+2]'bytes[startOffset+3]});
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,ReadIPAddress,The following statement contains a magic number: return new System.Net.IPAddress(new byte[]{bytes[startOffset]' bytes[startOffset +1]' bytes[startOffset+2]'bytes[startOffset+3]});
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,ReadVarBinds,The following statement contains a magic number: VarBind[] values = new VarBind[100];
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,MakeVarBinds,The following statement contains a magic number: Array.Resize(ref varBinds' length + 100);
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,ReadOids,The following statement contains a magic number: int count = 2;
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,ReadOids,The following statement contains a magic number: subId < 40
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,DecodeSubID,The following statement contains a magic number: subID <<= 7;
Magic Number,Tx.Network.Snmp,Asn1DecoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1DecoderExtensions.cs,ReadLength,The following statement contains a magic number: length <= 127
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeClassConstructType,The following statement contains a magic number: data[offset] = (byte)(((byte)asn1Class << 6) | ((byte)constructType << 5) | tag);
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeClassConstructType,The following statement contains a magic number: data[offset] = (byte)(((byte)asn1Class << 6) | ((byte)constructType << 5) | tag);
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,GetIntegerLength,The following statement contains a magic number: value <<= 8;
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeLength,The following statement contains a magic number: lengthIntegerToEncode <= 127
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeLength,The following statement contains a magic number: data[offset + lengthOfLength] = (byte)((lengthIntegerToEncode & mask) >> ((sizeof(int) - i) * 8));
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeLength,The following statement contains a magic number: mask >>= 8;
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeIPAddress,The following statement contains a magic number: offset = bytes.EncodeLength(offset' 4);
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeIPAddress,The following statement contains a magic number: return offset + 4;
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,GetStringLength,The following statement contains a magic number: return 75;
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,GetStringLength,The following statement contains a magic number: octetString.Length > 75
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeInteger,The following statement contains a magic number: value <<= 8;
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeInteger,The following statement contains a magic number: value <<= 8;
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeUnsignedInteger,The following statement contains a magic number: value <<= 8;
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeUnsignedInteger,The following statement contains a magic number: value <<= 8;
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeUnsignedLong,The following statement contains a magic number: value <<= 8;
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeUnsignedLong,The following statement contains a magic number: value <<= 8;
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,GetOidLength,The following statement contains a magic number: uint subId = (oid[0] * 40) + oid[1];
Magic Number,Tx.Network.Snmp,Asn1EncoderExtensions,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Asn1EncoderExtensions.cs,EncodeOid,The following statement contains a magic number: offset = EncodeSubID((subOids[0] * 40) + subOids[1]' data' offset);
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,ObjectIdentifier,The following statement contains a magic number: var oidArray = new uint[25];
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,ObjectIdentifier,The following statement contains a magic number: uint currentVal = oids[i] - 48u;
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,ObjectIdentifier,The following statement contains a magic number: currentVal > 9
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,ObjectIdentifier,The following statement contains a magic number: val = (val * 10) + currentVal;
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: int[] primes = new int[] { 3' 5' 7' 11' 13' 17' 19' 23' 29' 31' 37' 41' 43' 47' 53' 59' 61' 67' 71' 73' 79' 83' 89' 97 };
Magic Number,Tx.Network.Snmp,ObjectIdentifier,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\ObjectIdentifier.cs,GetHashCode,The following statement contains a magic number: j == 24
Magic Number,Tx.Network.Snmp,SnmpCapture,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SNMPCapture.cs,ParseIP,The following statement contains a magic number: return capture.Where(b => b.Type == BlockType.EnhancedPacketBlock)                 .Cast<EnhancedPacketBlock>()                 .Where(p => p.InterfaceDescription.LinkType == LinkType.ETHERNET)                 .Where(p => p.PacketData.ReadNetOrderUShort(0xc) == 0x800)                 .Select(p => PacketParser.Parse(                     DateTimeOffset.UtcNow'                      true'                     p.PacketData'                     14'                     p.PacketData.Length - 14));
Magic Number,Tx.Network.Snmp,SnmpCapture,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SNMPCapture.cs,ParseIP,The following statement contains a magic number: return capture.Where(b => b.Type == BlockType.EnhancedPacketBlock)                 .Cast<EnhancedPacketBlock>()                 .Where(p => p.InterfaceDescription.LinkType == LinkType.ETHERNET)                 .Where(p => p.PacketData.ReadNetOrderUShort(0xc) == 0x800)                 .Select(p => PacketParser.Parse(                     DateTimeOffset.UtcNow'                      true'                     p.PacketData'                     14'                     p.PacketData.Length - 14));
Magic Number,Tx.Network.Snmp,SnmpEncodeDecoder,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SnmpEncodeDecoder.cs,ToSnmpEncodedByteArray,The following statement contains a magic number: byte[] dataBytes = new byte[8194];
Magic Number,Tx.Network.Snmp,SnmpEncodeDecoder,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\SnmpEncodeDecoder.cs,ToSnmpEncodedByteArray,The following statement contains a magic number: byte[] allBytes = new byte[6];
Magic Number,Tx.Network.Snmp.Dynamic,TrapTypeMap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Dynamic\TrapTypeMap.cs,GetRawOctetStringBytes,The following statement contains a magic number: var octetCount = (octetString.Length + 1) / 3;
Magic Number,Tx.Network.Snmp.Dynamic,TrapTypeMap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Dynamic\TrapTypeMap.cs,GetRawOctetStringBytes,The following statement contains a magic number: octects[index] = Convert.ToByte(octetString.Substring(i' 2)' 16);
Magic Number,Tx.Network.Snmp.Dynamic,TrapTypeMap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Dynamic\TrapTypeMap.cs,GetRawOctetStringBytes,The following statement contains a magic number: octects[index] = Convert.ToByte(octetString.Substring(i' 2)' 16);
Magic Number,Tx.Network.Snmp.Dynamic,TrapTypeMap,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Snmp\Dynamic\TrapTypeMap.cs,GetRawOctetStringBytes,The following statement contains a magic number: (((octetString.Length + 1) % 3) == 0) && HexStringRegex.IsMatch(octetString)
Magic Number,Tx.Network.Syslogs,SyslogParser,C:\research\architectureSmells\repos\MSOpenTech_Tx\Source\Tx.Network\Syslogs\SyslogParser.cs,Parse,The following statement contains a magic number: var facility = (Facility)Enum.ToObject(typeof(Facility)' prival >> 3);
