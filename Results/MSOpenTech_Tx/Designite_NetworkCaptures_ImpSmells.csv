Implementation smell,Namespace,Class,File,Method,Description
Magic Number,NetworkCaptures,Program,C:\repos\MSOpenTech_Tx\Samples\Network\Captures\Program.cs,RawBlocks,The following statement contains a magic number: foreach (var block in PcapNg.ReadForward(fileName).Take(5))                  Console.WriteLine("{0} {1}"' block.Length' block.Type);
Magic Number,NetworkCaptures,Program,C:\repos\MSOpenTech_Tx\Samples\Network\Captures\Program.cs,CapturedPackets,The following statement contains a magic number: var packets = PcapNg.ReadForward(fileName)                  .Where(b => b.Type == BlockType.EnhancedPacketBlock)                  .Cast<EnhancedPacketBlock>()                  .Take(5);
Magic Number,NetworkCaptures,Program,C:\repos\MSOpenTech_Tx\Samples\Network\Captures\Program.cs,UdpPackets,The following statement contains a magic number: var packets = PcapNg.ReadForward(fileName)                  .Where(b => b.Type == BlockType.EnhancedPacketBlock)                  .Cast<EnhancedPacketBlock>()                  .Take(5);
Magic Number,NetworkCaptures,Program,C:\repos\MSOpenTech_Tx\Samples\Network\Captures\Program.cs,UdpPackets,The following statement contains a magic number: foreach (var packet in packets)              {                  int ipLen = packet.PacketData.Length - 14; // 14 is the size of the Ethernet header                    var ipPacket = PacketParser.Parse(                      DateTimeOffset.UtcNow'                      false'                      packet.PacketData'                      14'                      ipLen);                    Console.WriteLine(ipPacket.PacketData.Array.ToHexDump());                  Console.WriteLine();              }
Magic Number,NetworkCaptures,Program,C:\repos\MSOpenTech_Tx\Samples\Network\Captures\Program.cs,UdpPackets,The following statement contains a magic number: foreach (var packet in packets)              {                  int ipLen = packet.PacketData.Length - 14; // 14 is the size of the Ethernet header                    var ipPacket = PacketParser.Parse(                      DateTimeOffset.UtcNow'                      false'                      packet.PacketData'                      14'                      ipLen);                    Console.WriteLine(ipPacket.PacketData.Array.ToHexDump());                  Console.WriteLine();              }
Magic Number,NetworkCaptures,Program,C:\repos\MSOpenTech_Tx\Samples\Network\Captures\Program.cs,Asn1Encoding,The following statement contains a magic number: var packets = PcapNg.ReadForward(fileName)                  .Where(b => b.Type == BlockType.EnhancedPacketBlock)                  .Cast<EnhancedPacketBlock>()                  .Take(5);
Magic Number,NetworkCaptures,Program,C:\repos\MSOpenTech_Tx\Samples\Network\Captures\Program.cs,Asn1Encoding,The following statement contains a magic number: foreach (var packet in packets)              {                  int snmpLen = packet.PacketData.Length - 42; // 42 is the size of Ethernet + IP + UDP headers                    byte[] datagram = new byte[snmpLen];                  Array.Copy(packet.PacketData' 42' datagram' 0' snmpLen);                    Console.WriteLine(datagram.ToHexDump());              }
Magic Number,NetworkCaptures,Program,C:\repos\MSOpenTech_Tx\Samples\Network\Captures\Program.cs,Asn1Encoding,The following statement contains a magic number: foreach (var packet in packets)              {                  int snmpLen = packet.PacketData.Length - 42; // 42 is the size of Ethernet + IP + UDP headers                    byte[] datagram = new byte[snmpLen];                  Array.Copy(packet.PacketData' 42' datagram' 0' snmpLen);                    Console.WriteLine(datagram.ToHexDump());              }
Magic Number,NetworkCaptures,Program,C:\repos\MSOpenTech_Tx\Samples\Network\Captures\Program.cs,Snmp,The following statement contains a magic number: var snmp = PcapNg.ReadForward(fileName)                      .ParseSnmp()                      .Take(5);
