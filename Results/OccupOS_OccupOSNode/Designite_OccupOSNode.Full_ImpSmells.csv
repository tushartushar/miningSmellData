Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,BestTrackedJoint,Cyclomatic complexity of the method is 8
Complex Method,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,PollSynchronizedFrames,Cyclomatic complexity of the method is 9
Magic Number,OccupOSNode,Program,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Program.cs,Main,The following statement contains a magic number: nodeController.Start (5000' 5000' 40);  
Magic Number,OccupOSNode,Program,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Program.cs,Main,The following statement contains a magic number: nodeController.Start (5000' 5000' 40);  
Magic Number,OccupOSNode,Program,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Program.cs,Main,The following statement contains a magic number: nodeController.Start (5000' 5000' 40);  
Magic Number,OccupOSNode.NetworkControllers,FullEthernetNetworkController,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\NetworkControllers\FullEthernetController.cs,ConnectToSocket,The following statement contains a magic number: this.socket.SendTimeout = 5000;  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityCount,The following statement contains a magic number: if (this.ksensor != null && this.ksensor.Status == KinectStatus.Connected) {  	using (SkeletonFrame skeletonFrame = this.ksensor.SkeletonStream.OpenNextFrame (1000)) {  		if (skeletonFrame != null) {  			count = this.CountSkeletons (skeletonFrame);  		}  	}  }  else {  	throw new SensorNotFoundException ("Kinect sensor not found");  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityCount,The following statement contains a magic number: using (SkeletonFrame skeletonFrame = this.ksensor.SkeletonStream.OpenNextFrame (1000)) {  	if (skeletonFrame != null) {  		count = this.CountSkeletons (skeletonFrame);  	}  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: if (this.ksensor != null && this.ksensor.Status == KinectStatus.Connected) {  	SynchedFrames frames = this.PollSynchronizedFrames ();  	if (frames.s_frame != null && frames.d_frame != null) {  		int[] playerData = this.CalculatePlayerPositions (frames.s_frame' frames.d_frame);  		Position[] entityPositions = new Position[frames.s_frame.SkeletonArrayLength];  		for (int k = 0; k < entityPositions.Length; k++) {  			entityPositions [k].X = playerData [k * 3];  			entityPositions [k].Y = playerData [(k * 3) + 1];  			entityPositions [k].Depth = playerData [(k * 3) + 2];  		}  		return entityPositions;  	}  	else {  		return null;  	}  }  else {  	throw new SensorNotFoundException ("Kinect sensor not found");  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: if (this.ksensor != null && this.ksensor.Status == KinectStatus.Connected) {  	SynchedFrames frames = this.PollSynchronizedFrames ();  	if (frames.s_frame != null && frames.d_frame != null) {  		int[] playerData = this.CalculatePlayerPositions (frames.s_frame' frames.d_frame);  		Position[] entityPositions = new Position[frames.s_frame.SkeletonArrayLength];  		for (int k = 0; k < entityPositions.Length; k++) {  			entityPositions [k].X = playerData [k * 3];  			entityPositions [k].Y = playerData [(k * 3) + 1];  			entityPositions [k].Depth = playerData [(k * 3) + 2];  		}  		return entityPositions;  	}  	else {  		return null;  	}  }  else {  	throw new SensorNotFoundException ("Kinect sensor not found");  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: if (this.ksensor != null && this.ksensor.Status == KinectStatus.Connected) {  	SynchedFrames frames = this.PollSynchronizedFrames ();  	if (frames.s_frame != null && frames.d_frame != null) {  		int[] playerData = this.CalculatePlayerPositions (frames.s_frame' frames.d_frame);  		Position[] entityPositions = new Position[frames.s_frame.SkeletonArrayLength];  		for (int k = 0; k < entityPositions.Length; k++) {  			entityPositions [k].X = playerData [k * 3];  			entityPositions [k].Y = playerData [(k * 3) + 1];  			entityPositions [k].Depth = playerData [(k * 3) + 2];  		}  		return entityPositions;  	}  	else {  		return null;  	}  }  else {  	throw new SensorNotFoundException ("Kinect sensor not found");  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: if (this.ksensor != null && this.ksensor.Status == KinectStatus.Connected) {  	SynchedFrames frames = this.PollSynchronizedFrames ();  	if (frames.s_frame != null && frames.d_frame != null) {  		int[] playerData = this.CalculatePlayerPositions (frames.s_frame' frames.d_frame);  		Position[] entityPositions = new Position[frames.s_frame.SkeletonArrayLength];  		for (int k = 0; k < entityPositions.Length; k++) {  			entityPositions [k].X = playerData [k * 3];  			entityPositions [k].Y = playerData [(k * 3) + 1];  			entityPositions [k].Depth = playerData [(k * 3) + 2];  		}  		return entityPositions;  	}  	else {  		return null;  	}  }  else {  	throw new SensorNotFoundException ("Kinect sensor not found");  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: if (frames.s_frame != null && frames.d_frame != null) {  	int[] playerData = this.CalculatePlayerPositions (frames.s_frame' frames.d_frame);  	Position[] entityPositions = new Position[frames.s_frame.SkeletonArrayLength];  	for (int k = 0; k < entityPositions.Length; k++) {  		entityPositions [k].X = playerData [k * 3];  		entityPositions [k].Y = playerData [(k * 3) + 1];  		entityPositions [k].Depth = playerData [(k * 3) + 2];  	}  	return entityPositions;  }  else {  	return null;  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: if (frames.s_frame != null && frames.d_frame != null) {  	int[] playerData = this.CalculatePlayerPositions (frames.s_frame' frames.d_frame);  	Position[] entityPositions = new Position[frames.s_frame.SkeletonArrayLength];  	for (int k = 0; k < entityPositions.Length; k++) {  		entityPositions [k].X = playerData [k * 3];  		entityPositions [k].Y = playerData [(k * 3) + 1];  		entityPositions [k].Depth = playerData [(k * 3) + 2];  	}  	return entityPositions;  }  else {  	return null;  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: if (frames.s_frame != null && frames.d_frame != null) {  	int[] playerData = this.CalculatePlayerPositions (frames.s_frame' frames.d_frame);  	Position[] entityPositions = new Position[frames.s_frame.SkeletonArrayLength];  	for (int k = 0; k < entityPositions.Length; k++) {  		entityPositions [k].X = playerData [k * 3];  		entityPositions [k].Y = playerData [(k * 3) + 1];  		entityPositions [k].Depth = playerData [(k * 3) + 2];  	}  	return entityPositions;  }  else {  	return null;  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: if (frames.s_frame != null && frames.d_frame != null) {  	int[] playerData = this.CalculatePlayerPositions (frames.s_frame' frames.d_frame);  	Position[] entityPositions = new Position[frames.s_frame.SkeletonArrayLength];  	for (int k = 0; k < entityPositions.Length; k++) {  		entityPositions [k].X = playerData [k * 3];  		entityPositions [k].Y = playerData [(k * 3) + 1];  		entityPositions [k].Depth = playerData [(k * 3) + 2];  	}  	return entityPositions;  }  else {  	return null;  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: for (int k = 0; k < entityPositions.Length; k++) {  	entityPositions [k].X = playerData [k * 3];  	entityPositions [k].Y = playerData [(k * 3) + 1];  	entityPositions [k].Depth = playerData [(k * 3) + 2];  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: for (int k = 0; k < entityPositions.Length; k++) {  	entityPositions [k].X = playerData [k * 3];  	entityPositions [k].Y = playerData [(k * 3) + 1];  	entityPositions [k].Depth = playerData [(k * 3) + 2];  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: for (int k = 0; k < entityPositions.Length; k++) {  	entityPositions [k].X = playerData [k * 3];  	entityPositions [k].Y = playerData [(k * 3) + 1];  	entityPositions [k].Depth = playerData [(k * 3) + 2];  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: for (int k = 0; k < entityPositions.Length; k++) {  	entityPositions [k].X = playerData [k * 3];  	entityPositions [k].Y = playerData [(k * 3) + 1];  	entityPositions [k].Depth = playerData [(k * 3) + 2];  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: entityPositions [k].X = playerData [k * 3];  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: entityPositions [k].Y = playerData [(k * 3) + 1];  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: entityPositions [k].Depth = playerData [(k * 3) + 2];  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,GetEntityPositions,The following statement contains a magic number: entityPositions [k].Depth = playerData [(k * 3) + 2];  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,CalculatePlayerPositions,The following statement contains a magic number: foreach (Skeleton skeleton in allskeletons) {  	if (skeleton.TrackingState == SkeletonTrackingState.Tracked) {  		Joint jointpoint = this.BestTrackedJoint (skeleton);  		if (jointpoint.TrackingState == JointTrackingState.Tracked) {  			var depthImagePoint = depthFrame.MapFromSkeletonPoint (jointpoint.Position);  			pointdata [k] = depthImagePoint.Depth;  			pointdata [k + 1] = depthImagePoint.X;  			pointdata [k + 2] = depthImagePoint.Y;  		}  		else {  			pointdata [k] = 0;  			pointdata [k + 1] = 0;  			pointdata [k + 2] = 0;  		}  	}  	else {  		pointdata [k] = 0;  		pointdata [k + 1] = 0;  		pointdata [k + 2] = 0;  	}  	k += 3;  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,CalculatePlayerPositions,The following statement contains a magic number: foreach (Skeleton skeleton in allskeletons) {  	if (skeleton.TrackingState == SkeletonTrackingState.Tracked) {  		Joint jointpoint = this.BestTrackedJoint (skeleton);  		if (jointpoint.TrackingState == JointTrackingState.Tracked) {  			var depthImagePoint = depthFrame.MapFromSkeletonPoint (jointpoint.Position);  			pointdata [k] = depthImagePoint.Depth;  			pointdata [k + 1] = depthImagePoint.X;  			pointdata [k + 2] = depthImagePoint.Y;  		}  		else {  			pointdata [k] = 0;  			pointdata [k + 1] = 0;  			pointdata [k + 2] = 0;  		}  	}  	else {  		pointdata [k] = 0;  		pointdata [k + 1] = 0;  		pointdata [k + 2] = 0;  	}  	k += 3;  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,CalculatePlayerPositions,The following statement contains a magic number: foreach (Skeleton skeleton in allskeletons) {  	if (skeleton.TrackingState == SkeletonTrackingState.Tracked) {  		Joint jointpoint = this.BestTrackedJoint (skeleton);  		if (jointpoint.TrackingState == JointTrackingState.Tracked) {  			var depthImagePoint = depthFrame.MapFromSkeletonPoint (jointpoint.Position);  			pointdata [k] = depthImagePoint.Depth;  			pointdata [k + 1] = depthImagePoint.X;  			pointdata [k + 2] = depthImagePoint.Y;  		}  		else {  			pointdata [k] = 0;  			pointdata [k + 1] = 0;  			pointdata [k + 2] = 0;  		}  	}  	else {  		pointdata [k] = 0;  		pointdata [k + 1] = 0;  		pointdata [k + 2] = 0;  	}  	k += 3;  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,CalculatePlayerPositions,The following statement contains a magic number: foreach (Skeleton skeleton in allskeletons) {  	if (skeleton.TrackingState == SkeletonTrackingState.Tracked) {  		Joint jointpoint = this.BestTrackedJoint (skeleton);  		if (jointpoint.TrackingState == JointTrackingState.Tracked) {  			var depthImagePoint = depthFrame.MapFromSkeletonPoint (jointpoint.Position);  			pointdata [k] = depthImagePoint.Depth;  			pointdata [k + 1] = depthImagePoint.X;  			pointdata [k + 2] = depthImagePoint.Y;  		}  		else {  			pointdata [k] = 0;  			pointdata [k + 1] = 0;  			pointdata [k + 2] = 0;  		}  	}  	else {  		pointdata [k] = 0;  		pointdata [k + 1] = 0;  		pointdata [k + 2] = 0;  	}  	k += 3;  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,CalculatePlayerPositions,The following statement contains a magic number: if (skeleton.TrackingState == SkeletonTrackingState.Tracked) {  	Joint jointpoint = this.BestTrackedJoint (skeleton);  	if (jointpoint.TrackingState == JointTrackingState.Tracked) {  		var depthImagePoint = depthFrame.MapFromSkeletonPoint (jointpoint.Position);  		pointdata [k] = depthImagePoint.Depth;  		pointdata [k + 1] = depthImagePoint.X;  		pointdata [k + 2] = depthImagePoint.Y;  	}  	else {  		pointdata [k] = 0;  		pointdata [k + 1] = 0;  		pointdata [k + 2] = 0;  	}  }  else {  	pointdata [k] = 0;  	pointdata [k + 1] = 0;  	pointdata [k + 2] = 0;  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,CalculatePlayerPositions,The following statement contains a magic number: if (skeleton.TrackingState == SkeletonTrackingState.Tracked) {  	Joint jointpoint = this.BestTrackedJoint (skeleton);  	if (jointpoint.TrackingState == JointTrackingState.Tracked) {  		var depthImagePoint = depthFrame.MapFromSkeletonPoint (jointpoint.Position);  		pointdata [k] = depthImagePoint.Depth;  		pointdata [k + 1] = depthImagePoint.X;  		pointdata [k + 2] = depthImagePoint.Y;  	}  	else {  		pointdata [k] = 0;  		pointdata [k + 1] = 0;  		pointdata [k + 2] = 0;  	}  }  else {  	pointdata [k] = 0;  	pointdata [k + 1] = 0;  	pointdata [k + 2] = 0;  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,CalculatePlayerPositions,The following statement contains a magic number: if (skeleton.TrackingState == SkeletonTrackingState.Tracked) {  	Joint jointpoint = this.BestTrackedJoint (skeleton);  	if (jointpoint.TrackingState == JointTrackingState.Tracked) {  		var depthImagePoint = depthFrame.MapFromSkeletonPoint (jointpoint.Position);  		pointdata [k] = depthImagePoint.Depth;  		pointdata [k + 1] = depthImagePoint.X;  		pointdata [k + 2] = depthImagePoint.Y;  	}  	else {  		pointdata [k] = 0;  		pointdata [k + 1] = 0;  		pointdata [k + 2] = 0;  	}  }  else {  	pointdata [k] = 0;  	pointdata [k + 1] = 0;  	pointdata [k + 2] = 0;  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,CalculatePlayerPositions,The following statement contains a magic number: if (jointpoint.TrackingState == JointTrackingState.Tracked) {  	var depthImagePoint = depthFrame.MapFromSkeletonPoint (jointpoint.Position);  	pointdata [k] = depthImagePoint.Depth;  	pointdata [k + 1] = depthImagePoint.X;  	pointdata [k + 2] = depthImagePoint.Y;  }  else {  	pointdata [k] = 0;  	pointdata [k + 1] = 0;  	pointdata [k + 2] = 0;  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,CalculatePlayerPositions,The following statement contains a magic number: if (jointpoint.TrackingState == JointTrackingState.Tracked) {  	var depthImagePoint = depthFrame.MapFromSkeletonPoint (jointpoint.Position);  	pointdata [k] = depthImagePoint.Depth;  	pointdata [k + 1] = depthImagePoint.X;  	pointdata [k + 2] = depthImagePoint.Y;  }  else {  	pointdata [k] = 0;  	pointdata [k + 1] = 0;  	pointdata [k + 2] = 0;  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,CalculatePlayerPositions,The following statement contains a magic number: pointdata [k + 2] = depthImagePoint.Y;  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,CalculatePlayerPositions,The following statement contains a magic number: pointdata [k + 2] = 0;  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,CalculatePlayerPositions,The following statement contains a magic number: pointdata [k + 2] = 0;  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,CalculatePlayerPositions,The following statement contains a magic number: k += 3;  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,PollSynchronizedFrames,The following statement contains a magic number: for (int k = 0; k < QUEUE_MAX_LENGTH; k++) {  	skeletonQueue.Enqueue (this.ksensor.SkeletonStream.OpenNextFrame (100));  	depthQueue.Enqueue (this.ksensor.DepthStream.OpenNextFrame (100));  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,PollSynchronizedFrames,The following statement contains a magic number: for (int k = 0; k < QUEUE_MAX_LENGTH; k++) {  	skeletonQueue.Enqueue (this.ksensor.SkeletonStream.OpenNextFrame (100));  	depthQueue.Enqueue (this.ksensor.DepthStream.OpenNextFrame (100));  }  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,PollSynchronizedFrames,The following statement contains a magic number: skeletonQueue.Enqueue (this.ksensor.SkeletonStream.OpenNextFrame (100));  
Magic Number,OccupOSNode.Sensors.Kinect,NodeKinectSensor,C:\repos\OccupOS_OccupOSNode\Full\OccupOSNode.Full\Sensors\Kinect\NodeKinectSensor.cs,PollSynchronizedFrames,The following statement contains a magic number: depthQueue.Enqueue (this.ksensor.DepthStream.OpenNextFrame (100));  
