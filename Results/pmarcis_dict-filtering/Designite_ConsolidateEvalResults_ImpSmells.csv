Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,Cyclomatic complexity of the method is 14
Long Parameter List,ConsolidateEvalResults,ConfidenceInterval,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\ConfidenceInterval.cs,ConfidenceInterval,The method has 5 parameters.
Magic Number,ConsolidateEvalResults,ConfidenceInterval,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\ConfidenceInterval.cs,Z,The following statement contains a magic number: if (p == 0.99)  	return 2.58;  
Magic Number,ConsolidateEvalResults,ConfidenceInterval,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\ConfidenceInterval.cs,Z,The following statement contains a magic number: if (p == 0.99)  	return 2.58;  
Magic Number,ConsolidateEvalResults,ConfidenceInterval,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\ConfidenceInterval.cs,Z,The following statement contains a magic number: return 2.58;  
Magic Number,ConsolidateEvalResults,ConfidenceInterval,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\ConfidenceInterval.cs,Z,The following statement contains a magic number: if (p == 0.95)  	return 1.96;  
Magic Number,ConsolidateEvalResults,ConfidenceInterval,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\ConfidenceInterval.cs,Z,The following statement contains a magic number: if (p == 0.95)  	return 1.96;  
Magic Number,ConsolidateEvalResults,ConfidenceInterval,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\ConfidenceInterval.cs,Z,The following statement contains a magic number: return 1.96;  
Magic Number,ConsolidateEvalResults,ConfidenceInterval,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\ConfidenceInterval.cs,Z,The following statement contains a magic number: if (p == 0.90)  	return 1.645;  
Magic Number,ConsolidateEvalResults,ConfidenceInterval,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\ConfidenceInterval.cs,Z,The following statement contains a magic number: if (p == 0.90)  	return 1.645;  
Magic Number,ConsolidateEvalResults,ConfidenceInterval,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\ConfidenceInterval.cs,Z,The following statement contains a magic number: return 1.645;  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,Main,The following statement contains a magic number: foreach (string langPairDir in Directory.GetDirectories (workingDir' "*_*"' SearchOption.TopDirectoryOnly)) {  	string dir = langPairDir;  	if (!dir.EndsWith (Path.DirectorySeparatorChar.ToString ()))  		dir += Path.DirectorySeparatorChar.ToString ();  	string srcLang = langPairDir.Substring (dir.Length - 6' 2);  	string trgLang = langPairDir.Substring (dir.Length - 3' 2);  	Console.WriteLine ("[CER] Processing language pair " + srcLang + "-" + trgLang);  	// NIST-BLEU eval file: eval/eval_res_0.nist-bleu  	// NBEST output file: eval/eval_0.en.out.n-best  	//NBEST reference file: data/eval_0.en  	if (method.Contains ("BLEU")) {  		AppendBleuEvaluation (sw' dir' srcLang' trgLang);  	}  	if (method.Contains ("NBEST")) {  		AppendNBestEvaluation (sw' dir' srcLang' trgLang);  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,Main,The following statement contains a magic number: foreach (string langPairDir in Directory.GetDirectories (workingDir' "*_*"' SearchOption.TopDirectoryOnly)) {  	string dir = langPairDir;  	if (!dir.EndsWith (Path.DirectorySeparatorChar.ToString ()))  		dir += Path.DirectorySeparatorChar.ToString ();  	string srcLang = langPairDir.Substring (dir.Length - 6' 2);  	string trgLang = langPairDir.Substring (dir.Length - 3' 2);  	Console.WriteLine ("[CER] Processing language pair " + srcLang + "-" + trgLang);  	// NIST-BLEU eval file: eval/eval_res_0.nist-bleu  	// NBEST output file: eval/eval_0.en.out.n-best  	//NBEST reference file: data/eval_0.en  	if (method.Contains ("BLEU")) {  		AppendBleuEvaluation (sw' dir' srcLang' trgLang);  	}  	if (method.Contains ("NBEST")) {  		AppendNBestEvaluation (sw' dir' srcLang' trgLang);  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,Main,The following statement contains a magic number: foreach (string langPairDir in Directory.GetDirectories (workingDir' "*_*"' SearchOption.TopDirectoryOnly)) {  	string dir = langPairDir;  	if (!dir.EndsWith (Path.DirectorySeparatorChar.ToString ()))  		dir += Path.DirectorySeparatorChar.ToString ();  	string srcLang = langPairDir.Substring (dir.Length - 6' 2);  	string trgLang = langPairDir.Substring (dir.Length - 3' 2);  	Console.WriteLine ("[CER] Processing language pair " + srcLang + "-" + trgLang);  	// NIST-BLEU eval file: eval/eval_res_0.nist-bleu  	// NBEST output file: eval/eval_0.en.out.n-best  	//NBEST reference file: data/eval_0.en  	if (method.Contains ("BLEU")) {  		AppendBleuEvaluation (sw' dir' srcLang' trgLang);  	}  	if (method.Contains ("NBEST")) {  		AppendNBestEvaluation (sw' dir' srcLang' trgLang);  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,Main,The following statement contains a magic number: foreach (string langPairDir in Directory.GetDirectories (workingDir' "*_*"' SearchOption.TopDirectoryOnly)) {  	string dir = langPairDir;  	if (!dir.EndsWith (Path.DirectorySeparatorChar.ToString ()))  		dir += Path.DirectorySeparatorChar.ToString ();  	string srcLang = langPairDir.Substring (dir.Length - 6' 2);  	string trgLang = langPairDir.Substring (dir.Length - 3' 2);  	Console.WriteLine ("[CER] Processing language pair " + srcLang + "-" + trgLang);  	// NIST-BLEU eval file: eval/eval_res_0.nist-bleu  	// NBEST output file: eval/eval_0.en.out.n-best  	//NBEST reference file: data/eval_0.en  	if (method.Contains ("BLEU")) {  		AppendBleuEvaluation (sw' dir' srcLang' trgLang);  	}  	if (method.Contains ("NBEST")) {  		AppendNBestEvaluation (sw' dir' srcLang' trgLang);  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int j = 0; j < 10; j++)  	crossValidationData.Add (new List<double> ());  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	string refFile = dir + "data/eval_" + i.ToString () + "." + trgLang;  	string outFile = dir + "eval/eval_" + i.ToString () + "." + trgLang + ".out.n-best";  	if (!File.Exists (refFile) || !File.Exists (outFile))  		return;  	List<string> refWords = ReadSimpleListFile (refFile);  	List<List<string>> outWords = ReadNBestListFile (outFile' refWords);  	//TOP 1' TOP 3' TOP 5' TOP 10  	List<double> correctWords = new List<double> ();  	for (int j = 0; j < 10; j++)  		correctWords.Add (0);  	for (int j = 0; j < refWords.Count; j++) {  		for (int k = 0; k < outWords [j].Count; k++) {  			if (k >= 10)  				break;  			if (refWords [j] == outWords [j] [k]) {  				for (int l = k; l < 10; l++)  					correctWords [l]++;  				break;  			}  		}  	}  	double count = refWords.Count;  	for (int k = 0; k < 10; k++) {  		double prec = correctWords [k] / count;  		crossValidationData [k].Add (prec);  		sw.Write ("NBEST-TOP-");  		sw.Write (k + 1);  		sw.Write ("\t");  		sw.Write (srcLang);  		sw.Write ("\t");  		sw.Write (trgLang);  		sw.Write ("\t");  		sw.Write (i.ToString ());  		sw.Write ("\t");  		sw.Write (correctWords [k]);  		sw.Write ("\t");  		sw.Write (count);  		sw.Write ("\t");  		sw.WriteLine (prec.ToString (nfi));  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	string refFile = dir + "data/eval_" + i.ToString () + "." + trgLang;  	string outFile = dir + "eval/eval_" + i.ToString () + "." + trgLang + ".out.n-best";  	if (!File.Exists (refFile) || !File.Exists (outFile))  		return;  	List<string> refWords = ReadSimpleListFile (refFile);  	List<List<string>> outWords = ReadNBestListFile (outFile' refWords);  	//TOP 1' TOP 3' TOP 5' TOP 10  	List<double> correctWords = new List<double> ();  	for (int j = 0; j < 10; j++)  		correctWords.Add (0);  	for (int j = 0; j < refWords.Count; j++) {  		for (int k = 0; k < outWords [j].Count; k++) {  			if (k >= 10)  				break;  			if (refWords [j] == outWords [j] [k]) {  				for (int l = k; l < 10; l++)  					correctWords [l]++;  				break;  			}  		}  	}  	double count = refWords.Count;  	for (int k = 0; k < 10; k++) {  		double prec = correctWords [k] / count;  		crossValidationData [k].Add (prec);  		sw.Write ("NBEST-TOP-");  		sw.Write (k + 1);  		sw.Write ("\t");  		sw.Write (srcLang);  		sw.Write ("\t");  		sw.Write (trgLang);  		sw.Write ("\t");  		sw.Write (i.ToString ());  		sw.Write ("\t");  		sw.Write (correctWords [k]);  		sw.Write ("\t");  		sw.Write (count);  		sw.Write ("\t");  		sw.WriteLine (prec.ToString (nfi));  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	string refFile = dir + "data/eval_" + i.ToString () + "." + trgLang;  	string outFile = dir + "eval/eval_" + i.ToString () + "." + trgLang + ".out.n-best";  	if (!File.Exists (refFile) || !File.Exists (outFile))  		return;  	List<string> refWords = ReadSimpleListFile (refFile);  	List<List<string>> outWords = ReadNBestListFile (outFile' refWords);  	//TOP 1' TOP 3' TOP 5' TOP 10  	List<double> correctWords = new List<double> ();  	for (int j = 0; j < 10; j++)  		correctWords.Add (0);  	for (int j = 0; j < refWords.Count; j++) {  		for (int k = 0; k < outWords [j].Count; k++) {  			if (k >= 10)  				break;  			if (refWords [j] == outWords [j] [k]) {  				for (int l = k; l < 10; l++)  					correctWords [l]++;  				break;  			}  		}  	}  	double count = refWords.Count;  	for (int k = 0; k < 10; k++) {  		double prec = correctWords [k] / count;  		crossValidationData [k].Add (prec);  		sw.Write ("NBEST-TOP-");  		sw.Write (k + 1);  		sw.Write ("\t");  		sw.Write (srcLang);  		sw.Write ("\t");  		sw.Write (trgLang);  		sw.Write ("\t");  		sw.Write (i.ToString ());  		sw.Write ("\t");  		sw.Write (correctWords [k]);  		sw.Write ("\t");  		sw.Write (count);  		sw.Write ("\t");  		sw.WriteLine (prec.ToString (nfi));  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	string refFile = dir + "data/eval_" + i.ToString () + "." + trgLang;  	string outFile = dir + "eval/eval_" + i.ToString () + "." + trgLang + ".out.n-best";  	if (!File.Exists (refFile) || !File.Exists (outFile))  		return;  	List<string> refWords = ReadSimpleListFile (refFile);  	List<List<string>> outWords = ReadNBestListFile (outFile' refWords);  	//TOP 1' TOP 3' TOP 5' TOP 10  	List<double> correctWords = new List<double> ();  	for (int j = 0; j < 10; j++)  		correctWords.Add (0);  	for (int j = 0; j < refWords.Count; j++) {  		for (int k = 0; k < outWords [j].Count; k++) {  			if (k >= 10)  				break;  			if (refWords [j] == outWords [j] [k]) {  				for (int l = k; l < 10; l++)  					correctWords [l]++;  				break;  			}  		}  	}  	double count = refWords.Count;  	for (int k = 0; k < 10; k++) {  		double prec = correctWords [k] / count;  		crossValidationData [k].Add (prec);  		sw.Write ("NBEST-TOP-");  		sw.Write (k + 1);  		sw.Write ("\t");  		sw.Write (srcLang);  		sw.Write ("\t");  		sw.Write (trgLang);  		sw.Write ("\t");  		sw.Write (i.ToString ());  		sw.Write ("\t");  		sw.Write (correctWords [k]);  		sw.Write ("\t");  		sw.Write (count);  		sw.Write ("\t");  		sw.WriteLine (prec.ToString (nfi));  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	string refFile = dir + "data/eval_" + i.ToString () + "." + trgLang;  	string outFile = dir + "eval/eval_" + i.ToString () + "." + trgLang + ".out.n-best";  	if (!File.Exists (refFile) || !File.Exists (outFile))  		return;  	List<string> refWords = ReadSimpleListFile (refFile);  	List<List<string>> outWords = ReadNBestListFile (outFile' refWords);  	//TOP 1' TOP 3' TOP 5' TOP 10  	List<double> correctWords = new List<double> ();  	for (int j = 0; j < 10; j++)  		correctWords.Add (0);  	for (int j = 0; j < refWords.Count; j++) {  		for (int k = 0; k < outWords [j].Count; k++) {  			if (k >= 10)  				break;  			if (refWords [j] == outWords [j] [k]) {  				for (int l = k; l < 10; l++)  					correctWords [l]++;  				break;  			}  		}  	}  	double count = refWords.Count;  	for (int k = 0; k < 10; k++) {  		double prec = correctWords [k] / count;  		crossValidationData [k].Add (prec);  		sw.Write ("NBEST-TOP-");  		sw.Write (k + 1);  		sw.Write ("\t");  		sw.Write (srcLang);  		sw.Write ("\t");  		sw.Write (trgLang);  		sw.Write ("\t");  		sw.Write (i.ToString ());  		sw.Write ("\t");  		sw.Write (correctWords [k]);  		sw.Write ("\t");  		sw.Write (count);  		sw.Write ("\t");  		sw.WriteLine (prec.ToString (nfi));  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int j = 0; j < 10; j++)  	correctWords.Add (0);  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int j = 0; j < refWords.Count; j++) {  	for (int k = 0; k < outWords [j].Count; k++) {  		if (k >= 10)  			break;  		if (refWords [j] == outWords [j] [k]) {  			for (int l = k; l < 10; l++)  				correctWords [l]++;  			break;  		}  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int j = 0; j < refWords.Count; j++) {  	for (int k = 0; k < outWords [j].Count; k++) {  		if (k >= 10)  			break;  		if (refWords [j] == outWords [j] [k]) {  			for (int l = k; l < 10; l++)  				correctWords [l]++;  			break;  		}  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int k = 0; k < outWords [j].Count; k++) {  	if (k >= 10)  		break;  	if (refWords [j] == outWords [j] [k]) {  		for (int l = k; l < 10; l++)  			correctWords [l]++;  		break;  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int k = 0; k < outWords [j].Count; k++) {  	if (k >= 10)  		break;  	if (refWords [j] == outWords [j] [k]) {  		for (int l = k; l < 10; l++)  			correctWords [l]++;  		break;  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: if (k >= 10)  	break;  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: if (refWords [j] == outWords [j] [k]) {  	for (int l = k; l < 10; l++)  		correctWords [l]++;  	break;  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int l = k; l < 10; l++)  	correctWords [l]++;  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int k = 0; k < 10; k++) {  	double prec = correctWords [k] / count;  	crossValidationData [k].Add (prec);  	sw.Write ("NBEST-TOP-");  	sw.Write (k + 1);  	sw.Write ("\t");  	sw.Write (srcLang);  	sw.Write ("\t");  	sw.Write (trgLang);  	sw.Write ("\t");  	sw.Write (i.ToString ());  	sw.Write ("\t");  	sw.Write (correctWords [k]);  	sw.Write ("\t");  	sw.Write (count);  	sw.Write ("\t");  	sw.WriteLine (prec.ToString (nfi));  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int k = 0; k < 10; k++) {  	ConfidenceInterval ci = new ConfidenceInterval (0.99' crossValidationData [k]);  	sw.Write ("NBEST-X-VALIDATION-TOP-");  	sw.Write (k + 1);  	sw.Write ("\t");  	sw.Write (srcLang);  	sw.Write ("\t");  	sw.Write (trgLang);  	sw.Write ("\t");  	sw.Write (ci.Mean.ToString (nfi));  	sw.Write ("\t");  	sw.Write (ci.MarginOfError.ToString (nfi));  	sw.Write ("\t");  	sw.Write (ci.Percentage.ToString (nfi));  	sw.Write ("\t");  	sw.Write (ci.Lower.ToString (nfi));  	sw.Write ("\t");  	sw.WriteLine (ci.Upper.ToString (nfi));  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendNBestEvaluation,The following statement contains a magic number: for (int k = 0; k < 10; k++) {  	ConfidenceInterval ci = new ConfidenceInterval (0.99' crossValidationData [k]);  	sw.Write ("NBEST-X-VALIDATION-TOP-");  	sw.Write (k + 1);  	sw.Write ("\t");  	sw.Write (srcLang);  	sw.Write ("\t");  	sw.Write (trgLang);  	sw.Write ("\t");  	sw.Write (ci.Mean.ToString (nfi));  	sw.Write ("\t");  	sw.Write (ci.MarginOfError.ToString (nfi));  	sw.Write ("\t");  	sw.Write (ci.Percentage.ToString (nfi));  	sw.Write ("\t");  	sw.Write (ci.Lower.ToString (nfi));  	sw.Write ("\t");  	sw.WriteLine (ci.Upper.ToString (nfi));  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,ReadNBestListFile,The following statement contains a magic number: while (!sr.EndOfStream) {  	string line = sr.ReadLine ();  	string[] dataArr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  	if (dataArr.Length == 4) {  		string idStr = dataArr [0];  		idStr = idStr.Trim ();  		int id = Convert.ToInt32 (idStr);  		if (id >= res.Count)  			throw new InvalidDataException ("Something is wrong! The ID should be less than the number of words");  		string word = dataArr [1];  		word = word.Trim ().Replace (" "' "");  		if (!existingTranslits.ContainsKey (id))  			existingTranslits.Add (id' new Dictionary<string' bool> ());  		if (!existingTranslits [id].ContainsKey (word)) {  			existingTranslits [id].Add (word' true);  			res [id].Add (word);  		}  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,ReadNBestListFile,The following statement contains a magic number: if (dataArr.Length == 4) {  	string idStr = dataArr [0];  	idStr = idStr.Trim ();  	int id = Convert.ToInt32 (idStr);  	if (id >= res.Count)  		throw new InvalidDataException ("Something is wrong! The ID should be less than the number of words");  	string word = dataArr [1];  	word = word.Trim ().Replace (" "' "");  	if (!existingTranslits.ContainsKey (id))  		existingTranslits.Add (id' new Dictionary<string' bool> ());  	if (!existingTranslits [id].ContainsKey (word)) {  		existingTranslits [id].Add (word' true);  		res [id].Add (word);  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendBleuEvaluation,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	string file = dir + "eval" + Path.DirectorySeparatorChar.ToString () + "eval_res_" + i.ToString () + ".nist-bleu";  	if (File.Exists (file)) {  		StreamReader sr = new StreamReader (file' Encoding.UTF8);  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ().Trim ();  			if (line.StartsWith ("NIST score")) {  				string[] arr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  				sw.Write ("NIST-BLEU\t");  				sw.Write (srcLang);  				sw.Write ("\t");  				sw.Write (trgLang);  				sw.Write ("\t");  				sw.Write (i.ToString ());  				sw.Write ("\t");  				double nistScore = Convert.ToDouble (arr [3]' nfi);  				sw.Write (nistScore.ToString (nfi));  				//NIST score  				crossValidationNISTData.Add (nistScore);  				sw.Write ("\t");  				double bleuScore = Convert.ToDouble (arr [7]' nfi) * 100.00;  				crossValidationBLEUData.Add (bleuScore);  				sw.WriteLine (bleuScore.ToString (nfi));  				//BLEU score  				break;  			}  		}  		sr.Close ();  	}  	else {  		return;  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendBleuEvaluation,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	string file = dir + "eval" + Path.DirectorySeparatorChar.ToString () + "eval_res_" + i.ToString () + ".nist-bleu";  	if (File.Exists (file)) {  		StreamReader sr = new StreamReader (file' Encoding.UTF8);  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ().Trim ();  			if (line.StartsWith ("NIST score")) {  				string[] arr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  				sw.Write ("NIST-BLEU\t");  				sw.Write (srcLang);  				sw.Write ("\t");  				sw.Write (trgLang);  				sw.Write ("\t");  				sw.Write (i.ToString ());  				sw.Write ("\t");  				double nistScore = Convert.ToDouble (arr [3]' nfi);  				sw.Write (nistScore.ToString (nfi));  				//NIST score  				crossValidationNISTData.Add (nistScore);  				sw.Write ("\t");  				double bleuScore = Convert.ToDouble (arr [7]' nfi) * 100.00;  				crossValidationBLEUData.Add (bleuScore);  				sw.WriteLine (bleuScore.ToString (nfi));  				//BLEU score  				break;  			}  		}  		sr.Close ();  	}  	else {  		return;  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendBleuEvaluation,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	string file = dir + "eval" + Path.DirectorySeparatorChar.ToString () + "eval_res_" + i.ToString () + ".nist-bleu";  	if (File.Exists (file)) {  		StreamReader sr = new StreamReader (file' Encoding.UTF8);  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ().Trim ();  			if (line.StartsWith ("NIST score")) {  				string[] arr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  				sw.Write ("NIST-BLEU\t");  				sw.Write (srcLang);  				sw.Write ("\t");  				sw.Write (trgLang);  				sw.Write ("\t");  				sw.Write (i.ToString ());  				sw.Write ("\t");  				double nistScore = Convert.ToDouble (arr [3]' nfi);  				sw.Write (nistScore.ToString (nfi));  				//NIST score  				crossValidationNISTData.Add (nistScore);  				sw.Write ("\t");  				double bleuScore = Convert.ToDouble (arr [7]' nfi) * 100.00;  				crossValidationBLEUData.Add (bleuScore);  				sw.WriteLine (bleuScore.ToString (nfi));  				//BLEU score  				break;  			}  		}  		sr.Close ();  	}  	else {  		return;  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendBleuEvaluation,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	string file = dir + "eval" + Path.DirectorySeparatorChar.ToString () + "eval_res_" + i.ToString () + ".nist-bleu";  	if (File.Exists (file)) {  		StreamReader sr = new StreamReader (file' Encoding.UTF8);  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ().Trim ();  			if (line.StartsWith ("NIST score")) {  				string[] arr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  				sw.Write ("NIST-BLEU\t");  				sw.Write (srcLang);  				sw.Write ("\t");  				sw.Write (trgLang);  				sw.Write ("\t");  				sw.Write (i.ToString ());  				sw.Write ("\t");  				double nistScore = Convert.ToDouble (arr [3]' nfi);  				sw.Write (nistScore.ToString (nfi));  				//NIST score  				crossValidationNISTData.Add (nistScore);  				sw.Write ("\t");  				double bleuScore = Convert.ToDouble (arr [7]' nfi) * 100.00;  				crossValidationBLEUData.Add (bleuScore);  				sw.WriteLine (bleuScore.ToString (nfi));  				//BLEU score  				break;  			}  		}  		sr.Close ();  	}  	else {  		return;  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendBleuEvaluation,The following statement contains a magic number: if (File.Exists (file)) {  	StreamReader sr = new StreamReader (file' Encoding.UTF8);  	while (!sr.EndOfStream) {  		string line = sr.ReadLine ().Trim ();  		if (line.StartsWith ("NIST score")) {  			string[] arr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  			sw.Write ("NIST-BLEU\t");  			sw.Write (srcLang);  			sw.Write ("\t");  			sw.Write (trgLang);  			sw.Write ("\t");  			sw.Write (i.ToString ());  			sw.Write ("\t");  			double nistScore = Convert.ToDouble (arr [3]' nfi);  			sw.Write (nistScore.ToString (nfi));  			//NIST score  			crossValidationNISTData.Add (nistScore);  			sw.Write ("\t");  			double bleuScore = Convert.ToDouble (arr [7]' nfi) * 100.00;  			crossValidationBLEUData.Add (bleuScore);  			sw.WriteLine (bleuScore.ToString (nfi));  			//BLEU score  			break;  		}  	}  	sr.Close ();  }  else {  	return;  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendBleuEvaluation,The following statement contains a magic number: if (File.Exists (file)) {  	StreamReader sr = new StreamReader (file' Encoding.UTF8);  	while (!sr.EndOfStream) {  		string line = sr.ReadLine ().Trim ();  		if (line.StartsWith ("NIST score")) {  			string[] arr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  			sw.Write ("NIST-BLEU\t");  			sw.Write (srcLang);  			sw.Write ("\t");  			sw.Write (trgLang);  			sw.Write ("\t");  			sw.Write (i.ToString ());  			sw.Write ("\t");  			double nistScore = Convert.ToDouble (arr [3]' nfi);  			sw.Write (nistScore.ToString (nfi));  			//NIST score  			crossValidationNISTData.Add (nistScore);  			sw.Write ("\t");  			double bleuScore = Convert.ToDouble (arr [7]' nfi) * 100.00;  			crossValidationBLEUData.Add (bleuScore);  			sw.WriteLine (bleuScore.ToString (nfi));  			//BLEU score  			break;  		}  	}  	sr.Close ();  }  else {  	return;  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendBleuEvaluation,The following statement contains a magic number: if (File.Exists (file)) {  	StreamReader sr = new StreamReader (file' Encoding.UTF8);  	while (!sr.EndOfStream) {  		string line = sr.ReadLine ().Trim ();  		if (line.StartsWith ("NIST score")) {  			string[] arr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  			sw.Write ("NIST-BLEU\t");  			sw.Write (srcLang);  			sw.Write ("\t");  			sw.Write (trgLang);  			sw.Write ("\t");  			sw.Write (i.ToString ());  			sw.Write ("\t");  			double nistScore = Convert.ToDouble (arr [3]' nfi);  			sw.Write (nistScore.ToString (nfi));  			//NIST score  			crossValidationNISTData.Add (nistScore);  			sw.Write ("\t");  			double bleuScore = Convert.ToDouble (arr [7]' nfi) * 100.00;  			crossValidationBLEUData.Add (bleuScore);  			sw.WriteLine (bleuScore.ToString (nfi));  			//BLEU score  			break;  		}  	}  	sr.Close ();  }  else {  	return;  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendBleuEvaluation,The following statement contains a magic number: while (!sr.EndOfStream) {  	string line = sr.ReadLine ().Trim ();  	if (line.StartsWith ("NIST score")) {  		string[] arr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  		sw.Write ("NIST-BLEU\t");  		sw.Write (srcLang);  		sw.Write ("\t");  		sw.Write (trgLang);  		sw.Write ("\t");  		sw.Write (i.ToString ());  		sw.Write ("\t");  		double nistScore = Convert.ToDouble (arr [3]' nfi);  		sw.Write (nistScore.ToString (nfi));  		//NIST score  		crossValidationNISTData.Add (nistScore);  		sw.Write ("\t");  		double bleuScore = Convert.ToDouble (arr [7]' nfi) * 100.00;  		crossValidationBLEUData.Add (bleuScore);  		sw.WriteLine (bleuScore.ToString (nfi));  		//BLEU score  		break;  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendBleuEvaluation,The following statement contains a magic number: while (!sr.EndOfStream) {  	string line = sr.ReadLine ().Trim ();  	if (line.StartsWith ("NIST score")) {  		string[] arr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  		sw.Write ("NIST-BLEU\t");  		sw.Write (srcLang);  		sw.Write ("\t");  		sw.Write (trgLang);  		sw.Write ("\t");  		sw.Write (i.ToString ());  		sw.Write ("\t");  		double nistScore = Convert.ToDouble (arr [3]' nfi);  		sw.Write (nistScore.ToString (nfi));  		//NIST score  		crossValidationNISTData.Add (nistScore);  		sw.Write ("\t");  		double bleuScore = Convert.ToDouble (arr [7]' nfi) * 100.00;  		crossValidationBLEUData.Add (bleuScore);  		sw.WriteLine (bleuScore.ToString (nfi));  		//BLEU score  		break;  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendBleuEvaluation,The following statement contains a magic number: while (!sr.EndOfStream) {  	string line = sr.ReadLine ().Trim ();  	if (line.StartsWith ("NIST score")) {  		string[] arr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  		sw.Write ("NIST-BLEU\t");  		sw.Write (srcLang);  		sw.Write ("\t");  		sw.Write (trgLang);  		sw.Write ("\t");  		sw.Write (i.ToString ());  		sw.Write ("\t");  		double nistScore = Convert.ToDouble (arr [3]' nfi);  		sw.Write (nistScore.ToString (nfi));  		//NIST score  		crossValidationNISTData.Add (nistScore);  		sw.Write ("\t");  		double bleuScore = Convert.ToDouble (arr [7]' nfi) * 100.00;  		crossValidationBLEUData.Add (bleuScore);  		sw.WriteLine (bleuScore.ToString (nfi));  		//BLEU score  		break;  	}  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendBleuEvaluation,The following statement contains a magic number: if (line.StartsWith ("NIST score")) {  	string[] arr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  	sw.Write ("NIST-BLEU\t");  	sw.Write (srcLang);  	sw.Write ("\t");  	sw.Write (trgLang);  	sw.Write ("\t");  	sw.Write (i.ToString ());  	sw.Write ("\t");  	double nistScore = Convert.ToDouble (arr [3]' nfi);  	sw.Write (nistScore.ToString (nfi));  	//NIST score  	crossValidationNISTData.Add (nistScore);  	sw.Write ("\t");  	double bleuScore = Convert.ToDouble (arr [7]' nfi) * 100.00;  	crossValidationBLEUData.Add (bleuScore);  	sw.WriteLine (bleuScore.ToString (nfi));  	//BLEU score  	break;  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendBleuEvaluation,The following statement contains a magic number: if (line.StartsWith ("NIST score")) {  	string[] arr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  	sw.Write ("NIST-BLEU\t");  	sw.Write (srcLang);  	sw.Write ("\t");  	sw.Write (trgLang);  	sw.Write ("\t");  	sw.Write (i.ToString ());  	sw.Write ("\t");  	double nistScore = Convert.ToDouble (arr [3]' nfi);  	sw.Write (nistScore.ToString (nfi));  	//NIST score  	crossValidationNISTData.Add (nistScore);  	sw.Write ("\t");  	double bleuScore = Convert.ToDouble (arr [7]' nfi) * 100.00;  	crossValidationBLEUData.Add (bleuScore);  	sw.WriteLine (bleuScore.ToString (nfi));  	//BLEU score  	break;  }  
Magic Number,ConsolidateEvalResults,Program,C:\repos\pmarcis_dict-filtering\ConsolidateEvalResults\Program.cs,AppendBleuEvaluation,The following statement contains a magic number: if (line.StartsWith ("NIST score")) {  	string[] arr = line.Split (sep' StringSplitOptions.RemoveEmptyEntries);  	sw.Write ("NIST-BLEU\t");  	sw.Write (srcLang);  	sw.Write ("\t");  	sw.Write (trgLang);  	sw.Write ("\t");  	sw.Write (i.ToString ());  	sw.Write ("\t");  	double nistScore = Convert.ToDouble (arr [3]' nfi);  	sw.Write (nistScore.ToString (nfi));  	//NIST score  	crossValidationNISTData.Add (nistScore);  	sw.Write ("\t");  	double bleuScore = Convert.ToDouble (arr [7]' nfi) * 100.00;  	crossValidationBLEUData.Add (bleuScore);  	sw.WriteLine (bleuScore.ToString (nfi));  	//BLEU score  	break;  }  
