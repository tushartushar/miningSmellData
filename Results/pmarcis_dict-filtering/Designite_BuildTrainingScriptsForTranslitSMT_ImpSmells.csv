Implementation smell,Namespace,Class,File,Method,Description
Long Method,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,Main,The method has 138 lines of code.
Complex Method,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,Main,Cyclomatic complexity of the method is 10
Complex Method,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,ReadDictionary,Cyclomatic complexity of the method is 8
Long Parameter List,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,SaveData,The method has 7 parameters.
Long Parameter List,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,GetRandomData,The method has 6 parameters.
Long Statement,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,Main,The length of the statement  "	if (string.IsNullOrWhiteSpace (inDir) || string.IsNullOrWhiteSpace (outDir) || string.IsNullOrWhiteSpace (mosesDir) || string.IsNullOrWhiteSpace (langModelDir) || string.IsNullOrWhiteSpace (perlScriptDir) || !Directory.Exists (inDir) || !Directory.Exists (mosesDir) || !Directory.Exists (langModelDir) || !Directory.Exists (perlScriptDir)) { " is 341.
Long Statement,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,Main,The length of the statement  "		Console.WriteLine ("Usage:\n./BuildCrossValidationDataSetsAndScriptsForTranslitSMT.exe [translit file dir] [working dir] [moses dir] [lang model dir] [distortion adjuster dir]"); " is 178.
Long Statement,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,Main,The length of the statement  "		GetRandomData (srcWords' trgWords' ref randomSrcTrainData' ref randomTrgTrainData' ref randomSrcTuneData' ref randomTrgTuneData); " is 129.
Long Statement,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,Main,The length of the statement  "		SaveData (srcLang' trgLang' trainDataDir' randomSrcTrainData' randomTrgTrainData' randomSrcTuneData' randomTrgTuneData); " is 120.
Long Statement,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,Main,The length of the statement  "		//we assume that monolingual language models have been already trained! This is because I already have IRSTLM language models for all languages! " is 144.
Long Statement,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,Main,The length of the statement  "		swBinarise.WriteLine ("mosesdecoder/bin/processPhraseTable -ttable 0 0 train/model/phrase-table.gz -nscores 5 -out binarised-model/phrase-table"); " is 146.
Long Statement,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,Main,The length of the statement  "		swBinarise.WriteLine ("mosesdecoder/bin/processLexicalTable -in train/model/reordering-table.wbe-msd-bidirectional-fe.gz -out binarised-model/reordering-table"); " is 161.
Long Statement,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,ReadDictionary,The length of the statement  "					if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) { " is 125.
Long Statement,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,ReadDictionary,The length of the statement  "				if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) { " is 125.
Complex Conditional,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,Main,The conditional expression  "string.IsNullOrWhiteSpace (inDir) || string.IsNullOrWhiteSpace (outDir) || string.IsNullOrWhiteSpace (mosesDir) || string.IsNullOrWhiteSpace (langModelDir) || string.IsNullOrWhiteSpace (perlScriptDir) || !Directory.Exists (inDir) || !Directory.Exists (mosesDir) || !Directory.Exists (langModelDir) || !Directory.Exists (perlScriptDir)"  is complex.
Magic Number,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,Main,The following statement contains a magic number: foreach (string file in Directory.GetFiles (inDir' "*." + ext)) {  	string fileName = Path.GetFileName (file);  	string srcLang = fileName.Substring (0' 2);  	string trgLang = fileName.Substring (3' 2);  	string langPairDir = outDir + srcLang + "_" + trgLang + Path.DirectorySeparatorChar.ToString ();  	if (!Directory.Exists (langPairDir))  		Directory.CreateDirectory (langPairDir);  	List<string> srcWords = new List<string> ();  	List<string> trgWords = new List<string> ();  	ReadDictionary (file' ref srcWords' ref trgWords' thr);  	List<string> randomSrcTrainData = new List<string> ();  	List<string> randomTrgTrainData = new List<string> ();  	List<string> randomSrcTuneData = new List<string> ();  	List<string> randomTrgTuneData = new List<string> ();  	GetRandomData (srcWords' trgWords' ref randomSrcTrainData' ref randomTrgTrainData' ref randomSrcTuneData' ref randomTrgTuneData);  	string trainDataDir = langPairDir + "data" + Path.DirectorySeparatorChar.ToString ();  	if (!Directory.Exists (trainDataDir))  		Directory.CreateDirectory (trainDataDir);  	SaveData (srcLang' trgLang' trainDataDir' randomSrcTrainData' randomTrgTrainData' randomSrcTuneData' randomTrgTuneData);  	//we assume that monolingual language models have been already trained! This is because I already have IRSTLM language models for all languages!  	string srcTuneFile = trainDataDir + "tune." + srcLang;  	string trgTuneFile = trainDataDir + "tune." + trgLang;  	string trainFile = trainDataDir + "train";  	string workingDir = langPairDir + "wd";  	//if (!Directory.Exists(workingDir)) Directory.CreateDirectory(workingDir);  	swTrain.Write ("mkdir -p ");  	swTrain.WriteLine (workingDir);  	swTrain.Write ("cd ");  	swTrain.WriteLine (workingDir);  	swTrain.Write (mosesDir);  	swTrain.Write ("mosesdecoder/scripts/training/train-model.perl -external-bin-dir ");  	swTrain.Write (mosesDir);  	swTrain.Write ("external-bin-dir -root-dir train -corpus ");  	swTrain.Write (trainFile);  	swTrain.Write (" -f ");  	swTrain.Write (srcLang);  	swTrain.Write (" -e ");  	swTrain.Write (trgLang);  	swTrain.Write (" -alignment grow-diag-final-and -reordering msd-bidirectional-fe -lm 0:5:");  	swTrain.Write (langModelDir);  	swTrain.Write ("mono.blm.");  	swTrain.Write (trgLang);  	swTrain.Write (":8 >& training.out &");  	swTrain.WriteLine ();  	swBinarise.Write ("cd ");  	swBinarise.WriteLine (workingDir);  	swBinarise.WriteLine ("mkdir -p binarised-model");  	swBinarise.Write (mosesDir);  	swBinarise.WriteLine ("mosesdecoder/bin/processPhraseTable -ttable 0 0 train/model/phrase-table.gz -nscores 5 -out binarised-model/phrase-table");  	swBinarise.Write (mosesDir);  	swBinarise.WriteLine ("mosesdecoder/bin/processLexicalTable -in train/model/reordering-table.wbe-msd-bidirectional-fe.gz -out binarised-model/reordering-table");  	swBinarise.WriteLine ();  	swTune.Write ("cd ");  	swTune.WriteLine (workingDir);  	swTune.Write (mosesDir);  	swTune.Write ("mosesdecoder/scripts/training/mert-moses.pl ");  	swTune.Write (srcTuneFile);  	swTune.Write (" ");  	swTune.Write (trgTuneFile);  	swTune.Write (" ");  	swTune.Write (mosesDir);  	swTune.Write ("mosesdecoder/bin/moses train/model/distortion-adjusted.moses.ini --mertdir ");  	swTune.Write (mosesDir);  	swTune.Write ("mosesdecoder/bin/ &> mert.out &");  	swTune.WriteLine ();  	swIni.Write ("cd ");  	swIni.WriteLine (workingDir);  	swIni.WriteLine ("cp mert-work/moses.ini binarised-model.moses.ini");  	swIni.Write ("sed -i \'s/0 0 0 5 ");  	string adjustedWorkingDir = workingDir.Replace ("/"' "\\/");  	swIni.Write (adjustedWorkingDir);  	swIni.Write ("train\\/model\\/phrase-table\\.gz/1 0 0 5 ");  	swIni.Write (adjustedWorkingDir);  	swIni.WriteLine ("binarised-model\\/phrase-table/g\' binarised-model.moses.ini");  	swIni.Write ("sed -i \'s/0-0 wbe-msd-bidirectional-fe-allff 6 ");  	swIni.Write (adjustedWorkingDir);  	swIni.Write ("train\\/model\\/reordering-table\\.wbe-msd-bidirectional-fe\\.gz/0-0 wbe-msd-bidirectional-fe-allff 6 ");  	swIni.Write (adjustedWorkingDir);  	swIni.WriteLine ("binarised-model\\/reordering-table/g\' binarised-model.moses.ini");  	swIni.WriteLine ();  	swDistLimit.Write ("cd ");  	swDistLimit.WriteLine (workingDir);  	swDistLimit.Write ("mono ");  	swDistLimit.Write (perlScriptDir);  	swDistLimit.WriteLine ("AdjustDistortionLimit.exe train/model/moses.ini train/model/distortion-adjusted.moses.ini 2");  }  
Magic Number,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,Main,The following statement contains a magic number: foreach (string file in Directory.GetFiles (inDir' "*." + ext)) {  	string fileName = Path.GetFileName (file);  	string srcLang = fileName.Substring (0' 2);  	string trgLang = fileName.Substring (3' 2);  	string langPairDir = outDir + srcLang + "_" + trgLang + Path.DirectorySeparatorChar.ToString ();  	if (!Directory.Exists (langPairDir))  		Directory.CreateDirectory (langPairDir);  	List<string> srcWords = new List<string> ();  	List<string> trgWords = new List<string> ();  	ReadDictionary (file' ref srcWords' ref trgWords' thr);  	List<string> randomSrcTrainData = new List<string> ();  	List<string> randomTrgTrainData = new List<string> ();  	List<string> randomSrcTuneData = new List<string> ();  	List<string> randomTrgTuneData = new List<string> ();  	GetRandomData (srcWords' trgWords' ref randomSrcTrainData' ref randomTrgTrainData' ref randomSrcTuneData' ref randomTrgTuneData);  	string trainDataDir = langPairDir + "data" + Path.DirectorySeparatorChar.ToString ();  	if (!Directory.Exists (trainDataDir))  		Directory.CreateDirectory (trainDataDir);  	SaveData (srcLang' trgLang' trainDataDir' randomSrcTrainData' randomTrgTrainData' randomSrcTuneData' randomTrgTuneData);  	//we assume that monolingual language models have been already trained! This is because I already have IRSTLM language models for all languages!  	string srcTuneFile = trainDataDir + "tune." + srcLang;  	string trgTuneFile = trainDataDir + "tune." + trgLang;  	string trainFile = trainDataDir + "train";  	string workingDir = langPairDir + "wd";  	//if (!Directory.Exists(workingDir)) Directory.CreateDirectory(workingDir);  	swTrain.Write ("mkdir -p ");  	swTrain.WriteLine (workingDir);  	swTrain.Write ("cd ");  	swTrain.WriteLine (workingDir);  	swTrain.Write (mosesDir);  	swTrain.Write ("mosesdecoder/scripts/training/train-model.perl -external-bin-dir ");  	swTrain.Write (mosesDir);  	swTrain.Write ("external-bin-dir -root-dir train -corpus ");  	swTrain.Write (trainFile);  	swTrain.Write (" -f ");  	swTrain.Write (srcLang);  	swTrain.Write (" -e ");  	swTrain.Write (trgLang);  	swTrain.Write (" -alignment grow-diag-final-and -reordering msd-bidirectional-fe -lm 0:5:");  	swTrain.Write (langModelDir);  	swTrain.Write ("mono.blm.");  	swTrain.Write (trgLang);  	swTrain.Write (":8 >& training.out &");  	swTrain.WriteLine ();  	swBinarise.Write ("cd ");  	swBinarise.WriteLine (workingDir);  	swBinarise.WriteLine ("mkdir -p binarised-model");  	swBinarise.Write (mosesDir);  	swBinarise.WriteLine ("mosesdecoder/bin/processPhraseTable -ttable 0 0 train/model/phrase-table.gz -nscores 5 -out binarised-model/phrase-table");  	swBinarise.Write (mosesDir);  	swBinarise.WriteLine ("mosesdecoder/bin/processLexicalTable -in train/model/reordering-table.wbe-msd-bidirectional-fe.gz -out binarised-model/reordering-table");  	swBinarise.WriteLine ();  	swTune.Write ("cd ");  	swTune.WriteLine (workingDir);  	swTune.Write (mosesDir);  	swTune.Write ("mosesdecoder/scripts/training/mert-moses.pl ");  	swTune.Write (srcTuneFile);  	swTune.Write (" ");  	swTune.Write (trgTuneFile);  	swTune.Write (" ");  	swTune.Write (mosesDir);  	swTune.Write ("mosesdecoder/bin/moses train/model/distortion-adjusted.moses.ini --mertdir ");  	swTune.Write (mosesDir);  	swTune.Write ("mosesdecoder/bin/ &> mert.out &");  	swTune.WriteLine ();  	swIni.Write ("cd ");  	swIni.WriteLine (workingDir);  	swIni.WriteLine ("cp mert-work/moses.ini binarised-model.moses.ini");  	swIni.Write ("sed -i \'s/0 0 0 5 ");  	string adjustedWorkingDir = workingDir.Replace ("/"' "\\/");  	swIni.Write (adjustedWorkingDir);  	swIni.Write ("train\\/model\\/phrase-table\\.gz/1 0 0 5 ");  	swIni.Write (adjustedWorkingDir);  	swIni.WriteLine ("binarised-model\\/phrase-table/g\' binarised-model.moses.ini");  	swIni.Write ("sed -i \'s/0-0 wbe-msd-bidirectional-fe-allff 6 ");  	swIni.Write (adjustedWorkingDir);  	swIni.Write ("train\\/model\\/reordering-table\\.wbe-msd-bidirectional-fe\\.gz/0-0 wbe-msd-bidirectional-fe-allff 6 ");  	swIni.Write (adjustedWorkingDir);  	swIni.WriteLine ("binarised-model\\/reordering-table/g\' binarised-model.moses.ini");  	swIni.WriteLine ();  	swDistLimit.Write ("cd ");  	swDistLimit.WriteLine (workingDir);  	swDistLimit.Write ("mono ");  	swDistLimit.Write (perlScriptDir);  	swDistLimit.WriteLine ("AdjustDistortionLimit.exe train/model/moses.ini train/model/distortion-adjusted.moses.ini 2");  }  
Magic Number,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,Main,The following statement contains a magic number: foreach (string file in Directory.GetFiles (inDir' "*." + ext)) {  	string fileName = Path.GetFileName (file);  	string srcLang = fileName.Substring (0' 2);  	string trgLang = fileName.Substring (3' 2);  	string langPairDir = outDir + srcLang + "_" + trgLang + Path.DirectorySeparatorChar.ToString ();  	if (!Directory.Exists (langPairDir))  		Directory.CreateDirectory (langPairDir);  	List<string> srcWords = new List<string> ();  	List<string> trgWords = new List<string> ();  	ReadDictionary (file' ref srcWords' ref trgWords' thr);  	List<string> randomSrcTrainData = new List<string> ();  	List<string> randomTrgTrainData = new List<string> ();  	List<string> randomSrcTuneData = new List<string> ();  	List<string> randomTrgTuneData = new List<string> ();  	GetRandomData (srcWords' trgWords' ref randomSrcTrainData' ref randomTrgTrainData' ref randomSrcTuneData' ref randomTrgTuneData);  	string trainDataDir = langPairDir + "data" + Path.DirectorySeparatorChar.ToString ();  	if (!Directory.Exists (trainDataDir))  		Directory.CreateDirectory (trainDataDir);  	SaveData (srcLang' trgLang' trainDataDir' randomSrcTrainData' randomTrgTrainData' randomSrcTuneData' randomTrgTuneData);  	//we assume that monolingual language models have been already trained! This is because I already have IRSTLM language models for all languages!  	string srcTuneFile = trainDataDir + "tune." + srcLang;  	string trgTuneFile = trainDataDir + "tune." + trgLang;  	string trainFile = trainDataDir + "train";  	string workingDir = langPairDir + "wd";  	//if (!Directory.Exists(workingDir)) Directory.CreateDirectory(workingDir);  	swTrain.Write ("mkdir -p ");  	swTrain.WriteLine (workingDir);  	swTrain.Write ("cd ");  	swTrain.WriteLine (workingDir);  	swTrain.Write (mosesDir);  	swTrain.Write ("mosesdecoder/scripts/training/train-model.perl -external-bin-dir ");  	swTrain.Write (mosesDir);  	swTrain.Write ("external-bin-dir -root-dir train -corpus ");  	swTrain.Write (trainFile);  	swTrain.Write (" -f ");  	swTrain.Write (srcLang);  	swTrain.Write (" -e ");  	swTrain.Write (trgLang);  	swTrain.Write (" -alignment grow-diag-final-and -reordering msd-bidirectional-fe -lm 0:5:");  	swTrain.Write (langModelDir);  	swTrain.Write ("mono.blm.");  	swTrain.Write (trgLang);  	swTrain.Write (":8 >& training.out &");  	swTrain.WriteLine ();  	swBinarise.Write ("cd ");  	swBinarise.WriteLine (workingDir);  	swBinarise.WriteLine ("mkdir -p binarised-model");  	swBinarise.Write (mosesDir);  	swBinarise.WriteLine ("mosesdecoder/bin/processPhraseTable -ttable 0 0 train/model/phrase-table.gz -nscores 5 -out binarised-model/phrase-table");  	swBinarise.Write (mosesDir);  	swBinarise.WriteLine ("mosesdecoder/bin/processLexicalTable -in train/model/reordering-table.wbe-msd-bidirectional-fe.gz -out binarised-model/reordering-table");  	swBinarise.WriteLine ();  	swTune.Write ("cd ");  	swTune.WriteLine (workingDir);  	swTune.Write (mosesDir);  	swTune.Write ("mosesdecoder/scripts/training/mert-moses.pl ");  	swTune.Write (srcTuneFile);  	swTune.Write (" ");  	swTune.Write (trgTuneFile);  	swTune.Write (" ");  	swTune.Write (mosesDir);  	swTune.Write ("mosesdecoder/bin/moses train/model/distortion-adjusted.moses.ini --mertdir ");  	swTune.Write (mosesDir);  	swTune.Write ("mosesdecoder/bin/ &> mert.out &");  	swTune.WriteLine ();  	swIni.Write ("cd ");  	swIni.WriteLine (workingDir);  	swIni.WriteLine ("cp mert-work/moses.ini binarised-model.moses.ini");  	swIni.Write ("sed -i \'s/0 0 0 5 ");  	string adjustedWorkingDir = workingDir.Replace ("/"' "\\/");  	swIni.Write (adjustedWorkingDir);  	swIni.Write ("train\\/model\\/phrase-table\\.gz/1 0 0 5 ");  	swIni.Write (adjustedWorkingDir);  	swIni.WriteLine ("binarised-model\\/phrase-table/g\' binarised-model.moses.ini");  	swIni.Write ("sed -i \'s/0-0 wbe-msd-bidirectional-fe-allff 6 ");  	swIni.Write (adjustedWorkingDir);  	swIni.Write ("train\\/model\\/reordering-table\\.wbe-msd-bidirectional-fe\\.gz/0-0 wbe-msd-bidirectional-fe-allff 6 ");  	swIni.Write (adjustedWorkingDir);  	swIni.WriteLine ("binarised-model\\/reordering-table/g\' binarised-model.moses.ini");  	swIni.WriteLine ();  	swDistLimit.Write ("cd ");  	swDistLimit.WriteLine (workingDir);  	swDistLimit.Write ("mono ");  	swDistLimit.Write (perlScriptDir);  	swDistLimit.WriteLine ("AdjustDistortionLimit.exe train/model/moses.ini train/model/distortion-adjusted.moses.ini 2");  }  
Magic Number,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,ReadDictionary,The following statement contains a magic number: while (!sr.EndOfStream) {  	string line = sr.ReadLine ().Trim ();  	if (!string.IsNullOrWhiteSpace (line)) {  		string[] arr = line.Split (sep' StringSplitOptions.None);  		if (arr.Length == 3) {  			string srcStr = GetValidStr (arr [0]);  			string trgStr = GetValidStr (arr [1]);  			double prob = Convert.ToDouble (arr [2]' nfi);  			if (prob >= thr) {  				if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  					readPairs.Add (srcStr + trgStr' true);  					srcWords.Add (srcStr);  					trgWords.Add (trgStr);  				}  			}  		}  		else if (arr.Length == 2) {  			string srcStr = GetValidStr (arr [0]);  			string trgStr = GetValidStr (arr [1]);  			if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  				readPairs.Add (srcStr + trgStr' true);  				srcWords.Add (srcStr);  				trgWords.Add (trgStr);  			}  		}  	}  }  
Magic Number,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,ReadDictionary,The following statement contains a magic number: while (!sr.EndOfStream) {  	string line = sr.ReadLine ().Trim ();  	if (!string.IsNullOrWhiteSpace (line)) {  		string[] arr = line.Split (sep' StringSplitOptions.None);  		if (arr.Length == 3) {  			string srcStr = GetValidStr (arr [0]);  			string trgStr = GetValidStr (arr [1]);  			double prob = Convert.ToDouble (arr [2]' nfi);  			if (prob >= thr) {  				if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  					readPairs.Add (srcStr + trgStr' true);  					srcWords.Add (srcStr);  					trgWords.Add (trgStr);  				}  			}  		}  		else if (arr.Length == 2) {  			string srcStr = GetValidStr (arr [0]);  			string trgStr = GetValidStr (arr [1]);  			if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  				readPairs.Add (srcStr + trgStr' true);  				srcWords.Add (srcStr);  				trgWords.Add (trgStr);  			}  		}  	}  }  
Magic Number,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,ReadDictionary,The following statement contains a magic number: while (!sr.EndOfStream) {  	string line = sr.ReadLine ().Trim ();  	if (!string.IsNullOrWhiteSpace (line)) {  		string[] arr = line.Split (sep' StringSplitOptions.None);  		if (arr.Length == 3) {  			string srcStr = GetValidStr (arr [0]);  			string trgStr = GetValidStr (arr [1]);  			double prob = Convert.ToDouble (arr [2]' nfi);  			if (prob >= thr) {  				if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  					readPairs.Add (srcStr + trgStr' true);  					srcWords.Add (srcStr);  					trgWords.Add (trgStr);  				}  			}  		}  		else if (arr.Length == 2) {  			string srcStr = GetValidStr (arr [0]);  			string trgStr = GetValidStr (arr [1]);  			if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  				readPairs.Add (srcStr + trgStr' true);  				srcWords.Add (srcStr);  				trgWords.Add (trgStr);  			}  		}  	}  }  
Magic Number,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,ReadDictionary,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace (line)) {  	string[] arr = line.Split (sep' StringSplitOptions.None);  	if (arr.Length == 3) {  		string srcStr = GetValidStr (arr [0]);  		string trgStr = GetValidStr (arr [1]);  		double prob = Convert.ToDouble (arr [2]' nfi);  		if (prob >= thr) {  			if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  				readPairs.Add (srcStr + trgStr' true);  				srcWords.Add (srcStr);  				trgWords.Add (trgStr);  			}  		}  	}  	else if (arr.Length == 2) {  		string srcStr = GetValidStr (arr [0]);  		string trgStr = GetValidStr (arr [1]);  		if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  			readPairs.Add (srcStr + trgStr' true);  			srcWords.Add (srcStr);  			trgWords.Add (trgStr);  		}  	}  }  
Magic Number,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,ReadDictionary,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace (line)) {  	string[] arr = line.Split (sep' StringSplitOptions.None);  	if (arr.Length == 3) {  		string srcStr = GetValidStr (arr [0]);  		string trgStr = GetValidStr (arr [1]);  		double prob = Convert.ToDouble (arr [2]' nfi);  		if (prob >= thr) {  			if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  				readPairs.Add (srcStr + trgStr' true);  				srcWords.Add (srcStr);  				trgWords.Add (trgStr);  			}  		}  	}  	else if (arr.Length == 2) {  		string srcStr = GetValidStr (arr [0]);  		string trgStr = GetValidStr (arr [1]);  		if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  			readPairs.Add (srcStr + trgStr' true);  			srcWords.Add (srcStr);  			trgWords.Add (trgStr);  		}  	}  }  
Magic Number,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,ReadDictionary,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace (line)) {  	string[] arr = line.Split (sep' StringSplitOptions.None);  	if (arr.Length == 3) {  		string srcStr = GetValidStr (arr [0]);  		string trgStr = GetValidStr (arr [1]);  		double prob = Convert.ToDouble (arr [2]' nfi);  		if (prob >= thr) {  			if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  				readPairs.Add (srcStr + trgStr' true);  				srcWords.Add (srcStr);  				trgWords.Add (trgStr);  			}  		}  	}  	else if (arr.Length == 2) {  		string srcStr = GetValidStr (arr [0]);  		string trgStr = GetValidStr (arr [1]);  		if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  			readPairs.Add (srcStr + trgStr' true);  			srcWords.Add (srcStr);  			trgWords.Add (trgStr);  		}  	}  }  
Magic Number,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,ReadDictionary,The following statement contains a magic number: if (arr.Length == 3) {  	string srcStr = GetValidStr (arr [0]);  	string trgStr = GetValidStr (arr [1]);  	double prob = Convert.ToDouble (arr [2]' nfi);  	if (prob >= thr) {  		if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  			readPairs.Add (srcStr + trgStr' true);  			srcWords.Add (srcStr);  			trgWords.Add (trgStr);  		}  	}  }  else if (arr.Length == 2) {  	string srcStr = GetValidStr (arr [0]);  	string trgStr = GetValidStr (arr [1]);  	if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  		readPairs.Add (srcStr + trgStr' true);  		srcWords.Add (srcStr);  		trgWords.Add (trgStr);  	}  }  
Magic Number,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,ReadDictionary,The following statement contains a magic number: if (arr.Length == 3) {  	string srcStr = GetValidStr (arr [0]);  	string trgStr = GetValidStr (arr [1]);  	double prob = Convert.ToDouble (arr [2]' nfi);  	if (prob >= thr) {  		if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  			readPairs.Add (srcStr + trgStr' true);  			srcWords.Add (srcStr);  			trgWords.Add (trgStr);  		}  	}  }  else if (arr.Length == 2) {  	string srcStr = GetValidStr (arr [0]);  	string trgStr = GetValidStr (arr [1]);  	if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  		readPairs.Add (srcStr + trgStr' true);  		srcWords.Add (srcStr);  		trgWords.Add (trgStr);  	}  }  
Magic Number,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,ReadDictionary,The following statement contains a magic number: if (arr.Length == 3) {  	string srcStr = GetValidStr (arr [0]);  	string trgStr = GetValidStr (arr [1]);  	double prob = Convert.ToDouble (arr [2]' nfi);  	if (prob >= thr) {  		if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  			readPairs.Add (srcStr + trgStr' true);  			srcWords.Add (srcStr);  			trgWords.Add (trgStr);  		}  	}  }  else if (arr.Length == 2) {  	string srcStr = GetValidStr (arr [0]);  	string trgStr = GetValidStr (arr [1]);  	if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  		readPairs.Add (srcStr + trgStr' true);  		srcWords.Add (srcStr);  		trgWords.Add (trgStr);  	}  }  
Magic Number,BuildTrainingScriptsForTranslitSMT,Program,C:\repos\pmarcis_dict-filtering\BuildTrainingScriptsForTranslitSMT\Program.cs,ReadDictionary,The following statement contains a magic number: if (arr.Length == 2) {  	string srcStr = GetValidStr (arr [0]);  	string trgStr = GetValidStr (arr [1]);  	if (!readPairs.ContainsKey (srcStr + trgStr) && !string.IsNullOrWhiteSpace (srcStr) && !string.IsNullOrWhiteSpace (trgStr)) {  		readPairs.Add (srcStr + trgStr' true);  		srcWords.Add (srcStr);  		trgWords.Add (trgStr);  	}  }  
