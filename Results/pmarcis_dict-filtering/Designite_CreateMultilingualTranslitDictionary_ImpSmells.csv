Implementation smell,Namespace,Class,File,Method,Description
Long Method,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The method has 146 lines of code.
Complex Method,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,Cyclomatic complexity of the method is 33
Long Statement,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The length of the statement  "	Dictionary<string' Dictionary<string' Dictionary<string' Dictionary<int' double>>>> dataDict = new Dictionary<string' Dictionary<string' Dictionary<string' Dictionary<int' double>>>> (); " is 186.
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < args.Length; i++) {  	if (args [i] == "-i" && args.Length > i + 2) {  		int count = Convert.ToInt32 (args [i + 1]);  		for (int j = 2; j < count + 2; j++) {  			if (args.Length > i + j) {  				inDirList.Add (args [i + j]);  			}  		}  	}  	else if (args [i] == "-e" && args.Length > i + 1) {  		extension = args [i + 1];  	}  	else if (args [i] == "-o" && args.Length > i + 1) {  		outFile = args [i + 1];  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < args.Length; i++) {  	if (args [i] == "-i" && args.Length > i + 2) {  		int count = Convert.ToInt32 (args [i + 1]);  		for (int j = 2; j < count + 2; j++) {  			if (args.Length > i + j) {  				inDirList.Add (args [i + j]);  			}  		}  	}  	else if (args [i] == "-e" && args.Length > i + 1) {  		extension = args [i + 1];  	}  	else if (args [i] == "-o" && args.Length > i + 1) {  		outFile = args [i + 1];  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < args.Length; i++) {  	if (args [i] == "-i" && args.Length > i + 2) {  		int count = Convert.ToInt32 (args [i + 1]);  		for (int j = 2; j < count + 2; j++) {  			if (args.Length > i + j) {  				inDirList.Add (args [i + j]);  			}  		}  	}  	else if (args [i] == "-e" && args.Length > i + 1) {  		extension = args [i + 1];  	}  	else if (args [i] == "-o" && args.Length > i + 1) {  		outFile = args [i + 1];  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (args [i] == "-i" && args.Length > i + 2) {  	int count = Convert.ToInt32 (args [i + 1]);  	for (int j = 2; j < count + 2; j++) {  		if (args.Length > i + j) {  			inDirList.Add (args [i + j]);  		}  	}  }  else if (args [i] == "-e" && args.Length > i + 1) {  	extension = args [i + 1];  }  else if (args [i] == "-o" && args.Length > i + 1) {  	outFile = args [i + 1];  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (args [i] == "-i" && args.Length > i + 2) {  	int count = Convert.ToInt32 (args [i + 1]);  	for (int j = 2; j < count + 2; j++) {  		if (args.Length > i + j) {  			inDirList.Add (args [i + j]);  		}  	}  }  else if (args [i] == "-e" && args.Length > i + 1) {  	extension = args [i + 1];  }  else if (args [i] == "-o" && args.Length > i + 1) {  	outFile = args [i + 1];  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (args [i] == "-i" && args.Length > i + 2) {  	int count = Convert.ToInt32 (args [i + 1]);  	for (int j = 2; j < count + 2; j++) {  		if (args.Length > i + j) {  			inDirList.Add (args [i + j]);  		}  	}  }  else if (args [i] == "-e" && args.Length > i + 1) {  	extension = args [i + 1];  }  else if (args [i] == "-o" && args.Length > i + 1) {  	outFile = args [i + 1];  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: for (int j = 2; j < count + 2; j++) {  	if (args.Length > i + j) {  		inDirList.Add (args [i + j]);  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: for (int j = 2; j < count + 2; j++) {  	if (args.Length > i + j) {  		inDirList.Add (args [i + j]);  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: foreach (string inDir in inDirList) {  	iterationCounter++;  	foreach (string file in Directory.GetFiles (inDir' "*." + extension' SearchOption.AllDirectories)) {  		string name = Path.GetFileName (file);  		if (name.StartsWith (srcLang)) {  			string trgLang = name.Substring (3' 2);  			if (!langDict.ContainsKey (trgLang))  				langDict.Add (trgLang' true);  			StreamReader sr = new StreamReader (file' Encoding.UTF8);  			while (!sr.EndOfStream) {  				string line = sr.ReadLine ().Trim ();  				if (!string.IsNullOrWhiteSpace (line)) {  					string[] arr = line.Split (sep' StringSplitOptions.None);  					if (arr.Length == 3) {  						double prob = Convert.ToDouble (arr [2]' nfi);  						if (!dataDict.ContainsKey (arr [0]))  							dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  						if (!dataDict [arr [0]].ContainsKey (trgLang))  							dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  						if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  							dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  						if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  							dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  					}  					else if (arr.Length == 2) {  						double prob = 1.0;  						string src = arr [0];  						string trg = arr [1];  						if (iterationCounter == 1) {  							//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  							src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  							trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  							double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  							double maxLen = Math.Max (src.Length' trg.Length);  							prob = (maxLen - levenshtainDistance) / maxLen;  						}  						if (!dataDict.ContainsKey (arr [0]))  							dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  						if (!dataDict [arr [0]].ContainsKey (trgLang))  							dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  						if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  							dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  						if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  							dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  					}  				}  			}  			sr.Close ();  		}  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: foreach (string inDir in inDirList) {  	iterationCounter++;  	foreach (string file in Directory.GetFiles (inDir' "*." + extension' SearchOption.AllDirectories)) {  		string name = Path.GetFileName (file);  		if (name.StartsWith (srcLang)) {  			string trgLang = name.Substring (3' 2);  			if (!langDict.ContainsKey (trgLang))  				langDict.Add (trgLang' true);  			StreamReader sr = new StreamReader (file' Encoding.UTF8);  			while (!sr.EndOfStream) {  				string line = sr.ReadLine ().Trim ();  				if (!string.IsNullOrWhiteSpace (line)) {  					string[] arr = line.Split (sep' StringSplitOptions.None);  					if (arr.Length == 3) {  						double prob = Convert.ToDouble (arr [2]' nfi);  						if (!dataDict.ContainsKey (arr [0]))  							dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  						if (!dataDict [arr [0]].ContainsKey (trgLang))  							dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  						if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  							dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  						if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  							dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  					}  					else if (arr.Length == 2) {  						double prob = 1.0;  						string src = arr [0];  						string trg = arr [1];  						if (iterationCounter == 1) {  							//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  							src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  							trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  							double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  							double maxLen = Math.Max (src.Length' trg.Length);  							prob = (maxLen - levenshtainDistance) / maxLen;  						}  						if (!dataDict.ContainsKey (arr [0]))  							dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  						if (!dataDict [arr [0]].ContainsKey (trgLang))  							dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  						if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  							dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  						if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  							dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  					}  				}  			}  			sr.Close ();  		}  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: foreach (string inDir in inDirList) {  	iterationCounter++;  	foreach (string file in Directory.GetFiles (inDir' "*." + extension' SearchOption.AllDirectories)) {  		string name = Path.GetFileName (file);  		if (name.StartsWith (srcLang)) {  			string trgLang = name.Substring (3' 2);  			if (!langDict.ContainsKey (trgLang))  				langDict.Add (trgLang' true);  			StreamReader sr = new StreamReader (file' Encoding.UTF8);  			while (!sr.EndOfStream) {  				string line = sr.ReadLine ().Trim ();  				if (!string.IsNullOrWhiteSpace (line)) {  					string[] arr = line.Split (sep' StringSplitOptions.None);  					if (arr.Length == 3) {  						double prob = Convert.ToDouble (arr [2]' nfi);  						if (!dataDict.ContainsKey (arr [0]))  							dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  						if (!dataDict [arr [0]].ContainsKey (trgLang))  							dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  						if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  							dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  						if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  							dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  					}  					else if (arr.Length == 2) {  						double prob = 1.0;  						string src = arr [0];  						string trg = arr [1];  						if (iterationCounter == 1) {  							//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  							src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  							trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  							double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  							double maxLen = Math.Max (src.Length' trg.Length);  							prob = (maxLen - levenshtainDistance) / maxLen;  						}  						if (!dataDict.ContainsKey (arr [0]))  							dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  						if (!dataDict [arr [0]].ContainsKey (trgLang))  							dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  						if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  							dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  						if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  							dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  					}  				}  			}  			sr.Close ();  		}  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: foreach (string inDir in inDirList) {  	iterationCounter++;  	foreach (string file in Directory.GetFiles (inDir' "*." + extension' SearchOption.AllDirectories)) {  		string name = Path.GetFileName (file);  		if (name.StartsWith (srcLang)) {  			string trgLang = name.Substring (3' 2);  			if (!langDict.ContainsKey (trgLang))  				langDict.Add (trgLang' true);  			StreamReader sr = new StreamReader (file' Encoding.UTF8);  			while (!sr.EndOfStream) {  				string line = sr.ReadLine ().Trim ();  				if (!string.IsNullOrWhiteSpace (line)) {  					string[] arr = line.Split (sep' StringSplitOptions.None);  					if (arr.Length == 3) {  						double prob = Convert.ToDouble (arr [2]' nfi);  						if (!dataDict.ContainsKey (arr [0]))  							dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  						if (!dataDict [arr [0]].ContainsKey (trgLang))  							dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  						if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  							dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  						if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  							dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  					}  					else if (arr.Length == 2) {  						double prob = 1.0;  						string src = arr [0];  						string trg = arr [1];  						if (iterationCounter == 1) {  							//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  							src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  							trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  							double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  							double maxLen = Math.Max (src.Length' trg.Length);  							prob = (maxLen - levenshtainDistance) / maxLen;  						}  						if (!dataDict.ContainsKey (arr [0]))  							dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  						if (!dataDict [arr [0]].ContainsKey (trgLang))  							dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  						if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  							dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  						if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  							dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  					}  				}  			}  			sr.Close ();  		}  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: foreach (string inDir in inDirList) {  	iterationCounter++;  	foreach (string file in Directory.GetFiles (inDir' "*." + extension' SearchOption.AllDirectories)) {  		string name = Path.GetFileName (file);  		if (name.StartsWith (srcLang)) {  			string trgLang = name.Substring (3' 2);  			if (!langDict.ContainsKey (trgLang))  				langDict.Add (trgLang' true);  			StreamReader sr = new StreamReader (file' Encoding.UTF8);  			while (!sr.EndOfStream) {  				string line = sr.ReadLine ().Trim ();  				if (!string.IsNullOrWhiteSpace (line)) {  					string[] arr = line.Split (sep' StringSplitOptions.None);  					if (arr.Length == 3) {  						double prob = Convert.ToDouble (arr [2]' nfi);  						if (!dataDict.ContainsKey (arr [0]))  							dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  						if (!dataDict [arr [0]].ContainsKey (trgLang))  							dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  						if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  							dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  						if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  							dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  					}  					else if (arr.Length == 2) {  						double prob = 1.0;  						string src = arr [0];  						string trg = arr [1];  						if (iterationCounter == 1) {  							//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  							src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  							trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  							double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  							double maxLen = Math.Max (src.Length' trg.Length);  							prob = (maxLen - levenshtainDistance) / maxLen;  						}  						if (!dataDict.ContainsKey (arr [0]))  							dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  						if (!dataDict [arr [0]].ContainsKey (trgLang))  							dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  						if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  							dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  						if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  							dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  					}  				}  			}  			sr.Close ();  		}  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: foreach (string file in Directory.GetFiles (inDir' "*." + extension' SearchOption.AllDirectories)) {  	string name = Path.GetFileName (file);  	if (name.StartsWith (srcLang)) {  		string trgLang = name.Substring (3' 2);  		if (!langDict.ContainsKey (trgLang))  			langDict.Add (trgLang' true);  		StreamReader sr = new StreamReader (file' Encoding.UTF8);  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ().Trim ();  			if (!string.IsNullOrWhiteSpace (line)) {  				string[] arr = line.Split (sep' StringSplitOptions.None);  				if (arr.Length == 3) {  					double prob = Convert.ToDouble (arr [2]' nfi);  					if (!dataDict.ContainsKey (arr [0]))  						dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  					if (!dataDict [arr [0]].ContainsKey (trgLang))  						dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  					if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  						dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  					if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  						dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  				}  				else if (arr.Length == 2) {  					double prob = 1.0;  					string src = arr [0];  					string trg = arr [1];  					if (iterationCounter == 1) {  						//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  						src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  						trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  						double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  						double maxLen = Math.Max (src.Length' trg.Length);  						prob = (maxLen - levenshtainDistance) / maxLen;  					}  					if (!dataDict.ContainsKey (arr [0]))  						dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  					if (!dataDict [arr [0]].ContainsKey (trgLang))  						dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  					if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  						dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  					if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  						dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  				}  			}  		}  		sr.Close ();  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: foreach (string file in Directory.GetFiles (inDir' "*." + extension' SearchOption.AllDirectories)) {  	string name = Path.GetFileName (file);  	if (name.StartsWith (srcLang)) {  		string trgLang = name.Substring (3' 2);  		if (!langDict.ContainsKey (trgLang))  			langDict.Add (trgLang' true);  		StreamReader sr = new StreamReader (file' Encoding.UTF8);  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ().Trim ();  			if (!string.IsNullOrWhiteSpace (line)) {  				string[] arr = line.Split (sep' StringSplitOptions.None);  				if (arr.Length == 3) {  					double prob = Convert.ToDouble (arr [2]' nfi);  					if (!dataDict.ContainsKey (arr [0]))  						dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  					if (!dataDict [arr [0]].ContainsKey (trgLang))  						dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  					if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  						dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  					if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  						dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  				}  				else if (arr.Length == 2) {  					double prob = 1.0;  					string src = arr [0];  					string trg = arr [1];  					if (iterationCounter == 1) {  						//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  						src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  						trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  						double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  						double maxLen = Math.Max (src.Length' trg.Length);  						prob = (maxLen - levenshtainDistance) / maxLen;  					}  					if (!dataDict.ContainsKey (arr [0]))  						dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  					if (!dataDict [arr [0]].ContainsKey (trgLang))  						dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  					if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  						dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  					if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  						dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  				}  			}  		}  		sr.Close ();  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: foreach (string file in Directory.GetFiles (inDir' "*." + extension' SearchOption.AllDirectories)) {  	string name = Path.GetFileName (file);  	if (name.StartsWith (srcLang)) {  		string trgLang = name.Substring (3' 2);  		if (!langDict.ContainsKey (trgLang))  			langDict.Add (trgLang' true);  		StreamReader sr = new StreamReader (file' Encoding.UTF8);  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ().Trim ();  			if (!string.IsNullOrWhiteSpace (line)) {  				string[] arr = line.Split (sep' StringSplitOptions.None);  				if (arr.Length == 3) {  					double prob = Convert.ToDouble (arr [2]' nfi);  					if (!dataDict.ContainsKey (arr [0]))  						dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  					if (!dataDict [arr [0]].ContainsKey (trgLang))  						dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  					if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  						dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  					if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  						dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  				}  				else if (arr.Length == 2) {  					double prob = 1.0;  					string src = arr [0];  					string trg = arr [1];  					if (iterationCounter == 1) {  						//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  						src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  						trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  						double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  						double maxLen = Math.Max (src.Length' trg.Length);  						prob = (maxLen - levenshtainDistance) / maxLen;  					}  					if (!dataDict.ContainsKey (arr [0]))  						dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  					if (!dataDict [arr [0]].ContainsKey (trgLang))  						dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  					if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  						dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  					if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  						dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  				}  			}  		}  		sr.Close ();  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: foreach (string file in Directory.GetFiles (inDir' "*." + extension' SearchOption.AllDirectories)) {  	string name = Path.GetFileName (file);  	if (name.StartsWith (srcLang)) {  		string trgLang = name.Substring (3' 2);  		if (!langDict.ContainsKey (trgLang))  			langDict.Add (trgLang' true);  		StreamReader sr = new StreamReader (file' Encoding.UTF8);  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ().Trim ();  			if (!string.IsNullOrWhiteSpace (line)) {  				string[] arr = line.Split (sep' StringSplitOptions.None);  				if (arr.Length == 3) {  					double prob = Convert.ToDouble (arr [2]' nfi);  					if (!dataDict.ContainsKey (arr [0]))  						dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  					if (!dataDict [arr [0]].ContainsKey (trgLang))  						dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  					if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  						dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  					if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  						dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  				}  				else if (arr.Length == 2) {  					double prob = 1.0;  					string src = arr [0];  					string trg = arr [1];  					if (iterationCounter == 1) {  						//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  						src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  						trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  						double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  						double maxLen = Math.Max (src.Length' trg.Length);  						prob = (maxLen - levenshtainDistance) / maxLen;  					}  					if (!dataDict.ContainsKey (arr [0]))  						dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  					if (!dataDict [arr [0]].ContainsKey (trgLang))  						dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  					if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  						dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  					if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  						dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  				}  			}  		}  		sr.Close ();  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: foreach (string file in Directory.GetFiles (inDir' "*." + extension' SearchOption.AllDirectories)) {  	string name = Path.GetFileName (file);  	if (name.StartsWith (srcLang)) {  		string trgLang = name.Substring (3' 2);  		if (!langDict.ContainsKey (trgLang))  			langDict.Add (trgLang' true);  		StreamReader sr = new StreamReader (file' Encoding.UTF8);  		while (!sr.EndOfStream) {  			string line = sr.ReadLine ().Trim ();  			if (!string.IsNullOrWhiteSpace (line)) {  				string[] arr = line.Split (sep' StringSplitOptions.None);  				if (arr.Length == 3) {  					double prob = Convert.ToDouble (arr [2]' nfi);  					if (!dataDict.ContainsKey (arr [0]))  						dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  					if (!dataDict [arr [0]].ContainsKey (trgLang))  						dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  					if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  						dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  					if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  						dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  				}  				else if (arr.Length == 2) {  					double prob = 1.0;  					string src = arr [0];  					string trg = arr [1];  					if (iterationCounter == 1) {  						//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  						src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  						trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  						double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  						double maxLen = Math.Max (src.Length' trg.Length);  						prob = (maxLen - levenshtainDistance) / maxLen;  					}  					if (!dataDict.ContainsKey (arr [0]))  						dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  					if (!dataDict [arr [0]].ContainsKey (trgLang))  						dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  					if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  						dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  					if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  						dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  				}  			}  		}  		sr.Close ();  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (name.StartsWith (srcLang)) {  	string trgLang = name.Substring (3' 2);  	if (!langDict.ContainsKey (trgLang))  		langDict.Add (trgLang' true);  	StreamReader sr = new StreamReader (file' Encoding.UTF8);  	while (!sr.EndOfStream) {  		string line = sr.ReadLine ().Trim ();  		if (!string.IsNullOrWhiteSpace (line)) {  			string[] arr = line.Split (sep' StringSplitOptions.None);  			if (arr.Length == 3) {  				double prob = Convert.ToDouble (arr [2]' nfi);  				if (!dataDict.ContainsKey (arr [0]))  					dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  				if (!dataDict [arr [0]].ContainsKey (trgLang))  					dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  				if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  					dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  				if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  					dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  			}  			else if (arr.Length == 2) {  				double prob = 1.0;  				string src = arr [0];  				string trg = arr [1];  				if (iterationCounter == 1) {  					//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  					src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  					trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  					double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  					double maxLen = Math.Max (src.Length' trg.Length);  					prob = (maxLen - levenshtainDistance) / maxLen;  				}  				if (!dataDict.ContainsKey (arr [0]))  					dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  				if (!dataDict [arr [0]].ContainsKey (trgLang))  					dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  				if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  					dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  				if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  					dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  			}  		}  	}  	sr.Close ();  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (name.StartsWith (srcLang)) {  	string trgLang = name.Substring (3' 2);  	if (!langDict.ContainsKey (trgLang))  		langDict.Add (trgLang' true);  	StreamReader sr = new StreamReader (file' Encoding.UTF8);  	while (!sr.EndOfStream) {  		string line = sr.ReadLine ().Trim ();  		if (!string.IsNullOrWhiteSpace (line)) {  			string[] arr = line.Split (sep' StringSplitOptions.None);  			if (arr.Length == 3) {  				double prob = Convert.ToDouble (arr [2]' nfi);  				if (!dataDict.ContainsKey (arr [0]))  					dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  				if (!dataDict [arr [0]].ContainsKey (trgLang))  					dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  				if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  					dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  				if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  					dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  			}  			else if (arr.Length == 2) {  				double prob = 1.0;  				string src = arr [0];  				string trg = arr [1];  				if (iterationCounter == 1) {  					//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  					src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  					trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  					double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  					double maxLen = Math.Max (src.Length' trg.Length);  					prob = (maxLen - levenshtainDistance) / maxLen;  				}  				if (!dataDict.ContainsKey (arr [0]))  					dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  				if (!dataDict [arr [0]].ContainsKey (trgLang))  					dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  				if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  					dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  				if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  					dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  			}  		}  	}  	sr.Close ();  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (name.StartsWith (srcLang)) {  	string trgLang = name.Substring (3' 2);  	if (!langDict.ContainsKey (trgLang))  		langDict.Add (trgLang' true);  	StreamReader sr = new StreamReader (file' Encoding.UTF8);  	while (!sr.EndOfStream) {  		string line = sr.ReadLine ().Trim ();  		if (!string.IsNullOrWhiteSpace (line)) {  			string[] arr = line.Split (sep' StringSplitOptions.None);  			if (arr.Length == 3) {  				double prob = Convert.ToDouble (arr [2]' nfi);  				if (!dataDict.ContainsKey (arr [0]))  					dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  				if (!dataDict [arr [0]].ContainsKey (trgLang))  					dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  				if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  					dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  				if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  					dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  			}  			else if (arr.Length == 2) {  				double prob = 1.0;  				string src = arr [0];  				string trg = arr [1];  				if (iterationCounter == 1) {  					//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  					src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  					trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  					double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  					double maxLen = Math.Max (src.Length' trg.Length);  					prob = (maxLen - levenshtainDistance) / maxLen;  				}  				if (!dataDict.ContainsKey (arr [0]))  					dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  				if (!dataDict [arr [0]].ContainsKey (trgLang))  					dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  				if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  					dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  				if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  					dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  			}  		}  	}  	sr.Close ();  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (name.StartsWith (srcLang)) {  	string trgLang = name.Substring (3' 2);  	if (!langDict.ContainsKey (trgLang))  		langDict.Add (trgLang' true);  	StreamReader sr = new StreamReader (file' Encoding.UTF8);  	while (!sr.EndOfStream) {  		string line = sr.ReadLine ().Trim ();  		if (!string.IsNullOrWhiteSpace (line)) {  			string[] arr = line.Split (sep' StringSplitOptions.None);  			if (arr.Length == 3) {  				double prob = Convert.ToDouble (arr [2]' nfi);  				if (!dataDict.ContainsKey (arr [0]))  					dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  				if (!dataDict [arr [0]].ContainsKey (trgLang))  					dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  				if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  					dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  				if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  					dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  			}  			else if (arr.Length == 2) {  				double prob = 1.0;  				string src = arr [0];  				string trg = arr [1];  				if (iterationCounter == 1) {  					//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  					src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  					trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  					double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  					double maxLen = Math.Max (src.Length' trg.Length);  					prob = (maxLen - levenshtainDistance) / maxLen;  				}  				if (!dataDict.ContainsKey (arr [0]))  					dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  				if (!dataDict [arr [0]].ContainsKey (trgLang))  					dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  				if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  					dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  				if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  					dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  			}  		}  	}  	sr.Close ();  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (name.StartsWith (srcLang)) {  	string trgLang = name.Substring (3' 2);  	if (!langDict.ContainsKey (trgLang))  		langDict.Add (trgLang' true);  	StreamReader sr = new StreamReader (file' Encoding.UTF8);  	while (!sr.EndOfStream) {  		string line = sr.ReadLine ().Trim ();  		if (!string.IsNullOrWhiteSpace (line)) {  			string[] arr = line.Split (sep' StringSplitOptions.None);  			if (arr.Length == 3) {  				double prob = Convert.ToDouble (arr [2]' nfi);  				if (!dataDict.ContainsKey (arr [0]))  					dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  				if (!dataDict [arr [0]].ContainsKey (trgLang))  					dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  				if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  					dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  				if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  					dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  			}  			else if (arr.Length == 2) {  				double prob = 1.0;  				string src = arr [0];  				string trg = arr [1];  				if (iterationCounter == 1) {  					//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  					src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  					trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  					double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  					double maxLen = Math.Max (src.Length' trg.Length);  					prob = (maxLen - levenshtainDistance) / maxLen;  				}  				if (!dataDict.ContainsKey (arr [0]))  					dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  				if (!dataDict [arr [0]].ContainsKey (trgLang))  					dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  				if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  					dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  				if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  					dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  			}  		}  	}  	sr.Close ();  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: while (!sr.EndOfStream) {  	string line = sr.ReadLine ().Trim ();  	if (!string.IsNullOrWhiteSpace (line)) {  		string[] arr = line.Split (sep' StringSplitOptions.None);  		if (arr.Length == 3) {  			double prob = Convert.ToDouble (arr [2]' nfi);  			if (!dataDict.ContainsKey (arr [0]))  				dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  			if (!dataDict [arr [0]].ContainsKey (trgLang))  				dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  			if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  				dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  			if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  				dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  		}  		else if (arr.Length == 2) {  			double prob = 1.0;  			string src = arr [0];  			string trg = arr [1];  			if (iterationCounter == 1) {  				//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  				src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  				trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  				double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  				double maxLen = Math.Max (src.Length' trg.Length);  				prob = (maxLen - levenshtainDistance) / maxLen;  			}  			if (!dataDict.ContainsKey (arr [0]))  				dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  			if (!dataDict [arr [0]].ContainsKey (trgLang))  				dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  			if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  				dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  			if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  				dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  		}  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: while (!sr.EndOfStream) {  	string line = sr.ReadLine ().Trim ();  	if (!string.IsNullOrWhiteSpace (line)) {  		string[] arr = line.Split (sep' StringSplitOptions.None);  		if (arr.Length == 3) {  			double prob = Convert.ToDouble (arr [2]' nfi);  			if (!dataDict.ContainsKey (arr [0]))  				dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  			if (!dataDict [arr [0]].ContainsKey (trgLang))  				dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  			if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  				dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  			if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  				dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  		}  		else if (arr.Length == 2) {  			double prob = 1.0;  			string src = arr [0];  			string trg = arr [1];  			if (iterationCounter == 1) {  				//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  				src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  				trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  				double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  				double maxLen = Math.Max (src.Length' trg.Length);  				prob = (maxLen - levenshtainDistance) / maxLen;  			}  			if (!dataDict.ContainsKey (arr [0]))  				dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  			if (!dataDict [arr [0]].ContainsKey (trgLang))  				dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  			if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  				dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  			if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  				dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  		}  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: while (!sr.EndOfStream) {  	string line = sr.ReadLine ().Trim ();  	if (!string.IsNullOrWhiteSpace (line)) {  		string[] arr = line.Split (sep' StringSplitOptions.None);  		if (arr.Length == 3) {  			double prob = Convert.ToDouble (arr [2]' nfi);  			if (!dataDict.ContainsKey (arr [0]))  				dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  			if (!dataDict [arr [0]].ContainsKey (trgLang))  				dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  			if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  				dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  			if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  				dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  		}  		else if (arr.Length == 2) {  			double prob = 1.0;  			string src = arr [0];  			string trg = arr [1];  			if (iterationCounter == 1) {  				//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  				src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  				trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  				double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  				double maxLen = Math.Max (src.Length' trg.Length);  				prob = (maxLen - levenshtainDistance) / maxLen;  			}  			if (!dataDict.ContainsKey (arr [0]))  				dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  			if (!dataDict [arr [0]].ContainsKey (trgLang))  				dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  			if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  				dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  			if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  				dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  		}  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace (line)) {  	string[] arr = line.Split (sep' StringSplitOptions.None);  	if (arr.Length == 3) {  		double prob = Convert.ToDouble (arr [2]' nfi);  		if (!dataDict.ContainsKey (arr [0]))  			dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  		if (!dataDict [arr [0]].ContainsKey (trgLang))  			dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  		if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  			dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  		if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  			dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  	}  	else if (arr.Length == 2) {  		double prob = 1.0;  		string src = arr [0];  		string trg = arr [1];  		if (iterationCounter == 1) {  			//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  			src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  			trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  			double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  			double maxLen = Math.Max (src.Length' trg.Length);  			prob = (maxLen - levenshtainDistance) / maxLen;  		}  		if (!dataDict.ContainsKey (arr [0]))  			dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  		if (!dataDict [arr [0]].ContainsKey (trgLang))  			dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  		if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  			dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  		if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  			dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace (line)) {  	string[] arr = line.Split (sep' StringSplitOptions.None);  	if (arr.Length == 3) {  		double prob = Convert.ToDouble (arr [2]' nfi);  		if (!dataDict.ContainsKey (arr [0]))  			dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  		if (!dataDict [arr [0]].ContainsKey (trgLang))  			dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  		if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  			dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  		if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  			dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  	}  	else if (arr.Length == 2) {  		double prob = 1.0;  		string src = arr [0];  		string trg = arr [1];  		if (iterationCounter == 1) {  			//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  			src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  			trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  			double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  			double maxLen = Math.Max (src.Length' trg.Length);  			prob = (maxLen - levenshtainDistance) / maxLen;  		}  		if (!dataDict.ContainsKey (arr [0]))  			dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  		if (!dataDict [arr [0]].ContainsKey (trgLang))  			dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  		if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  			dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  		if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  			dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace (line)) {  	string[] arr = line.Split (sep' StringSplitOptions.None);  	if (arr.Length == 3) {  		double prob = Convert.ToDouble (arr [2]' nfi);  		if (!dataDict.ContainsKey (arr [0]))  			dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  		if (!dataDict [arr [0]].ContainsKey (trgLang))  			dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  		if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  			dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  		if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  			dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  	}  	else if (arr.Length == 2) {  		double prob = 1.0;  		string src = arr [0];  		string trg = arr [1];  		if (iterationCounter == 1) {  			//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  			src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  			trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  			double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  			double maxLen = Math.Max (src.Length' trg.Length);  			prob = (maxLen - levenshtainDistance) / maxLen;  		}  		if (!dataDict.ContainsKey (arr [0]))  			dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  		if (!dataDict [arr [0]].ContainsKey (trgLang))  			dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  		if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  			dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  		if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  			dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  	}  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (arr.Length == 3) {  	double prob = Convert.ToDouble (arr [2]' nfi);  	if (!dataDict.ContainsKey (arr [0]))  		dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  	if (!dataDict [arr [0]].ContainsKey (trgLang))  		dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  	if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  		dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  	if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  		dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  }  else if (arr.Length == 2) {  	double prob = 1.0;  	string src = arr [0];  	string trg = arr [1];  	if (iterationCounter == 1) {  		//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  		src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  		trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  		double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  		double maxLen = Math.Max (src.Length' trg.Length);  		prob = (maxLen - levenshtainDistance) / maxLen;  	}  	if (!dataDict.ContainsKey (arr [0]))  		dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  	if (!dataDict [arr [0]].ContainsKey (trgLang))  		dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  	if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  		dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  	if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  		dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (arr.Length == 3) {  	double prob = Convert.ToDouble (arr [2]' nfi);  	if (!dataDict.ContainsKey (arr [0]))  		dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  	if (!dataDict [arr [0]].ContainsKey (trgLang))  		dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  	if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  		dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  	if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  		dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  }  else if (arr.Length == 2) {  	double prob = 1.0;  	string src = arr [0];  	string trg = arr [1];  	if (iterationCounter == 1) {  		//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  		src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  		trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  		double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  		double maxLen = Math.Max (src.Length' trg.Length);  		prob = (maxLen - levenshtainDistance) / maxLen;  	}  	if (!dataDict.ContainsKey (arr [0]))  		dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  	if (!dataDict [arr [0]].ContainsKey (trgLang))  		dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  	if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  		dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  	if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  		dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (arr.Length == 3) {  	double prob = Convert.ToDouble (arr [2]' nfi);  	if (!dataDict.ContainsKey (arr [0]))  		dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  	if (!dataDict [arr [0]].ContainsKey (trgLang))  		dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  	if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  		dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  	if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  		dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  }  else if (arr.Length == 2) {  	double prob = 1.0;  	string src = arr [0];  	string trg = arr [1];  	if (iterationCounter == 1) {  		//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  		src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  		trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  		double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  		double maxLen = Math.Max (src.Length' trg.Length);  		prob = (maxLen - levenshtainDistance) / maxLen;  	}  	if (!dataDict.ContainsKey (arr [0]))  		dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  	if (!dataDict [arr [0]].ContainsKey (trgLang))  		dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  	if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  		dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  	if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  		dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  }  
Magic Number,CreateMultilingualTranslitDictionary,Program,C:\repos\pmarcis_dict-filtering\CreateMultilingualTranslitDictionary\Program.cs,Main,The following statement contains a magic number: if (arr.Length == 2) {  	double prob = 1.0;  	string src = arr [0];  	string trg = arr [1];  	if (iterationCounter == 1) {  		//As the initial data did not contain (that is' I forgot to add) the probabilities' we need to calculate them!  		src = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (src);  		trg = FilterGizaDictionary.SimpleCharacterTransliteration.Transliterate (trg);  		double levenshtainDistance = FilterGizaDictionary.LevenshteinDistance.Compute (src' trg);  		double maxLen = Math.Max (src.Length' trg.Length);  		prob = (maxLen - levenshtainDistance) / maxLen;  	}  	if (!dataDict.ContainsKey (arr [0]))  		dataDict.Add (arr [0]' new Dictionary<string' Dictionary<string' Dictionary<int' double>>> ());  	if (!dataDict [arr [0]].ContainsKey (trgLang))  		dataDict [arr [0]].Add (trgLang' new Dictionary<string' Dictionary<int' double>> ());  	if (!dataDict [arr [0]] [trgLang].ContainsKey (arr [1]))  		dataDict [arr [0]] [trgLang].Add (arr [1]' new Dictionary<int' double> ());  	if (!dataDict [arr [0]] [trgLang] [arr [1]].ContainsKey (iterationCounter))  		dataDict [arr [0]] [trgLang] [arr [1]].Add (iterationCounter' prob);  }  
