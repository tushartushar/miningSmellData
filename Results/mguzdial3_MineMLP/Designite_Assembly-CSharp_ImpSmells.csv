Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Environment,MapGenerator,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\MapGenerator.cs,SpawnSubmarine,Cyclomatic complexity of the method is 8
Complex Method,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,StringToOscMessage,Cyclomatic complexity of the method is 11
Complex Method,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,Cyclomatic complexity of the method is 9
Complex Method,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,Cyclomatic complexity of the method is 9
Long Parameter List,Environment,LightComputer,C:\repos\mguzdial3_MineMLP\Assets\Map\Map\LightComputer.cs,Smooth,The method has 5 parameters.
Long Statement,Environment,Map,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Map.cs,SetBlock,The length of the statement  "			changeList.Add ("" + x + " " + y + " " + z + " " + Array.IndexOf (TerrainGenerator.blockNames' block.block.GetName ())); " is 120.
Long Statement,Environment,Map,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Map.cs,SetBlock,The length of the statement  "				changeList.Add ("" + x + " " + y + " " + z + " -" + (Array.IndexOf (TerrainGenerator.blockNames' data.block.GetName ()))); " is 122.
Long Statement,Environment,Map,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Map.cs,CheckEquivalentBlocks,The length of the statement  "	return (blockData.block != null && HasBlockSet () && blockData.block.GetName ().Equals (blockSet.GetBlock (blockIndex).GetName ())); " is 132.
Long Statement,Environment,LightComputer,C:\repos\mguzdial3_MineMLP\Assets\Map\Map\LightComputer.cs,IsTerrainEnd,The length of the statement  "	return lightmap.IsSunLight (x - 1' y' z) && lightmap.IsSunLight (x + 1' y' z) && lightmap.IsSunLight (x' y' z - 1) && lightmap.IsSunLight (x' y' z + 1); " is 152.
Empty Catch Block,Environment,UDPPacketIO,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\UDPPacketIO.cs,Open,The method has an empty catch block.
Magic Number,Environment,MapGenerator,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\MapGenerator.cs,SpawnSubmarine,The following statement contains a magic number: for (int i = -Chunk.SIZE_X; i < Chunk.SIZE_X; i++) {  	submarineGenerator.GenerateWall (i' -Chunk.SIZE_Z);  	submarineGenerator.GenerateWall (i' Chunk.SIZE_Z - 1);  	if (Math.Abs (i) != 8) {  		submarineGenerator.GenerateWall (i' 0);  	}  }  
Magic Number,Environment,MapGenerator,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\MapGenerator.cs,SpawnSubmarine,The following statement contains a magic number: if (Math.Abs (i) != 8) {  	submarineGenerator.GenerateWall (i' 0);  }  
Magic Number,Environment,MapGenerator,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\MapGenerator.cs,SpawnSubmarine,The following statement contains a magic number: for (int i = -Chunk.SIZE_Z; i < Chunk.SIZE_Z; i++) {  	submarineGenerator.GenerateWall (-Chunk.SIZE_X' i);  	submarineGenerator.GenerateWall (Chunk.SIZE_X - 1' i);  	if (Math.Abs (i) != 8) {  		submarineGenerator.GenerateWall (0' i);  	}  }  
Magic Number,Environment,MapGenerator,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\MapGenerator.cs,SpawnSubmarine,The following statement contains a magic number: if (Math.Abs (i) != 8) {  	submarineGenerator.GenerateWall (0' i);  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,Read,The following statement contains a magic number: while (ReaderRunning) {  	byte[] buffer = new byte[1000];  	int length = OscPacketIO.ReceivePacket (buffer);  	if (length > 0) {  		ArrayList messages = Osc.PacketToOscMessages (buffer' length);  		foreach (OscMessage om in messages) {  			if (AllMessageHandler != null)  				AllMessageHandler (om);  			OscMessageHandler h = (OscMessageHandler)Hashtable.Synchronized (AddressTable) [om.Address];  			if (h != null)  				h (om);  		}  	}  	else  		Thread.Sleep (500);  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,Read,The following statement contains a magic number: while (ReaderRunning) {  	byte[] buffer = new byte[1000];  	int length = OscPacketIO.ReceivePacket (buffer);  	if (length > 0) {  		ArrayList messages = Osc.PacketToOscMessages (buffer' length);  		foreach (OscMessage om in messages) {  			if (AllMessageHandler != null)  				AllMessageHandler (om);  			OscMessageHandler h = (OscMessageHandler)Hashtable.Synchronized (AddressTable) [om.Address];  			if (h != null)  				h (om);  		}  	}  	else  		Thread.Sleep (500);  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,Read,The following statement contains a magic number: if (length > 0) {  	ArrayList messages = Osc.PacketToOscMessages (buffer' length);  	foreach (OscMessage om in messages) {  		if (AllMessageHandler != null)  			AllMessageHandler (om);  		OscMessageHandler h = (OscMessageHandler)Hashtable.Synchronized (AddressTable) [om.Address];  		if (h != null)  			h (om);  	}  }  else  	Thread.Sleep (500);  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,Read,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessagesToPacket,The following statement contains a magic number: if (messages.Count == 1)  	index = OscMessageToPacket ((OscMessage)messages [0]' packet' 0' length);  else {  	// Write the first bundle bit  	index = InsertString ("#bundle"' packet' index' length);  	// Write a null timestamp (another 8bytes)  	int c = 8;  	while ((c--) > 0)  		packet [index++]++;  	// Now' put each message preceded by it's length  	foreach (OscMessage oscM in messages) {  		int lengthIndex = index;  		index += 4;  		int packetStart = index;  		index = OscMessageToPacket (oscM' packet' index' length);  		int packetSize = index - packetStart;  		packet [lengthIndex++] = (byte)((packetSize >> 24) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize >> 16) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize >> 8) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize) & 0xFF);  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessagesToPacket,The following statement contains a magic number: if (messages.Count == 1)  	index = OscMessageToPacket ((OscMessage)messages [0]' packet' 0' length);  else {  	// Write the first bundle bit  	index = InsertString ("#bundle"' packet' index' length);  	// Write a null timestamp (another 8bytes)  	int c = 8;  	while ((c--) > 0)  		packet [index++]++;  	// Now' put each message preceded by it's length  	foreach (OscMessage oscM in messages) {  		int lengthIndex = index;  		index += 4;  		int packetStart = index;  		index = OscMessageToPacket (oscM' packet' index' length);  		int packetSize = index - packetStart;  		packet [lengthIndex++] = (byte)((packetSize >> 24) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize >> 16) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize >> 8) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize) & 0xFF);  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessagesToPacket,The following statement contains a magic number: if (messages.Count == 1)  	index = OscMessageToPacket ((OscMessage)messages [0]' packet' 0' length);  else {  	// Write the first bundle bit  	index = InsertString ("#bundle"' packet' index' length);  	// Write a null timestamp (another 8bytes)  	int c = 8;  	while ((c--) > 0)  		packet [index++]++;  	// Now' put each message preceded by it's length  	foreach (OscMessage oscM in messages) {  		int lengthIndex = index;  		index += 4;  		int packetStart = index;  		index = OscMessageToPacket (oscM' packet' index' length);  		int packetSize = index - packetStart;  		packet [lengthIndex++] = (byte)((packetSize >> 24) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize >> 16) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize >> 8) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize) & 0xFF);  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessagesToPacket,The following statement contains a magic number: if (messages.Count == 1)  	index = OscMessageToPacket ((OscMessage)messages [0]' packet' 0' length);  else {  	// Write the first bundle bit  	index = InsertString ("#bundle"' packet' index' length);  	// Write a null timestamp (another 8bytes)  	int c = 8;  	while ((c--) > 0)  		packet [index++]++;  	// Now' put each message preceded by it's length  	foreach (OscMessage oscM in messages) {  		int lengthIndex = index;  		index += 4;  		int packetStart = index;  		index = OscMessageToPacket (oscM' packet' index' length);  		int packetSize = index - packetStart;  		packet [lengthIndex++] = (byte)((packetSize >> 24) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize >> 16) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize >> 8) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize) & 0xFF);  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessagesToPacket,The following statement contains a magic number: if (messages.Count == 1)  	index = OscMessageToPacket ((OscMessage)messages [0]' packet' 0' length);  else {  	// Write the first bundle bit  	index = InsertString ("#bundle"' packet' index' length);  	// Write a null timestamp (another 8bytes)  	int c = 8;  	while ((c--) > 0)  		packet [index++]++;  	// Now' put each message preceded by it's length  	foreach (OscMessage oscM in messages) {  		int lengthIndex = index;  		index += 4;  		int packetStart = index;  		index = OscMessageToPacket (oscM' packet' index' length);  		int packetSize = index - packetStart;  		packet [lengthIndex++] = (byte)((packetSize >> 24) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize >> 16) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize >> 8) & 0xFF);  		packet [lengthIndex++] = (byte)((packetSize) & 0xFF);  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessagesToPacket,The following statement contains a magic number: foreach (OscMessage oscM in messages) {  	int lengthIndex = index;  	index += 4;  	int packetStart = index;  	index = OscMessageToPacket (oscM' packet' index' length);  	int packetSize = index - packetStart;  	packet [lengthIndex++] = (byte)((packetSize >> 24) & 0xFF);  	packet [lengthIndex++] = (byte)((packetSize >> 16) & 0xFF);  	packet [lengthIndex++] = (byte)((packetSize >> 8) & 0xFF);  	packet [lengthIndex++] = (byte)((packetSize) & 0xFF);  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessagesToPacket,The following statement contains a magic number: foreach (OscMessage oscM in messages) {  	int lengthIndex = index;  	index += 4;  	int packetStart = index;  	index = OscMessageToPacket (oscM' packet' index' length);  	int packetSize = index - packetStart;  	packet [lengthIndex++] = (byte)((packetSize >> 24) & 0xFF);  	packet [lengthIndex++] = (byte)((packetSize >> 16) & 0xFF);  	packet [lengthIndex++] = (byte)((packetSize >> 8) & 0xFF);  	packet [lengthIndex++] = (byte)((packetSize) & 0xFF);  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessagesToPacket,The following statement contains a magic number: foreach (OscMessage oscM in messages) {  	int lengthIndex = index;  	index += 4;  	int packetStart = index;  	index = OscMessageToPacket (oscM' packet' index' length);  	int packetSize = index - packetStart;  	packet [lengthIndex++] = (byte)((packetSize >> 24) & 0xFF);  	packet [lengthIndex++] = (byte)((packetSize >> 16) & 0xFF);  	packet [lengthIndex++] = (byte)((packetSize >> 8) & 0xFF);  	packet [lengthIndex++] = (byte)((packetSize) & 0xFF);  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessagesToPacket,The following statement contains a magic number: foreach (OscMessage oscM in messages) {  	int lengthIndex = index;  	index += 4;  	int packetStart = index;  	index = OscMessageToPacket (oscM' packet' index' length);  	int packetSize = index - packetStart;  	packet [lengthIndex++] = (byte)((packetSize >> 24) & 0xFF);  	packet [lengthIndex++] = (byte)((packetSize >> 16) & 0xFF);  	packet [lengthIndex++] = (byte)((packetSize >> 8) & 0xFF);  	packet [lengthIndex++] = (byte)((packetSize) & 0xFF);  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessagesToPacket,The following statement contains a magic number: index += 4;  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessagesToPacket,The following statement contains a magic number: packet [lengthIndex++] = (byte)((packetSize >> 24) & 0xFF);  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessagesToPacket,The following statement contains a magic number: packet [lengthIndex++] = (byte)((packetSize >> 16) & 0xFF);  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessagesToPacket,The following statement contains a magic number: packet [lengthIndex++] = (byte)((packetSize >> 8) & 0xFF);  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: index += PadSize (2 + oscM.Values.Count);  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: foreach (object o in oscM.Values) {  	if (o is int) {  		int i = (int)o;  		tag.Append ("i");  		packet [index++] = (byte)((i >> 24) & 0xFF);  		packet [index++] = (byte)((i >> 16) & 0xFF);  		packet [index++] = (byte)((i >> 8) & 0xFF);  		packet [index++] = (byte)((i) & 0xFF);  	}  	else {  		if (o is float) {  			float f = (float)o;  			tag.Append ("f");  			byte[] buffer = new byte[4];  			MemoryStream ms = new MemoryStream (buffer);  			BinaryWriter bw = new BinaryWriter (ms);  			bw.Write (f);  			packet [index++] = buffer [3];  			packet [index++] = buffer [2];  			packet [index++] = buffer [1];  			packet [index++] = buffer [0];  		}  		else {  			if (o is string) {  				tag.Append ("s");  				index = InsertString (o.ToString ()' packet' index' length);  			}  			else {  				tag.Append ("?");  			}  		}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: foreach (object o in oscM.Values) {  	if (o is int) {  		int i = (int)o;  		tag.Append ("i");  		packet [index++] = (byte)((i >> 24) & 0xFF);  		packet [index++] = (byte)((i >> 16) & 0xFF);  		packet [index++] = (byte)((i >> 8) & 0xFF);  		packet [index++] = (byte)((i) & 0xFF);  	}  	else {  		if (o is float) {  			float f = (float)o;  			tag.Append ("f");  			byte[] buffer = new byte[4];  			MemoryStream ms = new MemoryStream (buffer);  			BinaryWriter bw = new BinaryWriter (ms);  			bw.Write (f);  			packet [index++] = buffer [3];  			packet [index++] = buffer [2];  			packet [index++] = buffer [1];  			packet [index++] = buffer [0];  		}  		else {  			if (o is string) {  				tag.Append ("s");  				index = InsertString (o.ToString ()' packet' index' length);  			}  			else {  				tag.Append ("?");  			}  		}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: foreach (object o in oscM.Values) {  	if (o is int) {  		int i = (int)o;  		tag.Append ("i");  		packet [index++] = (byte)((i >> 24) & 0xFF);  		packet [index++] = (byte)((i >> 16) & 0xFF);  		packet [index++] = (byte)((i >> 8) & 0xFF);  		packet [index++] = (byte)((i) & 0xFF);  	}  	else {  		if (o is float) {  			float f = (float)o;  			tag.Append ("f");  			byte[] buffer = new byte[4];  			MemoryStream ms = new MemoryStream (buffer);  			BinaryWriter bw = new BinaryWriter (ms);  			bw.Write (f);  			packet [index++] = buffer [3];  			packet [index++] = buffer [2];  			packet [index++] = buffer [1];  			packet [index++] = buffer [0];  		}  		else {  			if (o is string) {  				tag.Append ("s");  				index = InsertString (o.ToString ()' packet' index' length);  			}  			else {  				tag.Append ("?");  			}  		}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: foreach (object o in oscM.Values) {  	if (o is int) {  		int i = (int)o;  		tag.Append ("i");  		packet [index++] = (byte)((i >> 24) & 0xFF);  		packet [index++] = (byte)((i >> 16) & 0xFF);  		packet [index++] = (byte)((i >> 8) & 0xFF);  		packet [index++] = (byte)((i) & 0xFF);  	}  	else {  		if (o is float) {  			float f = (float)o;  			tag.Append ("f");  			byte[] buffer = new byte[4];  			MemoryStream ms = new MemoryStream (buffer);  			BinaryWriter bw = new BinaryWriter (ms);  			bw.Write (f);  			packet [index++] = buffer [3];  			packet [index++] = buffer [2];  			packet [index++] = buffer [1];  			packet [index++] = buffer [0];  		}  		else {  			if (o is string) {  				tag.Append ("s");  				index = InsertString (o.ToString ()' packet' index' length);  			}  			else {  				tag.Append ("?");  			}  		}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: foreach (object o in oscM.Values) {  	if (o is int) {  		int i = (int)o;  		tag.Append ("i");  		packet [index++] = (byte)((i >> 24) & 0xFF);  		packet [index++] = (byte)((i >> 16) & 0xFF);  		packet [index++] = (byte)((i >> 8) & 0xFF);  		packet [index++] = (byte)((i) & 0xFF);  	}  	else {  		if (o is float) {  			float f = (float)o;  			tag.Append ("f");  			byte[] buffer = new byte[4];  			MemoryStream ms = new MemoryStream (buffer);  			BinaryWriter bw = new BinaryWriter (ms);  			bw.Write (f);  			packet [index++] = buffer [3];  			packet [index++] = buffer [2];  			packet [index++] = buffer [1];  			packet [index++] = buffer [0];  		}  		else {  			if (o is string) {  				tag.Append ("s");  				index = InsertString (o.ToString ()' packet' index' length);  			}  			else {  				tag.Append ("?");  			}  		}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: foreach (object o in oscM.Values) {  	if (o is int) {  		int i = (int)o;  		tag.Append ("i");  		packet [index++] = (byte)((i >> 24) & 0xFF);  		packet [index++] = (byte)((i >> 16) & 0xFF);  		packet [index++] = (byte)((i >> 8) & 0xFF);  		packet [index++] = (byte)((i) & 0xFF);  	}  	else {  		if (o is float) {  			float f = (float)o;  			tag.Append ("f");  			byte[] buffer = new byte[4];  			MemoryStream ms = new MemoryStream (buffer);  			BinaryWriter bw = new BinaryWriter (ms);  			bw.Write (f);  			packet [index++] = buffer [3];  			packet [index++] = buffer [2];  			packet [index++] = buffer [1];  			packet [index++] = buffer [0];  		}  		else {  			if (o is string) {  				tag.Append ("s");  				index = InsertString (o.ToString ()' packet' index' length);  			}  			else {  				tag.Append ("?");  			}  		}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: if (o is int) {  	int i = (int)o;  	tag.Append ("i");  	packet [index++] = (byte)((i >> 24) & 0xFF);  	packet [index++] = (byte)((i >> 16) & 0xFF);  	packet [index++] = (byte)((i >> 8) & 0xFF);  	packet [index++] = (byte)((i) & 0xFF);  }  else {  	if (o is float) {  		float f = (float)o;  		tag.Append ("f");  		byte[] buffer = new byte[4];  		MemoryStream ms = new MemoryStream (buffer);  		BinaryWriter bw = new BinaryWriter (ms);  		bw.Write (f);  		packet [index++] = buffer [3];  		packet [index++] = buffer [2];  		packet [index++] = buffer [1];  		packet [index++] = buffer [0];  	}  	else {  		if (o is string) {  			tag.Append ("s");  			index = InsertString (o.ToString ()' packet' index' length);  		}  		else {  			tag.Append ("?");  		}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: if (o is int) {  	int i = (int)o;  	tag.Append ("i");  	packet [index++] = (byte)((i >> 24) & 0xFF);  	packet [index++] = (byte)((i >> 16) & 0xFF);  	packet [index++] = (byte)((i >> 8) & 0xFF);  	packet [index++] = (byte)((i) & 0xFF);  }  else {  	if (o is float) {  		float f = (float)o;  		tag.Append ("f");  		byte[] buffer = new byte[4];  		MemoryStream ms = new MemoryStream (buffer);  		BinaryWriter bw = new BinaryWriter (ms);  		bw.Write (f);  		packet [index++] = buffer [3];  		packet [index++] = buffer [2];  		packet [index++] = buffer [1];  		packet [index++] = buffer [0];  	}  	else {  		if (o is string) {  			tag.Append ("s");  			index = InsertString (o.ToString ()' packet' index' length);  		}  		else {  			tag.Append ("?");  		}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: if (o is int) {  	int i = (int)o;  	tag.Append ("i");  	packet [index++] = (byte)((i >> 24) & 0xFF);  	packet [index++] = (byte)((i >> 16) & 0xFF);  	packet [index++] = (byte)((i >> 8) & 0xFF);  	packet [index++] = (byte)((i) & 0xFF);  }  else {  	if (o is float) {  		float f = (float)o;  		tag.Append ("f");  		byte[] buffer = new byte[4];  		MemoryStream ms = new MemoryStream (buffer);  		BinaryWriter bw = new BinaryWriter (ms);  		bw.Write (f);  		packet [index++] = buffer [3];  		packet [index++] = buffer [2];  		packet [index++] = buffer [1];  		packet [index++] = buffer [0];  	}  	else {  		if (o is string) {  			tag.Append ("s");  			index = InsertString (o.ToString ()' packet' index' length);  		}  		else {  			tag.Append ("?");  		}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: if (o is int) {  	int i = (int)o;  	tag.Append ("i");  	packet [index++] = (byte)((i >> 24) & 0xFF);  	packet [index++] = (byte)((i >> 16) & 0xFF);  	packet [index++] = (byte)((i >> 8) & 0xFF);  	packet [index++] = (byte)((i) & 0xFF);  }  else {  	if (o is float) {  		float f = (float)o;  		tag.Append ("f");  		byte[] buffer = new byte[4];  		MemoryStream ms = new MemoryStream (buffer);  		BinaryWriter bw = new BinaryWriter (ms);  		bw.Write (f);  		packet [index++] = buffer [3];  		packet [index++] = buffer [2];  		packet [index++] = buffer [1];  		packet [index++] = buffer [0];  	}  	else {  		if (o is string) {  			tag.Append ("s");  			index = InsertString (o.ToString ()' packet' index' length);  		}  		else {  			tag.Append ("?");  		}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: if (o is int) {  	int i = (int)o;  	tag.Append ("i");  	packet [index++] = (byte)((i >> 24) & 0xFF);  	packet [index++] = (byte)((i >> 16) & 0xFF);  	packet [index++] = (byte)((i >> 8) & 0xFF);  	packet [index++] = (byte)((i) & 0xFF);  }  else {  	if (o is float) {  		float f = (float)o;  		tag.Append ("f");  		byte[] buffer = new byte[4];  		MemoryStream ms = new MemoryStream (buffer);  		BinaryWriter bw = new BinaryWriter (ms);  		bw.Write (f);  		packet [index++] = buffer [3];  		packet [index++] = buffer [2];  		packet [index++] = buffer [1];  		packet [index++] = buffer [0];  	}  	else {  		if (o is string) {  			tag.Append ("s");  			index = InsertString (o.ToString ()' packet' index' length);  		}  		else {  			tag.Append ("?");  		}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: if (o is int) {  	int i = (int)o;  	tag.Append ("i");  	packet [index++] = (byte)((i >> 24) & 0xFF);  	packet [index++] = (byte)((i >> 16) & 0xFF);  	packet [index++] = (byte)((i >> 8) & 0xFF);  	packet [index++] = (byte)((i) & 0xFF);  }  else {  	if (o is float) {  		float f = (float)o;  		tag.Append ("f");  		byte[] buffer = new byte[4];  		MemoryStream ms = new MemoryStream (buffer);  		BinaryWriter bw = new BinaryWriter (ms);  		bw.Write (f);  		packet [index++] = buffer [3];  		packet [index++] = buffer [2];  		packet [index++] = buffer [1];  		packet [index++] = buffer [0];  	}  	else {  		if (o is string) {  			tag.Append ("s");  			index = InsertString (o.ToString ()' packet' index' length);  		}  		else {  			tag.Append ("?");  		}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: packet [index++] = (byte)((i >> 24) & 0xFF);  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: packet [index++] = (byte)((i >> 16) & 0xFF);  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: packet [index++] = (byte)((i >> 8) & 0xFF);  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: if (o is float) {  	float f = (float)o;  	tag.Append ("f");  	byte[] buffer = new byte[4];  	MemoryStream ms = new MemoryStream (buffer);  	BinaryWriter bw = new BinaryWriter (ms);  	bw.Write (f);  	packet [index++] = buffer [3];  	packet [index++] = buffer [2];  	packet [index++] = buffer [1];  	packet [index++] = buffer [0];  }  else {  	if (o is string) {  		tag.Append ("s");  		index = InsertString (o.ToString ()' packet' index' length);  	}  	else {  		tag.Append ("?");  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: if (o is float) {  	float f = (float)o;  	tag.Append ("f");  	byte[] buffer = new byte[4];  	MemoryStream ms = new MemoryStream (buffer);  	BinaryWriter bw = new BinaryWriter (ms);  	bw.Write (f);  	packet [index++] = buffer [3];  	packet [index++] = buffer [2];  	packet [index++] = buffer [1];  	packet [index++] = buffer [0];  }  else {  	if (o is string) {  		tag.Append ("s");  		index = InsertString (o.ToString ()' packet' index' length);  	}  	else {  		tag.Append ("?");  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: if (o is float) {  	float f = (float)o;  	tag.Append ("f");  	byte[] buffer = new byte[4];  	MemoryStream ms = new MemoryStream (buffer);  	BinaryWriter bw = new BinaryWriter (ms);  	bw.Write (f);  	packet [index++] = buffer [3];  	packet [index++] = buffer [2];  	packet [index++] = buffer [1];  	packet [index++] = buffer [0];  }  else {  	if (o is string) {  		tag.Append ("s");  		index = InsertString (o.ToString ()' packet' index' length);  	}  	else {  		tag.Append ("?");  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: packet [index++] = buffer [3];  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,OscMessageToPacket,The following statement contains a magic number: packet [index++] = buffer [2];  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,The following statement contains a magic number: switch ((char)packet [start]) {  case '/':  	index = ExtractMessage (messages' packet' index' length);  	break;  case '#':  	string bundleString = ExtractString (packet' start' length);  	if (bundleString == "#bundle") {  		// skip the "bundle" and the timestamp  		index += 16;  		while (index < length) {  			int messageSize = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  			/*int newIndex = */ExtractMessages (messages' packet' index' length);  			index += messageSize;  		}  	}  	break;  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,The following statement contains a magic number: switch ((char)packet [start]) {  case '/':  	index = ExtractMessage (messages' packet' index' length);  	break;  case '#':  	string bundleString = ExtractString (packet' start' length);  	if (bundleString == "#bundle") {  		// skip the "bundle" and the timestamp  		index += 16;  		while (index < length) {  			int messageSize = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  			/*int newIndex = */ExtractMessages (messages' packet' index' length);  			index += messageSize;  		}  	}  	break;  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,The following statement contains a magic number: switch ((char)packet [start]) {  case '/':  	index = ExtractMessage (messages' packet' index' length);  	break;  case '#':  	string bundleString = ExtractString (packet' start' length);  	if (bundleString == "#bundle") {  		// skip the "bundle" and the timestamp  		index += 16;  		while (index < length) {  			int messageSize = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  			/*int newIndex = */ExtractMessages (messages' packet' index' length);  			index += messageSize;  		}  	}  	break;  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,The following statement contains a magic number: switch ((char)packet [start]) {  case '/':  	index = ExtractMessage (messages' packet' index' length);  	break;  case '#':  	string bundleString = ExtractString (packet' start' length);  	if (bundleString == "#bundle") {  		// skip the "bundle" and the timestamp  		index += 16;  		while (index < length) {  			int messageSize = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  			/*int newIndex = */ExtractMessages (messages' packet' index' length);  			index += messageSize;  		}  	}  	break;  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,The following statement contains a magic number: if (bundleString == "#bundle") {  	// skip the "bundle" and the timestamp  	index += 16;  	while (index < length) {  		int messageSize = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  		/*int newIndex = */ExtractMessages (messages' packet' index' length);  		index += messageSize;  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,The following statement contains a magic number: if (bundleString == "#bundle") {  	// skip the "bundle" and the timestamp  	index += 16;  	while (index < length) {  		int messageSize = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  		/*int newIndex = */ExtractMessages (messages' packet' index' length);  		index += messageSize;  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,The following statement contains a magic number: if (bundleString == "#bundle") {  	// skip the "bundle" and the timestamp  	index += 16;  	while (index < length) {  		int messageSize = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  		/*int newIndex = */ExtractMessages (messages' packet' index' length);  		index += messageSize;  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,The following statement contains a magic number: if (bundleString == "#bundle") {  	// skip the "bundle" and the timestamp  	index += 16;  	while (index < length) {  		int messageSize = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  		/*int newIndex = */ExtractMessages (messages' packet' index' length);  		index += messageSize;  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,The following statement contains a magic number: index += 16;  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,The following statement contains a magic number: while (index < length) {  	int messageSize = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  	/*int newIndex = */ExtractMessages (messages' packet' index' length);  	index += messageSize;  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,The following statement contains a magic number: while (index < length) {  	int messageSize = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  	/*int newIndex = */ExtractMessages (messages' packet' index' length);  	index += messageSize;  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,The following statement contains a magic number: while (index < length) {  	int messageSize = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  	/*int newIndex = */ExtractMessages (messages' packet' index' length);  	index += messageSize;  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: foreach (char c in typeTag) {  	switch (c) {  	case ''':  		break;  	case 's': {  		string s = ExtractString (packet' index' length);  		index += PadSize (s.Length + 1);  		oscM.Values.Add (s);  		break;  	}  	case 'i': {  		int i = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  		oscM.Values.Add (i);  		break;  	}  	case 'f': {  		byte[] buffer = new byte[4];  		buffer [3] = packet [index++];  		buffer [2] = packet [index++];  		buffer [1] = packet [index++];  		buffer [0] = packet [index++];  		MemoryStream ms = new MemoryStream (buffer);  		BinaryReader br = new BinaryReader (ms);  		float f = br.ReadSingle ();  		oscM.Values.Add (f);  		break;  	}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: foreach (char c in typeTag) {  	switch (c) {  	case ''':  		break;  	case 's': {  		string s = ExtractString (packet' index' length);  		index += PadSize (s.Length + 1);  		oscM.Values.Add (s);  		break;  	}  	case 'i': {  		int i = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  		oscM.Values.Add (i);  		break;  	}  	case 'f': {  		byte[] buffer = new byte[4];  		buffer [3] = packet [index++];  		buffer [2] = packet [index++];  		buffer [1] = packet [index++];  		buffer [0] = packet [index++];  		MemoryStream ms = new MemoryStream (buffer);  		BinaryReader br = new BinaryReader (ms);  		float f = br.ReadSingle ();  		oscM.Values.Add (f);  		break;  	}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: foreach (char c in typeTag) {  	switch (c) {  	case ''':  		break;  	case 's': {  		string s = ExtractString (packet' index' length);  		index += PadSize (s.Length + 1);  		oscM.Values.Add (s);  		break;  	}  	case 'i': {  		int i = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  		oscM.Values.Add (i);  		break;  	}  	case 'f': {  		byte[] buffer = new byte[4];  		buffer [3] = packet [index++];  		buffer [2] = packet [index++];  		buffer [1] = packet [index++];  		buffer [0] = packet [index++];  		MemoryStream ms = new MemoryStream (buffer);  		BinaryReader br = new BinaryReader (ms);  		float f = br.ReadSingle ();  		oscM.Values.Add (f);  		break;  	}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: foreach (char c in typeTag) {  	switch (c) {  	case ''':  		break;  	case 's': {  		string s = ExtractString (packet' index' length);  		index += PadSize (s.Length + 1);  		oscM.Values.Add (s);  		break;  	}  	case 'i': {  		int i = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  		oscM.Values.Add (i);  		break;  	}  	case 'f': {  		byte[] buffer = new byte[4];  		buffer [3] = packet [index++];  		buffer [2] = packet [index++];  		buffer [1] = packet [index++];  		buffer [0] = packet [index++];  		MemoryStream ms = new MemoryStream (buffer);  		BinaryReader br = new BinaryReader (ms);  		float f = br.ReadSingle ();  		oscM.Values.Add (f);  		break;  	}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: foreach (char c in typeTag) {  	switch (c) {  	case ''':  		break;  	case 's': {  		string s = ExtractString (packet' index' length);  		index += PadSize (s.Length + 1);  		oscM.Values.Add (s);  		break;  	}  	case 'i': {  		int i = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  		oscM.Values.Add (i);  		break;  	}  	case 'f': {  		byte[] buffer = new byte[4];  		buffer [3] = packet [index++];  		buffer [2] = packet [index++];  		buffer [1] = packet [index++];  		buffer [0] = packet [index++];  		MemoryStream ms = new MemoryStream (buffer);  		BinaryReader br = new BinaryReader (ms);  		float f = br.ReadSingle ();  		oscM.Values.Add (f);  		break;  	}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: foreach (char c in typeTag) {  	switch (c) {  	case ''':  		break;  	case 's': {  		string s = ExtractString (packet' index' length);  		index += PadSize (s.Length + 1);  		oscM.Values.Add (s);  		break;  	}  	case 'i': {  		int i = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  		oscM.Values.Add (i);  		break;  	}  	case 'f': {  		byte[] buffer = new byte[4];  		buffer [3] = packet [index++];  		buffer [2] = packet [index++];  		buffer [1] = packet [index++];  		buffer [0] = packet [index++];  		MemoryStream ms = new MemoryStream (buffer);  		BinaryReader br = new BinaryReader (ms);  		float f = br.ReadSingle ();  		oscM.Values.Add (f);  		break;  	}  	}  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: switch (c) {  case ''':  	break;  case 's': {  	string s = ExtractString (packet' index' length);  	index += PadSize (s.Length + 1);  	oscM.Values.Add (s);  	break;  }  case 'i': {  	int i = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  	oscM.Values.Add (i);  	break;  }  case 'f': {  	byte[] buffer = new byte[4];  	buffer [3] = packet [index++];  	buffer [2] = packet [index++];  	buffer [1] = packet [index++];  	buffer [0] = packet [index++];  	MemoryStream ms = new MemoryStream (buffer);  	BinaryReader br = new BinaryReader (ms);  	float f = br.ReadSingle ();  	oscM.Values.Add (f);  	break;  }  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: switch (c) {  case ''':  	break;  case 's': {  	string s = ExtractString (packet' index' length);  	index += PadSize (s.Length + 1);  	oscM.Values.Add (s);  	break;  }  case 'i': {  	int i = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  	oscM.Values.Add (i);  	break;  }  case 'f': {  	byte[] buffer = new byte[4];  	buffer [3] = packet [index++];  	buffer [2] = packet [index++];  	buffer [1] = packet [index++];  	buffer [0] = packet [index++];  	MemoryStream ms = new MemoryStream (buffer);  	BinaryReader br = new BinaryReader (ms);  	float f = br.ReadSingle ();  	oscM.Values.Add (f);  	break;  }  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: switch (c) {  case ''':  	break;  case 's': {  	string s = ExtractString (packet' index' length);  	index += PadSize (s.Length + 1);  	oscM.Values.Add (s);  	break;  }  case 'i': {  	int i = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  	oscM.Values.Add (i);  	break;  }  case 'f': {  	byte[] buffer = new byte[4];  	buffer [3] = packet [index++];  	buffer [2] = packet [index++];  	buffer [1] = packet [index++];  	buffer [0] = packet [index++];  	MemoryStream ms = new MemoryStream (buffer);  	BinaryReader br = new BinaryReader (ms);  	float f = br.ReadSingle ();  	oscM.Values.Add (f);  	break;  }  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: switch (c) {  case ''':  	break;  case 's': {  	string s = ExtractString (packet' index' length);  	index += PadSize (s.Length + 1);  	oscM.Values.Add (s);  	break;  }  case 'i': {  	int i = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  	oscM.Values.Add (i);  	break;  }  case 'f': {  	byte[] buffer = new byte[4];  	buffer [3] = packet [index++];  	buffer [2] = packet [index++];  	buffer [1] = packet [index++];  	buffer [0] = packet [index++];  	MemoryStream ms = new MemoryStream (buffer);  	BinaryReader br = new BinaryReader (ms);  	float f = br.ReadSingle ();  	oscM.Values.Add (f);  	break;  }  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: switch (c) {  case ''':  	break;  case 's': {  	string s = ExtractString (packet' index' length);  	index += PadSize (s.Length + 1);  	oscM.Values.Add (s);  	break;  }  case 'i': {  	int i = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  	oscM.Values.Add (i);  	break;  }  case 'f': {  	byte[] buffer = new byte[4];  	buffer [3] = packet [index++];  	buffer [2] = packet [index++];  	buffer [1] = packet [index++];  	buffer [0] = packet [index++];  	MemoryStream ms = new MemoryStream (buffer);  	BinaryReader br = new BinaryReader (ms);  	float f = br.ReadSingle ();  	oscM.Values.Add (f);  	break;  }  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: switch (c) {  case ''':  	break;  case 's': {  	string s = ExtractString (packet' index' length);  	index += PadSize (s.Length + 1);  	oscM.Values.Add (s);  	break;  }  case 'i': {  	int i = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  	oscM.Values.Add (i);  	break;  }  case 'f': {  	byte[] buffer = new byte[4];  	buffer [3] = packet [index++];  	buffer [2] = packet [index++];  	buffer [1] = packet [index++];  	buffer [0] = packet [index++];  	MemoryStream ms = new MemoryStream (buffer);  	BinaryReader br = new BinaryReader (ms);  	float f = br.ReadSingle ();  	oscM.Values.Add (f);  	break;  }  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: buffer [3] = packet [index++];  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following statement contains a magic number: buffer [2] = packet [index++];  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,InsertString,The following statement contains a magic number: if (pad != 0) {  	pad = 4 - pad;  	while (pad-- > 0)  		packet [index++] = 0;  }  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,InsertString,The following statement contains a magic number: pad = 4 - pad;  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,PadSize,The following statement contains a magic number: if (pad == 0)  	return rawSize;  else  	return rawSize + (4 - pad);  
Magic Number,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,PadSize,The following statement contains a magic number: return rawSize + (4 - pad);  
Magic Number,Environment,SubmarineGenerator,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\SubmarineGenerator.cs,GenerateWall,The following statement contains a magic number: map.SetBlock (wallBlock1' new Vector3i (cx' 2' cz));  
Magic Number,Environment,SubmarineGenerator,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\SubmarineGenerator.cs,GenerateWall,The following statement contains a magic number: map.SetBlock (wallBlock2' new Vector3i (cx' 3' cz));  
Magic Number,Environment,SubmarineGenerator,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\SubmarineGenerator.cs,GenerateWall,The following statement contains a magic number: map.SetBlock (wallBlock2' new Vector3i (cx' 4' cz));  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int z = -1; z < Chunk.SIZE_Z + 1; z++) {  	for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  		int worldX = cx * Chunk.SIZE_X + x;  		int worldZ = cz * Chunk.SIZE_Z + z;  		int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  		//Change this to constant to make a constant map  		if (h1 < 0) {  			h1 *= -1;  		}  		h1 = (h1) < 5 ? 5 : (h1);  		h1 = (h1) > 300 ? 300 : h1;  		int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  		//Change this to constant to make a constant map  		h2 = h2 < 0 ? 0 : h2;  		h2 = 200 > h2 ? 200 : h2;  		h2 += h1;  		int deep = 0;  		int worldY = h2;  		for (; worldY > h1; worldY--) {  			if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  				GenerateBlock (worldX' worldY' worldZ' deep);  				deep++;  			}  			else {  				deep = 0;  			}  		}  		//int down = h1 - Chunk.SIZE_Y;  		for (; worldY >= 0; worldY--) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int z = -1; z < Chunk.SIZE_Z + 1; z++) {  	for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  		int worldX = cx * Chunk.SIZE_X + x;  		int worldZ = cz * Chunk.SIZE_Z + z;  		int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  		//Change this to constant to make a constant map  		if (h1 < 0) {  			h1 *= -1;  		}  		h1 = (h1) < 5 ? 5 : (h1);  		h1 = (h1) > 300 ? 300 : h1;  		int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  		//Change this to constant to make a constant map  		h2 = h2 < 0 ? 0 : h2;  		h2 = 200 > h2 ? 200 : h2;  		h2 += h1;  		int deep = 0;  		int worldY = h2;  		for (; worldY > h1; worldY--) {  			if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  				GenerateBlock (worldX' worldY' worldZ' deep);  				deep++;  			}  			else {  				deep = 0;  			}  		}  		//int down = h1 - Chunk.SIZE_Y;  		for (; worldY >= 0; worldY--) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int z = -1; z < Chunk.SIZE_Z + 1; z++) {  	for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  		int worldX = cx * Chunk.SIZE_X + x;  		int worldZ = cz * Chunk.SIZE_Z + z;  		int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  		//Change this to constant to make a constant map  		if (h1 < 0) {  			h1 *= -1;  		}  		h1 = (h1) < 5 ? 5 : (h1);  		h1 = (h1) > 300 ? 300 : h1;  		int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  		//Change this to constant to make a constant map  		h2 = h2 < 0 ? 0 : h2;  		h2 = 200 > h2 ? 200 : h2;  		h2 += h1;  		int deep = 0;  		int worldY = h2;  		for (; worldY > h1; worldY--) {  			if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  				GenerateBlock (worldX' worldY' worldZ' deep);  				deep++;  			}  			else {  				deep = 0;  			}  		}  		//int down = h1 - Chunk.SIZE_Y;  		for (; worldY >= 0; worldY--) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int z = -1; z < Chunk.SIZE_Z + 1; z++) {  	for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  		int worldX = cx * Chunk.SIZE_X + x;  		int worldZ = cz * Chunk.SIZE_Z + z;  		int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  		//Change this to constant to make a constant map  		if (h1 < 0) {  			h1 *= -1;  		}  		h1 = (h1) < 5 ? 5 : (h1);  		h1 = (h1) > 300 ? 300 : h1;  		int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  		//Change this to constant to make a constant map  		h2 = h2 < 0 ? 0 : h2;  		h2 = 200 > h2 ? 200 : h2;  		h2 += h1;  		int deep = 0;  		int worldY = h2;  		for (; worldY > h1; worldY--) {  			if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  				GenerateBlock (worldX' worldY' worldZ' deep);  				deep++;  			}  			else {  				deep = 0;  			}  		}  		//int down = h1 - Chunk.SIZE_Y;  		for (; worldY >= 0; worldY--) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int z = -1; z < Chunk.SIZE_Z + 1; z++) {  	for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  		int worldX = cx * Chunk.SIZE_X + x;  		int worldZ = cz * Chunk.SIZE_Z + z;  		int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  		//Change this to constant to make a constant map  		if (h1 < 0) {  			h1 *= -1;  		}  		h1 = (h1) < 5 ? 5 : (h1);  		h1 = (h1) > 300 ? 300 : h1;  		int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  		//Change this to constant to make a constant map  		h2 = h2 < 0 ? 0 : h2;  		h2 = 200 > h2 ? 200 : h2;  		h2 += h1;  		int deep = 0;  		int worldY = h2;  		for (; worldY > h1; worldY--) {  			if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  				GenerateBlock (worldX' worldY' worldZ' deep);  				deep++;  			}  			else {  				deep = 0;  			}  		}  		//int down = h1 - Chunk.SIZE_Y;  		for (; worldY >= 0; worldY--) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int z = -1; z < Chunk.SIZE_Z + 1; z++) {  	for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  		int worldX = cx * Chunk.SIZE_X + x;  		int worldZ = cz * Chunk.SIZE_Z + z;  		int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  		//Change this to constant to make a constant map  		if (h1 < 0) {  			h1 *= -1;  		}  		h1 = (h1) < 5 ? 5 : (h1);  		h1 = (h1) > 300 ? 300 : h1;  		int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  		//Change this to constant to make a constant map  		h2 = h2 < 0 ? 0 : h2;  		h2 = 200 > h2 ? 200 : h2;  		h2 += h1;  		int deep = 0;  		int worldY = h2;  		for (; worldY > h1; worldY--) {  			if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  				GenerateBlock (worldX' worldY' worldZ' deep);  				deep++;  			}  			else {  				deep = 0;  			}  		}  		//int down = h1 - Chunk.SIZE_Y;  		for (; worldY >= 0; worldY--) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int z = -1; z < Chunk.SIZE_Z + 1; z++) {  	for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  		int worldX = cx * Chunk.SIZE_X + x;  		int worldZ = cz * Chunk.SIZE_Z + z;  		int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  		//Change this to constant to make a constant map  		if (h1 < 0) {  			h1 *= -1;  		}  		h1 = (h1) < 5 ? 5 : (h1);  		h1 = (h1) > 300 ? 300 : h1;  		int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  		//Change this to constant to make a constant map  		h2 = h2 < 0 ? 0 : h2;  		h2 = 200 > h2 ? 200 : h2;  		h2 += h1;  		int deep = 0;  		int worldY = h2;  		for (; worldY > h1; worldY--) {  			if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  				GenerateBlock (worldX' worldY' worldZ' deep);  				deep++;  			}  			else {  				deep = 0;  			}  		}  		//int down = h1 - Chunk.SIZE_Y;  		for (; worldY >= 0; worldY--) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int z = -1; z < Chunk.SIZE_Z + 1; z++) {  	for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  		int worldX = cx * Chunk.SIZE_X + x;  		int worldZ = cz * Chunk.SIZE_Z + z;  		int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  		//Change this to constant to make a constant map  		if (h1 < 0) {  			h1 *= -1;  		}  		h1 = (h1) < 5 ? 5 : (h1);  		h1 = (h1) > 300 ? 300 : h1;  		int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  		//Change this to constant to make a constant map  		h2 = h2 < 0 ? 0 : h2;  		h2 = 200 > h2 ? 200 : h2;  		h2 += h1;  		int deep = 0;  		int worldY = h2;  		for (; worldY > h1; worldY--) {  			if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  				GenerateBlock (worldX' worldY' worldZ' deep);  				deep++;  			}  			else {  				deep = 0;  			}  		}  		//int down = h1 - Chunk.SIZE_Y;  		for (; worldY >= 0; worldY--) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  	int worldX = cx * Chunk.SIZE_X + x;  	int worldZ = cz * Chunk.SIZE_Z + z;  	int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  	//Change this to constant to make a constant map  	if (h1 < 0) {  		h1 *= -1;  	}  	h1 = (h1) < 5 ? 5 : (h1);  	h1 = (h1) > 300 ? 300 : h1;  	int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  	//Change this to constant to make a constant map  	h2 = h2 < 0 ? 0 : h2;  	h2 = 200 > h2 ? 200 : h2;  	h2 += h1;  	int deep = 0;  	int worldY = h2;  	for (; worldY > h1; worldY--) {  		if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  		else {  			deep = 0;  		}  	}  	//int down = h1 - Chunk.SIZE_Y;  	for (; worldY >= 0; worldY--) {  		GenerateBlock (worldX' worldY' worldZ' deep);  		deep++;  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  	int worldX = cx * Chunk.SIZE_X + x;  	int worldZ = cz * Chunk.SIZE_Z + z;  	int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  	//Change this to constant to make a constant map  	if (h1 < 0) {  		h1 *= -1;  	}  	h1 = (h1) < 5 ? 5 : (h1);  	h1 = (h1) > 300 ? 300 : h1;  	int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  	//Change this to constant to make a constant map  	h2 = h2 < 0 ? 0 : h2;  	h2 = 200 > h2 ? 200 : h2;  	h2 += h1;  	int deep = 0;  	int worldY = h2;  	for (; worldY > h1; worldY--) {  		if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  		else {  			deep = 0;  		}  	}  	//int down = h1 - Chunk.SIZE_Y;  	for (; worldY >= 0; worldY--) {  		GenerateBlock (worldX' worldY' worldZ' deep);  		deep++;  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  	int worldX = cx * Chunk.SIZE_X + x;  	int worldZ = cz * Chunk.SIZE_Z + z;  	int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  	//Change this to constant to make a constant map  	if (h1 < 0) {  		h1 *= -1;  	}  	h1 = (h1) < 5 ? 5 : (h1);  	h1 = (h1) > 300 ? 300 : h1;  	int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  	//Change this to constant to make a constant map  	h2 = h2 < 0 ? 0 : h2;  	h2 = 200 > h2 ? 200 : h2;  	h2 += h1;  	int deep = 0;  	int worldY = h2;  	for (; worldY > h1; worldY--) {  		if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  		else {  			deep = 0;  		}  	}  	//int down = h1 - Chunk.SIZE_Y;  	for (; worldY >= 0; worldY--) {  		GenerateBlock (worldX' worldY' worldZ' deep);  		deep++;  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  	int worldX = cx * Chunk.SIZE_X + x;  	int worldZ = cz * Chunk.SIZE_Z + z;  	int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  	//Change this to constant to make a constant map  	if (h1 < 0) {  		h1 *= -1;  	}  	h1 = (h1) < 5 ? 5 : (h1);  	h1 = (h1) > 300 ? 300 : h1;  	int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  	//Change this to constant to make a constant map  	h2 = h2 < 0 ? 0 : h2;  	h2 = 200 > h2 ? 200 : h2;  	h2 += h1;  	int deep = 0;  	int worldY = h2;  	for (; worldY > h1; worldY--) {  		if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  		else {  			deep = 0;  		}  	}  	//int down = h1 - Chunk.SIZE_Y;  	for (; worldY >= 0; worldY--) {  		GenerateBlock (worldX' worldY' worldZ' deep);  		deep++;  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  	int worldX = cx * Chunk.SIZE_X + x;  	int worldZ = cz * Chunk.SIZE_Z + z;  	int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  	//Change this to constant to make a constant map  	if (h1 < 0) {  		h1 *= -1;  	}  	h1 = (h1) < 5 ? 5 : (h1);  	h1 = (h1) > 300 ? 300 : h1;  	int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  	//Change this to constant to make a constant map  	h2 = h2 < 0 ? 0 : h2;  	h2 = 200 > h2 ? 200 : h2;  	h2 += h1;  	int deep = 0;  	int worldY = h2;  	for (; worldY > h1; worldY--) {  		if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  		else {  			deep = 0;  		}  	}  	//int down = h1 - Chunk.SIZE_Y;  	for (; worldY >= 0; worldY--) {  		GenerateBlock (worldX' worldY' worldZ' deep);  		deep++;  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  	int worldX = cx * Chunk.SIZE_X + x;  	int worldZ = cz * Chunk.SIZE_Z + z;  	int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  	//Change this to constant to make a constant map  	if (h1 < 0) {  		h1 *= -1;  	}  	h1 = (h1) < 5 ? 5 : (h1);  	h1 = (h1) > 300 ? 300 : h1;  	int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  	//Change this to constant to make a constant map  	h2 = h2 < 0 ? 0 : h2;  	h2 = 200 > h2 ? 200 : h2;  	h2 += h1;  	int deep = 0;  	int worldY = h2;  	for (; worldY > h1; worldY--) {  		if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  		else {  			deep = 0;  		}  	}  	//int down = h1 - Chunk.SIZE_Y;  	for (; worldY >= 0; worldY--) {  		GenerateBlock (worldX' worldY' worldZ' deep);  		deep++;  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  	int worldX = cx * Chunk.SIZE_X + x;  	int worldZ = cz * Chunk.SIZE_Z + z;  	int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  	//Change this to constant to make a constant map  	if (h1 < 0) {  		h1 *= -1;  	}  	h1 = (h1) < 5 ? 5 : (h1);  	h1 = (h1) > 300 ? 300 : h1;  	int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  	//Change this to constant to make a constant map  	h2 = h2 < 0 ? 0 : h2;  	h2 = 200 > h2 ? 200 : h2;  	h2 += h1;  	int deep = 0;  	int worldY = h2;  	for (; worldY > h1; worldY--) {  		if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  		else {  			deep = 0;  		}  	}  	//int down = h1 - Chunk.SIZE_Y;  	for (; worldY >= 0; worldY--) {  		GenerateBlock (worldX' worldY' worldZ' deep);  		deep++;  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: for (int x = -1; x < Chunk.SIZE_X + 1; x++) {  	int worldX = cx * Chunk.SIZE_X + x;  	int worldZ = cz * Chunk.SIZE_Z + z;  	int h1 = (int)(noise1.Noise (worldX' worldZ) * 70);  	//Change this to constant to make a constant map  	if (h1 < 0) {  		h1 *= -1;  	}  	h1 = (h1) < 5 ? 5 : (h1);  	h1 = (h1) > 300 ? 300 : h1;  	int h2 = (int)(noise2.Noise (worldX' worldZ) * 40);  	//Change this to constant to make a constant map  	h2 = h2 < 0 ? 0 : h2;  	h2 = 200 > h2 ? 200 : h2;  	h2 += h1;  	int deep = 0;  	int worldY = h2;  	for (; worldY > h1; worldY--) {  		if (noise3d.Noise (worldX' worldY' worldZ) < 0) {  			GenerateBlock (worldX' worldY' worldZ' deep);  			deep++;  		}  		else {  			deep = 0;  		}  	}  	//int down = h1 - Chunk.SIZE_Y;  	for (; worldY >= 0; worldY--) {  		GenerateBlock (worldX' worldY' worldZ' deep);  		deep++;  	}  }  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: h1 = (h1) < 5 ? 5 : (h1);  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: h1 = (h1) < 5 ? 5 : (h1);  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: h1 = (h1) > 300 ? 300 : h1;  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: h1 = (h1) > 300 ? 300 : h1;  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: h2 = 200 > h2 ? 200 : h2;  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,Generate,The following statement contains a magic number: h2 = 200 > h2 ? 200 : h2;  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,GetBlock,The following statement contains a magic number: if (deep <= 5)  	return blocks [1];  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,GetBlock,The following statement contains a magic number: return blocks [2];  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,GetBlockFancy,The following statement contains a magic number: if (worldY == WATER_LEVEL + 1)  	return blocks [3];  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,GetBlockFancy,The following statement contains a magic number: return blocks [3];  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,GetBlockFancy,The following statement contains a magic number: if (worldY > ICE_LEVEL && deep == 0)  	return blocks [5];  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,GetBlockFancy,The following statement contains a magic number: return blocks [5];  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,GetBlockFancy,The following statement contains a magic number: if (deep <= 5 && deep > 0)  	return blocks [2];  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,GetBlockFancy,The following statement contains a magic number: if (deep <= 5 && deep > 0)  	return blocks [2];  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,GetBlockFancy,The following statement contains a magic number: return blocks [2];  
Magic Number,Environment,TerrainGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TerrainGenerator.cs,GetBlockFancy,The following statement contains a magic number: return blocks [4];  
Magic Number,Environment,TreeGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TreeGenerator.cs,Generate,The following statement contains a magic number: Generate (x' y + 18' z' 0);  
Magic Number,Environment,TreeGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TreeGenerator.cs,Generate,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	map.SetBlock (new BlockData (trunkTree)' x' y + i' z);  }  
Magic Number,Environment,TreeGenerator,C:\repos\mguzdial3_MineMLP\Assets\Map\Generator\TreeGenerator.cs,Generate,The following statement contains a magic number: if (deep > 6)  	return;  
Missing Default,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessages,The following switch statement is missing a default case: switch ((char)packet [start]) {  case '/':  	index = ExtractMessage (messages' packet' index' length);  	break;  case '#':  	string bundleString = ExtractString (packet' start' length);  	if (bundleString == "#bundle") {  		// skip the "bundle" and the timestamp  		index += 16;  		while (index < length) {  			int messageSize = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  			/*int newIndex = */ExtractMessages (messages' packet' index' length);  			index += messageSize;  		}  	}  	break;  }  
Missing Default,Environment,Osc,C:\repos\mguzdial3_MineMLP\Assets\EnvironmentLibrary\Environment\Osc.cs,ExtractMessage,The following switch statement is missing a default case: switch (c) {  case ''':  	break;  case 's': {  	string s = ExtractString (packet' index' length);  	index += PadSize (s.Length + 1);  	oscM.Values.Add (s);  	break;  }  case 'i': {  	int i = (packet [index++] << 24) + (packet [index++] << 16) + (packet [index++] << 8) + packet [index++];  	oscM.Values.Add (i);  	break;  }  case 'f': {  	byte[] buffer = new byte[4];  	buffer [3] = packet [index++];  	buffer [2] = packet [index++];  	buffer [1] = packet [index++];  	buffer [0] = packet [index++];  	MemoryStream ms = new MemoryStream (buffer);  	BinaryReader br = new BinaryReader (ms);  	float f = br.ReadSingle ();  	oscM.Values.Add (f);  	break;  }  }  
