Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Sharpex2D.Rendering.DirectX11,DirectXGraphics,C:\repos\ThuCommix_Sharpex2D\External\Sharpex2D.Rendering.DirectX11\Rendering\DirectX11\DirectXGraphics.cs,DrawTexture,The method has 5 parameters. Parameters: texture' source' destination' color' opacity
Magic Number,Sharpex2D.Rendering.DirectX11,DirectXGraphics,C:\repos\ThuCommix_Sharpex2D\External\Sharpex2D.Rendering.DirectX11\Rendering\DirectX11\DirectXGraphics.cs,Initialize,The following statement contains a magic number: var swapChainDesc = new SwapChainDescription              {                  BufferCount = 2'                  Usage = Usage.RenderTargetOutput'                  OutputHandle = SGL.Components.Get<RenderTarget>().Handle'                  IsWindowed = true'                  ModeDescription =                      new ModeDescription(_graphicsDevice.BackBuffer.Width' _graphicsDevice.BackBuffer.Height'                          new Rational(60' 1)' Format.R8G8B8A8_UNorm)'                  SampleDescription = new SampleDescription(1' 0)'                  Flags = SwapChainFlags.AllowModeSwitch'                  SwapEffect = SwapEffect.Discard              };
Magic Number,Sharpex2D.Rendering.DirectX11,DirectXGraphics,C:\repos\ThuCommix_Sharpex2D\External\Sharpex2D.Rendering.DirectX11\Rendering\DirectX11\DirectXGraphics.cs,Initialize,The following statement contains a magic number: var swapChainDesc = new SwapChainDescription              {                  BufferCount = 2'                  Usage = Usage.RenderTargetOutput'                  OutputHandle = SGL.Components.Get<RenderTarget>().Handle'                  IsWindowed = true'                  ModeDescription =                      new ModeDescription(_graphicsDevice.BackBuffer.Width' _graphicsDevice.BackBuffer.Height'                          new Rational(60' 1)' Format.R8G8B8A8_UNorm)'                  SampleDescription = new SampleDescription(1' 0)'                  Flags = SwapChainFlags.AllowModeSwitch'                  SwapEffect = SwapEffect.Discard              };
Magic Number,Sharpex2D.Rendering.DirectX11,DirectXGraphics,C:\repos\ThuCommix_Sharpex2D\External\Sharpex2D.Rendering.DirectX11\Rendering\DirectX11\DirectXGraphics.cs,Initialize,The following statement contains a magic number: var renderTarget = new SharpDX.Direct2D1.RenderTarget(DirectXHelper.D2DFactory' backBuffer'                  new RenderTargetProperties                  {                      DpiX = 96'                      DpiY = 96'                      MinLevel = FeatureLevel.Level_DEFAULT'                      PixelFormat = new PixelFormat(Format.R8G8B8A8_UNorm' AlphaMode.Ignore)'                      Type = RenderTargetType.Hardware'                      Usage = RenderTargetUsage.None                  }) {TextAntialiasMode = TextAntialiasMode.Cleartype};
Magic Number,Sharpex2D.Rendering.DirectX11,DirectXGraphics,C:\repos\ThuCommix_Sharpex2D\External\Sharpex2D.Rendering.DirectX11\Rendering\DirectX11\DirectXGraphics.cs,Initialize,The following statement contains a magic number: var renderTarget = new SharpDX.Direct2D1.RenderTarget(DirectXHelper.D2DFactory' backBuffer'                  new RenderTargetProperties                  {                      DpiX = 96'                      DpiY = 96'                      MinLevel = FeatureLevel.Level_DEFAULT'                      PixelFormat = new PixelFormat(Format.R8G8B8A8_UNorm' AlphaMode.Ignore)'                      Type = RenderTargetType.Hardware'                      Usage = RenderTargetUsage.None                  }) {TextAntialiasMode = TextAntialiasMode.Cleartype};
Magic Number,Sharpex2D.Rendering.DirectX11,DirectXGraphics,C:\repos\ThuCommix_Sharpex2D\External\Sharpex2D.Rendering.DirectX11\Rendering\DirectX11\DirectXGraphics.cs,DrawString,The following statement contains a magic number: DirectXHelper.RenderTarget.DrawText(text' dxFont.GetFont()'                  new RectangleF(position.X' position.Y' 9999' 9999)' DirectXHelper.ConvertSolidColorBrush(color));
Magic Number,Sharpex2D.Rendering.DirectX11,DirectXGraphics,C:\repos\ThuCommix_Sharpex2D\External\Sharpex2D.Rendering.DirectX11\Rendering\DirectX11\DirectXGraphics.cs,DrawString,The following statement contains a magic number: DirectXHelper.RenderTarget.DrawText(text' dxFont.GetFont()'                  new RectangleF(position.X' position.Y' 9999' 9999)' DirectXHelper.ConvertSolidColorBrush(color));
Magic Number,Sharpex2D.Rendering.DirectX11,DirectXTexture,C:\repos\ThuCommix_Sharpex2D\External\Sharpex2D.Rendering.DirectX11\Rendering\DirectX11\DirectXTexture.cs,DirectXTexture,The following statement contains a magic number: var bitmapProperties = new BitmapProperties(                  new PixelFormat(Format.R8G8B8A8_UNorm' AlphaMode.Premultiplied)' 96' 96);
Magic Number,Sharpex2D.Rendering.DirectX11,DirectXTexture,C:\repos\ThuCommix_Sharpex2D\External\Sharpex2D.Rendering.DirectX11\Rendering\DirectX11\DirectXTexture.cs,DirectXTexture,The following statement contains a magic number: var bitmapProperties = new BitmapProperties(                  new PixelFormat(Format.R8G8B8A8_UNorm' AlphaMode.Premultiplied)' 96' 96);
Magic Number,Sharpex2D.Rendering.DirectX11,DirectXTexture,C:\repos\ThuCommix_Sharpex2D\External\Sharpex2D.Rendering.DirectX11\Rendering\DirectX11\DirectXTexture.cs,DirectXTexture,The following statement contains a magic number: using (var tempStream = new DataStream(bmp.Height*stride' true' true))              {                  BitmapData bitmapData = bmp.LockBits(sourceArea' ImageLockMode.ReadOnly'                      System.Drawing.Imaging.PixelFormat.Format32bppPArgb);                    for (int y = 0; y < bmp.Height; y++)                  {                      int offset = bitmapData.Stride*y;                      for (int x = 0; x < bmp.Width; x++)                      {                          byte b = Marshal.ReadByte(bitmapData.Scan0' offset++);                          byte g = Marshal.ReadByte(bitmapData.Scan0' offset++);                          byte r = Marshal.ReadByte(bitmapData.Scan0' offset++);                          byte a = Marshal.ReadByte(bitmapData.Scan0' offset++);                          int rgba = r | (g << 8) | (b << 16) | (a << 24);                          tempStream.Write(rgba);                      }                  }                  bmp.UnlockBits(bitmapData);                  tempStream.Position = 0;                  _bmp = new Bitmap(DirectXHelper.RenderTarget' size' tempStream' stride' bitmapProperties);              }
Magic Number,Sharpex2D.Rendering.DirectX11,DirectXTexture,C:\repos\ThuCommix_Sharpex2D\External\Sharpex2D.Rendering.DirectX11\Rendering\DirectX11\DirectXTexture.cs,DirectXTexture,The following statement contains a magic number: using (var tempStream = new DataStream(bmp.Height*stride' true' true))              {                  BitmapData bitmapData = bmp.LockBits(sourceArea' ImageLockMode.ReadOnly'                      System.Drawing.Imaging.PixelFormat.Format32bppPArgb);                    for (int y = 0; y < bmp.Height; y++)                  {                      int offset = bitmapData.Stride*y;                      for (int x = 0; x < bmp.Width; x++)                      {                          byte b = Marshal.ReadByte(bitmapData.Scan0' offset++);                          byte g = Marshal.ReadByte(bitmapData.Scan0' offset++);                          byte r = Marshal.ReadByte(bitmapData.Scan0' offset++);                          byte a = Marshal.ReadByte(bitmapData.Scan0' offset++);                          int rgba = r | (g << 8) | (b << 16) | (a << 24);                          tempStream.Write(rgba);                      }                  }                  bmp.UnlockBits(bitmapData);                  tempStream.Position = 0;                  _bmp = new Bitmap(DirectXHelper.RenderTarget' size' tempStream' stride' bitmapProperties);              }
Magic Number,Sharpex2D.Rendering.DirectX11,DirectXTexture,C:\repos\ThuCommix_Sharpex2D\External\Sharpex2D.Rendering.DirectX11\Rendering\DirectX11\DirectXTexture.cs,DirectXTexture,The following statement contains a magic number: using (var tempStream = new DataStream(bmp.Height*stride' true' true))              {                  BitmapData bitmapData = bmp.LockBits(sourceArea' ImageLockMode.ReadOnly'                      System.Drawing.Imaging.PixelFormat.Format32bppPArgb);                    for (int y = 0; y < bmp.Height; y++)                  {                      int offset = bitmapData.Stride*y;                      for (int x = 0; x < bmp.Width; x++)                      {                          byte b = Marshal.ReadByte(bitmapData.Scan0' offset++);                          byte g = Marshal.ReadByte(bitmapData.Scan0' offset++);                          byte r = Marshal.ReadByte(bitmapData.Scan0' offset++);                          byte a = Marshal.ReadByte(bitmapData.Scan0' offset++);                          int rgba = r | (g << 8) | (b << 16) | (a << 24);                          tempStream.Write(rgba);                      }                  }                  bmp.UnlockBits(bitmapData);                  tempStream.Position = 0;                  _bmp = new Bitmap(DirectXHelper.RenderTarget' size' tempStream' stride' bitmapProperties);              }
