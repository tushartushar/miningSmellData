Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,Cyclomatic complexity of the method is 10
Complex Method,Sharpex2D.Audio,WaveStream,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveStream.cs,ReadHeader,Cyclomatic complexity of the method is 10
Complex Method,Sharpex2D.Audio.WaveOut,WaveOut,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveOut\WaveOut.cs,Callback,Cyclomatic complexity of the method is 8
Complex Method,Sharpex2D,GameLoop,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\GameLoop.cs,Loop,Cyclomatic complexity of the method is 8
Complex Method,Sharpex2D.Network.Protocols.Udp,UdpClient,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpClient.cs,InternalBeginReceive,Cyclomatic complexity of the method is 16
Complex Method,Sharpex2D.Network.Protocols.Local,LocalClient,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Local\LocalClient.cs,InternalBeginReceive,Cyclomatic complexity of the method is 16
Long Parameter List,Sharpex2D.Audio.OpenAL,OpenAL,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenAL.cs,alGetSource3f,The method has 5 parameters. Parameters: sourceId' property' val1' val2' val3
Long Parameter List,Sharpex2D.Audio.OpenAL,OpenAL,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenAL.cs,alSource3f,The method has 5 parameters. Parameters: sourceId' property' val1' val2' val3
Long Parameter List,Sharpex2D.Audio.OpenAL,OpenAL,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenAL.cs,alBufferData,The method has 5 parameters. Parameters: bufferId' format' data' byteSize' frequency
Long Parameter List,Sharpex2D.Audio.WaveOut,MMInterops,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveOut\MMInterops.cs,waveOutOpen,The method has 6 parameters. Parameters: hWaveOut' uDeviceID' lpFormat' dwCallback' dwInstance' dwFlags
Long Parameter List,Sharpex2D.Audio.WaveOut,WaveOut,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveOut\WaveOut.cs,Callback,The method has 5 parameters. Parameters: handle' msg' user' header' reserved
Long Parameter List,Sharpex2D,NativeMethods,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Development\NativeMethods.cs,BitBlt,The method has 9 parameters. Parameters: hObject' nXDest' nYDest' nWidth' nHeight' hObjSource' nXSrc' nYSrc' dwRop
Long Parameter List,Sharpex2D,NativeMethods,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Development\NativeMethods.cs,StretchBlt,The method has 11 parameters. Parameters: hdcDest' nXOriginDest' nYOriginDest' nWidthDest' nHeightDest' hdcSrc' nXOriginSrc' nYOriginSrc' nWidthSrc' nHeightSrc' dwRop
Long Parameter List,Sharpex2D,NativeMethods,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Development\NativeMethods.cs,CreateFont,The method has 14 parameters. Parameters: nHeight' nWidth' nEscapement' nOrientation' fnWeight' fdwItalic' fdwUnderline' fdwStrikeOut' fdwCharSet' fdwOutputPrecision' fdwClipPrecision' fdwQuality' fdwPitchAndFamily' lpszFace
Long Parameter List,Sharpex2D.Common.Pathfinding,PathFinder,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Common\Pathfinding\PathFinder.cs,TrySolve,The method has 5 parameters. Parameters: grid' startField' targetField' algorithm' path
Long Parameter List,Sharpex2D.Input,GamepadState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\GamepadState.cs,GamepadState,The method has 19 parameters. Parameters: dpadUp' dpadDown' dpadLeft' dpadRight' aPressed' bPressed' yPressed' xPressed' backPressed' startPressed' leftShoulder' rightShoulder' leftStick' rightStick' guide' leftTrigger' rightTrigger' thumbLeft' thumbRight
Long Parameter List,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The method has 8 parameters. Parameters: x' y' z' r' u' v' pointOfView' buttonStates
Long Parameter List,Sharpex2D.Input,Touch,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\Touch.cs,Touch,The method has 5 parameters. Parameters: id' contact' location' dateTime' touchMode
Long Parameter List,Sharpex2D.Math,MathHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\MathHelper.cs,Barycentric,The method has 5 parameters. Parameters: value1' value2' value3' amount1' amount2
Long Parameter List,Sharpex2D.Math,MathHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\MathHelper.cs,CatmullRom,The method has 5 parameters. Parameters: value1' value2' value3' value4' amount
Long Parameter List,Sharpex2D.Math,MathHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\MathHelper.cs,Hermite,The method has 5 parameters. Parameters: value1' tangent1' value2' tangent2' amount
Long Parameter List,Sharpex2D.Rendering,IRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\IRenderer.cs,DrawTexture,The method has 5 parameters. Parameters: texture' spriteSheet' position' color' opacity
Long Parameter List,Sharpex2D.Rendering,IRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\IRenderer.cs,DrawTexture,The method has 5 parameters. Parameters: texture' spriteSheet' rectangle' color' opacity
Long Parameter List,Sharpex2D.Rendering,IRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\IRenderer.cs,DrawTexture,The method has 5 parameters. Parameters: texture' source' destination' color' opacity
Long Parameter List,Sharpex2D.Rendering,SpriteBatch,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\SpriteBatch.cs,DrawTexture,The method has 5 parameters. Parameters: texture' source' destination' color' opacity
Long Parameter List,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The method has 5 parameters. Parameters: texture' spriteSheet' position' color' opacity
Long Parameter List,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The method has 5 parameters. Parameters: texture' spriteSheet' rectangle' color' opacity
Long Parameter List,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The method has 5 parameters. Parameters: texture' source' destination' color' opacity
Long Parameter List,Sharpex2D.Rendering.OpenGL,OpenGLInterops,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLInterops.cs,glTexSubImage2D,The method has 9 parameters. Parameters: target' level' xoffset' yoffset' width' height' format' type' pixels
Long Parameter List,Sharpex2D.Rendering.OpenGL,OpenGLInterops,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLInterops.cs,glGetTexImage,The method has 5 parameters. Parameters: target' level' format' type' pixels
Long Parameter List,Sharpex2D.Rendering.OpenGL,OpenGLInterops,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLInterops.cs,glTexImage2D,The method has 9 parameters. Parameters: target' level' internalformat' width' height' border' format' type' pixels
Long Parameter List,Sharpex2D.Rendering.OpenGL,OpenGLInterops,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLInterops.cs,TexImage2D,The method has 7 parameters. Parameters: target' internalformat' width' height' format' type' pixels
Long Parameter List,Sharpex2D.Rendering.OpenGL,OpenGLInterops,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLInterops.cs,TexSubImage2D,The method has 9 parameters. Parameters: target' level' xoffset' yoffset' width' height' format' type' pixels
Long Parameter List,Sharpex2D.Rendering.OpenGL,OpenGLInterops,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLInterops.cs,Uniform4,The method has 5 parameters. Parameters: location' v0' v1' v2' v3
Long Parameter List,Sharpex2D.Rendering.OpenGL,OpenGLInterops,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLInterops.cs,VertexAttribPointer,The method has 6 parameters. Parameters: index' size' type' normalized' stride' pointer
Long Parameter List,Sharpex2D.Rendering.OpenGL,VertexBuffer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\VertexBuffer.cs,VertexAttribPointer,The method has 5 parameters. Parameters: index' size' normalized' stride' offset
Complex Conditional,Sharpex2D.Audio.OpenAL,OpenALAudioProvider,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioProvider.cs,AudioBufferPlaybackChanged,The conditional expression  "PlaybackState == PlaybackState.Stopped && !_userStop && _playbackMode == PlaybackMode.Loop &&                  _audioSource != null"  is complex.
Complex Conditional,Sharpex2D.Audio.WaveOut,WaveOutAudioProvider,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveOut\WaveOutAudioProvider.cs,PlaybackChangedEvent,The conditional expression  "PlaybackState == PlaybackState.Stopped && !_userStop && _playbackMode == PlaybackMode.Loop &&                  _currentAudioSource != null"  is complex.
Virtual Method Call from Constructor,Sharpex2D.Rendering,SpriteBatch,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\SpriteBatch.cs,SpriteBatch,The constructor "SpriteBatch" calls a virtual method "Create".
Empty Catch Block,Sharpex2D.Audio.OpenAL,OpenALAudioSource,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioSource.cs,OpenALAudioSource,The method has an empty catch block.
Empty Catch Block,Sharpex2D.Audio.WaveOut,WaveOutAudioSource,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveOut\WaveOutAudioSource.cs,WaveOutAudioSource,The method has an empty catch block.
Magic Number,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,The following statement contains a magic number: format.BitsPerSample != 8 && format.BitsPerSample != 16 || format.Channels != 2
Magic Number,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,The following statement contains a magic number: format.BitsPerSample != 8 && format.BitsPerSample != 16 || format.Channels != 2
Magic Number,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,The following statement contains a magic number: format.BitsPerSample != 8 && format.BitsPerSample != 16 || format.Channels != 2
Magic Number,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,The following statement contains a magic number: switch (format.BitsPerSample)                  {                      case 8:                          for (var n = 0; n < data.Length; n += 2)                          {                              var leftChannel = data[n];                              var rightChannel = data[n + 1];                                data[n] = (byte) (leftChannel*left);                              data[n + 1] = (byte) (rightChannel*right);                          }                          break;                      case 16:                          for (int n = 0; n < data.Length; n += 4)                          {                              int leftChannel = BitConverter.ToInt16(data' n);                              int rightChannel = BitConverter.ToInt16(data' n + 2);                                byte[] sampleleft = BitConverter.GetBytes((short) (leftChannel*left));                              byte[] sampleright = BitConverter.GetBytes((short) (rightChannel*right));                                  data[n] = sampleleft[0];                              data[n + 1] = sampleleft[1];                              data[n + 2] = sampleright[0];                              data[n + 3] = sampleright[1];                          }                          break;                  }
Magic Number,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,The following statement contains a magic number: switch (format.BitsPerSample)                  {                      case 8:                          for (var n = 0; n < data.Length; n += 2)                          {                              var leftChannel = data[n];                              var rightChannel = data[n + 1];                                data[n] = (byte) (leftChannel*left);                              data[n + 1] = (byte) (rightChannel*right);                          }                          break;                      case 16:                          for (int n = 0; n < data.Length; n += 4)                          {                              int leftChannel = BitConverter.ToInt16(data' n);                              int rightChannel = BitConverter.ToInt16(data' n + 2);                                byte[] sampleleft = BitConverter.GetBytes((short) (leftChannel*left));                              byte[] sampleright = BitConverter.GetBytes((short) (rightChannel*right));                                  data[n] = sampleleft[0];                              data[n + 1] = sampleleft[1];                              data[n + 2] = sampleright[0];                              data[n + 3] = sampleright[1];                          }                          break;                  }
Magic Number,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,The following statement contains a magic number: switch (format.BitsPerSample)                  {                      case 8:                          for (var n = 0; n < data.Length; n += 2)                          {                              var leftChannel = data[n];                              var rightChannel = data[n + 1];                                data[n] = (byte) (leftChannel*left);                              data[n + 1] = (byte) (rightChannel*right);                          }                          break;                      case 16:                          for (int n = 0; n < data.Length; n += 4)                          {                              int leftChannel = BitConverter.ToInt16(data' n);                              int rightChannel = BitConverter.ToInt16(data' n + 2);                                byte[] sampleleft = BitConverter.GetBytes((short) (leftChannel*left));                              byte[] sampleright = BitConverter.GetBytes((short) (rightChannel*right));                                  data[n] = sampleleft[0];                              data[n + 1] = sampleleft[1];                              data[n + 2] = sampleright[0];                              data[n + 3] = sampleright[1];                          }                          break;                  }
Magic Number,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,The following statement contains a magic number: switch (format.BitsPerSample)                  {                      case 8:                          for (var n = 0; n < data.Length; n += 2)                          {                              var leftChannel = data[n];                              var rightChannel = data[n + 1];                                data[n] = (byte) (leftChannel*left);                              data[n + 1] = (byte) (rightChannel*right);                          }                          break;                      case 16:                          for (int n = 0; n < data.Length; n += 4)                          {                              int leftChannel = BitConverter.ToInt16(data' n);                              int rightChannel = BitConverter.ToInt16(data' n + 2);                                byte[] sampleleft = BitConverter.GetBytes((short) (leftChannel*left));                              byte[] sampleright = BitConverter.GetBytes((short) (rightChannel*right));                                  data[n] = sampleleft[0];                              data[n + 1] = sampleleft[1];                              data[n + 2] = sampleright[0];                              data[n + 3] = sampleright[1];                          }                          break;                  }
Magic Number,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,The following statement contains a magic number: switch (format.BitsPerSample)                  {                      case 8:                          for (var n = 0; n < data.Length; n += 2)                          {                              var leftChannel = data[n];                              var rightChannel = data[n + 1];                                data[n] = (byte) (leftChannel*left);                              data[n + 1] = (byte) (rightChannel*right);                          }                          break;                      case 16:                          for (int n = 0; n < data.Length; n += 4)                          {                              int leftChannel = BitConverter.ToInt16(data' n);                              int rightChannel = BitConverter.ToInt16(data' n + 2);                                byte[] sampleleft = BitConverter.GetBytes((short) (leftChannel*left));                              byte[] sampleright = BitConverter.GetBytes((short) (rightChannel*right));                                  data[n] = sampleleft[0];                              data[n + 1] = sampleleft[1];                              data[n + 2] = sampleright[0];                              data[n + 3] = sampleright[1];                          }                          break;                  }
Magic Number,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,The following statement contains a magic number: switch (format.BitsPerSample)                  {                      case 8:                          for (var n = 0; n < data.Length; n += 2)                          {                              var leftChannel = data[n];                              var rightChannel = data[n + 1];                                data[n] = (byte) (leftChannel*left);                              data[n + 1] = (byte) (rightChannel*right);                          }                          break;                      case 16:                          for (int n = 0; n < data.Length; n += 4)                          {                              int leftChannel = BitConverter.ToInt16(data' n);                              int rightChannel = BitConverter.ToInt16(data' n + 2);                                byte[] sampleleft = BitConverter.GetBytes((short) (leftChannel*left));                              byte[] sampleright = BitConverter.GetBytes((short) (rightChannel*right));                                  data[n] = sampleleft[0];                              data[n + 1] = sampleleft[1];                              data[n + 2] = sampleright[0];                              data[n + 3] = sampleright[1];                          }                          break;                  }
Magic Number,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,The following statement contains a magic number: switch (format.BitsPerSample)                  {                      case 8:                          for (var n = 0; n < data.Length; n += 2)                          {                              var leftChannel = data[n];                              var rightChannel = data[n + 1];                                data[n] = (byte) (leftChannel*left);                              data[n + 1] = (byte) (rightChannel*right);                          }                          break;                      case 16:                          for (int n = 0; n < data.Length; n += 4)                          {                              int leftChannel = BitConverter.ToInt16(data' n);                              int rightChannel = BitConverter.ToInt16(data' n + 2);                                byte[] sampleleft = BitConverter.GetBytes((short) (leftChannel*left));                              byte[] sampleright = BitConverter.GetBytes((short) (rightChannel*right));                                  data[n] = sampleleft[0];                              data[n + 1] = sampleleft[1];                              data[n + 2] = sampleright[0];                              data[n + 3] = sampleright[1];                          }                          break;                  }
Magic Number,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,The following statement contains a magic number: format.Channels == 2
Magic Number,Sharpex2D.Audio,WaveStream,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveStream.cs,ReadChunk,The following statement contains a magic number: var ch = new byte[4];
Magic Number,Sharpex2D.Audio,WaveStream,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveStream.cs,ReadHeader,The following statement contains a magic number: len < 16
Magic Number,Sharpex2D.Audio,WaveStream,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveStream.cs,ReadHeader,The following statement contains a magic number: Format = new WaveFormat(22050' 16' 2)              {                  Format = (WaveFormats) reader.ReadInt16()'                  Channels = reader.ReadInt16()'                  SamplesPerSec = reader.ReadInt32()'                  AvgBytesPerSec = reader.ReadInt32()'                  BlockAlign = reader.ReadInt16()'                  BitsPerSample = reader.ReadInt16()              };
Magic Number,Sharpex2D.Audio,WaveStream,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveStream.cs,ReadHeader,The following statement contains a magic number: Format = new WaveFormat(22050' 16' 2)              {                  Format = (WaveFormats) reader.ReadInt16()'                  Channels = reader.ReadInt16()'                  SamplesPerSec = reader.ReadInt32()'                  AvgBytesPerSec = reader.ReadInt32()'                  BlockAlign = reader.ReadInt16()'                  BitsPerSample = reader.ReadInt16()              };
Magic Number,Sharpex2D.Audio,WaveStream,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveStream.cs,ReadHeader,The following statement contains a magic number: Format = new WaveFormat(22050' 16' 2)              {                  Format = (WaveFormats) reader.ReadInt16()'                  Channels = reader.ReadInt16()'                  SamplesPerSec = reader.ReadInt32()'                  AvgBytesPerSec = reader.ReadInt32()'                  BlockAlign = reader.ReadInt16()'                  BitsPerSample = reader.ReadInt16()              };
Magic Number,Sharpex2D.Audio,WaveStream,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveStream.cs,ReadHeader,The following statement contains a magic number: len -= 16;
Magic Number,Sharpex2D.Audio,WaveFormat,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveFormat.cs,WaveFormat,The following statement contains a magic number: BlockAlign = (short) (channels*(bits/8));
Magic Number,Sharpex2D.Audio.Converters,MonoToStereoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\MonoToStereoConverter.cs,ConvertAudioData,The following statement contains a magic number: format.Channels != 2
Magic Number,Sharpex2D.Audio.Converters,MonoToStereoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\MonoToStereoConverter.cs,ConvertAudioData,The following statement contains a magic number: var output = new byte[audioData.Length*2];
Magic Number,Sharpex2D.Audio.Converters,MonoToStereoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\MonoToStereoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                        for (var n = 0; n < audioData.Length; n++)                      {                          var sample = audioData[n];                            output[outputIndex++] = sample;                          output[outputIndex++] = sample;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 2);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          int sample = BitConverter.ToInt16(audioData' n);                          byte[] outSample = BitConverter.GetBytes((short) sample);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                          output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 2);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,MonoToStereoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\MonoToStereoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                        for (var n = 0; n < audioData.Length; n++)                      {                          var sample = audioData[n];                            output[outputIndex++] = sample;                          output[outputIndex++] = sample;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 2);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          int sample = BitConverter.ToInt16(audioData' n);                          byte[] outSample = BitConverter.GetBytes((short) sample);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                          output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 2);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,MonoToStereoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\MonoToStereoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                        for (var n = 0; n < audioData.Length; n++)                      {                          var sample = audioData[n];                            output[outputIndex++] = sample;                          output[outputIndex++] = sample;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 2);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          int sample = BitConverter.ToInt16(audioData' n);                          byte[] outSample = BitConverter.GetBytes((short) sample);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                          output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 2);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,MonoToStereoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\MonoToStereoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                        for (var n = 0; n < audioData.Length; n++)                      {                          var sample = audioData[n];                            output[outputIndex++] = sample;                          output[outputIndex++] = sample;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 2);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          int sample = BitConverter.ToInt16(audioData' n);                          byte[] outSample = BitConverter.GetBytes((short) sample);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                          output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 2);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,MonoToStereoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\MonoToStereoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                        for (var n = 0; n < audioData.Length; n++)                      {                          var sample = audioData[n];                            output[outputIndex++] = sample;                          output[outputIndex++] = sample;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 2);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          int sample = BitConverter.ToInt16(audioData' n);                          byte[] outSample = BitConverter.GetBytes((short) sample);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                          output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 2);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,MonoToStereoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\MonoToStereoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                        for (var n = 0; n < audioData.Length; n++)                      {                          var sample = audioData[n];                            output[outputIndex++] = sample;                          output[outputIndex++] = sample;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 2);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          int sample = BitConverter.ToInt16(audioData' n);                          byte[] outSample = BitConverter.GetBytes((short) sample);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                          output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 2);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,MonoToStereoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\MonoToStereoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                        for (var n = 0; n < audioData.Length; n++)                      {                          var sample = audioData[n];                            output[outputIndex++] = sample;                          output[outputIndex++] = sample;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 2);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          int sample = BitConverter.ToInt16(audioData' n);                          byte[] outSample = BitConverter.GetBytes((short) sample);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                          output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 2);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,StereoToMonoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\StereoToMonoConverter.cs,ConvertAudioData,The following statement contains a magic number: format.Channels != 2
Magic Number,Sharpex2D.Audio.Converters,StereoToMonoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\StereoToMonoConverter.cs,ConvertAudioData,The following statement contains a magic number: byte[] output = new byte[audioData.Length/2];
Magic Number,Sharpex2D.Audio.Converters,StereoToMonoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\StereoToMonoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          var left = audioData[n];                          var right = audioData[n];                            byte mixed = (byte) ((left + right)/2);                            output[outputIndex++] = mixed;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 1);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 4)                      {                          int leftChannel = BitConverter.ToInt16(audioData' n);                          int rightChannel = BitConverter.ToInt16(audioData' n + 2);                          int mixed = (leftChannel + rightChannel)/2;                          byte[] outSample = BitConverter.GetBytes((short) mixed);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 1);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,StereoToMonoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\StereoToMonoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          var left = audioData[n];                          var right = audioData[n];                            byte mixed = (byte) ((left + right)/2);                            output[outputIndex++] = mixed;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 1);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 4)                      {                          int leftChannel = BitConverter.ToInt16(audioData' n);                          int rightChannel = BitConverter.ToInt16(audioData' n + 2);                          int mixed = (leftChannel + rightChannel)/2;                          byte[] outSample = BitConverter.GetBytes((short) mixed);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 1);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,StereoToMonoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\StereoToMonoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          var left = audioData[n];                          var right = audioData[n];                            byte mixed = (byte) ((left + right)/2);                            output[outputIndex++] = mixed;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 1);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 4)                      {                          int leftChannel = BitConverter.ToInt16(audioData' n);                          int rightChannel = BitConverter.ToInt16(audioData' n + 2);                          int mixed = (leftChannel + rightChannel)/2;                          byte[] outSample = BitConverter.GetBytes((short) mixed);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 1);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,StereoToMonoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\StereoToMonoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          var left = audioData[n];                          var right = audioData[n];                            byte mixed = (byte) ((left + right)/2);                            output[outputIndex++] = mixed;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 1);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 4)                      {                          int leftChannel = BitConverter.ToInt16(audioData' n);                          int rightChannel = BitConverter.ToInt16(audioData' n + 2);                          int mixed = (leftChannel + rightChannel)/2;                          byte[] outSample = BitConverter.GetBytes((short) mixed);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 1);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,StereoToMonoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\StereoToMonoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          var left = audioData[n];                          var right = audioData[n];                            byte mixed = (byte) ((left + right)/2);                            output[outputIndex++] = mixed;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 1);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 4)                      {                          int leftChannel = BitConverter.ToInt16(audioData' n);                          int rightChannel = BitConverter.ToInt16(audioData' n + 2);                          int mixed = (leftChannel + rightChannel)/2;                          byte[] outSample = BitConverter.GetBytes((short) mixed);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 1);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,StereoToMonoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\StereoToMonoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          var left = audioData[n];                          var right = audioData[n];                            byte mixed = (byte) ((left + right)/2);                            output[outputIndex++] = mixed;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 1);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 4)                      {                          int leftChannel = BitConverter.ToInt16(audioData' n);                          int rightChannel = BitConverter.ToInt16(audioData' n + 2);                          int mixed = (leftChannel + rightChannel)/2;                          byte[] outSample = BitConverter.GetBytes((short) mixed);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 1);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,StereoToMonoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\StereoToMonoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          var left = audioData[n];                          var right = audioData[n];                            byte mixed = (byte) ((left + right)/2);                            output[outputIndex++] = mixed;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 1);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 4)                      {                          int leftChannel = BitConverter.ToInt16(audioData' n);                          int rightChannel = BitConverter.ToInt16(audioData' n + 2);                          int mixed = (leftChannel + rightChannel)/2;                          byte[] outSample = BitConverter.GetBytes((short) mixed);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 1);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,StereoToMonoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\StereoToMonoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          var left = audioData[n];                          var right = audioData[n];                            byte mixed = (byte) ((left + right)/2);                            output[outputIndex++] = mixed;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 1);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 4)                      {                          int leftChannel = BitConverter.ToInt16(audioData' n);                          int rightChannel = BitConverter.ToInt16(audioData' n + 2);                          int mixed = (leftChannel + rightChannel)/2;                          byte[] outSample = BitConverter.GetBytes((short) mixed);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 1);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.Converters,StereoToMonoConverter,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\Converters\StereoToMonoConverter.cs,ConvertAudioData,The following statement contains a magic number: switch (format.BitsPerSample)              {                  case 8:                      for (int n = 0; n < audioData.Length; n += 2)                      {                          var left = audioData[n];                          var right = audioData[n];                            byte mixed = (byte) ((left + right)/2);                            output[outputIndex++] = mixed;                      }                      format = new WaveFormat(format.SamplesPerSec' 8' 1);                      return output;                  case 16:                      for (int n = 0; n < audioData.Length; n += 4)                      {                          int leftChannel = BitConverter.ToInt16(audioData' n);                          int rightChannel = BitConverter.ToInt16(audioData' n + 2);                          int mixed = (leftChannel + rightChannel)/2;                          byte[] outSample = BitConverter.GetBytes((short) mixed);                            output[outputIndex++] = outSample[0];                          output[outputIndex++] = outSample[1];                      }                      format = new WaveFormat(format.SamplesPerSec' 16' 1);                      return output;                  default:                      throw new NotSupportedException(string.Format("{0}Bits are not supported."' format.BitsPerSample));              }
Magic Number,Sharpex2D.Audio.OpenAL,OpenALAudioBuffer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioBuffer.cs,Seek,The following statement contains a magic number: _processedBytes = (int) position/1000*WaveFormat.AvgBytesPerSec;
Magic Number,Sharpex2D.Audio.OpenAL,OpenALAudioBuffer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioBuffer.cs,Initialize,The following statement contains a magic number: Initialize(audioData' format' 150);
Magic Number,Sharpex2D.Audio.OpenAL,OpenALAudioBuffer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioBuffer.cs,Initialize,The following statement contains a magic number: Length = audioData.Length/format.AvgBytesPerSec*1000;
Magic Number,Sharpex2D.Audio.OpenAL,OpenALAudioBuffer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioBuffer.cs,Initialize,The following statement contains a magic number: _bufferSize = format.AvgBytesPerSec/1000*latency;
Magic Number,Sharpex2D.Audio.OpenAL,OpenALAudioBuffer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioBuffer.cs,StartPlayback,The following statement contains a magic number: _playbackThread = new Task(() =>                  {                      OpenALDataBuffer buffer1;                      OpenALDataBuffer buffer2;                      OpenALDataBuffer buffer3;                        lock (_locker)                      {                          Owner.Context.MakeCurrent();                          buffer1 = OpenALDataBuffer.CreateBuffer();                          buffer2 = OpenALDataBuffer.CreateBuffer();                          buffer3 = OpenALDataBuffer.CreateBuffer();                      }                        buffer1.Next = buffer2;                      buffer2.Next = buffer3;                      buffer3.Next = buffer1;                        OpenALDataBuffer currentBuffer = buffer1;                      FillBuffer(currentBuffer);                      currentBuffer = currentBuffer.Next;                      FillBuffer(currentBuffer);                      currentBuffer = currentBuffer.Next;                      FillBuffer(currentBuffer);                        lock (_locker)                      {                          OpenAL.alSourcePlay(_source.SourceId);                      }                        while (_processedBytes < _audioData.Length)                      {                          if (_beginDispose) return;                          switch (PlaybackState)                          {                              case PlaybackState.Paused:                                  _playbackThread.Wait(Latency);                                  continue;                              case PlaybackState.Stopped:                                  return;                          }                            int finishedBuffers;                          lock (_locker)                          {                              OpenAL.alGetSourcei(_source.SourceId' SourceProperty.AllBuffersProcessed'                                  out finishedBuffers);                          }                            if (finishedBuffers == 0)                          {                              _playbackThread.Wait(Latency);                          }                            while (finishedBuffers > 0)                          {                              finishedBuffers--;                              currentBuffer = currentBuffer.Next;                              FillBuffer(currentBuffer);                          }                            Position = _processedBytes/WaveFormat.AvgBytesPerSec*1000;                            //if the audio stops where it should not' restart playback                          lock (_locker)                          {                              int sourceState;                              OpenAL.alGetSourcei(_source.SourceId' SourceProperty.SourceState' out sourceState);                              if ((SourceState) sourceState == SourceState.Stopped)                              {                                  OpenAL.alSourcePlay(_source.SourceId);                              }                          }                      }                        PlaybackState = PlaybackState.Stopped;                      var queuedBuffers = new uint[3];                      RaisePlaybackChanged();                        lock (_locker)                      {                          OpenAL.alSourceUnqueueBuffers(_source.SourceId' 3' queuedBuffers);                          OpenAL.alDeleteBuffers(3' queuedBuffers);                      }                  });
Magic Number,Sharpex2D.Audio.OpenAL,OpenALAudioBuffer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioBuffer.cs,StartPlayback,The following statement contains a magic number: _playbackThread = new Task(() =>                  {                      OpenALDataBuffer buffer1;                      OpenALDataBuffer buffer2;                      OpenALDataBuffer buffer3;                        lock (_locker)                      {                          Owner.Context.MakeCurrent();                          buffer1 = OpenALDataBuffer.CreateBuffer();                          buffer2 = OpenALDataBuffer.CreateBuffer();                          buffer3 = OpenALDataBuffer.CreateBuffer();                      }                        buffer1.Next = buffer2;                      buffer2.Next = buffer3;                      buffer3.Next = buffer1;                        OpenALDataBuffer currentBuffer = buffer1;                      FillBuffer(currentBuffer);                      currentBuffer = currentBuffer.Next;                      FillBuffer(currentBuffer);                      currentBuffer = currentBuffer.Next;                      FillBuffer(currentBuffer);                        lock (_locker)                      {                          OpenAL.alSourcePlay(_source.SourceId);                      }                        while (_processedBytes < _audioData.Length)                      {                          if (_beginDispose) return;                          switch (PlaybackState)                          {                              case PlaybackState.Paused:                                  _playbackThread.Wait(Latency);                                  continue;                              case PlaybackState.Stopped:                                  return;                          }                            int finishedBuffers;                          lock (_locker)                          {                              OpenAL.alGetSourcei(_source.SourceId' SourceProperty.AllBuffersProcessed'                                  out finishedBuffers);                          }                            if (finishedBuffers == 0)                          {                              _playbackThread.Wait(Latency);                          }                            while (finishedBuffers > 0)                          {                              finishedBuffers--;                              currentBuffer = currentBuffer.Next;                              FillBuffer(currentBuffer);                          }                            Position = _processedBytes/WaveFormat.AvgBytesPerSec*1000;                            //if the audio stops where it should not' restart playback                          lock (_locker)                          {                              int sourceState;                              OpenAL.alGetSourcei(_source.SourceId' SourceProperty.SourceState' out sourceState);                              if ((SourceState) sourceState == SourceState.Stopped)                              {                                  OpenAL.alSourcePlay(_source.SourceId);                              }                          }                      }                        PlaybackState = PlaybackState.Stopped;                      var queuedBuffers = new uint[3];                      RaisePlaybackChanged();                        lock (_locker)                      {                          OpenAL.alSourceUnqueueBuffers(_source.SourceId' 3' queuedBuffers);                          OpenAL.alDeleteBuffers(3' queuedBuffers);                      }                  });
Magic Number,Sharpex2D.Audio.OpenAL,OpenALAudioBuffer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioBuffer.cs,StartPlayback,The following statement contains a magic number: _playbackThread = new Task(() =>                  {                      OpenALDataBuffer buffer1;                      OpenALDataBuffer buffer2;                      OpenALDataBuffer buffer3;                        lock (_locker)                      {                          Owner.Context.MakeCurrent();                          buffer1 = OpenALDataBuffer.CreateBuffer();                          buffer2 = OpenALDataBuffer.CreateBuffer();                          buffer3 = OpenALDataBuffer.CreateBuffer();                      }                        buffer1.Next = buffer2;                      buffer2.Next = buffer3;                      buffer3.Next = buffer1;                        OpenALDataBuffer currentBuffer = buffer1;                      FillBuffer(currentBuffer);                      currentBuffer = currentBuffer.Next;                      FillBuffer(currentBuffer);                      currentBuffer = currentBuffer.Next;                      FillBuffer(currentBuffer);                        lock (_locker)                      {                          OpenAL.alSourcePlay(_source.SourceId);                      }                        while (_processedBytes < _audioData.Length)                      {                          if (_beginDispose) return;                          switch (PlaybackState)                          {                              case PlaybackState.Paused:                                  _playbackThread.Wait(Latency);                                  continue;                              case PlaybackState.Stopped:                                  return;                          }                            int finishedBuffers;                          lock (_locker)                          {                              OpenAL.alGetSourcei(_source.SourceId' SourceProperty.AllBuffersProcessed'                                  out finishedBuffers);                          }                            if (finishedBuffers == 0)                          {                              _playbackThread.Wait(Latency);                          }                            while (finishedBuffers > 0)                          {                              finishedBuffers--;                              currentBuffer = currentBuffer.Next;                              FillBuffer(currentBuffer);                          }                            Position = _processedBytes/WaveFormat.AvgBytesPerSec*1000;                            //if the audio stops where it should not' restart playback                          lock (_locker)                          {                              int sourceState;                              OpenAL.alGetSourcei(_source.SourceId' SourceProperty.SourceState' out sourceState);                              if ((SourceState) sourceState == SourceState.Stopped)                              {                                  OpenAL.alSourcePlay(_source.SourceId);                              }                          }                      }                        PlaybackState = PlaybackState.Stopped;                      var queuedBuffers = new uint[3];                      RaisePlaybackChanged();                        lock (_locker)                      {                          OpenAL.alSourceUnqueueBuffers(_source.SourceId' 3' queuedBuffers);                          OpenAL.alDeleteBuffers(3' queuedBuffers);                      }                  });
Magic Number,Sharpex2D.Audio.OpenAL,OpenALAudioBuffer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioBuffer.cs,StartPlayback,The following statement contains a magic number: _playbackThread = new Task(() =>                  {                      OpenALDataBuffer buffer1;                      OpenALDataBuffer buffer2;                      OpenALDataBuffer buffer3;                        lock (_locker)                      {                          Owner.Context.MakeCurrent();                          buffer1 = OpenALDataBuffer.CreateBuffer();                          buffer2 = OpenALDataBuffer.CreateBuffer();                          buffer3 = OpenALDataBuffer.CreateBuffer();                      }                        buffer1.Next = buffer2;                      buffer2.Next = buffer3;                      buffer3.Next = buffer1;                        OpenALDataBuffer currentBuffer = buffer1;                      FillBuffer(currentBuffer);                      currentBuffer = currentBuffer.Next;                      FillBuffer(currentBuffer);                      currentBuffer = currentBuffer.Next;                      FillBuffer(currentBuffer);                        lock (_locker)                      {                          OpenAL.alSourcePlay(_source.SourceId);                      }                        while (_processedBytes < _audioData.Length)                      {                          if (_beginDispose) return;                          switch (PlaybackState)                          {                              case PlaybackState.Paused:                                  _playbackThread.Wait(Latency);                                  continue;                              case PlaybackState.Stopped:                                  return;                          }                            int finishedBuffers;                          lock (_locker)                          {                              OpenAL.alGetSourcei(_source.SourceId' SourceProperty.AllBuffersProcessed'                                  out finishedBuffers);                          }                            if (finishedBuffers == 0)                          {                              _playbackThread.Wait(Latency);                          }                            while (finishedBuffers > 0)                          {                              finishedBuffers--;                              currentBuffer = currentBuffer.Next;                              FillBuffer(currentBuffer);                          }                            Position = _processedBytes/WaveFormat.AvgBytesPerSec*1000;                            //if the audio stops where it should not' restart playback                          lock (_locker)                          {                              int sourceState;                              OpenAL.alGetSourcei(_source.SourceId' SourceProperty.SourceState' out sourceState);                              if ((SourceState) sourceState == SourceState.Stopped)                              {                                  OpenAL.alSourcePlay(_source.SourceId);                              }                          }                      }                        PlaybackState = PlaybackState.Stopped;                      var queuedBuffers = new uint[3];                      RaisePlaybackChanged();                        lock (_locker)                      {                          OpenAL.alSourceUnqueueBuffers(_source.SourceId' 3' queuedBuffers);                          OpenAL.alDeleteBuffers(3' queuedBuffers);                      }                  });
Magic Number,Sharpex2D.Audio.OpenAL,OpenALAudioBuffer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioBuffer.cs,Dispose,The following statement contains a magic number: var queuedBuffers = new uint[3];
Magic Number,Sharpex2D.Audio.OpenAL,OpenALAudioBuffer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioBuffer.cs,Dispose,The following statement contains a magic number: OpenAL.alSourceUnqueueBuffers(_source.SourceId' 3' queuedBuffers);
Magic Number,Sharpex2D.Audio.OpenAL,OpenALAudioBuffer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioBuffer.cs,Dispose,The following statement contains a magic number: OpenAL.alDeleteBuffers(3' queuedBuffers);
Magic Number,Sharpex2D.Audio.OpenAL,OpenALAudioProvider,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioProvider.cs,DetectAudioFormat,The following statement contains a magic number: return format.BitsPerSample == 8                      ? OpenALAudioFormat.Stereo8Bit                      : OpenALAudioFormat.Stereo16Bit;
Magic Number,Sharpex2D.Audio.OpenAL,OpenALAudioProvider,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioProvider.cs,DetectAudioFormat,The following statement contains a magic number: return format.BitsPerSample == 8                  ? OpenALAudioFormat.Mono8Bit                  : OpenALAudioFormat.Mono16Bit;
Magic Number,Sharpex2D.Audio.WaveOut,WaveOut,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveOut\WaveOut.cs,Initialize,The following statement contains a magic number: int bufferSize = (format.AvgBytesPerSec/1000*_latency);
Magic Number,Sharpex2D.Audio.WaveOut,WaveOut,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveOut\WaveOut.cs,Initialize,The following statement contains a magic number: i < 2
Magic Number,Sharpex2D.Audio.WaveOut,WaveOut,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveOut\WaveOut.cs,SetVolume,The following statement contains a magic number: uint tmp = (uint) (left*0xFFFF) + ((uint) (right*0xFFFF) << 16);
Magic Number,Sharpex2D.Audio.WaveOut,WaveOutAudioProvider,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveOut\WaveOutAudioProvider.cs,Seek,The following statement contains a magic number: long requestesPostion = position/1000*_waveOut.Format.AvgBytesPerSec;
Magic Number,Sharpex2D,GameLoop,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\GameLoop.cs,GameLoop,The following statement contains a magic number: TargetTime = 16.666f;
Magic Number,Sharpex2D,GameLoop,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\GameLoop.cs,Loop,The following statement contains a magic number: double frameTime = Stopwatch.Frequency/(1000/TargetTime);
Magic Number,Sharpex2D,GameLoop,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\GameLoop.cs,Loop,The following statement contains a magic number: _gameTime.ElapsedGameTime = (float) (unprocessedTime/Stopwatch.Frequency)*1000f;
Magic Number,Sharpex2D,GameRandom,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\GameRandom.cs,Next,The following statement contains a magic number: return _random.Next(-2147483648' 2147483647);
Magic Number,Sharpex2D,GameRandom,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\GameRandom.cs,Next,The following statement contains a magic number: return _random.Next(-2147483648' 2147483647);
Magic Number,Sharpex2D,GameRandom,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\GameRandom.cs,NextBoolean,The following statement contains a magic number: return NextBoolean(0.5);
Magic Number,Sharpex2D,SGL,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\SGL.cs,Initialize,The following statement contains a magic number: var gameLoop = new GameLoop {TargetTime = 1000/(float) configurator.TargetFrameRate};
Magic Number,Sharpex2D.Content,ContentManager,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Content\ContentManager.cs,EnqueueInner,The following statement contains a magic number: var eventArgs = new BatchProgressEventArgs                  {                      Count = _batchList.Count'                      Current = _batchList[i]'                      Processed = i'                      ProcessedBytes = processedBytes'                      TotalBytes = totalBytes'                      ProgressPercentage = 100*i/_batchList.Count                  };
Magic Number,Sharpex2D.Content,ContentManager,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Content\ContentManager.cs,EnqueueInner,The following statement contains a magic number: var completedArgs = new BatchProgressEventArgs              {                  Count = _batchList.Count'                  Current = null'                  Processed = _batchList.Count'                  ProcessedBytes = processedBytes'                  TotalBytes = totalBytes'                  ProgressPercentage = 100'                  Completed = true              };
Magic Number,Sharpex2D.Debug,CpuWatcher,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Debug\CpuWatcher.cs,RunInner,The following statement contains a magic number: _runTask.Wait(2000);
Magic Number,Sharpex2D.Debug,MemoryWatcher,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Debug\MemoryWatcher.cs,RunInner,The following statement contains a magic number: _runTask.Wait(100);
Magic Number,Sharpex2D.Debug,ThreadWatcher,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Debug\ThreadWatcher.cs,RunInner,The following statement contains a magic number: _runTask.Wait(1000);
Magic Number,Sharpex2D.Debug,DebugConsole,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Debug\DebugConsole.cs,Open,The following statement contains a magic number: NativeMethods.ShowWindow(NativeMethods.GetConsoleWindow()' 5);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: buttonStates.Count != 32
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button3 = new JoystickButton(buttonStates[2]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button4 = new JoystickButton(buttonStates[3]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button5 = new JoystickButton(buttonStates[4]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button6 = new JoystickButton(buttonStates[5]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button7 = new JoystickButton(buttonStates[6]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button8 = new JoystickButton(buttonStates[7]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button9 = new JoystickButton(buttonStates[8]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button10 = new JoystickButton(buttonStates[9]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button11 = new JoystickButton(buttonStates[10]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button12 = new JoystickButton(buttonStates[11]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button13 = new JoystickButton(buttonStates[12]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button14 = new JoystickButton(buttonStates[13]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button15 = new JoystickButton(buttonStates[14]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button16 = new JoystickButton(buttonStates[15]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button17 = new JoystickButton(buttonStates[16]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button18 = new JoystickButton(buttonStates[17]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button19 = new JoystickButton(buttonStates[18]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button20 = new JoystickButton(buttonStates[19]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button21 = new JoystickButton(buttonStates[20]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button22 = new JoystickButton(buttonStates[21]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button23 = new JoystickButton(buttonStates[22]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button24 = new JoystickButton(buttonStates[23]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button25 = new JoystickButton(buttonStates[24]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button26 = new JoystickButton(buttonStates[25]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button27 = new JoystickButton(buttonStates[26]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button28 = new JoystickButton(buttonStates[27]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button29 = new JoystickButton(buttonStates[28]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button30 = new JoystickButton(buttonStates[29]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button31 = new JoystickButton(buttonStates[30]);
Magic Number,Sharpex2D.Input,JoystickState,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\JoystickState.cs,JoystickState,The following statement contains a magic number: Button32 = new JoystickButton(buttonStates[31]);
Magic Number,Sharpex2D.Input,InputManager,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\InputManager.cs,Initialize,The following statement contains a magic number: _inputs.Add(Implementation.XInput.Gamepad.Retrieve(2));
Magic Number,Sharpex2D.Input,InputManager,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Input\InputManager.cs,Initialize,The following statement contains a magic number: _inputs.Add(Implementation.XInput.Gamepad.Retrieve(3));
Magic Number,Sharpex2D.Math,Circle,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Circle.cs,Distance,The following statement contains a magic number: return                  MathHelper.Sqrt(MathHelper.Pow((circle1.Position.X - circle2.Position.X)' 2) +                                  MathHelper.Pow((circle1.Position.Y - circle2.Position.Y)' 2));
Magic Number,Sharpex2D.Math,Circle,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Circle.cs,Distance,The following statement contains a magic number: return                  MathHelper.Sqrt(MathHelper.Pow((circle1.Position.X - circle2.Position.X)' 2) +                                  MathHelper.Pow((circle1.Position.Y - circle2.Position.Y)' 2));
Magic Number,Sharpex2D.Math,Circle,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Circle.cs,Distance,The following statement contains a magic number: return                  MathHelper.Sqrt(MathHelper.Pow((Position.X - circle.Position.X)' 2) +                                  MathHelper.Pow((Position.Y - circle.Position.Y)' 2));
Magic Number,Sharpex2D.Math,Circle,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Circle.cs,Distance,The following statement contains a magic number: return                  MathHelper.Sqrt(MathHelper.Pow((Position.X - circle.Position.X)' 2) +                                  MathHelper.Pow((Position.Y - circle.Position.Y)' 2));
Magic Number,Sharpex2D.Math,Circle,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Circle.cs,IntersectsWith,The following statement contains a magic number: return r <                     MathHelper.Pow((Position.X + circle.Position.X)' 2) +                     MathHelper.Pow((Position.Y + circle.Position.Y)' 2);
Magic Number,Sharpex2D.Math,Circle,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Circle.cs,IntersectsWith,The following statement contains a magic number: return r <                     MathHelper.Pow((Position.X + circle.Position.X)' 2) +                     MathHelper.Pow((Position.Y + circle.Position.Y)' 2);
Magic Number,Sharpex2D.Math,Circle,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Circle.cs,Intersects,The following statement contains a magic number: return r <                     MathHelper.Pow((circle1.Position.X + circle2.Position.X)' 2) +                     MathHelper.Pow((circle1.Position.Y + circle2.Position.Y)' 2);
Magic Number,Sharpex2D.Math,Circle,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Circle.cs,Intersects,The following statement contains a magic number: return r <                     MathHelper.Pow((circle1.Position.X + circle2.Position.X)' 2) +                     MathHelper.Pow((circle1.Position.Y + circle2.Position.Y)' 2);
Magic Number,Sharpex2D.Math,Ellipse,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Ellipse.cs,UpdateEllipse,The following statement contains a magic number: i <= 360
Magic Number,Sharpex2D.Math,Matrix,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ _columns;
Magic Number,Sharpex2D.Math,Matrix,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ _rows;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Matrix2x3,The following statement contains a magic number: m._values[4] = 1.0f;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,ApplyTo,The following statement contains a magic number: result.X = point.X*values[0] + point.Y*values[1] + values[2];
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,ApplyTo,The following statement contains a magic number: result.Y = point.X*values[3] + point.Y*values[4] + values[5];
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,ApplyTo,The following statement contains a magic number: result.Y = point.X*values[3] + point.Y*values[4] + values[5];
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,ApplyTo,The following statement contains a magic number: result.Y = point.X*values[3] + point.Y*values[4] + values[5];
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,MultiplyRow,The following statement contains a magic number: int startIndex = row*3;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,MultiplyRow,The following statement contains a magic number: int endIndex = startIndex + 3;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,SwapRows,The following statement contains a magic number: values[i] = values[i + 3];
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,SwapRows,The following statement contains a magic number: values[i + 3] = temp;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,SwapRows,The following statement contains a magic number: i < 3
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,SubtractRows,The following statement contains a magic number: int row1Start = row1*3;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,SubtractRows,The following statement contains a magic number: int row2Start = row2*3;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,SubtractRows,The following statement contains a magic number: i < 3
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Invert,The following statement contains a magic number: m1._values[1] == 0 || m1._values[3] == 0
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Invert,The following statement contains a magic number: m1._values[0] == 0 || m1._values[4] == 0
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Invert,The following statement contains a magic number: float factor = m1._values[0]/m1._values[3];
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Invert,The following statement contains a magic number: m1._values[3] != 0
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Invert,The following statement contains a magic number: float factor = m1._values[4]/m1._values[1];
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Invert,The following statement contains a magic number: float f2 = 1/m1._values[4];
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Scaling,The following statement contains a magic number: m._values[4] = factorY;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Translation,The following statement contains a magic number: m._values[2] = x;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Translation,The following statement contains a magic number: m._values[5] = y;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Translation,The following statement contains a magic number: m._values[2] = vector.X;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Translation,The following statement contains a magic number: m._values[5] = vector.Y;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Rotation,The following statement contains a magic number: m._values[3] = sin;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Rotation,The following statement contains a magic number: m._values[4] = cos;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,ShearingY,The following statement contains a magic number: m._values[3] = value;
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Multiply,The following statement contains a magic number: m[x' y] = left[x' 0]*right[0' y] + left[x' 1]*right[1' y] + (y == 2 ? left[x' 2] : 0);
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Multiply,The following statement contains a magic number: m[x' y] = left[x' 0]*right[0' y] + left[x' 1]*right[1' y] + (y == 2 ? left[x' 2] : 0);
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Multiply,The following statement contains a magic number: y < 3
Magic Number,Sharpex2D.Math,Matrix2x3,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Matrix2x3.cs,Multiply,The following statement contains a magic number: x < 2
Magic Number,Sharpex2D.Math,Rectangle,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Rectangle.cs,Intersect,The following statement contains a magic number: float right = horizontal[2];
Magic Number,Sharpex2D.Math,Rectangle,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Rectangle.cs,Intersect,The following statement contains a magic number: float top = vertical[2];
Magic Number,Sharpex2D.Math,MathHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\MathHelper.cs,CatmullRom,The following statement contains a magic number: return (float) (0.5*(2.0*value2 + (value3 - value1)*amount +                                   (2.0*value1 - 5.0*value2 + 4.0*value3 - value4)*amountSquared +                                   (3.0*value2 - value1 - 3.0*value3 + value4)*amountCubed));
Magic Number,Sharpex2D.Math,MathHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\MathHelper.cs,CatmullRom,The following statement contains a magic number: return (float) (0.5*(2.0*value2 + (value3 - value1)*amount +                                   (2.0*value1 - 5.0*value2 + 4.0*value3 - value4)*amountSquared +                                   (3.0*value2 - value1 - 3.0*value3 + value4)*amountCubed));
Magic Number,Sharpex2D.Math,MathHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\MathHelper.cs,CatmullRom,The following statement contains a magic number: return (float) (0.5*(2.0*value2 + (value3 - value1)*amount +                                   (2.0*value1 - 5.0*value2 + 4.0*value3 - value4)*amountSquared +                                   (3.0*value2 - value1 - 3.0*value3 + value4)*amountCubed));
Magic Number,Sharpex2D.Math,MathHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\MathHelper.cs,CatmullRom,The following statement contains a magic number: return (float) (0.5*(2.0*value2 + (value3 - value1)*amount +                                   (2.0*value1 - 5.0*value2 + 4.0*value3 - value4)*amountSquared +                                   (3.0*value2 - value1 - 3.0*value3 + value4)*amountCubed));
Magic Number,Sharpex2D.Math,MathHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\MathHelper.cs,CatmullRom,The following statement contains a magic number: return (float) (0.5*(2.0*value2 + (value3 - value1)*amount +                                   (2.0*value1 - 5.0*value2 + 4.0*value3 - value4)*amountSquared +                                   (3.0*value2 - value1 - 3.0*value3 + value4)*amountCubed));
Magic Number,Sharpex2D.Math,MathHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\MathHelper.cs,CatmullRom,The following statement contains a magic number: return (float) (0.5*(2.0*value2 + (value3 - value1)*amount +                                   (2.0*value1 - 5.0*value2 + 4.0*value3 - value4)*amountSquared +                                   (3.0*value2 - value1 - 3.0*value3 + value4)*amountCubed));
Magic Number,Sharpex2D.Math,MathHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\MathHelper.cs,CatmullRom,The following statement contains a magic number: return (float) (0.5*(2.0*value2 + (value3 - value1)*amount +                                   (2.0*value1 - 5.0*value2 + 4.0*value3 - value4)*amountSquared +                                   (3.0*value2 - value1 - 3.0*value3 + value4)*amountCubed));
Magic Number,Sharpex2D.Math,MathHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\MathHelper.cs,Hermite,The following statement contains a magic number: return (value1*(((asqr3 + asqr3) - a3) + 1f)) +                     (value2*((-2f*asqr3) + a3)) +                     (tangent1*((asqr3 - (a2 + a2)) + amount)) +                     (tangent2*(asqr3 - a2));
Magic Number,Sharpex2D.Math,MathHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\MathHelper.cs,WrapAngle,The following statement contains a magic number: return (float) System.Math.IEEERemainder(angle' 6.2831854820251465);
Magic Number,Sharpex2D.Math,Vector2,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Math\Vector2.cs,Reflect,The following statement contains a magic number: float sub = 2*Dot(vector' normal);
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpClient,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpClient.cs,UdpClient,The following statement contains a magic number: _udpClient = new System.Net.Sockets.UdpClient(2565);
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpClient,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpClient.cs,InternalBeginReceive,The following statement contains a magic number: var serverIpEndPoint = new IPEndPoint(IPAddress.Any' 2565);
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpClient,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpClient.cs,Idle,The following statement contains a magic number: _idleTimeout < 15
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpClient,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpClient.cs,Send,The following statement contains a magic number: _udpClient.Client.SendTo(mStream.ToArray()' new IPEndPoint(_ip' 2563));
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpClient,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpClient.cs,Send,The following statement contains a magic number: _udpClient.Client.SendTo(mStream.ToArray()' new IPEndPoint(_ip' 2563));
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpClient,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpClient.cs,Connect,The following statement contains a magic number: _udpClient.Client.SendTo(mStream.ToArray()' new IPEndPoint(ip' 2563));
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpClient,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpClient.cs,Disconnect,The following statement contains a magic number: _udpClient.Client.SendTo(mStream.ToArray()' new IPEndPoint(_ip' 2563));
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpConnectionManager,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpConnectionManager.cs,InternalCheck,The following statement contains a magic number: var timeSpan = new TimeSpan(0' 0' 25);
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpConnectionManager,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpConnectionManager.cs,InternalCheck,The following statement contains a magic number: Thread.Sleep(15000);
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpServer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpServer.cs,UdpServer,The following statement contains a magic number: TimeOutLatency = 500f;
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpServer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpServer.cs,UdpServer,The following statement contains a magic number: _listener = new System.Net.Sockets.UdpClient(2563);
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpServer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpServer.cs,BeginAcceptConnections,The following statement contains a magic number: var incommingConnection = new IPEndPoint(IPAddress.Any' 2565);
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpServer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpServer.cs,PingRequestLoop,The following statement contains a magic number: Thread.Sleep(15000);
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpServer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpServer.cs,Idle,The following statement contains a magic number: _idleTimeout < 15
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpServer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpServer.cs,Send,The following statement contains a magic number: _listener.Client.SendTo(result' new IPEndPoint(_connections[i].IPAddress' 2565));
Magic Number,Sharpex2D.Network.Protocols.Udp,UdpServer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpServer.cs,Send,The following statement contains a magic number: _listener.Client.SendTo(result' new IPEndPoint(receiver' 2565));
Magic Number,Sharpex2D.Network.Protocols.Local,LocalClient,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Local\LocalClient.cs,Idle,The following statement contains a magic number: _idleTimeout < 15
Magic Number,Sharpex2D.Network.Protocols.Local,LocalClient,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Local\LocalClient.cs,Connect,The following statement contains a magic number: Task.Factory.StartNew(() =>              {                  try                  {                      _tcpClient.Connect(new IPEndPoint(ip' 2563));                      _nStream = _tcpClient.GetStream();                  }                  catch (Exception ex)                  {                      _logger.Error(ex.Message);                  }              });
Magic Number,Sharpex2D.Network.Protocols.Local,LocalServer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Local\LocalServer.cs,LocalServer,The following statement contains a magic number: _localListener = new TcpListener(new IPEndPoint(IPAddress.Any' 2563));
Magic Number,Sharpex2D.Network.Protocols.Local,LocalServer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Local\LocalServer.cs,LocalServer,The following statement contains a magic number: TimeOutLatency = 200.0f;
Magic Number,Sharpex2D.Network.Protocols.Local,LocalServer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Local\LocalServer.cs,PingRequestLoop,The following statement contains a magic number: Thread.Sleep(15000);
Magic Number,Sharpex2D.Network.Protocols.Local,LocalServer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Local\LocalServer.cs,Idle,The following statement contains a magic number: _idleTimeout < 15
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,Multiply,The following statement contains a magic number: var intScale = (int) MathHelper.Clamp(scale*65536f' 0' 0xffffff);
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,Multiply,The following statement contains a magic number: r = (r*intScale) >> 16;
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,Multiply,The following statement contains a magic number: g = (g*intScale) >> 16;
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,Multiply,The following statement contains a magic number: b = (b*intScale) >> 16;
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,Multiply,The following statement contains a magic number: a = (a*intScale) >> 16;
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,Multiply,The following statement contains a magic number: r = r > 255 ? 255 : r;
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,Multiply,The following statement contains a magic number: r = r > 255 ? 255 : r;
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,Multiply,The following statement contains a magic number: g = g > 255 ? 255 : g;
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,Multiply,The following statement contains a magic number: g = g > 255 ? 255 : g;
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,Multiply,The following statement contains a magic number: b = b > 255 ? 255 : b;
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,Multiply,The following statement contains a magic number: b = b > 255 ? 255 : b;
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,Multiply,The following statement contains a magic number: a = a > 255 ? 255 : a;
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,Multiply,The following statement contains a magic number: a = a > 255 ? 255 : a;
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,ToColor,The following statement contains a magic number: return new Color(Convert.ToInt32(raw[1])' Convert.ToInt32(raw[3])' Convert.ToInt32(raw[5])'                  Convert.ToInt32(raw[7]));
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,ToColor,The following statement contains a magic number: return new Color(Convert.ToInt32(raw[1])' Convert.ToInt32(raw[3])' Convert.ToInt32(raw[5])'                  Convert.ToInt32(raw[7]));
Magic Number,Sharpex2D.Rendering,Color,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\Color.cs,ToColor,The following statement contains a magic number: return new Color(Convert.ToInt32(raw[1])' Convert.ToInt32(raw[3])' Convert.ToInt32(raw[5])'                  Convert.ToInt32(raw[7]));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLHelper.cs,ConvertColor,The following statement contains a magic number: float a = color.A/255f;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLHelper.cs,ConvertColor,The following statement contains a magic number: float r = color.R/255f;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLHelper.cs,ConvertColor,The following statement contains a magic number: float g = color.G/255f;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLHelper,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLHelper.cs,ConvertColor,The following statement contains a magic number: float b = color.B/255f;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,Initialize,The following statement contains a magic number: var elements = new ushort[]              {                  0' 1' 2'                  2' 3' 0              };
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,Initialize,The following statement contains a magic number: var elements = new ushort[]              {                  0' 1' 2'                  2' 3' 0              };
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,Initialize,The following statement contains a magic number: var elements = new ushort[]              {                  0' 1' 2'                  2' 3' 0              };
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(posAttrib' 2' false' 7*sizeof (float)' 0);
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(posAttrib' 2' false' 7*sizeof (float)' 0);
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(colAttrib' 3' false' 7*sizeof (float)' 2*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(colAttrib' 3' false' 7*sizeof (float)' 2*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(colAttrib' 3' false' 7*sizeof (float)' 2*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(texAttrib' 2' false' 7*sizeof (float)' 5*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(texAttrib' 2' false' 7*sizeof (float)' 5*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(texAttrib' 2' false' 7*sizeof (float)' 5*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: OpenGLInterops.DrawElements(OpenGLInterops.GL_TRIANGLES' 6' OpenGLInterops.GL_UNSIGNED_SHORT' IntPtr.Zero);
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(posAttrib' 2' false' 7*sizeof (float)' 0);
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(posAttrib' 2' false' 7*sizeof (float)' 0);
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(colAttrib' 3' false' 7*sizeof (float)' 2*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(colAttrib' 3' false' 7*sizeof (float)' 2*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(colAttrib' 3' false' 7*sizeof (float)' 2*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(texAttrib' 2' false' 7*sizeof (float)' 5*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(texAttrib' 2' false' 7*sizeof (float)' 5*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(texAttrib' 2' false' 7*sizeof (float)' 5*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: OpenGLInterops.DrawElements(OpenGLInterops.GL_TRIANGLES' 6' OpenGLInterops.GL_UNSIGNED_SHORT' IntPtr.Zero);
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(posAttrib' 2' false' 7*sizeof (float)' 0);
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(posAttrib' 2' false' 7*sizeof (float)' 0);
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(colAttrib' 3' false' 7*sizeof (float)' 2*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(colAttrib' 3' false' 7*sizeof (float)' 2*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(colAttrib' 3' false' 7*sizeof (float)' 2*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(texAttrib' 2' false' 7*sizeof (float)' 5*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(texAttrib' 2' false' 7*sizeof (float)' 5*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: VertexBuffer.VertexAttribPointer(texAttrib' 2' false' 7*sizeof (float)' 5*sizeof (float));
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,DrawTexture,The following statement contains a magic number: OpenGLInterops.DrawElements(OpenGLInterops.GL_TRIANGLES' 6' OpenGLInterops.GL_UNSIGNED_SHORT' IntPtr.Zero);
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: var matrixf = new float[16];
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[2] = 0;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[3] = 0;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[4] = matrix[0' 1];
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[5] = matrix[1' 1];
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[6] = 0;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[7] = 0;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[8] = 0;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[9] = 0;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[10] = 1;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[11] = 0;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[12] = matrix.OffsetX;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[13] = matrix.OffsetY;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[14] = 0;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLRenderer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLRenderer.cs,SetTransform,The following statement contains a magic number: matrixf[15] = 1;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLTexture,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLTexture.cs,Lock,The following statement contains a magic number: _lockedData = new byte[Width*Height*4];
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLTexture,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLTexture.cs,Unlock,The following statement contains a magic number: var pixelData = new byte[4];
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLTexture,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLTexture.cs,Unlock,The following statement contains a magic number: pixelData[2] = colordata.Color.B;
Magic Number,Sharpex2D.Rendering.OpenGL,OpenGLTexture,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\OpenGLTexture.cs,Unlock,The following statement contains a magic number: pixelData[3] = colordata.Color.A;
Magic Number,Sharpex2D.Rendering.OpenGL,RenderContext,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\RenderContext.cs,Initialize,The following statement contains a magic number: pfd.ColorBits = 24;
Magic Number,Sharpex2D.Rendering.OpenGL,RenderContext,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\RenderContext.cs,Initialize,The following statement contains a magic number: pfd.DepthBits = 24;
Magic Number,Sharpex2D.Rendering.OpenGL,RenderContext,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\RenderContext.cs,Initialize,The following statement contains a magic number: pfd.StencilBits = 8;
Magic Number,Sharpex2D.Rendering.OpenGL,RenderContext,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\RenderContext.cs,Initialize,The following statement contains a magic number: int[] attributes =                  {                      (int) ContextAttributes.MajorVersion' 3'                      (int) ContextAttributes.MinorVersion' 3'                      (int) ContextAttributes.Flags' (int) ContextAttributes.ForwardCompatible'                      0                  };
Magic Number,Sharpex2D.Rendering.OpenGL,RenderContext,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\RenderContext.cs,Initialize,The following statement contains a magic number: int[] attributes =                  {                      (int) ContextAttributes.MajorVersion' 3'                      (int) ContextAttributes.MinorVersion' 3'                      (int) ContextAttributes.Flags' (int) ContextAttributes.ForwardCompatible'                      0                  };
Magic Number,Sharpex2D.Rendering.OpenGL.Shaders,ShaderProgram,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\Shaders\ShaderProgram.cs,SetUniform,The following statement contains a magic number: switch (data.Length)              {                  case 1:                      OpenGLInterops.Uniform1(propertyLoc' data[0]);                      break;                  case 2:                      OpenGLInterops.Uniform2(propertyLoc' data[0]' data[1]);                      break;                  case 3:                      OpenGLInterops.Uniform3(propertyLoc' data[0]' data[1]' data[2]);                      break;                  case 4:                      OpenGLInterops.Uniform4(propertyLoc' data[0]' data[1]' data[2]' data[3]);                      break;                  default:                      throw new InvalidOperationException("Invalid argument length.");              }
Magic Number,Sharpex2D.Rendering.OpenGL.Shaders,ShaderProgram,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\Shaders\ShaderProgram.cs,SetUniform,The following statement contains a magic number: switch (data.Length)              {                  case 1:                      OpenGLInterops.Uniform1(propertyLoc' data[0]);                      break;                  case 2:                      OpenGLInterops.Uniform2(propertyLoc' data[0]' data[1]);                      break;                  case 3:                      OpenGLInterops.Uniform3(propertyLoc' data[0]' data[1]' data[2]);                      break;                  case 4:                      OpenGLInterops.Uniform4(propertyLoc' data[0]' data[1]' data[2]' data[3]);                      break;                  default:                      throw new InvalidOperationException("Invalid argument length.");              }
Magic Number,Sharpex2D.Rendering.OpenGL.Shaders,ShaderProgram,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\Shaders\ShaderProgram.cs,SetUniform,The following statement contains a magic number: switch (data.Length)              {                  case 1:                      OpenGLInterops.Uniform1(propertyLoc' data[0]);                      break;                  case 2:                      OpenGLInterops.Uniform2(propertyLoc' data[0]' data[1]);                      break;                  case 3:                      OpenGLInterops.Uniform3(propertyLoc' data[0]' data[1]' data[2]);                      break;                  case 4:                      OpenGLInterops.Uniform4(propertyLoc' data[0]' data[1]' data[2]' data[3]);                      break;                  default:                      throw new InvalidOperationException("Invalid argument length.");              }
Magic Number,Sharpex2D.Rendering.OpenGL.Shaders,ShaderProgram,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\Shaders\ShaderProgram.cs,SetUniform,The following statement contains a magic number: switch (data.Length)              {                  case 1:                      OpenGLInterops.Uniform1(propertyLoc' data[0]);                      break;                  case 2:                      OpenGLInterops.Uniform2(propertyLoc' data[0]' data[1]);                      break;                  case 3:                      OpenGLInterops.Uniform3(propertyLoc' data[0]' data[1]' data[2]);                      break;                  case 4:                      OpenGLInterops.Uniform4(propertyLoc' data[0]' data[1]' data[2]' data[3]);                      break;                  default:                      throw new InvalidOperationException("Invalid argument length.");              }
Magic Number,Sharpex2D.Rendering.OpenGL.Shaders,ShaderProgram,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\Shaders\ShaderProgram.cs,SetUniform,The following statement contains a magic number: switch (data.Length)              {                  case 1:                      OpenGLInterops.Uniform1(propertyLoc' data[0]);                      break;                  case 2:                      OpenGLInterops.Uniform2(propertyLoc' data[0]' data[1]);                      break;                  case 3:                      OpenGLInterops.Uniform3(propertyLoc' data[0]' data[1]' data[2]);                      break;                  case 4:                      OpenGLInterops.Uniform4(propertyLoc' data[0]' data[1]' data[2]' data[3]);                      break;                  default:                      throw new InvalidOperationException("Invalid argument length.");              }
Magic Number,Sharpex2D.Rendering.OpenGL.Shaders,ShaderProgram,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Rendering\OpenGL\Shaders\ShaderProgram.cs,SetUniform,The following statement contains a magic number: switch (data.Length)              {                  case 1:                      OpenGLInterops.Uniform1(propertyLoc' data[0]);                      break;                  case 2:                      OpenGLInterops.Uniform2(propertyLoc' data[0]' data[1]);                      break;                  case 3:                      OpenGLInterops.Uniform3(propertyLoc' data[0]' data[1]' data[2]);                      break;                  case 4:                      OpenGLInterops.Uniform4(propertyLoc' data[0]' data[1]' data[2]' data[3]);                      break;                  default:                      throw new InvalidOperationException("Invalid argument length.");              }
Magic Number,Sharpex2D.Surface,GameWindow,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Surface\GameWindow.cs,CenterWindow,The following statement contains a magic number: MethodInvoker br = delegate              {                  _surface.Location = new Point(Screen.PrimaryScreen.WorkingArea.Width/2 - _surface.Width/2'                      Screen.PrimaryScreen.WorkingArea.Height/2 - _surface.Height/2);              };
Magic Number,Sharpex2D.Surface,GameWindow,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Surface\GameWindow.cs,CenterWindow,The following statement contains a magic number: MethodInvoker br = delegate              {                  _surface.Location = new Point(Screen.PrimaryScreen.WorkingArea.Width/2 - _surface.Width/2'                      Screen.PrimaryScreen.WorkingArea.Height/2 - _surface.Height/2);              };
Magic Number,Sharpex2D.Surface,GameWindow,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Surface\GameWindow.cs,CenterWindow,The following statement contains a magic number: MethodInvoker br = delegate              {                  _surface.Location = new Point(Screen.PrimaryScreen.WorkingArea.Width/2 - _surface.Width/2'                      Screen.PrimaryScreen.WorkingArea.Height/2 - _surface.Height/2);              };
Magic Number,Sharpex2D.Surface,GameWindow,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Surface\GameWindow.cs,CenterWindow,The following statement contains a magic number: MethodInvoker br = delegate              {                  _surface.Location = new Point(Screen.PrimaryScreen.WorkingArea.Width/2 - _surface.Width/2'                      Screen.PrimaryScreen.WorkingArea.Height/2 - _surface.Height/2);              };
Missing Default,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,The following switch statement is missing a default case: switch (format.BitsPerSample)                  {                      case 8:                          for (var n = 0; n < data.Length; n += 2)                          {                              var leftChannel = data[n];                              var rightChannel = data[n + 1];                                data[n] = (byte) (leftChannel*left);                              data[n + 1] = (byte) (rightChannel*right);                          }                          break;                      case 16:                          for (int n = 0; n < data.Length; n += 4)                          {                              int leftChannel = BitConverter.ToInt16(data' n);                              int rightChannel = BitConverter.ToInt16(data' n + 2);                                byte[] sampleleft = BitConverter.GetBytes((short) (leftChannel*left));                              byte[] sampleright = BitConverter.GetBytes((short) (rightChannel*right));                                  data[n] = sampleleft[0];                              data[n + 1] = sampleleft[1];                              data[n + 2] = sampleright[0];                              data[n + 3] = sampleright[1];                          }                          break;                  }
Missing Default,Sharpex2D.Audio,AudioMixer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\AudioMixer.cs,ApplyEffects,The following switch statement is missing a default case: switch (format.BitsPerSample)                  {                      case 8:                          for (var n = 0; n < data.Length; n += 1)                          {                              var channel = data[n];                                data[n] = (byte) (channel*_volume);                          }                          break;                      case 16:                          for (int n = 0; n < data.Length; n += 2)                          {                              int channel = BitConverter.ToInt16(data' n);                                byte[] sample = BitConverter.GetBytes((short) (channel*_volume));                                  data[n] = sample[0];                              data[n + 1] = sample[1];                          }                          break;                  }
Missing Default,Sharpex2D.Audio,WaveStream,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\WaveStream.cs,Seek,The following switch statement is missing a default case: switch (origin)              {                  case SeekOrigin.Begin:                      _stream.Position = position + _position;                      break;                  case SeekOrigin.Current:                      _stream.Seek(position' SeekOrigin.Current);                      break;                  case SeekOrigin.End:                      _stream.Position = _position + _length - position;                      break;              }
Missing Default,Sharpex2D.Audio.OpenAL,OpenALAudioBuffer,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Audio\OpenAL\OpenALAudioBuffer.cs,StartPlayback,The following switch statement is missing a default case: switch (PlaybackState)                          {                              case PlaybackState.Paused:                                  _playbackThread.Wait(Latency);                                  continue;                              case PlaybackState.Stopped:                                  return;                          }
Missing Default,Sharpex2D.Common.Extensions,OpenALSourceStateExtension,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Common\Extensions\OpenALSourceStateExtension.cs,ToPlaybackState,The following switch statement is missing a default case: switch (state)              {                  case SourceState.Initializing:                  case SourceState.Stopped:                  case SourceState.Uninitialized:                      return PlaybackState.Stopped;                  case SourceState.Paused:                      return PlaybackState.Paused;                  case SourceState.Playing:                      return PlaybackState.Playing;              }
Missing Default,Sharpex2D.Common.Extensions,LogLevelExtension,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Common\Extensions\LogLevelExtension.cs,ToFriendlyString,The following switch statement is missing a default case: switch (mode)              {                  case LogLevel.Info:                      return "Info";                  case LogLevel.Warning:                      return "Warning";                  case LogLevel.Error:                      return "Error";                  case LogLevel.Critical:                      return "Critical";                  case LogLevel.Engine:                      return "Engine";              }
Missing Default,Sharpex2D.Network.Protocols.Udp,UdpClient,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Udp\UdpClient.cs,InternalBeginReceive,The following switch statement is missing a default case: switch (systemPackage.Mode)                              {                                  case NotificationMode.ClientJoined:                                      for (int i = 0; i <= _clientListeners.Count - 1; i++)                                      {                                          _clientListeners[i].OnClientJoined(systemPackage.Connection[0]);                                      }                                      break;                                  case NotificationMode.ClientExited:                                      for (int i = 0; i <= _clientListeners.Count - 1; i++)                                      {                                          _clientListeners[i].OnClientExited(systemPackage.Connection[0]);                                      }                                      break;                                  case NotificationMode.ClientList:                                      for (int i = 0; i <= _clientListeners.Count - 1; i++)                                      {                                          _clientListeners[i].OnClientListing(systemPackage.Connection);                                      }                                      break;                                  case NotificationMode.TimeOut:                                      for (int i = 0; i <= _clientListeners.Count - 1; i++)                                      {                                          _clientListeners[i].OnClientTimedOut();                                      }                                      break;                                  case NotificationMode.ServerShutdown:                                      for (int i = 0; i <= _clientListeners.Count - 1; i++)                                      {                                          _clientListeners[i].OnServerShutdown();                                      }                                      break;                              }
Missing Default,Sharpex2D.Network.Protocols.Local,LocalClient,D:\research\architectureSmells\repos1\ThuCommix_Sharpex2D\Sharpex2D\Network\Protocols\Local\LocalClient.cs,InternalBeginReceive,The following switch statement is missing a default case: switch (notificationPackage.Mode)                          {                              //client joined                              case NotificationMode.ClientJoined:                                  for (int i = 0; i <= _clientListeners.Count - 1; i++)                                  {                                      _clientListeners[i].OnClientJoined(notificationPackage.Connection[0]);                                  }                                  break;                              //client exited                              case NotificationMode.ClientExited:                                  for (int i = 0; i <= _clientListeners.Count - 1; i++)                                  {                                      _clientListeners[i].OnClientExited(notificationPackage.Connection[0]);                                  }                                  break;                              //client listing                              case NotificationMode.ClientList:                                  for (int i = 0; i <= _clientListeners.Count - 1; i++)                                  {                                      _clientListeners[i].OnClientListing(notificationPackage.Connection);                                  }                                  break;                              //server shutdown                              case NotificationMode.ServerShutdown:                                  for (int i = 0; i <= _clientListeners.Count - 1; i++)                                  {                                      _clientListeners[i].OnServerShutdown();                                      _tcpClient.Close();                                  }                                  break;                              //we timed out.                              case NotificationMode.TimeOut:                                  for (int i = 0; i <= _clientListeners.Count - 1; i++)                                  {                                      _clientListeners[i].OnClientTimedOut();                                  }                                  _tcpClient.Close();                                  break;                          }
