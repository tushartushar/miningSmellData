Implementation smell,Namespace,Class,File,Method,Description
Long Method,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,GetRelativePath,The method has 71 lines of code.
Long Method,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,initEntities,The method has 1014 lines of code.
Complex Method,ZetaHtmlEditControl.Code.Helper,ImageHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Helper\ImageHelper.cs,GetImageFormatFromFileExtension,Cyclomatic complexity of the method is 21
Complex Method,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,Cyclomatic complexity of the method is 12
Complex Method,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlEncode,Cyclomatic complexity of the method is 18
Complex Method,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,Cyclomatic complexity of the method is 24
Complex Method,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,GetRelativePath,Cyclomatic complexity of the method is 11
Complex Method,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,GetShare,Cyclomatic complexity of the method is 7
Complex Method,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,urlEncodeToBytes,Cyclomatic complexity of the method is 19
Complex Method,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,ConvertGetHtml,Cyclomatic complexity of the method is 10
Complex Method,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,checkResizeImage,Cyclomatic complexity of the method is 7
Complex Method,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,FindImgs,Cyclomatic complexity of the method is 15
Long Parameter List,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,Combine,The method has 4 parameters.
Long Parameter List,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,CombineVirtual,The method has 4 parameters.
Long Parameter List,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,urlEncodeToBytes,The method has 4 parameters.
Long Parameter List,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,ConvertGetHtml,The method has 4 parameters.
Long Identifier,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,GetAbsolutePath,The length of the parameter basePathToWhichToMakeAbsoluteTo is 31.
Long Identifier,ZetaHtmlEditLibrary,TextAndImageHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\TextAndImageHelper.cs,GetDocumentText,The length of the parameter useImagesFolderPathPlaceHolder is 30.
Long Statement,ZetaHtmlEditControl.Code.Helper,ConvertHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Helper\ConvertHelper.cs,ToString,The length of the statement  "	// http://www.google.de/url?sa=t&ct=res&cd=4&url=http%3A%2F%2Fblogs.msdn.com%2Fvancem%2Farchive%2F2006%2F10%2F01%2F779503.aspx&ei=nOuTRY7TAoXe2QLi7qX3Dg&usg=__GUu0brYrkgjJl63ZZ3JBOzJCVH8=&sig2=1wvt78Kof6Bw7Drs3LL_ng " is 215.
Long Statement,ZetaHtmlEditControl.Code.Helper,ConvertHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Helper\ConvertHelper.cs,ToInt32,The length of the statement  "	// http://www.google.de/url?sa=t&ct=res&cd=4&url=http%3A%2F%2Fblogs.msdn.com%2Fvancem%2Farchive%2F2006%2F10%2F01%2F779503.aspx&ei=nOuTRY7TAoXe2QLi7qX3Dg&usg=__GUu0brYrkgjJl63ZZ3JBOzJCVH8=&sig2=1wvt78Kof6Bw7Drs3LL_ng " is 215.
Long Statement,ZetaHtmlEditControl.Code.Helper,ConvertHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Helper\ConvertHelper.cs,IsDouble,The length of the statement  "	// http://www.google.de/url?sa=t&ct=res&cd=4&url=http%3A%2F%2Fblogs.msdn.com%2Fvancem%2Farchive%2F2006%2F10%2F01%2F779503.aspx&ei=nOuTRY7TAoXe2QLi7qX3Dg&usg=__GUu0brYrkgjJl63ZZ3JBOzJCVH8=&sig2=1wvt78Kof6Bw7Drs3LL_ng " is 215.
Long Statement,ZetaHtmlEditControl.Code.Helper,ConvertHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Helper\ConvertHelper.cs,IsDouble,The length of the statement  "	// http://www.google.de/url?sa=t&ct=res&cd=4&url=http%3A%2F%2Fblogs.msdn.com%2Fvancem%2Farchive%2F2006%2F10%2F01%2F779503.aspx&ei=nOuTRY7TAoXe2QLi7qX3Dg&usg=__GUu0brYrkgjJl63ZZ3JBOzJCVH8=&sig2=1wvt78Kof6Bw7Drs3LL_ng " is 215.
Long Statement,ZetaHtmlEditControl.Code.Helper,ConvertHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Helper\ConvertHelper.cs,IsInteger,The length of the statement  "	// http://www.google.de/url?sa=t&ct=res&cd=4&url=http%3A%2F%2Fblogs.msdn.com%2Fvancem%2Farchive%2F2006%2F10%2F01%2F779503.aspx&ei=nOuTRY7TAoXe2QLi7qX3Dg&usg=__GUu0brYrkgjJl63ZZ3JBOzJCVH8=&sig2=1wvt78Kof6Bw7Drs3LL_ng " is 215.
Long Statement,ZetaHtmlEditControl.Code.Helper,ConvertHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Helper\ConvertHelper.cs,IsInteger,The length of the statement  "	// http://www.google.de/url?sa=t&ct=res&cd=4&url=http%3A%2F%2Fblogs.msdn.com%2Fvancem%2Farchive%2F2006%2F10%2F01%2F779503.aspx&ei=nOuTRY7TAoXe2QLi7qX3Dg&usg=__GUu0brYrkgjJl63ZZ3JBOzJCVH8=&sig2=1wvt78Kof6Bw7Drs3LL_ng " is 215.
Long Statement,ZetaHtmlEditControl.Code.Helper,ConvertHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Helper\ConvertHelper.cs,ToDecimal,The length of the statement  "	// http://www.google.de/url?sa=t&ct=res&cd=4&url=http%3A%2F%2Fblogs.msdn.com%2Fvancem%2Farchive%2F2006%2F10%2F01%2F779503.aspx&ei=nOuTRY7TAoXe2QLi7qX3Dg&usg=__GUu0brYrkgjJl63ZZ3JBOzJCVH8=&sig2=1wvt78Kof6Bw7Drs3LL_ng " is 215.
Long Statement,ZetaHtmlEditControl.Code.Helper,ConvertHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Helper\ConvertHelper.cs,IsDecimal,The length of the statement  "	// http://www.google.de/url?sa=t&ct=res&cd=4&url=http%3A%2F%2Fblogs.msdn.com%2Fvancem%2Farchive%2F2006%2F10%2F01%2F779503.aspx&ei=nOuTRY7TAoXe2QLi7qX3Dg&usg=__GUu0brYrkgjJl63ZZ3JBOzJCVH8=&sig2=1wvt78Kof6Bw7Drs3LL_ng " is 215.
Long Statement,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,GetDirectory,The length of the statement  "		Debug.Assert (string.IsNullOrEmpty (driveOrShare) || dir.StartsWith (driveOrShare)' string.Format (@"Variable 'dir' ('{0}') must start with drive or share '{1}'."' dir' driveOrShare)); " is 184.
Long Statement,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,urlEncodeToBytes,The length of the statement  "			var isUnsafe = (c == ' ') || (c < '0' && c != '-' && c != '.') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a' && c != '_') || (c > 'z'); " is 136.
Long Statement,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,ConvertGetHtml,The length of the statement  "			if (!imageInfo.Source.StartsWith (Uri.UriSchemeHttp) && !imageInfo.Source.StartsWith (Uri.UriSchemeHttps) && !imageInfo.Source.StartsWith (Uri.UriSchemeFtp)) { " is 159.
Long Statement,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,ConvertGetHtml,The length of the statement  "				var readFrom = imageInfo.Source.StartsWith (Uri.UriSchemeFile) ? PathHelper.ConvertFileUrlToFilePath (imageInfo.Source) : imageInfo.Source; " is 139.
Long Statement,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,ConvertSetHtml,The length of the statement  "		var folderUrlPath = (isHttpUrl (saveFolderPath) ? saveFolderPath : PathHelper.ConvertFilePathToFileUrl (saveFolderPath)).TrimEnd ('/'); " is 135.
Long Statement,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,isHttpUrl,The length of the statement  "	return !string.IsNullOrEmpty (saveFolderPath) && (saveFolderPath.StartsWith (@"http://") || saveFolderPath.StartsWith (@"https://")); " is 133.
Long Statement,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,GetPathFromFile,The length of the statement  "	if (baseUri == null || String.Compare (baseUri.OriginalString' @"about:blank"' StringComparison.OrdinalIgnoreCase) == 0) { " is 122.
Long Statement,ZetaHtmlEditLibrary,TextAndImageHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\TextAndImageHelper.cs,GetDocumentText,The length of the statement  "	return new HtmlConversionHelper ().ConvertGetHtml (html' null' externalImagesFolderPath' useImagesFolderPathPlaceHolder ? HtmlImageHelper.ImagesFolderPathPlaceHolder : null); " is 174.
Complex Conditional,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,checkResizeImage,The conditional expression  "width > 0 && height > 0 && !String.IsNullOrEmpty (imageFilePath) && File.Exists (imageFilePath)"  is complex.
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: using (var bytes = new MemoryStream ()) {  	for (var i = 0; i < len; i++) {  		if (s [i] == '%' && i + 2 < len) {  			if (s [i + 1] == 'u' && i + 5 < len) {  				if (bytes.Length > 0) {  					output.Append (getChars (bytes' e));  					bytes.SetLength (0);  				}  				output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  				i += 5;  			} else {  				bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  				i += 2;  			}  			continue;  		}  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append (s [i] == '+' ? ' ' : s [i]);  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  	}  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: using (var bytes = new MemoryStream ()) {  	for (var i = 0; i < len; i++) {  		if (s [i] == '%' && i + 2 < len) {  			if (s [i + 1] == 'u' && i + 5 < len) {  				if (bytes.Length > 0) {  					output.Append (getChars (bytes' e));  					bytes.SetLength (0);  				}  				output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  				i += 5;  			} else {  				bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  				i += 2;  			}  			continue;  		}  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append (s [i] == '+' ? ' ' : s [i]);  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  	}  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: using (var bytes = new MemoryStream ()) {  	for (var i = 0; i < len; i++) {  		if (s [i] == '%' && i + 2 < len) {  			if (s [i + 1] == 'u' && i + 5 < len) {  				if (bytes.Length > 0) {  					output.Append (getChars (bytes' e));  					bytes.SetLength (0);  				}  				output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  				i += 5;  			} else {  				bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  				i += 2;  			}  			continue;  		}  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append (s [i] == '+' ? ' ' : s [i]);  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  	}  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: using (var bytes = new MemoryStream ()) {  	for (var i = 0; i < len; i++) {  		if (s [i] == '%' && i + 2 < len) {  			if (s [i + 1] == 'u' && i + 5 < len) {  				if (bytes.Length > 0) {  					output.Append (getChars (bytes' e));  					bytes.SetLength (0);  				}  				output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  				i += 5;  			} else {  				bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  				i += 2;  			}  			continue;  		}  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append (s [i] == '+' ? ' ' : s [i]);  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  	}  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: using (var bytes = new MemoryStream ()) {  	for (var i = 0; i < len; i++) {  		if (s [i] == '%' && i + 2 < len) {  			if (s [i + 1] == 'u' && i + 5 < len) {  				if (bytes.Length > 0) {  					output.Append (getChars (bytes' e));  					bytes.SetLength (0);  				}  				output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  				i += 5;  			} else {  				bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  				i += 2;  			}  			continue;  		}  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append (s [i] == '+' ? ' ' : s [i]);  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  	}  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: using (var bytes = new MemoryStream ()) {  	for (var i = 0; i < len; i++) {  		if (s [i] == '%' && i + 2 < len) {  			if (s [i + 1] == 'u' && i + 5 < len) {  				if (bytes.Length > 0) {  					output.Append (getChars (bytes' e));  					bytes.SetLength (0);  				}  				output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  				i += 5;  			} else {  				bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  				i += 2;  			}  			continue;  		}  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append (s [i] == '+' ? ' ' : s [i]);  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  	}  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: using (var bytes = new MemoryStream ()) {  	for (var i = 0; i < len; i++) {  		if (s [i] == '%' && i + 2 < len) {  			if (s [i + 1] == 'u' && i + 5 < len) {  				if (bytes.Length > 0) {  					output.Append (getChars (bytes' e));  					bytes.SetLength (0);  				}  				output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  				i += 5;  			} else {  				bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  				i += 2;  			}  			continue;  		}  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append (s [i] == '+' ? ' ' : s [i]);  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  	}  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	if (s [i] == '%' && i + 2 < len) {  		if (s [i + 1] == 'u' && i + 5 < len) {  			if (bytes.Length > 0) {  				output.Append (getChars (bytes' e));  				bytes.SetLength (0);  			}  			output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  			i += 5;  		} else {  			bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  			i += 2;  		}  		continue;  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  		bytes.SetLength (0);  	}  	output.Append (s [i] == '+' ? ' ' : s [i]);  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	if (s [i] == '%' && i + 2 < len) {  		if (s [i + 1] == 'u' && i + 5 < len) {  			if (bytes.Length > 0) {  				output.Append (getChars (bytes' e));  				bytes.SetLength (0);  			}  			output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  			i += 5;  		} else {  			bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  			i += 2;  		}  		continue;  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  		bytes.SetLength (0);  	}  	output.Append (s [i] == '+' ? ' ' : s [i]);  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	if (s [i] == '%' && i + 2 < len) {  		if (s [i + 1] == 'u' && i + 5 < len) {  			if (bytes.Length > 0) {  				output.Append (getChars (bytes' e));  				bytes.SetLength (0);  			}  			output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  			i += 5;  		} else {  			bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  			i += 2;  		}  		continue;  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  		bytes.SetLength (0);  	}  	output.Append (s [i] == '+' ? ' ' : s [i]);  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	if (s [i] == '%' && i + 2 < len) {  		if (s [i + 1] == 'u' && i + 5 < len) {  			if (bytes.Length > 0) {  				output.Append (getChars (bytes' e));  				bytes.SetLength (0);  			}  			output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  			i += 5;  		} else {  			bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  			i += 2;  		}  		continue;  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  		bytes.SetLength (0);  	}  	output.Append (s [i] == '+' ? ' ' : s [i]);  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	if (s [i] == '%' && i + 2 < len) {  		if (s [i + 1] == 'u' && i + 5 < len) {  			if (bytes.Length > 0) {  				output.Append (getChars (bytes' e));  				bytes.SetLength (0);  			}  			output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  			i += 5;  		} else {  			bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  			i += 2;  		}  		continue;  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  		bytes.SetLength (0);  	}  	output.Append (s [i] == '+' ? ' ' : s [i]);  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	if (s [i] == '%' && i + 2 < len) {  		if (s [i + 1] == 'u' && i + 5 < len) {  			if (bytes.Length > 0) {  				output.Append (getChars (bytes' e));  				bytes.SetLength (0);  			}  			output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  			i += 5;  		} else {  			bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  			i += 2;  		}  		continue;  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  		bytes.SetLength (0);  	}  	output.Append (s [i] == '+' ? ' ' : s [i]);  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	if (s [i] == '%' && i + 2 < len) {  		if (s [i + 1] == 'u' && i + 5 < len) {  			if (bytes.Length > 0) {  				output.Append (getChars (bytes' e));  				bytes.SetLength (0);  			}  			output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  			i += 5;  		} else {  			bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  			i += 2;  		}  		continue;  	}  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  		bytes.SetLength (0);  	}  	output.Append (s [i] == '+' ? ' ' : s [i]);  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: if (s [i] == '%' && i + 2 < len) {  	if (s [i + 1] == 'u' && i + 5 < len) {  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  		i += 5;  	} else {  		bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  		i += 2;  	}  	continue;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: if (s [i] == '%' && i + 2 < len) {  	if (s [i + 1] == 'u' && i + 5 < len) {  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  		i += 5;  	} else {  		bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  		i += 2;  	}  	continue;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: if (s [i] == '%' && i + 2 < len) {  	if (s [i + 1] == 'u' && i + 5 < len) {  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  		i += 5;  	} else {  		bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  		i += 2;  	}  	continue;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: if (s [i] == '%' && i + 2 < len) {  	if (s [i + 1] == 'u' && i + 5 < len) {  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  		i += 5;  	} else {  		bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  		i += 2;  	}  	continue;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: if (s [i] == '%' && i + 2 < len) {  	if (s [i + 1] == 'u' && i + 5 < len) {  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  		i += 5;  	} else {  		bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  		i += 2;  	}  	continue;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: if (s [i] == '%' && i + 2 < len) {  	if (s [i + 1] == 'u' && i + 5 < len) {  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  		i += 5;  	} else {  		bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  		i += 2;  	}  	continue;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: if (s [i] == '%' && i + 2 < len) {  	if (s [i + 1] == 'u' && i + 5 < len) {  		if (bytes.Length > 0) {  			output.Append (getChars (bytes' e));  			bytes.SetLength (0);  		}  		output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  		i += 5;  	} else {  		bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  		i += 2;  	}  	continue;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  		bytes.SetLength (0);  	}  	output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  	i += 5;  } else {  	bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  	i += 2;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  		bytes.SetLength (0);  	}  	output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  	i += 5;  } else {  	bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  	i += 2;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  		bytes.SetLength (0);  	}  	output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  	i += 5;  } else {  	bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  	i += 2;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  		bytes.SetLength (0);  	}  	output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  	i += 5;  } else {  	bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  	i += 2;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  		bytes.SetLength (0);  	}  	output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  	i += 5;  } else {  	bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  	i += 2;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	if (bytes.Length > 0) {  		output.Append (getChars (bytes' e));  		bytes.SetLength (0);  	}  	output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  	i += 5;  } else {  	bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  	i += 2;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: output.Append ((char)Int32.Parse (s.Substring (i + 2' 4)' hexa));  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: i += 5;  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: bytes.WriteByte ((byte)Int32.Parse (s.Substring (i + 1' 2)' hexa));  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,UrlDecode,The following statement contains a magic number: i += 2;  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlEncode,The following statement contains a magic number: if (s == null) {  	return null;  } else {  	var output = new StringBuilder ();  	foreach (var c in s) {  		switch (c) {  		case '&':  			output.Append (@"&amp;");  			break;  		case '>':  			output.Append (@"&gt;");  			break;  		case '<':  			output.Append (@"&lt;");  			break;  		case '"':  			output.Append (@"&quot;");  			break;  		default:  			if (c > 128) {  				output.Append (@"&#");  				output.Append (((int)c).ToString ());  				output.Append (@";");  			} else  				output.Append (c);  			break;  		}  	}  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlEncode,The following statement contains a magic number: foreach (var c in s) {  	switch (c) {  	case '&':  		output.Append (@"&amp;");  		break;  	case '>':  		output.Append (@"&gt;");  		break;  	case '<':  		output.Append (@"&lt;");  		break;  	case '"':  		output.Append (@"&quot;");  		break;  	default:  		if (c > 128) {  			output.Append (@"&#");  			output.Append (((int)c).ToString ());  			output.Append (@";");  		} else  			output.Append (c);  		break;  	}  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlEncode,The following statement contains a magic number: switch (c) {  case '&':  	output.Append (@"&amp;");  	break;  case '>':  	output.Append (@"&gt;");  	break;  case '<':  	output.Append (@"&lt;");  	break;  case '"':  	output.Append (@"&quot;");  	break;  default:  	if (c > 128) {  		output.Append (@"&#");  		output.Append (((int)c).ToString ());  		output.Append (@";");  	} else  		output.Append (c);  	break;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlEncode,The following statement contains a magic number: if (c > 128) {  	output.Append (@"&#");  	output.Append (((int)c).ToString ());  	output.Append (@";");  } else  	output.Append (c);  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (s == null) {  	throw new ArgumentNullException (@"s");  } else if (s.IndexOf ('&') == -1) {  	return s;  } else {  	var insideEntity = false;  	// used to indicate that we are in a potential entity  	var entity = String.Empty;  	var output = new StringBuilder ();  	var len = s.Length;  	for (var i = 0; i < len; i++) {  		var c = s [i];  		switch (c) {  		case '&':  			output.Append (entity);  			entity = @"&";  			insideEntity = true;  			break;  		case ';':  			if (!insideEntity) {  				output.Append (c);  				break;  			}  			entity += c;  			var length = entity.Length;  			if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  				entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  			} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  				entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  			}  			output.Append (entity);  			entity = String.Empty;  			insideEntity = false;  			break;  		default:  			if (insideEntity) {  				entity += c;  			} else {  				output.Append (c);  			}  			break;  		}  	}  	output.Append (entity);  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (s == null) {  	throw new ArgumentNullException (@"s");  } else if (s.IndexOf ('&') == -1) {  	return s;  } else {  	var insideEntity = false;  	// used to indicate that we are in a potential entity  	var entity = String.Empty;  	var output = new StringBuilder ();  	var len = s.Length;  	for (var i = 0; i < len; i++) {  		var c = s [i];  		switch (c) {  		case '&':  			output.Append (entity);  			entity = @"&";  			insideEntity = true;  			break;  		case ';':  			if (!insideEntity) {  				output.Append (c);  				break;  			}  			entity += c;  			var length = entity.Length;  			if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  				entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  			} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  				entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  			}  			output.Append (entity);  			entity = String.Empty;  			insideEntity = false;  			break;  		default:  			if (insideEntity) {  				entity += c;  			} else {  				output.Append (c);  			}  			break;  		}  	}  	output.Append (entity);  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (s == null) {  	throw new ArgumentNullException (@"s");  } else if (s.IndexOf ('&') == -1) {  	return s;  } else {  	var insideEntity = false;  	// used to indicate that we are in a potential entity  	var entity = String.Empty;  	var output = new StringBuilder ();  	var len = s.Length;  	for (var i = 0; i < len; i++) {  		var c = s [i];  		switch (c) {  		case '&':  			output.Append (entity);  			entity = @"&";  			insideEntity = true;  			break;  		case ';':  			if (!insideEntity) {  				output.Append (c);  				break;  			}  			entity += c;  			var length = entity.Length;  			if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  				entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  			} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  				entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  			}  			output.Append (entity);  			entity = String.Empty;  			insideEntity = false;  			break;  		default:  			if (insideEntity) {  				entity += c;  			} else {  				output.Append (c);  			}  			break;  		}  	}  	output.Append (entity);  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (s == null) {  	throw new ArgumentNullException (@"s");  } else if (s.IndexOf ('&') == -1) {  	return s;  } else {  	var insideEntity = false;  	// used to indicate that we are in a potential entity  	var entity = String.Empty;  	var output = new StringBuilder ();  	var len = s.Length;  	for (var i = 0; i < len; i++) {  		var c = s [i];  		switch (c) {  		case '&':  			output.Append (entity);  			entity = @"&";  			insideEntity = true;  			break;  		case ';':  			if (!insideEntity) {  				output.Append (c);  				break;  			}  			entity += c;  			var length = entity.Length;  			if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  				entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  			} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  				entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  			}  			output.Append (entity);  			entity = String.Empty;  			insideEntity = false;  			break;  		default:  			if (insideEntity) {  				entity += c;  			} else {  				output.Append (c);  			}  			break;  		}  	}  	output.Append (entity);  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (s == null) {  	throw new ArgumentNullException (@"s");  } else if (s.IndexOf ('&') == -1) {  	return s;  } else {  	var insideEntity = false;  	// used to indicate that we are in a potential entity  	var entity = String.Empty;  	var output = new StringBuilder ();  	var len = s.Length;  	for (var i = 0; i < len; i++) {  		var c = s [i];  		switch (c) {  		case '&':  			output.Append (entity);  			entity = @"&";  			insideEntity = true;  			break;  		case ';':  			if (!insideEntity) {  				output.Append (c);  				break;  			}  			entity += c;  			var length = entity.Length;  			if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  				entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  			} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  				entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  			}  			output.Append (entity);  			entity = String.Empty;  			insideEntity = false;  			break;  		default:  			if (insideEntity) {  				entity += c;  			} else {  				output.Append (c);  			}  			break;  		}  	}  	output.Append (entity);  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (s == null) {  	throw new ArgumentNullException (@"s");  } else if (s.IndexOf ('&') == -1) {  	return s;  } else {  	var insideEntity = false;  	// used to indicate that we are in a potential entity  	var entity = String.Empty;  	var output = new StringBuilder ();  	var len = s.Length;  	for (var i = 0; i < len; i++) {  		var c = s [i];  		switch (c) {  		case '&':  			output.Append (entity);  			entity = @"&";  			insideEntity = true;  			break;  		case ';':  			if (!insideEntity) {  				output.Append (c);  				break;  			}  			entity += c;  			var length = entity.Length;  			if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  				entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  			} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  				entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  			}  			output.Append (entity);  			entity = String.Empty;  			insideEntity = false;  			break;  		default:  			if (insideEntity) {  				entity += c;  			} else {  				output.Append (c);  			}  			break;  		}  	}  	output.Append (entity);  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (s.IndexOf ('&') == -1) {  	return s;  } else {  	var insideEntity = false;  	// used to indicate that we are in a potential entity  	var entity = String.Empty;  	var output = new StringBuilder ();  	var len = s.Length;  	for (var i = 0; i < len; i++) {  		var c = s [i];  		switch (c) {  		case '&':  			output.Append (entity);  			entity = @"&";  			insideEntity = true;  			break;  		case ';':  			if (!insideEntity) {  				output.Append (c);  				break;  			}  			entity += c;  			var length = entity.Length;  			if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  				entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  			} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  				entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  			}  			output.Append (entity);  			entity = String.Empty;  			insideEntity = false;  			break;  		default:  			if (insideEntity) {  				entity += c;  			} else {  				output.Append (c);  			}  			break;  		}  	}  	output.Append (entity);  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (s.IndexOf ('&') == -1) {  	return s;  } else {  	var insideEntity = false;  	// used to indicate that we are in a potential entity  	var entity = String.Empty;  	var output = new StringBuilder ();  	var len = s.Length;  	for (var i = 0; i < len; i++) {  		var c = s [i];  		switch (c) {  		case '&':  			output.Append (entity);  			entity = @"&";  			insideEntity = true;  			break;  		case ';':  			if (!insideEntity) {  				output.Append (c);  				break;  			}  			entity += c;  			var length = entity.Length;  			if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  				entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  			} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  				entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  			}  			output.Append (entity);  			entity = String.Empty;  			insideEntity = false;  			break;  		default:  			if (insideEntity) {  				entity += c;  			} else {  				output.Append (c);  			}  			break;  		}  	}  	output.Append (entity);  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (s.IndexOf ('&') == -1) {  	return s;  } else {  	var insideEntity = false;  	// used to indicate that we are in a potential entity  	var entity = String.Empty;  	var output = new StringBuilder ();  	var len = s.Length;  	for (var i = 0; i < len; i++) {  		var c = s [i];  		switch (c) {  		case '&':  			output.Append (entity);  			entity = @"&";  			insideEntity = true;  			break;  		case ';':  			if (!insideEntity) {  				output.Append (c);  				break;  			}  			entity += c;  			var length = entity.Length;  			if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  				entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  			} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  				entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  			}  			output.Append (entity);  			entity = String.Empty;  			insideEntity = false;  			break;  		default:  			if (insideEntity) {  				entity += c;  			} else {  				output.Append (c);  			}  			break;  		}  	}  	output.Append (entity);  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (s.IndexOf ('&') == -1) {  	return s;  } else {  	var insideEntity = false;  	// used to indicate that we are in a potential entity  	var entity = String.Empty;  	var output = new StringBuilder ();  	var len = s.Length;  	for (var i = 0; i < len; i++) {  		var c = s [i];  		switch (c) {  		case '&':  			output.Append (entity);  			entity = @"&";  			insideEntity = true;  			break;  		case ';':  			if (!insideEntity) {  				output.Append (c);  				break;  			}  			entity += c;  			var length = entity.Length;  			if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  				entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  			} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  				entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  			}  			output.Append (entity);  			entity = String.Empty;  			insideEntity = false;  			break;  		default:  			if (insideEntity) {  				entity += c;  			} else {  				output.Append (c);  			}  			break;  		}  	}  	output.Append (entity);  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (s.IndexOf ('&') == -1) {  	return s;  } else {  	var insideEntity = false;  	// used to indicate that we are in a potential entity  	var entity = String.Empty;  	var output = new StringBuilder ();  	var len = s.Length;  	for (var i = 0; i < len; i++) {  		var c = s [i];  		switch (c) {  		case '&':  			output.Append (entity);  			entity = @"&";  			insideEntity = true;  			break;  		case ';':  			if (!insideEntity) {  				output.Append (c);  				break;  			}  			entity += c;  			var length = entity.Length;  			if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  				entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  			} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  				entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  			}  			output.Append (entity);  			entity = String.Empty;  			insideEntity = false;  			break;  		default:  			if (insideEntity) {  				entity += c;  			} else {  				output.Append (c);  			}  			break;  		}  	}  	output.Append (entity);  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (s.IndexOf ('&') == -1) {  	return s;  } else {  	var insideEntity = false;  	// used to indicate that we are in a potential entity  	var entity = String.Empty;  	var output = new StringBuilder ();  	var len = s.Length;  	for (var i = 0; i < len; i++) {  		var c = s [i];  		switch (c) {  		case '&':  			output.Append (entity);  			entity = @"&";  			insideEntity = true;  			break;  		case ';':  			if (!insideEntity) {  				output.Append (c);  				break;  			}  			entity += c;  			var length = entity.Length;  			if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  				entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  			} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  				entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  			}  			output.Append (entity);  			entity = String.Empty;  			insideEntity = false;  			break;  		default:  			if (insideEntity) {  				entity += c;  			} else {  				output.Append (c);  			}  			break;  		}  	}  	output.Append (entity);  	return output.ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	var c = s [i];  	switch (c) {  	case '&':  		output.Append (entity);  		entity = @"&";  		insideEntity = true;  		break;  	case ';':  		if (!insideEntity) {  			output.Append (c);  			break;  		}  		entity += c;  		var length = entity.Length;  		if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  			entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  		} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  			entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  		}  		output.Append (entity);  		entity = String.Empty;  		insideEntity = false;  		break;  	default:  		if (insideEntity) {  			entity += c;  		} else {  			output.Append (c);  		}  		break;  	}  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	var c = s [i];  	switch (c) {  	case '&':  		output.Append (entity);  		entity = @"&";  		insideEntity = true;  		break;  	case ';':  		if (!insideEntity) {  			output.Append (c);  			break;  		}  		entity += c;  		var length = entity.Length;  		if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  			entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  		} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  			entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  		}  		output.Append (entity);  		entity = String.Empty;  		insideEntity = false;  		break;  	default:  		if (insideEntity) {  			entity += c;  		} else {  			output.Append (c);  		}  		break;  	}  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	var c = s [i];  	switch (c) {  	case '&':  		output.Append (entity);  		entity = @"&";  		insideEntity = true;  		break;  	case ';':  		if (!insideEntity) {  			output.Append (c);  			break;  		}  		entity += c;  		var length = entity.Length;  		if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  			entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  		} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  			entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  		}  		output.Append (entity);  		entity = String.Empty;  		insideEntity = false;  		break;  	default:  		if (insideEntity) {  			entity += c;  		} else {  			output.Append (c);  		}  		break;  	}  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	var c = s [i];  	switch (c) {  	case '&':  		output.Append (entity);  		entity = @"&";  		insideEntity = true;  		break;  	case ';':  		if (!insideEntity) {  			output.Append (c);  			break;  		}  		entity += c;  		var length = entity.Length;  		if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  			entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  		} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  			entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  		}  		output.Append (entity);  		entity = String.Empty;  		insideEntity = false;  		break;  	default:  		if (insideEntity) {  			entity += c;  		} else {  			output.Append (c);  		}  		break;  	}  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	var c = s [i];  	switch (c) {  	case '&':  		output.Append (entity);  		entity = @"&";  		insideEntity = true;  		break;  	case ';':  		if (!insideEntity) {  			output.Append (c);  			break;  		}  		entity += c;  		var length = entity.Length;  		if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  			entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  		} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  			entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  		}  		output.Append (entity);  		entity = String.Empty;  		insideEntity = false;  		break;  	default:  		if (insideEntity) {  			entity += c;  		} else {  			output.Append (c);  		}  		break;  	}  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	var c = s [i];  	switch (c) {  	case '&':  		output.Append (entity);  		entity = @"&";  		insideEntity = true;  		break;  	case ';':  		if (!insideEntity) {  			output.Append (c);  			break;  		}  		entity += c;  		var length = entity.Length;  		if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  			entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  		} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  			entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  		}  		output.Append (entity);  		entity = String.Empty;  		insideEntity = false;  		break;  	default:  		if (insideEntity) {  			entity += c;  		} else {  			output.Append (c);  		}  		break;  	}  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: switch (c) {  case '&':  	output.Append (entity);  	entity = @"&";  	insideEntity = true;  	break;  case ';':  	if (!insideEntity) {  		output.Append (c);  		break;  	}  	entity += c;  	var length = entity.Length;  	if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  		entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  	} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  		entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  	}  	output.Append (entity);  	entity = String.Empty;  	insideEntity = false;  	break;  default:  	if (insideEntity) {  		entity += c;  	} else {  		output.Append (c);  	}  	break;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: switch (c) {  case '&':  	output.Append (entity);  	entity = @"&";  	insideEntity = true;  	break;  case ';':  	if (!insideEntity) {  		output.Append (c);  		break;  	}  	entity += c;  	var length = entity.Length;  	if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  		entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  	} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  		entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  	}  	output.Append (entity);  	entity = String.Empty;  	insideEntity = false;  	break;  default:  	if (insideEntity) {  		entity += c;  	} else {  		output.Append (c);  	}  	break;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: switch (c) {  case '&':  	output.Append (entity);  	entity = @"&";  	insideEntity = true;  	break;  case ';':  	if (!insideEntity) {  		output.Append (c);  		break;  	}  	entity += c;  	var length = entity.Length;  	if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  		entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  	} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  		entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  	}  	output.Append (entity);  	entity = String.Empty;  	insideEntity = false;  	break;  default:  	if (insideEntity) {  		entity += c;  	} else {  		output.Append (c);  	}  	break;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: switch (c) {  case '&':  	output.Append (entity);  	entity = @"&";  	insideEntity = true;  	break;  case ';':  	if (!insideEntity) {  		output.Append (c);  		break;  	}  	entity += c;  	var length = entity.Length;  	if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  		entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  	} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  		entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  	}  	output.Append (entity);  	entity = String.Empty;  	insideEntity = false;  	break;  default:  	if (insideEntity) {  		entity += c;  	} else {  		output.Append (c);  	}  	break;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: switch (c) {  case '&':  	output.Append (entity);  	entity = @"&";  	insideEntity = true;  	break;  case ';':  	if (!insideEntity) {  		output.Append (c);  		break;  	}  	entity += c;  	var length = entity.Length;  	if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  		entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  	} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  		entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  	}  	output.Append (entity);  	entity = String.Empty;  	insideEntity = false;  	break;  default:  	if (insideEntity) {  		entity += c;  	} else {  		output.Append (c);  	}  	break;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: switch (c) {  case '&':  	output.Append (entity);  	entity = @"&";  	insideEntity = true;  	break;  case ';':  	if (!insideEntity) {  		output.Append (c);  		break;  	}  	entity += c;  	var length = entity.Length;  	if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  		entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  	} else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  		entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  	}  	output.Append (entity);  	entity = String.Empty;  	insideEntity = false;  	break;  default:  	if (insideEntity) {  		entity += c;  	} else {  		output.Append (c);  	}  	break;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  	entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  } else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  	entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  	entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  } else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  	entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  	entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  } else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  	entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  	entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  } else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  	entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  	entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  } else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  	entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (length >= 2 && entity [1] == '#' && entity [2] != ';') {  	entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  } else if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  	entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: entity = ((char)Int32.Parse (entity.Substring (2' entity.Length - 3))).ToString ();  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  	entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: if (length > 1 && entities.ContainsKey (entity.Substring (1' entity.Length - 2))) {  	entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,HtmlDecode,The following statement contains a magic number: entity = entities [entity.Substring (1' entity.Length - 2)].ToString ();  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,IsAbsolutePath,The following statement contains a magic number: if (path.Length < 2) {  	return false;  } else if (path.Substring (0' 2) == @"\\") {  	// UNC.  	return IsUncPath (path);  } else if (path.Substring (1' 1) == @":") {  	// "C:"  	return IsDriveLetterPath (path);  } else {  	return false;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,IsAbsolutePath,The following statement contains a magic number: if (path.Length < 2) {  	return false;  } else if (path.Substring (0' 2) == @"\\") {  	// UNC.  	return IsUncPath (path);  } else if (path.Substring (1' 1) == @":") {  	// "C:"  	return IsDriveLetterPath (path);  } else {  	return false;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,IsAbsolutePath,The following statement contains a magic number: if (path.Substring (0' 2) == @"\\") {  	// UNC.  	return IsUncPath (path);  } else if (path.Substring (1' 1) == @":") {  	// "C:"  	return IsDriveLetterPath (path);  } else {  	return false;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,CombineVirtual,The following statement contains a magic number: if (string.IsNullOrEmpty (path1)) {  	return path2;  } else if (string.IsNullOrEmpty (path2)) {  	return path1;  } else {  	// Avoid removing too much "/"' so that "file://" still  	// stays "file://" and does not become "file:/".  	// (The same applies for other protocols.  	path1 = path1.Replace ('\\'' '/');  	if (path1 [path1.Length - 1] != '/') {  		path1 += @"/";  	}  	path2 = path2.Replace ('\\'' '/');  	// Do allow "file://" + "/C:/..." to really form "file:///C:/..."'  	// with three slashes.  	if (path2.Length >= 3) {  		if (path2 [0] == '/' && path2 [2] == ':' && char.IsLetter (path2 [1])) {  			// Is OK to have a leading slash.  		} else {  			path2 = path2.TrimStart ('/'' '\\');  		}  	} else {  		path2 = path2.TrimStart ('/'' '\\');  	}  	return path1 + path2;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,CombineVirtual,The following statement contains a magic number: if (string.IsNullOrEmpty (path1)) {  	return path2;  } else if (string.IsNullOrEmpty (path2)) {  	return path1;  } else {  	// Avoid removing too much "/"' so that "file://" still  	// stays "file://" and does not become "file:/".  	// (The same applies for other protocols.  	path1 = path1.Replace ('\\'' '/');  	if (path1 [path1.Length - 1] != '/') {  		path1 += @"/";  	}  	path2 = path2.Replace ('\\'' '/');  	// Do allow "file://" + "/C:/..." to really form "file:///C:/..."'  	// with three slashes.  	if (path2.Length >= 3) {  		if (path2 [0] == '/' && path2 [2] == ':' && char.IsLetter (path2 [1])) {  			// Is OK to have a leading slash.  		} else {  			path2 = path2.TrimStart ('/'' '\\');  		}  	} else {  		path2 = path2.TrimStart ('/'' '\\');  	}  	return path1 + path2;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,CombineVirtual,The following statement contains a magic number: if (string.IsNullOrEmpty (path2)) {  	return path1;  } else {  	// Avoid removing too much "/"' so that "file://" still  	// stays "file://" and does not become "file:/".  	// (The same applies for other protocols.  	path1 = path1.Replace ('\\'' '/');  	if (path1 [path1.Length - 1] != '/') {  		path1 += @"/";  	}  	path2 = path2.Replace ('\\'' '/');  	// Do allow "file://" + "/C:/..." to really form "file:///C:/..."'  	// with three slashes.  	if (path2.Length >= 3) {  		if (path2 [0] == '/' && path2 [2] == ':' && char.IsLetter (path2 [1])) {  			// Is OK to have a leading slash.  		} else {  			path2 = path2.TrimStart ('/'' '\\');  		}  	} else {  		path2 = path2.TrimStart ('/'' '\\');  	}  	return path1 + path2;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,CombineVirtual,The following statement contains a magic number: if (string.IsNullOrEmpty (path2)) {  	return path1;  } else {  	// Avoid removing too much "/"' so that "file://" still  	// stays "file://" and does not become "file:/".  	// (The same applies for other protocols.  	path1 = path1.Replace ('\\'' '/');  	if (path1 [path1.Length - 1] != '/') {  		path1 += @"/";  	}  	path2 = path2.Replace ('\\'' '/');  	// Do allow "file://" + "/C:/..." to really form "file:///C:/..."'  	// with three slashes.  	if (path2.Length >= 3) {  		if (path2 [0] == '/' && path2 [2] == ':' && char.IsLetter (path2 [1])) {  			// Is OK to have a leading slash.  		} else {  			path2 = path2.TrimStart ('/'' '\\');  		}  	} else {  		path2 = path2.TrimStart ('/'' '\\');  	}  	return path1 + path2;  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,CombineVirtual,The following statement contains a magic number: if (path2.Length >= 3) {  	if (path2 [0] == '/' && path2 [2] == ':' && char.IsLetter (path2 [1])) {  		// Is OK to have a leading slash.  	} else {  		path2 = path2.TrimStart ('/'' '\\');  	}  } else {  	path2 = path2.TrimStart ('/'' '\\');  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,CombineVirtual,The following statement contains a magic number: if (path2.Length >= 3) {  	if (path2 [0] == '/' && path2 [2] == ':' && char.IsLetter (path2 [1])) {  		// Is OK to have a leading slash.  	} else {  		path2 = path2.TrimStart ('/'' '\\');  	}  } else {  	path2 = path2.TrimStart ('/'' '\\');  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,CombineVirtual,The following statement contains a magic number: if (path2 [0] == '/' && path2 [2] == ':' && char.IsLetter (path2 [1])) {  	// Is OK to have a leading slash.  } else {  	path2 = path2.TrimStart ('/'' '\\');  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,urlEncodeToBytes,The following statement contains a magic number: using (var result = new MemoryStream ()) {  	var end = offset + count;  	for (var i = offset; i < end; i++) {  		var c = (char)bytes [i];  		var isUnsafe = (c == ' ') || (c < '0' && c != '-' && c != '.') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a' && c != '_') || (c > 'z');  		if (isUnsafe && additionalSafeChars.IndexOf (c) >= 0) {  			isUnsafe = false;  		}  		if (isUnsafe) {  			// An unsafe character' must escape.  			result.WriteByte ((byte)'%');  			var idx = c >> 4;  			result.WriteByte ((byte)HexChars [idx]);  			idx = c & 0x0F;  			result.WriteByte ((byte)HexChars [idx]);  		} else {  			// A safe character just write.  			result.WriteByte ((byte)c);  		}  	}  	return result.ToArray ();  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,urlEncodeToBytes,The following statement contains a magic number: for (var i = offset; i < end; i++) {  	var c = (char)bytes [i];  	var isUnsafe = (c == ' ') || (c < '0' && c != '-' && c != '.') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a' && c != '_') || (c > 'z');  	if (isUnsafe && additionalSafeChars.IndexOf (c) >= 0) {  		isUnsafe = false;  	}  	if (isUnsafe) {  		// An unsafe character' must escape.  		result.WriteByte ((byte)'%');  		var idx = c >> 4;  		result.WriteByte ((byte)HexChars [idx]);  		idx = c & 0x0F;  		result.WriteByte ((byte)HexChars [idx]);  	} else {  		// A safe character just write.  		result.WriteByte ((byte)c);  	}  }  
Magic Number,ZetaHtmlEditControl.Code.Helper,PathHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\Helper\PathHelper.cs,urlEncodeToBytes,The following statement contains a magic number: if (isUnsafe) {  	// An unsafe character' must escape.  	result.WriteByte ((byte)'%');  	var idx = c >> 4;  	result.WriteByte ((byte)HexChars [idx]);  	idx = c & 0x0F;  	result.WriteByte ((byte)HexChars [idx]);  } else {  	// A safe character just write.  	result.WriteByte ((byte)c);  }  
Magic Number,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,getWebAddressFromFile,The following statement contains a magic number: if (file.StartsWith (@"http") || file.StartsWith (@"https") || baseUri == null) {  	return file;  } else if (file.IndexOf (@"\"' StringComparison.Ordinal) == 0) {  	return baseUri + file;  } else if (file.IndexOf (@"/"' StringComparison.Ordinal) == 0) {  	return baseUri + file;  } else if (file.StartsWith (@"file") || file.Substring (1' 2) == @":\" || baseUri.AbsolutePath == @"about:blank") {  	return file;  } else {  	return baseUri + @"/" + file;  }  
Magic Number,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,getWebAddressFromFile,The following statement contains a magic number: if (file.IndexOf (@"\"' StringComparison.Ordinal) == 0) {  	return baseUri + file;  } else if (file.IndexOf (@"/"' StringComparison.Ordinal) == 0) {  	return baseUri + file;  } else if (file.StartsWith (@"file") || file.Substring (1' 2) == @":\" || baseUri.AbsolutePath == @"about:blank") {  	return file;  } else {  	return baseUri + @"/" + file;  }  
Magic Number,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,getWebAddressFromFile,The following statement contains a magic number: if (file.IndexOf (@"/"' StringComparison.Ordinal) == 0) {  	return baseUri + file;  } else if (file.StartsWith (@"file") || file.Substring (1' 2) == @":\" || baseUri.AbsolutePath == @"about:blank") {  	return file;  } else {  	return baseUri + @"/" + file;  }  
Magic Number,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,getWebAddressFromFile,The following statement contains a magic number: if (file.StartsWith (@"file") || file.Substring (1' 2) == @":\" || baseUri.AbsolutePath == @"about:blank") {  	return file;  } else {  	return baseUri + @"/" + file;  }  
Missing Default,ZetaHtmlEditControl.Code.Html,HtmlConversionHelper,D:\newReposJune17\UweKeim_ZetaHtmlEditControl\Source\HtmlEditLibrary\..\Control\Code\Html\HtmlConversionHelper.cs,FindImgs,The following switch statement is missing a default case: switch (r.Name.ToLowerInvariant ()) {  case @"src":  	ii.Source = r.Value;  	break;  case @"width":  	ii.Width = ConvertHelper.ToInt32 (r.Value);  	break;  case @"height":  	ii.Height = ConvertHelper.ToInt32 (r.Value);  	break;  }  
