Implementation smell,Namespace,Class,File,Method,Description
Long Method,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The method has 254 lines of code.
Long Method,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The method has 203 lines of code.
Long Method,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The method has 297 lines of code.
Long Method,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The method has 507 lines of code.
Long Method,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The method has 136 lines of code.
Long Method,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The method has 108 lines of code.
Long Method,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The method has 136 lines of code.
Long Method,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The method has 259 lines of code.
Long Method,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The method has 136 lines of code.
Long Method,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The method has 113 lines of code.
Long Method,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetWebColors,The method has 154 lines of code.
Long Method,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The method has 527 lines of code.
Long Method,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The method has 143 lines of code.
Long Method,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The method has 160 lines of code.
Long Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextVisibleEnabledCell,The method has 106 lines of code.
Long Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnKeyDown,The method has 177 lines of code.
Long Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnMouseDown,The method has 152 lines of code.
Long Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnMouseMove,The method has 260 lines of code.
Complex Method,XRefresh,Scanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,BuildExtCacheWorker,Cyclomatic complexity of the method is 11
Complex Method,XRefresh,ActivityLog,C:\repos\binaryage_xrefresh\src\winmonitor\EventLog.cs,table_MouseClick,Cyclomatic complexity of the method is 8
Complex Method,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,MakeUniqueName,Cyclomatic complexity of the method is 13
Complex Method,XRefresh,Model,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,Model,Cyclomatic complexity of the method is 9
Complex Method,XRefresh,Model,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,ReadXmlSerializable,Cyclomatic complexity of the method is 8
Complex Method,XRefresh,Model,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitVars,Cyclomatic complexity of the method is 13
Complex Method,XRefresh,FileMask,C:\repos\binaryage_xrefresh\src\winmonitor\Utils.cs,WildcardToRegex,Cyclomatic complexity of the method is 8
Complex Method,XRefresh,GDIImageCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaint,Cyclomatic complexity of the method is 8
Complex Method,FlexFieldControlLib,HexadecimalValue,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\HexadecimalValue.cs,GetCharacterSize,Cyclomatic complexity of the method is 8
Complex Method,CustomUIControls,ImageListPanel,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageListPanel.cs,Init,Cyclomatic complexity of the method is 9
Complex Method,Pabo.MozBar,MozPane,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,SelectItem,Cyclomatic complexity of the method is 9
Complex Method,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseDown,Cyclomatic complexity of the method is 8
Complex Method,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseMove,Cyclomatic complexity of the method is 8
Complex Method,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseUp,Cyclomatic complexity of the method is 9
Complex Method,XPTable.Editors,WebColorComparer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Compare,Cyclomatic complexity of the method is 9
Complex Method,XPTable.Models,Row,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Row.cs,OnCellRemoved,Cyclomatic complexity of the method is 8
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextVisibleEnabledCell,Cyclomatic complexity of the method is 13
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextEditableCell,Cyclomatic complexity of the method is 11
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,EditCell,Cyclomatic complexity of the method is 8
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,UpdateScrollBars,Cyclomatic complexity of the method is 10
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,EnsureVisible,Cyclomatic complexity of the method is 14
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,CalcTableState,Cyclomatic complexity of the method is 8
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnKeyDown,Cyclomatic complexity of the method is 8
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnMouseUp,Cyclomatic complexity of the method is 14
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnMouseDown,Cyclomatic complexity of the method is 23
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnMouseMove,Cyclomatic complexity of the method is 29
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnPaintBorder,Cyclomatic complexity of the method is 10
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnPaintCell,Cyclomatic complexity of the method is 8
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnPaintHeader,Cyclomatic complexity of the method is 10
Complex Method,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnPaintRows,Cyclomatic complexity of the method is 12
Complex Method,XPTable.Models,Selection,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\TableModel.cs,InternalAddCells,Cyclomatic complexity of the method is 8
Complex Method,XPTable.Models,Selection,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\TableModel.cs,InternalRemoveCells,Cyclomatic complexity of the method is 8
Complex Method,XPTable.Renderers,ButtonCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ButtonCellRenderer.cs,OnPaint,Cyclomatic complexity of the method is 11
Complex Method,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,OnPaint,Cyclomatic complexity of the method is 10
Complex Method,XPTable.Renderers,ColorCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ColorCellRenderer.cs,OnPaint,Cyclomatic complexity of the method is 11
Complex Method,XPTable.Renderers,FlatHeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\FlatHeaderRenderer.cs,OnPaint,Cyclomatic complexity of the method is 8
Complex Method,XPTable.Renderers,GradientHeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\GradientHeaderRenderer.cs,OnPaint,Cyclomatic complexity of the method is 10
Complex Method,XPTable.Renderers,ImageCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ImageCellRenderer.cs,CalcImageRect,Cyclomatic complexity of the method is 8
Complex Method,XPTable.Renderers,NumberCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\NumberCellRenderer.cs,OnMouseMove,Cyclomatic complexity of the method is 8
Complex Method,XPTable.Renderers,NumberCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\NumberCellRenderer.cs,OnPaint,Cyclomatic complexity of the method is 10
Complex Method,XPTable.Renderers,ProgressBarCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ProgressBarCellRenderer.cs,OnPaint,Cyclomatic complexity of the method is 11
Complex Method,XPTable.Renderers,XPHeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\XPHeaderRenderer.cs,OnPaint,Cyclomatic complexity of the method is 10
Long Parameter List,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,AddSettingsRow,The method has 14 parameters. Parameters: RunOnWindowsStartup' ShowGlobalIncludes' ShowGlobalExcludes' PlaySoundOnRefresh' SoundFile' FlashIconOnRefresh' Port' LocalhostOnly' SlaveHost' PortRange' WaitingTimeout' CheckForUpdates' SendUsage' EnableLogging
Long Parameter List,XRefresh,Activity,C:\repos\binaryage_xrefresh\src\winmonitor\Model.cs,Activity,The method has 6 parameters. Parameters: type' time' path1' path2' passed' reason
Long Parameter List,XRefresh,Win32,C:\repos\binaryage_xrefresh\src\winmonitor\ShellIcon.cs,SHGetFileInfo,The method has 5 parameters. Parameters: pszPath' dwFileAttributes' psfi' cbSizeFileInfo' uFlags
Long Parameter List,CustomUIControls,ImageListPanel,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageListPanel.cs,Init,The method has 5 parameters. Parameters: imageList' nHSpace' nVSpace' nColumns' defaultImage
Long Parameter List,Pabo.MozBar,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ThemeManager.cs,GetThemeColor,The method has 5 parameters. Parameters: hTheme' partID' stateID' propID' color
Long Parameter List,XPTable.Editors,CellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\CellEditor.cs,PrepareForEditing,The method has 5 parameters. Parameters: cell' table' cellPos' cellRect' userSetEditorValues
Long Parameter List,XPTable.Editors,ThemedTabPage,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,PaintChildrenBackground,The method has 5 parameters. Parameters: g' control' rect' ofx' ofy
Long Parameter List,XPTable.Editors,DropDownCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\DropDownCellEditor.cs,PrepareForEditing,The method has 5 parameters. Parameters: cell' table' cellPos' cellRect' userSetEditorValues
Long Parameter List,XPTable.Editors,ICellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ICellEditor.cs,PrepareForEditing,The method has 5 parameters. Parameters: cell' table' cellPos' cellRect' userSetEditorValues
Long Parameter List,XPTable.Editors,NumberCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\NumberCellEditor.cs,PrepareForEditing,The method has 5 parameters. Parameters: cell' table' cellPos' cellRect' userSetEditorValues
Long Parameter List,XPTable.Events,CellEditEventArgs,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Events\CellEditEventArgs.cs,CellEditEventArgs,The method has 6 parameters. Parameters: source' editor' table' row' column' cellRect
Long Parameter List,XPTable.Events,CellEventArgs,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Events\CellEventArgs.cs,CellEventArgs,The method has 5 parameters. Parameters: source' column' row' eventType' oldValue
Long Parameter List,XPTable.Events,CellFocusEventArgs,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Events\CellFocusEventArgs.cs,CellFocusEventArgs,The method has 5 parameters. Parameters: source' table' row' column' cellRect
Long Parameter List,XPTable.Events,CellKeyEventArgs,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Events\CellKeyEventArgs.cs,CellKeyEventArgs,The method has 6 parameters. Parameters: cell' table' row' column' cellRect' kea
Long Parameter List,XPTable.Events,CellKeyEventArgs,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Events\CellKeyEventArgs.cs,CellKeyEventArgs,The method has 5 parameters. Parameters: cell' table' cellPos' cellRect' kea
Long Parameter List,XPTable.Events,CellMouseEventArgs,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Events\CellMouseEventArgs.cs,CellMouseEventArgs,The method has 5 parameters. Parameters: cell' table' row' column' cellRect
Long Parameter List,XPTable.Events,CellMouseEventArgs,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Events\CellMouseEventArgs.cs,CellMouseEventArgs,The method has 6 parameters. Parameters: cell' table' row' column' cellRect' mea
Long Parameter List,XPTable.Events,CellMouseEventArgs,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Events\CellMouseEventArgs.cs,CellMouseEventArgs,The method has 5 parameters. Parameters: cell' table' cellPos' cellRect' mea
Long Parameter List,XPTable.Events,HeaderMouseEventArgs,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Events\HeaderMouseEventArgs.cs,HeaderMouseEventArgs,The method has 5 parameters. Parameters: column' table' index' headerRect' mea
Long Parameter List,XPTable.Events,PaintCellEventArgs,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Events\PaintCellEventArgs.cs,PaintCellEventArgs,The method has 11 parameters. Parameters: g' cell' table' row' column' selected' focused' sorted' editable' enabled' cellRect
Long Parameter List,XPTable.Events,PaintHeaderEventArgs,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Events\PaintHeaderEventArgs.cs,PaintHeaderEventArgs,The method has 6 parameters. Parameters: g' column' table' columnIndex' headerStyle' headerRect
Long Parameter List,XPTable.Events,RowEventArgs,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Events\RowEventArgs.cs,RowEventArgs,The method has 6 parameters. Parameters: source' rowIndex' cell' cellFromIndex' cellToIndex' eventType
Long Parameter List,XPTable.Models,Cell,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Cell.cs,Cell,The method has 5 parameters. Parameters: text' value' foreColor' backColor' font
Long Parameter List,XPTable.Models,Cell,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Cell.cs,Cell,The method has 5 parameters. Parameters: text' check' foreColor' backColor' font
Long Parameter List,XPTable.Models,Cell,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Cell.cs,Cell,The method has 5 parameters. Parameters: text' image' foreColor' backColor' font
Long Parameter List,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextVisibleEnabledCell,The method has 5 parameters. Parameters: start' wrap' forward' includeStart' checkOtherCellsInRow
Long Parameter List,XPTable.Renderers,ImageCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ImageCellRenderer.cs,DrawImage,The method has 5 parameters. Parameters: g' image' imageRect' scaled' enabled
Long Parameter List,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawUpDownButtons,The method has 5 parameters. Parameters: g' upButtonRect' upButtonState' downButtonRect' downButtonState
Long Parameter List,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawUpDownButtons,The method has 7 parameters. Parameters: g' upButtonRect' upButtonClipRect' upButtonState' downButtonRect' downButtonClipRect' downButtonState
Long Parameter List,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawThemeBackground,The method has 5 parameters. Parameters: g' windowClass' part' partState' drawRect
Long Parameter List,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawThemeBackground,The method has 6 parameters. Parameters: g' windowClass' part' partState' drawRect' clipRect
Long Parameter List,XPTable.Win32,NativeMethods,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Win32\NativeMethods.cs,DrawThemeBackground,The method has 6 parameters. Parameters: hTheme' hdc' iPartId' iStateId' pRect' pClipRect
Long Parameter List,XPTable.Win32,NativeMethods,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Win32\NativeMethods.cs,ScrollWindow,The method has 5 parameters. Parameters: hWnd' XAmount' YAmount' lpRect' lpClipRect
Long Parameter List,XPTable.Win32,NativeMethods,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Win32\NativeMethods.cs,PeekMessage,The method has 5 parameters. Parameters: msg' hwnd' msgMin' msgMax' remove
Long Parameter List,XPTable.Win32,NativeWindow,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Win32\NativeWindow.cs,CallWindowProc,The method has 5 parameters. Parameters: prevWndFunc' hWnd' iMsg' wParam' lParam
Long Identifier,XRefresh,Model,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,,The length of the parameter relationFK_Folders_IncludeFilters is 33.
Long Identifier,XRefresh,Model,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,,The length of the parameter relationFK_Folders_ExcludeFilters is 33.
Long Identifier,XRefresh,IncludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,AddIncludeFiltersRow,The length of the parameter parentFoldersRowByFK_Folders_IncludeFilters is 43.
Long Identifier,XRefresh,ExcludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,AddExcludeFiltersRow,The length of the parameter parentFoldersRowByFK_Folders_ExcludeFilters is 43.
Long Identifier,XRefresh,Win32,C:\repos\binaryage_xrefresh\src\winmonitor\ShellIcon.cs,,The length of the parameter FILE_ATTRIBUTE_NOT_CONTENT_INDEXED is 34.
Long Statement,XRefresh,AdvancedSettings,C:\repos\binaryage_xrefresh\src\winmonitor\AdvancedSettings.cs,firefoxDialog_ResetEvent,The length of the statement  "			DialogResult res = MessageBox.Show("Do you really want to reset settings to default values?"' "Delete item"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question); " is 162.
Long Statement,XRefresh,AdvancedSettings,C:\repos\binaryage_xrefresh\src\winmonitor\AdvancedSettings.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AdvancedSettings)); " is 136.
Long Statement,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AboutDialog)); " is 131.
Long Statement,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The length of the statement  "            this.linkLabelSite.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabelSite_LinkClicked); " is 124.
Long Statement,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The length of the statement  "            this.label4.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The length of the statement  "            this.linkLabelContact.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabelContact_LinkClicked); " is 130.
Long Statement,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The length of the statement  "            this.label6.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 143.
Long Statement,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The length of the statement  "            this.label7.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 143.
Long Statement,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The length of the statement  "            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The length of the statement  "            this.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 149.
Long Statement,XRefresh,FilterMenu,C:\repos\binaryage_xrefresh\src\winmonitor\FilterMenu.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FilterMenu)); " is 130.
Long Statement,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,StyleRow,The length of the statement  "            cell1.CellStyle.Font = new System.Drawing.Font("Courier"' 8.00F' style' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 120.
Long Statement,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,StyleRow,The length of the statement  "            cell2.CellStyle.Font = new System.Drawing.Font("Arial"' 8.25F' FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 130.
Long Statement,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PageNetwork)); " is 131.
Long Statement,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F)); " is 123.
Long Statement,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The length of the statement  "			this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 142.
Long Statement,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The length of the statement  "			this.toolTip.SetToolTip(this.editRemoteComputer' "Fill in host name for remote computer where are you going to run web browser."); " is 130.
Long Statement,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The length of the statement  "			this.toolTip.SetToolTip(this.labelRemoteComputer' "Fill in host name for remote computer where are you going to run web browser."); " is 131.
Long Statement,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The length of the statement  "			this.toolTip.SetToolTip(this.checkAcceptOnlyLocal' "If your browser runs on the same machine check this for security.\r\nWe will then a" + " is 138.
Long Statement,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The length of the statement  "			this.panel2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 142.
Long Statement,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The length of the statement  "			this.toolTip.SetToolTip(this.checkForUpdates' "XRefresh will perform check for update every week. \r\nThe check is performed during computer inactivity at least 30 minutes after reboot."); " is 188.
Long Statement,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The length of the statement  "			this.toolTip.SetToolTip(this.checkUsageStatistics' "XRefresh sends the number of successful refresh events.\r\nThis number is used for our web statistics saying \r\nhow much developers\' time around the globe\r\nhas been saved so far."); " is 237.
Long Statement,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The length of the statement  "            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 144.
Long Statement,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The length of the statement  "            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 152.
Long Statement,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F)); " is 122.
Long Statement,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The length of the statement  "            this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 144.
Long Statement,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The length of the statement  "            this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 152.
Long Statement,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PageMain)); " is 128.
Long Statement,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F)); " is 123.
Long Statement,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The length of the statement  "			this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 142.
Long Statement,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The length of the statement  "			this.toolTip.SetToolTip(this.editSettingsFile' "The location of a settings file. \r\nSettings will be saved in XML format."); " is 125.
Long Statement,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The length of the statement  "			this.toolTip.SetToolTip(this.checkRunOnStartup' "When checked' XRefresh will start automatically during windows startup."); " is 123.
Long Statement,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The length of the statement  "			this.panel2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 142.
Long Statement,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The length of the statement  "			this.toolTip.SetToolTip(this.checkFlashIconOnRefresh' "Signal refresh by changing icon for a little moment during refresh."); " is 125.
Long Statement,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The length of the statement  "			this.toolTip.SetToolTip(this.checkEnableLogging' "You may want to enable logging for program diagnostics. When enabled' the Event l" + " is 134.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ProjectFilters)); " is 134.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 121.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 121.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel4.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 153.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel4.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F)); " is 123.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel4.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 300F)); " is 124.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel4.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 20F)); " is 123.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel4.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 20F)); " is 123.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.panel2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 142.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.buttonBrowseTestPath.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 158.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.buttonRunTest.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 151.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.editTestPath.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) " is 148.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 153.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F)); " is 123.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 160F)); " is 124.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.flowLayoutPanel1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 152.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.buttonOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanelTopLeft.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 159.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanelTopLeft.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 128.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanelTopLeft.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 128.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanelTopLeft.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 144.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 152.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.toolTip.SetToolTip(this.label1' "List here all files you explicitly want to be reported. This is stronger than ign" + " is 122.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.checkBoxGlobalIncludes.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 158.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.checkBoxGlobalIncludes.Font = new System.Drawing.Font("Microsoft Sans Serif"' 7F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 171.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 153.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.checkBoxGlobalExcludes.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 158.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.checkBoxGlobalExcludes.Font = new System.Drawing.Font("Microsoft Sans Serif"' 7F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 171.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 144.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 152.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableTester.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 147.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel3.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 153.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel3.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F)); " is 123.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.tableLayoutPanel3.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 80F)); " is 123.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.button1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 143.
Long Statement,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The length of the statement  "			this.flowLayoutPanel2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 152.
Long Statement,XRefresh,ActivityLog,C:\repos\binaryage_xrefresh\src\winmonitor\EventLog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ActivityLog)); " is 131.
Long Statement,XRefresh,FilterTable,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTable.cs,DeleteRow,The length of the statement  "			//DialogResult res = MessageBox.Show(String.Format("Do you really want to remove mask {0}?"' row.Cells[0].Text)' "Delete item"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question); " is 181.
Long Statement,XRefresh,FilterTable,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTable.cs,VisualizeFilter,The length of the statement  "			cellStyle1.Font = new System.Drawing.Font("Courier"' 8.00F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 142.
Long Statement,XRefresh,FilterTable,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTable.cs,VisualizeFilter,The length of the statement  "			cellStyle2.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 140.
Long Statement,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Menu)); " is 124.
Long Statement,XRefresh,ImageIndexEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,PaintValue,The length of the statement  "			IExtenderListService extenderListService = (IExtenderListService)component.Site.GetService(typeof(IExtenderListService)); " is 121.
Long Statement,XRefresh,ImageIndexEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,EditValue,The length of the statement  "			IExtenderListService extenderListService = (IExtenderListService)component.Site.GetService(typeof(IExtenderListService)); " is 121.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,SetupTable,The length of the statement  "			table.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 135.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,SetupTable,The length of the statement  "			table.HeaderFont = new System.Drawing.Font("Arial"' 9.0F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 137.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,OnCellPropertyChanged,The length of the statement  "			if (e.EventType != XPTable.Events.CellEventType.ValueChanged && e.EventType != XPTable.Events.CellEventType.CheckStateChanged) return; " is 134.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,DeleteRow,The length of the statement  "			DialogResult res = MessageBox.Show(String.Format("Do you really want to remove folder {0}?"' row.Cells[0].Text)' "Delete item"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question); " is 181.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,VisualizeFolder,The length of the statement  "			cellStyle1.Font = new System.Drawing.Font("Arial"' 8.0F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 136.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,VisualizeFolder,The length of the statement  "			cellStyle3.Font = new System.Drawing.Font("Arial"' 8.0F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 139.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,ScannerWorkerCompleted,The length of the statement  "                MessageBox.Show(String.Format("Unable to add new folder: Folder:'{0}'\nType:'{1}'\nUniqueName:'{2}'\nError: {3}"' name' type' uname' ex.Message)' "Save failed"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 211.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Configuration)); " is 133.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The length of the statement  "			this.applyButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The length of the statement  "			this.cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The length of the statement  "			this.advancedButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 152.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The length of the statement  "			this.labelTip.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 145.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The length of the statement  "			this.imageListTypes.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageListTypes.ImageStream"))); " is 128.
Long Statement,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The length of the statement  "			this.table.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 141.
Long Statement,XRefresh,Model,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "            this.relationFK_Folders_IncludeFilters = new global::System.Data.DataRelation("FK_Folders_IncludeFilters"' new global::System.Data.DataColumn[] { " is 145.
Long Statement,XRefresh,Model,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "            this.relationFK_Folders_ExcludeFilters = new global::System.Data.DataRelation("FK_Folders_ExcludeFilters"' new global::System.Data.DataColumn[] { " is 145.
Long Statement,XRefresh,Model,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,GetTypedDataSetSchema,The length of the statement  "                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) { " is 131.
Long Statement,XRefresh,Model,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,Load,The length of the statement  "				ActivityLog.Current.AddEventLog(Properties.Resources.Error' "Settings file is missing (" + path + "). Reverting to default settings."); " is 135.
Long Statement,XRefresh,Model,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,Load,The length of the statement  "                    ActivityLog.Current.AddEventLog(Properties.Resources.Error' "Loaded settings table is empty (" + path + "). Revertig to default settings."); " is 140.
Long Statement,XRefresh,Model,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,Save,The length of the statement  "				MessageBox.Show(String.Format("Unable to save config file: {0}\nError: {1}"' path' ex.Message)' "Save failed"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 161.
Long Statement,XRefresh,FoldersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnName = new global::System.Data.DataColumn("Name"' typeof(string)' null' global::System.Data.MappingType.Element); " is 124.
Long Statement,XRefresh,FoldersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnPath = new global::System.Data.DataColumn("Path"' typeof(string)' null' global::System.Data.MappingType.Element); " is 124.
Long Statement,XRefresh,FoldersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnEnabled = new global::System.Data.DataColumn("Enabled"' typeof(bool)' null' global::System.Data.MappingType.Element); " is 128.
Long Statement,XRefresh,FoldersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnType = new global::System.Data.DataColumn("Type"' typeof(string)' null' global::System.Data.MappingType.Element); " is 124.
Long Statement,XRefresh,FoldersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,GetTypedTableSchema,The length of the statement  "                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) { " is 131.
Long Statement,XRefresh,IncludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnMask = new global::System.Data.DataColumn("Mask"' typeof(string)' null' global::System.Data.MappingType.Element); " is 124.
Long Statement,XRefresh,IncludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnInfo = new global::System.Data.DataColumn("Info"' typeof(string)' null' global::System.Data.MappingType.Element); " is 124.
Long Statement,XRefresh,IncludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnFolder = new global::System.Data.DataColumn("Folder"' typeof(string)' null' global::System.Data.MappingType.Element); " is 128.
Long Statement,XRefresh,IncludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,GetTypedTableSchema,The length of the statement  "                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) { " is 131.
Long Statement,XRefresh,ExcludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnMask = new global::System.Data.DataColumn("Mask"' typeof(string)' null' global::System.Data.MappingType.Element); " is 124.
Long Statement,XRefresh,ExcludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnInfo = new global::System.Data.DataColumn("Info"' typeof(string)' null' global::System.Data.MappingType.Element); " is 124.
Long Statement,XRefresh,ExcludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnFolder = new global::System.Data.DataColumn("Folder"' typeof(string)' null' global::System.Data.MappingType.Element); " is 128.
Long Statement,XRefresh,ExcludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,GetTypedTableSchema,The length of the statement  "                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) { " is 131.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnRunOnWindowsStartup = new global::System.Data.DataColumn("RunOnWindowsStartup"' typeof(bool)' null' global::System.Data.MappingType.Element); " is 152.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnShowGlobalIncludes = new global::System.Data.DataColumn("ShowGlobalIncludes"' typeof(bool)' null' global::System.Data.MappingType.Element); " is 150.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnShowGlobalExcludes = new global::System.Data.DataColumn("ShowGlobalExcludes"' typeof(bool)' null' global::System.Data.MappingType.Element); " is 150.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnPlaySoundOnRefresh = new global::System.Data.DataColumn("PlaySoundOnRefresh"' typeof(bool)' null' global::System.Data.MappingType.Element); " is 150.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnSoundFile = new global::System.Data.DataColumn("SoundFile"' typeof(string)' null' global::System.Data.MappingType.Element); " is 134.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnFlashIconOnRefresh = new global::System.Data.DataColumn("FlashIconOnRefresh"' typeof(bool)' null' global::System.Data.MappingType.Element); " is 150.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnPort = new global::System.Data.DataColumn("Port"' typeof(int)' null' global::System.Data.MappingType.Element); " is 121.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnLocalhostOnly = new global::System.Data.DataColumn("LocalhostOnly"' typeof(bool)' null' global::System.Data.MappingType.Element); " is 140.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnSlaveHost = new global::System.Data.DataColumn("SlaveHost"' typeof(string)' null' global::System.Data.MappingType.Element); " is 134.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnPortRange = new global::System.Data.DataColumn("PortRange"' typeof(int)' null' global::System.Data.MappingType.Element); " is 131.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnWaitingTimeout = new global::System.Data.DataColumn("WaitingTimeout"' typeof(int)' null' global::System.Data.MappingType.Element); " is 141.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnCheckForUpdates = new global::System.Data.DataColumn("CheckForUpdates"' typeof(bool)' null' global::System.Data.MappingType.Element); " is 144.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnSendUsage = new global::System.Data.DataColumn("SendUsage"' typeof(bool)' null' global::System.Data.MappingType.Element); " is 132.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnEnableLogging = new global::System.Data.DataColumn("EnableLogging"' typeof(bool)' null' global::System.Data.MappingType.Element); " is 140.
Long Statement,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,GetTypedTableSchema,The length of the statement  "                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) { " is 131.
Long Statement,XRefresh,GlobalIncludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnMask = new global::System.Data.DataColumn("Mask"' typeof(string)' null' global::System.Data.MappingType.Element); " is 124.
Long Statement,XRefresh,GlobalIncludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnInfo = new global::System.Data.DataColumn("Info"' typeof(string)' null' global::System.Data.MappingType.Element); " is 124.
Long Statement,XRefresh,GlobalIncludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,OnRowChanged,The length of the statement  "                    this.GlobalIncludeFiltersRowChanged(this' new GlobalIncludeFiltersRowChangeEvent(((GlobalIncludeFiltersRow)(e.Row))' e.Action)); " is 128.
Long Statement,XRefresh,GlobalIncludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,OnRowChanging,The length of the statement  "                    this.GlobalIncludeFiltersRowChanging(this' new GlobalIncludeFiltersRowChangeEvent(((GlobalIncludeFiltersRow)(e.Row))' e.Action)); " is 129.
Long Statement,XRefresh,GlobalIncludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,OnRowDeleted,The length of the statement  "                    this.GlobalIncludeFiltersRowDeleted(this' new GlobalIncludeFiltersRowChangeEvent(((GlobalIncludeFiltersRow)(e.Row))' e.Action)); " is 128.
Long Statement,XRefresh,GlobalIncludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,OnRowDeleting,The length of the statement  "                    this.GlobalIncludeFiltersRowDeleting(this' new GlobalIncludeFiltersRowChangeEvent(((GlobalIncludeFiltersRow)(e.Row))' e.Action)); " is 129.
Long Statement,XRefresh,GlobalIncludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,GetTypedTableSchema,The length of the statement  "                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) { " is 131.
Long Statement,XRefresh,GlobalExcludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnMask = new global::System.Data.DataColumn("Mask"' typeof(string)' null' global::System.Data.MappingType.Element); " is 124.
Long Statement,XRefresh,GlobalExcludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The length of the statement  "                this.columnInfo = new global::System.Data.DataColumn("Info"' typeof(string)' null' global::System.Data.MappingType.Element); " is 124.
Long Statement,XRefresh,GlobalExcludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,OnRowChanged,The length of the statement  "                    this.GlobalExcludeFiltersRowChanged(this' new GlobalExcludeFiltersRowChangeEvent(((GlobalExcludeFiltersRow)(e.Row))' e.Action)); " is 128.
Long Statement,XRefresh,GlobalExcludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,OnRowChanging,The length of the statement  "                    this.GlobalExcludeFiltersRowChanging(this' new GlobalExcludeFiltersRowChangeEvent(((GlobalExcludeFiltersRow)(e.Row))' e.Action)); " is 129.
Long Statement,XRefresh,GlobalExcludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,OnRowDeleted,The length of the statement  "                    this.GlobalExcludeFiltersRowDeleted(this' new GlobalExcludeFiltersRowChangeEvent(((GlobalExcludeFiltersRow)(e.Row))' e.Action)); " is 128.
Long Statement,XRefresh,GlobalExcludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,OnRowDeleting,The length of the statement  "                    this.GlobalExcludeFiltersRowDeleting(this' new GlobalExcludeFiltersRowChangeEvent(((GlobalExcludeFiltersRow)(e.Row))' e.Action)); " is 129.
Long Statement,XRefresh,GlobalExcludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,GetTypedTableSchema,The length of the statement  "                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) { " is 131.
Long Statement,XRefresh,Program,C:\repos\binaryage_xrefresh\src\winmonitor\Program.cs,Main,The length of the statement  "				MessageBox.Show("Another instance of XRefresh is already running. See icons in tray-bar."' "Multiple instances"' MessageBoxButtons.OK' MessageBoxIcon.Stop); " is 156.
Long Statement,XRefresh,Program,C:\repos\binaryage_xrefresh\src\winmonitor\Program.cs,SetupExceptionsHandler,The length of the statement  "					string body = "Enter your description here and send this mail to antonin@hildebrand.cz.\nThank you very much.\n\n---\nHere is stack trace:\n" + ar.UnhandledException.StackTrace; " is 177.
Long Statement,XRefresh,Program,C:\repos\binaryage_xrefresh\src\winmonitor\Program.cs,SetupExceptionsHandler,The length of the statement  "					string message = string.Format("mailto:{0}?subject={1}&body={2}"' email' HttpUtility.UrlPathEncode(subject)' HttpUtility.UrlPathEncode(body)); " is 142.
Long Statement,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ScannerProgress)); " is 135.
Long Statement,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The length of the statement  "            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 16F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 153.
Long Statement,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The length of the statement  "            this.labelFolder.Font = new System.Drawing.Font("Microsoft Sans Serif"' 10F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238))); " is 158.
Long Statement,XRefresh,ClientInfo,C:\repos\binaryage_xrefresh\src\winmonitor\Server.cs,OnDataReceived,The length of the statement  "                    messages[0] = this.reminder + messages[0]; // TODO: this is wrong' reminder should be extracted before decoding (bug case: packet fragmentation in the middle of UTF8 multichar code sequence) " is 190.
Long Statement,XRefresh,ClientInfo,C:\repos\binaryage_xrefresh\src\winmonitor\Server.cs,ProcessMessage,The length of the statement  "						ActivityLog.Current.AddEventLog(Context.GetClientTypeIcon(type)' log' Utils.LogLine(Properties.Resources.Information' agent));" is 126.
Long Statement,XRefresh,ClientInfo,C:\repos\binaryage_xrefresh\src\winmonitor\Server.cs,ProcessMessage,The length of the statement  "							ActivityLog.Current.AddEventLog(Context.GetClientTypeIcon(type)' log' Utils.LogLine(Properties.Resources.Information' url));" is 124.
Long Statement,XRefresh,ShellIcon,C:\repos\binaryage_xrefresh\src\winmonitor\ShellIcon.cs,GetTypeInfo,The length of the statement  "			Win32.SHGetFileInfo(ext' Win32.FILE_ATTRIBUTE_NORMAL' ref shinfo' (uint)Marshal.SizeOf(shinfo)' Win32.SHGFI_TYPENAME | Win32.SHGFI_USEFILEATTRIBUTES); " is 150.
Long Statement,XRefresh,ShellIcon,C:\repos\binaryage_xrefresh\src\winmonitor\ShellIcon.cs,GetSmallTypeIcon,The length of the statement  "			Win32.SHGetFileInfo(ext' Win32.FILE_ATTRIBUTE_NORMAL' ref shinfo' (uint)Marshal.SizeOf(shinfo)' Win32.SHGFI_ICON | Win32.SHGFI_SMALLICON | Win32.SHGFI_USEFILEATTRIBUTES); " is 170.
Long Statement,XRefresh,ProjectTypeListBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnDrawItem,The length of the statement  "				DrawItemEventArgs f = new DrawItemEventArgs(e.Graphics' e.Font' e.Bounds' e.Index' DrawItemState.None' e.ForeColor' Color.Yellow); " is 130.
Long Statement,XRefresh,ProjectTypeListBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnDrawItem,The length of the statement  "				e.Graphics.DrawString(this.Text' e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left + imgs.ImageSize.Width' e.Bounds.Top + 1); " is 126.
Long Statement,XRefresh,ProjectTypeListBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnDrawItem,The length of the statement  "						e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Gray))' new Point(r.Left' r.Bottom - 1)' new Point(r.Right' r.Bottom - 1)); " is 124.
Long Statement,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetCellValue,The length of the statement  "				if (DialogResult.OK!=MessageBox.Show("Do you really want switch project type to " + TextBox.Text + " ?\nYour previous custom settings will be lost."' "Custom settings warning"' MessageBoxButtons.OKCancel' MessageBoxIcon.Warning)) " is 229.
Long Statement,XRefresh,ProjectTypeCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnMouseDown,The length of the statement  "						throw new InvalidOperationException("Cannot edit Cell as DropDownCellRenderer requires a DropDownColumn that uses a DropDownCellEditor"); " is 137.
Long Statement,XRefresh,GDITextCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,GetCellHeight,The length of the statement  "				SizeF size = TextRenderer.MeasureText(graphics' cell.Text' this.Font' new Size(this.ClientRectangle.Width' this.ClientRectangle.Height)' TextFormatFlags.Left); " is 159.
Long Statement,XRefresh,FolderCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnMouseDown,The length of the statement  "						//    throw new InvalidOperationException("Cannot edit Cell as DropDownCellRenderer requires a DropDownColumn that uses a DropDownCellEditor"); " is 143.
Long Statement,XRefresh,FolderCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnMouseMove,The length of the statement  "							if (e.Button == MouseButtons.Left && e.Row == e.Table.LastMouseDownCell.Row && e.Column == e.Table.LastMouseDownCell.Column) " is 124.
Long Statement,XRefresh,FolderCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaintBackground,The length of the statement  "				Font font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 134.
Long Statement,XRefresh,ProjectCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnMouseDown,The length of the statement  "				if (this.CalcCheckRect(e.Table.TableModel.Rows[e.Row].Alignment' e.Table.ColumnModel.Columns[e.Column].Alignment).Contains(e.X' e.Y)) " is 133.
Long Statement,XRefresh,ProjectCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnMouseMove,The length of the statement  "				if (this.CalcCheckRect(e.Table.TableModel.Rows[e.Row].Alignment' e.Table.ColumnModel.Columns[e.Column].Alignment).Contains(e.X' e.Y)) " is 133.
Long Statement,XRefresh,ProjectCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnMouseMove,The length of the statement  "							if (e.Button == MouseButtons.Left && e.Row == e.Table.LastMouseDownCell.Row && e.Column == e.Table.LastMouseDownCell.Column) " is 124.
Long Statement,XRefresh,ProjectCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnMouseMove,The length of the statement  "							if (e.Button == MouseButtons.Left && e.Row == e.Table.LastMouseDownCell.Row && e.Column == e.Table.LastMouseDownCell.Column) " is 124.
Long Statement,XRefresh,ProjectCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnMouseMove,The length of the statement  "							if (e.Button == MouseButtons.Left && e.Row == e.Table.LastMouseDownCell.Row && e.Column == e.Table.LastMouseDownCell.Column) " is 124.
Long Statement,XRefresh,MaskCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnMouseDown,The length of the statement  "				if (this.CalcCheckRect(e.Table.TableModel.Rows[e.Row].Alignment' e.Table.ColumnModel.Columns[e.Column].Alignment).Contains(e.X' e.Y)) " is 133.
Long Statement,XRefresh,MaskCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnMouseMove,The length of the statement  "				if (this.CalcCheckRect(e.Table.TableModel.Rows[e.Row].Alignment' e.Table.ColumnModel.Columns[e.Column].Alignment).Contains(e.X' e.Y)) " is 133.
Long Statement,XRefresh,MaskCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnMouseMove,The length of the statement  "							if (e.Button == MouseButtons.Left && e.Row == e.Table.LastMouseDownCell.Row && e.Column == e.Table.LastMouseDownCell.Column) " is 124.
Long Statement,XRefresh,MaskCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnMouseMove,The length of the statement  "							if (e.Button == MouseButtons.Left && e.Row == e.Table.LastMouseDownCell.Row && e.Column == e.Table.LastMouseDownCell.Column) " is 124.
Long Statement,XRefresh,MaskCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnMouseMove,The length of the statement  "							if (e.Button == MouseButtons.Left && e.Row == e.Table.LastMouseDownCell.Row && e.Column == e.Table.LastMouseDownCell.Column) " is 124.
Long Statement,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The length of the statement  "			this.cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The length of the statement  "			this.applyButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The length of the statement  "			this.buttonReset.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 149.
Long Statement,CustomUIControls,ImageListPanel,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageListPanel.cs,OnPaintBackground,The length of the statement  "				offscreenGrfx.FillRectangle(new SolidBrush(BackgroundOverColor)' _nCoordX*_nItemWidth + 1' _nCoordY*_nItemHeight + 1' _nItemWidth-1' _nItemHeight-1); " is 149.
Long Statement,CustomUIControls,ImageListPanel,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageListPanel.cs,OnPaintBackground,The length of the statement  "				offscreenGrfx.DrawRectangle(new Pen(BorderColor)' _nCoordX*_nItemWidth' _nCoordY*_nItemHeight' _nItemWidth' _nItemHeight); " is 122.
Long Statement,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CustomExceptionDialog)); " is 141.
Long Statement,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The length of the statement  "            this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 20F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 151.
Long Statement,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The length of the statement  "            this.labelTitle.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 143.
Long Statement,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The length of the statement  "            this.labelCaption.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 145.
Long Statement,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The length of the statement  "            this.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 149.
Long Statement,XPTable.Editors,CellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\CellEditor.cs,StopEditing,The length of the statement  "			CellEditEventArgs e = new CellEditEventArgs(this.cell' this' this.table' this.cellPos.Row' this.cellPos.Column' this.cellRect); " is 127.
Long Statement,XPTable.Editors,CellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\CellEditor.cs,CancelEditing,The length of the statement  "			CellEditEventArgs e = new CellEditEventArgs(this.cell' this' this.table' this.cellPos.Row' this.cellPos.Column' this.cellRect); " is 127.
Long Statement,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnListDrawItem,The length of the statement  "				die.Graphics.DrawRectangle(SystemPens.WindowText' new Rectangle(die.Bounds.X + 2' die.Bounds.Y + 2' 21' (die.Bounds.Height - 4) - 1)); " is 134.
Long Statement,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnTabControlResize,The length of the statement  "				//this.lbSystem.SetBounds(border' clientRect.Y + (2 * border)' clientRect.Width - border' (this.pal.Size.Height - tabRect.Height) + (2 * border)); " is 146.
Long Statement,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnPaint,The length of the statement  "								ControlPaint.DrawFocusRectangle(e.Graphics' new Rectangle(cellRect.X-3' cellRect.Y-3' cellRect.Width+7' cellRect.Height+7)/*' SystemColors.ControlText' SystemColors.Control*/); " is 176.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_lbl_SelectColor.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 171.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_Hue.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 163.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_Sat.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 163.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_Black.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 165.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_Red.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 163.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_Green.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 165.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_Blue.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 164.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_Lum.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 163.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_a.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 161.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_b.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 161.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_Cyan.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 164.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_Magenta.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 167.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_Yellow.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 166.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_K.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 161.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_txt_Hex.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 163.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_lbl_Hue_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 11.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 174.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_lbl_Saturation_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 180.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_lbl_Black_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 175.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_lbl_Cyan_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 174.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_lbl_Magenta_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 177.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_lbl_Yellow_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 176.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.m_lbl_Key_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 173.
Long Statement,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The length of the statement  "						this.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 156.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The length of the statement  "									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);  " is 185.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The length of the statement  "									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);  " is 186.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The length of the statement  "									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);  " is 186.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The length of the statement  "									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);  " is 189.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The length of the statement  "									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);  " is 191.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The length of the statement  "									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);  " is 191.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The length of the statement  "							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);  " is 166.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The length of the statement  "							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);  " is 168.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The length of the statement  "							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);  " is 168.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The length of the statement  "							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);  " is 162.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The length of the statement  "							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);  " is 162.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The length of the statement  "							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);  " is 164.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The length of the statement  "								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4)))); " is 146.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The length of the statement  "								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4)))); " is 146.
Long Statement,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The length of the statement  "								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B)); " is 146.
Long Statement,XPTable.Editors,ThemedTabPage,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,PaintChildrenBackground,The length of the statement  "							ThemeManager.DrawTabPageBody(g' new Rectangle(-ofx' -ofy' this.Width' this.Height)' new Rectangle(child.Left' child.Top' child.Width' child.Height)); " is 149.
Long Statement,XPTable.Editors,DropDownContainer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\DropDownContainer.cs,FlushPaintMessages,The length of the statement  "			while (NativeMethods.PeekMessage(ref msg' IntPtr.Zero' (int) WindowMessage.WM_PAINT' (int) WindowMessage.WM_PAINT' 1 /*PM_REMOVE*/)) " is 132.
Long Statement,XPTable.Editors,NumberCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\NumberCellEditor.cs,PrepareForEditing,The length of the statement  "				throw new InvalidOperationException("Cannot edit Cell as NumberCellEditor can only be used with a NumberColumn that uses a NumberCellRenderer"); " is 144.
Long Statement,XPTable.Editors,NumberCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\NumberCellEditor.cs,SetEditLocation,The length of the statement  "			if (((NumberColumn) this.EditingTable.ColumnModel.Columns[this.EditingCellPos.Column]).UpDownAlign == LeftRightAlignment.Left) " is 126.
Long Statement,XPTable.Models,CellPadding,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,GetHashCode,The length of the statement  "			return (((this.Left ^ ((this.Top << 13) | (this.Top >> 0x13))) ^ ((this.Right << 0x1a) | (this.Right >> 6))) ^ ((this.Bottom << 7) | (this.Bottom >> 0x19))); " is 157.
Long Statement,XPTable.Models,DateTimeColumn,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\DateTimeColumn.cs,Init,The length of the statement  "			this.customFormat = DateTimeFormatInfo.CurrentInfo.ShortDatePattern + " " + DateTimeFormatInfo.CurrentInfo.LongTimePattern; " is 123.
Long Statement,XPTable.Models,DateTimeColumn,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\DateTimeColumn.cs,ShouldSerializeCustomDateTimeFormat,The length of the statement  "			return !this.customFormat.Equals(DateTimeFormatInfo.CurrentInfo.ShortDatePattern + " " + DateTimeFormatInfo.CurrentInfo.LongTimePattern); " is 137.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextVisibleEnabledCell,The length of the statement  "						if (this.IsValidCell(i' j) && this.IsValidColumn(j) && this.TableModel[i' j].Enabled && this.ColumnModel.Columns[j].Enabled && this.ColumnModel.Columns[j].Visible) " is 163.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextVisibleEnabledCell,The length of the statement  "						if (this.IsValidCell(i' j) && this.IsValidColumn(j) && this.TableModel[i' j].Enabled && this.ColumnModel.Columns[j].Enabled && this.ColumnModel.Columns[j].Visible) " is 163.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextEditableCell,The length of the statement  "						if (this.IsValidCell(i' j) && this.IsValidColumn(j) && this.TableModel[i' j].Editable && this.ColumnModel.Columns[j].Editable) " is 126.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextEditableCell,The length of the statement  "						if (this.IsValidCell(i' j) && this.IsValidColumn(j) && this.TableModel[i' j].Editable && this.ColumnModel.Columns[j].Editable) " is 126.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,UpdateScrollBars,The length of the statement  "			bool vscroll = this.TotalRowAndHeaderHeight+RowHeight > (this.Height - (this.BorderWidth * 2) - (hscroll ? SystemInformation.HorizontalScrollBarHeight : 0)); " is 157.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,UpdateScrollBars,The length of the statement  "				hscroll = (this.ColumnModel.VisibleColumnsWidth > this.Width - (this.BorderWidth * 2) - SystemInformation.VerticalScrollBarWidth); " is 130.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,Sort,The length of the statement  "				comparer = (ComparerBase) Activator.CreateInstance(column.DefaultComparerType' new object[] {this.TableModel' index' sortOrder}); " is 129.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,GetSecondaryComparers,The length of the statement  "                    comparer = (ComparerBase)Activator.CreateInstance(column.Comparer' new object[] { this.TableModel' sort.SortColumnIndex' sort.SortOrder }); " is 139.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,GetSecondaryComparers,The length of the statement  "                    comparer = (ComparerBase)Activator.CreateInstance(column.DefaultComparerType' new object[] { this.TableModel' sort.SortColumnIndex' sort.SortOrder }); " is 150.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,RaiseCellGotFocus,The length of the statement  "				CellFocusEventArgs cfea = new CellFocusEventArgs(cell' this' cellPos.Row' cellPos.Column' this.CellRect(cellPos.Row' cellPos.Column)); " is 134.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,RaiseCellLostFocus,The length of the statement  "				CellFocusEventArgs cfea = new CellFocusEventArgs(cell' this' cellPos.Row' cellPos.Column' this.CellRect(cellPos.Row' cellPos.Column)); " is 134.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,RaiseCellMouseEnter,The length of the statement  "				CellMouseEventArgs mcea = new CellMouseEventArgs(cell' this' cellPos.Row' cellPos.Column' this.CellRect(cellPos.Row' cellPos.Column)); " is 134.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,RaiseCellMouseLeave,The length of the statement  "				CellMouseEventArgs mcea = new CellMouseEventArgs(cell' this' cellPos.Row' cellPos.Column' this.CellRect(cellPos.Row' cellPos.Column)); " is 134.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,RaiseCellMouseUp,The length of the statement  "				CellMouseEventArgs mcea = new CellMouseEventArgs(cell' this' cellPos.Row' cellPos.Column' this.CellRect(cellPos.Row' cellPos.Column)' e); " is 137.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,RaiseCellMouseDown,The length of the statement  "				CellMouseEventArgs mcea = new CellMouseEventArgs(cell' this' cellPos.Row' cellPos.Column' this.CellRect(cellPos.Row' cellPos.Column)' e); " is 137.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,RaiseCellMouseMove,The length of the statement  "				CellMouseEventArgs mcea = new CellMouseEventArgs(cell' this' cellPos.Row' cellPos.Column' this.CellRect(cellPos.Row' cellPos.Column)' e); " is 137.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,RaiseHeaderMouseEnter,The length of the statement  "				HeaderMouseEventArgs mhea = new HeaderMouseEventArgs(column' this' index' this.DisplayRectToClient(this.ColumnModel.ColumnHeaderRect(index))); " is 142.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,RaiseHeaderMouseLeave,The length of the statement  "				HeaderMouseEventArgs mhea = new HeaderMouseEventArgs(column' this' index' this.DisplayRectToClient(this.ColumnModel.ColumnHeaderRect(index))); " is 142.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,RaiseHeaderMouseUp,The length of the statement  "				HeaderMouseEventArgs mhea = new HeaderMouseEventArgs(column' this' index' this.DisplayRectToClient(this.ColumnModel.ColumnHeaderRect(index))' e); " is 145.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,RaiseHeaderMouseDown,The length of the statement  "				HeaderMouseEventArgs mhea = new HeaderMouseEventArgs(column' this' index' this.DisplayRectToClient(this.ColumnModel.ColumnHeaderRect(index))' e); " is 145.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,RaiseHeaderMouseMove,The length of the statement  "				HeaderMouseEventArgs mhea = new HeaderMouseEventArgs(column' this' index' this.DisplayRectToClient(this.ColumnModel.ColumnHeaderRect(index))' e); " is 145.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnKeyDown,The length of the statement  "							nextCell = this.FindNextVisibleEnabledCell(this.FocusedCell' this.FocusedCell.Row < this.RowCount - 1' true' false' false); " is 123.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnKeyDown,The length of the statement  "								if (this.FocusedCell.Row > this.vScrollBar.Value && this.TableModel[this.vScrollBar.Value' this.FocusedCell.Column].Enabled) " is 124.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnKeyDown,The length of the statement  "									nextCell = this.FindNextVisibleEnabledCell(new CellPos(this.vScrollBar.Value' this.FocusedCell.Column)' true' true' true' false); " is 129.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnKeyDown,The length of the statement  "									nextCell = this.FindNextVisibleEnabledCell(new CellPos(Math.Max(-1' this.vScrollBar.Value - (this.vScrollBar.LargeChange - 1))' this.FocusedCell.Column)' true' true' true' false); " is 179.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnKeyDown,The length of the statement  "								nextCell = this.FindNextVisibleEnabledCell(new CellPos(this.RowCount - 1' this.FocusedCell.Column)' true' false' true' false); " is 126.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnKeyDown,The length of the statement  "										nextCell = this.FindNextVisibleEnabledCell(new CellPos(Math.Min(this.RowCount - 1' this.FocusedCell.Row - 1 + this.vScrollBar.LargeChange)' this.FocusedCell.Column)' true' false' true' false); " is 192.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnKeyDown,The length of the statement  "										nextCell = this.FindNextVisibleEnabledCell(new CellPos(this.vScrollBar.Value + this.vScrollBar.LargeChange - 1' this.FocusedCell.Column)' true' false' true' false); " is 164.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnKeyDown,The length of the statement  "									nextCell = this.FindNextVisibleEnabledCell(new CellPos(Math.Min(this.RowCount - 1' this.FocusedCell.Row + this.vScrollBar.LargeChange)' this.FocusedCell.Column)' true' false' true' false); " is 188.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnKeyDown,The length of the statement  "								nextCell = this.FindNextVisibleEnabledCell(new CellPos(this.RowCount-1' this.TableModel.Rows[this.RowCount-1].Cells.Count)' true' false' true' true); " is 149.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnMouseMove,The length of the statement  "				else if (column != -1 && this.pressedColumn == column && this.ColumnModel.Columns[this.pressedColumn].ColumnState != ColumnState.Pressed) " is 137.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnMouseHover,The length of the statement  "				this.OnCellMouseHover(new CellMouseEventArgs(this.TableModel[this.LastMouseCell]' this' this.LastMouseCell' this.CellRect(this.LastMouseCell))); " is 144.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnMouseHover,The length of the statement  "				this.OnHeaderMouseHover(new HeaderMouseEventArgs(this.ColumnModel.Columns[this.hotColumn]' this' this.hotColumn' this.DisplayRectToClient(this.ColumnModel.ColumnHeaderRect(this.hotColumn)))); " is 191.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnClick,The length of the statement  "				this.OnHeaderClick(new HeaderMouseEventArgs(this.ColumnModel.Columns[this.hotColumn]' this' this.hotColumn' this.DisplayRectToClient(this.ColumnModel.ColumnHeaderRect(this.hotColumn)))); " is 186.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnDoubleClick,The length of the statement  "				this.OnHeaderDoubleClick(new HeaderMouseEventArgs(this.ColumnModel.Columns[this.hotColumn]' this' this.hotColumn' this.DisplayRectToClient(this.ColumnModel.ColumnHeaderRect(this.hotColumn)))); " is 192.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnPaintBorder,The length of the statement  "					clipRect = new Rectangle(0' this.Height-SystemInformation.Border3DSize.Height' this.Width' SystemInformation.Border3DSize.Height); " is 130.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnPaintCell,The length of the statement  "				bool editable = this.TableModel[row' column].Editable && this.TableModel.Rows[row].Editable && this.ColumnModel.Columns[column].Editable; " is 137.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnPaintCell,The length of the statement  "				bool enabled = this.TableModel[row' column].Enabled && this.TableModel.Rows[row].Enabled && this.ColumnModel.Columns[column].Enabled; " is 133.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnPaintHeader,The length of the statement  "						this.headerRenderer.Bounds = new Rectangle(xPos' this.BorderWidth' this.ColumnModel.Columns[i].Width' this.HeaderHeight); " is 121.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnPaintHeader,The length of the statement  "				this.headerRenderer.Bounds = new Rectangle(xPos' this.BorderWidth' this.ClientRectangle.Width - xPos + 2' this.HeaderHeight); " is 125.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnPaintRows,The length of the statement  "                            renderer.Bounds = new Rectangle(this.GetColumnLeft(column)' rowRect.Y' this.GetColumnWidth(column' varCell)' rowRect.Height); " is 125.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnSelectionChanged,The length of the statement  "					Rectangle invalidateRect = new Rectangle(this.DisplayRectToClient(e.OldSelectionBounds.Location)' e.OldSelectionBounds.Size); " is 125.
Long Statement,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnSelectionChanged,The length of the statement  "					Rectangle invalidateRect = new Rectangle(this.DisplayRectToClient(e.NewSelectionBounds.Location)' e.NewSelectionBounds.Size); " is 125.
Long Statement,XPTable.Renderers,CellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CellRenderer.cs,OnMouseDown,The length of the statement  "				if (!(e.Table.IsEditing && e.Table.EditingCell == e.CellPos && e.Table.EditingCellEditor is IEditorUsesRendererButtons)) " is 120.
Long Statement,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,OnMouseUp,The length of the statement  "				if (this.CalcCheckRect(e.Table.TableModel.Rows[e.Row].Alignment' e.Table.ColumnModel.Columns[e.Column].Alignment).Contains(e.X' e.Y)) " is 133.
Long Statement,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,OnMouseUp,The length of the statement  "					if (e.Button == MouseButtons.Left && e.Table.LastMouseDownCell.Row == e.Row && e.Table.LastMouseDownCell.Column == e.Column) " is 124.
Long Statement,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,OnMouseDown,The length of the statement  "				if (this.CalcCheckRect(e.Table.TableModel.Rows[e.Row].Alignment' e.Table.ColumnModel.Columns[e.Column].Alignment).Contains(e.X' e.Y)) " is 133.
Long Statement,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,OnMouseMove,The length of the statement  "				if (this.CalcCheckRect(e.Table.TableModel.Rows[e.Row].Alignment' e.Table.ColumnModel.Columns[e.Column].Alignment).Contains(e.X' e.Y)) " is 133.
Long Statement,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,OnMouseMove,The length of the statement  "							if (e.Button == MouseButtons.Left && e.Row == e.Table.LastMouseDownCell.Row && e.Column == e.Table.LastMouseDownCell.Column) " is 124.
Long Statement,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,OnMouseMove,The length of the statement  "							if (e.Button == MouseButtons.Left && e.Row == e.Table.LastMouseDownCell.Row && e.Column == e.Table.LastMouseDownCell.Column) " is 124.
Long Statement,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,OnMouseMove,The length of the statement  "							if (e.Button == MouseButtons.Left && e.Row == e.Table.LastMouseDownCell.Row && e.Column == e.Table.LastMouseDownCell.Column) " is 124.
Long Statement,XPTable.Renderers,ColorCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ColorCellRenderer.cs,OnPaint,The length of the statement  "				Rectangle colorRect = this.CalcColorRect(e.Table.TableModel.Rows[e.Row].Alignment' e.Table.ColumnModel.Columns[e.Column].Alignment); " is 132.
Long Statement,XPTable.Renderers,DropDownCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\DropDownCellRenderer.cs,OnMouseDown,The length of the statement  "							throw new InvalidOperationException("Cannot edit Cell as DropDownCellRenderer requires a DropDownColumn that uses a DropDownCellEditor"); " is 137.
Long Statement,XPTable.Renderers,DropDownCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\DropDownCellRenderer.cs,OnMouseMove,The length of the statement  "							if (e.Button == MouseButtons.Left && e.Row == e.Table.LastMouseDownCell.Row && e.Column == e.Table.LastMouseDownCell.Column) " is 124.
Long Statement,XPTable.Renderers,GradientHeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\GradientHeaderRenderer.cs,OnPaintBackground,The length of the statement  "				using (LinearGradientBrush brush = new LinearGradientBrush(e.HeaderRect' this.StartColor' this.EndColor' LinearGradientMode.Vertical)) " is 134.
Long Statement,XPTable.Renderers,NumberCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\NumberCellRenderer.cs,OnMouseDown,The length of the statement  "							throw new InvalidOperationException("Cannot edit Cell as NumberCellRenderer requires a NumberColumn that uses a NumberCellEditor"); " is 131.
Long Statement,XPTable.Renderers,NumberCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\NumberCellRenderer.cs,OnMouseMove,The length of the statement  "							if (e.Button == MouseButtons.Left && e.Row == e.Table.LastMouseDownCell.Row && e.Column == e.Table.LastMouseDownCell.Column) " is 124.
Long Statement,XPTable.Renderers,NumberCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\NumberCellRenderer.cs,OnMouseMove,The length of the statement  "							if (e.Button == MouseButtons.Left && e.Row == e.Table.LastMouseDownCell.Row && e.Column == e.Table.LastMouseDownCell.Column) " is 124.
Long Statement,XPTable.Renderers,NumberCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\NumberCellRenderer.cs,OnPaintBackground,The length of the statement  "				ThemeManager.DrawUpDownButtons(e.Graphics' this.GetUpButtonBounds()' upButtonState' this.GetDownButtonBounds()' downButtonState); " is 129.
Long Statement,XPTable.Renderers,NumberCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\NumberCellRenderer.cs,OnPaint,The length of the statement  "			if (e.Cell.Data != null && (e.Cell.Data is int || e.Cell.Data is double || e.Cell.Data is float || e.Cell.Data is decimal)) " is 123.
Long Statement,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawButton,The length of the statement  "				ThemeManager.DrawThemeBackground(g' ThemeClasses.Button' (int) ButtonParts.PushButton' (int) state' buttonRect' clipRect); " is 122.
Long Statement,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawColumnHeader,The length of the statement  "				ThemeManager.DrawThemeBackground(g' ThemeClasses.ColumnHeader' (int) ColumnHeaderParts.HeaderItem' (int) state' headerRect' clipRect); " is 134.
Long Statement,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawColumnHeader,The length of the statement  "					ControlPaint.DrawBorder3D(g' headerRect.X' headerRect.Y' headerRect.Width' headerRect.Height' Border3DStyle.RaisedInner); " is 121.
Long Statement,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawComboBoxButton,The length of the statement  "				ThemeManager.DrawThemeBackground(g' ThemeClasses.ComboBox' (int) ComboBoxParts.DropDownButton' (int) state' buttonRect' clipRect); " is 130.
Long Statement,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawRadioButton,The length of the statement  "				ThemeManager.DrawThemeBackground(g' ThemeClasses.Button' (int) ButtonParts.RadioButton' (int) state' checkRect' clipRect); " is 122.
Long Statement,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawTextBox,The length of the statement  "				ThemeManager.DrawThemeBackground(g' ThemeClasses.TextBox' (int) TextBoxParts.EditText' (int) state' textRect' clipRect); " is 120.
Long Statement,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawUpDownButtons,The length of the statement  "			ThemeManager.DrawUpDownButtons(g' upButtonRect' upButtonRect' upButtonState' downButtonRect' downButtonRect' downButtonState); " is 126.
Long Statement,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawUpDownButtons,The length of the statement  "					ThemeManager.DrawThemeBackground(g' ThemeClasses.UpDown' (int) UpDownParts.Up' (int) upButtonState' upButtonRect' upButtonClipRect); " is 132.
Long Statement,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawUpDownButtons,The length of the statement  "					ControlPaint.DrawScrollButton(g' upButtonRect' ScrollButton.Up' ThemeManager.ConvertUpDownStateToButtonState(upButtonState)); " is 125.
Long Statement,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawUpDownButtons,The length of the statement  "			if (downButtonRect.Width > 0 && downButtonRect.Height > 0 && downButtonClipRect.Width > 0 && downButtonClipRect.Height > 0) " is 123.
Long Statement,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawUpDownButtons,The length of the statement  "					ThemeManager.DrawThemeBackground(g' ThemeClasses.UpDown' (int) UpDownParts.Down' (int) downButtonState' downButtonRect' downButtonClipRect); " is 140.
Long Statement,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawUpDownButtons,The length of the statement  "					ControlPaint.DrawScrollButton(g' downButtonRect' ScrollButton.Down' ThemeManager.ConvertUpDownStateToButtonState(downButtonState)); " is 131.
Complex Conditional,FlexFieldControlLib,FieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FieldControl.cs,IsEditKey,The conditional expression  "e.Modifiers == Keys.Control &&                    ( e.KeyCode == Keys.C ||                      e.KeyCode == Keys.V ||                      e.KeyCode == Keys.X )"  is complex.
Complex Conditional,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,OnFocusCeded,The conditional expression  "( e.Direction == Direction.Reverse && e.FieldIndex == 0 ) ||                ( e.Direction == Direction.Forward && e.FieldIndex == ( FieldCount - 1 ) )"  is complex.
Complex Conditional,XPTable.Editors,CellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\CellEditor.cs,ProcessMouseMessage,The conditional expression  "msg == WindowMessage.WM_LBUTTONDOWN || msg == WindowMessage.WM_RBUTTONDOWN ||   				msg == WindowMessage.WM_MBUTTONDOWN || msg == WindowMessage.WM_XBUTTONDOWN ||   				msg == WindowMessage.WM_NCLBUTTONDOWN || msg == WindowMessage.WM_NCRBUTTONDOWN ||   				msg == WindowMessage.WM_NCMBUTTONDOWN || msg == WindowMessage.WM_NCXBUTTONDOWN"  is complex.
Complex Conditional,XPTable.Editors,ThemedTabPage,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnPaintBackground,The conditional expression  "(ox != 0) || (oy != 0) || (dx != this.Width) || (dy != this.Height)"  is complex.
Complex Conditional,XPTable.Editors,DropDownCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\DropDownCellEditor.cs,ProcessMouseMessage,The conditional expression  "msg == WindowMessage.WM_LBUTTONDOWN || msg == WindowMessage.WM_RBUTTONDOWN ||   					msg == WindowMessage.WM_MBUTTONDOWN || msg == WindowMessage.WM_XBUTTONDOWN ||   					msg == WindowMessage.WM_NCLBUTTONDOWN || msg == WindowMessage.WM_NCRBUTTONDOWN ||   					msg == WindowMessage.WM_NCMBUTTONDOWN || msg == WindowMessage.WM_NCXBUTTONDOWN"  is complex.
Complex Conditional,XPTable.Editors,KeyMessageFilter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\KeyMessageFilter.cs,PreFilterMessage,The conditional expression  "m.Msg != (int) WindowMessage.WM_KEYDOWN && m.Msg != (int) WindowMessage.WM_SYSKEYDOWN &&   				m.Msg != (int) WindowMessage.WM_KEYUP && m.Msg != (int) WindowMessage.WM_SYSKEYUP"  is complex.
Complex Conditional,XPTable.Editors,MouseMessageFilter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\MouseMessageFilter.cs,PreFilterMessage,The conditional expression  "(m.Msg >= (int) WindowMessage.WM_MOUSEMOVE && m.Msg <= (int) WindowMessage.WM_XBUTTONDBLCLK) ||   				(m.Msg >= (int) WindowMessage.WM_NCMOUSEMOVE && m.Msg <= (int) WindowMessage.WM_NCXBUTTONUP)"  is complex.
Complex Conditional,XPTable.Editors,NumberCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\NumberCellEditor.cs,OnTextBoxKeyPress,The conditional expression  "(!char.IsDigit(e.KeyChar) && !character.Equals(decimalSeparator) && !character.Equals(groupSeparator)) &&   				!character.Equals(negativeSign) && (e.KeyChar != tab)"  is complex.
Complex Conditional,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,CellAt,The conditional expression  "row == -1 || row >= this.TableModel.Rows.Count || column == -1 || column >= this.TableModel.Rows[row].Cells.Count"  is complex.
Complex Conditional,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,CellRect,The conditional expression  "row == -1 || row >= this.TableModel.Rows.Count || column == -1 || column >= this.TableModel.Rows[row].Cells.Count"  is complex.
Complex Conditional,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextVisibleEnabledCell,The conditional expression  "this.IsValidCell(i' j) && this.IsValidColumn(j) && this.TableModel[i' j].Enabled && this.ColumnModel.Columns[j].Enabled && this.ColumnModel.Columns[j].Visible"  is complex.
Complex Conditional,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextVisibleEnabledCell,The conditional expression  "this.IsValidCell(i' j) && this.IsValidColumn(j) && this.TableModel[i' j].Enabled && this.ColumnModel.Columns[j].Enabled && this.ColumnModel.Columns[j].Visible"  is complex.
Complex Conditional,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextEditableCell,The conditional expression  "this.IsValidCell(i' j) && this.IsValidColumn(j) && this.TableModel[i' j].Editable && this.ColumnModel.Columns[j].Editable"  is complex.
Complex Conditional,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextEditableCell,The conditional expression  "this.IsValidCell(i' j) && this.IsValidColumn(j) && this.TableModel[i' j].Editable && this.ColumnModel.Columns[j].Editable"  is complex.
Complex Conditional,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,RowRect,The conditional expression  "this.TableModel == null || this.ColumnModel == null || row == -1 || row > this.TableModel.Rows.Count"  is complex.
Complex Conditional,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,EnsureVisible,The conditional expression  "!this.Scrollable || (!this.HScroll && !this.VScroll) || row == -1"  is complex.
Complex Conditional,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnKeyDown,The conditional expression  "key == Keys.Up || key == Keys.Down || key == Keys.Left || key == Keys.Right"  is complex.
Complex Conditional,XPTable.Renderers,CellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CellRenderer.cs,OnPaintBackground,The conditional expression  "e.Selected && (!e.Table.HideSelection || (e.Table.HideSelection && (e.Table.Focused || e.Table.IsEditing)))"  is complex.
Complex Conditional,XPTable.Renderers,NumberCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\NumberCellRenderer.cs,OnPaint,The conditional expression  "e.Cell.Data != null && (e.Cell.Data is int || e.Cell.Data is double || e.Cell.Data is float || e.Cell.Data is decimal)"  is complex.
Complex Conditional,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawButton,The conditional expression  "g == null || buttonRect.Width <= 0 || buttonRect.Height <= 0 || clipRect.Width <= 0 || clipRect.Height <= 0"  is complex.
Complex Conditional,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawColumnHeader,The conditional expression  "g == null || headerRect.Width <= 0 || headerRect.Height <= 0 || clipRect.Width <= 0 || clipRect.Height <= 0"  is complex.
Complex Conditional,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawComboBoxButton,The conditional expression  "g == null || buttonRect.Width <= 0 || buttonRect.Height <= 0 || clipRect.Width <= 0 || clipRect.Height <= 0"  is complex.
Complex Conditional,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawProgressBar,The conditional expression  "g == null || drawRect.Width <= 0 || drawRect.Height <= 0 || clipRect.Width <= 0 || clipRect.Height <= 0"  is complex.
Complex Conditional,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawProgressBarChunks,The conditional expression  "g == null || drawRect.Width <= 0 || drawRect.Height <= 0 || clipRect.Width <= 0 || clipRect.Height <= 0"  is complex.
Complex Conditional,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawTabPageBody,The conditional expression  "g == null || tabRect.Width <= 0 || tabRect.Height <= 0 || clipRect.Width <= 0 || clipRect.Height <= 0"  is complex.
Complex Conditional,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawTextBox,The conditional expression  "g == null || textRect.Width <= 0 || textRect.Height <= 0 || clipRect.Width <= 0 || clipRect.Height <= 0"  is complex.
Complex Conditional,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawUpDownButtons,The conditional expression  "upButtonRect.Width > 0 && upButtonRect.Height > 0 && upButtonClipRect.Width > 0 && upButtonClipRect.Height > 0"  is complex.
Complex Conditional,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawUpDownButtons,The conditional expression  "downButtonRect.Width > 0 && downButtonRect.Height > 0 && downButtonClipRect.Width > 0 && downButtonClipRect.Height > 0"  is complex.
Complex Conditional,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,DrawThemeBackground,The conditional expression  "g == null || drawRect.Width <= 0 || drawRect.Height <= 0 || clipRect.Width <= 0 || clipRect.Height <= 0"  is complex.
Empty Catch Block,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,TesterFileEnumerator,The method has an empty catch block.
Empty Catch Block,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,ReEvalDoWork,The method has an empty catch block.
Empty Catch Block,XRefresh,Context,C:\repos\binaryage_xrefresh\src\winmonitor\Context.cs,Context,The method has an empty catch block.
Empty Catch Block,XRefresh,Context,C:\repos\binaryage_xrefresh\src\winmonitor\Context.cs,Exit,The method has an empty catch block.
Empty Catch Block,XRefresh,ServerMessageRefresh,C:\repos\binaryage_xrefresh\src\winmonitor\Server.cs,ServerMessageRefresh,The method has an empty catch block.
Empty Catch Block,XRefresh,Utils,C:\repos\binaryage_xrefresh\src\winmonitor\Utils.cs,SetWorkingSet,The method has an empty catch block.
Empty Catch Block,XRefresh,Worker,C:\repos\binaryage_xrefresh\src\winmonitor\Worker.cs,SendEcho,The method has an empty catch block.
Empty Catch Block,CustomUIControls,ImageListPanel,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageListPanel.cs,OnMouseMove,The method has an empty catch block.
Empty Catch Block,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,PaintValue,The method has an empty catch block.
Empty Catch Block,Pabo.MozBar,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ThemeManager.cs,_CloseThemeData,The method has an empty catch block.
Empty Catch Block,Abhinaba.SysTray,SysTray,C:\repos\binaryage_xrefresh\src\winmonitor\SysTray.cs,SetAnimationClip,The method has an empty catch block.
Empty Catch Block,Abhinaba.SysTray,SysTray,C:\repos\binaryage_xrefresh\src\winmonitor\SysTray.cs,SetAnimationClip,The method has an empty catch block.
Magic Number,XRefresh,AdvancedSettings,C:\repos\binaryage_xrefresh\src\winmonitor\AdvancedSettings.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(2' "PageNetwork.png");
Magic Number,XRefresh,AdvancedSettings,C:\repos\binaryage_xrefresh\src\winmonitor\AdvancedSettings.cs,InitializeComponent,The following statement contains a magic number: this.firefoxDialog.Size = new System.Drawing.Size(492' 366);
Magic Number,XRefresh,AdvancedSettings,C:\repos\binaryage_xrefresh\src\winmonitor\AdvancedSettings.cs,InitializeComponent,The following statement contains a magic number: this.firefoxDialog.Size = new System.Drawing.Size(492' 366);
Magic Number,XRefresh,AdvancedSettings,C:\repos\binaryage_xrefresh\src\winmonitor\AdvancedSettings.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(492' 366);
Magic Number,XRefresh,AdvancedSettings,C:\repos\binaryage_xrefresh\src\winmonitor\AdvancedSettings.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(492' 366);
Magic Number,XRefresh,AdvancedSettings,C:\repos\binaryage_xrefresh\src\winmonitor\AdvancedSettings.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(500' 400);
Magic Number,XRefresh,AdvancedSettings,C:\repos\binaryage_xrefresh\src\winmonitor\AdvancedSettings.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(500' 400);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.panelTop.Size = new System.Drawing.Size(425' 63);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.panelTop.Size = new System.Drawing.Size(425' 63);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelVersion.Location = new System.Drawing.Point(172' 9);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelVersion.Location = new System.Drawing.Point(172' 9);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelVersion.Size = new System.Drawing.Size(0' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelVersion.TabIndex = 3;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(425' 63);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(425' 63);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.TabIndex = 4;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.panelDevider.Location = new System.Drawing.Point(0' 63);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.panelDevider.Size = new System.Drawing.Size(425' 2);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.panelDevider.Size = new System.Drawing.Size(425' 2);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(338' 201);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(338' 201);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 25);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 25);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.TabIndex = 6;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelSite.Location = new System.Drawing.Point(182' 80);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelSite.Location = new System.Drawing.Point(182' 80);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelSite.Size = new System.Drawing.Size(147' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelSite.Size = new System.Drawing.Size(147' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelSite.TabIndex = 8;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(12' 80);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(12' 80);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(172' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(172' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 9;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelContact.Location = new System.Drawing.Point(129' 213);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelContact.Location = new System.Drawing.Point(129' 213);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelContact.Size = new System.Drawing.Size(97' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelContact.Size = new System.Drawing.Size(97' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelContact.TabIndex = 11;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label6.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238)));
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(12' 213);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(12' 213);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(119' 14);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(119' 14);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 18;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label7.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238)));
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(12' 201);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(12' 201);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(298' 14);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(298' 14);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 19;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 112);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 112);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(332' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(332' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 20;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 129);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 129);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(161' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(161' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 21;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(12' 142);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(12' 142);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(165' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(165' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 22;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(12' 155);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(12' 155);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(124' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(124' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 23;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(12' 168);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(12' 168);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(129' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(129' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 24;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(216' 155);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(216' 155);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(127' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(127' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 25;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(216' 129);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(216' 129);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(197' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(197' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label10.TabIndex = 26;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(216' 142);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(216' 142);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(113' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(113' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label11.TabIndex = 27;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point(216' 168);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point(216' 168);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(69' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(69' 13);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.label12.TabIndex = 28;
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(425' 234);
Magic Number,XRefresh,AboutDialog,C:\repos\binaryage_xrefresh\src\winmonitor\AboutDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(425' 234);
Magic Number,XRefresh,FilterMenu,C:\repos\binaryage_xrefresh\src\winmonitor\FilterMenu.cs,BuildFileItems,The following statement contains a magic number: if (candidates.Count > 5)  			{  				candidates.RemoveRange(5' candidates.Count - 5);  			}
Magic Number,XRefresh,FilterMenu,C:\repos\binaryage_xrefresh\src\winmonitor\FilterMenu.cs,BuildFileItems,The following statement contains a magic number: if (candidates.Count > 5)  			{  				candidates.RemoveRange(5' candidates.Count - 5);  			}
Magic Number,XRefresh,FilterMenu,C:\repos\binaryage_xrefresh\src\winmonitor\FilterMenu.cs,BuildFileItems,The following statement contains a magic number: if (candidates.Count > 5)  			{  				candidates.RemoveRange(5' candidates.Count - 5);  			}
Magic Number,XRefresh,FilterMenu,C:\repos\binaryage_xrefresh\src\winmonitor\FilterMenu.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(2' "AddInclude.png");
Magic Number,XRefresh,FilterMenu,C:\repos\binaryage_xrefresh\src\winmonitor\FilterMenu.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(3' "DelInclude.png");
Magic Number,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,SetupTable,The following statement contains a magic number: tableModel.RowHeight = 18;
Magic Number,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,SetupTable,The following statement contains a magic number: fileColumn.Width = 520;
Magic Number,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,SetupTable,The following statement contains a magic number: reasonColumn.Width = 150;
Magic Number,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,StyleRow,The following statement contains a magic number: if (reason.status == MatchReason.Status.Excluded) cell1.ForeColor = Color.FromArgb(255' 0' 0);
Magic Number,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,StyleRow,The following statement contains a magic number: if (reason.status == MatchReason.Status.Included) cell1.ForeColor = Color.FromArgb(180' 130' 0);
Magic Number,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,StyleRow,The following statement contains a magic number: if (reason.status == MatchReason.Status.Included) cell1.ForeColor = Color.FromArgb(180' 130' 0);
Magic Number,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,TesterFileEnumerator,The following statement contains a magic number: foreach (String dir in dirs)              {  				if (data.worker.CancellationPending) throw new CancelException();                  string filename = ChopFilename(dir' data.len);                    // optimization' directory must pass global exclude filters                  // this is here mainly to not traverse .svn subdirectories                  reason.Reset();  				if (data.model.PassesGlobalFilters(filename' reason))                  {                      TesterFileEnumerator(dir' reason' data);                  }                  else                  {  					data.worker.ReportProgress(0' new ReportInfo(filename' dir' reason));                  }                  Thread.Sleep(10); // don't hung the UI thread              }
Magic Number,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,TesterFileEnumerator,The following statement contains a magic number: foreach (String file in files)              {  				if (data.worker.CancellationPending) throw new CancelException();  				string filename = ChopFilename(file' data.len);                  reason.Reset();  				lock (data.folder)  				{  					try  					{  						if (data.folder.PassesFilters(filename' reason))  						{  							data.worker.ReportProgress(0' new ReportInfo(filename' file' reason));  						}  						else  						{  							data.worker.ReportProgress(0' new ReportInfo(filename' file' reason));  						}  					}  					catch (Exception)  					{  						// hack  					}  				}  				Thread.Sleep(10); // don't hung the UI thread  			}
Magic Number,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,RunTest,The following statement contains a magic number: if (worker != null)              {                  worker.CancelAsync();  				Thread.Sleep(100);              }
Magic Number,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,ReEval,The following statement contains a magic number: if (reEvalWorker != null)  			{  				reEvalWorker.CancelAsync();  				Thread.Sleep(100);  			}
Magic Number,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,CancelAll,The following statement contains a magic number: if (worker != null)  			{  				worker.CancelAsync();  				Thread.Sleep(100);  			}
Magic Number,XRefresh,FilterTester,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTester.cs,CancelAll,The following statement contains a magic number: if (reEvalWorker != null)  			{  				reEvalWorker.CancelAsync();  				Thread.Sleep(100);  			}
Magic Number,XRefresh,PortEdit,C:\repos\binaryage_xrefresh\src\winmonitor\PortEdit.cs,PortEdit,The following statement contains a magic number: SetMaxLength(5);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 3;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(390' 390);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(390' 390);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(3' 3);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(3' 3);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(384' 69);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(384' 69);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(17' 95);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(17' 95);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(60' 13);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(60' 13);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 20;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(384' 69);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(384' 69);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 21;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(278' 20);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(278' 20);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(43' 13);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(43' 13);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 26;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.editPort.Location = new System.Drawing.Point(322' 17);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.editPort.Location = new System.Drawing.Point(322' 17);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.editPort.Size = new System.Drawing.Size(51' 20);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.editPort.Size = new System.Drawing.Size(51' 20);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.editPort.TabIndex = 25;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.editRemoteComputer.Location = new System.Drawing.Point(106' 42);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.editRemoteComputer.Location = new System.Drawing.Point(106' 42);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.editRemoteComputer.Size = new System.Drawing.Size(267' 20);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.editRemoteComputer.Size = new System.Drawing.Size(267' 20);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.editRemoteComputer.TabIndex = 23;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.labelRemoteComputer.Location = new System.Drawing.Point(13' 45);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.labelRemoteComputer.Location = new System.Drawing.Point(13' 45);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.labelRemoteComputer.Size = new System.Drawing.Size(94' 13);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.labelRemoteComputer.Size = new System.Drawing.Size(94' 13);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.labelRemoteComputer.TabIndex = 24;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkAcceptOnlyLocal.Location = new System.Drawing.Point(9' 19);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkAcceptOnlyLocal.Location = new System.Drawing.Point(9' 19);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkAcceptOnlyLocal.Size = new System.Drawing.Size(197' 17);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkAcceptOnlyLocal.Size = new System.Drawing.Size(197' 17);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkAcceptOnlyLocal.TabIndex = 17;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(3' 78);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(3' 78);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(384' 69);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(384' 69);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(384' 69);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(384' 69);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.TabIndex = 21;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkForUpdates.Location = new System.Drawing.Point(9' 19);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkForUpdates.Location = new System.Drawing.Point(9' 19);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkForUpdates.Size = new System.Drawing.Size(113' 17);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkForUpdates.Size = new System.Drawing.Size(113' 17);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkForUpdates.TabIndex = 20;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkUsageStatistics.Location = new System.Drawing.Point(9' 42);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkUsageStatistics.Location = new System.Drawing.Point(9' 42);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkUsageStatistics.Size = new System.Drawing.Size(259' 17);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkUsageStatistics.Size = new System.Drawing.Size(259' 17);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.checkUsageStatistics.TabIndex = 19;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.toolTip.AutoPopDelay = 20000;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.toolTip.InitialDelay = 500;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.toolTip.ReshowDelay = 100;
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(390' 390);
Magic Number,XRefresh,PageNetwork,C:\repos\binaryage_xrefresh\src\winmonitor\PageNetwork.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(390' 390);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,PageFilters,The following statement contains a magic number: this.tableIncludes.Location = new System.Drawing.Point(3' 243);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,PageFilters,The following statement contains a magic number: this.tableIncludes.Location = new System.Drawing.Point(3' 243);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,PageFilters,The following statement contains a magic number: this.tableIncludes.Size = new System.Drawing.Size(418' 194);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,PageFilters,The following statement contains a magic number: this.tableIncludes.Size = new System.Drawing.Size(418' 194);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,PageFilters,The following statement contains a magic number: this.tableExcludes.Location = new System.Drawing.Point(3' 23);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,PageFilters,The following statement contains a magic number: this.tableExcludes.Location = new System.Drawing.Point(3' 23);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,PageFilters,The following statement contains a magic number: this.tableExcludes.Size = new System.Drawing.Size(418' 194);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,PageFilters,The following statement contains a magic number: this.tableExcludes.Size = new System.Drawing.Size(418' 194);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,PageFilters,The following statement contains a magic number: this.tableExcludes.TabIndex = 5;
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,PageFilters,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.tableIncludes' 0' 3);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238)));
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 225);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 225);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(147' 15);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(147' 15);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.label1' 0' 2);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.RowCount = 4;
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Size = new System.Drawing.Size(424' 440);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Size = new System.Drawing.Size(424' 440);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.TabIndex = 7;
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238)));
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 5);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 5);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(140' 15);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(140' 15);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 4;
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(424' 440);
Magic Number,XRefresh,PageFilters,C:\repos\binaryage_xrefresh\src\winmonitor\PageFilters.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(424' 440);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.groupBox3' 0' 2);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 4;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(390' 390);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(390' 390);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(3' 3);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(3' 3);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(384' 94);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(384' 94);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(17' 95);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(17' 95);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(60' 13);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(60' 13);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 20;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(384' 94);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(384' 94);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 21;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.buttonSettingsFile.Location = new System.Drawing.Point(349' 64);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.buttonSettingsFile.Location = new System.Drawing.Point(349' 64);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.buttonSettingsFile.Size = new System.Drawing.Size(24' 22);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.buttonSettingsFile.Size = new System.Drawing.Size(24' 22);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.buttonSettingsFile.TabIndex = 25;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editSettingsFile.Location = new System.Drawing.Point(80' 65);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editSettingsFile.Location = new System.Drawing.Point(80' 65);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editSettingsFile.Size = new System.Drawing.Size(269' 20);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editSettingsFile.Size = new System.Drawing.Size(269' 20);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editSettingsFile.TabIndex = 23;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.labelSettingsFile.Location = new System.Drawing.Point(13' 68);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.labelSettingsFile.Location = new System.Drawing.Point(13' 68);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.labelSettingsFile.Size = new System.Drawing.Size(64' 13);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.labelSettingsFile.Size = new System.Drawing.Size(64' 13);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.labelSettingsFile.TabIndex = 24;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkSaveSettings.Location = new System.Drawing.Point(9' 42);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkSaveSettings.Location = new System.Drawing.Point(9' 42);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkSaveSettings.Size = new System.Drawing.Size(177' 17);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkSaveSettings.Size = new System.Drawing.Size(177' 17);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkSaveSettings.TabIndex = 18;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkRunOnStartup.Location = new System.Drawing.Point(9' 19);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkRunOnStartup.Location = new System.Drawing.Point(9' 19);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkRunOnStartup.Size = new System.Drawing.Size(143' 17);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkRunOnStartup.Size = new System.Drawing.Size(143' 17);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkRunOnStartup.TabIndex = 17;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(3' 103);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(3' 103);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(384' 94);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(384' 94);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(384' 94);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(384' 94);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.TabIndex = 21;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.buttonSoundFile.Location = new System.Drawing.Point(349' 65);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.buttonSoundFile.Location = new System.Drawing.Point(349' 65);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.buttonSoundFile.Size = new System.Drawing.Size(24' 22);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.buttonSoundFile.Size = new System.Drawing.Size(24' 22);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.buttonSoundFile.TabIndex = 22;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editSoundFile.Location = new System.Drawing.Point(80' 66);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editSoundFile.Location = new System.Drawing.Point(80' 66);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editSoundFile.Size = new System.Drawing.Size(269' 20);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editSoundFile.Size = new System.Drawing.Size(269' 20);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editSoundFile.TabIndex = 20;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.labelSoundFile.Location = new System.Drawing.Point(20' 69);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.labelSoundFile.Location = new System.Drawing.Point(20' 69);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.labelSoundFile.Size = new System.Drawing.Size(57' 13);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.labelSoundFile.Size = new System.Drawing.Size(57' 13);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.labelSoundFile.TabIndex = 21;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkFlashIconOnRefresh.Location = new System.Drawing.Point(9' 19);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkFlashIconOnRefresh.Location = new System.Drawing.Point(9' 19);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkFlashIconOnRefresh.Size = new System.Drawing.Size(144' 17);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkFlashIconOnRefresh.Size = new System.Drawing.Size(144' 17);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkFlashIconOnRefresh.TabIndex = 20;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkPlaySoundOnRefresh.Location = new System.Drawing.Point(9' 42);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkPlaySoundOnRefresh.Location = new System.Drawing.Point(9' 42);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkPlaySoundOnRefresh.Size = new System.Drawing.Size(130' 17);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkPlaySoundOnRefresh.Size = new System.Drawing.Size(130' 17);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkPlaySoundOnRefresh.TabIndex = 19;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(3' 203);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(3' 203);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(384' 64);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(384' 64);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.TabIndex = 2;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkEnableLogging.Location = new System.Drawing.Point(9' 45);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkEnableLogging.Location = new System.Drawing.Point(9' 45);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkEnableLogging.Size = new System.Drawing.Size(100' 17);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkEnableLogging.Size = new System.Drawing.Size(100' 17);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.checkEnableLogging.TabIndex = 23;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(132' 22);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(132' 22);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(61' 13);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(61' 13);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 2;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(8' 22);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(8' 22);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(83' 13);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(83' 13);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editWaitTimeout.Location = new System.Drawing.Point(92' 19);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editWaitTimeout.Location = new System.Drawing.Point(92' 19);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editWaitTimeout.Size = new System.Drawing.Size(38' 20);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.editWaitTimeout.Size = new System.Drawing.Size(38' 20);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.toolTip.AutoPopDelay = 20000;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.toolTip.InitialDelay = 500;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.toolTip.ReshowDelay = 100;
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(390' 390);
Magic Number,XRefresh,PageMain,C:\repos\binaryage_xrefresh\src\winmonitor\PageMain.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(390' 390);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,ProjectFilters,The following statement contains a magic number: this.tableIncludes.Location = new System.Drawing.Point(349' 25);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,ProjectFilters,The following statement contains a magic number: this.tableIncludes.Location = new System.Drawing.Point(349' 25);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,ProjectFilters,The following statement contains a magic number: this.tableIncludes.Size = new System.Drawing.Size(340' 140);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,ProjectFilters,The following statement contains a magic number: this.tableIncludes.Size = new System.Drawing.Size(340' 140);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,ProjectFilters,The following statement contains a magic number: this.tableExcludes.Location = new System.Drawing.Point(3' 25);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,ProjectFilters,The following statement contains a magic number: this.tableExcludes.Location = new System.Drawing.Point(3' 25);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,ProjectFilters,The following statement contains a magic number: this.tableExcludes.Size = new System.Drawing.Size(340' 140);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,ProjectFilters,The following statement contains a magic number: this.tableExcludes.Size = new System.Drawing.Size(340' 140);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,ProjectFilters,The following statement contains a magic number: this.tableExcludes.TabIndex = 3;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,ShowDebugger,The following statement contains a magic number: tableLayoutPanel.RowStyles[3].Height = 50;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,ShowDebugger,The following statement contains a magic number: tableLayoutPanel.RowStyles[3].Height = 50;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,ShowDebugger,The following statement contains a magic number: tableLayoutPanel.RowStyles[1].Height = 50;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,HideDebugger,The following statement contains a magic number: tableLayoutPanel.RowStyles[3].Height = 0;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,HideDebugger,The following statement contains a magic number: tableLayoutPanel.RowStyles[1].Height = 100;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.ColumnCount = 2;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.tableLayoutPanel4' 0' 2);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.tableLayoutPanel1' 0' 4);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.tableTester' 0' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.RowCount = 5;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Size = new System.Drawing.Size(692' 374);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Size = new System.Drawing.Size(692' 374);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.TabIndex = 5;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.ColumnCount = 2;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.SetColumnSpan(this.tableLayoutPanel4' 2);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Location = new System.Drawing.Point(0' 166);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Size = new System.Drawing.Size(692' 32);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Size = new System.Drawing.Size(692' 32);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.TabIndex = 7;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(392' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(392' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(297' 26);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size(297' 26);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.panel2.TabIndex = 10;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonBrowseTestPath.Location = new System.Drawing.Point(-1' 6);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonBrowseTestPath.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonBrowseTestPath.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonBrowseTestPath.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonBrowseTestPath.Size = new System.Drawing.Size(24' 21);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonBrowseTestPath.Size = new System.Drawing.Size(24' 21);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonBrowseTestPath.TabIndex = 17;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonDebugger.Location = new System.Drawing.Point(188' 1);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonDebugger.Size = new System.Drawing.Size(109' 25);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonDebugger.Size = new System.Drawing.Size(109' 25);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonDebugger.TabIndex = 7;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonRunTest.Location = new System.Drawing.Point(25' 2);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonRunTest.Location = new System.Drawing.Point(25' 2);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonRunTest.Size = new System.Drawing.Size(78' 25);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonRunTest.Size = new System.Drawing.Size(78' 25);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonRunTest.TabIndex = 15;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.editTestPath.Location = new System.Drawing.Point(3' 9);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.editTestPath.Location = new System.Drawing.Point(3' 9);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.editTestPath.Margin = new System.Windows.Forms.Padding(3' 3' 0' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.editTestPath.Margin = new System.Windows.Forms.Padding(3' 3' 0' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.editTestPath.Margin = new System.Windows.Forms.Padding(3' 3' 0' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.editTestPath.Size = new System.Drawing.Size(389' 20);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.editTestPath.Size = new System.Drawing.Size(389' 20);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.editTestPath.TabIndex = 11;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnCount = 2;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.SetColumnSpan(this.tableLayoutPanel1' 2);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(0' 342);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(692' 32);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(692' 32);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.TabIndex = 4;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Size = new System.Drawing.Size(532' 32);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Size = new System.Drawing.Size(532' 32);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.TabIndex = 8;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonImport.Location = new System.Drawing.Point(3' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonImport.Location = new System.Drawing.Point(3' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonImport.Size = new System.Drawing.Size(130' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonImport.Size = new System.Drawing.Size(130' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonImport.TabIndex = 11;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboProjects.ItemHeight = 13;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboProjects.Location = new System.Drawing.Point(139' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboProjects.Location = new System.Drawing.Point(139' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboProjects.Size = new System.Drawing.Size(140' 21);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboProjects.Size = new System.Drawing.Size(140' 21);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboProjects.TabIndex = 10;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonDoImport.Location = new System.Drawing.Point(285' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonDoImport.Location = new System.Drawing.Point(285' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonDoImport.Size = new System.Drawing.Size(57' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonDoImport.Size = new System.Drawing.Size(57' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonDoImport.TabIndex = 12;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancelImport.Location = new System.Drawing.Point(348' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancelImport.Location = new System.Drawing.Point(348' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancelImport.Size = new System.Drawing.Size(62' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancelImport.Size = new System.Drawing.Size(62' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancelImport.TabIndex = 13;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(535' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(535' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(154' 26);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(154' 26);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 9;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(81' 1);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(74' 25);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(74' 25);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.TabIndex = 8;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanelTopLeft.ColumnCount = 2;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanelTopLeft.Location = new System.Drawing.Point(346' 0);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanelTopLeft.Size = new System.Drawing.Size(346' 22);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanelTopLeft.Size = new System.Drawing.Size(346' 22);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanelTopLeft.TabIndex = 5;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238)));
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 7);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 7);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(101' 15);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(101' 15);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalIncludes.Font = new System.Drawing.Font("Microsoft Sans Serif"' 7F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238)));
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalIncludes.Location = new System.Drawing.Point(252' 7);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalIncludes.Location = new System.Drawing.Point(252' 7);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalIncludes.Margin = new System.Windows.Forms.Padding(3' 7' 3' 0);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalIncludes.Margin = new System.Windows.Forms.Padding(3' 7' 3' 0);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalIncludes.Margin = new System.Windows.Forms.Padding(3' 7' 3' 0);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalIncludes.Size = new System.Drawing.Size(91' 15);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalIncludes.Size = new System.Drawing.Size(91' 15);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalIncludes.TabIndex = 3;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.ColumnCount = 2;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Size = new System.Drawing.Size(346' 22);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Size = new System.Drawing.Size(346' 22);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.TabIndex = 6;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalExcludes.Font = new System.Drawing.Font("Microsoft Sans Serif"' 7F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238)));
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalExcludes.Location = new System.Drawing.Point(252' 7);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalExcludes.Location = new System.Drawing.Point(252' 7);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalExcludes.Margin = new System.Windows.Forms.Padding(3' 7' 3' 0);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalExcludes.Margin = new System.Windows.Forms.Padding(3' 7' 3' 0);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalExcludes.Margin = new System.Windows.Forms.Padding(3' 7' 3' 0);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalExcludes.Size = new System.Drawing.Size(91' 15);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalExcludes.Size = new System.Drawing.Size(91' 15);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGlobalExcludes.TabIndex = 4;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238)));
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 7);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 7);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(94' 15);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(94' 15);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.SetColumnSpan(this.tableTester' 2);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableTester.Location = new System.Drawing.Point(3' 201);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableTester.Location = new System.Drawing.Point(3' 201);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableTester.Size = new System.Drawing.Size(686' 138);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableTester.Size = new System.Drawing.Size(686' 138);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableTester.TabIndex = 8;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(3' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Location = new System.Drawing.Point(3' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(121' 21);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.Size = new System.Drawing.Size(121' 21);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.ColumnCount = 2;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Size = new System.Drawing.Size(200' 100);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Size = new System.Drawing.Size(200' 100);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(123' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(123' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(74' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(74' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 7;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel2.Size = new System.Drawing.Size(216' 30);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel2.Size = new System.Drawing.Size(216' 30);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel2.TabIndex = 8;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(3' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(3' 3);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(130' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(130' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button2.TabIndex = 11;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.ItemHeight = 13;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.Location = new System.Drawing.Point(3' 32);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.Location = new System.Drawing.Point(3' 32);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.Size = new System.Drawing.Size(140' 21);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.Size = new System.Drawing.Size(140' 21);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.comboBox2.TabIndex = 10;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point(149' 32);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point(149' 32);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size(57' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size(57' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button3.TabIndex = 12;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button4.Location = new System.Drawing.Point(3' 61);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button4.Location = new System.Drawing.Point(3' 61);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button4.Size = new System.Drawing.Size(62' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button4.Size = new System.Drawing.Size(62' 23);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.button4.TabIndex = 13;
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(692' 374);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(692' 374);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(500' 400);
Magic Number,XRefresh,ProjectFilters,C:\repos\binaryage_xrefresh\src\winmonitor\ProjectFilters.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(500' 400);
Magic Number,XRefresh,JSScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,GetImageIndex,The following statement contains a magic number: return 3;
Magic Number,XRefresh,JSScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,Scan,The following statement contains a magic number: return ContainsAtLeastNumFiles(path' "js"' 5);
Magic Number,XRefresh,HTMLScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,GetImageIndex,The following statement contains a magic number: return 2;
Magic Number,XRefresh,HTMLScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,Scan,The following statement contains a magic number: return ContainsAtLeastNumFiles(path' "html"' 5) ||   				ContainsAtLeastNumFiles(path' "htm"' 5);
Magic Number,XRefresh,HTMLScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,Scan,The following statement contains a magic number: return ContainsAtLeastNumFiles(path' "html"' 5) ||   				ContainsAtLeastNumFiles(path' "htm"' 5);
Magic Number,XRefresh,PHPScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,GetImageIndex,The following statement contains a magic number: return 7;
Magic Number,XRefresh,PHPScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,Scan,The following statement contains a magic number: return ContainsAtLeastNumFiles(path' "php"' 5);
Magic Number,XRefresh,RORScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,GetImageIndex,The following statement contains a magic number: return 5;
Magic Number,XRefresh,RORScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,Scan,The following statement contains a magic number: return ContainsAtLeastNumFiles(path' "rb"' 5) && score>=7;
Magic Number,XRefresh,RORScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,Scan,The following statement contains a magic number: return ContainsAtLeastNumFiles(path' "rb"' 5) && score>=7;
Magic Number,XRefresh,RubyScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,GetImageIndex,The following statement contains a magic number: return 4;
Magic Number,XRefresh,RubyScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,Scan,The following statement contains a magic number: return ContainsAtLeastNumFiles(path' "rb"' 3);
Magic Number,XRefresh,ASPScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,GetImageIndex,The following statement contains a magic number: return 8;
Magic Number,XRefresh,ASPScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,Scan,The following statement contains a magic number: return ContainsAtLeastNumFiles(path' "asp"' 5) || ContainsAtLeastNumFiles(path' "aspx"' 5);
Magic Number,XRefresh,ASPScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,Scan,The following statement contains a magic number: return ContainsAtLeastNumFiles(path' "asp"' 5) || ContainsAtLeastNumFiles(path' "aspx"' 5);
Magic Number,XRefresh,JavaScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,GetImageIndex,The following statement contains a magic number: return 9;
Magic Number,XRefresh,JavaScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,Scan,The following statement contains a magic number: return ContainsAtLeastNumFiles(path' "java"' 5);
Magic Number,XRefresh,PythonScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,GetImageIndex,The following statement contains a magic number: return 6;
Magic Number,XRefresh,PythonScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,Scan,The following statement contains a magic number: return ContainsAtLeastNumFiles(path' "py"' 5);
Magic Number,XRefresh,PerlScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,GetImageIndex,The following statement contains a magic number: return 10;
Magic Number,XRefresh,PerlScanner,C:\repos\binaryage_xrefresh\src\winmonitor\Detector.cs,Scan,The following statement contains a magic number: return ContainsAtLeastNumFiles(path' "pl"' 5);
Magic Number,XRefresh,ActivityLog,C:\repos\binaryage_xrefresh\src\winmonitor\EventLog.cs,SetupTable,The following statement contains a magic number: table.Size = new System.Drawing.Size(700' 400);
Magic Number,XRefresh,ActivityLog,C:\repos\binaryage_xrefresh\src\winmonitor\EventLog.cs,SetupTable,The following statement contains a magic number: table.Size = new System.Drawing.Size(700' 400);
Magic Number,XRefresh,ActivityLog,C:\repos\binaryage_xrefresh\src\winmonitor\EventLog.cs,SetupTable,The following statement contains a magic number: timeColumn.Width = 60;
Magic Number,XRefresh,ActivityLog,C:\repos\binaryage_xrefresh\src\winmonitor\EventLog.cs,SetupTable,The following statement contains a magic number: textColumn.Width = 630;
Magic Number,XRefresh,ActivityLog,C:\repos\binaryage_xrefresh\src\winmonitor\EventLog.cs,table_MouseClick,The following statement contains a magic number: if (row.SubRows.Count>0)  			{  				int index = row.Index + 1;  				while (true)  				{  					if (table.TableModel.Rows.Count<=index) break;  					XPTable.Models.Row xrow = table.TableModel.Rows[index];  					if (xrow.ChildIndex==0) break;  					table.TableModel.Rows.Remove(xrow);  				}  				row.SubRows.Clear();  			}  			else  			{  				foreach (Pair<Bitmap' string> line in e.lines)  				{  					XPTable.Models.Row subrow = new XPTable.Models.Row();    					XPTable.Models.Cell subcell1 = new XPTable.Models.Cell();  					XPTable.Models.CellStyle subcellStyle1 = new XPTable.Models.CellStyle();  					XPTable.Models.Cell subcell2 = new XPTable.Models.Cell();  					XPTable.Models.CellStyle subcellStyle2 = new XPTable.Models.CellStyle();    					subcell2.Image = line.First;  					subcell2.Text = line.Second;  					subcell2.ColSpan = 2;  					subcell2.ForeColor = Color.Gray;    					subrow.Cells.Add(subcell1);  					subrow.Cells.Add(subcell2);  					subrow.Editable = false;    					row.SubRows.Add(subrow);  				}  			}
Magic Number,XRefresh,ActivityLog,C:\repos\binaryage_xrefresh\src\winmonitor\EventLog.cs,InitializeComponent,The following statement contains a magic number: this.table.Size = new System.Drawing.Size(720' 400);
Magic Number,XRefresh,ActivityLog,C:\repos\binaryage_xrefresh\src\winmonitor\EventLog.cs,InitializeComponent,The following statement contains a magic number: this.table.Size = new System.Drawing.Size(720' 400);
Magic Number,XRefresh,ActivityLog,C:\repos\binaryage_xrefresh\src\winmonitor\EventLog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(720' 400);
Magic Number,XRefresh,ActivityLog,C:\repos\binaryage_xrefresh\src\winmonitor\EventLog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(720' 400);
Magic Number,XRefresh,FilterTable,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTable.cs,SetupTable,The following statement contains a magic number: tableModel.RowHeight = 18;
Magic Number,XRefresh,FilterTable,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTable.cs,SetupTable,The following statement contains a magic number: maskColumn.Width = 120;
Magic Number,XRefresh,FilterTable,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTable.cs,SetupTable,The following statement contains a magic number: infoColumn.Width = 170;
Magic Number,XRefresh,FilterTable,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTable.cs,DeleteRow,The following statement contains a magic number: TableModel.Selections.SelectCells(index' 0' index' 2);
Magic Number,XRefresh,FilterTable,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTable.cs,AddRow,The following statement contains a magic number: tableModel.Selections.SelectCells(row' 0' row' 2);
Magic Number,XRefresh,FilterTable,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTable.cs,GetInfoForMask,The following statement contains a magic number: if (fileMask.type == FileMask.Type.Mask)  			{  				string ext = mask.Substring(2);  				return ShellIcon.GetTypeInfo("x." + ext);  			}
Magic Number,XRefresh,FilterTable,C:\repos\binaryage_xrefresh\src\winmonitor\FilterTable.cs,GetIconForMask,The following statement contains a magic number: if (mask.StartsWith("*."))  			{  				string ext = mask.Substring(2);  				return ShellIcon.GetSmallTypeIcon("x."+ext);  			}
Magic Number,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,RebuildMenu,The following statement contains a magic number: lock (server)  			{  				if (server.clients.Count>0)  				{  					foreach (KeyValuePair<int' Server.ClientInfo> pair in server.clients)  					{  						Server.ClientInfo client = pair.Value;    						int icon = Context.GetClientTypeIndex(client.type);  						string text = Context.GetClientTypeString(client.type);    						if (!client.muted)  						{  							if (client.page.Length > 0) text += " - " + client.page;  							item = new MenuItem(text' new EventHandler(client.OnToggle));  							EnableExtension(item' icon);  						}  						else  						{  							text = text + " [muted]";  							item = new MenuItem(text' new EventHandler(client.OnToggle));  							EnableExtension(item' icon+4);  						}    						MenuItems.Add(item);  					}  				}  				else  				{  					item = new MenuItem("no browser connected");  					EnableExtension(item);  					MenuItems.Add(item);  				}  			}
Magic Number,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,RebuildMenu,The following statement contains a magic number: EnableExtension(item' 3);
Magic Number,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(2' "Help.png");
Magic Number,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(3' "Information.png");
Magic Number,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(4' "New.png");
Magic Number,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(5' "InternetExplorer.png");
Magic Number,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(6' "Firefox.png");
Magic Number,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(7' "Opera.png");
Magic Number,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(8' "Safari.png");
Magic Number,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(9' "InternetExplorerGray.png");
Magic Number,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(10' "FirefoxGray.png");
Magic Number,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(11' "OperaGray.png");
Magic Number,XRefresh,Menu,C:\repos\binaryage_xrefresh\src\winmonitor\Menu.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(12' "SafariGray.png");
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,CalcWidth,The following statement contains a magic number: int menuWidth = (int)Math.Ceiling( gfx.MeasureString( menuItem.Text' this.CurrentFont' 1000' sf).Width );
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,CalcWidth,The following statement contains a magic number: int shortcutWidth = (int)Math.Ceiling( gfx.MeasureString( this.ShortcutText' this.CurrentFont' 1000' sf).Width );
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawSeperator,The following statement contains a magic number: int yCenter	= bounds.Top  + (bounds.Height / 2);
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawMenuText,The following statement contains a magic number: int yPos = bounds.Top + (bounds.Height - this.CurrentFont.Height) / 2;
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawCheckBox,The following statement contains a magic number: rectCheck.X += ((LEFT_MARGIN + iconSize.Width + RIGHT_MARGIN) - rectCheck.Width) / 2;
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawCheckBox,The following statement contains a magic number: rectCheck.Y += (bounds.Height - rectCheck.Height) / 2;
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawBullet,The following statement contains a magic number: int x = rect.Left + ( rect.Width - BULLET_DIAMETER ) / 2;
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawBullet,The following statement contains a magic number: int y = rect.Top + ( rect.Height - BULLET_DIAMETER ) / 2;
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawCheckMark,The following statement contains a magic number: int x = rect.Left + rect.Width  / 2;
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawCheckMark,The following statement contains a magic number: int y = rect.Top  + rect.Height / 2;
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawCheckMark,The following statement contains a magic number: Point[] points = new Point[] { new Point(x-4' y-1)'  											   new Point(x-4' y+1)'  											   new Point(x-2' y+3)'  											   new Point(x+2' y-1)'  											   new Point(x+2' y-3)'  											   new Point(x-2' y+1)'  											   new Point(x-4' y-1)  											 };
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawCheckMark,The following statement contains a magic number: Point[] points = new Point[] { new Point(x-4' y-1)'  											   new Point(x-4' y+1)'  											   new Point(x-2' y+3)'  											   new Point(x+2' y-1)'  											   new Point(x+2' y-3)'  											   new Point(x-2' y+1)'  											   new Point(x-4' y-1)  											 };
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawCheckMark,The following statement contains a magic number: Point[] points = new Point[] { new Point(x-4' y-1)'  											   new Point(x-4' y+1)'  											   new Point(x-2' y+3)'  											   new Point(x+2' y-1)'  											   new Point(x+2' y-3)'  											   new Point(x-2' y+1)'  											   new Point(x-4' y-1)  											 };
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawCheckMark,The following statement contains a magic number: Point[] points = new Point[] { new Point(x-4' y-1)'  											   new Point(x-4' y+1)'  											   new Point(x-2' y+3)'  											   new Point(x+2' y-1)'  											   new Point(x+2' y-3)'  											   new Point(x-2' y+1)'  											   new Point(x-4' y-1)  											 };
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawCheckMark,The following statement contains a magic number: Point[] points = new Point[] { new Point(x-4' y-1)'  											   new Point(x-4' y+1)'  											   new Point(x-2' y+3)'  											   new Point(x+2' y-1)'  											   new Point(x+2' y-3)'  											   new Point(x-2' y+1)'  											   new Point(x-4' y-1)  											 };
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawCheckMark,The following statement contains a magic number: Point[] points = new Point[] { new Point(x-4' y-1)'  											   new Point(x-4' y+1)'  											   new Point(x-2' y+3)'  											   new Point(x+2' y-1)'  											   new Point(x+2' y-3)'  											   new Point(x-2' y+1)'  											   new Point(x-4' y-1)  											 };
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawCheckMark,The following statement contains a magic number: Point[] points = new Point[] { new Point(x-4' y-1)'  											   new Point(x-4' y+1)'  											   new Point(x-2' y+3)'  											   new Point(x+2' y-1)'  											   new Point(x+2' y-3)'  											   new Point(x-2' y+1)'  											   new Point(x-4' y-1)  											 };
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawCheckMark,The following statement contains a magic number: Point[] points = new Point[] { new Point(x-4' y-1)'  											   new Point(x-4' y+1)'  											   new Point(x-2' y+3)'  											   new Point(x+2' y-1)'  											   new Point(x+2' y-3)'  											   new Point(x-2' y+1)'  											   new Point(x-4' y-1)  											 };
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawCheckMark,The following statement contains a magic number: Point[] points = new Point[] { new Point(x-4' y-1)'  											   new Point(x-4' y+1)'  											   new Point(x-2' y+3)'  											   new Point(x+2' y-1)'  											   new Point(x+2' y-3)'  											   new Point(x-2' y+1)'  											   new Point(x-4' y-1)  											 };
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawImage,The following statement contains a magic number: if( menuItem.Enabled )  					gfx.DrawImage( menuImage' bounds.Left + LEFT_MARGIN'   						bounds.Top + ((bounds.Height - iconSize.Height) / 2)'   						iconSize.Width' iconSize.Height );	  				else  					ControlPaint.DrawImageDisabled(gfx' menuImage'   						bounds.Left + LEFT_MARGIN'   						bounds.Top + ((bounds.Height - iconSize.Height) / 2)'   						SystemColors.Menu );
Magic Number,XRefresh,MenuHelper,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,DrawImage,The following statement contains a magic number: if( menuItem.Enabled )  					gfx.DrawImage( menuImage' bounds.Left + LEFT_MARGIN'   						bounds.Top + ((bounds.Height - iconSize.Height) / 2)'   						iconSize.Width' iconSize.Height );	  				else  					ControlPaint.DrawImageDisabled(gfx' menuImage'   						bounds.Left + LEFT_MARGIN'   						bounds.Top + ((bounds.Height - iconSize.Height) / 2)'   						SystemColors.Menu );
Magic Number,XRefresh,ImageSelector,C:\repos\binaryage_xrefresh\src\winmonitor\MenuExtender.cs,ImageSelector,The following statement contains a magic number: this.Columns.Add("Index"' -2' HorizontalAlignment.Left);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,SetupTable,The following statement contains a magic number: tableModel.RowHeight = 18;
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,SetupTable,The following statement contains a magic number: nameColumn.Width = 120;
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,SetupTable,The following statement contains a magic number: folderColumn.Width = 470;
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,SetupTable,The following statement contains a magic number: typeColumn.Width = 80;
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,MakeUniqueName,The following statement contains a magic number: int maxTries = 99;
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,MakeUniqueName,The following statement contains a magic number: if (result.Length==0)  			{  				// all 100 names has been taken?  				// return some randomized stuff  				for (int i=0; i<8; i++)  				{  					naked = naked + i.ToString();  				}  				result = naked;  			}
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,OnCellPropertyChanged,The following statement contains a magic number: lock (folder)  			{  				// update model with the new value from table  				switch (e.CellPos.Column)  				{  					case 0: // project name  						if (folder.Name != e.Cell.Text)  						{  							folder.Name = MakeUniqueName(e.Cell.Text);  							e.Cell.Text = folder.Name;  						}  						folder.Enabled = e.Cell.Checked;  						StrikeRow(table.TableModel.Rows[e.Row]' !folder.Enabled);  						break;  					case 1: // project path  						folder.Path = e.Cell.Text;  						e.Cell.Checked = Directory.Exists(folder.Path);  						break;  					case 2: // project type  						folder.Type = e.Cell.Text;  						table.TableModel.Rows[e.Row].Cells[0].Data = (int)e.Cell.Data; // set new project icon  						table.InvalidateCell(e.Row' 0);  						break;  				}  			}
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,DeleteRow,The following statement contains a magic number: table.TableModel.Selections.SelectCells(index' 0' index' 2);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,DetectorProgressChanged,The following statement contains a magic number: if (detectorData.counter % 10 != 0) return;
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,ScannerWorkerCompleted,The following statement contains a magic number: try              {                  Model.FoldersRow folder = model.AddFolder(uname' scannerData.folder' type);                  VisualizeFolder(folder);                  int row = table.TableModel.Rows.Count - 1;                  table.TableModel.Selections.SelectCells(row' 0' row' 2);                  table.EnsureVisible(row' 0);              }              catch (Exception ex)              {                  MessageBox.Show(String.Format("Unable to add new folder: Folder:'{0}'\nType:'{1}'\nUniqueName:'{2}'\nError: {3}"' name' type' uname' ex.Message)' "Save failed"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);              }
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,ScannerProgressChanged,The following statement contains a magic number: if (scannerData.counter % 10 != 0) return;
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Location = new System.Drawing.Point(633' 165);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Location = new System.Drawing.Point(633' 165);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Size = new System.Drawing.Size(75' 25);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Size = new System.Drawing.Size(75' 25);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.TabIndex = 4;
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(552' 165);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(552' 165);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 25);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 25);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 3;
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.advancedButton.Location = new System.Drawing.Point(12' 165);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.advancedButton.Location = new System.Drawing.Point(12' 165);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.advancedButton.Size = new System.Drawing.Size(138' 25);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.advancedButton.Size = new System.Drawing.Size(138' 25);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.advancedButton.TabIndex = 2;
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.labelTip.Font = new System.Drawing.Font("Arial"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(238)));
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.labelTip.Location = new System.Drawing.Point(118' 9);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.labelTip.Location = new System.Drawing.Point(118' 9);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.labelTip.Size = new System.Drawing.Size(291' 14);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.labelTip.Size = new System.Drawing.Size(291' 14);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.labelTip.TabIndex = 5;
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.Location = new System.Drawing.Point(13' 4);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.Location = new System.Drawing.Point(13' 4);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.Size = new System.Drawing.Size(97' 25);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.Size = new System.Drawing.Size(97' 25);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.TabIndex = 6;
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.imageListTypes.Images.SetKeyName(2' "HTML.png");
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.imageListTypes.Images.SetKeyName(3' "JS.png");
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.imageListTypes.Images.SetKeyName(4' "Ruby.png");
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.imageListTypes.Images.SetKeyName(5' "RoR.png");
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.imageListTypes.Images.SetKeyName(6' "Py.png");
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.imageListTypes.Images.SetKeyName(7' "PHP.png");
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.imageListTypes.Images.SetKeyName(8' "ASP.png");
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.imageListTypes.Images.SetKeyName(9' "Java.png");
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.imageListTypes.Images.SetKeyName(10' "Perl.png");
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.table.Location = new System.Drawing.Point(12' 33);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.table.Location = new System.Drawing.Point(12' 33);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.table.Size = new System.Drawing.Size(696' 126);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.table.Size = new System.Drawing.Size(696' 126);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(720' 200);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(720' 200);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(440' 200);
Magic Number,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(440' 200);
Magic Number,XRefresh,IncludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,AddIncludeFiltersRow,The following statement contains a magic number: if ((parentFoldersRowByFK_Folders_IncludeFilters != null)) {                      columnValuesArray[2] = parentFoldersRowByFK_Folders_IncludeFilters[0];                  }
Magic Number,XRefresh,ExcludeFiltersDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,AddExcludeFiltersRow,The following statement contains a magic number: if ((parentFoldersRowByFK_Folders_ExcludeFilters != null)) {                      columnValuesArray[2] = parentFoldersRowByFK_Folders_ExcludeFilters[0];                  }
Magic Number,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The following statement contains a magic number: this.columnPort.DefaultValue = ((int)(41258));
Magic Number,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The following statement contains a magic number: this.columnPortRange.DefaultValue = ((int)(16));
Magic Number,XRefresh,SettingsDataTable,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,InitClass,The following statement contains a magic number: this.columnWaitingTimeout.DefaultValue = ((int)(300));
Magic Number,XRefresh,FoldersRow,C:\repos\binaryage_xrefresh\src\winmonitor\Model.Designer.cs,RunningOutOfSpace,The following statement contains a magic number: if (activities.Count > MAX_PENDING_ACTIVITIES / 2) return true;
Magic Number,XRefresh,Context,C:\repos\binaryage_xrefresh\src\winmonitor\Context.cs,Context,The following statement contains a magic number: memTimer.Interval = 1000;
Magic Number,XRefresh,Context,C:\repos\binaryage_xrefresh\src\winmonitor\Context.cs,memTimer_Elapsed,The following statement contains a magic number: memTimer.Interval = 10000;
Magic Number,XRefresh,Context,C:\repos\binaryage_xrefresh\src\winmonitor\Context.cs,GetClientTypeIndex,The following statement contains a magic number: switch (type)  			{  				case "Firefox": return 6;  				case "Internet Explorer": return 5;  				case "Safari": return 7;  				case "Opera": return 8;  			}
Magic Number,XRefresh,Context,C:\repos\binaryage_xrefresh\src\winmonitor\Context.cs,GetClientTypeIndex,The following statement contains a magic number: switch (type)  			{  				case "Firefox": return 6;  				case "Internet Explorer": return 5;  				case "Safari": return 7;  				case "Opera": return 8;  			}
Magic Number,XRefresh,Context,C:\repos\binaryage_xrefresh\src\winmonitor\Context.cs,GetClientTypeIndex,The following statement contains a magic number: switch (type)  			{  				case "Firefox": return 6;  				case "Internet Explorer": return 5;  				case "Safari": return 7;  				case "Opera": return 8;  			}
Magic Number,XRefresh,Context,C:\repos\binaryage_xrefresh\src\winmonitor\Context.cs,GetClientTypeIndex,The following statement contains a magic number: switch (type)  			{  				case "Firefox": return 6;  				case "Internet Explorer": return 5;  				case "Safari": return 7;  				case "Opera": return 8;  			}
Magic Number,XRefresh,Context,C:\repos\binaryage_xrefresh\src\winmonitor\Context.cs,FlashIcon,The following statement contains a magic number: sysTray.StartAnimation(50' 0);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.panelDevider.Location = new System.Drawing.Point(0' 63);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.panelDevider.Size = new System.Drawing.Size(478' 2);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.panelDevider.Size = new System.Drawing.Size(478' 2);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.panelDevider.TabIndex = 3;
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.panelTop.Size = new System.Drawing.Size(478' 63);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.panelTop.Size = new System.Drawing.Size(478' 63);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.panelTop.TabIndex = 2;
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 16F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238)));
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 10);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 10);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(206' 26);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(206' 26);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(18' 39);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(18' 39);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(247' 13);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(247' 13);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.labelFolder.Font = new System.Drawing.Font("Microsoft Sans Serif"' 10F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(238)));
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.labelFolder.Location = new System.Drawing.Point(18' 73);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.labelFolder.Location = new System.Drawing.Point(18' 73);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.labelFolder.Size = new System.Drawing.Size(272' 17);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.labelFolder.Size = new System.Drawing.Size(272' 17);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.labelFolder.TabIndex = 4;
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(397' 115);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(397' 115);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.TabIndex = 5;
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.labelAction.Location = new System.Drawing.Point(21' 94);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.labelAction.Location = new System.Drawing.Point(21' 94);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.labelAction.Size = new System.Drawing.Size(48' 13);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.labelAction.Size = new System.Drawing.Size(48' 13);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.labelAction.TabIndex = 6;
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(478' 143);
Magic Number,XRefresh,ScannerProgress,C:\repos\binaryage_xrefresh\src\winmonitor\ScannerProgress.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(478' 143);
Magic Number,XRefresh,Server,C:\repos\binaryage_xrefresh\src\winmonitor\Server.cs,Start,The following statement contains a magic number: try { 				Model.SettingsRow settings = Context.Model.GetSettings();  				// create the listening socket 				socket = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp); 				IPAddress address = settings.LocalhostOnly ? IPAddress.Loopback : IPAddress.Any; 				IPEndPoint ipLocal = new IPEndPoint(address' settings.Port);  				// bind to local IP Address 				socket.Bind(ipLocal);  				// start listening 				socket.Listen(4);  				// create the call back for any client connections 				socket.BeginAccept(new AsyncCallback(OnClientConnect)' null);  				// add notification into log 				ActivityLog.Current.AddEventLog(Properties.Resources.Information' "Started listening for browser connections"); 			} 			catch (Exception e) 			{ 				Utils.LogException("Server start failed."' e); 			}
Magic Number,XRefresh,TimeoutEdit,C:\repos\binaryage_xrefresh\src\winmonitor\TimeoutEdit.cs,TimeoutEdit,The following statement contains a magic number: SetMaxLength(4);
Magic Number,XRefresh,FileMask,C:\repos\binaryage_xrefresh\src\winmonitor\Utils.cs,WildcardToRegex,The following statement contains a magic number: StringBuilder sb = new StringBuilder(wildcard.Length + 8);
Magic Number,XRefresh,Utils,C:\repos\binaryage_xrefresh\src\winmonitor\Utils.cs,ReduceMemoryUsage,The following statement contains a magic number: Utils.SetWorkingSet(500000' 100000);
Magic Number,XRefresh,Utils,C:\repos\binaryage_xrefresh\src\winmonitor\Utils.cs,ReduceMemoryUsage,The following statement contains a magic number: Utils.SetWorkingSet(500000' 100000);
Magic Number,XRefresh,ProjectTypeListBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnDrawItem,The following statement contains a magic number: if (e.Index < 0)    				// not an item' draw the text (indented)  				e.Graphics.DrawString(this.Text' e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left + imgs.ImageSize.Width' e.Bounds.Top + 1);    			else  			{    				// check if item is an ImageComboItem  				if (this.Items[e.Index].GetType() == typeof(ProjecTypeItem))  				{  					Rectangle r = e.Bounds;  					//r.X += 3;  					//r.Y += 1;    					// get item to draw  					ProjecTypeItem item = (ProjecTypeItem)this.Items[e.Index];    					// get forecolor & font  					Color forecolor = (item.ForeColor != Color.FromKnownColor(KnownColor.Transparent)) ? item.ForeColor : e.ForeColor;  					Font font = item.Mark ? new Font(e.Font' FontStyle.Bold) : e.Font;    					// -1: no image  					if (item.ImageIndex != -1)  					{  						// draw image' then draw text next to it  						this.ImageList.Draw(e.Graphics' r.Left + 1' r.Top + 1' item.ImageIndex);  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);  					}  					else  						// draw text (indented)  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);    					// draw text (indented)  					int rpart = 74;  					Font font2 = new Font(e.Font' FontStyle.Regular);  					e.Graphics.DrawString(item.Description' font2' new SolidBrush(forecolor)' r.Left + rpart + 4' r.Top + 2);    					if (item.Separator == true)  					{  						e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Gray))' new Point(r.Left' r.Bottom - 1)' new Point(r.Right' r.Bottom - 1));  					}    					e.Graphics.DrawLine(new Pen(new SolidBrush(Color.LightGray))' new Point(rpart' r.Top)' new Point(rpart' r.Bottom - 1));  				}  				else    					// it is not an ImageComboItem' draw it  					e.Graphics.DrawString(this.Items[e.Index].ToString()'  					  e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left +  					  imgs.ImageSize.Width' e.Bounds.Top + 1);    			}
Magic Number,XRefresh,ProjectTypeListBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnDrawItem,The following statement contains a magic number: if (e.Index < 0)    				// not an item' draw the text (indented)  				e.Graphics.DrawString(this.Text' e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left + imgs.ImageSize.Width' e.Bounds.Top + 1);    			else  			{    				// check if item is an ImageComboItem  				if (this.Items[e.Index].GetType() == typeof(ProjecTypeItem))  				{  					Rectangle r = e.Bounds;  					//r.X += 3;  					//r.Y += 1;    					// get item to draw  					ProjecTypeItem item = (ProjecTypeItem)this.Items[e.Index];    					// get forecolor & font  					Color forecolor = (item.ForeColor != Color.FromKnownColor(KnownColor.Transparent)) ? item.ForeColor : e.ForeColor;  					Font font = item.Mark ? new Font(e.Font' FontStyle.Bold) : e.Font;    					// -1: no image  					if (item.ImageIndex != -1)  					{  						// draw image' then draw text next to it  						this.ImageList.Draw(e.Graphics' r.Left + 1' r.Top + 1' item.ImageIndex);  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);  					}  					else  						// draw text (indented)  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);    					// draw text (indented)  					int rpart = 74;  					Font font2 = new Font(e.Font' FontStyle.Regular);  					e.Graphics.DrawString(item.Description' font2' new SolidBrush(forecolor)' r.Left + rpart + 4' r.Top + 2);    					if (item.Separator == true)  					{  						e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Gray))' new Point(r.Left' r.Bottom - 1)' new Point(r.Right' r.Bottom - 1));  					}    					e.Graphics.DrawLine(new Pen(new SolidBrush(Color.LightGray))' new Point(rpart' r.Top)' new Point(rpart' r.Bottom - 1));  				}  				else    					// it is not an ImageComboItem' draw it  					e.Graphics.DrawString(this.Items[e.Index].ToString()'  					  e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left +  					  imgs.ImageSize.Width' e.Bounds.Top + 1);    			}
Magic Number,XRefresh,ProjectTypeListBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnDrawItem,The following statement contains a magic number: if (e.Index < 0)    				// not an item' draw the text (indented)  				e.Graphics.DrawString(this.Text' e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left + imgs.ImageSize.Width' e.Bounds.Top + 1);    			else  			{    				// check if item is an ImageComboItem  				if (this.Items[e.Index].GetType() == typeof(ProjecTypeItem))  				{  					Rectangle r = e.Bounds;  					//r.X += 3;  					//r.Y += 1;    					// get item to draw  					ProjecTypeItem item = (ProjecTypeItem)this.Items[e.Index];    					// get forecolor & font  					Color forecolor = (item.ForeColor != Color.FromKnownColor(KnownColor.Transparent)) ? item.ForeColor : e.ForeColor;  					Font font = item.Mark ? new Font(e.Font' FontStyle.Bold) : e.Font;    					// -1: no image  					if (item.ImageIndex != -1)  					{  						// draw image' then draw text next to it  						this.ImageList.Draw(e.Graphics' r.Left + 1' r.Top + 1' item.ImageIndex);  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);  					}  					else  						// draw text (indented)  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);    					// draw text (indented)  					int rpart = 74;  					Font font2 = new Font(e.Font' FontStyle.Regular);  					e.Graphics.DrawString(item.Description' font2' new SolidBrush(forecolor)' r.Left + rpart + 4' r.Top + 2);    					if (item.Separator == true)  					{  						e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Gray))' new Point(r.Left' r.Bottom - 1)' new Point(r.Right' r.Bottom - 1));  					}    					e.Graphics.DrawLine(new Pen(new SolidBrush(Color.LightGray))' new Point(rpart' r.Top)' new Point(rpart' r.Bottom - 1));  				}  				else    					// it is not an ImageComboItem' draw it  					e.Graphics.DrawString(this.Items[e.Index].ToString()'  					  e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left +  					  imgs.ImageSize.Width' e.Bounds.Top + 1);    			}
Magic Number,XRefresh,ProjectTypeListBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnDrawItem,The following statement contains a magic number: if (e.Index < 0)    				// not an item' draw the text (indented)  				e.Graphics.DrawString(this.Text' e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left + imgs.ImageSize.Width' e.Bounds.Top + 1);    			else  			{    				// check if item is an ImageComboItem  				if (this.Items[e.Index].GetType() == typeof(ProjecTypeItem))  				{  					Rectangle r = e.Bounds;  					//r.X += 3;  					//r.Y += 1;    					// get item to draw  					ProjecTypeItem item = (ProjecTypeItem)this.Items[e.Index];    					// get forecolor & font  					Color forecolor = (item.ForeColor != Color.FromKnownColor(KnownColor.Transparent)) ? item.ForeColor : e.ForeColor;  					Font font = item.Mark ? new Font(e.Font' FontStyle.Bold) : e.Font;    					// -1: no image  					if (item.ImageIndex != -1)  					{  						// draw image' then draw text next to it  						this.ImageList.Draw(e.Graphics' r.Left + 1' r.Top + 1' item.ImageIndex);  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);  					}  					else  						// draw text (indented)  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);    					// draw text (indented)  					int rpart = 74;  					Font font2 = new Font(e.Font' FontStyle.Regular);  					e.Graphics.DrawString(item.Description' font2' new SolidBrush(forecolor)' r.Left + rpart + 4' r.Top + 2);    					if (item.Separator == true)  					{  						e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Gray))' new Point(r.Left' r.Bottom - 1)' new Point(r.Right' r.Bottom - 1));  					}    					e.Graphics.DrawLine(new Pen(new SolidBrush(Color.LightGray))' new Point(rpart' r.Top)' new Point(rpart' r.Bottom - 1));  				}  				else    					// it is not an ImageComboItem' draw it  					e.Graphics.DrawString(this.Items[e.Index].ToString()'  					  e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left +  					  imgs.ImageSize.Width' e.Bounds.Top + 1);    			}
Magic Number,XRefresh,ProjectTypeListBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnDrawItem,The following statement contains a magic number: if (e.Index < 0)    				// not an item' draw the text (indented)  				e.Graphics.DrawString(this.Text' e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left + imgs.ImageSize.Width' e.Bounds.Top + 1);    			else  			{    				// check if item is an ImageComboItem  				if (this.Items[e.Index].GetType() == typeof(ProjecTypeItem))  				{  					Rectangle r = e.Bounds;  					//r.X += 3;  					//r.Y += 1;    					// get item to draw  					ProjecTypeItem item = (ProjecTypeItem)this.Items[e.Index];    					// get forecolor & font  					Color forecolor = (item.ForeColor != Color.FromKnownColor(KnownColor.Transparent)) ? item.ForeColor : e.ForeColor;  					Font font = item.Mark ? new Font(e.Font' FontStyle.Bold) : e.Font;    					// -1: no image  					if (item.ImageIndex != -1)  					{  						// draw image' then draw text next to it  						this.ImageList.Draw(e.Graphics' r.Left + 1' r.Top + 1' item.ImageIndex);  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);  					}  					else  						// draw text (indented)  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);    					// draw text (indented)  					int rpart = 74;  					Font font2 = new Font(e.Font' FontStyle.Regular);  					e.Graphics.DrawString(item.Description' font2' new SolidBrush(forecolor)' r.Left + rpart + 4' r.Top + 2);    					if (item.Separator == true)  					{  						e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Gray))' new Point(r.Left' r.Bottom - 1)' new Point(r.Right' r.Bottom - 1));  					}    					e.Graphics.DrawLine(new Pen(new SolidBrush(Color.LightGray))' new Point(rpart' r.Top)' new Point(rpart' r.Bottom - 1));  				}  				else    					// it is not an ImageComboItem' draw it  					e.Graphics.DrawString(this.Items[e.Index].ToString()'  					  e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left +  					  imgs.ImageSize.Width' e.Bounds.Top + 1);    			}
Magic Number,XRefresh,ProjectTypeListBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnDrawItem,The following statement contains a magic number: if (e.Index < 0)    				// not an item' draw the text (indented)  				e.Graphics.DrawString(this.Text' e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left + imgs.ImageSize.Width' e.Bounds.Top + 1);    			else  			{    				// check if item is an ImageComboItem  				if (this.Items[e.Index].GetType() == typeof(ProjecTypeItem))  				{  					Rectangle r = e.Bounds;  					//r.X += 3;  					//r.Y += 1;    					// get item to draw  					ProjecTypeItem item = (ProjecTypeItem)this.Items[e.Index];    					// get forecolor & font  					Color forecolor = (item.ForeColor != Color.FromKnownColor(KnownColor.Transparent)) ? item.ForeColor : e.ForeColor;  					Font font = item.Mark ? new Font(e.Font' FontStyle.Bold) : e.Font;    					// -1: no image  					if (item.ImageIndex != -1)  					{  						// draw image' then draw text next to it  						this.ImageList.Draw(e.Graphics' r.Left + 1' r.Top + 1' item.ImageIndex);  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);  					}  					else  						// draw text (indented)  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);    					// draw text (indented)  					int rpart = 74;  					Font font2 = new Font(e.Font' FontStyle.Regular);  					e.Graphics.DrawString(item.Description' font2' new SolidBrush(forecolor)' r.Left + rpart + 4' r.Top + 2);    					if (item.Separator == true)  					{  						e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Gray))' new Point(r.Left' r.Bottom - 1)' new Point(r.Right' r.Bottom - 1));  					}    					e.Graphics.DrawLine(new Pen(new SolidBrush(Color.LightGray))' new Point(rpart' r.Top)' new Point(rpart' r.Bottom - 1));  				}  				else    					// it is not an ImageComboItem' draw it  					e.Graphics.DrawString(this.Items[e.Index].ToString()'  					  e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left +  					  imgs.ImageSize.Width' e.Bounds.Top + 1);    			}
Magic Number,XRefresh,ProjectTypeListBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnDrawItem,The following statement contains a magic number: if (e.Index < 0)    				// not an item' draw the text (indented)  				e.Graphics.DrawString(this.Text' e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left + imgs.ImageSize.Width' e.Bounds.Top + 1);    			else  			{    				// check if item is an ImageComboItem  				if (this.Items[e.Index].GetType() == typeof(ProjecTypeItem))  				{  					Rectangle r = e.Bounds;  					//r.X += 3;  					//r.Y += 1;    					// get item to draw  					ProjecTypeItem item = (ProjecTypeItem)this.Items[e.Index];    					// get forecolor & font  					Color forecolor = (item.ForeColor != Color.FromKnownColor(KnownColor.Transparent)) ? item.ForeColor : e.ForeColor;  					Font font = item.Mark ? new Font(e.Font' FontStyle.Bold) : e.Font;    					// -1: no image  					if (item.ImageIndex != -1)  					{  						// draw image' then draw text next to it  						this.ImageList.Draw(e.Graphics' r.Left + 1' r.Top + 1' item.ImageIndex);  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);  					}  					else  						// draw text (indented)  						e.Graphics.DrawString(item.Text' font' new SolidBrush(forecolor)' r.Left + imgs.ImageSize.Width + 3' r.Top + 2);    					// draw text (indented)  					int rpart = 74;  					Font font2 = new Font(e.Font' FontStyle.Regular);  					e.Graphics.DrawString(item.Description' font2' new SolidBrush(forecolor)' r.Left + rpart + 4' r.Top + 2);    					if (item.Separator == true)  					{  						e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Gray))' new Point(r.Left' r.Bottom - 1)' new Point(r.Right' r.Bottom - 1));  					}    					e.Graphics.DrawLine(new Pen(new SolidBrush(Color.LightGray))' new Point(rpart' r.Top)' new Point(rpart' r.Bottom - 1));  				}  				else    					// it is not an ImageComboItem' draw it  					e.Graphics.DrawString(this.Items[e.Index].ToString()'  					  e.Font' new SolidBrush(e.ForeColor)' e.Bounds.Left +  					  imgs.ImageSize.Width' e.Bounds.Top + 1);    			}
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,ProjectTypeCellEditor,The following statement contains a magic number: this.listbox.Size = new Size(100' 100);
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,ProjectTypeCellEditor,The following statement contains a magic number: this.listbox.Size = new Size(100' 100);
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,ProjectTypeCellEditor,The following statement contains a magic number: this.listbox.ItemHeight = 19;
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,ProjectTypeCellEditor,The following statement contains a magic number: this.maxDropDownItems = 16;
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 2' cellRect.Location.Y + 2);
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 2' cellRect.Location.Y + 2);
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 2' cellRect.Location.Y + 2);
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 1 - 6 - buttonWidth - 2' cellRect.Height - 2);
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 1 - 6 - buttonWidth - 2' cellRect.Height - 2);
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 1 - 6 - buttonWidth - 2' cellRect.Height - 2);
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.cellWidth = cellRect.Width - 4;
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,UpdateDropDownSize,The following statement contains a magic number: if (this.InternalDropDownWidth == -1)  			{  				this.DropDown.Width = 300;//this.cellWidth;  				this.listbox.Width = 300; // this.cellWidth;  			}
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,UpdateDropDownSize,The following statement contains a magic number: if (this.InternalDropDownWidth == -1)  			{  				this.DropDown.Width = 300;//this.cellWidth;  				this.listbox.Width = 300; // this.cellWidth;  			}
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,UpdateDropDownSize,The following statement contains a magic number: if (this.IntegralHeight)  			{  				int visItems = this.listbox.Height / this.ItemHeight;    				if (visItems > this.MaxDropDownItems)  				{  					visItems = this.MaxDropDownItems;  				}    				if (this.listbox.Items.Count < this.MaxDropDownItems)  				{  					visItems = this.listbox.Items.Count;  				}    				if (visItems == 0)  				{  					visItems = 1;  				}    				this.DropDown.Height = (visItems * this.ItemHeight) + 2;  				this.listbox.Height = visItems * this.ItemHeight;  			}
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,ShowDropDown,The following statement contains a magic number: if (this.InternalDropDownWidth == -1)  			{  				this.DropDown.Width = 300;//this.cellWidth;  				this.listbox.Width = 300; // this.cellWidth;  			}
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,ShowDropDown,The following statement contains a magic number: if (this.InternalDropDownWidth == -1)  			{  				this.DropDown.Width = 300;//this.cellWidth;  				this.listbox.Width = 300; // this.cellWidth;  			}
Magic Number,XRefresh,ProjectTypeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,ShowDropDown,The following statement contains a magic number: if (this.IntegralHeight)  			{  				int visItems = this.listbox.Height / this.ItemHeight;    				if (visItems > this.MaxDropDownItems)  				{  					visItems = this.MaxDropDownItems;  				}    				if (this.listbox.Items.Count < this.MaxDropDownItems)  				{  					visItems = this.listbox.Items.Count;  				}    				if (visItems == 0)  				{  					visItems = 1;  				}    				this.DropDown.Height = (visItems * this.ItemHeight) + 2;  				this.listbox.Height = visItems * this.ItemHeight;  			}
Magic Number,XRefresh,ProjectTypeCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,CalcDropDownButtonBounds,The following statement contains a magic number: buttonRect.X = this.ClientRectangle.Right - buttonRect.Width + 2;
Magic Number,XRefresh,ProjectTypeCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaint,The following statement contains a magic number: if (e.Cell.Text != null && e.Cell.Text.Length != 0)  			{  				textRect.Y += 1;  				textRect.X += 2;  				if (e.Enabled)  				{  					TextRenderer.DrawText(e.Graphics' e.Cell.Text' this.Font' textRect' this.ForeBrush.Color' TextFormatFlags.Left);  				}  				else  				{  					TextRenderer.DrawText(e.Graphics' e.Cell.Text' this.Font' textRect' SystemColors.GrayText' TextFormatFlags.Left);  				}  			}
Magic Number,XRefresh,ProjectTypeCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaint,The following statement contains a magic number: if (e.Focused && e.Enabled)  			{  				Rectangle focusRect = this.ClientRectangle;    				if (this.ShowDropDownButton)  				{  					focusRect.Width -= buttonRect.Width + 2;  				}    				ControlPaint.DrawFocusRectangle(e.Graphics' focusRect);  			}
Magic Number,XRefresh,GDITextCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4' cellRect.Location.Y + 2);
Magic Number,XRefresh,GDITextCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4' cellRect.Location.Y + 2);
Magic Number,XRefresh,GDITextCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 4 - 1' cellRect.Height - 2);
Magic Number,XRefresh,GDITextCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 4 - 1' cellRect.Height - 2);
Magic Number,XRefresh,FolderCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,FolderCellRenderer,The following statement contains a magic number: this.buttonWidth = 15;
Magic Number,XRefresh,FolderCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,CalcDropDownButtonBounds,The following statement contains a magic number: buttonRect.X = this.ClientRectangle.Right + 2;
Magic Number,XRefresh,FolderCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaintBackground,The following statement contains a magic number: imageRect.X -= 16;
Magic Number,XRefresh,FolderCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 16' cellRect.Location.Y + 2);
Magic Number,XRefresh,FolderCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 16' cellRect.Location.Y + 2);
Magic Number,XRefresh,FolderCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 16' cellRect.Location.Y + 2);
Magic Number,XRefresh,FolderCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 1 - 6 - buttonWidth - 16' cellRect.Height - 2);
Magic Number,XRefresh,FolderCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 1 - 6 - buttonWidth - 16' cellRect.Height - 2);
Magic Number,XRefresh,FolderCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 1 - 6 - buttonWidth - 16' cellRect.Height - 2);
Magic Number,XRefresh,GDIImageCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 16 + 6' cellRect.Location.Y + 2);
Magic Number,XRefresh,GDIImageCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 16 + 6' cellRect.Location.Y + 2);
Magic Number,XRefresh,GDIImageCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 16 + 6' cellRect.Location.Y + 2);
Magic Number,XRefresh,GDIImageCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 6 - 16 - 1' cellRect.Height - 2);
Magic Number,XRefresh,GDIImageCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 6 - 16 - 1' cellRect.Height - 2);
Magic Number,XRefresh,GDIImageCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 6 - 16 - 1' cellRect.Height - 2);
Magic Number,XRefresh,GDIImageCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaint,The following statement contains a magic number: if (e.Cell.Icon != null)  			{  				// work out the size and location of the image  				Rectangle imageRect = this.CalcImageRect(e.Cell.Image' e.Cell.ImageSizeMode' this.LineAlignment' this.Alignment);  				//imageRect.Y -= 1;  				imageRect.X += 1;  				imageRect.Width = 16;  				imageRect.Height = 16;    				e.Graphics.DrawIconUnstretched(e.Cell.Icon' imageRect);  			}
Magic Number,XRefresh,GDIImageCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaint,The following statement contains a magic number: if (e.Cell.Icon != null)  			{  				// work out the size and location of the image  				Rectangle imageRect = this.CalcImageRect(e.Cell.Image' e.Cell.ImageSizeMode' this.LineAlignment' this.Alignment);  				//imageRect.Y -= 1;  				imageRect.X += 1;  				imageRect.Width = 16;  				imageRect.Height = 16;    				e.Graphics.DrawIconUnstretched(e.Cell.Icon' imageRect);  			}
Magic Number,XRefresh,GDIImageCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaint,The following statement contains a magic number: if (this.DrawText)  			{  				if (e.Cell.Text != null && e.Cell.Text.Length != 0)  				{  					// rectangle the text will be drawn in  					Rectangle textRect = this.ClientRectangle;    					// take the imageRect into account so we don't   					// draw over it  					textRect.X += 18;//imageRect.Width;  					textRect.Width -= 18; // imageRect.Width;  					textRect.Y += 1;    					// check that we will be able to see the text  					if (textRect.Width > 0)  					{  						// draw the text  						if (e.Enabled)  						{  							TextRenderer.DrawText(e.Graphics' e.Cell.Text' this.Font' textRect' this.ForeBrush.Color' TextFormatFlags.Left);  						}  						else  						{  							TextRenderer.DrawText(e.Graphics' e.Cell.Text' this.Font' textRect' SystemColors.GrayText' TextFormatFlags.Left);  						}  					}  				}  			}
Magic Number,XRefresh,GDIImageCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaint,The following statement contains a magic number: if (this.DrawText)  			{  				if (e.Cell.Text != null && e.Cell.Text.Length != 0)  				{  					// rectangle the text will be drawn in  					Rectangle textRect = this.ClientRectangle;    					// take the imageRect into account so we don't   					// draw over it  					textRect.X += 18;//imageRect.Width;  					textRect.Width -= 18; // imageRect.Width;  					textRect.Y += 1;    					// check that we will be able to see the text  					if (textRect.Width > 0)  					{  						// draw the text  						if (e.Enabled)  						{  							TextRenderer.DrawText(e.Graphics' e.Cell.Text' this.Font' textRect' this.ForeBrush.Color' TextFormatFlags.Left);  						}  						else  						{  							TextRenderer.DrawText(e.Graphics' e.Cell.Text' this.Font' textRect' SystemColors.GrayText' TextFormatFlags.Left);  						}  					}  				}  			}
Magic Number,XRefresh,GDIImageCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaint,The following statement contains a magic number: if (e.Focused && e.Enabled)  			{  				Rectangle rect = this.ClientRectangle;  				rect.X += 19;  				rect.Width -= 19;  				ControlPaint.DrawFocusRectangle(e.Graphics' rect);  			}
Magic Number,XRefresh,GDIImageCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaint,The following statement contains a magic number: if (e.Focused && e.Enabled)  			{  				Rectangle rect = this.ClientRectangle;  				rect.X += 19;  				rect.Width -= 19;  				ControlPaint.DrawFocusRectangle(e.Graphics' rect);  			}
Magic Number,XRefresh,ProjectCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,CalcCheckRectangle,The following statement contains a magic number: r.Offset(-16' 1);
Magic Number,XRefresh,ProjectCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,CalcCheckRectangle,The following statement contains a magic number: r.Width = 16;
Magic Number,XRefresh,ProjectCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,CalcCheckRectangle,The following statement contains a magic number: r.Height = 16;
Magic Number,XRefresh,ProjectCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaint,The following statement contains a magic number: if (imageIndex >= 0)  			{  				imageList.Draw(e.Graphics' r.Left - 35' r.Top' imageIndex);  			}
Magic Number,XRefresh,ProjectCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 14 + 16 + 6' cellRect.Location.Y + 2);
Magic Number,XRefresh,ProjectCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 14 + 16 + 6' cellRect.Location.Y + 2);
Magic Number,XRefresh,ProjectCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 14 + 16 + 6' cellRect.Location.Y + 2);
Magic Number,XRefresh,ProjectCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 14 + 16 + 6' cellRect.Location.Y + 2);
Magic Number,XRefresh,ProjectCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 14 + 16 + 6' cellRect.Location.Y + 2);
Magic Number,XRefresh,ProjectCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 4 - 1 - 14 - 16 - 6' cellRect.Height - 2);
Magic Number,XRefresh,ProjectCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 4 - 1 - 14 - 16 - 6' cellRect.Height - 2);
Magic Number,XRefresh,ProjectCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 4 - 1 - 14 - 16 - 6' cellRect.Height - 2);
Magic Number,XRefresh,ProjectCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 4 - 1 - 14 - 16 - 6' cellRect.Height - 2);
Magic Number,XRefresh,ProjectCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 4 - 1 - 14 - 16 - 6' cellRect.Height - 2);
Magic Number,XRefresh,MaskCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,CalcCheckRectangle,The following statement contains a magic number: r.Offset(-35' 1);
Magic Number,XRefresh,MaskCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,CalcCheckRectangle,The following statement contains a magic number: r.Width = 16;
Magic Number,XRefresh,MaskCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,CalcCheckRectangle,The following statement contains a magic number: r.Height = 16;
Magic Number,XRefresh,MaskCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaint,The following statement contains a magic number: if (e.Cell.Icon != null)  			{  				// work out the size and location of the image  				Rectangle imageRect = this.CalcImageRect(e.Cell.Image' e.Cell.ImageSizeMode' this.LineAlignment' this.Alignment);  				//imageRect.Y -= 1;  				imageRect.X -=16;  				imageRect.Width = 16;  				imageRect.Height = 16;    				e.Graphics.DrawIconUnstretched(e.Cell.Icon' imageRect);  			}
Magic Number,XRefresh,MaskCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaint,The following statement contains a magic number: if (e.Cell.Icon != null)  			{  				// work out the size and location of the image  				Rectangle imageRect = this.CalcImageRect(e.Cell.Image' e.Cell.ImageSizeMode' this.LineAlignment' this.Alignment);  				//imageRect.Y -= 1;  				imageRect.X -=16;  				imageRect.Width = 16;  				imageRect.Height = 16;    				e.Graphics.DrawIconUnstretched(e.Cell.Icon' imageRect);  			}
Magic Number,XRefresh,MaskCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,OnPaint,The following statement contains a magic number: if (e.Cell.Icon != null)  			{  				// work out the size and location of the image  				Rectangle imageRect = this.CalcImageRect(e.Cell.Image' e.Cell.ImageSizeMode' this.LineAlignment' this.Alignment);  				//imageRect.Y -= 1;  				imageRect.X -=16;  				imageRect.Width = 16;  				imageRect.Height = 16;    				e.Graphics.DrawIconUnstretched(e.Cell.Icon' imageRect);  			}
Magic Number,XRefresh,MaskCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 14 + 16 + 6' cellRect.Location.Y + 2);
Magic Number,XRefresh,MaskCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 14 + 16 + 6' cellRect.Location.Y + 2);
Magic Number,XRefresh,MaskCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 14 + 16 + 6' cellRect.Location.Y + 2);
Magic Number,XRefresh,MaskCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 14 + 16 + 6' cellRect.Location.Y + 2);
Magic Number,XRefresh,MaskCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Location = new Point(cellRect.Location.X + 4 + 14 + 16 + 6' cellRect.Location.Y + 2);
Magic Number,XRefresh,MaskCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 4 - 1 - 14 - 16 - 6' cellRect.Height - 2);
Magic Number,XRefresh,MaskCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 4 - 1 - 14 - 16 - 6' cellRect.Height - 2);
Magic Number,XRefresh,MaskCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 4 - 1 - 14 - 16 - 6' cellRect.Height - 2);
Magic Number,XRefresh,MaskCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 4 - 1 - 14 - 16 - 6' cellRect.Height - 2);
Magic Number,XRefresh,MaskCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTableTweaks.cs,SetEditLocation,The following statement contains a magic number: this.TextBox.Size = new Size(cellRect.Width - 4 - 1 - 14 - 16 - 6' cellRect.Height - 2);
Magic Number,App.Client,EtchedLine,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\EtchedLine.cs,OnPaint,The following statement contains a magic number: if (this.Dock == DockStyle.Top)  			{  				int y0 = rect.Top;  				int y1 = rect.Top + 1;    				g.DrawLine(darkPen' rect.Left' y0' rect.Right' y0);  				g.DrawLine(lightPen' rect.Left' y1' rect.Right' y1);  			}  			else if (this.Dock == DockStyle.Bottom)  			{  				int y0 = rect.Bottom - 2;  				int y1 = rect.Bottom - 1;    				g.DrawLine(darkPen' rect.Left' y0' rect.Right' y0);  				g.DrawLine(lightPen' rect.Left' y1' rect.Right' y1);  			}
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.pagePanel.Location = new System.Drawing.Point(104' 0);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.pagePanel.Padding = new System.Windows.Forms.Padding(0' 0' 5' 0);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.pagePanel.Size = new System.Drawing.Size(435' 355);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.pagePanel.Size = new System.Drawing.Size(435' 355);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.pagePanel.TabIndex = 7;
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.leftPanel.Padding = new System.Windows.Forms.Padding(8);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.leftPanel.Size = new System.Drawing.Size(104' 355);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.leftPanel.Size = new System.Drawing.Size(104' 355);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.leftPanel.TabIndex = 8;
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.mozPane1.Location = new System.Drawing.Point(8' 8);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.mozPane1.Location = new System.Drawing.Point(8' 8);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.mozPane1.Size = new System.Drawing.Size(88' 339);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.mozPane1.Size = new System.Drawing.Size(88' 339);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.bottomPanel.Location = new System.Drawing.Point(0' 355);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.bottomPanel.Size = new System.Drawing.Size(539' 40);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.bottomPanel.Size = new System.Drawing.Size(539' 40);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.bottomPanel.TabIndex = 6;
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(368' 8);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point(368' 8);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 25);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size(75' 25);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 7;
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Location = new System.Drawing.Point(449' 8);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Location = new System.Drawing.Point(449' 8);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Size = new System.Drawing.Size(75' 25);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.Size = new System.Drawing.Size(75' 25);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.applyButton.TabIndex = 6;
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonReset.Location = new System.Drawing.Point(8' 8);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonReset.Location = new System.Drawing.Point(8' 8);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonReset.Size = new System.Drawing.Size(120' 25);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonReset.Size = new System.Drawing.Size(120' 25);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonReset.TabIndex = 5;
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(539' 395);
Magic Number,GUI.FirefoxDialog,FirefoxDialog,C:\repos\binaryage_xrefresh\src\winmonitor\FirefoxDialog\FirefoxDialog.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(539' 395);
Magic Number,FlexFieldControlLib,DecimalValue,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\DecimalValue.cs,GetCharacterSize,The following statement contains a magic number: const int MeasureCharCount = 10;
Magic Number,FlexFieldControlLib,FieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FieldControl.cs,FieldControl,The following statement contains a magic number: MaxLength = 3;
Magic Number,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,CalculateMinimumSize,The following statement contains a magic number: switch ( BorderStyle )           {              case BorderStyle.Fixed3D:                 minimumSize.Width += ( 2 * Fixed3DOffset.Width );                 minimumSize.Height = GetSuggestedHeight();                 break;                case BorderStyle.FixedSingle:                 minimumSize.Width += ( 2 * FixedSingleOffset.Width );                 minimumSize.Height = GetSuggestedHeight();                 break;           }
Magic Number,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,CalculateMinimumSize,The following statement contains a magic number: switch ( BorderStyle )           {              case BorderStyle.Fixed3D:                 minimumSize.Width += ( 2 * Fixed3DOffset.Width );                 minimumSize.Height = GetSuggestedHeight();                 break;                case BorderStyle.FixedSingle:                 minimumSize.Width += ( 2 * FixedSingleOffset.Width );                 minimumSize.Height = GetSuggestedHeight();                 break;           }
Magic Number,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,HandleMouseDown,The following statement contains a magic number: int midPointsCount = FieldCount * 2 - 1;
Magic Number,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,HandleMouseDown,The following statement contains a magic number: for ( int index = 0; index < FieldCount; ++index )           {              midPoints[index * 2] = _fieldControls[index].MidPoint;                if ( index < ( FieldCount - 1 ) )              {                 midPoints[( index * 2 ) + 1] = _separatorControls[index + 1].MidPoint;              }           }
Magic Number,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,HandleMouseDown,The following statement contains a magic number: for ( int index = 0; index < FieldCount; ++index )           {              midPoints[index * 2] = _fieldControls[index].MidPoint;                if ( index < ( FieldCount - 1 ) )              {                 midPoints[( index * 2 ) + 1] = _separatorControls[index + 1].MidPoint;              }           }
Magic Number,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,LayoutControls,The following statement contains a magic number: int offsetCount = 2 * FieldCount;
Magic Number,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,LayoutControls,The following statement contains a magic number: for ( int index = 0; index < FieldCount; ++index )           {              _separatorControls[index].Location = new Point( x' y );              x += _separatorControls[index].Width;                x += offsets[2 * index];                _fieldControls[index].Location = new Point( x' y );              x += _fieldControls[index].Width;                x += offsets[2 * ( FieldCount - index ) - 1];           }
Magic Number,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,LayoutControls,The following statement contains a magic number: for ( int index = 0; index < FieldCount; ++index )           {              _separatorControls[index].Location = new Point( x' y );              x += _separatorControls[index].Width;                x += offsets[2 * index];                _fieldControls[index].Location = new Point( x' y );              x += _fieldControls[index].Width;                x += offsets[2 * ( FieldCount - index ) - 1];           }
Magic Number,FlexFieldControlLib,HexadecimalValue,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\HexadecimalValue.cs,GetCharacterSize,The following statement contains a magic number: const int MeasureCharCount = 10;
Magic Number,CustomUIControls,ImageListPanel,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageListPanel.cs,Init,The following statement contains a magic number: for (int i=0;i<_nColumns;i++)  				for (int j=0;j<_nRows ;j++)  				{  					if ((j*_nColumns+i) < imageList.Images.Count)  						imageList.Draw(grfx'  							i*_nItemWidth+_nHSpace/2'  							j*_nItemHeight+nVSpace/2'  							imageList.ImageSize.Width'  							imageList.ImageSize.Height'  							j*_nColumns+i);  	  				}
Magic Number,CustomUIControls,ImageListPanel,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageListPanel.cs,Init,The following statement contains a magic number: for (int i=0;i<_nColumns;i++)  				for (int j=0;j<_nRows ;j++)  				{  					if ((j*_nColumns+i) < imageList.Images.Count)  						imageList.Draw(grfx'  							i*_nItemWidth+_nHSpace/2'  							j*_nItemHeight+nVSpace/2'  							imageList.ImageSize.Width'  							imageList.ImageSize.Height'  							j*_nColumns+i);  	  				}
Magic Number,CustomUIControls,ImageListPanel,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageListPanel.cs,OnPaintBackground,The following statement contains a magic number: if (_nCoordX!=-1 && _nCoordY!=-1 && (_nCoordY*_nColumns+_nCoordX)<_imageList.Images.Count)  			{  				// We draw the selection rectangle  				offscreenGrfx.FillRectangle(new SolidBrush(BackgroundOverColor)' _nCoordX*_nItemWidth + 1' _nCoordY*_nItemHeight + 1' _nItemWidth-1' _nItemHeight-1);  				if (_bIsMouseDown)  				{  					// Mouse Down aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2 + 1'  						_nCoordY*_nItemHeight + _nVSpace/2 + 1'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				else  				{  					// Normal aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2'  						_nCoordY*_nItemHeight + _nVSpace/2'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				// Border selection Rectangle  				offscreenGrfx.DrawRectangle(new Pen(BorderColor)' _nCoordX*_nItemWidth' _nCoordY*_nItemHeight' _nItemWidth' _nItemHeight);  			}
Magic Number,CustomUIControls,ImageListPanel,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageListPanel.cs,OnPaintBackground,The following statement contains a magic number: if (_nCoordX!=-1 && _nCoordY!=-1 && (_nCoordY*_nColumns+_nCoordX)<_imageList.Images.Count)  			{  				// We draw the selection rectangle  				offscreenGrfx.FillRectangle(new SolidBrush(BackgroundOverColor)' _nCoordX*_nItemWidth + 1' _nCoordY*_nItemHeight + 1' _nItemWidth-1' _nItemHeight-1);  				if (_bIsMouseDown)  				{  					// Mouse Down aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2 + 1'  						_nCoordY*_nItemHeight + _nVSpace/2 + 1'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				else  				{  					// Normal aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2'  						_nCoordY*_nItemHeight + _nVSpace/2'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				// Border selection Rectangle  				offscreenGrfx.DrawRectangle(new Pen(BorderColor)' _nCoordX*_nItemWidth' _nCoordY*_nItemHeight' _nItemWidth' _nItemHeight);  			}
Magic Number,CustomUIControls,ImageListPanel,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageListPanel.cs,OnPaintBackground,The following statement contains a magic number: if (_nCoordX!=-1 && _nCoordY!=-1 && (_nCoordY*_nColumns+_nCoordX)<_imageList.Images.Count)  			{  				// We draw the selection rectangle  				offscreenGrfx.FillRectangle(new SolidBrush(BackgroundOverColor)' _nCoordX*_nItemWidth + 1' _nCoordY*_nItemHeight + 1' _nItemWidth-1' _nItemHeight-1);  				if (_bIsMouseDown)  				{  					// Mouse Down aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2 + 1'  						_nCoordY*_nItemHeight + _nVSpace/2 + 1'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				else  				{  					// Normal aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2'  						_nCoordY*_nItemHeight + _nVSpace/2'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				// Border selection Rectangle  				offscreenGrfx.DrawRectangle(new Pen(BorderColor)' _nCoordX*_nItemWidth' _nCoordY*_nItemHeight' _nItemWidth' _nItemHeight);  			}
Magic Number,CustomUIControls,ImageListPanel,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageListPanel.cs,OnPaintBackground,The following statement contains a magic number: if (_nCoordX!=-1 && _nCoordY!=-1 && (_nCoordY*_nColumns+_nCoordX)<_imageList.Images.Count)  			{  				// We draw the selection rectangle  				offscreenGrfx.FillRectangle(new SolidBrush(BackgroundOverColor)' _nCoordX*_nItemWidth + 1' _nCoordY*_nItemHeight + 1' _nItemWidth-1' _nItemHeight-1);  				if (_bIsMouseDown)  				{  					// Mouse Down aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2 + 1'  						_nCoordY*_nItemHeight + _nVSpace/2 + 1'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				else  				{  					// Normal aspect for the image  					_imageList.Draw(offscreenGrfx'  						_nCoordX*_nItemWidth + _nHSpace/2'  						_nCoordY*_nItemHeight + _nVSpace/2'  						_imageList.ImageSize.Width'  						_imageList.ImageSize.Height'  						_nCoordY*_nColumns + _nCoordX);  				}  				// Border selection Rectangle  				offscreenGrfx.DrawRectangle(new Pen(BorderColor)' _nCoordX*_nItemWidth' _nCoordY*_nItemHeight' _nItemWidth' _nItemHeight);  			}
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.BackgroundColor = Color.FromArgb(241'241'241);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.BackgroundColor = Color.FromArgb(241'241'241);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.BackgroundColor = Color.FromArgb(241'241'241);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.BackgroundOverColor = Color.FromArgb(102'154'204);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.BackgroundOverColor = Color.FromArgb(102'154'204);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.BackgroundOverColor = Color.FromArgb(102'154'204);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.HLinesColor = Color.FromArgb(182'189'210);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.HLinesColor = Color.FromArgb(182'189'210);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.HLinesColor = Color.FromArgb(182'189'210);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.VLinesColor = Color.FromArgb(182'189'210);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.VLinesColor = Color.FromArgb(182'189'210);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.VLinesColor = Color.FromArgb(182'189'210);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.Init(imageList'12'12'6'(int)value);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.Init(imageList'12'12'6'(int)value);
Magic Number,Pabo.MozBar,ImageMapEditor,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageMapEditor.cs,EditValue,The following statement contains a magic number: m_imagePanel.Init(imageList'12'12'6'(int)value);
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: if (list!=null)  			{  				imageHeight = list.ImageSize.Height;  				imageWidth = list.ImageSize.Width;  			}  			else  			{  				imageHeight = 32;  				imageWidth = 32;  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: if (list!=null)  			{  				imageHeight = list.ImageSize.Height;  				imageWidth = list.ImageSize.Width;  			}  			else  			{  				imageHeight = 32;  				imageWidth = 32;  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following statement contains a magic number: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: if (list!=null)  			{  				// if so get Height and Width  				imageHeight = list.ImageSize.Height;  				imageWidth = list.ImageSize.Width;  			}  			else  			{  				// if not use default values  				imageHeight = 32;  				imageWidth = 32;  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: if (list!=null)  			{  				// if so get Height and Width  				imageHeight = list.ImageSize.Height;  				imageWidth = list.ImageSize.Width;  			}  			else  			{  				// if not use default values  				imageHeight = 32;  				imageWidth = 32;  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following statement contains a magic number: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Magic Number,Pabo.MozBar,MozPane,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,MozPane,The following statement contains a magic number: m_borderColor = Color.FromArgb(127'157'185);
Magic Number,Pabo.MozBar,MozPane,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,MozPane,The following statement contains a magic number: m_borderColor = Color.FromArgb(127'157'185);
Magic Number,Pabo.MozBar,MozPane,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,MozPane,The following statement contains a magic number: m_borderColor = Color.FromArgb(127'157'185);
Magic Number,Pabo.MozBar,MozPane,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,DoLayout,The following statement contains a magic number: switch (m_style)  			{  				case MozPaneStyle.Vertical:  // Vertical  				{  					// work out how wide to make the controls' and where  					// the top of the first control should be  					int y = this.DisplayRectangle.Y + m_padding.Vertical;  					int width = this.ClientRectangle.Width - (2*m_padding.Horizontal);  					// for each control in our list...  					for (int i=0; i<this.Items.Count; i++)  					{  						e = this.Items[i];  						// go to the next mozitem if this one is invisible and   						// it's parent is visible  						if (!e.Visible && e.Parent != null && e.Parent.Visible)  						{  							continue;  						}  						p = new Point(m_padding.Horizontal' y);  						// set the width and location of the control  						e.Location = p;  						e.Width = this.Width;  						// update the next starting point  						y += e.Height + m_padding.Vertical;  					}  					break;  				}  				case MozPaneStyle.Horizontal:  // Horizontal  				{  					int x = this.DisplayRectangle.X + m_padding.Horizontal;  					int height = this.ClientRectangle.Height - (2*m_padding.Vertical);  					for (int i=0; i<this.Items.Count; i++)  					{  						e = this.Items[i];  						if (!e.Visible && e.Parent != null && e.Parent.Visible)  						{  							continue;  						}  						p = new Point(x'm_padding.Vertical);  						e.Location = p;  						e.Height = height;  						x += e.Width + m_padding.Horizontal;  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozPane,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,DoLayout,The following statement contains a magic number: switch (m_style)  			{  				case MozPaneStyle.Vertical:  // Vertical  				{  					// work out how wide to make the controls' and where  					// the top of the first control should be  					int y = this.DisplayRectangle.Y + m_padding.Vertical;  					int width = this.ClientRectangle.Width - (2*m_padding.Horizontal);  					// for each control in our list...  					for (int i=0; i<this.Items.Count; i++)  					{  						e = this.Items[i];  						// go to the next mozitem if this one is invisible and   						// it's parent is visible  						if (!e.Visible && e.Parent != null && e.Parent.Visible)  						{  							continue;  						}  						p = new Point(m_padding.Horizontal' y);  						// set the width and location of the control  						e.Location = p;  						e.Width = this.Width;  						// update the next starting point  						y += e.Height + m_padding.Vertical;  					}  					break;  				}  				case MozPaneStyle.Horizontal:  // Horizontal  				{  					int x = this.DisplayRectangle.X + m_padding.Horizontal;  					int height = this.ClientRectangle.Height - (2*m_padding.Vertical);  					for (int i=0; i<this.Items.Count; i++)  					{  						e = this.Items[i];  						if (!e.Visible && e.Parent != null && e.Parent.Visible)  						{  							continue;  						}  						p = new Point(x'm_padding.Vertical);  						e.Location = p;  						e.Height = height;  						x += e.Width + m_padding.Horizontal;  					}  					break;  				}  			}
Magic Number,Pabo.MozBar,MozPane,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,GetThemeColors,The following statement contains a magic number: int EPB_NORMALGROUPBACKGROUND = 5;
Magic Number,Pabo.MozBar,MozPane,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,GetThemeColors,The following statement contains a magic number: int TMT_GRADIENTCOLOR1 = 3810;
Magic Number,Pabo.MozBar,MozPane,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,GetThemeColors,The following statement contains a magic number: int TMT_GRADIENTCOLOR2 = 3811;
Magic Number,Pabo.MozBar,PaddingCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,PaddingCollection,The following statement contains a magic number: m_horizontal = 2;
Magic Number,Pabo.MozBar,PaddingCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,PaddingCollection,The following statement contains a magic number: m_vertical = 2;
Magic Number,Pabo.MozBar,PaddingCollectionTypeConverter,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ConvertFrom,The following statement contains a magic number: if(value.GetType() == typeof(string))  				{  					// Parse property string  					string[] ss = value.ToString().Split(new char[] {';'}' 2);  					if (ss.Length==2)  					{  						// Create new PaddingCollection  						PaddingCollection item = new PaddingCollection((MozPane)context.Instance);   						// Set properties  						item.Horizontal = int.Parse(ss[0]);  						item.Vertical = int.Parse(ss[1]);   						return item;				  					}  				}
Magic Number,Pabo.MozBar,PaddingCollectionTypeConverter,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ConvertFrom,The following statement contains a magic number: if(value.GetType() == typeof(string))  				{  					// Parse property string  					string[] ss = value.ToString().Split(new char[] {';'}' 2);  					if (ss.Length==2)  					{  						// Create new PaddingCollection  						PaddingCollection item = new PaddingCollection((MozPane)context.Instance);   						// Set properties  						item.Horizontal = int.Parse(ss[0]);  						item.Vertical = int.Parse(ss[1]);   						return item;				  					}  				}
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_selected = Color.FromArgb(193'210'238);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_selected = Color.FromArgb(193'210'238);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_selected = Color.FromArgb(193'210'238);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_selectedBorder = Color.FromArgb(49'106'197);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_selectedBorder = Color.FromArgb(49'106'197);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_selectedBorder = Color.FromArgb(49'106'197);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_focus = Color.FromArgb(224'232'246);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_focus = Color.FromArgb(224'232'246);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_focus = Color.FromArgb(224'232'246);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_focusBorder = Color.FromArgb(152'180'226);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_focusBorder = Color.FromArgb(152'180'226);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_focusBorder = Color.FromArgb(152'180'226);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_divider = Color.FromArgb(127'157'185);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_divider = Color.FromArgb(127'157'185);
Magic Number,Pabo.MozBar,ColorCollection,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,ColorCollection,The following statement contains a magic number: m_divider = Color.FromArgb(127'157'185);
Magic Number,Pabo.MozBar,ScrollableControlWithScrollEvents,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ScrollableControlWithScrollEvents.cs,WndProc,The following statement contains a magic number: if ( m.Msg == WM_HSCROLL )   			{  				if ( HorizontalScroll != null )   				{  					uint wParam = (uint)m.WParam.ToInt32();  					SCROLLINFO si = new SCROLLINFO();  					si.cbSize = Marshal.SizeOf(si);  					si.fMask = SIF_ALL;  					bool ret = GetScrollInfo(this.Handle'SB_HORZ'ref si);  					HorizontalScroll( this'   						new MozScrollEventArgs(   							GetEventType( wParam & 0xffff)' (int)(wParam >> 16)'si ) );  				}  			}   			// or a vertical scroll message?  			else if ( m.Msg == WM_VSCROLL )  			{  				  				if ( VerticalScroll != null )  				{  					uint wParam = (uint)m.WParam.ToInt32();  					SCROLLINFO si = new SCROLLINFO();  					si.cbSize = Marshal.SizeOf(si);  					si.fMask = SIF_ALL;  					bool ret = GetScrollInfo(this.Handle'SB_VERT'ref si);  					VerticalScroll( this'   						new MozScrollEventArgs(   						GetEventType( wParam & 0xffff)' (int)(wParam >> 16)'si ) );  							  				}  			}
Magic Number,Pabo.MozBar,ScrollableControlWithScrollEvents,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ScrollableControlWithScrollEvents.cs,WndProc,The following statement contains a magic number: if ( m.Msg == WM_HSCROLL )   			{  				if ( HorizontalScroll != null )   				{  					uint wParam = (uint)m.WParam.ToInt32();  					SCROLLINFO si = new SCROLLINFO();  					si.cbSize = Marshal.SizeOf(si);  					si.fMask = SIF_ALL;  					bool ret = GetScrollInfo(this.Handle'SB_HORZ'ref si);  					HorizontalScroll( this'   						new MozScrollEventArgs(   							GetEventType( wParam & 0xffff)' (int)(wParam >> 16)'si ) );  				}  			}   			// or a vertical scroll message?  			else if ( m.Msg == WM_VSCROLL )  			{  				  				if ( VerticalScroll != null )  				{  					uint wParam = (uint)m.WParam.ToInt32();  					SCROLLINFO si = new SCROLLINFO();  					si.cbSize = Marshal.SizeOf(si);  					si.fMask = SIF_ALL;  					bool ret = GetScrollInfo(this.Handle'SB_VERT'ref si);  					VerticalScroll( this'   						new MozScrollEventArgs(   						GetEventType( wParam & 0xffff)' (int)(wParam >> 16)'si ) );  							  				}  			}
Magic Number,Pabo.MozBar,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ThemeManager.cs,_IsAppThemed,The following statement contains a magic number: try  			{  				// Check which version of ComCtl32 thats in use..  				DLLVERSIONINFO version = new DLLVERSIONINFO();  				version.cbSize = Marshal.SizeOf(typeof(DLLVERSIONINFO));  								  				int ret = DllGetVersion(ref version);  				// If MajorVersion > 5 themes are allowed.  				if (version.dwMajorVersion >= 6) 			  					return true;  				else  					return false;  			}  			catch (Exception)  			{  				return false;  			}
Magic Number,Abhinaba.SysTray,SysTray,C:\repos\binaryage_xrefresh\src\winmonitor\SysTray.cs,SysTray,The following statement contains a magic number: m_font = new Font(FontFamily.GenericSansSerif' 8);
Magic Number,Abhinaba.SysTray,SysTray,C:\repos\binaryage_xrefresh\src\winmonitor\SysTray.cs,SysTray,The following statement contains a magic number: m_timer.Interval = 100;
Magic Number,Abhinaba.SysTray,SysTray,C:\repos\binaryage_xrefresh\src\winmonitor\SysTray.cs,ShowText,The following statement contains a magic number: Bitmap bitmap = new Bitmap(16' 16);
Magic Number,Abhinaba.SysTray,SysTray,C:\repos\binaryage_xrefresh\src\winmonitor\SysTray.cs,ShowText,The following statement contains a magic number: Bitmap bitmap = new Bitmap(16' 16);
Magic Number,Abhinaba.SysTray,SysTray,C:\repos\binaryage_xrefresh\src\winmonitor\SysTray.cs,SetAnimationClip,The following statement contains a magic number: try  			{  				m_animationIcons = new Icon[bitmapStrip.Width / 16];  				for (int i = 0; i < m_animationIcons.Length; i++)  				{  					Rectangle rect = new Rectangle(i * 16' 0' 16' 16);  					Bitmap bmp = bitmapStrip.Clone(rect' bitmapStrip.PixelFormat);  					m_animationIcons[i] = Icon.FromHandle(bmp.GetHicon());  				}  			}  			catch (Exception)  			{  				// I was getting generic GDI+ exceptions from time to time  			}
Magic Number,Abhinaba.SysTray,SysTray,C:\repos\binaryage_xrefresh\src\winmonitor\SysTray.cs,SetAnimationClip,The following statement contains a magic number: try  			{  				m_animationIcons = new Icon[bitmapStrip.Width / 16];  				for (int i = 0; i < m_animationIcons.Length; i++)  				{  					Rectangle rect = new Rectangle(i * 16' 0' 16' 16);  					Bitmap bmp = bitmapStrip.Clone(rect' bitmapStrip.PixelFormat);  					m_animationIcons[i] = Icon.FromHandle(bmp.GetHicon());  				}  			}  			catch (Exception)  			{  				// I was getting generic GDI+ exceptions from time to time  			}
Magic Number,Abhinaba.SysTray,SysTray,C:\repos\binaryage_xrefresh\src\winmonitor\SysTray.cs,SetAnimationClip,The following statement contains a magic number: try  			{  				m_animationIcons = new Icon[bitmapStrip.Width / 16];  				for (int i = 0; i < m_animationIcons.Length; i++)  				{  					Rectangle rect = new Rectangle(i * 16' 0' 16' 16);  					Bitmap bmp = bitmapStrip.Clone(rect' bitmapStrip.PixelFormat);  					m_animationIcons[i] = Icon.FromHandle(bmp.GetHicon());  				}  			}  			catch (Exception)  			{  				// I was getting generic GDI+ exceptions from time to time  			}
Magic Number,Abhinaba.SysTray,SysTray,C:\repos\binaryage_xrefresh\src\winmonitor\SysTray.cs,SetAnimationClip,The following statement contains a magic number: try  			{  				m_animationIcons = new Icon[bitmapStrip.Width / 16];  				for (int i = 0; i < m_animationIcons.Length; i++)  				{  					Rectangle rect = new Rectangle(i * 16' 0' 16' 16);  					Bitmap bmp = bitmapStrip.Clone(rect' bitmapStrip.PixelFormat);  					m_animationIcons[i] = Icon.FromHandle(bmp.GetHicon());  				}  			}  			catch (Exception)  			{  				// I was getting generic GDI+ exceptions from time to time  			}
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.panelTop.Size = new System.Drawing.Size(402' 63);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.panelTop.Size = new System.Drawing.Size(402' 63);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 15);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 15);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(108' 31);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(108' 31);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelTitle.Location = new System.Drawing.Point(159' 30);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelTitle.Location = new System.Drawing.Point(159' 30);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelTitle.Size = new System.Drawing.Size(197' 13);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelTitle.Size = new System.Drawing.Size(197' 13);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.panelDevider.Location = new System.Drawing.Point(0' 63);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.panelDevider.Size = new System.Drawing.Size(402' 2);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.panelDevider.Size = new System.Drawing.Size(402' 2);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelCaption.Location = new System.Drawing.Point(13' 80);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelCaption.Location = new System.Drawing.Point(13' 80);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelCaption.Size = new System.Drawing.Size(196' 13);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelCaption.Size = new System.Drawing.Size(196' 13);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelCaption.TabIndex = 3;
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Location = new System.Drawing.Point(12' 105);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Location = new System.Drawing.Point(12' 105);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Size = new System.Drawing.Size(387' 51);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Size = new System.Drawing.Size(387' 51);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.TabIndex = 4;
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonNotSend.Location = new System.Drawing.Point(315' 198);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonNotSend.Location = new System.Drawing.Point(315' 198);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonNotSend.Size = new System.Drawing.Size(75' 23);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonNotSend.Size = new System.Drawing.Size(75' 23);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonNotSend.TabIndex = 6;
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelData.Location = new System.Drawing.Point(13' 162);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelData.Location = new System.Drawing.Point(13' 162);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelData.Size = new System.Drawing.Size(271' 13);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelData.Size = new System.Drawing.Size(271' 13);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelData.TabIndex = 8;
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRestart.Location = new System.Drawing.Point(16' 202);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRestart.Location = new System.Drawing.Point(16' 202);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRestart.Size = new System.Drawing.Size(107' 17);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRestart.Size = new System.Drawing.Size(107' 17);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRestart.TabIndex = 5;
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(402' 233);
Magic Number,Zayko.Dialogs.UnhandledExceptionDlg,CustomExceptionDialog,C:\repos\binaryage_xrefresh\src\winmonitor\CustomExceptionDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(402' 233);
Magic Number,XPTable.Editors,ColorCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorCellEditor,The following statement contains a magic number: this.DropDown.Width = this.colorpicker.Width + 2;
Magic Number,XPTable.Editors,ColorCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorCellEditor,The following statement contains a magic number: this.DropDown.Height = this.colorpicker.Height + 2;
Magic Number,XPTable.Editors,ColorCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorToString,The following statement contains a magic number: if (color.IsEmpty)  			{  				return "Empty";  			}  			else if (color.IsNamedColor || color.IsSystemColor)  			{  				return color.Name;  			}  			else  			{  				string s = "";  				  				if (color.A != 255)  				{  					s += color.A + "' ";  				}    				s += color.R +"' " + color.G + "' " + color.B;    				return s;  			}
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.tabControl.Size = new Size(this.DefaultSize.Width - 2' this.DefaultSize.Height - 2);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.tabControl.Size = new Size(this.DefaultSize.Width - 2' this.DefaultSize.Height - 2);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.customTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.customTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.customTabPage.Size = new System.Drawing.Size(192' 214);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.customTabPage.Size = new System.Drawing.Size(192' 214);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.webTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.webTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.webTabPage.Size = new System.Drawing.Size(192' 214);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.webTabPage.Size = new System.Drawing.Size(192' 214);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.systemTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.systemTabPage.Location = new System.Drawing.Point(4' 22);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.systemTabPage.Size = new System.Drawing.Size(192' 214);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.systemTabPage.Size = new System.Drawing.Size(192' 214);
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPicker,The following statement contains a magic number: this.systemTabPage.TabIndex = 2;
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetSystemColors,The following statement contains a magic number: int end = 26;
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,AdjustListBoxItemHeight,The following statement contains a magic number: this.webListBox.ItemHeight = this.Font.Height + 2;
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,AdjustListBoxItemHeight,The following statement contains a magic number: this.systemListBox.ItemHeight = this.Font.Height + 2;
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnListDrawItem,The following statement contains a magic number: using (SolidBrush brush = new SolidBrush((Color) item))  				{  					die.Graphics.FillRectangle(brush' new Rectangle(die.Bounds.X + 2' die.Bounds.Y + 2' 21' die.Bounds.Height - 4));  				}
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnListDrawItem,The following statement contains a magic number: using (SolidBrush brush = new SolidBrush((Color) item))  				{  					die.Graphics.FillRectangle(brush' new Rectangle(die.Bounds.X + 2' die.Bounds.Y + 2' 21' die.Bounds.Height - 4));  				}
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnListDrawItem,The following statement contains a magic number: using (SolidBrush brush = new SolidBrush((Color) item))  				{  					die.Graphics.FillRectangle(brush' new Rectangle(die.Bounds.X + 2' die.Bounds.Y + 2' 21' die.Bounds.Height - 4));  				}
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnListDrawItem,The following statement contains a magic number: using (SolidBrush brush = new SolidBrush((Color) item))  				{  					die.Graphics.FillRectangle(brush' new Rectangle(die.Bounds.X + 2' die.Bounds.Y + 2' 21' die.Bounds.Height - 4));  				}
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnListDrawItem,The following statement contains a magic number: die.Graphics.DrawRectangle(SystemPens.WindowText' new Rectangle(die.Bounds.X + 2' die.Bounds.Y + 2' 21' (die.Bounds.Height - 4) - 1));
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnListDrawItem,The following statement contains a magic number: die.Graphics.DrawRectangle(SystemPens.WindowText' new Rectangle(die.Bounds.X + 2' die.Bounds.Y + 2' 21' (die.Bounds.Height - 4) - 1));
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnListDrawItem,The following statement contains a magic number: die.Graphics.DrawRectangle(SystemPens.WindowText' new Rectangle(die.Bounds.X + 2' die.Bounds.Y + 2' 21' (die.Bounds.Height - 4) - 1));
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnListDrawItem,The following statement contains a magic number: die.Graphics.DrawRectangle(SystemPens.WindowText' new Rectangle(die.Bounds.X + 2' die.Bounds.Y + 2' 21' (die.Bounds.Height - 4) - 1));
Magic Number,XPTable.Editors,ColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnListDrawItem,The following statement contains a magic number: using (Brush brush = new SolidBrush(die.ForeColor))  				{  					die.Graphics.DrawString(((Color) item).Name' this.Font' brush' (float) (die.Bounds.X + 26)' (float) die.Bounds.Y);  				}
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPalette,The following statement contains a magic number: this.Size = new Size(200' 200);
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ColorPalette,The following statement contains a magic number: this.Size = new Size(200' 200);
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetCellFromMouse,The following statement contains a magic number: for (int i=0; i<CELLS_DOWN; i++)  					{  						for (int j=0; j<CELLS_ACROSS; j++)  						{  							cellRect.X = MARGIN + (j * (CELL_SIZE + MARGIN));  							cellRect.Y = MARGIN + (MARGIN / 2) + (i * (CELL_SIZE + MARGIN));  							cellRect.Width = CELL_SIZE;  							cellRect.Height = CELL_SIZE;    							if (i >= (CELLS - CELLS_CUSTOM) / CELLS_ACROSS)  							{  								cellRect.Y += MARGIN;  							}  							  							if (cellRect.Contains(x' y))  							{  								return new Point(j' i);  							}  						}  					}
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InvalidateSelection,The following statement contains a magic number: for (int i=0; i<CELLS_DOWN; i++)  					{  						for (int j=0; j<CELLS_ACROSS; j++)  						{  							if (this.SelectedColor.Equals(this.GetColorFromCell(j' i)))  							{  								cellRect.X = MARGIN + (j * (CELL_SIZE + MARGIN));  								cellRect.Y = MARGIN + (MARGIN / 2) + (i * (CELL_SIZE + MARGIN));  								cellRect.Width = CELL_SIZE;  								cellRect.Height = CELL_SIZE;    								if (i >= (CELLS - CELLS_CUSTOM) / CELLS_ACROSS)  								{  									cellRect.Y += MARGIN;  								}  							  								base.Invalidate(Rectangle.Inflate(cellRect' 5' 5));  							  								break;  							}  						}  					}
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InvalidateSelection,The following statement contains a magic number: for (int i=0; i<CELLS_DOWN; i++)  					{  						for (int j=0; j<CELLS_ACROSS; j++)  						{  							if (this.SelectedColor.Equals(this.GetColorFromCell(j' i)))  							{  								cellRect.X = MARGIN + (j * (CELL_SIZE + MARGIN));  								cellRect.Y = MARGIN + (MARGIN / 2) + (i * (CELL_SIZE + MARGIN));  								cellRect.Width = CELL_SIZE;  								cellRect.Height = CELL_SIZE;    								if (i >= (CELLS - CELLS_CUSTOM) / CELLS_ACROSS)  								{  									cellRect.Y += MARGIN;  								}  							  								base.Invalidate(Rectangle.Inflate(cellRect' 5' 5));  							  								break;  							}  						}  					}
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InvalidateSelection,The following statement contains a magic number: for (int i=0; i<CELLS_DOWN; i++)  					{  						for (int j=0; j<CELLS_ACROSS; j++)  						{  							if (this.SelectedColor.Equals(this.GetColorFromCell(j' i)))  							{  								cellRect.X = MARGIN + (j * (CELL_SIZE + MARGIN));  								cellRect.Y = MARGIN + (MARGIN / 2) + (i * (CELL_SIZE + MARGIN));  								cellRect.Width = CELL_SIZE;  								cellRect.Height = CELL_SIZE;    								if (i >= (CELLS - CELLS_CUSTOM) / CELLS_ACROSS)  								{  									cellRect.Y += MARGIN;  								}  							  								base.Invalidate(Rectangle.Inflate(cellRect' 5' 5));  							  								break;  							}  						}  					}
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InvalidateFocus,The following statement contains a magic number: cellRect.Y = MARGIN + (MARGIN / 2) + (this.focus.Y * (CELL_SIZE + MARGIN));
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InvalidateFocus,The following statement contains a magic number: base.Invalidate(Rectangle.Inflate(cellRect' 5' 5));
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InvalidateFocus,The following statement contains a magic number: base.Invalidate(Rectangle.Inflate(cellRect' 5' 5));
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InvalidateFocus,The following statement contains a magic number: NativeMethods.NotifyWinEvent(0x8005' base.Handle' -4' 1 + this.GetColorIndexFromCell(this.focus.X' this.focus.Y));
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ProcessDialogKey,The following statement contains a magic number: if (keyData == Keys.F2)  					{  						int index = -1;    						if ((this.focus.X != -1) && (this.focus.Y != -1))  						{  							index = this.focus.X + (8 * this.focus.Y);  						}  					  						if (index >= (CELLS - CELLS_CUSTOM) && index < CELLS)  						{  							this.LaunchDialog(index);  						  							return true;  						}  					}
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnPaint,The following statement contains a magic number: for (int i=0; i<CELLS_DOWN; i++)  					{  						for (int j=0; j<CELLS_ACROSS; j++)  						{  							Color color = this.GetColorFromCell(j' i);  						  							cellRect.X = MARGIN + (j * (CELL_SIZE + MARGIN));  							cellRect.Y = MARGIN + (MARGIN / 2) + (i * (CELL_SIZE + MARGIN));  							cellRect.Width = CELL_SIZE;  							cellRect.Height = CELL_SIZE;    							if (i >= (CELLS - CELLS_CUSTOM) / CELLS_ACROSS)  							{  								cellRect.Y += MARGIN;  							}  						  							using (SolidBrush brush = new SolidBrush(color))  							{  								e.Graphics.FillRectangle(brush' cellRect.X' cellRect.Y' cellRect.Width+1' cellRect.Height+1);  							}  						  							e.Graphics.DrawRectangle(SystemPens.ControlDark' cellRect);  						  							if (color.Equals(this.SelectedColor) && !selected)  							{  								e.Graphics.DrawRectangle(SystemPens.ControlText' cellRect.X-1' cellRect.Y-1' cellRect.Width+2' cellRect.Height+2);  						  								selected = true;  							}    							if (this.focus.X == j && this.focus.Y == i && this.Focused)  							{  								ControlPaint.DrawFocusRectangle(e.Graphics' new Rectangle(cellRect.X-3' cellRect.Y-3' cellRect.Width+7' cellRect.Height+7)/*' SystemColors.ControlText' SystemColors.Control*/);  							}  						}  					}
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnPaint,The following statement contains a magic number: for (int i=0; i<CELLS_DOWN; i++)  					{  						for (int j=0; j<CELLS_ACROSS; j++)  						{  							Color color = this.GetColorFromCell(j' i);  						  							cellRect.X = MARGIN + (j * (CELL_SIZE + MARGIN));  							cellRect.Y = MARGIN + (MARGIN / 2) + (i * (CELL_SIZE + MARGIN));  							cellRect.Width = CELL_SIZE;  							cellRect.Height = CELL_SIZE;    							if (i >= (CELLS - CELLS_CUSTOM) / CELLS_ACROSS)  							{  								cellRect.Y += MARGIN;  							}  						  							using (SolidBrush brush = new SolidBrush(color))  							{  								e.Graphics.FillRectangle(brush' cellRect.X' cellRect.Y' cellRect.Width+1' cellRect.Height+1);  							}  						  							e.Graphics.DrawRectangle(SystemPens.ControlDark' cellRect);  						  							if (color.Equals(this.SelectedColor) && !selected)  							{  								e.Graphics.DrawRectangle(SystemPens.ControlText' cellRect.X-1' cellRect.Y-1' cellRect.Width+2' cellRect.Height+2);  						  								selected = true;  							}    							if (this.focus.X == j && this.focus.Y == i && this.Focused)  							{  								ControlPaint.DrawFocusRectangle(e.Graphics' new Rectangle(cellRect.X-3' cellRect.Y-3' cellRect.Width+7' cellRect.Height+7)/*' SystemColors.ControlText' SystemColors.Control*/);  							}  						}  					}
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnPaint,The following statement contains a magic number: for (int i=0; i<CELLS_DOWN; i++)  					{  						for (int j=0; j<CELLS_ACROSS; j++)  						{  							Color color = this.GetColorFromCell(j' i);  						  							cellRect.X = MARGIN + (j * (CELL_SIZE + MARGIN));  							cellRect.Y = MARGIN + (MARGIN / 2) + (i * (CELL_SIZE + MARGIN));  							cellRect.Width = CELL_SIZE;  							cellRect.Height = CELL_SIZE;    							if (i >= (CELLS - CELLS_CUSTOM) / CELLS_ACROSS)  							{  								cellRect.Y += MARGIN;  							}  						  							using (SolidBrush brush = new SolidBrush(color))  							{  								e.Graphics.FillRectangle(brush' cellRect.X' cellRect.Y' cellRect.Width+1' cellRect.Height+1);  							}  						  							e.Graphics.DrawRectangle(SystemPens.ControlDark' cellRect);  						  							if (color.Equals(this.SelectedColor) && !selected)  							{  								e.Graphics.DrawRectangle(SystemPens.ControlText' cellRect.X-1' cellRect.Y-1' cellRect.Width+2' cellRect.Height+2);  						  								selected = true;  							}    							if (this.focus.X == j && this.focus.Y == i && this.Focused)  							{  								ControlPaint.DrawFocusRectangle(e.Graphics' new Rectangle(cellRect.X-3' cellRect.Y-3' cellRect.Width+7' cellRect.Height+7)/*' SystemColors.ControlText' SystemColors.Control*/);  							}  						}  					}
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnPaint,The following statement contains a magic number: for (int i=0; i<CELLS_DOWN; i++)  					{  						for (int j=0; j<CELLS_ACROSS; j++)  						{  							Color color = this.GetColorFromCell(j' i);  						  							cellRect.X = MARGIN + (j * (CELL_SIZE + MARGIN));  							cellRect.Y = MARGIN + (MARGIN / 2) + (i * (CELL_SIZE + MARGIN));  							cellRect.Width = CELL_SIZE;  							cellRect.Height = CELL_SIZE;    							if (i >= (CELLS - CELLS_CUSTOM) / CELLS_ACROSS)  							{  								cellRect.Y += MARGIN;  							}  						  							using (SolidBrush brush = new SolidBrush(color))  							{  								e.Graphics.FillRectangle(brush' cellRect.X' cellRect.Y' cellRect.Width+1' cellRect.Height+1);  							}  						  							e.Graphics.DrawRectangle(SystemPens.ControlDark' cellRect);  						  							if (color.Equals(this.SelectedColor) && !selected)  							{  								e.Graphics.DrawRectangle(SystemPens.ControlText' cellRect.X-1' cellRect.Y-1' cellRect.Width+2' cellRect.Height+2);  						  								selected = true;  							}    							if (this.focus.X == j && this.focus.Y == i && this.Focused)  							{  								ControlPaint.DrawFocusRectangle(e.Graphics' new Rectangle(cellRect.X-3' cellRect.Y-3' cellRect.Width+7' cellRect.Height+7)/*' SystemColors.ControlText' SystemColors.Control*/);  							}  						}  					}
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnPaint,The following statement contains a magic number: for (int i=0; i<CELLS_DOWN; i++)  					{  						for (int j=0; j<CELLS_ACROSS; j++)  						{  							Color color = this.GetColorFromCell(j' i);  						  							cellRect.X = MARGIN + (j * (CELL_SIZE + MARGIN));  							cellRect.Y = MARGIN + (MARGIN / 2) + (i * (CELL_SIZE + MARGIN));  							cellRect.Width = CELL_SIZE;  							cellRect.Height = CELL_SIZE;    							if (i >= (CELLS - CELLS_CUSTOM) / CELLS_ACROSS)  							{  								cellRect.Y += MARGIN;  							}  						  							using (SolidBrush brush = new SolidBrush(color))  							{  								e.Graphics.FillRectangle(brush' cellRect.X' cellRect.Y' cellRect.Width+1' cellRect.Height+1);  							}  						  							e.Graphics.DrawRectangle(SystemPens.ControlDark' cellRect);  						  							if (color.Equals(this.SelectedColor) && !selected)  							{  								e.Graphics.DrawRectangle(SystemPens.ControlText' cellRect.X-1' cellRect.Y-1' cellRect.Width+2' cellRect.Height+2);  						  								selected = true;  							}    							if (this.focus.X == j && this.focus.Y == i && this.Focused)  							{  								ControlPaint.DrawFocusRectangle(e.Graphics' new Rectangle(cellRect.X-3' cellRect.Y-3' cellRect.Width+7' cellRect.Height+7)/*' SystemColors.ControlText' SystemColors.Control*/);  							}  						}  					}
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnPaint,The following statement contains a magic number: for (int i=0; i<CELLS_DOWN; i++)  					{  						for (int j=0; j<CELLS_ACROSS; j++)  						{  							Color color = this.GetColorFromCell(j' i);  						  							cellRect.X = MARGIN + (j * (CELL_SIZE + MARGIN));  							cellRect.Y = MARGIN + (MARGIN / 2) + (i * (CELL_SIZE + MARGIN));  							cellRect.Width = CELL_SIZE;  							cellRect.Height = CELL_SIZE;    							if (i >= (CELLS - CELLS_CUSTOM) / CELLS_ACROSS)  							{  								cellRect.Y += MARGIN;  							}  						  							using (SolidBrush brush = new SolidBrush(color))  							{  								e.Graphics.FillRectangle(brush' cellRect.X' cellRect.Y' cellRect.Width+1' cellRect.Height+1);  							}  						  							e.Graphics.DrawRectangle(SystemPens.ControlDark' cellRect);  						  							if (color.Equals(this.SelectedColor) && !selected)  							{  								e.Graphics.DrawRectangle(SystemPens.ControlText' cellRect.X-1' cellRect.Y-1' cellRect.Width+2' cellRect.Height+2);  						  								selected = true;  							}    							if (this.focus.X == j && this.focus.Y == i && this.Focused)  							{  								ControlPaint.DrawFocusRectangle(e.Graphics' new Rectangle(cellRect.X-3' cellRect.Y-3' cellRect.Width+7' cellRect.Height+7)/*' SystemColors.ControlText' SystemColors.Control*/);  							}  						}  					}
Magic Number,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnPaint,The following statement contains a magic number: for (int i=0; i<CELLS_DOWN; i++)  					{  						for (int j=0; j<CELLS_ACROSS; j++)  						{  							Color color = this.GetColorFromCell(j' i);  						  							cellRect.X = MARGIN + (j * (CELL_SIZE + MARGIN));  							cellRect.Y = MARGIN + (MARGIN / 2) + (i * (CELL_SIZE + MARGIN));  							cellRect.Width = CELL_SIZE;  							cellRect.Height = CELL_SIZE;    							if (i >= (CELLS - CELLS_CUSTOM) / CELLS_ACROSS)  							{  								cellRect.Y += MARGIN;  							}  						  							using (SolidBrush brush = new SolidBrush(color))  							{  								e.Graphics.FillRectangle(brush' cellRect.X' cellRect.Y' cellRect.Width+1' cellRect.Height+1);  							}  						  							e.Graphics.DrawRectangle(SystemPens.ControlDark' cellRect);  						  							if (color.Equals(this.SelectedColor) && !selected)  							{  								e.Graphics.DrawRectangle(SystemPens.ControlText' cellRect.X-1' cellRect.Y-1' cellRect.Width+2' cellRect.Height+2);  						  								selected = true;  							}    							if (this.focus.X == j && this.focus.Y == i && this.Focused)  							{  								ControlPaint.DrawFocusRectangle(e.Graphics' new Rectangle(cellRect.X-3' cellRect.Y-3' cellRect.Width+7' cellRect.Height+7)/*' SystemColors.ControlText' SystemColors.Control*/);  							}  						}  					}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,frmColorPicker,The following statement contains a magic number: m_txt_Hue.Text =		Round(m_hsl.H * 360).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,frmColorPicker,The following statement contains a magic number: m_txt_Sat.Text =		Round(m_hsl.S * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,frmColorPicker,The following statement contains a magic number: m_txt_Black.Text =		Round(m_hsl.L * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,frmColorPicker,The following statement contains a magic number: m_txt_Cyan.Text =		Round(m_cmyk.C * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,frmColorPicker,The following statement contains a magic number: m_txt_Magenta.Text =	Round(m_cmyk.M * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,frmColorPicker,The following statement contains a magic number: m_txt_Yellow.Text =		Round(m_cmyk.Y * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,frmColorPicker,The following statement contains a magic number: m_txt_K.Text =			Round(m_cmyk.K * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_SelectColor.Location = new System.Drawing.Point(10' 10);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_SelectColor.Location = new System.Drawing.Point(10' 10);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_SelectColor.Size = new System.Drawing.Size(260' 20);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_SelectColor.Size = new System.Drawing.Size(260' 20);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_pbx_BlankBox.Location = new System.Drawing.Point(316' 30);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_pbx_BlankBox.Location = new System.Drawing.Point(316' 30);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_pbx_BlankBox.Size = new System.Drawing.Size(62' 70);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_pbx_BlankBox.Size = new System.Drawing.Size(62' 70);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_pbx_BlankBox.TabIndex = 3;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_OK.Location = new System.Drawing.Point(412' 11);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_OK.Location = new System.Drawing.Point(412' 11);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_OK.Size = new System.Drawing.Size(72' 23);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_OK.Size = new System.Drawing.Size(72' 23);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_OK.TabIndex = 4;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_Cancel.Location = new System.Drawing.Point(412' 43);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_Cancel.Location = new System.Drawing.Point(412' 43);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_Cancel.Size = new System.Drawing.Size(72' 23);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_Cancel.Size = new System.Drawing.Size(72' 23);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_Cancel.TabIndex = 5;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hue.Location = new System.Drawing.Point(351' 115);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hue.Location = new System.Drawing.Point(351' 115);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hue.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hue.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hue.TabIndex = 6;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Sat.Location = new System.Drawing.Point(351' 140);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Sat.Location = new System.Drawing.Point(351' 140);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Sat.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Sat.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Sat.TabIndex = 7;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Black.Location = new System.Drawing.Point(351' 165);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Black.Location = new System.Drawing.Point(351' 165);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Black.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Black.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Black.TabIndex = 8;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Red.Location = new System.Drawing.Point(351' 195);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Red.Location = new System.Drawing.Point(351' 195);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Red.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Red.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Red.TabIndex = 9;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Green.Location = new System.Drawing.Point(351' 220);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Green.Location = new System.Drawing.Point(351' 220);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Green.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Green.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Green.TabIndex = 10;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Blue.Location = new System.Drawing.Point(351' 245);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Blue.Location = new System.Drawing.Point(351' 245);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Blue.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Blue.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Blue.TabIndex = 11;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Lum.Location = new System.Drawing.Point(445' 115);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Lum.Location = new System.Drawing.Point(445' 115);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Lum.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Lum.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Lum.TabIndex = 12;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_a.Location = new System.Drawing.Point(445' 140);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_a.Location = new System.Drawing.Point(445' 140);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_a.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_a.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_a.TabIndex = 13;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_b.Location = new System.Drawing.Point(445' 165);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_b.Location = new System.Drawing.Point(445' 165);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_b.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_b.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_b.TabIndex = 14;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Cyan.Location = new System.Drawing.Point(445' 195);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Cyan.Location = new System.Drawing.Point(445' 195);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Cyan.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Cyan.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Cyan.TabIndex = 15;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Magenta.Location = new System.Drawing.Point(445' 220);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Magenta.Location = new System.Drawing.Point(445' 220);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Magenta.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Magenta.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Magenta.TabIndex = 16;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Yellow.Location = new System.Drawing.Point(445' 245);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Yellow.Location = new System.Drawing.Point(445' 245);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Yellow.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Yellow.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Yellow.TabIndex = 17;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_K.Location = new System.Drawing.Point(445' 270);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_K.Location = new System.Drawing.Point(445' 270);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_K.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_K.Size = new System.Drawing.Size(35' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_K.TabIndex = 18;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hex.Location = new System.Drawing.Point(334' 278);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hex.Location = new System.Drawing.Point(334' 278);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hex.Size = new System.Drawing.Size(56' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hex.Size = new System.Drawing.Size(56' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hex.TabIndex = 19;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Hue.Location = new System.Drawing.Point(314' 115);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Hue.Location = new System.Drawing.Point(314' 115);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Hue.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Hue.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Hue.TabIndex = 20;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Sat.Location = new System.Drawing.Point(314' 140);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Sat.Location = new System.Drawing.Point(314' 140);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Sat.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Sat.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Sat.TabIndex = 21;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Black.Location = new System.Drawing.Point(314' 165);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Black.Location = new System.Drawing.Point(314' 165);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Black.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Black.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Black.TabIndex = 22;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Red.Location = new System.Drawing.Point(314' 195);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Red.Location = new System.Drawing.Point(314' 195);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Red.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Red.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Red.TabIndex = 23;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Green.Location = new System.Drawing.Point(314' 220);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Green.Location = new System.Drawing.Point(314' 220);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Green.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Green.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Green.TabIndex = 24;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Blue.Location = new System.Drawing.Point(314' 245);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Blue.Location = new System.Drawing.Point(314' 245);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Blue.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Blue.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Blue.TabIndex = 25;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cbx_WebColorsOnly.Location = new System.Drawing.Point(10' 296);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cbx_WebColorsOnly.Location = new System.Drawing.Point(10' 296);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cbx_WebColorsOnly.Size = new System.Drawing.Size(248' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cbx_WebColorsOnly.Size = new System.Drawing.Size(248' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_cbx_WebColorsOnly.TabIndex = 26;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_HexPound.Location = new System.Drawing.Point(318' 282);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_HexPound.Location = new System.Drawing.Point(318' 282);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_HexPound.Size = new System.Drawing.Size(16' 14);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_HexPound.Size = new System.Drawing.Size(16' 14);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_HexPound.TabIndex = 27;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_L.Location = new System.Drawing.Point(408' 115);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_L.Location = new System.Drawing.Point(408' 115);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_L.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_L.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_L.TabIndex = 28;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_a.Location = new System.Drawing.Point(408' 140);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_a.Location = new System.Drawing.Point(408' 140);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_a.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_a.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_a.TabIndex = 29;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_b.Location = new System.Drawing.Point(408' 165);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_b.Location = new System.Drawing.Point(408' 165);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_b.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_b.Size = new System.Drawing.Size(35' 24);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_b.TabIndex = 30;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan.Location = new System.Drawing.Point(428' 200);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan.Location = new System.Drawing.Point(428' 200);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan.Size = new System.Drawing.Size(16' 16);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan.Size = new System.Drawing.Size(16' 16);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan.TabIndex = 31;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta.Location = new System.Drawing.Point(428' 224);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta.Location = new System.Drawing.Point(428' 224);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta.Size = new System.Drawing.Size(16' 16);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta.Size = new System.Drawing.Size(16' 16);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta.TabIndex = 32;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow.Location = new System.Drawing.Point(428' 248);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow.Location = new System.Drawing.Point(428' 248);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow.Size = new System.Drawing.Size(16' 16);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow.Size = new System.Drawing.Size(16' 16);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow.TabIndex = 33;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_K.Location = new System.Drawing.Point(428' 272);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_K.Location = new System.Drawing.Point(428' 272);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_K.Size = new System.Drawing.Size(16' 16);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_K.Size = new System.Drawing.Size(16' 16);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_K.TabIndex = 34;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Primary_Color.Location = new System.Drawing.Point(317' 31);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Primary_Color.Location = new System.Drawing.Point(317' 31);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Primary_Color.Size = new System.Drawing.Size(60' 34);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Primary_Color.Size = new System.Drawing.Size(60' 34);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Primary_Color.TabIndex = 36;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Secondary_Color.Location = new System.Drawing.Point(317' 65);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Secondary_Color.Location = new System.Drawing.Point(317' 65);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Secondary_Color.Size = new System.Drawing.Size(60' 34);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Secondary_Color.Size = new System.Drawing.Size(60' 34);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Secondary_Color.TabIndex = 37;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_ThinBox.Location = new System.Drawing.Point(271' 28);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_ThinBox.Location = new System.Drawing.Point(271' 28);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_ThinBox.Size = new System.Drawing.Size(40' 264);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_ThinBox.Size = new System.Drawing.Size(40' 264);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_ThinBox.TabIndex = 38;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_BigBox.Location = new System.Drawing.Point(10' 30);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_BigBox.Location = new System.Drawing.Point(10' 30);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_BigBox.RGB = System.Drawing.Color.FromArgb(((System.Byte)(255))' ((System.Byte)(0))' ((System.Byte)(0)));
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_BigBox.Size = new System.Drawing.Size(260' 260);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_BigBox.Size = new System.Drawing.Size(260' 260);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_BigBox.TabIndex = 39;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Hue_Symbol.Location = new System.Drawing.Point(387' 115);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Hue_Symbol.Location = new System.Drawing.Point(387' 115);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Hue_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Hue_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Hue_Symbol.TabIndex = 40;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Saturation_Symbol.Location = new System.Drawing.Point(387' 140);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Saturation_Symbol.Location = new System.Drawing.Point(387' 140);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Saturation_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Saturation_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Saturation_Symbol.TabIndex = 41;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Black_Symbol.Location = new System.Drawing.Point(387' 165);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Black_Symbol.Location = new System.Drawing.Point(387' 165);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Black_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Black_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Black_Symbol.TabIndex = 42;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan_Symbol.Location = new System.Drawing.Point(481' 195);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan_Symbol.Location = new System.Drawing.Point(481' 195);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan_Symbol.TabIndex = 43;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta_Symbol.Location = new System.Drawing.Point(481' 220);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta_Symbol.Location = new System.Drawing.Point(481' 220);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta_Symbol.TabIndex = 44;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow_Symbol.Location = new System.Drawing.Point(481' 245);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow_Symbol.Location = new System.Drawing.Point(481' 245);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow_Symbol.TabIndex = 45;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Key_Symbol.Location = new System.Drawing.Point(481' 270);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Key_Symbol.Location = new System.Drawing.Point(481' 270);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(504' 321);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(504' 321);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_BigBox_Scroll,The following statement contains a magic number: m_txt_Hue.Text =		Round(m_hsl.H * 360).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_BigBox_Scroll,The following statement contains a magic number: m_txt_Sat.Text =		Round(m_hsl.S * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_BigBox_Scroll,The following statement contains a magic number: m_txt_Black.Text =		Round(m_hsl.L * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_BigBox_Scroll,The following statement contains a magic number: m_txt_Cyan.Text =		Round(m_cmyk.C * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_BigBox_Scroll,The following statement contains a magic number: m_txt_Magenta.Text =	Round(m_cmyk.M * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_BigBox_Scroll,The following statement contains a magic number: m_txt_Yellow.Text =		Round(m_cmyk.Y * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_BigBox_Scroll,The following statement contains a magic number: m_txt_K.Text =			Round(m_cmyk.K * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_ThinBox_Scroll,The following statement contains a magic number: m_txt_Hue.Text =		Round(m_hsl.H * 360).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_ThinBox_Scroll,The following statement contains a magic number: m_txt_Sat.Text =		Round(m_hsl.S * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_ThinBox_Scroll,The following statement contains a magic number: m_txt_Black.Text =		Round(m_hsl.L * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_ThinBox_Scroll,The following statement contains a magic number: m_txt_Cyan.Text =		Round(m_cmyk.C * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_ThinBox_Scroll,The following statement contains a magic number: m_txt_Magenta.Text =	Round(m_cmyk.M * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_ThinBox_Scroll,The following statement contains a magic number: m_txt_Yellow.Text =		Round(m_cmyk.Y * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_ctrl_ThinBox_Scroll,The following statement contains a magic number: m_txt_K.Text =			Round(m_cmyk.K * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_Hue.Text =		Round(m_hsl.H * 360).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_Sat.Text =		Round(m_hsl.S * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_Black.Text =		Round(m_hsl.L * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_Cyan.Text =		Round(m_cmyk.C * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_Magenta.Text =	Round(m_cmyk.M * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_Yellow.Text =		Round(m_cmyk.Y * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_K.Text =			Round(m_cmyk.K * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_Hue.Text =		Round(m_hsl.H * 360).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_Sat.Text =		Round(m_hsl.S * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_Black.Text =		Round(m_hsl.L * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_Cyan.Text =		Round(m_cmyk.C * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_Magenta.Text =	Round(m_cmyk.M * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_Yellow.Text =		Round(m_cmyk.Y * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_K.Text =			Round(m_cmyk.K * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Hue_Leave,The following statement contains a magic number: if ( hue < 0 )  						{  							MessageBox.Show("An integer between 0 and 360 is required.\nClosest value inserted.");  							m_txt_Hue.Text = "0";  							m_hsl.H = 0.0;  						}  						else if ( hue > 360 )  						{  							MessageBox.Show("An integer between 0 and 360 is required.\nClosest value inserted.");  							m_txt_Hue.Text = "360";  							m_hsl.H = 1.0;  						}  						else  						{  							m_hsl.H = (double)hue/360;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Hue_Leave,The following statement contains a magic number: if ( hue < 0 )  						{  							MessageBox.Show("An integer between 0 and 360 is required.\nClosest value inserted.");  							m_txt_Hue.Text = "0";  							m_hsl.H = 0.0;  						}  						else if ( hue > 360 )  						{  							MessageBox.Show("An integer between 0 and 360 is required.\nClosest value inserted.");  							m_txt_Hue.Text = "360";  							m_hsl.H = 1.0;  						}  						else  						{  							m_hsl.H = (double)hue/360;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Sat_Leave,The following statement contains a magic number: if ( sat < 0 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Sat.Text = "0";  							m_hsl.S = 0.0;  						}  						else if ( sat > 100 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Sat.Text = "100";  							m_hsl.S = 1.0;  						}  						else  						{  							m_hsl.S = (double)sat/100;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Sat_Leave,The following statement contains a magic number: if ( sat < 0 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Sat.Text = "0";  							m_hsl.S = 0.0;  						}  						else if ( sat > 100 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Sat.Text = "100";  							m_hsl.S = 1.0;  						}  						else  						{  							m_hsl.S = (double)sat/100;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Black_Leave,The following statement contains a magic number: if ( lum < 0 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Black.Text = "0";  							m_hsl.L = 0.0;  						}  						else if ( lum > 100 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Black.Text = "100";  							m_hsl.L = 1.0;  						}  						else  						{  							m_hsl.L = (double)lum/100;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Black_Leave,The following statement contains a magic number: if ( lum < 0 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Black.Text = "0";  							m_hsl.L = 0.0;  						}  						else if ( lum > 100 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Black.Text = "100";  							m_hsl.L = 1.0;  						}  						else  						{  							m_hsl.L = (double)lum/100;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Red_Leave,The following statement contains a magic number: if ( red < 0 )  						{  							MessageBox.Show("An integer between 0 and 255 is required.\nClosest value inserted.");  							m_txt_Sat.Text = "0";  							m_rgb = Color.FromArgb(0' m_rgb.G' m_rgb.B);  						}  						else if ( red > 255 )  						{  							MessageBox.Show("An integer between 0 and 255 is required.\nClosest value inserted.");  							m_txt_Sat.Text = "255";  							m_rgb = Color.FromArgb(255' m_rgb.G' m_rgb.B);  						}  						else  						{  							m_rgb = Color.FromArgb(red' m_rgb.G' m_rgb.B);  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Red_Leave,The following statement contains a magic number: if ( red < 0 )  						{  							MessageBox.Show("An integer between 0 and 255 is required.\nClosest value inserted.");  							m_txt_Sat.Text = "0";  							m_rgb = Color.FromArgb(0' m_rgb.G' m_rgb.B);  						}  						else if ( red > 255 )  						{  							MessageBox.Show("An integer between 0 and 255 is required.\nClosest value inserted.");  							m_txt_Sat.Text = "255";  							m_rgb = Color.FromArgb(255' m_rgb.G' m_rgb.B);  						}  						else  						{  							m_rgb = Color.FromArgb(red' m_rgb.G' m_rgb.B);  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Green_Leave,The following statement contains a magic number: if ( green < 0 )  						{  							MessageBox.Show("An integer between 0 and 255 is required.\nClosest value inserted.");  							m_txt_Green.Text = "0";  							m_rgb = Color.FromArgb(m_rgb.R' 0' m_rgb.B);  						}  						else if ( green > 255 )  						{  							MessageBox.Show("An integer between 0 and 255 is required.\nClosest value inserted.");  							m_txt_Green.Text = "255";  							m_rgb = Color.FromArgb(m_rgb.R' 255' m_rgb.B);  						}  						else  						{  							m_rgb = Color.FromArgb(m_rgb.R' green' m_rgb.B);  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Green_Leave,The following statement contains a magic number: if ( green < 0 )  						{  							MessageBox.Show("An integer between 0 and 255 is required.\nClosest value inserted.");  							m_txt_Green.Text = "0";  							m_rgb = Color.FromArgb(m_rgb.R' 0' m_rgb.B);  						}  						else if ( green > 255 )  						{  							MessageBox.Show("An integer between 0 and 255 is required.\nClosest value inserted.");  							m_txt_Green.Text = "255";  							m_rgb = Color.FromArgb(m_rgb.R' 255' m_rgb.B);  						}  						else  						{  							m_rgb = Color.FromArgb(m_rgb.R' green' m_rgb.B);  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Blue_Leave,The following statement contains a magic number: if ( blue < 0 )  						{  							MessageBox.Show("An integer between 0 and 255 is required.\nClosest value inserted.");  							m_txt_Blue.Text = "0";  							m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 0);  						}  						else if ( blue > 255 )  						{  							MessageBox.Show("An integer between 0 and 255 is required.\nClosest value inserted.");  							m_txt_Blue.Text = "255";  							m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255);  						}  						else  						{  							m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' blue);  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Blue_Leave,The following statement contains a magic number: if ( blue < 0 )  						{  							MessageBox.Show("An integer between 0 and 255 is required.\nClosest value inserted.");  							m_txt_Blue.Text = "0";  							m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 0);  						}  						else if ( blue > 255 )  						{  							MessageBox.Show("An integer between 0 and 255 is required.\nClosest value inserted.");  							m_txt_Blue.Text = "255";  							m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255);  						}  						else  						{  							m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' blue);  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Cyan_Leave,The following statement contains a magic number: if ( cyan < 0 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_cmyk.C = 0.0;  						}  						else if ( cyan > 100 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_cmyk.C = 1.0;  						}  						else  						{  							m_cmyk.C = (double)cyan/100;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Cyan_Leave,The following statement contains a magic number: if ( cyan < 0 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_cmyk.C = 0.0;  						}  						else if ( cyan > 100 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_cmyk.C = 1.0;  						}  						else  						{  							m_cmyk.C = (double)cyan/100;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Magenta_Leave,The following statement contains a magic number: if ( magenta < 0 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Magenta.Text = "0";  							m_cmyk.M = 0.0;  						}  						else if ( magenta > 100 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Magenta.Text = "100";  							m_cmyk.M = 1.0;  						}  						else  						{  							m_cmyk.M = (double)magenta/100;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Magenta_Leave,The following statement contains a magic number: if ( magenta < 0 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Magenta.Text = "0";  							m_cmyk.M = 0.0;  						}  						else if ( magenta > 100 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Magenta.Text = "100";  							m_cmyk.M = 1.0;  						}  						else  						{  							m_cmyk.M = (double)magenta/100;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Yellow_Leave,The following statement contains a magic number: if ( yellow < 0 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Yellow.Text = "0";  							m_cmyk.Y = 0.0;  						}  						else if ( yellow > 100 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Yellow.Text = "100";  							m_cmyk.Y = 1.0;  						}  						else  						{  							m_cmyk.Y = (double)yellow/100;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_Yellow_Leave,The following statement contains a magic number: if ( yellow < 0 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Yellow.Text = "0";  							m_cmyk.Y = 0.0;  						}  						else if ( yellow > 100 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_Yellow.Text = "100";  							m_cmyk.Y = 1.0;  						}  						else  						{  							m_cmyk.Y = (double)yellow/100;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_K_Leave,The following statement contains a magic number: if ( key < 0 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_K.Text = "0";  							m_cmyk.K = 0.0;  						}  						else if ( key > 100 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_K.Text = "100";  							m_cmyk.K = 1.0;  						}  						else  						{  							m_cmyk.K = (double)key/100;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,m_txt_K_Leave,The following statement contains a magic number: if ( key < 0 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_K.Text = "0";  							m_cmyk.K = 0.0;  						}  						else if ( key > 100 )  						{  							MessageBox.Show("An integer between 0 and 100 is required.\nClosest value inserted.");  							m_txt_K.Text = "100";  							m_cmyk.K = 1.0;  						}  						else  						{  							m_cmyk.K = (double)key/100;  						}
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Round,The following statement contains a magic number: int temp = (int)(val * 100);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Round,The following statement contains a magic number: if ( (temp % 100) >= 50 )  							ret_val += 1;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Round,The following statement contains a magic number: if ( (temp % 100) >= 50 )  							ret_val += 1;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,WriteHexData,The following statement contains a magic number: string red = Convert.ToString(rgb.R' 16);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,WriteHexData,The following statement contains a magic number: if ( red.Length < 2 ) red = "0" + red;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,WriteHexData,The following statement contains a magic number: string green = Convert.ToString(rgb.G' 16);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,WriteHexData,The following statement contains a magic number: if ( green.Length < 2 ) green = "0" + green;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,WriteHexData,The following statement contains a magic number: string blue = Convert.ToString(rgb.B' 16);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,WriteHexData,The following statement contains a magic number: if ( blue.Length < 2 ) blue = "0" + blue;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ParseHexData,The following statement contains a magic number: if ( hex_data.Length != 6 )  							return Color.Black;
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ParseHexData,The following statement contains a magic number: r_text = hex_data.Substring(0' 2);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ParseHexData,The following statement contains a magic number: g_text = hex_data.Substring(2' 2);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ParseHexData,The following statement contains a magic number: g_text = hex_data.Substring(2' 2);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ParseHexData,The following statement contains a magic number: b_text = hex_data.Substring(4' 2);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ParseHexData,The following statement contains a magic number: b_text = hex_data.Substring(4' 2);
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_Hue.Text =		Round(m_hsl.H * 360).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_Sat.Text =		Round(m_hsl.S * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_Black.Text =		Round(m_hsl.L * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_Cyan.Text =		Round(m_cmyk.C * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_Magenta.Text =	Round(m_cmyk.M * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_Yellow.Text =		Round(m_cmyk.Y * 100).ToString();
Magic Number,XPTable.Editors,frmColorPicker,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_K.Text =			Round(m_cmyk.K * 100).ToString();
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(260' 260);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(260' 260);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseDown,The following statement contains a magic number: int x = e.X - 2' y = e.Y - 2;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseDown,The following statement contains a magic number: int x = e.X - 2' y = e.Y - 2;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseDown,The following statement contains a magic number: if ( x > this.Width - 4 ) x = this.Width - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseDown,The following statement contains a magic number: if ( x > this.Width - 4 ) x = this.Width - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseDown,The following statement contains a magic number: if ( y > this.Height - 4 ) y = this.Height - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseDown,The following statement contains a magic number: if ( y > this.Height - 4 ) y = this.Height - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseMove,The following statement contains a magic number: int x = e.X - 2' y = e.Y - 2;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseMove,The following statement contains a magic number: int x = e.X - 2' y = e.Y - 2;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseMove,The following statement contains a magic number: if ( x > this.Width - 4 ) x = this.Width - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseMove,The following statement contains a magic number: if ( x > this.Width - 4 ) x = this.Width - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseMove,The following statement contains a magic number: if ( y > this.Height - 4 ) y = this.Height - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseMove,The following statement contains a magic number: if ( y > this.Height - 4 ) y = this.Height - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseUp,The following statement contains a magic number: int x = e.X - 2' y = e.Y - 2;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseUp,The following statement contains a magic number: int x = e.X - 2' y = e.Y - 2;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseUp,The following statement contains a magic number: if ( x > this.Width - 4 ) x = this.Width - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseUp,The following statement contains a magic number: if ( x > this.Width - 4 ) x = this.Width - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseUp,The following statement contains a magic number: if ( y > this.Height - 4 ) y = this.Height - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl2DColorBox_MouseUp,The following statement contains a magic number: if ( y > this.Height - 4 ) y = this.Height - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: start_x = m_iMarker_X - 5;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: start_y = m_iMarker_Y - 5;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: end_x = m_iMarker_X + 5;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: end_y = m_iMarker_Y + 5;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: if ( end_x > this.Width - 4 ) end_x = this.Width - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: if ( end_x > this.Width - 4 ) end_x = this.Width - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: if ( end_y > this.Height - 4 ) end_y = this.Height - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: if ( end_y > this.Height - 4 ) end_y = this.Height - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: if ( x > this.Width - 4 ) x = this.Width - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: if ( x > this.Width - 4 ) x = this.Width - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: if ( y > this.Height - 4 ) y = this.Height - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: if ( y > this.Height - 4 ) y = this.Height - 4;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: if ( _hsl.L < (double)200/255 )  							pen = new Pen(Color.White);									//	White marker if selected color is dark  						else if ( _hsl.H < (double)26/360 || _hsl.H > (double)200/360 )  							if ( _hsl.S > (double)70/255 )  								pen = new Pen(Color.White);  							else  								pen = new Pen(Color.Black);								//	Else use a black marker for lighter colors  						else  							pen = new Pen(Color.Black);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: if ( _hsl.L < (double)200/255 )  							pen = new Pen(Color.White);									//	White marker if selected color is dark  						else if ( _hsl.H < (double)26/360 || _hsl.H > (double)200/360 )  							if ( _hsl.S > (double)70/255 )  								pen = new Pen(Color.White);  							else  								pen = new Pen(Color.Black);								//	Else use a black marker for lighter colors  						else  							pen = new Pen(Color.Black);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: if ( _hsl.L < (double)200/255 )  							pen = new Pen(Color.White);									//	White marker if selected color is dark  						else if ( _hsl.H < (double)26/360 || _hsl.H > (double)200/360 )  							if ( _hsl.S > (double)70/255 )  								pen = new Pen(Color.White);  							else  								pen = new Pen(Color.Black);								//	Else use a black marker for lighter colors  						else  							pen = new Pen(Color.Black);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: if ( _hsl.L < (double)200/255 )  							pen = new Pen(Color.White);									//	White marker if selected color is dark  						else if ( _hsl.H < (double)26/360 || _hsl.H > (double)200/360 )  							if ( _hsl.S > (double)70/255 )  								pen = new Pen(Color.White);  							else  								pen = new Pen(Color.Black);								//	Else use a black marker for lighter colors  						else  							pen = new Pen(Color.Black);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: if ( _hsl.L < (double)200/255 )  							pen = new Pen(Color.White);									//	White marker if selected color is dark  						else if ( _hsl.H < (double)26/360 || _hsl.H > (double)200/360 )  							if ( _hsl.S > (double)70/255 )  								pen = new Pen(Color.White);  							else  								pen = new Pen(Color.Black);								//	Else use a black marker for lighter colors  						else  							pen = new Pen(Color.Black);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: if ( _hsl.L < (double)200/255 )  							pen = new Pen(Color.White);									//	White marker if selected color is dark  						else if ( _hsl.H < (double)26/360 || _hsl.H > (double)200/360 )  							if ( _hsl.S > (double)70/255 )  								pen = new Pen(Color.White);  							else  								pen = new Pen(Color.Black);								//	Else use a black marker for lighter colors  						else  							pen = new Pen(Color.Black);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: if ( _hsl.L < (double)200/255 )  							pen = new Pen(Color.White);									//	White marker if selected color is dark  						else if ( _hsl.H < (double)26/360 || _hsl.H > (double)200/360 )  							if ( _hsl.S > (double)70/255 )  								pen = new Pen(Color.White);  							else  								pen = new Pen(Color.Black);								//	Else use a black marker for lighter colors  						else  							pen = new Pen(Color.Black);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: if ( _hsl.L < (double)200/255 )  							pen = new Pen(Color.White);									//	White marker if selected color is dark  						else if ( _hsl.H < (double)26/360 || _hsl.H > (double)200/360 )  							if ( _hsl.S > (double)70/255 )  								pen = new Pen(Color.White);  							else  								pen = new Pen(Color.Black);								//	Else use a black marker for lighter colors  						else  							pen = new Pen(Color.Black);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: g.DrawEllipse(pen' x - 3' y - 3' 10' 10);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: g.DrawEllipse(pen' x - 3' y - 3' 10' 10);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: g.DrawEllipse(pen' x - 3' y - 3' 10' 10);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawMarker,The following statement contains a magic number: g.DrawEllipse(pen' x - 3' y - 3' 10' 10);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: pencil = new Pen(Color.FromArgb(172'168'153));
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: pencil = new Pen(Color.FromArgb(172'168'153));
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: pencil = new Pen(Color.FromArgb(172'168'153));
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' this.Width - 2' 0' 0' 0);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' 0' 0' 0' this.Height - 2);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle(pencil' 1' 1' this.Width - 3' this.Height - 3);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle(pencil' 1' 1' this.Width - 3' this.Height - 3);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Calculate luminance at this line (Hue and Saturation are constant)  							hsl_end.L = hsl_start.L;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Calculate luminance at this line (Hue and Saturation are constant)  							hsl_end.L = hsl_start.L;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Calculate luminance at this line (Hue and Saturation are constant)  							hsl_end.L = hsl_start.L;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Calculate luminance at this line (Hue and Saturation are constant)  							hsl_end.L = hsl_start.L;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Calculate luminance at this line (Hue and Saturation are constant)  							hsl_end.L = hsl_start.L;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Calculate luminance at this line (Hue and Saturation are constant)  							hsl_end.L = hsl_start.L;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Calculate luminance at this line (Hue and Saturation are constant)  							hsl_end.L = hsl_start.L;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Calculate luminance at this line (Hue and Saturation are constant)  							hsl_end.L = hsl_start.L;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Width - 4; i++ )		//	For each vertical line in the control:  						{  							hsl_start.H = (double)i/(this.Width - 4);	//	Calculate Hue at this line (Saturation and Luminance are constant)  							hsl_end.H = hsl_start.H;  				  							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' this.Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   							g.FillRectangle(br'new Rectangle(i + 2' 2' 1' this.Height - 4));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )				//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Red at this line (Green and Blue are constant)  							int red = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Red at this line (Green and Blue are constant)  							int red = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Red at this line (Green and Blue are constant)  							int red = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Red at this line (Green and Blue are constant)  							int red = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Red at this line (Green and Blue are constant)  							int red = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Red at this line (Green and Blue are constant)  							int red = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Red at this line (Green and Blue are constant)  							int red = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Red at this line (Green and Blue are constant)  							int red = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Red at this line (Green and Blue are constant)  							int red = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Red at this line (Green and Blue are constant)  							int red = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Red at this line (Green and Blue are constant)  							int red = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 4; i++ )	//	For each horizontal line in the control:  						{  							//	Calculate Green at this line (Red and Blue are constant)  							int green = Round(255 - (255 * (double)i/(this.Height - 4)));    							LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' this.Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);   							g.FillRectangle(br'new Rectangle(2'i + 2' this.Width - 4' 1));   						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Round,The following statement contains a magic number: int temp = (int)(val * 100);
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Round,The following statement contains a magic number: if ( (temp % 100) >= 50 )  							ret_val += 1;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Round,The following statement contains a magic number: if ( (temp % 100) >= 50 )  							ret_val += 1;
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(40' 264);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(40' 264);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl1DColorBar_MouseDown,The following statement contains a magic number: y -= 4;
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl1DColorBar_MouseDown,The following statement contains a magic number: if ( y > this.Height - 9 ) y = this.Height - 9;
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl1DColorBar_MouseDown,The following statement contains a magic number: if ( y > this.Height - 9 ) y = this.Height - 9;
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl1DColorBar_MouseMove,The following statement contains a magic number: y -= 4;
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl1DColorBar_MouseMove,The following statement contains a magic number: if ( y > this.Height - 9 ) y = this.Height - 9;
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl1DColorBar_MouseMove,The following statement contains a magic number: if ( y > this.Height - 9 ) y = this.Height - 9;
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl1DColorBar_MouseUp,The following statement contains a magic number: y -= 4;
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl1DColorBar_MouseUp,The following statement contains a magic number: if ( y > this.Height - 9 ) y = this.Height - 9;
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ctrl1DColorBar_MouseUp,The following statement contains a magic number: if ( y > this.Height - 9 ) y = this.Height - 9;
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearSlider,The following statement contains a magic number: g.FillRectangle(brush' 0' 0' 8' this.Height);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearSlider,The following statement contains a magic number: g.FillRectangle(brush' this.Width - 8' 0' 8' this.Height);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearSlider,The following statement contains a magic number: g.FillRectangle(brush' this.Width - 8' 0' 8' this.Height);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: if ( position > this.Height - 9 ) position = this.Height - 9;
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: if ( position > this.Height - 9 ) position = this.Height - 9;
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: Pen pencil = new Pen(Color.FromArgb(116'114'106));
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: Pen pencil = new Pen(Color.FromArgb(116'114'106));
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: Pen pencil = new Pen(Color.FromArgb(116'114'106));
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: Point[] arrow = new Point[7];
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[1] = new Point(3'position);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[2] = new Point(7'position + 4);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[2] = new Point(7'position + 4);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[2] = new Point(7'position + 4);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[3] = new Point(3'position + 8);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[3] = new Point(3'position + 8);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[3] = new Point(3'position + 8);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[4] = new Point(1'position + 8);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[4] = new Point(1'position + 8);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[5] = new Point(0'position + 7);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[5] = new Point(0'position + 7);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[6] = new Point(0'position + 1);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[0] = new Point(this.Width - 2'position);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[1] = new Point(this.Width - 4'position);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[2] = new Point(this.Width - 8'position + 4);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[2] = new Point(this.Width - 8'position + 4);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[2] = new Point(this.Width - 8'position + 4);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[3] = new Point(this.Width - 4'position + 8);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[3] = new Point(this.Width - 4'position + 8);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[3] = new Point(this.Width - 4'position + 8);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[4] = new Point(this.Width - 2'position + 8);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[4] = new Point(this.Width - 2'position + 8);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[4] = new Point(this.Width - 2'position + 8);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[5] = new Point(this.Width - 1'position + 7);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[5] = new Point(this.Width - 1'position + 7);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawSlider,The following statement contains a magic number: arrow[6] = new Point(this.Width - 1'position + 1);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: pencil = new Pen(Color.FromArgb(172'168'153));
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: pencil = new Pen(Color.FromArgb(172'168'153));
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: pencil = new Pen(Color.FromArgb(172'168'153));
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' this.Width - 10' 2' 9' 2);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' this.Width - 10' 2' 9' 2);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' this.Width - 10' 2' 9' 2);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' this.Width - 10' 2' 9' 2);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' 9' 2' 9' this.Height - 4);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' 9' 2' 9' this.Height - 4);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' 9' 2' 9' this.Height - 4);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' 9' 2' 9' this.Height - 4);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' this.Width - 9' 2' this.Width - 9'this.Height - 3);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' this.Width - 9' 2' this.Width - 9'this.Height - 3);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' this.Width - 9' 2' this.Width - 9'this.Height - 3);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' this.Width - 9' 2' this.Width - 9'this.Height - 3);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' this.Width - 9'this.Height - 3' 9'this.Height - 3);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' this.Width - 9'this.Height - 3' 9'this.Height - 3);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' this.Width - 9'this.Height - 3' 9'this.Height - 3);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' this.Width - 9'this.Height - 3' 9'this.Height - 3);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle(pencil' 10' 3' this.Width - 20' this.Height - 7);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle(pencil' 10' 3' this.Width - 20' this.Height - 7);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle(pencil' 10' 3' this.Width - 20' this.Height - 7);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle(pencil' 10' 3' this.Width - 20' this.Height - 7);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ )	//	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.H = 1.0 - (double)i/(this.Height - 8);			//	H (hue) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ )	//	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.H = 1.0 - (double)i/(this.Height - 8);			//	H (hue) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ )	//	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.H = 1.0 - (double)i/(this.Height - 8);			//	H (hue) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ )	//	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.H = 1.0 - (double)i/(this.Height - 8);			//	H (hue) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ )	//	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.H = 1.0 - (double)i/(this.Height - 8);			//	H (hue) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Hue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ )	//	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.H = 1.0 - (double)i/(this.Height - 8);			//	H (hue) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.S = 1.0 - (double)i/(this.Height - 8);			//	S (Saturation) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.S = 1.0 - (double)i/(this.Height - 8);			//	S (Saturation) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.S = 1.0 - (double)i/(this.Height - 8);			//	S (Saturation) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.S = 1.0 - (double)i/(this.Height - 8);			//	S (Saturation) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.S = 1.0 - (double)i/(this.Height - 8);			//	S (Saturation) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Saturation,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.S = 1.0 - (double)i/(this.Height - 8);			//	S (Saturation) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.L = 1.0 - (double)i/(this.Height - 8);			//	L (Luminance) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.L = 1.0 - (double)i/(this.Height - 8);			//	L (Luminance) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.L = 1.0 - (double)i/(this.Height - 8);			//	L (Luminance) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.L = 1.0 - (double)i/(this.Height - 8);			//	L (Luminance) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.L = 1.0 - (double)i/(this.Height - 8);			//	L (Luminance) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Luminance,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							_hsl.L = 1.0 - (double)i/(this.Height - 8);			//	L (Luminance) is based on the current vertical position  							Pen pen = new Pen(AdobeColors.HSL_to_RGB(_hsl));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);	//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int red = 255 - Round(255 * (double)i/(this.Height - 8));	//	red is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(red' m_rgb.G' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int red = 255 - Round(255 * (double)i/(this.Height - 8));	//	red is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(red' m_rgb.G' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int red = 255 - Round(255 * (double)i/(this.Height - 8));	//	red is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(red' m_rgb.G' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int red = 255 - Round(255 * (double)i/(this.Height - 8));	//	red is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(red' m_rgb.G' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int red = 255 - Round(255 * (double)i/(this.Height - 8));	//	red is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(red' m_rgb.G' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int red = 255 - Round(255 * (double)i/(this.Height - 8));	//	red is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(red' m_rgb.G' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int red = 255 - Round(255 * (double)i/(this.Height - 8));	//	red is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(red' m_rgb.G' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Red,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int red = 255 - Round(255 * (double)i/(this.Height - 8));	//	red is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(red' m_rgb.G' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int green = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' green' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int green = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' green' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int green = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' green' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int green = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' green' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int green = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' green' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int green = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' green' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int green = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' green' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Green,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int green = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' green' m_rgb.B));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int blue = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' m_rgb.G' blue));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int blue = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' m_rgb.G' blue));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int blue = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' m_rgb.G' blue));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int blue = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' m_rgb.G' blue));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int blue = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' m_rgb.G' blue));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int blue = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' m_rgb.G' blue));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int blue = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' m_rgb.G' blue));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Draw_Style_Blue,The following statement contains a magic number: for ( int i = 0; i < this.Height - 8; i++ ) //	i represents the current line of pixels we want to draw horizontally  						{  							int blue = 255 - Round(255 * (double)i/(this.Height - 8));	//	green is based on the current vertical position  							Pen pen = new Pen(Color.FromArgb(m_rgb.R' m_rgb.G' blue));	//	Get the Color for this line    							g.DrawLine(pen' 11' i + 4' this.Width - 11' i + 4);			//	Draw the line and loop back for next line  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								m_rgb = Color.FromArgb(255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.G' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								m_rgb = Color.FromArgb(m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) ));  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								m_rgb = Color.FromArgb(255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.G' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								m_rgb = Color.FromArgb(m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) ));  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								m_rgb = Color.FromArgb(255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.G' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								m_rgb = Color.FromArgb(m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) ));  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								m_rgb = Color.FromArgb(255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.G' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								m_rgb = Color.FromArgb(m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) ));  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								m_rgb = Color.FromArgb(255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.G' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								m_rgb = Color.FromArgb(m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) ));  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								m_rgb = Color.FromArgb(255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.G' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								m_rgb = Color.FromArgb(m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) ));  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								m_rgb = Color.FromArgb(255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.G' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								m_rgb = Color.FromArgb(m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) ));  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								m_rgb = Color.FromArgb(255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.G' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								m_rgb = Color.FromArgb(m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) ));  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								m_rgb = Color.FromArgb(255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.G' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								m_rgb = Color.FromArgb(m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) ));  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								m_rgb = Color.FromArgb(255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.G' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								m_rgb = Color.FromArgb(m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) ));  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								m_rgb = Color.FromArgb(255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.G' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								m_rgb = Color.FromArgb(m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) ));  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								m_rgb = Color.FromArgb(255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.G' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								m_rgb = Color.FromArgb(m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) ));  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Round,The following statement contains a magic number: int temp = (int)(val * 100);
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Round,The following statement contains a magic number: if ( (temp % 100) >= 50 )  							ret_val += 1;
Magic Number,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Round,The following statement contains a magic number: if ( (temp % 100) >= 50 )  							ret_val += 1;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: Max = Round(hsl.L * 255);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: Min = Round((1.0 - hsl.S)*(hsl.L/1.0)*255);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: q   = (double)(Max - Min)/255;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,HSL_to_RGB,The following statement contains a magic number: if ( hsl.H >= 0 && hsl.H <= (double)1/6 )  						{  							Mid = Round(((hsl.H - 0) * q) * 1530 + Min);  							return Color.FromArgb(Max'Mid'Min);  						}  						else if ( hsl.H <= (double)1/3 )  						{  							Mid = Round(-((hsl.H - (double)1/6) * q) * 1530 + Max);  							return Color.FromArgb(Mid'Max'Min);  						}  						else if ( hsl.H <= 0.5 )  						{  							Mid = Round(((hsl.H - (double)1/3) * q) * 1530 + Min);  							return Color.FromArgb(Min'Max'Mid);  						}  						else if ( hsl.H <= (double)2/3 )  						{  							Mid = Round(-((hsl.H - 0.5) * q) * 1530 + Max);  							return Color.FromArgb(Min'Mid'Max);  						}  						else if ( hsl.H <= (double)5/6 )  						{  							Mid = Round(((hsl.H - (double)2/3) * q) * 1530 + Min);  							return Color.FromArgb(Mid'Min'Max);  						}  						else if ( hsl.H <= 1.0 )  						{  							Mid = Round(-((hsl.H - (double)5/6) * q) * 1530 + Max);  							return Color.FromArgb(Max'Min'Mid);  						}  						else	return Color.FromArgb(0'0'0);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_HSL,The following statement contains a magic number: hsl.L = (double)Max/255;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_HSL,The following statement contains a magic number: if ( Diff == 0 ) q = 0; // Protecting from the impossible operation of division by zero.  						else q = (double)60/Diff;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_HSL,The following statement contains a magic number: if ( Max == c.R )  						{  							if ( c.G < c.B )	hsl.H = (double)(360 + q * (c.G - c.B))/360;  							else				hsl.H = (double)(q * (c.G - c.B))/360;  						}  						else if ( Max == c.G )	hsl.H = (double)(120 + q * (c.B - c.R))/360;  						else if ( Max == c.B )	hsl.H = (double)(240 + q * (c.R - c.G))/360;  						else					hsl.H = 0.0;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_HSL,The following statement contains a magic number: if ( Max == c.R )  						{  							if ( c.G < c.B )	hsl.H = (double)(360 + q * (c.G - c.B))/360;  							else				hsl.H = (double)(q * (c.G - c.B))/360;  						}  						else if ( Max == c.G )	hsl.H = (double)(120 + q * (c.B - c.R))/360;  						else if ( Max == c.B )	hsl.H = (double)(240 + q * (c.R - c.G))/360;  						else					hsl.H = 0.0;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_HSL,The following statement contains a magic number: if ( Max == c.R )  						{  							if ( c.G < c.B )	hsl.H = (double)(360 + q * (c.G - c.B))/360;  							else				hsl.H = (double)(q * (c.G - c.B))/360;  						}  						else if ( Max == c.G )	hsl.H = (double)(120 + q * (c.B - c.R))/360;  						else if ( Max == c.B )	hsl.H = (double)(240 + q * (c.R - c.G))/360;  						else					hsl.H = 0.0;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_HSL,The following statement contains a magic number: if ( Max == c.R )  						{  							if ( c.G < c.B )	hsl.H = (double)(360 + q * (c.G - c.B))/360;  							else				hsl.H = (double)(q * (c.G - c.B))/360;  						}  						else if ( Max == c.G )	hsl.H = (double)(120 + q * (c.B - c.R))/360;  						else if ( Max == c.B )	hsl.H = (double)(240 + q * (c.R - c.G))/360;  						else					hsl.H = 0.0;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_HSL,The following statement contains a magic number: if ( Max == c.R )  						{  							if ( c.G < c.B )	hsl.H = (double)(360 + q * (c.G - c.B))/360;  							else				hsl.H = (double)(q * (c.G - c.B))/360;  						}  						else if ( Max == c.G )	hsl.H = (double)(120 + q * (c.B - c.R))/360;  						else if ( Max == c.B )	hsl.H = (double)(240 + q * (c.R - c.G))/360;  						else					hsl.H = 0.0;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_HSL,The following statement contains a magic number: if ( Max == c.R )  						{  							if ( c.G < c.B )	hsl.H = (double)(360 + q * (c.G - c.B))/360;  							else				hsl.H = (double)(q * (c.G - c.B))/360;  						}  						else if ( Max == c.G )	hsl.H = (double)(120 + q * (c.B - c.R))/360;  						else if ( Max == c.B )	hsl.H = (double)(240 + q * (c.R - c.G))/360;  						else					hsl.H = 0.0;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_HSL,The following statement contains a magic number: if ( Max == c.R )  						{  							if ( c.G < c.B )	hsl.H = (double)(360 + q * (c.G - c.B))/360;  							else				hsl.H = (double)(q * (c.G - c.B))/360;  						}  						else if ( Max == c.G )	hsl.H = (double)(120 + q * (c.B - c.R))/360;  						else if ( Max == c.B )	hsl.H = (double)(240 + q * (c.R - c.G))/360;  						else					hsl.H = 0.0;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_CMYK,The following statement contains a magic number: _cmyk.C = (double)(255 - c.R)/255;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_CMYK,The following statement contains a magic number: _cmyk.C = (double)(255 - c.R)/255;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_CMYK,The following statement contains a magic number: _cmyk.M = (double)(255 - c.G)/255;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_CMYK,The following statement contains a magic number: _cmyk.M = (double)(255 - c.G)/255;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_CMYK,The following statement contains a magic number: _cmyk.Y = (double)(255 - c.B)/255;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,RGB_to_CMYK,The following statement contains a magic number: _cmyk.Y = (double)(255 - c.B)/255;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,CMYK_to_RGB,The following statement contains a magic number: red =	Round(255 - (255 * _cmyk.C));
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,CMYK_to_RGB,The following statement contains a magic number: red =	Round(255 - (255 * _cmyk.C));
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,CMYK_to_RGB,The following statement contains a magic number: green =	Round(255 - (255 * _cmyk.M));
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,CMYK_to_RGB,The following statement contains a magic number: green =	Round(255 - (255 * _cmyk.M));
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,CMYK_to_RGB,The following statement contains a magic number: blue =	Round(255 - (255 * _cmyk.Y));
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,CMYK_to_RGB,The following statement contains a magic number: blue =	Round(255 - (255 * _cmyk.Y));
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Round,The following statement contains a magic number: int temp = (int)(val * 100);
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Round,The following statement contains a magic number: if ( (temp % 100) >= 50 )  							ret_val += 1;
Magic Number,XPTable.Editors,AdobeColors,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Round,The following statement contains a magic number: if ( (temp % 100) >= 50 )  							ret_val += 1;
Magic Number,XPTable.Editors,ComboBoxCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ComboBoxCellEditor.cs,ComboBoxCellEditor,The following statement contains a magic number: this.listbox.Size = new Size(100' 100);
Magic Number,XPTable.Editors,ComboBoxCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ComboBoxCellEditor.cs,ComboBoxCellEditor,The following statement contains a magic number: this.listbox.Size = new Size(100' 100);
Magic Number,XPTable.Editors,ComboBoxCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ComboBoxCellEditor.cs,ComboBoxCellEditor,The following statement contains a magic number: this.maxDropDownItems = 8;
Magic Number,XPTable.Editors,ComboBoxCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ComboBoxCellEditor.cs,ShowDropDown,The following statement contains a magic number: if (this.IntegralHeight)  			{  				int visItems = this.listbox.Height / this.ItemHeight;    				if (visItems > this.MaxDropDownItems)  				{  					visItems = this.MaxDropDownItems;  				}    				if (this.listbox.Items.Count < this.MaxDropDownItems)  				{  					visItems = this.listbox.Items.Count;  				}    				if (visItems == 0)  				{  					visItems = 1;  				}    				this.DropDown.Height = (visItems * this.ItemHeight) + 2;  				this.listbox.Height = visItems * this.ItemHeight;  			}
Magic Number,XPTable.Editors,DateTimeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\DateTimeCellEditor.cs,DateTimeCellEditor,The following statement contains a magic number: this.DropDown.Width = this.calendar.Width + 2;
Magic Number,XPTable.Editors,DateTimeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\DateTimeCellEditor.cs,DateTimeCellEditor,The following statement contains a magic number: this.DropDown.Height = this.calendar.Height + 2;
Magic Number,XPTable.Editors,NumberCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\NumberCellEditor.cs,NumberCellEditor,The following statement contains a magic number: this.maximum = new decimal(100);
Magic Number,XPTable.Editors,NumberCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\NumberCellEditor.cs,OnMouseWheel,The following statement contains a magic number: if (Math.Abs(this.wheelDelta) >= 120)  			{  				if (this.wheelDelta < 0)  				{  					up = false;  				}    				if (up)  				{  					this.UpButton();  				}  				else  				{  					this.DownButton();  				}    				this.wheelDelta = 0;  			}
Magic Number,XPTable.Editors,NumberCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\NumberCellEditor.cs,OnEditorButtonMouseDown,The following statement contains a magic number: if (e.Y < this.buttonBounds.Top + (this.buttonBounds.Height / 2))  			{  				this.buttonID = UpButtonID;  				  				this.UpButton();  			}  			else  			{  				this.buttonID = DownButtonID;  				  				this.DownButton();  			}
Magic Number,XPTable.Editors,NumberCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\NumberCellEditor.cs,TimerHandler,The following statement contains a magic number: this.interval *= 7;
Magic Number,XPTable.Editors,NumberCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\NumberCellEditor.cs,TimerHandler,The following statement contains a magic number: this.interval /= 10;
Magic Number,XPTable.Models,CellPadding,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,GetHashCode,The following statement contains a magic number: return (((this.Left ^ ((this.Top << 13) | (this.Top >> 0x13))) ^ ((this.Right << 0x1a) | (this.Right >> 6))) ^ ((this.Bottom << 7) | (this.Bottom >> 0x19)));
Magic Number,XPTable.Models,CellPadding,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,GetHashCode,The following statement contains a magic number: return (((this.Left ^ ((this.Top << 13) | (this.Top >> 0x13))) ^ ((this.Right << 0x1a) | (this.Right >> 6))) ^ ((this.Bottom << 7) | (this.Bottom >> 0x19)));
Magic Number,XPTable.Models,CellPadding,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,GetHashCode,The following statement contains a magic number: return (((this.Left ^ ((this.Top << 13) | (this.Top >> 0x13))) ^ ((this.Right << 0x1a) | (this.Right >> 6))) ^ ((this.Bottom << 7) | (this.Bottom >> 0x19)));
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,ConvertFrom,The following statement contains a magic number: if (value is string)  			{  				string text = ((string) value).Trim();    				if (text.Length == 0)  				{  					return null;  				}    				if (culture == null)  				{  					culture = CultureInfo.CurrentCulture;  				}    				char[] listSeparators = culture.TextInfo.ListSeparator.ToCharArray();    				string[] s = text.Split(listSeparators);    				if (s.Length < 4)  				{  					return null;  				}    				return new CellPadding(int.Parse(s[0])' int.Parse(s[1])' int.Parse(s[2])' int.Parse(s[3]));  			}
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,ConvertFrom,The following statement contains a magic number: if (value is string)  			{  				string text = ((string) value).Trim();    				if (text.Length == 0)  				{  					return null;  				}    				if (culture == null)  				{  					culture = CultureInfo.CurrentCulture;  				}    				char[] listSeparators = culture.TextInfo.ListSeparator.ToCharArray();    				string[] s = text.Split(listSeparators);    				if (s.Length < 4)  				{  					return null;  				}    				return new CellPadding(int.Parse(s[0])' int.Parse(s[1])' int.Parse(s[2])' int.Parse(s[3]));  			}
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,ConvertFrom,The following statement contains a magic number: if (value is string)  			{  				string text = ((string) value).Trim();    				if (text.Length == 0)  				{  					return null;  				}    				if (culture == null)  				{  					culture = CultureInfo.CurrentCulture;  				}    				char[] listSeparators = culture.TextInfo.ListSeparator.ToCharArray();    				string[] s = text.Split(listSeparators);    				if (s.Length < 4)  				{  					return null;  				}    				return new CellPadding(int.Parse(s[0])' int.Parse(s[1])' int.Parse(s[2])' int.Parse(s[3]));  			}
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,ConvertTo,The following statement contains a magic number: if ((destinationType == typeof(string)) && (value is CellPadding))  			{  				CellPadding p = (CellPadding) value;    				if (culture == null)  				{  					culture = CultureInfo.CurrentCulture;  				}    				string separator = culture.TextInfo.ListSeparator + " ";    				TypeConverter converter = TypeDescriptor.GetConverter(typeof(int));    				string[] s = new string[4];    				s[0] = converter.ConvertToString(context' culture' p.Left);  				s[1] = converter.ConvertToString(context' culture' p.Top);  				s[2] = converter.ConvertToString(context' culture' p.Right);  				s[3] = converter.ConvertToString(context' culture' p.Bottom);    				return string.Join(separator' s);  			}
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,ConvertTo,The following statement contains a magic number: if ((destinationType == typeof(string)) && (value is CellPadding))  			{  				CellPadding p = (CellPadding) value;    				if (culture == null)  				{  					culture = CultureInfo.CurrentCulture;  				}    				string separator = culture.TextInfo.ListSeparator + " ";    				TypeConverter converter = TypeDescriptor.GetConverter(typeof(int));    				string[] s = new string[4];    				s[0] = converter.ConvertToString(context' culture' p.Left);  				s[1] = converter.ConvertToString(context' culture' p.Top);  				s[2] = converter.ConvertToString(context' culture' p.Right);  				s[3] = converter.ConvertToString(context' culture' p.Bottom);    				return string.Join(separator' s);  			}
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,ConvertTo,The following statement contains a magic number: if ((destinationType == typeof(string)) && (value is CellPadding))  			{  				CellPadding p = (CellPadding) value;    				if (culture == null)  				{  					culture = CultureInfo.CurrentCulture;  				}    				string separator = culture.TextInfo.ListSeparator + " ";    				TypeConverter converter = TypeDescriptor.GetConverter(typeof(int));    				string[] s = new string[4];    				s[0] = converter.ConvertToString(context' culture' p.Left);  				s[1] = converter.ConvertToString(context' culture' p.Top);  				s[2] = converter.ConvertToString(context' culture' p.Right);  				s[3] = converter.ConvertToString(context' culture' p.Bottom);    				return string.Join(separator' s);  			}
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,ConvertTo,The following statement contains a magic number: if ((destinationType == typeof(InstanceDescriptor)) && (value is CellPadding))  			{  				CellPadding p = (CellPadding) value;    				Type[] t = new Type[4];  				t[0] = t[1] = t[2] = t[3] = typeof(int);    				ConstructorInfo info = typeof(CellPadding).GetConstructor(t);    				if (info != null)  				{  					object[] o = new object[4];    					o[0] = p.Left;  					o[1] = p.Top;  					o[2] = p.Right;  					o[3] = p.Bottom;    					return new InstanceDescriptor(info' o);  				}  			}
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,ConvertTo,The following statement contains a magic number: if ((destinationType == typeof(InstanceDescriptor)) && (value is CellPadding))  			{  				CellPadding p = (CellPadding) value;    				Type[] t = new Type[4];  				t[0] = t[1] = t[2] = t[3] = typeof(int);    				ConstructorInfo info = typeof(CellPadding).GetConstructor(t);    				if (info != null)  				{  					object[] o = new object[4];    					o[0] = p.Left;  					o[1] = p.Top;  					o[2] = p.Right;  					o[3] = p.Bottom;    					return new InstanceDescriptor(info' o);  				}  			}
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,ConvertTo,The following statement contains a magic number: if ((destinationType == typeof(InstanceDescriptor)) && (value is CellPadding))  			{  				CellPadding p = (CellPadding) value;    				Type[] t = new Type[4];  				t[0] = t[1] = t[2] = t[3] = typeof(int);    				ConstructorInfo info = typeof(CellPadding).GetConstructor(t);    				if (info != null)  				{  					object[] o = new object[4];    					o[0] = p.Left;  					o[1] = p.Top;  					o[2] = p.Right;  					o[3] = p.Bottom;    					return new InstanceDescriptor(info' o);  				}  			}
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,ConvertTo,The following statement contains a magic number: if ((destinationType == typeof(InstanceDescriptor)) && (value is CellPadding))  			{  				CellPadding p = (CellPadding) value;    				Type[] t = new Type[4];  				t[0] = t[1] = t[2] = t[3] = typeof(int);    				ConstructorInfo info = typeof(CellPadding).GetConstructor(t);    				if (info != null)  				{  					object[] o = new object[4];    					o[0] = p.Left;  					o[1] = p.Top;  					o[2] = p.Right;  					o[3] = p.Bottom;    					return new InstanceDescriptor(info' o);  				}  			}
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,ConvertTo,The following statement contains a magic number: if ((destinationType == typeof(InstanceDescriptor)) && (value is CellPadding))  			{  				CellPadding p = (CellPadding) value;    				Type[] t = new Type[4];  				t[0] = t[1] = t[2] = t[3] = typeof(int);    				ConstructorInfo info = typeof(CellPadding).GetConstructor(t);    				if (info != null)  				{  					object[] o = new object[4];    					o[0] = p.Left;  					o[1] = p.Top;  					o[2] = p.Right;  					o[3] = p.Bottom;    					return new InstanceDescriptor(info' o);  				}  			}
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,ConvertTo,The following statement contains a magic number: if ((destinationType == typeof(InstanceDescriptor)) && (value is CellPadding))  			{  				CellPadding p = (CellPadding) value;    				Type[] t = new Type[4];  				t[0] = t[1] = t[2] = t[3] = typeof(int);    				ConstructorInfo info = typeof(CellPadding).GetConstructor(t);    				if (info != null)  				{  					object[] o = new object[4];    					o[0] = p.Left;  					o[1] = p.Top;  					o[2] = p.Right;  					o[3] = p.Bottom;    					return new InstanceDescriptor(info' o);  				}  			}
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,GetProperties,The following statement contains a magic number: string[] s = new string[4];
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,GetProperties,The following statement contains a magic number: s[2] = "Right";
Magic Number,XPTable.Models,CellPaddingConverter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPadding.cs,GetProperties,The following statement contains a magic number: s[3] = "Bottom";
Magic Number,XPTable.Models,CellPos,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CellPos.cs,GetHashCode,The following statement contains a magic number: return (this.Row ^ ((this.Column << 13) | (this.Column >> 0x13)));
Magic Number,XPTable.Models,CheckBoxColumn,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CheckBoxColumn.cs,Init,The following statement contains a magic number: this.checkSize = new Size(13' 13);
Magic Number,XPTable.Models,CheckBoxColumn,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CheckBoxColumn.cs,Init,The following statement contains a magic number: this.checkSize = new Size(13' 13);
Magic Number,XPTable.Models,CheckBoxColumn,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CheckBoxColumn.cs,ShouldSerializeCheckSize,The following statement contains a magic number: return (this.checkSize.Width != 13 || this.checkSize.Height != 13);
Magic Number,XPTable.Models,CheckBoxColumn,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\CheckBoxColumn.cs,ShouldSerializeCheckSize,The following statement contains a magic number: return (this.checkSize.Width != 13 || this.checkSize.Height != 13);
Magic Number,XPTable.Models,HeaderContextMenu,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,OnPopup,The following statement contains a magic number: if (this.model.Columns.Count > 0)  			{  				MenuItem item;  				  				for (int i=0; i<this.model.Columns.Count; i++)  				{  					if (i == 10)  					{  						this.MenuItems.Add(this.separator);  						this.MenuItems.Add(this.moreMenuItem);    						break;  					}    					item = new MenuItem(this.model.Columns[i].Text' new EventHandler(menuItem_Click));  					item.Checked = this.model.Columns[i].Visible;    					this.MenuItems.Add(item);  				}  			}
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.label1.Location = new Point(8' 12);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.label1.Location = new Point(8' 12);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.label1.Size = new Size(324' 28);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.label1.Size = new Size(324' 28);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.columnTable.Location = new Point(12' 52);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.columnTable.Location = new Point(12' 52);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.columnTable.Size = new Size(231' 240);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.columnTable.Size = new Size(231' 240);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.columnTable.ColumnModel.Columns.Add(new CheckBoxColumn("Columns"' 227));
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.columnTable.TableModel.RowHeight += 3;
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.upButton.Location = new Point(253' 52);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.upButton.Location = new Point(253' 52);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.upButton.TabIndex = 2;
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.downButton.Location = new Point(253' 81);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.downButton.Location = new Point(253' 81);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.downButton.TabIndex = 3;
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.showButton.Location = new Point(253' 52);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.showButton.Location = new Point(253' 52);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.showButton.TabIndex = 4;
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.hideButton.Location = new Point(253' 81);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.hideButton.Location = new Point(253' 81);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.hideButton.TabIndex = 5;
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.label2.Location = new Point(12' 300);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.label2.Location = new Point(12' 300);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.label2.Size = new Size(192' 21);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.label2.Size = new Size(192' 21);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.label2.TabIndex = 6;
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.widthTextBox.Location = new Point(207' 300);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.widthTextBox.Location = new Point(207' 300);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.widthTextBox.MaxLength = 4;
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.widthTextBox.Size = new Size(36' 21);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.widthTextBox.Size = new Size(36' 21);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.widthTextBox.TabIndex = 7;
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.autoSizeCheckBox.Location = new Point(12' 330);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.autoSizeCheckBox.Location = new Point(12' 330);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.autoSizeCheckBox.Size = new Size(228' 16);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.autoSizeCheckBox.Size = new Size(228' 16);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.autoSizeCheckBox.TabIndex = 8;
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.groupBox1.Location = new Point(8' 352);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.groupBox1.Location = new Point(8' 352);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.groupBox1.Size = new Size(322' 8);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.groupBox1.Size = new Size(322' 8);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.groupBox1.TabIndex = 9;
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.okButton.Location = new Point(168' 372);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.okButton.Location = new Point(168' 372);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.okButton.TabIndex = 10;
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.cancelButton.Location = new Point(253' 372);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.cancelButton.Location = new Point(253' 372);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.cancelButton.TabIndex = 11;
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.AutoScaleBaseSize = new Size(5' 14);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.AutoScaleBaseSize = new Size(5' 14);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.ClientSize = new Size(339' 408);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,ShowColumnsDialog,The following statement contains a magic number: this.ClientSize = new Size(339' 408);
Magic Number,XPTable.Models,ShowColumnsDialog,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\HeaderContextMenu.cs,AddColumns,The following statement contains a magic number: cellStyle.Padding = new CellPadding(6' 0' 0' 0);
Magic Number,XPTable.Models,NumberColumn,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\NumberColumn.cs,Init,The following statement contains a magic number: this.maximum = (decimal) 100;
Magic Number,XPTable.Models,NumberColumn,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\NumberColumn.cs,ShouldSerializeMaximum,The following statement contains a magic number: return this.maximum != (decimal) 100;
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,Table,The following statement contains a magic number: this.Size = new Size(150' 150);
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,Table,The following statement contains a magic number: this.Size = new Size(150' 150);
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,Table,The following statement contains a magic number: this.hScrollBar.Width = this.Width - (this.BorderWidth * 2) - SystemInformation.VerticalScrollBarWidth;
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,Table,The following statement contains a magic number: this.vScrollBar.Height = this.Height - (this.BorderWidth * 2) - SystemInformation.HorizontalScrollBarHeight;
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,Table,The following statement contains a magic number: this.hoverTime = 1000;
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,Table,The following statement contains a magic number: this.toolTip.InitialDelay = 1000;
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,BeginUpdate,The following statement contains a magic number: if (this.IsHandleCreated)  			{  				if (this.beginUpdateCount == 0)  				{  					NativeMethods.SendMessage(this.Handle' 11' 0' 0);  				}    				this.beginUpdateCount++;  			}
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,EndUpdate,The following statement contains a magic number: if (this.beginUpdateCount == 0)  			{  				NativeMethods.SendMessage(this.Handle' 11' -1' 0);  				  				this.PerformLayout();  				this.Invalidate(true);  			}
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,ResetMouseEventArgs,The following statement contains a magic number: if (this.trackMouseEvent == null)  			{  				this.trackMouseEvent = new TRACKMOUSEEVENT();  				this.trackMouseEvent.dwFlags = 3;  				this.trackMouseEvent.hwndTrack = base.Handle;  			}
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,UpdateScrollBars,The following statement contains a magic number: bool hscroll = (this.ColumnModel.VisibleColumnsWidth > this.Width - (this.BorderWidth * 2));
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,UpdateScrollBars,The following statement contains a magic number: bool vscroll = this.TotalRowAndHeaderHeight+RowHeight > (this.Height - (this.BorderWidth * 2) - (hscroll ? SystemInformation.HorizontalScrollBarHeight : 0));
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,UpdateScrollBars,The following statement contains a magic number: if (vscroll)  			{  				hscroll = (this.ColumnModel.VisibleColumnsWidth > this.Width - (this.BorderWidth * 2) - SystemInformation.VerticalScrollBarWidth);  			}
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,UpdateScrollBars,The following statement contains a magic number: if (hscroll)  			{  				Rectangle hscrollBounds =  new Rectangle(this.BorderWidth'  					this.Height - this.BorderWidth - SystemInformation.HorizontalScrollBarHeight'  					this.Width - (this.BorderWidth * 2)'  					SystemInformation.HorizontalScrollBarHeight);  				  				if (vscroll)  				{  					hscrollBounds.Width -= SystemInformation.VerticalScrollBarWidth;  				}  				  				this.hScrollBar.Visible = true;  				this.hScrollBar.Bounds = hscrollBounds;  				this.hScrollBar.Minimum = 0;  				this.hScrollBar.Maximum = this.ColumnModel.VisibleColumnsWidth;  				this.hScrollBar.SmallChange = Column.MinimumWidth;  				this.hScrollBar.LargeChange = hscrollBounds.Width - 1;    				if (this.hScrollBar.Value > this.hScrollBar.Maximum - this.hScrollBar.LargeChange)  				{  					this.hScrollBar.Value = this.hScrollBar.Maximum - this.hScrollBar.LargeChange;  				}  			}  			else  			{  				this.hScrollBar.Visible = false;  				this.hScrollBar.Value = 0;  			}
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,UpdateScrollBars,The following statement contains a magic number: if (vscroll)  			{  				Rectangle vscrollBounds =  new Rectangle(this.Width - this.BorderWidth - SystemInformation.VerticalScrollBarWidth'  					this.BorderWidth'  					SystemInformation.VerticalScrollBarWidth'  					this.Height - (this.BorderWidth * 2));  				  				if (hscroll)  				{  					vscrollBounds.Height -= SystemInformation.HorizontalScrollBarHeight;  				}  				  				this.vScrollBar.Visible = true;  				this.vScrollBar.Bounds = vscrollBounds;  				this.vScrollBar.Minimum = 0;  				this.vScrollBar.Maximum = (this.RowCount > this.VisibleRowCount ? this.RowCount - 1 : this.VisibleRowCount) + 1;  				this.vScrollBar.SmallChange = 1;  				this.vScrollBar.LargeChange = Math.Max(this.VisibleRowCount - 1' 0); // resize to v small form can cause error    				if (this.vScrollBar.Value > this.vScrollBar.Maximum - this.vScrollBar.LargeChange)  				{  					this.vScrollBar.Value = this.vScrollBar.Maximum - this.vScrollBar.LargeChange;  				}  			}  			else  			{  				this.vScrollBar.Visible = false;  				this.vScrollBar.Value = 0;  			}
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,Sort,The following statement contains a magic number: if (this.TableModel.Rows.Count < 1000)  			{  				if (stable)  				{  					sorter = new InsertionSorter(this.TableModel' index' comparer' sortOrder);  				}  				else  				{  					sorter = new ShellSorter(this.TableModel' index' comparer' sortOrder);  				}  			}  			else  			{  				if (stable)  				{  					sorter = new MergeSorter(this.TableModel' index' comparer' sortOrder);  				}  				else  				{  					sorter = new HeapSorter(this.TableModel' index' comparer' sortOrder);  				}  			}
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnMouseWheel,The following statement contains a magic number: if (this.VScroll)  			{  				int newVal = this.vScrollBar.Value - ((e.Delta / 120) * SystemInformation.MouseWheelScrollLines);    				if (newVal < 0)  				{  					newVal = 0;  				}  				else if (newVal > this.vScrollBar.Maximum - this.vScrollBar.LargeChange + 1)  				{  					newVal = this.vScrollBar.Maximum - this.vScrollBar.LargeChange + 1;  				}    				this.VerticalScroll(newVal);  				this.vScrollBar.Value = newVal;  			}  			else if (this.HScroll)  			{  				int newVal = this.hScrollBar.Value - ((e.Delta / 120) * Column.MinimumWidth);    				if (newVal < 0)  				{  					newVal = 0;  				}  				else if (newVal > this.hScrollBar.Maximum - this.hScrollBar.LargeChange)  				{  					newVal = this.hScrollBar.Maximum - this.hScrollBar.LargeChange;  				}    				this.HorizontalScroll(newVal);  				this.hScrollBar.Value = newVal;  			}
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnMouseWheel,The following statement contains a magic number: if (this.VScroll)  			{  				int newVal = this.vScrollBar.Value - ((e.Delta / 120) * SystemInformation.MouseWheelScrollLines);    				if (newVal < 0)  				{  					newVal = 0;  				}  				else if (newVal > this.vScrollBar.Maximum - this.vScrollBar.LargeChange + 1)  				{  					newVal = this.vScrollBar.Maximum - this.vScrollBar.LargeChange + 1;  				}    				this.VerticalScroll(newVal);  				this.vScrollBar.Value = newVal;  			}  			else if (this.HScroll)  			{  				int newVal = this.hScrollBar.Value - ((e.Delta / 120) * Column.MinimumWidth);    				if (newVal < 0)  				{  					newVal = 0;  				}  				else if (newVal > this.hScrollBar.Maximum - this.hScrollBar.LargeChange)  				{  					newVal = this.hScrollBar.Maximum - this.hScrollBar.LargeChange;  				}    				this.HorizontalScroll(newVal);  				this.hScrollBar.Value = newVal;  			}
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnPaintHeader,The following statement contains a magic number: if (needDummyHeader)  			{  				// move and resize the headerRenderer  				this.headerRenderer.Bounds = new Rectangle(xPos' this.BorderWidth' this.ClientRectangle.Width - xPos + 2' this.HeaderHeight);    				phea.Graphics.SetClip(Rectangle.Intersect(e.ClipRectangle' this.headerRenderer.Bounds));    				phea.SetColumn(null);  				phea.SetColumnIndex(-1);  				phea.SetTable(this);  				phea.SetHeaderStyle(this.HeaderStyle);  				phea.SetHeaderRect(this.headerRenderer.Bounds);  						  				// let the user get the first crack at painting the header  				this.OnBeforePaintHeader(phea);  			  				// only send to the renderer if the user hasn't   				// set the handled property  				if (!phea.Handled)  				{  					this.headerRenderer.OnPaintHeader(phea);  				}    				// let the user have another go  				this.OnAfterPaintHeader(phea);  			}
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnPaintEmptyTableText,The following statement contains a magic number: if (this.ColumnModel == null || this.RowCount == 0)  			{  				Rectangle client = this.CellDataRect;    				client.Y += 10;  				client.Height -= 10;    				StringFormat format = new StringFormat();  				format.Alignment = StringAlignment.Center;  			  				using (SolidBrush brush = new SolidBrush(this.ForeColor))  				{  					if (this.DesignMode)  					{  						if (this.ColumnModel == null || this.TableModel == null)  						{  							string text = null;  						  							if (this.ColumnModel == null)  							{  								if (this.TableModel == null)  								{  									text = "Table does not have a ColumnModel or TableModel";  								}  								else  								{  									text = "Table does not have a ColumnModel";  								}  							}  							else if (this.TableModel == null)  							{  								text = "Table does not have a TableModel";  							}  					  							e.Graphics.DrawString(text' this.Font' brush' client' format);  						}  						else if (this.TableModel != null && this.TableModel.Rows.Count == 0)  						{  							if (this.NoItemsText != null && this.NoItemsText.Length > 0)  							{  								e.Graphics.DrawString(this.NoItemsText' this.Font' brush' client' format);  							}  						}  					}  					else  					{  						if (this.NoItemsText != null && this.NoItemsText.Length > 0)  						{  							e.Graphics.DrawString(this.NoItemsText' this.Font' brush' client' format);  						}  					}  				}  			}
Magic Number,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnPaintEmptyTableText,The following statement contains a magic number: if (this.ColumnModel == null || this.RowCount == 0)  			{  				Rectangle client = this.CellDataRect;    				client.Y += 10;  				client.Height -= 10;    				StringFormat format = new StringFormat();  				format.Alignment = StringAlignment.Center;  			  				using (SolidBrush brush = new SolidBrush(this.ForeColor))  				{  					if (this.DesignMode)  					{  						if (this.ColumnModel == null || this.TableModel == null)  						{  							string text = null;  						  							if (this.ColumnModel == null)  							{  								if (this.TableModel == null)  								{  									text = "Table does not have a ColumnModel or TableModel";  								}  								else  								{  									text = "Table does not have a ColumnModel";  								}  							}  							else if (this.TableModel == null)  							{  								text = "Table does not have a TableModel";  							}  					  							e.Graphics.DrawString(text' this.Font' brush' client' format);  						}  						else if (this.TableModel != null && this.TableModel.Rows.Count == 0)  						{  							if (this.NoItemsText != null && this.NoItemsText.Length > 0)  							{  								e.Graphics.DrawString(this.NoItemsText' this.Font' brush' client' format);  							}  						}  					}  					else  					{  						if (this.NoItemsText != null && this.NoItemsText.Length > 0)  						{  							e.Graphics.DrawString(this.NoItemsText' this.Font' brush' client' format);  						}  					}  				}  			}
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,ColumnCollectionEditor,The following statement contains a magic number: this.previewColumnModel.Columns.Add(new TextColumn("Column"' 116));
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,ColumnCollectionEditor,The following statement contains a magic number: this.previewTableModel.RowHeight = 20;
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,ColumnCollectionEditor,The following statement contains a magic number: this.previewTable.Size = new Size(120' 274);
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,ColumnCollectionEditor,The following statement contains a magic number: this.previewTable.Size = new Size(120' 274);
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,ColumnCollectionEditor,The following statement contains a magic number: this.previewTable.Location = new Point(246' 24);
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,ColumnCollectionEditor,The following statement contains a magic number: this.previewTable.Location = new Point(246' 24);
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,ColumnCollectionEditor,The following statement contains a magic number: this.previewLabel.Size = new Size(140' 16);
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,ColumnCollectionEditor,The following statement contains a magic number: this.previewLabel.Size = new Size(140' 16);
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,ColumnCollectionEditor,The following statement contains a magic number: this.previewLabel.Location = new Point(247' 8);
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,ColumnCollectionEditor,The following statement contains a magic number: this.previewLabel.Location = new Point(247' 8);
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,CreateCollectionForm,The following statement contains a magic number: editor.Width += 140;
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,CreateCollectionForm,The following statement contains a magic number: foreach (Control control in editor.Controls)  			{  				if (control.Name.Equals("propertiesLabel"))  				{  					control.Location = new Point(control.Left + 140' control.Top);  				}  				  				//  				if (control is PropertyGrid)  				{  					PropertyGrid grid = (PropertyGrid) control;  					  					grid.SelectedObjectsChanged += new EventHandler(this.PropertyGrid_SelectedObjectsChanged);  					grid.Location = new Point(grid.Left + 140' grid.Top);  					grid.Width -= 140;  				}  			}
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,CreateCollectionForm,The following statement contains a magic number: foreach (Control control in editor.Controls)  			{  				if (control.Name.Equals("propertiesLabel"))  				{  					control.Location = new Point(control.Left + 140' control.Top);  				}  				  				//  				if (control is PropertyGrid)  				{  					PropertyGrid grid = (PropertyGrid) control;  					  					grid.SelectedObjectsChanged += new EventHandler(this.PropertyGrid_SelectedObjectsChanged);  					grid.Location = new Point(grid.Left + 140' grid.Top);  					grid.Width -= 140;  				}  			}
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,CreateCollectionForm,The following statement contains a magic number: foreach (Control control in editor.Controls)  			{  				if (control.Name.Equals("propertiesLabel"))  				{  					control.Location = new Point(control.Left + 140' control.Top);  				}  				  				//  				if (control is PropertyGrid)  				{  					PropertyGrid grid = (PropertyGrid) control;  					  					grid.SelectedObjectsChanged += new EventHandler(this.PropertyGrid_SelectedObjectsChanged);  					grid.Location = new Point(grid.Left + 140' grid.Top);  					grid.Width -= 140;  				}  			}
Magic Number,XPTable.Models.Design,ColumnCollectionEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Design\ColumnCollectionEditor.cs,PropertyGrid_SelectedObjectsChanged,The following statement contains a magic number: if (objects.Length == 1)  			{  				Column column = (Column) objects[0];  				Cell cell = this.previewTableModel[0' 0];    				if (column is ButtonColumn)  				{  					cell.Text = "Button";  					cell.Data = null;  				}  				else if (column is CheckBoxColumn)  				{  					cell.Text = "Checkbox";  					cell.Data = null;  					cell.Checked = true;  				}  				else if (column is ColorColumn)  				{  					cell.Text = null;  					cell.Data = Color.Red;  				}  				else if (column is ComboBoxColumn)  				{  					cell.Text = "ComboBox";  					cell.Data = null;  				}  				else if (column is DateTimeColumn)  				{  					cell.Text = null;  					cell.Data = DateTime.Now;  				}  				else if (column is ImageColumn)  				{  					cell.Text = "Image";  					cell.Data = null;  				}  				else if (column is NumberColumn || column is ProgressBarColumn)  				{  					cell.Text = null;  					cell.Data = 50;  				}  				else //if (column is TextColumn)  				{  					cell.Text = "Text";  					cell.Data = null;  				}  				  				this.previewColumnModel.Columns.Add(column);  			}
Magic Number,XPTable.Renderers,ButtonCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ButtonCellRenderer.cs,CalcImageRect,The following statement contains a magic number: switch (imageAlignment)  			{  				case ContentAlignment.TopCenter:  				case ContentAlignment.MiddleCenter:  				case ContentAlignment.BottomCenter:  				{  					imageRect.X += (this.ClientRectangle.Width - image.Width) / 2;    					break;  				}    				case ContentAlignment.TopRight:  				case ContentAlignment.MiddleRight:  				case ContentAlignment.BottomRight:  				{  					imageRect.X = this.ClientRectangle.Right - image.Width;    					break;  				}  			}
Magic Number,XPTable.Renderers,ButtonCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ButtonCellRenderer.cs,CalcImageRect,The following statement contains a magic number: switch (imageAlignment)  			{  				case ContentAlignment.TopLeft:  				case ContentAlignment.TopCenter:  				case ContentAlignment.TopRight:  				{  					imageRect.Y += 2;    					break;  				}  				  				case ContentAlignment.MiddleLeft:  				case ContentAlignment.MiddleCenter:  				case ContentAlignment.MiddleRight:  				{  					imageRect.Y += (this.ClientRectangle.Height - image.Height) / 2;    					break;  				}    				case ContentAlignment.BottomLeft:  				case ContentAlignment.BottomCenter:  				case ContentAlignment.BottomRight:  				{  					imageRect.Y = this.ClientRectangle.Bottom - image.Height - 2;    					break;  				}  			}
Magic Number,XPTable.Renderers,ButtonCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ButtonCellRenderer.cs,CalcImageRect,The following statement contains a magic number: switch (imageAlignment)  			{  				case ContentAlignment.TopLeft:  				case ContentAlignment.TopCenter:  				case ContentAlignment.TopRight:  				{  					imageRect.Y += 2;    					break;  				}  				  				case ContentAlignment.MiddleLeft:  				case ContentAlignment.MiddleCenter:  				case ContentAlignment.MiddleRight:  				{  					imageRect.Y += (this.ClientRectangle.Height - image.Height) / 2;    					break;  				}    				case ContentAlignment.BottomLeft:  				case ContentAlignment.BottomCenter:  				case ContentAlignment.BottomRight:  				{  					imageRect.Y = this.ClientRectangle.Bottom - image.Height - 2;    					break;  				}  			}
Magic Number,XPTable.Renderers,ButtonCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ButtonCellRenderer.cs,CalcImageRect,The following statement contains a magic number: switch (imageAlignment)  			{  				case ContentAlignment.TopLeft:  				case ContentAlignment.TopCenter:  				case ContentAlignment.TopRight:  				{  					imageRect.Y += 2;    					break;  				}  				  				case ContentAlignment.MiddleLeft:  				case ContentAlignment.MiddleCenter:  				case ContentAlignment.MiddleRight:  				{  					imageRect.Y += (this.ClientRectangle.Height - image.Height) / 2;    					break;  				}    				case ContentAlignment.BottomLeft:  				case ContentAlignment.BottomCenter:  				case ContentAlignment.BottomRight:  				{  					imageRect.Y = this.ClientRectangle.Bottom - image.Height - 2;    					break;  				}  			}
Magic Number,XPTable.Renderers,ButtonCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ButtonCellRenderer.cs,OnPaint,The following statement contains a magic number: textRect.Inflate(-4' -2);
Magic Number,XPTable.Renderers,ButtonCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ButtonCellRenderer.cs,OnPaint,The following statement contains a magic number: textRect.Inflate(-4' -2);
Magic Number,XPTable.Renderers,ButtonCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ButtonCellRenderer.cs,OnPaint,The following statement contains a magic number: if (e.Focused && e.Enabled)  			{  				Rectangle focusRect = this.CalcButtonBounds();  				  				if (ThemeManager.VisualStylesEnabled)  				{  					focusRect.Inflate(-3' -3);    					if (this.GetButtonRendererData(e.Cell).ButtonState != PushButtonStates.Pressed)  					{  						ControlPaint.DrawFocusRectangle(e.Graphics' focusRect);  					}  				}  				else  				{  					focusRect.Inflate(-4' -4);    					ControlPaint.DrawFocusRectangle(e.Graphics' focusRect);  				}  			}
Magic Number,XPTable.Renderers,ButtonCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ButtonCellRenderer.cs,OnPaint,The following statement contains a magic number: if (e.Focused && e.Enabled)  			{  				Rectangle focusRect = this.CalcButtonBounds();  				  				if (ThemeManager.VisualStylesEnabled)  				{  					focusRect.Inflate(-3' -3);    					if (this.GetButtonRendererData(e.Cell).ButtonState != PushButtonStates.Pressed)  					{  						ControlPaint.DrawFocusRectangle(e.Graphics' focusRect);  					}  				}  				else  				{  					focusRect.Inflate(-4' -4);    					ControlPaint.DrawFocusRectangle(e.Graphics' focusRect);  				}  			}
Magic Number,XPTable.Renderers,ButtonCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ButtonCellRenderer.cs,OnPaint,The following statement contains a magic number: if (e.Focused && e.Enabled)  			{  				Rectangle focusRect = this.CalcButtonBounds();  				  				if (ThemeManager.VisualStylesEnabled)  				{  					focusRect.Inflate(-3' -3);    					if (this.GetButtonRendererData(e.Cell).ButtonState != PushButtonStates.Pressed)  					{  						ControlPaint.DrawFocusRectangle(e.Graphics' focusRect);  					}  				}  				else  				{  					focusRect.Inflate(-4' -4);    					ControlPaint.DrawFocusRectangle(e.Graphics' focusRect);  				}  			}
Magic Number,XPTable.Renderers,ButtonCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ButtonCellRenderer.cs,OnPaint,The following statement contains a magic number: if (e.Focused && e.Enabled)  			{  				Rectangle focusRect = this.CalcButtonBounds();  				  				if (ThemeManager.VisualStylesEnabled)  				{  					focusRect.Inflate(-3' -3);    					if (this.GetButtonRendererData(e.Cell).ButtonState != PushButtonStates.Pressed)  					{  						ControlPaint.DrawFocusRectangle(e.Graphics' focusRect);  					}  				}  				else  				{  					focusRect.Inflate(-4' -4);    					ControlPaint.DrawFocusRectangle(e.Graphics' focusRect);  				}  			}
Magic Number,XPTable.Renderers,CellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CellRenderer.cs,OnPaintBackground,The following statement contains a magic number: if (e.Selected && (!e.Table.HideSelection || (e.Table.HideSelection && (e.Table.Focused || e.Table.IsEditing))))  			{  				if (e.Table.Focused || e.Table.IsEditing)  				{  					this.ForeColor = e.Table.SelectionForeColor;  					this.BackColor = e.Table.SelectionBackColor;  				}  				else  				{  					this.BackColor = e.Table.UnfocusedSelectionBackColor;  					this.ForeColor = e.Table.UnfocusedSelectionForeColor;  				}    				if (this.BackColor.A != 0)  				{  					e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  				}  			}  			else  			{  				this.ForeColor = e.Cell != null ? e.Cell.ForeColor : Color.Black;    				if (!e.Sorted || (e.Sorted && e.Table.SortedColumnBackColor.A < 255))  				{  					if (e.Cell != null)  					{  						if (e.Cell.BackColor.A < 255)  						{  							if (e.Row % 2 == 1)  							{  								if (e.Table.AlternatingRowColor.A != 0)  								{  									this.BackColor = e.Table.AlternatingRowColor;  									e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  								}  							}  						  							this.BackColor = e.Cell.BackColor;  							if (e.Cell.BackColor.A != 0)  							{  								e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  							}  						}  						else  						{  							this.BackColor = e.Cell.BackColor;  							if (e.Cell.BackColor.A != 0)  							{  								e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  							}  						}  					}  					else  					{  						if (e.Row % 2 == 1)  						{  							if (e.Table.AlternatingRowColor.A != 0)  							{  								this.BackColor = e.Table.AlternatingRowColor;  								e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  							}  						}  					}  					  					if (e.Sorted)  					{  						this.BackColor = e.Table.SortedColumnBackColor;  						if (e.Table.SortedColumnBackColor.A != 0)  						{  							e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  						}  					}  				}  				else  				{  					this.BackColor = e.Table.SortedColumnBackColor;  					e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  				}  			}
Magic Number,XPTable.Renderers,CellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CellRenderer.cs,OnPaintBackground,The following statement contains a magic number: if (e.Selected && (!e.Table.HideSelection || (e.Table.HideSelection && (e.Table.Focused || e.Table.IsEditing))))  			{  				if (e.Table.Focused || e.Table.IsEditing)  				{  					this.ForeColor = e.Table.SelectionForeColor;  					this.BackColor = e.Table.SelectionBackColor;  				}  				else  				{  					this.BackColor = e.Table.UnfocusedSelectionBackColor;  					this.ForeColor = e.Table.UnfocusedSelectionForeColor;  				}    				if (this.BackColor.A != 0)  				{  					e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  				}  			}  			else  			{  				this.ForeColor = e.Cell != null ? e.Cell.ForeColor : Color.Black;    				if (!e.Sorted || (e.Sorted && e.Table.SortedColumnBackColor.A < 255))  				{  					if (e.Cell != null)  					{  						if (e.Cell.BackColor.A < 255)  						{  							if (e.Row % 2 == 1)  							{  								if (e.Table.AlternatingRowColor.A != 0)  								{  									this.BackColor = e.Table.AlternatingRowColor;  									e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  								}  							}  						  							this.BackColor = e.Cell.BackColor;  							if (e.Cell.BackColor.A != 0)  							{  								e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  							}  						}  						else  						{  							this.BackColor = e.Cell.BackColor;  							if (e.Cell.BackColor.A != 0)  							{  								e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  							}  						}  					}  					else  					{  						if (e.Row % 2 == 1)  						{  							if (e.Table.AlternatingRowColor.A != 0)  							{  								this.BackColor = e.Table.AlternatingRowColor;  								e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  							}  						}  					}  					  					if (e.Sorted)  					{  						this.BackColor = e.Table.SortedColumnBackColor;  						if (e.Table.SortedColumnBackColor.A != 0)  						{  							e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  						}  					}  				}  				else  				{  					this.BackColor = e.Table.SortedColumnBackColor;  					e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  				}  			}
Magic Number,XPTable.Renderers,CellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CellRenderer.cs,OnPaintBackground,The following statement contains a magic number: if (e.Selected && (!e.Table.HideSelection || (e.Table.HideSelection && (e.Table.Focused || e.Table.IsEditing))))  			{  				if (e.Table.Focused || e.Table.IsEditing)  				{  					this.ForeColor = e.Table.SelectionForeColor;  					this.BackColor = e.Table.SelectionBackColor;  				}  				else  				{  					this.BackColor = e.Table.UnfocusedSelectionBackColor;  					this.ForeColor = e.Table.UnfocusedSelectionForeColor;  				}    				if (this.BackColor.A != 0)  				{  					e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  				}  			}  			else  			{  				this.ForeColor = e.Cell != null ? e.Cell.ForeColor : Color.Black;    				if (!e.Sorted || (e.Sorted && e.Table.SortedColumnBackColor.A < 255))  				{  					if (e.Cell != null)  					{  						if (e.Cell.BackColor.A < 255)  						{  							if (e.Row % 2 == 1)  							{  								if (e.Table.AlternatingRowColor.A != 0)  								{  									this.BackColor = e.Table.AlternatingRowColor;  									e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  								}  							}  						  							this.BackColor = e.Cell.BackColor;  							if (e.Cell.BackColor.A != 0)  							{  								e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  							}  						}  						else  						{  							this.BackColor = e.Cell.BackColor;  							if (e.Cell.BackColor.A != 0)  							{  								e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  							}  						}  					}  					else  					{  						if (e.Row % 2 == 1)  						{  							if (e.Table.AlternatingRowColor.A != 0)  							{  								this.BackColor = e.Table.AlternatingRowColor;  								e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  							}  						}  					}  					  					if (e.Sorted)  					{  						this.BackColor = e.Table.SortedColumnBackColor;  						if (e.Table.SortedColumnBackColor.A != 0)  						{  							e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  						}  					}  				}  				else  				{  					this.BackColor = e.Table.SortedColumnBackColor;  					e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  				}  			}
Magic Number,XPTable.Renderers,CellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CellRenderer.cs,OnPaintBackground,The following statement contains a magic number: if (e.Selected && (!e.Table.HideSelection || (e.Table.HideSelection && (e.Table.Focused || e.Table.IsEditing))))  			{  				if (e.Table.Focused || e.Table.IsEditing)  				{  					this.ForeColor = e.Table.SelectionForeColor;  					this.BackColor = e.Table.SelectionBackColor;  				}  				else  				{  					this.BackColor = e.Table.UnfocusedSelectionBackColor;  					this.ForeColor = e.Table.UnfocusedSelectionForeColor;  				}    				if (this.BackColor.A != 0)  				{  					e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  				}  			}  			else  			{  				this.ForeColor = e.Cell != null ? e.Cell.ForeColor : Color.Black;    				if (!e.Sorted || (e.Sorted && e.Table.SortedColumnBackColor.A < 255))  				{  					if (e.Cell != null)  					{  						if (e.Cell.BackColor.A < 255)  						{  							if (e.Row % 2 == 1)  							{  								if (e.Table.AlternatingRowColor.A != 0)  								{  									this.BackColor = e.Table.AlternatingRowColor;  									e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  								}  							}  						  							this.BackColor = e.Cell.BackColor;  							if (e.Cell.BackColor.A != 0)  							{  								e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  							}  						}  						else  						{  							this.BackColor = e.Cell.BackColor;  							if (e.Cell.BackColor.A != 0)  							{  								e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  							}  						}  					}  					else  					{  						if (e.Row % 2 == 1)  						{  							if (e.Table.AlternatingRowColor.A != 0)  							{  								this.BackColor = e.Table.AlternatingRowColor;  								e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  							}  						}  					}  					  					if (e.Sorted)  					{  						this.BackColor = e.Table.SortedColumnBackColor;  						if (e.Table.SortedColumnBackColor.A != 0)  						{  							e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  						}  					}  				}  				else  				{  					this.BackColor = e.Table.SortedColumnBackColor;  					e.Graphics.FillRectangle(this.BackBrush' e.CellRect);  				}  			}
Magic Number,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,CheckBoxCellRenderer,The following statement contains a magic number: this.checkSize = new Size(13' 13);
Magic Number,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,CheckBoxCellRenderer,The following statement contains a magic number: this.checkSize = new Size(13' 13);
Magic Number,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,CalcCheckRect,The following statement contains a magic number: switch (rowAlignment)  			{  				case RowAlignment.Center:  				{  					checkRect.Y += (this.ClientRectangle.Height - checkRect.Height) / 2;    					break;  				}    				case RowAlignment.Bottom:  				{  					checkRect.Y = this.ClientRectangle.Bottom - checkRect.Height;    					break;  				}  			}
Magic Number,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,CalcCheckRect,The following statement contains a magic number: if (!this.DrawText)  			{  				if (columnAlignment == ColumnAlignment.Center)  				{  					checkRect.X += (this.ClientRectangle.Width - checkRect.Width) / 2;  				}  				else if (columnAlignment == ColumnAlignment.Right)  				{  					checkRect.X = this.ClientRectangle.Right - checkRect.Width;  				}  			}
Magic Number,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,ValidateCheckState,The following statement contains a magic number: switch (cell.CheckState)  			{  				case CheckState.Checked:  				{		  					if (rendererData.CheckState <= CheckBoxStates.UncheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 4;  					}  					else if (rendererData.CheckState >= CheckBoxStates.MixedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 4;  					}  					  					break;  				}    				case CheckState.Indeterminate:  				{		  					if (rendererData.CheckState <= CheckBoxStates.UncheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 8;  					}  					else if (rendererData.CheckState <= CheckBoxStates.CheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 4;  					}  					  					break;  				}    				default:  				{  					if (rendererData.CheckState >= CheckBoxStates.MixedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 8;  					}  					else if (rendererData.CheckState >= CheckBoxStates.CheckedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 4;  					}  					  					break;  				}  			}
Magic Number,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,ValidateCheckState,The following statement contains a magic number: switch (cell.CheckState)  			{  				case CheckState.Checked:  				{		  					if (rendererData.CheckState <= CheckBoxStates.UncheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 4;  					}  					else if (rendererData.CheckState >= CheckBoxStates.MixedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 4;  					}  					  					break;  				}    				case CheckState.Indeterminate:  				{		  					if (rendererData.CheckState <= CheckBoxStates.UncheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 8;  					}  					else if (rendererData.CheckState <= CheckBoxStates.CheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 4;  					}  					  					break;  				}    				default:  				{  					if (rendererData.CheckState >= CheckBoxStates.MixedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 8;  					}  					else if (rendererData.CheckState >= CheckBoxStates.CheckedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 4;  					}  					  					break;  				}  			}
Magic Number,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,ValidateCheckState,The following statement contains a magic number: switch (cell.CheckState)  			{  				case CheckState.Checked:  				{		  					if (rendererData.CheckState <= CheckBoxStates.UncheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 4;  					}  					else if (rendererData.CheckState >= CheckBoxStates.MixedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 4;  					}  					  					break;  				}    				case CheckState.Indeterminate:  				{		  					if (rendererData.CheckState <= CheckBoxStates.UncheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 8;  					}  					else if (rendererData.CheckState <= CheckBoxStates.CheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 4;  					}  					  					break;  				}    				default:  				{  					if (rendererData.CheckState >= CheckBoxStates.MixedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 8;  					}  					else if (rendererData.CheckState >= CheckBoxStates.CheckedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 4;  					}  					  					break;  				}  			}
Magic Number,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,ValidateCheckState,The following statement contains a magic number: switch (cell.CheckState)  			{  				case CheckState.Checked:  				{		  					if (rendererData.CheckState <= CheckBoxStates.UncheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 4;  					}  					else if (rendererData.CheckState >= CheckBoxStates.MixedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 4;  					}  					  					break;  				}    				case CheckState.Indeterminate:  				{		  					if (rendererData.CheckState <= CheckBoxStates.UncheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 8;  					}  					else if (rendererData.CheckState <= CheckBoxStates.CheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 4;  					}  					  					break;  				}    				default:  				{  					if (rendererData.CheckState >= CheckBoxStates.MixedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 8;  					}  					else if (rendererData.CheckState >= CheckBoxStates.CheckedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 4;  					}  					  					break;  				}  			}
Magic Number,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,ValidateCheckState,The following statement contains a magic number: switch (cell.CheckState)  			{  				case CheckState.Checked:  				{		  					if (rendererData.CheckState <= CheckBoxStates.UncheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 4;  					}  					else if (rendererData.CheckState >= CheckBoxStates.MixedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 4;  					}  					  					break;  				}    				case CheckState.Indeterminate:  				{		  					if (rendererData.CheckState <= CheckBoxStates.UncheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 8;  					}  					else if (rendererData.CheckState <= CheckBoxStates.CheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 4;  					}  					  					break;  				}    				default:  				{  					if (rendererData.CheckState >= CheckBoxStates.MixedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 8;  					}  					else if (rendererData.CheckState >= CheckBoxStates.CheckedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 4;  					}  					  					break;  				}  			}
Magic Number,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,ValidateCheckState,The following statement contains a magic number: switch (cell.CheckState)  			{  				case CheckState.Checked:  				{		  					if (rendererData.CheckState <= CheckBoxStates.UncheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 4;  					}  					else if (rendererData.CheckState >= CheckBoxStates.MixedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 4;  					}  					  					break;  				}    				case CheckState.Indeterminate:  				{		  					if (rendererData.CheckState <= CheckBoxStates.UncheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 8;  					}  					else if (rendererData.CheckState <= CheckBoxStates.CheckedDisabled)  					{  						rendererData.CheckState |= (CheckBoxStates) 4;  					}  					  					break;  				}    				default:  				{  					if (rendererData.CheckState >= CheckBoxStates.MixedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 8;  					}  					else if (rendererData.CheckState >= CheckBoxStates.CheckedNormal)  					{  						rendererData.CheckState -= (CheckBoxStates) 4;  					}  					  					break;  				}  			}
Magic Number,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,OnPaintCell,The following statement contains a magic number: if (e.Table.ColumnModel.Columns[e.Column] is CheckBoxColumn)  			{  				CheckBoxColumn column = (CheckBoxColumn) e.Table.ColumnModel.Columns[e.Column];    				this.checkSize = column.CheckSize;  				this.drawText = column.DrawText;  			}  			else  			{  				this.checkSize = new Size(13' 13);  				this.drawText = true;  			}
Magic Number,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,OnPaintCell,The following statement contains a magic number: if (e.Table.ColumnModel.Columns[e.Column] is CheckBoxColumn)  			{  				CheckBoxColumn column = (CheckBoxColumn) e.Table.ColumnModel.Columns[e.Column];    				this.checkSize = column.CheckSize;  				this.drawText = column.DrawText;  			}  			else  			{  				this.checkSize = new Size(13' 13);  				this.drawText = true;  			}
Magic Number,XPTable.Renderers,ColorCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ColorCellRenderer.cs,CalcColorRect,The following statement contains a magic number: rect.X += 2;
Magic Number,XPTable.Renderers,ColorCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ColorCellRenderer.cs,CalcColorRect,The following statement contains a magic number: rect.Y += 2;
Magic Number,XPTable.Renderers,ColorCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ColorCellRenderer.cs,CalcColorRect,The following statement contains a magic number: rect.Height -= 6;
Magic Number,XPTable.Renderers,ColorCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ColorCellRenderer.cs,CalcColorRect,The following statement contains a magic number: rect.Width = 16;
Magic Number,XPTable.Renderers,ColorCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ColorCellRenderer.cs,OnPaint,The following statement contains a magic number: if (this.ShowColor)  			{  				Rectangle colorRect = this.CalcColorRect(e.Table.TableModel.Rows[e.Row].Alignment' e.Table.ColumnModel.Columns[e.Column].Alignment);    				if (color != Color.Empty)  				{  					using (SolidBrush brush = new SolidBrush(color))  					{  						if (e.Enabled)  						{  							e.Graphics.FillRectangle(brush' colorRect);  							e.Graphics.DrawRectangle(SystemPens.ControlText' colorRect);  						}  						else  						{  							using (Bitmap b = new Bitmap(colorRect.Width' colorRect.Height))  							{  								using (Graphics g = Graphics.FromImage(b))  								{  									g.FillRectangle(brush' 0' 0' colorRect.Width' colorRect.Height);  									g.DrawRectangle(SystemPens.ControlText' 0' 0' colorRect.Width-1' colorRect.Height-1);  								}    								ControlPaint.DrawImageDisabled(e.Graphics' b' colorRect.X' colorRect.Y' this.BackColor);  							}  						}  					}    					textRect.X = colorRect.Right + 2;  					textRect.Width -= colorRect.Width + 4;  				}  			}
Magic Number,XPTable.Renderers,ColorCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ColorCellRenderer.cs,OnPaint,The following statement contains a magic number: if (this.ShowColor)  			{  				Rectangle colorRect = this.CalcColorRect(e.Table.TableModel.Rows[e.Row].Alignment' e.Table.ColumnModel.Columns[e.Column].Alignment);    				if (color != Color.Empty)  				{  					using (SolidBrush brush = new SolidBrush(color))  					{  						if (e.Enabled)  						{  							e.Graphics.FillRectangle(brush' colorRect);  							e.Graphics.DrawRectangle(SystemPens.ControlText' colorRect);  						}  						else  						{  							using (Bitmap b = new Bitmap(colorRect.Width' colorRect.Height))  							{  								using (Graphics g = Graphics.FromImage(b))  								{  									g.FillRectangle(brush' 0' 0' colorRect.Width' colorRect.Height);  									g.DrawRectangle(SystemPens.ControlText' 0' 0' colorRect.Width-1' colorRect.Height-1);  								}    								ControlPaint.DrawImageDisabled(e.Graphics' b' colorRect.X' colorRect.Y' this.BackColor);  							}  						}  					}    					textRect.X = colorRect.Right + 2;  					textRect.Width -= colorRect.Width + 4;  				}  			}
Magic Number,XPTable.Renderers,ColorCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ColorCellRenderer.cs,OnPaint,The following statement contains a magic number: if (this.ShowColorName)  			{  				string text = "";    				if (color.IsEmpty)  				{  					text = "Empty";  				}  				else if (color.IsNamedColor || color.IsSystemColor)  				{  					text = color.Name;  				}  				else  				{  					if (color.A != 255)  					{  						text += color.A + "' ";  					}    					text += color.R +"' " + color.G + "' " + color.B;  				}    				if (e.Enabled)  				{  					e.Graphics.DrawString(text' this.Font' this.ForeBrush' textRect' this.StringFormat);  				}  				else  				{  					e.Graphics.DrawString(text' this.Font' this.GrayTextBrush' textRect' this.StringFormat);  				}  			}
Magic Number,XPTable.Renderers,DropDownCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\DropDownCellRenderer.cs,DropDownCellRenderer,The following statement contains a magic number: this.buttonWidth = 15;
Magic Number,XPTable.Renderers,GradientHeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\GradientHeaderRenderer.cs,GradientHeaderRenderer,The following statement contains a magic number: this.startColor = Color.FromArgb(200' 209' 215);
Magic Number,XPTable.Renderers,GradientHeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\GradientHeaderRenderer.cs,GradientHeaderRenderer,The following statement contains a magic number: this.startColor = Color.FromArgb(200' 209' 215);
Magic Number,XPTable.Renderers,GradientHeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\GradientHeaderRenderer.cs,GradientHeaderRenderer,The following statement contains a magic number: this.startColor = Color.FromArgb(200' 209' 215);
Magic Number,XPTable.Renderers,GradientHeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\GradientHeaderRenderer.cs,GradientHeaderRenderer,The following statement contains a magic number: this.endColor = Color.FromArgb(239' 239' 239);
Magic Number,XPTable.Renderers,GradientHeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\GradientHeaderRenderer.cs,GradientHeaderRenderer,The following statement contains a magic number: this.endColor = Color.FromArgb(239' 239' 239);
Magic Number,XPTable.Renderers,GradientHeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\GradientHeaderRenderer.cs,GradientHeaderRenderer,The following statement contains a magic number: this.endColor = Color.FromArgb(239' 239' 239);
Magic Number,XPTable.Renderers,GradientHeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\GradientHeaderRenderer.cs,OnPaintBackground,The following statement contains a magic number: if (e.Column == null || e.Column.ColumnState != ColumnState.Pressed)  			{  				using (LinearGradientBrush brush = new LinearGradientBrush(e.HeaderRect' this.StartColor' this.EndColor' LinearGradientMode.Vertical))  				{  					e.Graphics.FillRectangle(brush' e.HeaderRect);  				}    				using (Pen pen = new Pen(this.EndColor))  				{  					e.Graphics.DrawLine(pen' e.HeaderRect.Left' e.HeaderRect.Top' e.HeaderRect.Right-2' e.HeaderRect.Top);  					e.Graphics.DrawLine(pen' e.HeaderRect.Left' e.HeaderRect.Top' e.HeaderRect.Left' e.HeaderRect.Bottom-1);  				}    				using (Pen pen = new Pen(this.StartColor))  				{  					e.Graphics.DrawLine(pen' e.HeaderRect.Right-1' e.HeaderRect.Top' e.HeaderRect.Right-1' e.HeaderRect.Bottom-1);  					e.Graphics.DrawLine(pen' e.HeaderRect.Left+1' e.HeaderRect.Bottom-1' e.HeaderRect.Right-1' e.HeaderRect.Bottom-1);  				}  			}  			else  			{  				Color pressed = this.PressedColor;    				if (pressed == Color.Empty)  				{  					pressed = ControlPaint.Light(this.startColor);  				}  				  				using (SolidBrush brush = new SolidBrush(pressed))  				{  					e.Graphics.FillRectangle(brush' e.HeaderRect);  				}  				  				using (Pen pen = new Pen(this.StartColor))  				{  					e.Graphics.DrawRectangle(pen' e.HeaderRect.X' e.HeaderRect.Y' e.HeaderRect.Width-1' e.HeaderRect.Height-1);  				}  			}
Magic Number,XPTable.Renderers,HeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\HeaderRenderer.cs,CalcImageRect,The following statement contains a magic number: if (imageRect.Width > 16)  			{  				imageRect.Width = 16;  			}
Magic Number,XPTable.Renderers,HeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\HeaderRenderer.cs,CalcImageRect,The following statement contains a magic number: if (imageRect.Width > 16)  			{  				imageRect.Width = 16;  			}
Magic Number,XPTable.Renderers,HeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\HeaderRenderer.cs,CalcImageRect,The following statement contains a magic number: if (imageRect.Height > 16)  			{  				imageRect.Height = 16;    				imageRect.Y += (this.ClientRectangle.Height - imageRect.Height) / 2;  			}
Magic Number,XPTable.Renderers,HeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\HeaderRenderer.cs,CalcImageRect,The following statement contains a magic number: if (imageRect.Height > 16)  			{  				imageRect.Height = 16;    				imageRect.Y += (this.ClientRectangle.Height - imageRect.Height) / 2;  			}
Magic Number,XPTable.Renderers,HeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\HeaderRenderer.cs,CalcImageRect,The following statement contains a magic number: if (imageRect.Height > 16)  			{  				imageRect.Height = 16;    				imageRect.Y += (this.ClientRectangle.Height - imageRect.Height) / 2;  			}
Magic Number,XPTable.Renderers,HeaderRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\HeaderRenderer.cs,CalcSortArrowRect,The following statement contains a magic number: arrowRect.Width = 12;
Magic Number,XPTable.Renderers,ImageCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ImageCellRenderer.cs,CalcImageRect,The following statement contains a magic number: if (rowAlignment == RowAlignment.Center)  			{  				imageRect.Y += (this.ClientRectangle.Height - imageRect.Height) / 2;  			}  			else if (rowAlignment == RowAlignment.Bottom)  			{  				imageRect.Y = this.ClientRectangle.Bottom - imageRect.Height;  			}
Magic Number,XPTable.Renderers,ImageCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ImageCellRenderer.cs,CalcImageRect,The following statement contains a magic number: if (!this.DrawText)  			{  				if (columnAlignment == ColumnAlignment.Center)  				{  					imageRect.X += (this.ClientRectangle.Width - imageRect.Width) / 2;  				}  				else if (columnAlignment == ColumnAlignment.Right)  				{  					imageRect.X = this.ClientRectangle.Width - imageRect.Width;  				}  			}
Magic Number,XPTable.Renderers,NumberCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\NumberCellRenderer.cs,NumberCellRenderer,The following statement contains a magic number: this.buttonWidth = 15;
Magic Number,XPTable.Renderers,NumberCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\NumberCellRenderer.cs,NumberCellRenderer,The following statement contains a magic number: this.maximum = (decimal) 100;
Magic Number,XPTable.Renderers,NumberCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\NumberCellRenderer.cs,GetUpButtonBounds,The following statement contains a magic number: buttonRect.Height /= 2;
Magic Number,XPTable.Renderers,NumberCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\NumberCellRenderer.cs,GetDownButtonBounds,The following statement contains a magic number: int height = buttonRect.Height / 2;
Magic Number,XPTable.Renderers,NumberCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\NumberCellRenderer.cs,OnPaintCell,The following statement contains a magic number: if (e.Table.ColumnModel.Columns[e.Column] is NumberColumn)  			{  				NumberColumn column = (NumberColumn) e.Table.ColumnModel.Columns[e.Column];  			  				this.ShowUpDownButtons = column.ShowUpDownButtons;  				this.UpDownAlign = column.UpDownAlign;  				this.Maximum = column.Maximum;  				this.Minimum = column.Minimum;    				// if the table is editing this cell and the editor is a   				// NumberCellEditor then we should display the updown buttons  				if (e.Table.IsEditing && e.Table.EditingCell == e.CellPos && e.Table.EditingCellEditor is NumberCellEditor)  				{  					this.ShowUpDownButtons = true;  				}  			}  			else  			{  				this.ShowUpDownButtons = false;  				this.UpDownAlign = LeftRightAlignment.Right;  				this.Maximum = 100;  				this.Minimum = 0;  			}
Magic Number,XPTable.Renderers,ProgressBarCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ProgressBarCellRenderer.cs,OnPaint,The following statement contains a magic number: if (intVal < 0)  			{  				intVal = 0;  			}  			else if (intVal > 100)  			{  				intVal = 100;  			}
Magic Number,XPTable.Renderers,ProgressBarCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ProgressBarCellRenderer.cs,OnPaint,The following statement contains a magic number: if (intVal < 0)  			{  				intVal = 0;  			}  			else if (intVal > 100)  			{  				intVal = 100;  			}
Magic Number,XPTable.Renderers,ProgressBarCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ProgressBarCellRenderer.cs,OnPaint,The following statement contains a magic number: chunkRect.Inflate(-2' -2);
Magic Number,XPTable.Renderers,ProgressBarCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ProgressBarCellRenderer.cs,OnPaint,The following statement contains a magic number: chunkRect.Inflate(-2' -2);
Magic Number,XPTable.Renderers,ProgressBarCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ProgressBarCellRenderer.cs,OnPaint,The following statement contains a magic number: if (this.DrawPercentageText)  			{  				this.Alignment = ColumnAlignment.Center;  				this.LineAlignment = RowAlignment.Center;    				Font font = new Font(this.Font.FontFamily' this.Font.SizeInPoints' FontStyle.Bold);    				if (e.Enabled)  				{  					e.Graphics.DrawString("" + intVal + "%"' font' SystemBrushes.ControlText' this.ClientRectangle' this.StringFormat);  				}  				else  				{  					e.Graphics.DrawString("" + intVal + "%"' font' Brushes.White' this.ClientRectangle' this.StringFormat);  				}  				  				if (!ThemeManager.VisualStylesEnabled)  				{  					// remember the old clip area  					Region oldClip = e.Graphics.Clip;  					  					Rectangle clipRect = this.ClientRectangle;  					clipRect.Width = chunkRect.Width + 2;  					e.Graphics.SetClip(clipRect);    					if (e.Table.Enabled)  					{  						e.Graphics.DrawString("" + intVal + "%"' font' SystemBrushes.HighlightText' this.ClientRectangle' this.StringFormat);  					}  					else  					{  						e.Graphics.DrawString("" + intVal + "%"' font' Brushes.White' this.ClientRectangle' this.StringFormat);  					}    					// restore the old clip area  					e.Graphics.SetClip(oldClip' CombineMode.Replace);  				}  			}
Magic Number,XPTable.Sorting,HeapSorter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Sorting\HeapSorter.cs,Sort,The following statement contains a magic number: for (i=n/2; i>0; i--)   			{  				this.DownHeap(i' n);  			}
Magic Number,XPTable.Sorting,HeapSorter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Sorting\HeapSorter.cs,DownHeap,The following statement contains a magic number: while ((k <= n / 2) && loop)   			{  				j = k + k;    				if (j < n)   				{  					if (this.Compare(this.TableModel.Rows[j-1]' this.TableModel.Rows[j]) < 0)   					{					  						j++;  					}  				}	    				if (this.Compare(this.TableModel.Rows[k-1]' this.TableModel.Rows[j-1]) >= 0)   				{  					loop = false;  				}   				else   				{  					this.Swap(k-1' j-1);  					  					k = j;  				}  			}
Magic Number,XPTable.Sorting,MergeSorter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Sorting\MergeSorter.cs,Sort,The following statement contains a magic number: if (fromPos < toPos)   			{  				mid = (fromPos + toPos) / 2;  			  				this.Sort(fromPos' mid);  				this.Sort(mid + 1' toPos);    				end_low = mid;  				start_high = mid + 1;    				while (fromPos <= end_low & start_high <= toPos)   				{  					if (this.Compare(this.TableModel.Rows[fromPos]' this.TableModel.Rows[start_high]) < 0)   					{  						fromPos++;  					}   					else   					{  						tmp = this.TableModel.Rows[start_high];  						  						for (i = start_high - 1; i >= fromPos; i--)   						{  							this.Set(i+1' this.TableModel.Rows[i]);  						}    						this.Set(fromPos' tmp);  						  						fromPos++;  						end_low++;  						start_high++;  					}  				}  			}
Magic Number,XPTable.Sorting,ShellSorter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Sorting\ShellSorter.cs,Sort,The following statement contains a magic number: while (h * 3 + 1 <= this.TableModel.Rows.Count)   			{  				h = 3 * h + 1;  			}
Magic Number,XPTable.Sorting,ShellSorter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Sorting\ShellSorter.cs,Sort,The following statement contains a magic number: while (h * 3 + 1 <= this.TableModel.Rows.Count)   			{  				h = 3 * h + 1;  			}
Magic Number,XPTable.Sorting,ShellSorter,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Sorting\ShellSorter.cs,Sort,The following statement contains a magic number: while (h > 0)   			{  				for (i=h-1; i<this.TableModel.Rows.Count; i++)   				{  					b = this.TableModel.Rows[i];  					j = i;  					loop = true;    					while (loop)   					{  						if (j >= h)   						{                              if (this.Compare(this.TableModel.Rows[j - h]' b) > 0)  							{  								this.Set(j' j-h);  								  								j = j - h;  							}   							else   							{  								loop = false;  							}  						}   						else   						{  							loop = false;  						}  					}    					this.Set(j' b);  				}    				h = h / 3;  			}
Magic Number,XPTable.Win32,TRACKMOUSEEVENT,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Win32\TRACKMOUSEEVENT.cs,TRACKMOUSEEVENT,The following statement contains a magic number: this.dwHoverTime = 100;
Duplicate Code,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextVisibleEnabledCell,The method contains a code clone-set at the following line numbers (starting from the method definition): ((19' 52)' (71' 104))
Duplicate Code,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,FindNextEditableCell,The method contains a code clone-set at the following line numbers (starting from the method definition): ((19' 42)' (61' 84))
Missing Default,XRefresh,Configuration,C:\repos\binaryage_xrefresh\src\winmonitor\Configuration.cs,OnCellPropertyChanged,The following switch statement is missing a default case: switch (e.CellPos.Column)  				{  					case 0: // project name  						if (folder.Name != e.Cell.Text)  						{  							folder.Name = MakeUniqueName(e.Cell.Text);  							e.Cell.Text = folder.Name;  						}  						folder.Enabled = e.Cell.Checked;  						StrikeRow(table.TableModel.Rows[e.Row]' !folder.Enabled);  						break;  					case 1: // project path  						folder.Path = e.Cell.Text;  						e.Cell.Checked = Directory.Exists(folder.Path);  						break;  					case 2: // project type  						folder.Type = e.Cell.Text;  						table.TableModel.Rows[e.Row].Cells[0].Data = (int)e.Cell.Data; // set new project icon  						table.InvalidateCell(e.Row' 0);  						break;  				}
Missing Default,XRefresh,Context,C:\repos\binaryage_xrefresh\src\winmonitor\Context.cs,GetClientTypeIcon,The following switch statement is missing a default case: switch (type)  			{  				case "Firefox": return Properties.Resources.Firefox;  				case "Internet Explorer": return Properties.Resources.InternetExplorer;  				case "Safari": return Properties.Resources.Safari;  				case "Opera": return Properties.Resources.Opera;  			}
Missing Default,XRefresh,Context,C:\repos\binaryage_xrefresh\src\winmonitor\Context.cs,GetClientTypeIndex,The following switch statement is missing a default case: switch (type)  			{  				case "Firefox": return 6;  				case "Internet Explorer": return 5;  				case "Safari": return 7;  				case "Opera": return 8;  			}
Missing Default,XRefresh,ServerMessageRefresh,C:\repos\binaryage_xrefresh\src\winmonitor\Server.cs,Log,The following switch statement is missing a default case: switch (file.action) 					{ 						case "created": icon = Properties.Resources.Created; break; 						case "deleted": icon = Properties.Resources.Deleted; break; 						case "changed": icon = Properties.Resources.Changed; break; 						case "renamed": 							icon = Properties.Resources.Renamed; 							text += " -> " + file.path2; 							break; 					}
Missing Default,XRefresh,ClientInfo,C:\repos\binaryage_xrefresh\src\winmonitor\Server.cs,ProcessMessage,The following switch statement is missing a default case: switch (message.command) 				{ 					case "Hello": 						type = message.type; 						if (type == null) type = "?"; 						agent = message.agent; 						if (agent == null) agent = "?"; 						log = String.Format("{0}: connected"' GetClientFriendlyName()); 						ActivityLog.Current.AddEventLog(Context.GetClientTypeIcon(type)' log' Utils.LogLine(Properties.Resources.Information' agent)); 						// reply with AboutMe message 						AssemblyName name = Assembly.GetExecutingAssembly().GetName(); 						ServerMessageAbout msg = new ServerMessageAbout(Utils.GetVersionString()' name.Name); 						SendMessage(msg); 						break; 					case "Bye": 						parent.RemoveClient(id); // unregister from parent 						log = String.Format("{0}: disconnected"' GetClientFriendlyName()); 						ActivityLog.Current.AddEventLog(Context.GetClientTypeIcon(type)' log); 						return false; 					case "SetPage": 						page = message.page; 						if (page == null) page = ""; 						url = message.url; 						if (url == null) url = ""; 						if (page.Length > 0) 						{ 							log = String.Format("{0}: changed page to '{1}'"' GetClientFriendlyName()' page); 							ActivityLog.Current.AddEventLog(Context.GetClientTypeIcon(type)' log' Utils.LogLine(Properties.Resources.Information' url)); 						} 						break; 				}
Missing Default,XRefresh,FileMask,C:\repos\binaryage_xrefresh\src\winmonitor\Utils.cs,GetTypeInfo,The following switch statement is missing a default case: switch (type)  			{  				case Type.All: return "any file";  				case Type.Mask: return "filename mask";  				case Type.Regexp: return "regular expression";  				case Type.None: return "no files";  				case Type.Substring: return "filename substring";  				case Type.Wildcard: return "wildcard expression";  			}
Missing Default,FlexFieldControlLib,FieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FieldControl.cs,TakeFocus,The following switch statement is missing a default case: switch ( action )           {              case Action.Trim:                   if ( TextLength > 0 )                 {                    int newLength = TextLength - 1;                    Text = Text.Substring( 0' newLength );                 }                   SelectionStart = TextLength;                   return;                case Action.Home:                   SelectionStart = 0;                 SelectionLength = 0;                   return;                case Action.End:                   SelectionStart = TextLength;                   return;           }
Missing Default,FlexFieldControlLib,FieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FieldControl.cs,OnKeyDown,The following switch statement is missing a default case: switch ( e.KeyCode )           {              case Keys.Home:                 SendCedeFocusEvent( Action.Home );                 return;                case Keys.End:                 SendCedeFocusEvent( Action.End );                 return;           }
Missing Default,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,OnPaint,The following switch statement is missing a default case: switch ( BorderStyle )           {              case BorderStyle.Fixed3D:                   if ( Application.RenderWithVisualStyles )                 {                    ControlPaint.DrawVisualStyleBorder( e.Graphics' rectBorder );                 }                 else                 {                    ControlPaint.DrawBorder3D( e.Graphics' ClientRectangle' Border3DStyle.Sunken );                 }                 break;                case BorderStyle.FixedSingle:                   ControlPaint.DrawBorder( e.Graphics' ClientRectangle'                    SystemColors.WindowFrame' ButtonBorderStyle.Solid );                 break;           }
Missing Default,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,CalculateMinimumSize,The following switch statement is missing a default case: switch ( BorderStyle )           {              case BorderStyle.Fixed3D:                 minimumSize.Width += ( 2 * Fixed3DOffset.Width );                 minimumSize.Height = GetSuggestedHeight();                 break;                case BorderStyle.FixedSingle:                 minimumSize.Width += ( 2 * FixedSingleOffset.Width );                 minimumSize.Height = GetSuggestedHeight();                 break;           }
Missing Default,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,LayoutControls,The following switch statement is missing a default case: switch ( BorderStyle )           {              case BorderStyle.Fixed3D:                 x = Fixed3DOffset.Width;                 y = Fixed3DOffset.Height;                 break;                case BorderStyle.FixedSingle:                 x = FixedSingleOffset.Width;                 y = FixedSingleOffset.Height;                 break;           }
Missing Default,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,OnFieldFocus,The following switch statement is missing a default case: switch ( e.FocusEventType )           {              case FocusEventType.GotFocus:                   if ( !_focused )                 {                    _focused = true;                    base.OnGotFocus( EventArgs.Empty );                 }                   break;                case FocusEventType.LostFocus:                   if ( !Focused )                 {                    _focused = false;                    base.OnLostFocus( EventArgs.Empty );                 }                   break;           }
Missing Default,FlexFieldControlLib,FlexFieldControl,C:\repos\binaryage_xrefresh\src\winmonitor\FlexControl\FlexFieldControl.cs,OnFocusCeded,The following switch statement is missing a default case: switch ( e.Action )           {              case Action.Home:                   _fieldControls[0].TakeFocus( e.Direction' e.Selection' e.Action );                 return;                case Action.End:                   _fieldControls[FieldCount - 1].TakeFocus( e.Direction' e.Selection' e.Action );                 return;                case Action.Trim:                   if ( e.FieldIndex == 0 )                 {                    return;                 }                   _fieldControls[e.FieldIndex - 1].TakeFocus( e.Direction' e.Selection' e.Action );                 return;           }
Missing Default,CustomUIControls,ImageListPanel,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\ImageListPanel.cs,OnKeyDown,The following switch statement is missing a default case: switch(kea.KeyCode)  				{  					case Keys.Down:  						if (_nCoordY<_nRows-1)  						{  							_nCoordY++;  							Invalidate();  						}  						break;  					case Keys.Up:  						if (_nCoordY>0)  						{  							_nCoordY--;  							Invalidate();  						}  						break;  					case Keys.Right:  						if (_nCoordX<_nColumns-1)  						{  							_nCoordX++;  							Invalidate();  						}  						break;  					case Keys.Left:  						if (_nCoordX>0)  						{  							_nCoordX--;  							Invalidate();  						}  						break;  					case Keys.Enter:  					case Keys.Space:  						// We fire the event only when the mouse is released  						int nImageId = _nCoordY*_nColumns + _nCoordX;  						if (ItemClick != null && nImageId>=0 && nImageId<_imageList.Images.Count)  						{  							ItemClick(this' new ImageListPanelEventArgs(nImageId));  							_nCoordX = -1;  							_nCoordY = -1;  							Hide();  						}  						break;  					case Keys.Escape:  						_nCoordX = -1;  						_nCoordY = -1;  						Hide();  						break;  				}
Missing Default,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following switch statement is missing a default case: switch (mode)  			{  				case MozPaneStyle.Vertical:  				{  					if (m_mozPane!=null)  					{  						if (!m_mozPane.IsVerticalScrollBarVisible())   							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal);  						else  							this.Width = m_mozPane.Width -(2*m_mozPane.Padding.Horizontal)-3 - (SystemInformation.VerticalScrollBarWidth-2);  					}  					else  						this.Width = 40;    					switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  				case MozPaneStyle.Horizontal:  				{  					if (m_mozPane!=null)  						if (!m_mozPane.IsHorizontalScrollBarVisible())  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical);  						else  							this.Height = m_mozPane.Height -(2*m_mozPane.Padding.Vertical)-3 - (SystemInformation.HorizontalScrollBarHeight-2);    					else  						this.Height = 40;  					  					switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}  					break;  				}  			}
Missing Default,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following switch statement is missing a default case: switch (m_itemStyle)  					{  											  						case MozItemStyle.Divider:  						{  							this.Height = 2*4;  							break;  						}  				  						case MozItemStyle.Picture:  						{  							this.Height = imageHeight + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							this.Height = base.Font.Height + (2*4);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}  							break;  						}  					}
Missing Default,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following switch statement is missing a default case: switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									this.Height = imageHeight + (3*4) + base.Font.Height;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Height = imageHeight + (2*4);  									break;  								}  						  							}
Missing Default,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following switch statement is missing a default case: switch (m_itemStyle)  					{  						case MozItemStyle.Divider:  						{  							this.Width = 2*4;  							break;  						}  						case MozItemStyle.Picture:  						{  							this.Width = imageWidth + (2*4);  							break;  						}  						case MozItemStyle.Text:  						{  							    							this.Width = (2*4)+ (int)MeasureString(this.Text);  							break;  						}  						case MozItemStyle.TextAndPicture:  						{  							switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}  							break;  						}  					}
Missing Default,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,DoLayout,The following switch statement is missing a default case: switch (m_textAlign)  							{  								case MozTextAlign.Bottom:  								case MozTextAlign.Top:  								{  									int minWidth = 2 * 4 + imageWidth;  									int stringWidth = (2*4)+ (int)MeasureString(this.Text);   									if (stringWidth > minWidth)  										this.Width = stringWidth;  									else  										this.Width = minWidth;  									break;  								}  								case MozTextAlign.Right:  								case MozTextAlign.Left:  								{  									this.Width  = (3*4)+ (int)MeasureString(this.Text) + imageWidth;  									break;  								}  						  							}
Missing Default,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following switch statement is missing a default case: switch (m_state)  			{  				case MozItemState.Focus:  				{  					  					textBrush = new SolidBrush(this.FocusText);  					bgBrush = new SolidBrush(this.FocusColor);  					borderColor = this.FocusBorderColor;   					btnBorderStyle = this.FocusBorderStyle; 		  					if (m_imageCollection.FocusImage!= null)  						image = m_imageCollection.FocusImage;  					else  						// if focusimage isnt set use Normal image  						image = m_imageCollection.NormalImage;  					break;  				}  				case MozItemState.Selected:  				{  					textBrush = new SolidBrush(this.SelectedText);  					bgBrush = new SolidBrush(this.SelectedColor);  					borderColor = this.SelectedBorderColor;   					btnBorderStyle = this.SelectedBorderStyle;  					if (m_imageCollection.SelectedImage!= null)  						image = m_imageCollection.SelectedImage;  					else  						image = m_imageCollection.NormalImage;  					break;  				}  				case MozItemState.Normal:  				{  					image = m_imageCollection.NormalImage;  					bgBrush = new SolidBrush(this.BackgroundColor);  					btnBorderStyle = this.NormalBorderStyle;  					borderColor = this.BorderColor;   					break;  				}  			}
Missing Default,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following switch statement is missing a default case: switch (m_itemStyle)  			{  				case MozItemStyle.Divider:  				{  					float ptY;  					float ptX;    					if (m_mozPane!=null)  					{  						// Check MozPane orientation  						if (m_mozPane.Style == MozPaneStyle.Vertical)   						{  							ptY = borderRect.Top + (borderRect.Height / 2);  							e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  						}  						else  						{  							ptX = borderRect.Left + (borderRect.Width / 2);  							e.Graphics.DrawLine(dividerPen'ptX'borderRect.Top'ptX'borderRect.Bottom);  						}  					}  					else  					{  						ptY = borderRect.Top + (borderRect.Height / 2);  						e.Graphics.DrawLine(dividerPen'borderRect.Left'ptY'borderRect.Right'ptY);  					}  					  					break;  				}  				case MozItemStyle.Text:  				{	  					f.Alignment = StringAlignment.Center;  					f.LineAlignment = StringAlignment.Center;  					textRect = borderRect;  					if (m_state == MozItemState.Selected)  					{  						textRect.X+=1;  						textRect.Y+=1;  					}  					if (this.Enabled)  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);     					else  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					break;  				}  				case MozItemStyle.Picture:  				{  					if (image!=null)  					{							  						// center image  						imageRect.X = ((borderRect.Width/2) - (imageRect.Width/2));  						imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  						}  					  						if (this.Enabled)   							if (image!=null)  								e.Graphics.DrawImage(image'imageRect);  							else  								if (image!=null)  								ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackgroundColor);     					}  					break;  				}  				case MozItemStyle.TextAndPicture:  				{  					f.LineAlignment = StringAlignment.Center;  										  					switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}  					  					// Check if enabled  					if (this.Enabled)  					{  						if (m_state == MozItemState.Selected)  						{  							imageRect.X+=1;  							imageRect.Y+=1;  							textRect.X+=1;  							textRect.Y+=1;  						}  						// draw image and text  						if (image!=null)  							e.Graphics.DrawImage(image'imageRect);  						e.Graphics.DrawString(this.Text'this.Font'textBrush'textRect'f);  					}  					else  					{  						// Draw disabled image and text  						if (image!=null)  							ControlPaint.DrawImageDisabled(e.Graphics'image'imageRect.X'imageRect.Y'this.BackColor);  						e.Graphics.DrawString(this.Text'this.Font'disabledTextBrush'textRect'f);  					}  								  					break;  				}  			}
Missing Default,Pabo.MozBar,MozItem,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozItem.cs,OnPaint,The following switch statement is missing a default case: switch (m_textAlign)  					{  						case MozTextAlign.Bottom:  						{  							  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Bottom - textRect.Height;  							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;    							imageRect.Y = borderRect.Top +2;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Top:  						{  							f.Alignment = StringAlignment.Center;  							textRect.Height = this.Font.Height + (2*4);  							textRect.Y = borderRect.Top;   							textRect.X = borderRect.X;  							textRect.Width = borderRect.Width;  							  							imageRect.Y =  borderRect.Bottom - 2 - imageRect.Height;  							imageRect.X = ((borderRect.Width/2) - imageRect.Width/2);  							break;  						}  						case MozTextAlign.Right:  						{  							  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4 + imageRect.Width+ 4;  							textRect.Width = borderRect.Width - 4 - imageRect.Width;    							imageRect.X = 4;  							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  						case MozTextAlign.Left:  						{  							f.Alignment = StringAlignment.Near;  							textRect.Height = borderRect.Height - 2 * 4;  							textRect.Y = borderRect.Top +4;  							textRect.X = borderRect.X + 4;   							textRect.Width = borderRect.Width - 4 - imageRect.Width;  							  							imageRect.X = borderRect.Right - 4 - imageRect.Width;   							imageRect.Y = ((borderRect.Height/2) - (imageRect.Height/2));  							break;  						}  					}
Missing Default,Pabo.MozBar,MozPane,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.KeyCode)  			{  				   				case Keys.Enter:  // Enter  				case Keys.Space:   				{  					if (m_tabIndex!=-1)  						SelectItem(m_tabIndex);     					break;  				}  				case Keys.Down:  				case Keys.Right:  				case Keys.Tab:   				{  					// Move tabindex one step forward.  					m_tabIndex++;  					if ((m_tabIndex < Items.Count) && (m_tabIndex >0))  					{  						RemoveFocus();  						if (Items[m_tabIndex].state!=MozItemState.Selected)  							Items[m_tabIndex].state = MozItemState.Focus;  						ScrollControlIntoView(Items[m_tabIndex]);  					}  					else this.SelectNextControl(this'true'true'true'true);   						  					break;  				}  				case Keys.Up:  				case Keys.Left:  				{  					// Move tabindex one step backward  					m_tabIndex--;  					if ((m_tabIndex >= 0) && (m_tabIndex <Items.Count))  					{  						RemoveFocus();  						if (Items[m_tabIndex].state!=MozItemState.Selected)  							Items[m_tabIndex].state = MozItemState.Focus;  						ScrollControlIntoView(Items[m_tabIndex]);  					}  					else this.SelectNextControl(this'false'true'true'true);  					  					break;  				}    			}
Missing Default,Pabo.MozBar,MozPane,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)  			{  				case WM_THEMECHANGED:  				{  					// Theme has changed ' get new colors if Theme = true  					if (Theme)  						GetThemeColors();  					break;  				}  				case WM_NCCALCSIZE:  				{  					  					if (this.Style == MozPaneStyle.Vertical)  					{  						// hide horizontal scrollbar  						ShowScrollBar(m.HWnd' SB_HORZ' 0);  					}  					else  					{  						// hide vertical scrollbar  						ShowScrollBar(m.HWnd' SB_VERT' 0);  					}  					  					break;  				}  			}
Missing Default,Pabo.MozBar,MozPane,C:\repos\binaryage_xrefresh\src\winmonitor\MozBar\MozPane.cs,DoLayout,The following switch statement is missing a default case: switch (m_style)  			{  				case MozPaneStyle.Vertical:  // Vertical  				{  					// work out how wide to make the controls' and where  					// the top of the first control should be  					int y = this.DisplayRectangle.Y + m_padding.Vertical;  					int width = this.ClientRectangle.Width - (2*m_padding.Horizontal);  					// for each control in our list...  					for (int i=0; i<this.Items.Count; i++)  					{  						e = this.Items[i];  						// go to the next mozitem if this one is invisible and   						// it's parent is visible  						if (!e.Visible && e.Parent != null && e.Parent.Visible)  						{  							continue;  						}  						p = new Point(m_padding.Horizontal' y);  						// set the width and location of the control  						e.Location = p;  						e.Width = this.Width;  						// update the next starting point  						y += e.Height + m_padding.Vertical;  					}  					break;  				}  				case MozPaneStyle.Horizontal:  // Horizontal  				{  					int x = this.DisplayRectangle.X + m_padding.Horizontal;  					int height = this.ClientRectangle.Height - (2*m_padding.Vertical);  					for (int i=0; i<this.Items.Count; i++)  					{  						e = this.Items[i];  						if (!e.Visible && e.Parent != null && e.Parent.Visible)  						{  							continue;  						}  						p = new Point(x'm_padding.Vertical);  						e.Location = p;  						e.Height = height;  						x += e.Width + m_padding.Horizontal;  					}  					break;  				}  			}
Missing Default,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,IsInputKey,The following switch statement is missing a default case: switch (keyData)  					{  						case Keys.Left:  						case Keys.Up:  						case Keys.Right:  						case Keys.Down:  						case Keys.Return:  						{  							return true;  						}    						case Keys.F2:  						{  							return false;  						}  					}
Missing Default,XPTable.Editors,ColorPalette,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.KeyCode)  						{  							case Keys.Space:  							{  								this.SelectedColor = this.GetColorFromCell(this.focus.X' this.focus.Y);  								this.InvalidateFocus();  							  								return;  							}    							case Keys.Prior:  							case Keys.Next:  							case Keys.End:  							case Keys.Home:  							{  								return;  							}  						  							case Keys.Left:  							{  								this.SetFocus(new Point(this.focus.X - 1' this.focus.Y));  							  								return;  							}  						  							case Keys.Up:  							{  								this.SetFocus(new Point(this.focus.X' this.focus.Y - 1));  							  								return;  							}  						  							case Keys.Right:  							{  								this.SetFocus(new Point(this.focus.X + 1' this.focus.Y));  							  								return;  							}  						  							case Keys.Down:  							{  								this.SetFocus(new Point(this.focus.X' this.focus.Y + 1));  							  								return;  							}  						}
Missing Default,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ClearMarker,The following switch statement is missing a default case: switch (m_eDrawStyle)  						{  								//		  S=0'S=1'S=2'S=3.....S=100  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		   Hue  								//	...  								//	L=0  							case eDrawStyle.Hue :	    								hsl_start.H = m_hsl.H;	hsl_end.H = m_hsl.H;	//	Hue is constant  								hsl_start.S = (double)start_x/(this.Width - 4);	//	Because we're drawing horizontal lines' s will not change  								hsl_end.S = (double)end_x/(this.Width - 4);		//	from line to line    								for ( int i = start_y; i <= end_y; i++ )		//	For each horizontal line:  								{  									hsl_start.L = 1.0 - (double)i/(this.Height - 4);	//	Brightness (L) WILL change for each horizontal  									hsl_end.L = hsl_start.L;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}  					  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	L=100  								//	L=99  								//	L=98		Drawstyle  								//	L=97		Saturation  								//	...  								//	L=0  							case eDrawStyle.Saturation :    								hsl_start.S = m_hsl.S;	hsl_end.S = m_hsl.S;			//	Saturation is constant  								hsl_start.L = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' L will   								hsl_end.L = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}  								break;  								//		  H=0'H=1'H=2'H=3.....H=360  								//	S=100  								//	S=99  								//	S=98		Drawstyle  								//	S=97		Brightness  								//	...  								//	S=0  							case eDrawStyle.Brightness :  					  								hsl_start.L = m_hsl.L;	hsl_end.L = m_hsl.L;			//	Luminance is constant  								hsl_start.S = 1.0 - (double)start_y/(this.Height - 4);	//	Because we're drawing vertical lines' S will   								hsl_end.S = 1.0 - (double)end_y/(this.Height - 4);		//	not change from line to line    								for ( int i = start_x; i <= end_x; i++ )				//	For each vertical line:  								{  									hsl_start.H = (double)i/(this.Width - 4);			//	Hue (H) WILL change for each vertical  									hsl_end.H = hsl_start.H;							//	line drawn  				  									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);   									g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));   								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Red  								//	...  								//	G=0  							case eDrawStyle.Red :  					  								red = m_rgb.R;													//	Red is constant  								int start_b = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));    								}    								break;  								//		  B=0'B=1'B=2'B=3.....B=100  								//	R=100  								//	R=99  								//	R=98		Drawstyle  								//	R=97		  Green  								//	...  								//	R=0  							case eDrawStyle.Green :  					  								green = m_rgb.G;;												//	Green is constant  								int start_b2 = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' B  								int end_b2 = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									red = Round(255 - (255 * (double)i/(this.Height - 4)));		//	red WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  								//		  R=0'R=1'R=2'R=3.....R=100  								//	G=100  								//	G=99  								//	G=98		Drawstyle  								//	G=97		   Blue  								//	...  								//	G=0  							case eDrawStyle.Blue :  					  								blue = m_rgb.B;;												//	Blue is constant  								int start_r = Round(255 * (double)start_x/(this.Width - 4));	//	Because we're drawing horizontal lines' R  								int end_r = Round(255 * (double)end_x/(this.Width - 4));		//	will not change from line to line    								for ( int i = start_y; i <= end_y; i++ )						//	For each horizontal line:  								{  									green = Round(255 - (255 * (double)i/(this.Height - 4)));	//	green WILL change for each horizontal line drawn    									LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);   									g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));   								}    								break;  						}
Missing Default,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawContent,The following switch statement is missing a default case: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								Draw_Style_Hue();  								break;  							case eDrawStyle.Saturation :  								Draw_Style_Saturation();  								break;  							case eDrawStyle.Brightness :  								Draw_Style_Luminance();  								break;  							case eDrawStyle.Red :  								Draw_Style_Red();  								break;  							case eDrawStyle.Green :  								Draw_Style_Green();  								break;  							case eDrawStyle.Blue :  								Draw_Style_Blue();  								break;  						}
Missing Default,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Redraw_Control,The following switch statement is missing a default case: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								Draw_Style_Hue();  								break;  							case eDrawStyle.Saturation :  								Draw_Style_Saturation();  								break;  							case eDrawStyle.Brightness :  								Draw_Style_Luminance();  								break;  							case eDrawStyle.Red :  								Draw_Style_Red();  								break;  							case eDrawStyle.Green :  								Draw_Style_Green();  								break;  							case eDrawStyle.Blue :  								Draw_Style_Blue();  								break;  						}
Missing Default,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Marker,The following switch statement is missing a default case: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.S);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Saturation :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.L));  								break;  							case eDrawStyle.Brightness :  								m_iMarker_X = Round((this.Width - 4) * m_hsl.H);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - m_hsl.S));  								break;  							case eDrawStyle.Red :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  							case eDrawStyle.Green :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.B/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.R/255));  								break;  							case eDrawStyle.Blue :  								m_iMarker_X = Round((this.Width - 4) * (double)m_rgb.R/255);  								m_iMarker_Y = Round((this.Height - 4) * (1.0 - (double)m_rgb.G/255));  								break;  						}
Missing Default,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following switch statement is missing a default case: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.S = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.L = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.H = (double)m_iMarker_X/(this.Width - 4);  								m_hsl.S = 1.0 - (double)m_iMarker_Y/(this.Height - 4);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(m_rgb.R' green' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								blue = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								red = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' m_rgb.G' blue);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								red = Round(255 * (double)m_iMarker_X/(this.Width - 4));  								green = Round(255 * (1.0 - (double)m_iMarker_Y/(this.Height - 4)));  								m_rgb = Color.FromArgb(red' green' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Missing Default,XPTable.Editors,ctrl2DColorBox,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,GetColor,The following switch statement is missing a default case: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								_hsl.H = m_hsl.H;  								_hsl.S = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Saturation :  								_hsl.S = m_hsl.S;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.L = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Brightness :  								_hsl.L = m_hsl.L;  								_hsl.H = (double)x/(this.Width - 4);  								_hsl.S = 1.0 - (double)y/(this.Height - 4);  								break;  							case eDrawStyle.Red :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(this.Height - 4)))' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Green :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.G' Round(255 * (double)x/(this.Width - 4))));  								break;  							case eDrawStyle.Blue :  								_hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(this.Width - 4))' Round(255 * (1.0 - (double)y/(this.Height - 4)))' m_rgb.B));  								break;  						}
Missing Default,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,DrawContent,The following switch statement is missing a default case: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								Draw_Style_Hue();  								break;  							case eDrawStyle.Saturation :  								Draw_Style_Saturation();  								break;  							case eDrawStyle.Brightness :  								Draw_Style_Luminance();  								break;  							case eDrawStyle.Red :  								Draw_Style_Red();  								break;  							case eDrawStyle.Green :  								Draw_Style_Green();  								break;  							case eDrawStyle.Blue :  								Draw_Style_Blue();  								break;  						}
Missing Default,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Redraw_Control,The following switch statement is missing a default case: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								Draw_Style_Hue();  								break;  							case eDrawStyle.Saturation :  								Draw_Style_Saturation();  								break;  							case eDrawStyle.Brightness :  								Draw_Style_Luminance();  								break;  							case eDrawStyle.Red :  								Draw_Style_Red();  								break;  							case eDrawStyle.Green :  								Draw_Style_Green();  								break;  							case eDrawStyle.Blue :  								Draw_Style_Blue();  								break;  						}
Missing Default,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,Reset_Slider,The following switch statement is missing a default case: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.H );  								break;  							case eDrawStyle.Saturation :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.S );  								break;  							case eDrawStyle.Brightness :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * m_hsl.L );  								break;  							case eDrawStyle.Red :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.R/255 );  								break;  							case eDrawStyle.Green :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.G/255 );  								break;  							case eDrawStyle.Blue :  								m_iMarker_Start_Y = (this.Height - 8) - Round( (this.Height - 8) * (double)m_rgb.B/255 );  								break;  						}
Missing Default,XPTable.Editors,ctrlVerticalColorSlider,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\ColorCellEditor.cs,ResetHSLRGB,The following switch statement is missing a default case: switch (m_eDrawStyle)  						{  							case eDrawStyle.Hue :  								m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Saturation :  								m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Brightness :  								m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(this.Height - 9);  								m_rgb = AdobeColors.HSL_to_RGB(m_hsl);  								break;  							case eDrawStyle.Red :  								m_rgb = Color.FromArgb(255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.G' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Green :  								m_rgb = Color.FromArgb(m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) )' m_rgb.B);  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  							case eDrawStyle.Blue :  								m_rgb = Color.FromArgb(m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(this.Height - 9) ));  								m_hsl = AdobeColors.RGB_to_HSL(m_rgb);  								break;  						}
Missing Default,XPTable.Editors,DateTimeCellEditor,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Editors\DateTimeCellEditor.cs,SetEditValue,The following switch statement is missing a default case: switch (dtCol.DateTimeFormat)  					{  						case DateTimePickerFormat.Short:	  							format = DateTimeColumn.ShortDateFormat;  							break;    						case DateTimePickerFormat.Time:	  							format = DateTimeColumn.TimeFormat;  							break;    						case DateTimePickerFormat.Custom:	  							format = dtCol.CustomDateTimeFormat;  							break;  					}
Missing Default,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,IsInputKey,The following switch statement is missing a default case: switch (key)  				{  					case Keys.Up:  					case Keys.Down:  					case Keys.Left:  					case Keys.Right:  					case Keys.Prior:  					case Keys.Next:  					case Keys.End:  					case Keys.Home:  					{  						return true;  					}  				}
Missing Default,XPTable.Models,Table,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Models\Table.cs,OnColumnPropertyChanged,The following switch statement is missing a default case: switch (e.EventType)  				{  					case ColumnEventType.VisibleChanged:  					case ColumnEventType.WidthChanged:  					{  						if (e.EventType == ColumnEventType.VisibleChanged)  						{  							if (e.Column.Visible && e.Index != this.lastSortedColumn)  							{  								e.Column.InternalSortOrder = SortOrder.None;  							}    							if (e.Index == this.FocusedCell.Column && !e.Column.Visible)  							{  								int index = this.ColumnModel.NextVisibleColumn(e.Index);    								if (index == -1)  								{  									index = this.ColumnModel.PreviousVisibleColumn(e.Index);  								}    								if (index != -1)  								{  									this.FocusedCell = new CellPos(this.FocusedCell.Row' index);  								}  								else  								{  									this.FocusedCell = CellPos.Empty;  								}  							}  						}    						if (columnHeaderRect.X <= 0)  						{  							this.Invalidate(this.PseudoClientRect);  						}  						else if (columnHeaderRect.Left <= this.PseudoClientRect.Right)  						{  							this.Invalidate(new Rectangle(columnHeaderRect.X'   								this.PseudoClientRect.Top'   								this.PseudoClientRect.Right-columnHeaderRect.X'   								this.PseudoClientRect.Height));  						}    						this.UpdateScrollBars();  					  						break;  					}    					case ColumnEventType.TextChanged:  					case ColumnEventType.StateChanged:  					case ColumnEventType.ImageChanged:  					case ColumnEventType.HeaderAlignmentChanged:  					{  						if (columnHeaderRect.IntersectsWith(this.HeaderRectangle))  						{  							this.Invalidate(columnHeaderRect);  						}  					  						break;  					}    					case ColumnEventType.AlignmentChanged:  					case ColumnEventType.RendererChanged:  					case ColumnEventType.EnabledChanged:  					{  						if (e.EventType == ColumnEventType.EnabledChanged)  						{  							if (e.Index == this.FocusedCell.Column)  							{  								this.FocusedCell = CellPos.Empty;  							}  						}  						  						if (columnHeaderRect.IntersectsWith(this.HeaderRectangle))  						{  							this.Invalidate(new Rectangle(columnHeaderRect.X'   								this.PseudoClientRect.Top'   								columnHeaderRect.Width'   								this.PseudoClientRect.Height));  						}  					  						break;  					}  				}
Missing Default,XPTable.Renderers,ButtonCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ButtonCellRenderer.cs,CalcImageRect,The following switch statement is missing a default case: switch (imageAlignment)  			{  				case ContentAlignment.TopCenter:  				case ContentAlignment.MiddleCenter:  				case ContentAlignment.BottomCenter:  				{  					imageRect.X += (this.ClientRectangle.Width - image.Width) / 2;    					break;  				}    				case ContentAlignment.TopRight:  				case ContentAlignment.MiddleRight:  				case ContentAlignment.BottomRight:  				{  					imageRect.X = this.ClientRectangle.Right - image.Width;    					break;  				}  			}
Missing Default,XPTable.Renderers,ButtonCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\ButtonCellRenderer.cs,CalcImageRect,The following switch statement is missing a default case: switch (imageAlignment)  			{  				case ContentAlignment.TopLeft:  				case ContentAlignment.TopCenter:  				case ContentAlignment.TopRight:  				{  					imageRect.Y += 2;    					break;  				}  				  				case ContentAlignment.MiddleLeft:  				case ContentAlignment.MiddleCenter:  				case ContentAlignment.MiddleRight:  				{  					imageRect.Y += (this.ClientRectangle.Height - image.Height) / 2;    					break;  				}    				case ContentAlignment.BottomLeft:  				case ContentAlignment.BottomCenter:  				case ContentAlignment.BottomRight:  				{  					imageRect.Y = this.ClientRectangle.Bottom - image.Height - 2;    					break;  				}  			}
Missing Default,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,CalcCheckRect,The following switch statement is missing a default case: switch (rowAlignment)  			{  				case RowAlignment.Center:  				{  					checkRect.Y += (this.ClientRectangle.Height - checkRect.Height) / 2;    					break;  				}    				case RowAlignment.Bottom:  				{  					checkRect.Y = this.ClientRectangle.Bottom - checkRect.Height;    					break;  				}  			}
Missing Default,XPTable.Renderers,CheckBoxCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\CheckBoxCellRenderer.cs,OnPaint,The following switch statement is missing a default case: switch (state)  				{  					case CheckBoxStates.MixedNormal:  						state = CheckBoxStates.CheckedNormal;  						break;    					case CheckBoxStates.MixedHot:  						state = CheckBoxStates.CheckedHot;  						break;    					case CheckBoxStates.MixedPressed:  						state = CheckBoxStates.CheckedPressed;  						break;    					case CheckBoxStates.MixedDisabled:  						state = CheckBoxStates.CheckedDisabled;  						break;  				}
Missing Default,XPTable.Renderers,DateTimeCellRenderer,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Renderers\DateTimeCellRenderer.cs,DrawText,The following switch statement is missing a default case: switch (this.DateTimeFormat)  				{  					case DateTimePickerFormat.Long:	  						format = DateTimeColumn.LongDateFormat;  						break;    					case DateTimePickerFormat.Short:	  						format = DateTimeColumn.ShortDateFormat;  						break;    					case DateTimePickerFormat.Time:	  						format = DateTimeColumn.TimeFormat;  						break;  				}
Missing Default,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,ConvertPushButtonStateToButtonState,The following switch statement is missing a default case: switch (state)  			{  				case PushButtonStates.Pressed:  				{  					return ButtonState.Pushed;  				}    				case PushButtonStates.Disabled:  				{  					return ButtonState.Inactive;  				}  			}
Missing Default,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,ConvertCheckBoxStateToButtonState,The following switch statement is missing a default case: switch (state)  			{  				case CheckBoxStates.UncheckedPressed:  				{  					return ButtonState.Pushed;  				}    				case CheckBoxStates.UncheckedDisabled:  				{  					return ButtonState.Inactive;  				}    				case CheckBoxStates.CheckedNormal:  				case CheckBoxStates.CheckedHot:  				{  					return ButtonState.Checked;  				}    				case CheckBoxStates.CheckedPressed:  				{  					return (ButtonState.Checked | ButtonState.Pushed);  				}    				case CheckBoxStates.CheckedDisabled:  				{  					return (ButtonState.Checked | ButtonState.Inactive);  				}    				case CheckBoxStates.MixedNormal:  				case CheckBoxStates.MixedHot:  				{  					return ButtonState.Checked;  				}    				case CheckBoxStates.MixedPressed:  				{  					return (ButtonState.Checked | ButtonState.Pushed);  				}    				case CheckBoxStates.MixedDisabled:  				{  					return (ButtonState.Checked | ButtonState.Inactive);  				}  			}
Missing Default,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,IsMixed,The following switch statement is missing a default case: switch (state)  			{  				case CheckBoxStates.MixedNormal:  				case CheckBoxStates.MixedHot:  				case CheckBoxStates.MixedPressed:  				case CheckBoxStates.MixedDisabled:  				{  					return true;  				}  			}
Missing Default,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,ConvertComboBoxStateToButtonState,The following switch statement is missing a default case: switch (state)  			{  				case ComboBoxStates.Pressed:  				{  					return ButtonState.Pushed;  				}    				case ComboBoxStates.Disabled:  				{  					return ButtonState.Inactive;  				}  			}
Missing Default,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,ConvertRadioButtonStateToButtonState,The following switch statement is missing a default case: switch (state)  			{  				case RadioButtonStates.UncheckedPressed:  				{  					return ButtonState.Pushed;  				}    				case RadioButtonStates.UncheckedDisabled:  				{  					return ButtonState.Inactive;  				}    				case RadioButtonStates.CheckedNormal:  				case RadioButtonStates.CheckedHot:  				{  					return ButtonState.Checked;  				}    				case RadioButtonStates.CheckedPressed:  				{  					return (ButtonState.Checked | ButtonState.Pushed);  				}    				case RadioButtonStates.CheckedDisabled:  				{  					return (ButtonState.Checked | ButtonState.Inactive);  				}  			}
Missing Default,XPTable.Themes,ThemeManager,C:\repos\binaryage_xrefresh\src\winmonitor\XPTable\Themes\ThemeManager.cs,ConvertUpDownStateToButtonState,The following switch statement is missing a default case: switch (state)  			{  				case UpDownStates.Pressed:  				{  					return ButtonState.Pushed;  				}    				case UpDownStates.Disabled:  				{  					return ButtonState.Inactive;  				}  			}
