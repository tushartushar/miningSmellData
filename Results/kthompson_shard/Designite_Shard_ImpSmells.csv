Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,GetCommandParameters,Cyclomatic complexity of the method is 9
Complex Method,Shard.Storage,PackedObjectReader,C:\repos\kthompson_shard\Shard\Storage\PackedObjectReader.cs,Create,Cyclomatic complexity of the method is 17
Complex Method,Shard.Storage,LooseObjectReader,C:\repos\kthompson_shard\Shard\Storage\LooseObjectReader.cs,ReadHeader,Cyclomatic complexity of the method is 10
Complex Method,Shard.Storage,ObjectStorage,C:\repos\kthompson_shard\Shard\Storage\ObjectStorage.cs,Read,Cyclomatic complexity of the method is 8
Long Parameter List,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,GetCommandParameters,The method has 5 parameters.
Long Parameter List,Shard.Storage,DeltaOffsetPackedObjectReader,C:\repos\kthompson_shard\Shard\Storage\DeltaOffsetPackedObjectReader.cs,DeltaOffsetPackedObjectReader,The method has 5 parameters.
Long Parameter List,Shard.Storage,DeltaPackedObjectReader,C:\repos\kthompson_shard\Shard\Storage\DeltaPackedObjectReader.cs,DeltaPackedObjectReader,The method has 5 parameters.
Long Parameter List,Shard.Storage,DeltaReferencePackedObjectReader,C:\repos\kthompson_shard\Shard\Storage\DeltaReferencePackedObjectReader.cs,DeltaReferencePackedObjectReader,The method has 5 parameters.
Long Parameter List,Shard.Storage,PackedObjectReader,C:\repos\kthompson_shard\Shard\Storage\PackedObjectReader.cs,PackedObjectReader,The method has 5 parameters.
Long Parameter List,Shard.Storage,WholePackedObjectReader,C:\repos\kthompson_shard\Shard\Storage\WholePackedObjectReader.cs,WholePackedObjectReader,The method has 5 parameters.
Long Statement,Shard.Storage,Ref,C:\repos\kthompson_shard\Shard\Storage\Ref.cs,FromLocation,The length of the statement  "	if (UpdateIfType (newRef' relPath' RefType.Tag) || UpdateIfType (newRef' relPath' RefType.Remote) || UpdateIfType (newRef' relPath' RefType.Head)) { " is 148.
Long Statement,Shard.Storage,ObjectStorage,C:\repos\kthompson_shard\Shard\Storage\ObjectStorage.cs,Read,The length of the statement  "		throw new NotSupportedException (string.Format ("Object Type ({0}) for object ({1}) not supported at this time."' reader.Type' id)); " is 132.
Complex Conditional,Shard.Storage,PackFile,C:\repos\kthompson_shard\Shard\Storage\PackFile.cs,EnsureLoaded,The conditional expression  "!(sig [0] == 'P' && sig [1] == 'A' && sig [2] == 'C' && sig [3] == 'K')"  is complex.
Magic Number,Shard,EmbeddedDocumentStore,C:\repos\kthompson_shard\Shard\EmbeddedDocumentStore.cs,GetKeyRange,The following statement contains a magic number: lock (_keyLock) {  	var keyedIndex = GetKeyIndex (cmds' id);  	var value = keyedIndex.GetNextValue ();  	SaveKeyIndex (cmds' keyedIndex' id);  	return new HiLoRange (value' 10);  }  
Magic Number,Shard,EmbeddedDocumentStore,C:\repos\kthompson_shard\Shard\EmbeddedDocumentStore.cs,GetKeyRange,The following statement contains a magic number: return new HiLoRange (value' 10);  
Magic Number,Shard.Storage,Helper,C:\repos\kthompson_shard\Shard\Storage\Helper.cs,IdToByteArray,The following statement contains a magic number: for (int i = 0; i < 40; i += 2) {  	array [i / 2] = byte.Parse (id.Substring (i' 2)' NumberStyles.HexNumber);  }  
Magic Number,Shard.Storage,Helper,C:\repos\kthompson_shard\Shard\Storage\Helper.cs,IdToByteArray,The following statement contains a magic number: for (int i = 0; i < 40; i += 2) {  	array [i / 2] = byte.Parse (id.Substring (i' 2)' NumberStyles.HexNumber);  }  
Magic Number,Shard.Storage,Helper,C:\repos\kthompson_shard\Shard\Storage\Helper.cs,IdToByteArray,The following statement contains a magic number: for (int i = 0; i < 40; i += 2) {  	array [i / 2] = byte.Parse (id.Substring (i' 2)' NumberStyles.HexNumber);  }  
Magic Number,Shard.Storage,Helper,C:\repos\kthompson_shard\Shard\Storage\Helper.cs,IdToByteArray,The following statement contains a magic number: for (int i = 0; i < 40; i += 2) {  	array [i / 2] = byte.Parse (id.Substring (i' 2)' NumberStyles.HexNumber);  }  
Magic Number,Shard.Storage,Helper,C:\repos\kthompson_shard\Shard\Storage\Helper.cs,IdToByteArray,The following statement contains a magic number: i += 2
Magic Number,Shard.Storage,Helper,C:\repos\kthompson_shard\Shard\Storage\Helper.cs,IdToByteArray,The following statement contains a magic number: array [i / 2] = byte.Parse (id.Substring (i' 2)' NumberStyles.HexNumber);  
Magic Number,Shard.Storage,Helper,C:\repos\kthompson_shard\Shard\Storage\Helper.cs,IdToByteArray,The following statement contains a magic number: array [i / 2] = byte.Parse (id.Substring (i' 2)' NumberStyles.HexNumber);  
Magic Number,Shard.Storage,Helper,C:\repos\kthompson_shard\Shard\Storage\Helper.cs,ByteArrayToId,The following statement contains a magic number: foreach (var b in sha) {  	sb.Append (Convert.ToString (b' 16).PadLeft (2' '0'));  }  
Magic Number,Shard.Storage,Helper,C:\repos\kthompson_shard\Shard\Storage\Helper.cs,ByteArrayToId,The following statement contains a magic number: foreach (var b in sha) {  	sb.Append (Convert.ToString (b' 16).PadLeft (2' '0'));  }  
Magic Number,Shard.Storage,Helper,C:\repos\kthompson_shard\Shard\Storage\Helper.cs,ByteArrayToId,The following statement contains a magic number: sb.Append (Convert.ToString (b' 16).PadLeft (2' '0'));  
Magic Number,Shard.Storage,Helper,C:\repos\kthompson_shard\Shard\Storage\Helper.cs,ByteArrayToId,The following statement contains a magic number: sb.Append (Convert.ToString (b' 16).PadLeft (2' '0'));  
Magic Number,Shard.Storage,Extensions,C:\repos\kthompson_shard\Shard\Storage\Extensions.cs,Read7BitEncodedInt,The following statement contains a magic number: result += c & 127;  
Magic Number,Shard.Storage,Extensions,C:\repos\kthompson_shard\Shard\Storage\Extensions.cs,Read7BitEncodedInt,The following statement contains a magic number: while ((c & 128) != 0) {  	result += 1;  	c = file.ReadByte () & 0xff;  	result <<= 7;  	result += (c & 127);  }  
Magic Number,Shard.Storage,Extensions,C:\repos\kthompson_shard\Shard\Storage\Extensions.cs,Read7BitEncodedInt,The following statement contains a magic number: while ((c & 128) != 0) {  	result += 1;  	c = file.ReadByte () & 0xff;  	result <<= 7;  	result += (c & 127);  }  
Magic Number,Shard.Storage,Extensions,C:\repos\kthompson_shard\Shard\Storage\Extensions.cs,Read7BitEncodedInt,The following statement contains a magic number: while ((c & 128) != 0) {  	result += 1;  	c = file.ReadByte () & 0xff;  	result <<= 7;  	result += (c & 127);  }  
Magic Number,Shard.Storage,Extensions,C:\repos\kthompson_shard\Shard\Storage\Extensions.cs,Read7BitEncodedInt,The following statement contains a magic number: result <<= 7;  
Magic Number,Shard.Storage,Extensions,C:\repos\kthompson_shard\Shard\Storage\Extensions.cs,Read7BitEncodedInt,The following statement contains a magic number: result += (c & 127);  
Magic Number,Shard.Storage,Extensions,C:\repos\kthompson_shard\Shard\Storage\Extensions.cs,ReadId,The following statement contains a magic number: while (count++ < 20) {  	var c = stream.ReadByte ();  	if (c == -1)  		throw new InvalidOperationException ("Not enough bytes to read Id");  	var hex = c.ToString ("x").PadLeft (2' '0');  	sb.Append (hex);  }  
Magic Number,Shard.Storage,Extensions,C:\repos\kthompson_shard\Shard\Storage\Extensions.cs,ReadId,The following statement contains a magic number: while (count++ < 20) {  	var c = stream.ReadByte ();  	if (c == -1)  		throw new InvalidOperationException ("Not enough bytes to read Id");  	var hex = c.ToString ("x").PadLeft (2' '0');  	sb.Append (hex);  }  
Magic Number,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,GetCommandParameters,The following statement contains a magic number: if ((cmd & 0x02) != 0)  	copyOffset |= (delta [offset++] & 0xff) << 8;  
Magic Number,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,GetCommandParameters,The following statement contains a magic number: copyOffset |= (delta [offset++] & 0xff) << 8;  
Magic Number,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,GetCommandParameters,The following statement contains a magic number: if ((cmd & 0x04) != 0)  	copyOffset |= (delta [offset++] & 0xff) << 16;  
Magic Number,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,GetCommandParameters,The following statement contains a magic number: copyOffset |= (delta [offset++] & 0xff) << 16;  
Magic Number,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,GetCommandParameters,The following statement contains a magic number: if ((cmd & 0x08) != 0)  	copyOffset |= (delta [offset++] & 0xff) << 24;  
Magic Number,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,GetCommandParameters,The following statement contains a magic number: copyOffset |= (delta [offset++] & 0xff) << 24;  
Magic Number,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,GetCommandParameters,The following statement contains a magic number: if ((cmd & 0x20) != 0)  	copySize |= (delta [offset++] & 0xff) << 8;  
Magic Number,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,GetCommandParameters,The following statement contains a magic number: copySize |= (delta [offset++] & 0xff) << 8;  
Magic Number,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,GetCommandParameters,The following statement contains a magic number: if ((cmd & 0x40) != 0)  	copySize |= (delta [offset++] & 0xff) << 16;  
Magic Number,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,GetCommandParameters,The following statement contains a magic number: copySize |= (delta [offset++] & 0xff) << 16;  
Magic Number,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,Get7BitEncodedInt,The following statement contains a magic number: do {  	c = delta [offset++] & 0xff;  	encodedInt |= (c & 0x7f) << shift;  	shift += 7;  }  while ((c & 0x80) != 0);  
Magic Number,Shard.Storage,BinaryDelta,C:\repos\kthompson_shard\Shard\Storage\BinaryDelta.cs,Get7BitEncodedInt,The following statement contains a magic number: shift += 7;  
Magic Number,Shard.Storage,PackedObjectReader,C:\repos\kthompson_shard\Shard\Storage\PackedObjectReader.cs,Create,The following statement contains a magic number: using (var file = File.OpenRead (packFile.Location)) {  	file.Seek (objectOffset' SeekOrigin.Begin);  	var b = file.ReadByte ();  	var typeCode = (b & 0x70) >> 4;  	var type = (ObjectType)typeCode;  	var size = b & 0xF;  	var bits = 4;  	while ((b & 0x80) == 0x80) {  		b = file.ReadByte ();  		size += (b & 0x7f) << bits;  		bits += 7;  	}  	switch (type) {  	case ObjectType.Blob:  	case ObjectType.Commit:  	case ObjectType.Tag:  	case ObjectType.Tree:  		return new WholePackedObjectReader (packFile' objectOffset' file.Position' size' type);  	case ObjectType.OffsetDelta:  		var baseOffset = objectOffset - file.Read7BitEncodedInt ();  		return new DeltaOffsetPackedObjectReader (packFile' objectOffset' file.Position' size' baseOffset);  	case ObjectType.ReferenceDelta:  		var baseId = file.ReadId ();  		return new DeltaReferencePackedObjectReader (packFile' objectOffset' file.Position' size' baseId);  	case ObjectType.Undefined:  		throw new InvalidDataException ("ObjectType was undefined.");  	case ObjectType.Reserved:  		throw new InvalidDataException ("ObjectType is reserved.");  	default:  		throw new InvalidDataException ("ObjectType is not valid.");  	}  }  
Magic Number,Shard.Storage,PackedObjectReader,C:\repos\kthompson_shard\Shard\Storage\PackedObjectReader.cs,Create,The following statement contains a magic number: using (var file = File.OpenRead (packFile.Location)) {  	file.Seek (objectOffset' SeekOrigin.Begin);  	var b = file.ReadByte ();  	var typeCode = (b & 0x70) >> 4;  	var type = (ObjectType)typeCode;  	var size = b & 0xF;  	var bits = 4;  	while ((b & 0x80) == 0x80) {  		b = file.ReadByte ();  		size += (b & 0x7f) << bits;  		bits += 7;  	}  	switch (type) {  	case ObjectType.Blob:  	case ObjectType.Commit:  	case ObjectType.Tag:  	case ObjectType.Tree:  		return new WholePackedObjectReader (packFile' objectOffset' file.Position' size' type);  	case ObjectType.OffsetDelta:  		var baseOffset = objectOffset - file.Read7BitEncodedInt ();  		return new DeltaOffsetPackedObjectReader (packFile' objectOffset' file.Position' size' baseOffset);  	case ObjectType.ReferenceDelta:  		var baseId = file.ReadId ();  		return new DeltaReferencePackedObjectReader (packFile' objectOffset' file.Position' size' baseId);  	case ObjectType.Undefined:  		throw new InvalidDataException ("ObjectType was undefined.");  	case ObjectType.Reserved:  		throw new InvalidDataException ("ObjectType is reserved.");  	default:  		throw new InvalidDataException ("ObjectType is not valid.");  	}  }  
Magic Number,Shard.Storage,PackedObjectReader,C:\repos\kthompson_shard\Shard\Storage\PackedObjectReader.cs,Create,The following statement contains a magic number: using (var file = File.OpenRead (packFile.Location)) {  	file.Seek (objectOffset' SeekOrigin.Begin);  	var b = file.ReadByte ();  	var typeCode = (b & 0x70) >> 4;  	var type = (ObjectType)typeCode;  	var size = b & 0xF;  	var bits = 4;  	while ((b & 0x80) == 0x80) {  		b = file.ReadByte ();  		size += (b & 0x7f) << bits;  		bits += 7;  	}  	switch (type) {  	case ObjectType.Blob:  	case ObjectType.Commit:  	case ObjectType.Tag:  	case ObjectType.Tree:  		return new WholePackedObjectReader (packFile' objectOffset' file.Position' size' type);  	case ObjectType.OffsetDelta:  		var baseOffset = objectOffset - file.Read7BitEncodedInt ();  		return new DeltaOffsetPackedObjectReader (packFile' objectOffset' file.Position' size' baseOffset);  	case ObjectType.ReferenceDelta:  		var baseId = file.ReadId ();  		return new DeltaReferencePackedObjectReader (packFile' objectOffset' file.Position' size' baseId);  	case ObjectType.Undefined:  		throw new InvalidDataException ("ObjectType was undefined.");  	case ObjectType.Reserved:  		throw new InvalidDataException ("ObjectType is reserved.");  	default:  		throw new InvalidDataException ("ObjectType is not valid.");  	}  }  
Magic Number,Shard.Storage,PackedObjectReader,C:\repos\kthompson_shard\Shard\Storage\PackedObjectReader.cs,Create,The following statement contains a magic number: while ((b & 0x80) == 0x80) {  	b = file.ReadByte ();  	size += (b & 0x7f) << bits;  	bits += 7;  }  
Magic Number,Shard.Storage,PackedObjectReader,C:\repos\kthompson_shard\Shard\Storage\PackedObjectReader.cs,Create,The following statement contains a magic number: bits += 7;  
Magic Number,Shard.Storage,ObjectStorage,C:\repos\kthompson_shard\Shard\Storage\ObjectStorage.cs,FileInfoFor,The following statement contains a magic number: return new FileInfo (Path.Combine (this.ObjectsLocation' id.Substring (0' 2)' id.Substring (2)));  
Magic Number,Shard.Storage,ObjectStorage,C:\repos\kthompson_shard\Shard\Storage\ObjectStorage.cs,FileInfoFor,The following statement contains a magic number: return new FileInfo (Path.Combine (this.ObjectsLocation' id.Substring (0' 2)' id.Substring (2)));  
Magic Number,Shard.Storage,PackFile,C:\repos\kthompson_shard\Shard\Storage\PackFile.cs,PackFile,The following statement contains a magic number: if (this.Location.EndsWith (".pack"))  	this.IndexLocation = this.Location.Substring (0' this.Location.Length - 4) + "idx";  
Magic Number,Shard.Storage,PackFile,C:\repos\kthompson_shard\Shard\Storage\PackFile.cs,PackFile,The following statement contains a magic number: this.IndexLocation = this.Location.Substring (0' this.Location.Length - 4) + "idx";  
Magic Number,Shard.Storage,PackFile,C:\repos\kthompson_shard\Shard\Storage\PackFile.cs,EnsureLoaded,The following statement contains a magic number: using (var stream = File.OpenRead (this.Location)) {  	var reader = new BinaryReader (stream);  	var sig = reader.ReadBytes (4);  	if (!(sig [0] == 'P' && sig [1] == 'A' && sig [2] == 'C' && sig [3] == 'K')) {  		throw new InvalidOperationException ("not a pack file");  	}  	this._version = reader.ReadBigEndianInt32 ();  	this._entryCount = reader.ReadBigEndianInt32 ();  	this._index = new PackIndex (this.IndexLocation' this._entryCount);  }  
Magic Number,Shard.Storage,PackFile,C:\repos\kthompson_shard\Shard\Storage\PackFile.cs,EnsureLoaded,The following statement contains a magic number: using (var stream = File.OpenRead (this.Location)) {  	var reader = new BinaryReader (stream);  	var sig = reader.ReadBytes (4);  	if (!(sig [0] == 'P' && sig [1] == 'A' && sig [2] == 'C' && sig [3] == 'K')) {  		throw new InvalidOperationException ("not a pack file");  	}  	this._version = reader.ReadBigEndianInt32 ();  	this._entryCount = reader.ReadBigEndianInt32 ();  	this._index = new PackIndex (this.IndexLocation' this._entryCount);  }  
Magic Number,Shard.Storage,PackFile,C:\repos\kthompson_shard\Shard\Storage\PackFile.cs,EnsureLoaded,The following statement contains a magic number: using (var stream = File.OpenRead (this.Location)) {  	var reader = new BinaryReader (stream);  	var sig = reader.ReadBytes (4);  	if (!(sig [0] == 'P' && sig [1] == 'A' && sig [2] == 'C' && sig [3] == 'K')) {  		throw new InvalidOperationException ("not a pack file");  	}  	this._version = reader.ReadBigEndianInt32 ();  	this._entryCount = reader.ReadBigEndianInt32 ();  	this._index = new PackIndex (this.IndexLocation' this._entryCount);  }  
Magic Number,Shard.Storage,PackFile,C:\repos\kthompson_shard\Shard\Storage\PackFile.cs,EnsureLoaded,The following statement contains a magic number: if (!(sig [0] == 'P' && sig [1] == 'A' && sig [2] == 'C' && sig [3] == 'K')) {  	throw new InvalidOperationException ("not a pack file");  }  
Magic Number,Shard.Storage,PackFile,C:\repos\kthompson_shard\Shard\Storage\PackFile.cs,EnsureLoaded,The following statement contains a magic number: if (!(sig [0] == 'P' && sig [1] == 'A' && sig [2] == 'C' && sig [3] == 'K')) {  	throw new InvalidOperationException ("not a pack file");  }  
Magic Number,Shard.Storage,PackIndex,C:\repos\kthompson_shard\Shard\Storage\PackIndex.cs,PackIndex,The following statement contains a magic number: this.FanoutTableOffset = 8;  
Magic Number,Shard.Storage,PackIndex,C:\repos\kthompson_shard\Shard\Storage\PackIndex.cs,PackIndex,The following statement contains a magic number: this.ShaTableOffset = FanoutTableOffset + (256 * 4);  
Magic Number,Shard.Storage,PackIndex,C:\repos\kthompson_shard\Shard\Storage\PackIndex.cs,PackIndex,The following statement contains a magic number: this.ShaTableOffset = FanoutTableOffset + (256 * 4);  
Magic Number,Shard.Storage,PackIndex,C:\repos\kthompson_shard\Shard\Storage\PackIndex.cs,PackIndex,The following statement contains a magic number: this.CrcTableOffset = ShaTableOffset + (20 * Size);  
Magic Number,Shard.Storage,PackIndex,C:\repos\kthompson_shard\Shard\Storage\PackIndex.cs,PackIndex,The following statement contains a magic number: this.OffsetTableOffset = CrcTableOffset + (4 * Size);  
Magic Number,Shard.Storage,PackIndex,C:\repos\kthompson_shard\Shard\Storage\PackIndex.cs,CrcOffset,The following statement contains a magic number: return CrcTableOffset + entry.Index * 4;  
Magic Number,Shard.Storage,PackIndex,C:\repos\kthompson_shard\Shard\Storage\PackIndex.cs,OffsetOffset,The following statement contains a magic number: return OffsetTableOffset + entry.Index * 4;  
Magic Number,Shard.Storage,PackIndex,C:\repos\kthompson_shard\Shard\Storage\PackIndex.cs,GetShaTableEntryOffset,The following statement contains a magic number: return ShaTableOffset + index * 20;  
Magic Number,Shard.Storage,PackIndex,C:\repos\kthompson_shard\Shard\Storage\PackIndex.cs,GetFanoutTablePosition,The following statement contains a magic number: return FanoutTableOffset + fanoutIndex * 4;  
Missing Default,Shard.Storage,RefStorage,C:\repos\kthompson_shard\Shard\Storage\RefStorage.cs,UpdateCollection,The following switch statement is missing a default case: switch (e.ChangeType) {  case WatcherChangeTypes.Created: {  	collection.Add (Ref.FromLocation (e.FullPath' RefsLocation));  	break;  }  case WatcherChangeTypes.Deleted: {  	collection.Remove (refName);  	break;  }  }  
Missing Default,Shard.Storage,LooseObjectReader,C:\repos\kthompson_shard\Shard\Storage\LooseObjectReader.cs,ReadHeader,The following switch statement is missing a default case: switch (c) {  case ' ':  	typeCode = sb.ToString ();  	sb.Clear ();  	continue;  case '\0':  	size = int.Parse (sb.ToString ());  	sb.Clear ();  	inHeader = false;  	continue;  }  
