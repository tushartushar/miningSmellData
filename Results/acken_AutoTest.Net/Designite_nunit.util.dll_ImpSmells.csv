Implementation smell,Namespace,Class,File,Method,Description
Long Method,NUnit.Util,NUnitProject,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\NUnitProject.cs,Load,The method has 100 lines of code.
Complex Method,NUnit.Util,AggregatingTestRunner,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\AggregatingTestRunner.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Util,NUnitProject,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\NUnitProject.cs,Save,Cyclomatic complexity of the method is 13
Complex Method,NUnit.Util,PathUtils,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\PathUtils.cs,RelativePath,Cyclomatic complexity of the method is 12
Complex Method,NUnit.Util,DomainManager,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\Services\DomainManager.cs,CreateDomain,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Util,VSProject,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,Cyclomatic complexity of the method is 8
Long Statement,NUnit.Util,TestLoader,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\TestLoader.cs,LoadTest,The length of the statement  "						lastException = new ApplicationException( string.Format( "Unable to load {0} because it is not located under the AppBase"' exception.FileName )' exception );" is 157.
Long Statement,NUnit.Util,VSProject,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\VSProject.cs,Load,The length of the statement  "							outputPath = outputPath.Replace( "$(SolutionDir)"' Path.GetFullPath( Path.GetDirectoryName( projectPath ) ) + Path.DirectorySeparatorChar ); " is 140.
Long Statement,NUnit.Util,VSProject,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The length of the statement  "			XmlElement assemblyNameElement = (XmlElement)doc.SelectSingleNode("/msbuild:Project/msbuild:PropertyGroup/msbuild:AssemblyName"' namespaceManager); " is 147.
Long Statement,NUnit.Util,VSProject,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The length of the statement  "			XmlElement outputTypeElement = (XmlElement)doc.SelectSingleNode("/msbuild:Project/msbuild:PropertyGroup/msbuild:OutputType"' namespaceManager); " is 143.
Complex Conditional,NUnit.Util,SettingsGroup,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\SettingsGroup.cs,SaveSetting,The conditional expression  "oldValue is string && settingValue is string && (string)oldValue == (string)settingValue ||  					oldValue is int && settingValue is int && (int)oldValue == (int)settingValue ||  					oldValue is bool && settingValue is bool && (bool)oldValue == (bool)settingValue ||  					oldValue is Enum && settingValue is Enum && oldValue.Equals(settingValue)"  is complex.
Complex Conditional,NUnit.Util,XmlResultWriter,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The conditional expression  "currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13)"  is complex.
Complex Conditional,Codeblast,CommandLineOptions,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The conditional expression  "(c[0] == '-' || c[0] == '/' && AllowForwardSlash) && IsOptionNameChar(c[1])"  is complex.
Empty Catch Block,NUnit.Util,RecentFileEntry,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\RecentFileEntry.cs,Parse,The method has an empty catch block.
Empty Catch Block,NUnit.Util,ServerUtilities,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\ServerUtilities.cs,SafeReleaseChannel,The method has an empty catch block.
Empty Catch Block,Codeblast,CommandLineOptions,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\CommandLineOptions.cs,GetOption,The method has an empty catch block.
Magic Number,NUnit.Util,AggregatingTestRunner,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\AggregatingTestRunner.cs,Load,The following statement contains a magic number: foreach (string assembly in package.Assemblies)             {                 if (targetAssemblyName == null || targetAssemblyName == assembly)                 {                     TestRunner runner = CreateRunner(this.runnerID * 100 + index + 1);                      TestPackage p = new TestPackage(assembly);                     p.AutoBinPath = package.AutoBinPath;                     p.ConfigurationFile = package.ConfigurationFile;                     p.BasePath = package.BasePath;                     p.PrivateBinPath = package.PrivateBinPath;                     p.TestName = package.TestName;                     foreach (object key in package.Settings.Keys)                         p.Settings[key] = package.Settings[key];                      if (package.TestName == null)                     {                         runners.Add(runner);                         if (runner.Load(p))                             nfound++;                     }                     else if (runner.Load(p))                     {                         runners.Add(runner);                         nfound++;                     }                 }             }
Magic Number,NUnit.Util,PathUtils,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\PathUtils.cs,GetAssemblyPathFromFileUri,The following statement contains a magic number: if ( PathUtils.DirectorySeparatorChar == '\\' )  			{  				if ( uri[start] == '/' && uri[start+2] == ':' )  					++start;  			}  			else  			{  				if ( uri[start] != '/' )  					--start;  			}
Magic Number,NUnit.Util,ProcessRunner,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\ProcessRunner.cs,Load,The following statement contains a magic number: try 			{                  if (this.agent == null)                  {                      this.agent = Services.TestAgency.GetAgent(                          runtimeFramework'                          30000'                          enableDebug);                        if (this.agent == null)                          return false;                  } 	 				if ( this.TestRunner == null ) 					this.TestRunner = agent.CreateRunner(this.runnerID);  				loaded = base.Load (package);                 return loaded; 			} 			finally 			{                 // Clean up if the load failed 				if ( !loaded ) Unload(); 			}
Magic Number,NUnit.Util,ServerBase,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\ServerBase.cs,Start,The following statement contains a magic number: if (uri != null && uri != string.Empty)              {                  lock (theLock)                  {                      this.channel = ServerUtilities.GetTcpChannel(uri + "Channel"' port' 100);                        RemotingServices.Marshal(this' uri);                      this.isMarshalled = true;                  }                    if (this.port == 0)                  {                      ChannelDataStore store = this.channel.ChannelData as ChannelDataStore;                      if (store != null)                      {                          string channelUri = store.ChannelUris[0];                          this.port = int.Parse(channelUri.Substring(channelUri.LastIndexOf(':') + 1));                      }                  }              }
Magic Number,NUnit.Util,ServerUtilities,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\ServerUtilities.cs,GetTcpChannel,The following statement contains a magic number: return GetTcpChannel( ""' 0' 2 );
Magic Number,NUnit.Util,ServerUtilities,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\ServerUtilities.cs,GetTcpChannel,The following statement contains a magic number: return GetTcpChannel( name' port' 2 );
Magic Number,NUnit.Util,ServerUtilities,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\ServerUtilities.cs,GetTcpChannel,The following statement contains a magic number: if ( channel == null )  			{  				// NOTE: Retries are normally only needed when rapidly creating  				// and destroying channels' as in running the NUnit tests.  				int retries = 10;  				while( --retries > 0 )  					try  					{  						channel = CreateTcpChannel( name' port' limit );  #if NET_2_0  						ChannelServices.RegisterChannel( channel' false );  #else  						ChannelServices.RegisterChannel( channel );  #endif                          break;  					}  					catch( Exception e )  					{                          log.Error("Failed to create/register channel"' e);  						System.Threading.Thread.Sleep(300);  					}  			}
Magic Number,NUnit.Util,ServerUtilities,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\ServerUtilities.cs,GetTcpChannel,The following statement contains a magic number: if ( channel == null )  			{  				// NOTE: Retries are normally only needed when rapidly creating  				// and destroying channels' as in running the NUnit tests.  				int retries = 10;  				while( --retries > 0 )  					try  					{  						channel = CreateTcpChannel( name' port' limit );  #if NET_2_0  						ChannelServices.RegisterChannel( channel' false );  #else  						ChannelServices.RegisterChannel( channel );  #endif                          break;  					}  					catch( Exception e )  					{                          log.Error("Failed to create/register channel"' e);  						System.Threading.Thread.Sleep(300);  					}  			}
Magic Number,NUnit.Util,DomainManager,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\Services\DomainManager.cs,GetPrivateBinPath,The following statement contains a magic number: StringBuilder sb = new StringBuilder(200);
Magic Number,NUnit.Util,DomainUnloader,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\Services\DomainManager.cs,Unload,The following statement contains a magic number: if (!thread.Join(30000))                 {                     log.Error("Unable to unload AppDomain {0}' Unload thread timed out"' domainName);                     thread.Abort();                 }
Magic Number,NUnit.Util,LegacySettingsConverter,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\Services\SettingsService.cs,Convert,The following statement contains a magic number: int maxFiles = this.GetSetting( "RecentProjects.MaxFiles"' 5 );
Magic Number,NUnit.Util,TestAgency,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\Services\TestAgency.cs,Stop,The following statement contains a magic number: foreach( AgentRecord r in agentData )  			{  				if ( !r.Process.HasExited )  				{  					if ( r.Agent != null )  					{  						r.Agent.Stop();  						r.Process.WaitForExit(10000);  					}    					if ( !r.Process.HasExited )  						r.Process.Kill();  				}  			}
Magic Number,NUnit.Util,TestAgency,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\Services\TestAgency.cs,LaunchAgentProcess,The following statement contains a magic number: switch( targetRuntime.Runtime )              {                  case RuntimeType.Mono:                      p.StartInfo.FileName = NUnitConfiguration.MonoExePath;                      if (enableDebug)                          p.StartInfo.Arguments = string.Format("--debug \"{0}\" {1}"' agentExePath' arglist);                      else                          p.StartInfo.Arguments = string.Format("\"{0}\" {1}"' agentExePath' arglist);                      break;                  case RuntimeType.Net:                      p.StartInfo.FileName = agentExePath;                        if (targetRuntime.ClrVersion.Build < 0)                          targetRuntime = RuntimeFramework.GetBestAvailableFramework(targetRuntime);                        string envVar = "v" + targetRuntime.ClrVersion.ToString(3);                      p.StartInfo.EnvironmentVariables["COMPLUS_Version"] = envVar;                        p.StartInfo.Arguments = arglist;                      break;                  default:  				    p.StartInfo.FileName = agentExePath;                      p.StartInfo.Arguments = arglist;                      break;  			}
Magic Number,NUnit.Util,TestAgency,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\Services\TestAgency.cs,CreateRemoteAgent,The following statement contains a magic number: int pollTime = 200;
Magic Number,NUnit.Util,TestLoader,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\TestLoader.cs,InstallWatcher,The following statement contains a magic number: if (watcher != null)              {                  watcher.Stop();                  watcher.FreeResources();                    watcher.Setup(1000' TestProject.ActiveConfig.Assemblies.ToArray());                  watcher.AssemblyChanged += new AssemblyChangedHandler(OnTestChanged);                  watcher.Start();              }
Magic Number,NUnit.Util,TestResultItem,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\TestResultItem.cs,ToString,The following statement contains a magic number: if ( message.Length > 64000 )  				return string.Format( "{0}:{1}{2}"' testName' Environment.NewLine' message.Substring( 0' 64000 ) );
Magic Number,NUnit.Util,TestResultItem,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\TestResultItem.cs,ToString,The following statement contains a magic number: if ( message.Length > 64000 )  				return string.Format( "{0}:{1}{2}"' testName' Environment.NewLine' message.Substring( 0' 64000 ) );
Magic Number,NUnit.Util,TestResultItem,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\TestResultItem.cs,GetToolTipMessage,The following statement contains a magic number: return (ReplaceTabs(GetMessage()' 8));
Magic Number,NUnit.Util,VSProject,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The following statement contains a magic number: foreach (XmlElement configNode in nodes)  			{                  if (configNode.Name != "PropertyGroup")                      continue;    				XmlAttribute conditionAttribute = configNode.Attributes["Condition"];  				if (conditionAttribute == null) continue;    				string condition = conditionAttribute.Value;  				int start = condition.IndexOf( "==" );  				if ( start < 0 ) continue;    				string configurationName = condition.Substring( start + 2 ).Trim(new char[] {' '' '\'' } );  				if ( configurationName.EndsWith( "|AnyCPU" ) )  					configurationName = configurationName.Substring( 0' configurationName.Length - 7 );    				XmlElement outputPathElement = (XmlElement)configNode.SelectSingleNode("msbuild:OutputPath"' namespaceManager);  				string outputPath = outputPathElement.InnerText;    				string outputDirectory = Path.Combine(projectDirectory' outputPath);  				string assemblyPath = Path.Combine(outputDirectory' assemblyName);    				VSProjectConfig config = new VSProjectConfig(configurationName);  				config.Assemblies.Add(assemblyPath);    				configs.Add(config);  			}
Magic Number,NUnit.Util,VSProject,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The following statement contains a magic number: foreach (XmlElement configNode in nodes)  			{                  if (configNode.Name != "PropertyGroup")                      continue;    				XmlAttribute conditionAttribute = configNode.Attributes["Condition"];  				if (conditionAttribute == null) continue;    				string condition = conditionAttribute.Value;  				int start = condition.IndexOf( "==" );  				if ( start < 0 ) continue;    				string configurationName = condition.Substring( start + 2 ).Trim(new char[] {' '' '\'' } );  				if ( configurationName.EndsWith( "|AnyCPU" ) )  					configurationName = configurationName.Substring( 0' configurationName.Length - 7 );    				XmlElement outputPathElement = (XmlElement)configNode.SelectSingleNode("msbuild:OutputPath"' namespaceManager);  				string outputPath = outputPathElement.InnerText;    				string outputDirectory = Path.Combine(projectDirectory' outputPath);  				string assemblyPath = Path.Combine(outputDirectory' assemblyName);    				VSProjectConfig config = new VSProjectConfig(configurationName);  				config.Assemblies.Add(assemblyPath);    				configs.Add(config);  			}
Magic Number,NUnit.Util,XmlResultWriter,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The following statement contains a magic number: for(int x = 0 ; x < encodedChars.Length ; x++)  			{  				char currentChar = encodedChars[x];  				//unprintable characters are below 0x20 in Unicode tables  				//some control characters are acceptable. (carriage return 0x0D' line feed 0x0A' horizontal tab 0x09)  				if(currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13))  				{  					//save the array index for later replacement.  					pos.Add(x);  				}  			}
Magic Number,NUnit.Util,XmlResultWriter,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The following statement contains a magic number: for(int x = 0 ; x < encodedChars.Length ; x++)  			{  				char currentChar = encodedChars[x];  				//unprintable characters are below 0x20 in Unicode tables  				//some control characters are acceptable. (carriage return 0x0D' line feed 0x0A' horizontal tab 0x09)  				if(currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13))  				{  					//save the array index for later replacement.  					pos.Add(x);  				}  			}
Magic Number,NUnit.Util,XmlResultWriter,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The following statement contains a magic number: for(int x = 0 ; x < encodedChars.Length ; x++)  			{  				char currentChar = encodedChars[x];  				//unprintable characters are below 0x20 in Unicode tables  				//some control characters are acceptable. (carriage return 0x0D' line feed 0x0A' horizontal tab 0x09)  				if(currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13))  				{  					//save the array index for later replacement.  					pos.Add(x);  				}  			}
Magic Number,NUnit.Util,XmlResultWriter,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The following statement contains a magic number: for(int x = 0 ; x < encodedChars.Length ; x++)  			{  				char currentChar = encodedChars[x];  				//unprintable characters are below 0x20 in Unicode tables  				//some control characters are acceptable. (carriage return 0x0D' line feed 0x0A' horizontal tab 0x09)  				if(currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13))  				{  					//save the array index for later replacement.  					pos.Add(x);  				}  			}
Magic Number,NUnit.Util,XmlResultWriter,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\XmlResultWriter.cs,WriteCData,The following statement contains a magic number: while (true)              {                  int illegal = text.IndexOf("]]>"' start);                  if (illegal < 0)                      break;                  xmlWriter.WriteCData(text.Substring(start' illegal - start + 2));                  start = illegal + 2;                  if (start >= text.Length)                      return;              }
Magic Number,NUnit.Util,XmlResultWriter,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\XmlResultWriter.cs,WriteCData,The following statement contains a magic number: while (true)              {                  int illegal = text.IndexOf("]]>"' start);                  if (illegal < 0)                      break;                  xmlWriter.WriteCData(text.Substring(start' illegal - start + 2));                  start = illegal + 2;                  if (start >= text.Length)                      return;              }
Magic Number,Codeblast,CommandLineOptions,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length < 2)   			{  				return 0;  			}  			else if (opt.Length > 2)  			{  				c = opt.ToCharArray(0' 3);  				if (c[0] == '-' && c[1] == '-' && IsOptionNameChar(c[2])) return 2;  			}  			else  			{  				c = opt.ToCharArray(0' 2);  			}
Magic Number,Codeblast,CommandLineOptions,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length < 2)   			{  				return 0;  			}  			else if (opt.Length > 2)  			{  				c = opt.ToCharArray(0' 3);  				if (c[0] == '-' && c[1] == '-' && IsOptionNameChar(c[2])) return 2;  			}  			else  			{  				c = opt.ToCharArray(0' 2);  			}
Magic Number,Codeblast,CommandLineOptions,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length < 2)   			{  				return 0;  			}  			else if (opt.Length > 2)  			{  				c = opt.ToCharArray(0' 3);  				if (c[0] == '-' && c[1] == '-' && IsOptionNameChar(c[2])) return 2;  			}  			else  			{  				c = opt.ToCharArray(0' 2);  			}
Magic Number,Codeblast,CommandLineOptions,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length < 2)   			{  				return 0;  			}  			else if (opt.Length > 2)  			{  				c = opt.ToCharArray(0' 3);  				if (c[0] == '-' && c[1] == '-' && IsOptionNameChar(c[2])) return 2;  			}  			else  			{  				c = opt.ToCharArray(0' 2);  			}
Magic Number,Codeblast,CommandLineOptions,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length < 2)   			{  				return 0;  			}  			else if (opt.Length > 2)  			{  				c = opt.ToCharArray(0' 3);  				if (c[0] == '-' && c[1] == '-' && IsOptionNameChar(c[2])) return 2;  			}  			else  			{  				c = opt.ToCharArray(0' 2);  			}
Magic Number,Codeblast,CommandLineOptions,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length < 2)   			{  				return 0;  			}  			else if (opt.Length > 2)  			{  				c = opt.ToCharArray(0' 3);  				if (c[0] == '-' && c[1] == '-' && IsOptionNameChar(c[2])) return 2;  			}  			else  			{  				c = opt.ToCharArray(0' 2);  			}
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertFrom,The following statement contains a magic number: if ( VSProject.IsProjectFile(path) )  			{  				VSProject vsProject = new VSProject( path );  				project.Add( vsProject );  			}  			else if ( VSProject.IsSolutionFile(path) )  			{  				string solutionDirectory = Path.GetDirectoryName( path );  				using(StreamReader reader = new StreamReader( path ))  				{  					char[] delims = { '='' ''' };  					char[] trimchars = { ' '' '"' };    					string line = reader.ReadLine();  					while ( line != null )  					{  						if ( line.StartsWith( "Project" ) )  						{  							string[] parts = line.Split( delims );  							string vsProjectPath = parts[2].Trim(trimchars);  						  							if ( VSProject.IsProjectFile( vsProjectPath ) )  								project.Add( new VSProject( Path.Combine( solutionDirectory' vsProjectPath ) ) );  						}    						line = reader.ReadLine();  					}  				}  			}
Missing Default,NUnit.Util,XmlResultWriter,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\ClientUtilities\util\XmlResultWriter.cs,WriteResultElement,The following switch statement is missing a default case: switch (result.ResultState)              {                  case ResultState.Ignored:                  case ResultState.NotRunnable:                  case ResultState.Skipped:                      WriteReasonElement(result);                      break;                    case ResultState.Failure:                  case ResultState.Error:                  case ResultState.Cancelled:                      if (!result.Test.IsSuite || result.FailureSite == FailureSite.SetUp)                          WriteFailureElement(result);                      break;                  case ResultState.Success:                  case ResultState.Inconclusive:                      if (result.Message != null)                          WriteReasonElement(result);                      break;              }
