Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NUnit.Util,AggregatingTestRunner,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\AggregatingTestRunner.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Util,AggregatingTestRunner,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\AggregatingTestRunner.cs,Run,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Util,NUnitProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\NUnitProject.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Util,NUnitProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\NUnitProject.cs,Save,Cyclomatic complexity of the method is 14
Complex Method,NUnit.Util,PathUtils,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\PathUtils.cs,RelativePath,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Util,PathUtils,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\PathUtils.cs,Canonicalize,Cyclomatic complexity of the method is 13
Complex Method,NUnit.Util,ProjectConfig,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConfig.cs,MakeTestPackage,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Util,ResultSummarizer,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ResultSummarizer.cs,Summarize,Cyclomatic complexity of the method is 32
Complex Method,NUnit.Util,RuntimeFrameworkSelector,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\RuntimeFrameworkSelector.cs,SelectRuntimeFramework,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Util,DomainManager,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\DomainManager.cs,CreateDomain,Cyclomatic complexity of the method is 12
Complex Method,NUnit.Util,TestAgency,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\TestAgency.cs,LaunchAgentProcess,Cyclomatic complexity of the method is 21
Complex Method,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,Load,Cyclomatic complexity of the method is 19
Complex Method,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,Cyclomatic complexity of the method is 12
Complex Method,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,WriteResultElement,Cyclomatic complexity of the method is 17
Complex Method,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,GetHelpText,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertVSSolution,Cyclomatic complexity of the method is 15
Long Statement,NUnit.Util,NUnitProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\NUnitProject.cs,Load,The length of the statement  "			throw new ProjectFormatException ("Invalid project format: <NUnitProject> expected."' reader.LineNumber' reader.LinePosition); " is 126.
Long Statement,NUnit.Util,NUnitProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\NUnitProject.cs,Load,The length of the statement  "		throw new ProjectFormatException (string.Format ("Invalid project format: {0}"' e.Message)' e.LineNumber' e.LinePosition); " is 122.
Long Statement,NUnit.Util,NUnitProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\NUnitProject.cs,Load,The length of the statement  "		throw new ProjectFormatException (string.Format ("Invalid project format: {0} Line {1}' Position {2}"' e.Message' reader.LineNumber' reader.LinePosition)' reader.LineNumber' reader.LinePosition); " is 195.
Long Statement,NUnit.Util,RuntimeFrameworkSelector,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\RuntimeFrameworkSelector.cs,SelectRuntimeFramework,The length of the statement  "	Version targetVersion = requestedFramework == null ? RuntimeFramework.DefaultVersion : requestedFramework.FrameworkVersion; " is 123.
Long Statement,NUnit.Util,DomainManager,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\DomainManager.cs,CreateDomain,The length of the statement  "	FileInfo testFile = package.FullName != null && package.FullName != string.Empty ? new FileInfo (package.FullName) : null; " is 122.
Long Statement,NUnit.Util,DomainManager,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\DomainManager.cs,CreateDomain,The length of the statement  "			configFile = Services.ProjectService.CanLoadProject (testFile.Name) ? Path.GetFileNameWithoutExtension (testFile.Name) + ".config" : testFile.Name + ".config"; " is 159.
Long Statement,NUnit.Util,DomainManager,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\DomainManager.cs,CreateDomain,The length of the statement  "		runnerDomain.SetPrincipalPolicy ((PrincipalPolicy)Services.UserSettings.GetSetting ("Options.TestLoader.PrincipalPolicy"' PrincipalPolicy.UnauthenticatedPrincipal)); " is 165.
Long Statement,NUnit.Util,TestAgency,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\TestAgency.cs,LaunchAgentProcess,The length of the statement  "		throw new ArgumentException (string.Format ("NUnit components for version {0} of the CLR are not installed"' targetRuntime.ClrVersion.ToString ())' "targetRuntime"); " is 165.
Long Statement,NUnit.Util,TestAgency,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\TestAgency.cs,GetTestAgentExePath,The length of the statement  "	string agentName = v.Major > 1 && a != null && a.GetName ().ProcessorArchitecture == ProcessorArchitecture.X86 ? "nunit-agent-x86.exe" : "nunit-agent.exe"; " is 155.
Long Statement,NUnit.Util,SettingsGroup,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\SettingsGroup.cs,SaveSetting,The length of the statement  "		if (oldValue is string && settingValue is string && (string)oldValue == (string)settingValue || oldValue is int && settingValue is int && (int)oldValue == (int)settingValue || oldValue is bool && settingValue is bool && (bool)oldValue == (bool)settingValue || oldValue is Enum && settingValue is Enum && oldValue.Equals (settingValue)) " is 335.
Long Statement,NUnit.Util,TestLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\TestLoader.cs,LoadTest,The length of the statement  "			this.currentFramework = package.Settings.Contains ("RuntimeFramework") ? package.Settings ["RuntimeFramework"] as RuntimeFramework : RuntimeFramework.CurrentFramework; " is 167.
Long Statement,NUnit.Util,TestLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\TestLoader.cs,LoadTest,The length of the statement  "			if (Path.GetFileNameWithoutExtension (assembly) == exception.FileName && !PathUtils.SamePathOrUnder (testProject.ActiveConfig.BasePath' assembly)) { " is 148.
Long Statement,NUnit.Util,TestLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\TestLoader.cs,LoadTest,The length of the statement  "				lastException = new ApplicationException (string.Format ("Unable to load {0} because it is not located under the AppBase"' exception.FileName)' exception); " is 155.
Long Statement,NUnit.Util,TestLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\TestLoader.cs,ReloadTest,The length of the statement  "			this.currentFramework = package.Settings.Contains ("RuntimeFramework") ? package.Settings ["RuntimeFramework"] as RuntimeFramework : RuntimeFramework.CurrentFramework; " is 167.
Long Statement,NUnit.Util,TestLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\TestLoader.cs,MakeTestPackage,The length of the statement  "	ProcessModel processModel = (ProcessModel)userSettings.GetSetting ("Options.TestLoader.ProcessModel"' ProcessModel.Default); " is 124.
Long Statement,NUnit.Util,TestLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\TestLoader.cs,MakeTestPackage,The length of the statement  "	(processModel != ProcessModel.Multiple || domainUsage != DomainUsage.Multiple) && // Both process and domain may not be multiple " is 128.
Long Statement,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,Load,The length of the statement  "				outputPath = outputPath.Replace ("$(SolutionDir)"' Path.GetFullPath (Path.GetDirectoryName (projectPath)) + Path.DirectorySeparatorChar); " is 137.
Long Statement,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The length of the statement  "	XmlElement assemblyNameElement = (XmlElement)doc.SelectSingleNode ("/msbuild:Project/msbuild:PropertyGroup/msbuild:AssemblyName"' namespaceManager); " is 148.
Long Statement,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The length of the statement  "	XmlElement outputTypeElement = (XmlElement)doc.SelectSingleNode ("/msbuild:Project/msbuild:PropertyGroup/msbuild:OutputType"' namespaceManager); " is 144.
Long Statement,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The length of the statement  "			individual characters on non-latin code pages.*/char[] encodedChars = System.Text.Encoding.Default.GetChars (System.Text.Encoding.Default.GetBytes (encodedString)); " is 164.
Long Statement,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertFrom,The length of the statement  "		return Services.UserSettings.GetSetting ("Options.TestLoader.VisualStudio.UseSolutionConfigs"' true) ? ConvertVSSolution (path) : LegacyConvertVSSolution (path); " is 161.
Complex Conditional,NUnit.Util,SettingsGroup,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\SettingsGroup.cs,SaveSetting,The conditional expression  "oldValue is string && settingValue is string && (string)oldValue == (string)settingValue || oldValue is int && settingValue is int && (int)oldValue == (int)settingValue || oldValue is bool && settingValue is bool && (bool)oldValue == (bool)settingValue || oldValue is Enum && settingValue is Enum && oldValue.Equals (settingValue)"  is complex.
Complex Conditional,NUnit.Util,TestLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\TestLoader.cs,MakeTestPackage,The conditional expression  "domainUsage != DomainUsage.Default && // Ignore default setting  domainUsage != DomainUsage.None && // Ignore DomainUsage.None in Gui  (processModel != ProcessModel.Multiple || domainUsage != DomainUsage.Multiple) && // Both process and domain may not be multiple  !package.Settings.Contains ("DomainUsage")"  is complex.
Complex Conditional,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The conditional expression  "currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13)"  is complex.
Complex Conditional,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The conditional expression  "(c [0] == '-' || c [0] == '/' && AllowForwardSlash) && IsOptionNameChar (c [1])"  is complex.
Empty Catch Block,NUnit.Util,ProcessRunner,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProcessRunner.cs,Dispose,The method has an empty catch block.
Empty Catch Block,NUnit.Util,RecentFileEntry,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\RecentFileEntry.cs,Parse,The method has an empty catch block.
Empty Catch Block,NUnit.Util,ServerUtilities,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ServerUtilities.cs,SafeReleaseChannel,The method has an empty catch block.
Empty Catch Block,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,GetOption,The method has an empty catch block.
Magic Number,NUnit.Util,AggregatingTestRunner,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\AggregatingTestRunner.cs,Load,The following statement contains a magic number: foreach (string assembly in package.Assemblies) {  	if (targetAssemblyName == null || targetAssemblyName == assembly) {  		TestRunner runner = CreateRunner (this.runnerID * 100 + index + 1);  		TestPackage p = new TestPackage (assembly);  		p.AutoBinPath = package.AutoBinPath;  		p.ConfigurationFile = package.ConfigurationFile;  		p.BasePath = package.BasePath;  		p.PrivateBinPath = package.PrivateBinPath;  		p.TestName = package.TestName;  		foreach (object key in package.Settings.Keys)  			p.Settings [key] = package.Settings [key];  		if (package.TestName == null) {  			runners.Add (runner);  			if (runner.Load (p))  				nfound++;  		} else if (runner.Load (p)) {  			runners.Add (runner);  			nfound++;  		}  	}  }  
Magic Number,NUnit.Util,AggregatingTestRunner,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\AggregatingTestRunner.cs,Load,The following statement contains a magic number: if (targetAssemblyName == null || targetAssemblyName == assembly) {  	TestRunner runner = CreateRunner (this.runnerID * 100 + index + 1);  	TestPackage p = new TestPackage (assembly);  	p.AutoBinPath = package.AutoBinPath;  	p.ConfigurationFile = package.ConfigurationFile;  	p.BasePath = package.BasePath;  	p.PrivateBinPath = package.PrivateBinPath;  	p.TestName = package.TestName;  	foreach (object key in package.Settings.Keys)  		p.Settings [key] = package.Settings [key];  	if (package.TestName == null) {  		runners.Add (runner);  		if (runner.Load (p))  			nfound++;  	} else if (runner.Load (p)) {  		runners.Add (runner);  		nfound++;  	}  }  
Magic Number,NUnit.Util,PathUtils,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\PathUtils.cs,GetAssemblyPathFromFileUri,The following statement contains a magic number: if (PathUtils.DirectorySeparatorChar == '\\') {  	if (uri [start] == '/' && uri [start + 2] == ':')  		++start;  } else {  	if (uri [start] != '/')  		--start;  }  
Magic Number,NUnit.Util,PathUtils,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\PathUtils.cs,GetAssemblyPathFromFileUri,The following statement contains a magic number: if (uri [start] == '/' && uri [start + 2] == ':')  	++start;  
Magic Number,NUnit.Util,ProcessRunner,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProcessRunner.cs,Load,The following statement contains a magic number: try {  	if (this.agent == null) {  		this.agent = Services.TestAgency.GetAgent (runtimeFramework' 30000' enableDebug);  		if (this.agent == null)  			return false;  	}  	if (this.TestRunner == null)  		this.TestRunner = agent.CreateRunner (this.runnerID);  	loaded = base.Load (package);  	return loaded;  } finally {  	// Clean up if the load failed  	if (!loaded)  		Unload ();  }  
Magic Number,NUnit.Util,ProcessRunner,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProcessRunner.cs,Load,The following statement contains a magic number: if (this.agent == null) {  	this.agent = Services.TestAgency.GetAgent (runtimeFramework' 30000' enableDebug);  	if (this.agent == null)  		return false;  }  
Magic Number,NUnit.Util,ProcessRunner,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProcessRunner.cs,Load,The following statement contains a magic number: this.agent = Services.TestAgency.GetAgent (runtimeFramework' 30000' enableDebug);  
Magic Number,NUnit.Util,ServerBase,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ServerBase.cs,Start,The following statement contains a magic number: if (uri != null && uri != string.Empty) {  	lock (theLock) {  		this.channel = ServerUtilities.GetTcpChannel (uri + "Channel"' port' 100);  		RemotingServices.Marshal (this' uri);  		this.isMarshalled = true;  	}  	if (this.port == 0) {  		ChannelDataStore store = this.channel.ChannelData as ChannelDataStore;  		if (store != null) {  			string channelUri = store.ChannelUris [0];  			this.port = int.Parse (channelUri.Substring (channelUri.LastIndexOf (':') + 1));  		}  	}  }  
Magic Number,NUnit.Util,ServerBase,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ServerBase.cs,Start,The following statement contains a magic number: lock (theLock) {  	this.channel = ServerUtilities.GetTcpChannel (uri + "Channel"' port' 100);  	RemotingServices.Marshal (this' uri);  	this.isMarshalled = true;  }  
Magic Number,NUnit.Util,ServerBase,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ServerBase.cs,Start,The following statement contains a magic number: this.channel = ServerUtilities.GetTcpChannel (uri + "Channel"' port' 100);  
Magic Number,NUnit.Util,ServerUtilities,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ServerUtilities.cs,GetTcpChannel,The following statement contains a magic number: return GetTcpChannel (""' 0' 2);  
Magic Number,NUnit.Util,ServerUtilities,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ServerUtilities.cs,GetTcpChannel,The following statement contains a magic number: return GetTcpChannel (name' port' 2);  
Magic Number,NUnit.Util,ServerUtilities,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ServerUtilities.cs,GetTcpChannel,The following statement contains a magic number: if (channel == null) {  	// NOTE: Retries are normally only needed when rapidly creating  	// and destroying channels' as in running the NUnit tests.  	int retries = 10;  	while (--retries > 0)  		try {  			channel = CreateTcpChannel (name' port' limit);  			#if CLR_2_0 || CLR_4_0  			ChannelServices.RegisterChannel (channel' false);  			#else  									ChannelServices.RegisterChannel( channel ); #endif  			break;  		} catch (Exception e) {  			log.Error ("Failed to create/register channel"' e);  			System.Threading.Thread.Sleep (300);  		}  }  
Magic Number,NUnit.Util,ServerUtilities,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ServerUtilities.cs,GetTcpChannel,The following statement contains a magic number: if (channel == null) {  	// NOTE: Retries are normally only needed when rapidly creating  	// and destroying channels' as in running the NUnit tests.  	int retries = 10;  	while (--retries > 0)  		try {  			channel = CreateTcpChannel (name' port' limit);  			#if CLR_2_0 || CLR_4_0  			ChannelServices.RegisterChannel (channel' false);  			#else  									ChannelServices.RegisterChannel( channel ); #endif  			break;  		} catch (Exception e) {  			log.Error ("Failed to create/register channel"' e);  			System.Threading.Thread.Sleep (300);  		}  }  
Magic Number,NUnit.Util,ServerUtilities,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ServerUtilities.cs,GetTcpChannel,The following statement contains a magic number: while (--retries > 0)  	try {  		channel = CreateTcpChannel (name' port' limit);  		#if CLR_2_0 || CLR_4_0  		ChannelServices.RegisterChannel (channel' false);  		#else  								ChannelServices.RegisterChannel( channel ); #endif  		break;  	} catch (Exception e) {  		log.Error ("Failed to create/register channel"' e);  		System.Threading.Thread.Sleep (300);  	}  
Magic Number,NUnit.Util,ServerUtilities,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ServerUtilities.cs,GetTcpChannel,The following statement contains a magic number: try {  	channel = CreateTcpChannel (name' port' limit);  	#if CLR_2_0 || CLR_4_0  	ChannelServices.RegisterChannel (channel' false);  	#else  							ChannelServices.RegisterChannel( channel ); #endif  	break;  } catch (Exception e) {  	log.Error ("Failed to create/register channel"' e);  	System.Threading.Thread.Sleep (300);  }  
Magic Number,NUnit.Util,ServerUtilities,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ServerUtilities.cs,GetTcpChannel,The following statement contains a magic number: System.Threading.Thread.Sleep (300);  
Magic Number,NUnit.Util,TestAgency,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\TestAgency.cs,Stop,The following statement contains a magic number: foreach (AgentRecord r in agentData) {  	if (!r.Process.HasExited) {  		if (r.Agent != null) {  			r.Agent.Stop ();  			r.Process.WaitForExit (10000);  		}  		if (!r.Process.HasExited)  			r.Process.Kill ();  	}  }  
Magic Number,NUnit.Util,TestAgency,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\TestAgency.cs,Stop,The following statement contains a magic number: if (!r.Process.HasExited) {  	if (r.Agent != null) {  		r.Agent.Stop ();  		r.Process.WaitForExit (10000);  	}  	if (!r.Process.HasExited)  		r.Process.Kill ();  }  
Magic Number,NUnit.Util,TestAgency,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\TestAgency.cs,Stop,The following statement contains a magic number: if (r.Agent != null) {  	r.Agent.Stop ();  	r.Process.WaitForExit (10000);  }  
Magic Number,NUnit.Util,TestAgency,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\TestAgency.cs,Stop,The following statement contains a magic number: r.Process.WaitForExit (10000);  
Magic Number,NUnit.Util,TestAgency,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\TestAgency.cs,LaunchAgentProcess,The following statement contains a magic number: switch (targetRuntime.Runtime) {  case RuntimeType.Mono:  	p.StartInfo.FileName = NUnitConfiguration.MonoExePath;  	string monoOptions = "--runtime=v" + targetRuntime.ClrVersion.ToString (3);  	if (enableDebug)  		monoOptions += " --debug";  	p.StartInfo.Arguments = string.Format ("{0} \"{1}\" {2}"' monoOptions' agentExePath' arglist);  	break;  case RuntimeType.Net:  	p.StartInfo.FileName = agentExePath;  	if (targetRuntime.ClrVersion.Build < 0)  		targetRuntime = RuntimeFramework.GetBestAvailableFramework (targetRuntime);  	string envVar = "v" + targetRuntime.ClrVersion.ToString (3);  	p.StartInfo.EnvironmentVariables ["COMPLUS_Version"] = envVar;  	p.StartInfo.Arguments = arglist;  	break;  default:  	p.StartInfo.FileName = agentExePath;  	p.StartInfo.Arguments = arglist;  	break;  }  
Magic Number,NUnit.Util,TestAgency,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\TestAgency.cs,LaunchAgentProcess,The following statement contains a magic number: switch (targetRuntime.Runtime) {  case RuntimeType.Mono:  	p.StartInfo.FileName = NUnitConfiguration.MonoExePath;  	string monoOptions = "--runtime=v" + targetRuntime.ClrVersion.ToString (3);  	if (enableDebug)  		monoOptions += " --debug";  	p.StartInfo.Arguments = string.Format ("{0} \"{1}\" {2}"' monoOptions' agentExePath' arglist);  	break;  case RuntimeType.Net:  	p.StartInfo.FileName = agentExePath;  	if (targetRuntime.ClrVersion.Build < 0)  		targetRuntime = RuntimeFramework.GetBestAvailableFramework (targetRuntime);  	string envVar = "v" + targetRuntime.ClrVersion.ToString (3);  	p.StartInfo.EnvironmentVariables ["COMPLUS_Version"] = envVar;  	p.StartInfo.Arguments = arglist;  	break;  default:  	p.StartInfo.FileName = agentExePath;  	p.StartInfo.Arguments = arglist;  	break;  }  
Magic Number,NUnit.Util,TestAgency,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\TestAgency.cs,GetNUnitBinDirectory,The following statement contains a magic number: if ((Environment.Version.Major >= 2) == (v.Major >= 2))  	return dir;  
Magic Number,NUnit.Util,TestAgency,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\Services\TestAgency.cs,GetNUnitBinDirectory,The following statement contains a magic number: if ((Environment.Version.Major >= 2) == (v.Major >= 2))  	return dir;  
Magic Number,NUnit.Util,TestLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\TestLoader.cs,InstallWatcher,The following statement contains a magic number: if (watcher != null) {  	watcher.Stop ();  	watcher.FreeResources ();  	watcher.Setup (1000' TestProject.ActiveConfig.Assemblies.ToArray ());  	watcher.AssemblyChanged += new AssemblyChangedHandler (OnTestChanged);  	watcher.Start ();  }  
Magic Number,NUnit.Util,TestLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\TestLoader.cs,InstallWatcher,The following statement contains a magic number: watcher.Setup (1000' TestProject.ActiveConfig.Assemblies.ToArray ());  
Magic Number,NUnit.Util,TestResultItem,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\TestResultItem.cs,ToString,The following statement contains a magic number: if (message.Length > 64000)  	return string.Format ("{0}:{1}{2}"' testName' Environment.NewLine' message.Substring (0' 64000));  
Magic Number,NUnit.Util,TestResultItem,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\TestResultItem.cs,ToString,The following statement contains a magic number: if (message.Length > 64000)  	return string.Format ("{0}:{1}{2}"' testName' Environment.NewLine' message.Substring (0' 64000));  
Magic Number,NUnit.Util,TestResultItem,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\TestResultItem.cs,ToString,The following statement contains a magic number: return string.Format ("{0}:{1}{2}"' testName' Environment.NewLine' message.Substring (0' 64000));  
Magic Number,NUnit.Util,TestResultItem,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\TestResultItem.cs,GetToolTipMessage,The following statement contains a magic number: return (ReplaceTabs (GetMessage ()' 8));  
Magic Number,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The following statement contains a magic number: foreach (XmlElement configNode in nodes) {  	if (configNode.Name != "PropertyGroup")  		continue;  	string configurationName = null;  	XmlAttribute conditionAttribute = configNode.Attributes ["Condition"];  	if (conditionAttribute != null) {  		string condition = conditionAttribute.Value;  		if (condition.IndexOf ("$(Configuration)") >= 0) {  			int start = condition.IndexOf ("==");  			if (start >= 0) {  				configurationName = condition.Substring (start + 2).Trim (new char[] {  					' ''  					'\''  				});  				if (configurationName.EndsWith ("|AnyCPU"))  					configurationName = configurationName.Substring (0' configurationName.Length - 7);  			}  		}  	}  	XmlElement outputPathElement = (XmlElement)configNode.SelectSingleNode ("msbuild:OutputPath"' namespaceManager);  	string outputPath = null;  	if (outputPathElement != null)  		outputPath = outputPathElement.InnerText;  	if (configurationName == null) {  		commonOutputPath = outputPath;  		continue;  	}  	if (outputPath == null)  		outputPath = commonOutputPath;  	if (outputPath == null)  		continue;  	string outputDirectory = Path.Combine (projectDirectory' outputPath);  	string assemblyPath = Path.Combine (outputDirectory' assemblyName);  	VSProjectConfig config = new VSProjectConfig (configurationName);  	config.Assemblies.Add (assemblyPath);  	configs.Add (config);  }  
Magic Number,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The following statement contains a magic number: foreach (XmlElement configNode in nodes) {  	if (configNode.Name != "PropertyGroup")  		continue;  	string configurationName = null;  	XmlAttribute conditionAttribute = configNode.Attributes ["Condition"];  	if (conditionAttribute != null) {  		string condition = conditionAttribute.Value;  		if (condition.IndexOf ("$(Configuration)") >= 0) {  			int start = condition.IndexOf ("==");  			if (start >= 0) {  				configurationName = condition.Substring (start + 2).Trim (new char[] {  					' ''  					'\''  				});  				if (configurationName.EndsWith ("|AnyCPU"))  					configurationName = configurationName.Substring (0' configurationName.Length - 7);  			}  		}  	}  	XmlElement outputPathElement = (XmlElement)configNode.SelectSingleNode ("msbuild:OutputPath"' namespaceManager);  	string outputPath = null;  	if (outputPathElement != null)  		outputPath = outputPathElement.InnerText;  	if (configurationName == null) {  		commonOutputPath = outputPath;  		continue;  	}  	if (outputPath == null)  		outputPath = commonOutputPath;  	if (outputPath == null)  		continue;  	string outputDirectory = Path.Combine (projectDirectory' outputPath);  	string assemblyPath = Path.Combine (outputDirectory' assemblyName);  	VSProjectConfig config = new VSProjectConfig (configurationName);  	config.Assemblies.Add (assemblyPath);  	configs.Add (config);  }  
Magic Number,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The following statement contains a magic number: if (conditionAttribute != null) {  	string condition = conditionAttribute.Value;  	if (condition.IndexOf ("$(Configuration)") >= 0) {  		int start = condition.IndexOf ("==");  		if (start >= 0) {  			configurationName = condition.Substring (start + 2).Trim (new char[] {  				' ''  				'\''  			});  			if (configurationName.EndsWith ("|AnyCPU"))  				configurationName = configurationName.Substring (0' configurationName.Length - 7);  		}  	}  }  
Magic Number,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The following statement contains a magic number: if (conditionAttribute != null) {  	string condition = conditionAttribute.Value;  	if (condition.IndexOf ("$(Configuration)") >= 0) {  		int start = condition.IndexOf ("==");  		if (start >= 0) {  			configurationName = condition.Substring (start + 2).Trim (new char[] {  				' ''  				'\''  			});  			if (configurationName.EndsWith ("|AnyCPU"))  				configurationName = configurationName.Substring (0' configurationName.Length - 7);  		}  	}  }  
Magic Number,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The following statement contains a magic number: if (condition.IndexOf ("$(Configuration)") >= 0) {  	int start = condition.IndexOf ("==");  	if (start >= 0) {  		configurationName = condition.Substring (start + 2).Trim (new char[] {  			' ''  			'\''  		});  		if (configurationName.EndsWith ("|AnyCPU"))  			configurationName = configurationName.Substring (0' configurationName.Length - 7);  	}  }  
Magic Number,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The following statement contains a magic number: if (condition.IndexOf ("$(Configuration)") >= 0) {  	int start = condition.IndexOf ("==");  	if (start >= 0) {  		configurationName = condition.Substring (start + 2).Trim (new char[] {  			' ''  			'\''  		});  		if (configurationName.EndsWith ("|AnyCPU"))  			configurationName = configurationName.Substring (0' configurationName.Length - 7);  	}  }  
Magic Number,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The following statement contains a magic number: if (start >= 0) {  	configurationName = condition.Substring (start + 2).Trim (new char[] {  		' ''  		'\''  	});  	if (configurationName.EndsWith ("|AnyCPU"))  		configurationName = configurationName.Substring (0' configurationName.Length - 7);  }  
Magic Number,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The following statement contains a magic number: if (start >= 0) {  	configurationName = condition.Substring (start + 2).Trim (new char[] {  		' ''  		'\''  	});  	if (configurationName.EndsWith ("|AnyCPU"))  		configurationName = configurationName.Substring (0' configurationName.Length - 7);  }  
Magic Number,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The following statement contains a magic number: configurationName = condition.Substring (start + 2).Trim (new char[] {  	' ''  	'\''  });  
Magic Number,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The following statement contains a magic number: if (configurationName.EndsWith ("|AnyCPU"))  	configurationName = configurationName.Substring (0' configurationName.Length - 7);  
Magic Number,NUnit.Util,VSProject,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\VSProject.cs,LoadMSBuildProject,The following statement contains a magic number: configurationName = configurationName.Substring (0' configurationName.Length - 7);  
Magic Number,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The following statement contains a magic number: for (int x = 0; x < encodedChars.Length; x++) {  	char currentChar = encodedChars [x];  	//unprintable characters are below 0x20 in Unicode tables  	//some control characters are acceptable. (carriage return 0x0D' line feed 0x0A' horizontal tab 0x09)  	if (currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13)) {  		//save the array index for later replacement.  		pos.Add (x);  	}  }  
Magic Number,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The following statement contains a magic number: for (int x = 0; x < encodedChars.Length; x++) {  	char currentChar = encodedChars [x];  	//unprintable characters are below 0x20 in Unicode tables  	//some control characters are acceptable. (carriage return 0x0D' line feed 0x0A' horizontal tab 0x09)  	if (currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13)) {  		//save the array index for later replacement.  		pos.Add (x);  	}  }  
Magic Number,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The following statement contains a magic number: for (int x = 0; x < encodedChars.Length; x++) {  	char currentChar = encodedChars [x];  	//unprintable characters are below 0x20 in Unicode tables  	//some control characters are acceptable. (carriage return 0x0D' line feed 0x0A' horizontal tab 0x09)  	if (currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13)) {  		//save the array index for later replacement.  		pos.Add (x);  	}  }  
Magic Number,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The following statement contains a magic number: for (int x = 0; x < encodedChars.Length; x++) {  	char currentChar = encodedChars [x];  	//unprintable characters are below 0x20 in Unicode tables  	//some control characters are acceptable. (carriage return 0x0D' line feed 0x0A' horizontal tab 0x09)  	if (currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13)) {  		//save the array index for later replacement.  		pos.Add (x);  	}  }  
Magic Number,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The following statement contains a magic number: if (currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13)) {  	//save the array index for later replacement.  	pos.Add (x);  }  
Magic Number,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The following statement contains a magic number: if (currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13)) {  	//save the array index for later replacement.  	pos.Add (x);  }  
Magic Number,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The following statement contains a magic number: if (currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13)) {  	//save the array index for later replacement.  	pos.Add (x);  }  
Magic Number,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,CharacterSafeString,The following statement contains a magic number: if (currentChar < 32 && (currentChar != 9 && currentChar != 10 && currentChar != 13)) {  	//save the array index for later replacement.  	pos.Add (x);  }  
Magic Number,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,WriteCData,The following statement contains a magic number: while (true) {  	int illegal = text.IndexOf ("]]>"' start);  	if (illegal < 0)  		break;  	xmlWriter.WriteCData (text.Substring (start' illegal - start + 2));  	start = illegal + 2;  	if (start >= text.Length)  		return;  }  
Magic Number,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,WriteCData,The following statement contains a magic number: while (true) {  	int illegal = text.IndexOf ("]]>"' start);  	if (illegal < 0)  		break;  	xmlWriter.WriteCData (text.Substring (start' illegal - start + 2));  	start = illegal + 2;  	if (start >= text.Length)  		return;  }  
Magic Number,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,WriteCData,The following statement contains a magic number: xmlWriter.WriteCData (text.Substring (start' illegal - start + 2));  
Magic Number,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,WriteCData,The following statement contains a magic number: start = illegal + 2;  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length < 2) {  	return 0;  } else if (opt.Length > 2) {  	c = opt.ToCharArray (0' 3);  	if (c [0] == '-' && c [1] == '-' && IsOptionNameChar (c [2]))  		return 2;  } else {  	c = opt.ToCharArray (0' 2);  }  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length < 2) {  	return 0;  } else if (opt.Length > 2) {  	c = opt.ToCharArray (0' 3);  	if (c [0] == '-' && c [1] == '-' && IsOptionNameChar (c [2]))  		return 2;  } else {  	c = opt.ToCharArray (0' 2);  }  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length < 2) {  	return 0;  } else if (opt.Length > 2) {  	c = opt.ToCharArray (0' 3);  	if (c [0] == '-' && c [1] == '-' && IsOptionNameChar (c [2]))  		return 2;  } else {  	c = opt.ToCharArray (0' 2);  }  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length < 2) {  	return 0;  } else if (opt.Length > 2) {  	c = opt.ToCharArray (0' 3);  	if (c [0] == '-' && c [1] == '-' && IsOptionNameChar (c [2]))  		return 2;  } else {  	c = opt.ToCharArray (0' 2);  }  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length < 2) {  	return 0;  } else if (opt.Length > 2) {  	c = opt.ToCharArray (0' 3);  	if (c [0] == '-' && c [1] == '-' && IsOptionNameChar (c [2]))  		return 2;  } else {  	c = opt.ToCharArray (0' 2);  }  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length < 2) {  	return 0;  } else if (opt.Length > 2) {  	c = opt.ToCharArray (0' 3);  	if (c [0] == '-' && c [1] == '-' && IsOptionNameChar (c [2]))  		return 2;  } else {  	c = opt.ToCharArray (0' 2);  }  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length > 2) {  	c = opt.ToCharArray (0' 3);  	if (c [0] == '-' && c [1] == '-' && IsOptionNameChar (c [2]))  		return 2;  } else {  	c = opt.ToCharArray (0' 2);  }  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length > 2) {  	c = opt.ToCharArray (0' 3);  	if (c [0] == '-' && c [1] == '-' && IsOptionNameChar (c [2]))  		return 2;  } else {  	c = opt.ToCharArray (0' 2);  }  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length > 2) {  	c = opt.ToCharArray (0' 3);  	if (c [0] == '-' && c [1] == '-' && IsOptionNameChar (c [2]))  		return 2;  } else {  	c = opt.ToCharArray (0' 2);  }  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length > 2) {  	c = opt.ToCharArray (0' 3);  	if (c [0] == '-' && c [1] == '-' && IsOptionNameChar (c [2]))  		return 2;  } else {  	c = opt.ToCharArray (0' 2);  }  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (opt.Length > 2) {  	c = opt.ToCharArray (0' 3);  	if (c [0] == '-' && c [1] == '-' && IsOptionNameChar (c [2]))  		return 2;  } else {  	c = opt.ToCharArray (0' 2);  }  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: c = opt.ToCharArray (0' 3);  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (c [0] == '-' && c [1] == '-' && IsOptionNameChar (c [2]))  	return 2;  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: if (c [0] == '-' && c [1] == '-' && IsOptionNameChar (c [2]))  	return 2;  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: return 2;  
Magic Number,Codeblast,CommandLineOptions,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\CommandLineOptions.cs,IsOption,The following statement contains a magic number: c = opt.ToCharArray (0' 2);  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertVSSolution,The following statement contains a magic number: using (StreamReader reader = new StreamReader (path)) {  	char[] delims =  {  		'=''  		'''  	};  	char[] trimchars =  {  		' ''  		'"'  	};  	string buildMarker = ".Build.0 =";  	Hashtable projectLookup = new Hashtable ();  	string line = reader.ReadLine ();  	while (line != null) {  		if (line.StartsWith ("Project(")) {  			string[] parts = line.Split (delims);  			string vsProjectPath = parts [2].Trim (trimchars);  			string vsProjectGuid = parts [3].Trim (trimchars);  			if (VSProject.IsProjectFile (vsProjectPath))  				projectLookup [vsProjectGuid] = new VSProject (Path.Combine (solutionDirectory' vsProjectPath));  		} else if (line.IndexOf (buildMarker) >= 0) {  			line = line.Trim ();  			int endBrace = line.IndexOf ('}');  			string vsProjectGuid = line.Substring (0' endBrace + 1);  			VSProject vsProject = projectLookup [vsProjectGuid] as VSProject;  			if (vsProject != null) {  				line = line.Substring (endBrace + 2);  				int split = line.IndexOf (buildMarker) + 1;  				string solutionConfig = line.Substring (0' split - 1);  				int bar = solutionConfig.IndexOf ('|');  				if (bar >= 0)  					solutionConfig = solutionConfig.Substring (0' bar);  				string projectConfig = line.Substring (split + buildMarker.Length);  				if (vsProject.Configs [projectConfig] == null) {  					bar = projectConfig.IndexOf ('|');  					if (bar >= 0)  						projectConfig = projectConfig.Substring (0' bar);  				}  				if (project.Configs [solutionConfig] == null)  					project.Configs.Add (new ProjectConfig (solutionConfig));  				foreach (string assembly in vsProject.Configs [projectConfig].Assemblies)  					if (!project.Configs [solutionConfig].Assemblies.Contains (assembly))  						project.Configs [solutionConfig].Assemblies.Add (assembly);  				//if (VSProject.IsProjectFile(vsProjectPath))  				//    project.Add(new VSProject(Path.Combine(solutionDirectory' vsProjectPath)));  			}  		}  		line = reader.ReadLine ();  	}  	project.IsDirty = false;  	return project;  }  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertVSSolution,The following statement contains a magic number: using (StreamReader reader = new StreamReader (path)) {  	char[] delims =  {  		'=''  		'''  	};  	char[] trimchars =  {  		' ''  		'"'  	};  	string buildMarker = ".Build.0 =";  	Hashtable projectLookup = new Hashtable ();  	string line = reader.ReadLine ();  	while (line != null) {  		if (line.StartsWith ("Project(")) {  			string[] parts = line.Split (delims);  			string vsProjectPath = parts [2].Trim (trimchars);  			string vsProjectGuid = parts [3].Trim (trimchars);  			if (VSProject.IsProjectFile (vsProjectPath))  				projectLookup [vsProjectGuid] = new VSProject (Path.Combine (solutionDirectory' vsProjectPath));  		} else if (line.IndexOf (buildMarker) >= 0) {  			line = line.Trim ();  			int endBrace = line.IndexOf ('}');  			string vsProjectGuid = line.Substring (0' endBrace + 1);  			VSProject vsProject = projectLookup [vsProjectGuid] as VSProject;  			if (vsProject != null) {  				line = line.Substring (endBrace + 2);  				int split = line.IndexOf (buildMarker) + 1;  				string solutionConfig = line.Substring (0' split - 1);  				int bar = solutionConfig.IndexOf ('|');  				if (bar >= 0)  					solutionConfig = solutionConfig.Substring (0' bar);  				string projectConfig = line.Substring (split + buildMarker.Length);  				if (vsProject.Configs [projectConfig] == null) {  					bar = projectConfig.IndexOf ('|');  					if (bar >= 0)  						projectConfig = projectConfig.Substring (0' bar);  				}  				if (project.Configs [solutionConfig] == null)  					project.Configs.Add (new ProjectConfig (solutionConfig));  				foreach (string assembly in vsProject.Configs [projectConfig].Assemblies)  					if (!project.Configs [solutionConfig].Assemblies.Contains (assembly))  						project.Configs [solutionConfig].Assemblies.Add (assembly);  				//if (VSProject.IsProjectFile(vsProjectPath))  				//    project.Add(new VSProject(Path.Combine(solutionDirectory' vsProjectPath)));  			}  		}  		line = reader.ReadLine ();  	}  	project.IsDirty = false;  	return project;  }  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertVSSolution,The following statement contains a magic number: using (StreamReader reader = new StreamReader (path)) {  	char[] delims =  {  		'=''  		'''  	};  	char[] trimchars =  {  		' ''  		'"'  	};  	string buildMarker = ".Build.0 =";  	Hashtable projectLookup = new Hashtable ();  	string line = reader.ReadLine ();  	while (line != null) {  		if (line.StartsWith ("Project(")) {  			string[] parts = line.Split (delims);  			string vsProjectPath = parts [2].Trim (trimchars);  			string vsProjectGuid = parts [3].Trim (trimchars);  			if (VSProject.IsProjectFile (vsProjectPath))  				projectLookup [vsProjectGuid] = new VSProject (Path.Combine (solutionDirectory' vsProjectPath));  		} else if (line.IndexOf (buildMarker) >= 0) {  			line = line.Trim ();  			int endBrace = line.IndexOf ('}');  			string vsProjectGuid = line.Substring (0' endBrace + 1);  			VSProject vsProject = projectLookup [vsProjectGuid] as VSProject;  			if (vsProject != null) {  				line = line.Substring (endBrace + 2);  				int split = line.IndexOf (buildMarker) + 1;  				string solutionConfig = line.Substring (0' split - 1);  				int bar = solutionConfig.IndexOf ('|');  				if (bar >= 0)  					solutionConfig = solutionConfig.Substring (0' bar);  				string projectConfig = line.Substring (split + buildMarker.Length);  				if (vsProject.Configs [projectConfig] == null) {  					bar = projectConfig.IndexOf ('|');  					if (bar >= 0)  						projectConfig = projectConfig.Substring (0' bar);  				}  				if (project.Configs [solutionConfig] == null)  					project.Configs.Add (new ProjectConfig (solutionConfig));  				foreach (string assembly in vsProject.Configs [projectConfig].Assemblies)  					if (!project.Configs [solutionConfig].Assemblies.Contains (assembly))  						project.Configs [solutionConfig].Assemblies.Add (assembly);  				//if (VSProject.IsProjectFile(vsProjectPath))  				//    project.Add(new VSProject(Path.Combine(solutionDirectory' vsProjectPath)));  			}  		}  		line = reader.ReadLine ();  	}  	project.IsDirty = false;  	return project;  }  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertVSSolution,The following statement contains a magic number: while (line != null) {  	if (line.StartsWith ("Project(")) {  		string[] parts = line.Split (delims);  		string vsProjectPath = parts [2].Trim (trimchars);  		string vsProjectGuid = parts [3].Trim (trimchars);  		if (VSProject.IsProjectFile (vsProjectPath))  			projectLookup [vsProjectGuid] = new VSProject (Path.Combine (solutionDirectory' vsProjectPath));  	} else if (line.IndexOf (buildMarker) >= 0) {  		line = line.Trim ();  		int endBrace = line.IndexOf ('}');  		string vsProjectGuid = line.Substring (0' endBrace + 1);  		VSProject vsProject = projectLookup [vsProjectGuid] as VSProject;  		if (vsProject != null) {  			line = line.Substring (endBrace + 2);  			int split = line.IndexOf (buildMarker) + 1;  			string solutionConfig = line.Substring (0' split - 1);  			int bar = solutionConfig.IndexOf ('|');  			if (bar >= 0)  				solutionConfig = solutionConfig.Substring (0' bar);  			string projectConfig = line.Substring (split + buildMarker.Length);  			if (vsProject.Configs [projectConfig] == null) {  				bar = projectConfig.IndexOf ('|');  				if (bar >= 0)  					projectConfig = projectConfig.Substring (0' bar);  			}  			if (project.Configs [solutionConfig] == null)  				project.Configs.Add (new ProjectConfig (solutionConfig));  			foreach (string assembly in vsProject.Configs [projectConfig].Assemblies)  				if (!project.Configs [solutionConfig].Assemblies.Contains (assembly))  					project.Configs [solutionConfig].Assemblies.Add (assembly);  			//if (VSProject.IsProjectFile(vsProjectPath))  			//    project.Add(new VSProject(Path.Combine(solutionDirectory' vsProjectPath)));  		}  	}  	line = reader.ReadLine ();  }  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertVSSolution,The following statement contains a magic number: while (line != null) {  	if (line.StartsWith ("Project(")) {  		string[] parts = line.Split (delims);  		string vsProjectPath = parts [2].Trim (trimchars);  		string vsProjectGuid = parts [3].Trim (trimchars);  		if (VSProject.IsProjectFile (vsProjectPath))  			projectLookup [vsProjectGuid] = new VSProject (Path.Combine (solutionDirectory' vsProjectPath));  	} else if (line.IndexOf (buildMarker) >= 0) {  		line = line.Trim ();  		int endBrace = line.IndexOf ('}');  		string vsProjectGuid = line.Substring (0' endBrace + 1);  		VSProject vsProject = projectLookup [vsProjectGuid] as VSProject;  		if (vsProject != null) {  			line = line.Substring (endBrace + 2);  			int split = line.IndexOf (buildMarker) + 1;  			string solutionConfig = line.Substring (0' split - 1);  			int bar = solutionConfig.IndexOf ('|');  			if (bar >= 0)  				solutionConfig = solutionConfig.Substring (0' bar);  			string projectConfig = line.Substring (split + buildMarker.Length);  			if (vsProject.Configs [projectConfig] == null) {  				bar = projectConfig.IndexOf ('|');  				if (bar >= 0)  					projectConfig = projectConfig.Substring (0' bar);  			}  			if (project.Configs [solutionConfig] == null)  				project.Configs.Add (new ProjectConfig (solutionConfig));  			foreach (string assembly in vsProject.Configs [projectConfig].Assemblies)  				if (!project.Configs [solutionConfig].Assemblies.Contains (assembly))  					project.Configs [solutionConfig].Assemblies.Add (assembly);  			//if (VSProject.IsProjectFile(vsProjectPath))  			//    project.Add(new VSProject(Path.Combine(solutionDirectory' vsProjectPath)));  		}  	}  	line = reader.ReadLine ();  }  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertVSSolution,The following statement contains a magic number: while (line != null) {  	if (line.StartsWith ("Project(")) {  		string[] parts = line.Split (delims);  		string vsProjectPath = parts [2].Trim (trimchars);  		string vsProjectGuid = parts [3].Trim (trimchars);  		if (VSProject.IsProjectFile (vsProjectPath))  			projectLookup [vsProjectGuid] = new VSProject (Path.Combine (solutionDirectory' vsProjectPath));  	} else if (line.IndexOf (buildMarker) >= 0) {  		line = line.Trim ();  		int endBrace = line.IndexOf ('}');  		string vsProjectGuid = line.Substring (0' endBrace + 1);  		VSProject vsProject = projectLookup [vsProjectGuid] as VSProject;  		if (vsProject != null) {  			line = line.Substring (endBrace + 2);  			int split = line.IndexOf (buildMarker) + 1;  			string solutionConfig = line.Substring (0' split - 1);  			int bar = solutionConfig.IndexOf ('|');  			if (bar >= 0)  				solutionConfig = solutionConfig.Substring (0' bar);  			string projectConfig = line.Substring (split + buildMarker.Length);  			if (vsProject.Configs [projectConfig] == null) {  				bar = projectConfig.IndexOf ('|');  				if (bar >= 0)  					projectConfig = projectConfig.Substring (0' bar);  			}  			if (project.Configs [solutionConfig] == null)  				project.Configs.Add (new ProjectConfig (solutionConfig));  			foreach (string assembly in vsProject.Configs [projectConfig].Assemblies)  				if (!project.Configs [solutionConfig].Assemblies.Contains (assembly))  					project.Configs [solutionConfig].Assemblies.Add (assembly);  			//if (VSProject.IsProjectFile(vsProjectPath))  			//    project.Add(new VSProject(Path.Combine(solutionDirectory' vsProjectPath)));  		}  	}  	line = reader.ReadLine ();  }  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertVSSolution,The following statement contains a magic number: if (line.StartsWith ("Project(")) {  	string[] parts = line.Split (delims);  	string vsProjectPath = parts [2].Trim (trimchars);  	string vsProjectGuid = parts [3].Trim (trimchars);  	if (VSProject.IsProjectFile (vsProjectPath))  		projectLookup [vsProjectGuid] = new VSProject (Path.Combine (solutionDirectory' vsProjectPath));  } else if (line.IndexOf (buildMarker) >= 0) {  	line = line.Trim ();  	int endBrace = line.IndexOf ('}');  	string vsProjectGuid = line.Substring (0' endBrace + 1);  	VSProject vsProject = projectLookup [vsProjectGuid] as VSProject;  	if (vsProject != null) {  		line = line.Substring (endBrace + 2);  		int split = line.IndexOf (buildMarker) + 1;  		string solutionConfig = line.Substring (0' split - 1);  		int bar = solutionConfig.IndexOf ('|');  		if (bar >= 0)  			solutionConfig = solutionConfig.Substring (0' bar);  		string projectConfig = line.Substring (split + buildMarker.Length);  		if (vsProject.Configs [projectConfig] == null) {  			bar = projectConfig.IndexOf ('|');  			if (bar >= 0)  				projectConfig = projectConfig.Substring (0' bar);  		}  		if (project.Configs [solutionConfig] == null)  			project.Configs.Add (new ProjectConfig (solutionConfig));  		foreach (string assembly in vsProject.Configs [projectConfig].Assemblies)  			if (!project.Configs [solutionConfig].Assemblies.Contains (assembly))  				project.Configs [solutionConfig].Assemblies.Add (assembly);  		//if (VSProject.IsProjectFile(vsProjectPath))  		//    project.Add(new VSProject(Path.Combine(solutionDirectory' vsProjectPath)));  	}  }  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertVSSolution,The following statement contains a magic number: if (line.StartsWith ("Project(")) {  	string[] parts = line.Split (delims);  	string vsProjectPath = parts [2].Trim (trimchars);  	string vsProjectGuid = parts [3].Trim (trimchars);  	if (VSProject.IsProjectFile (vsProjectPath))  		projectLookup [vsProjectGuid] = new VSProject (Path.Combine (solutionDirectory' vsProjectPath));  } else if (line.IndexOf (buildMarker) >= 0) {  	line = line.Trim ();  	int endBrace = line.IndexOf ('}');  	string vsProjectGuid = line.Substring (0' endBrace + 1);  	VSProject vsProject = projectLookup [vsProjectGuid] as VSProject;  	if (vsProject != null) {  		line = line.Substring (endBrace + 2);  		int split = line.IndexOf (buildMarker) + 1;  		string solutionConfig = line.Substring (0' split - 1);  		int bar = solutionConfig.IndexOf ('|');  		if (bar >= 0)  			solutionConfig = solutionConfig.Substring (0' bar);  		string projectConfig = line.Substring (split + buildMarker.Length);  		if (vsProject.Configs [projectConfig] == null) {  			bar = projectConfig.IndexOf ('|');  			if (bar >= 0)  				projectConfig = projectConfig.Substring (0' bar);  		}  		if (project.Configs [solutionConfig] == null)  			project.Configs.Add (new ProjectConfig (solutionConfig));  		foreach (string assembly in vsProject.Configs [projectConfig].Assemblies)  			if (!project.Configs [solutionConfig].Assemblies.Contains (assembly))  				project.Configs [solutionConfig].Assemblies.Add (assembly);  		//if (VSProject.IsProjectFile(vsProjectPath))  		//    project.Add(new VSProject(Path.Combine(solutionDirectory' vsProjectPath)));  	}  }  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertVSSolution,The following statement contains a magic number: if (line.StartsWith ("Project(")) {  	string[] parts = line.Split (delims);  	string vsProjectPath = parts [2].Trim (trimchars);  	string vsProjectGuid = parts [3].Trim (trimchars);  	if (VSProject.IsProjectFile (vsProjectPath))  		projectLookup [vsProjectGuid] = new VSProject (Path.Combine (solutionDirectory' vsProjectPath));  } else if (line.IndexOf (buildMarker) >= 0) {  	line = line.Trim ();  	int endBrace = line.IndexOf ('}');  	string vsProjectGuid = line.Substring (0' endBrace + 1);  	VSProject vsProject = projectLookup [vsProjectGuid] as VSProject;  	if (vsProject != null) {  		line = line.Substring (endBrace + 2);  		int split = line.IndexOf (buildMarker) + 1;  		string solutionConfig = line.Substring (0' split - 1);  		int bar = solutionConfig.IndexOf ('|');  		if (bar >= 0)  			solutionConfig = solutionConfig.Substring (0' bar);  		string projectConfig = line.Substring (split + buildMarker.Length);  		if (vsProject.Configs [projectConfig] == null) {  			bar = projectConfig.IndexOf ('|');  			if (bar >= 0)  				projectConfig = projectConfig.Substring (0' bar);  		}  		if (project.Configs [solutionConfig] == null)  			project.Configs.Add (new ProjectConfig (solutionConfig));  		foreach (string assembly in vsProject.Configs [projectConfig].Assemblies)  			if (!project.Configs [solutionConfig].Assemblies.Contains (assembly))  				project.Configs [solutionConfig].Assemblies.Add (assembly);  		//if (VSProject.IsProjectFile(vsProjectPath))  		//    project.Add(new VSProject(Path.Combine(solutionDirectory' vsProjectPath)));  	}  }  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertVSSolution,The following statement contains a magic number: if (line.IndexOf (buildMarker) >= 0) {  	line = line.Trim ();  	int endBrace = line.IndexOf ('}');  	string vsProjectGuid = line.Substring (0' endBrace + 1);  	VSProject vsProject = projectLookup [vsProjectGuid] as VSProject;  	if (vsProject != null) {  		line = line.Substring (endBrace + 2);  		int split = line.IndexOf (buildMarker) + 1;  		string solutionConfig = line.Substring (0' split - 1);  		int bar = solutionConfig.IndexOf ('|');  		if (bar >= 0)  			solutionConfig = solutionConfig.Substring (0' bar);  		string projectConfig = line.Substring (split + buildMarker.Length);  		if (vsProject.Configs [projectConfig] == null) {  			bar = projectConfig.IndexOf ('|');  			if (bar >= 0)  				projectConfig = projectConfig.Substring (0' bar);  		}  		if (project.Configs [solutionConfig] == null)  			project.Configs.Add (new ProjectConfig (solutionConfig));  		foreach (string assembly in vsProject.Configs [projectConfig].Assemblies)  			if (!project.Configs [solutionConfig].Assemblies.Contains (assembly))  				project.Configs [solutionConfig].Assemblies.Add (assembly);  		//if (VSProject.IsProjectFile(vsProjectPath))  		//    project.Add(new VSProject(Path.Combine(solutionDirectory' vsProjectPath)));  	}  }  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertVSSolution,The following statement contains a magic number: if (vsProject != null) {  	line = line.Substring (endBrace + 2);  	int split = line.IndexOf (buildMarker) + 1;  	string solutionConfig = line.Substring (0' split - 1);  	int bar = solutionConfig.IndexOf ('|');  	if (bar >= 0)  		solutionConfig = solutionConfig.Substring (0' bar);  	string projectConfig = line.Substring (split + buildMarker.Length);  	if (vsProject.Configs [projectConfig] == null) {  		bar = projectConfig.IndexOf ('|');  		if (bar >= 0)  			projectConfig = projectConfig.Substring (0' bar);  	}  	if (project.Configs [solutionConfig] == null)  		project.Configs.Add (new ProjectConfig (solutionConfig));  	foreach (string assembly in vsProject.Configs [projectConfig].Assemblies)  		if (!project.Configs [solutionConfig].Assemblies.Contains (assembly))  			project.Configs [solutionConfig].Assemblies.Add (assembly);  	//if (VSProject.IsProjectFile(vsProjectPath))  	//    project.Add(new VSProject(Path.Combine(solutionDirectory' vsProjectPath)));  }  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,ConvertVSSolution,The following statement contains a magic number: line = line.Substring (endBrace + 2);  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,LegacyConvertVSSolution,The following statement contains a magic number: using (StreamReader reader = new StreamReader (path)) {  	char[] delims =  {  		'=''  		'''  	};  	char[] trimchars =  {  		' ''  		'"'  	};  	string line = reader.ReadLine ();  	while (line != null) {  		if (line.StartsWith ("Project(")) {  			string[] parts = line.Split (delims);  			string vsProjectPath = parts [2].Trim (trimchars);  			if (VSProject.IsProjectFile (vsProjectPath))  				project.Add (new VSProject (Path.Combine (solutionDirectory' vsProjectPath)));  		}  		line = reader.ReadLine ();  	}  	project.IsDirty = false;  	return project;  }  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,LegacyConvertVSSolution,The following statement contains a magic number: while (line != null) {  	if (line.StartsWith ("Project(")) {  		string[] parts = line.Split (delims);  		string vsProjectPath = parts [2].Trim (trimchars);  		if (VSProject.IsProjectFile (vsProjectPath))  			project.Add (new VSProject (Path.Combine (solutionDirectory' vsProjectPath)));  	}  	line = reader.ReadLine ();  }  
Magic Number,NUnit.Util.ProjectConverters,VisualStudioConverter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\ProjectConverters\VisualStudioConverter.cs,LegacyConvertVSSolution,The following statement contains a magic number: if (line.StartsWith ("Project(")) {  	string[] parts = line.Split (delims);  	string vsProjectPath = parts [2].Trim (trimchars);  	if (VSProject.IsProjectFile (vsProjectPath))  		project.Add (new VSProject (Path.Combine (solutionDirectory' vsProjectPath)));  }  
Missing Default,NUnit.Util,XmlResultWriter,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\ClientUtilities\util\XmlResultWriter.cs,WriteResultElement,The following switch statement is missing a default case: switch (result.ResultState) {  case ResultState.Ignored:  case ResultState.NotRunnable:  case ResultState.Skipped:  	WriteReasonElement (result);  	break;  case ResultState.Failure:  case ResultState.Error:  case ResultState.Cancelled:  	if (!result.Test.IsSuite || result.FailureSite == FailureSite.SetUp)  		WriteFailureElement (result);  	break;  case ResultState.Success:  case ResultState.Inconclusive:  	if (result.Message != null)  		WriteReasonElement (result);  	break;  }  
