Implementation smell,Namespace,Class,File,Method,Description
Long Method,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The method has 183 lines of code.
Complex Method,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,Cyclomatic complexity of the method is 34
Long Statement,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The length of the statement  "			Console.WriteLine ("Usage: launcher configfile [--result=filename] [--failed=filename] [-D:var=value] [-val:variable=value] [--retry=number] [--range=from-to] [--test=testname]"); " is 179.
Long Statement,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The length of the statement  "			Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' results.Length' ExecutedTests' FailedTests' SuccessTests' results.Length > 0 ? 100 * SuccessTests / results.Length : 0' BiggerTime)); " is 282.
Long Statement,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The length of the statement  "			Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' TotalTests' TotalExecutedTests' TotalFailedTests' TotalSuccessTests' TotalTests > 0 ? 100 * TotalSuccessTests / TotalTests : 0' TotalBiggerTime)); " is 295.
Long Statement,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,GetErrorMessages,The length of the statement  "	result [0] = string.Format ("Name: {0}\n  Result: {1'-12} Assert Count: {2'-2} Time: {3'5}"' res.Name' res.IsSuccess ? "SUCCESS" : (res.IsFailure ? "FAILURE" : (!res.Executed ? "NOT EXECUTED" : "UNKNOWN"))' res.AssertCount' res.Time); " is 234.
Long Statement,PNUnit.Launcher,Runner,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\Runner.cs,ThreadProc,The length of the statement  "			IPNUnitAgent agent = (IPNUnitAgent)Activator.GetObject (typeof(IPNUnitAgent)' string.Format ("tcp://{0}/{1}"' test.Machine' PNUnit.Framework.Names.PNUnitAgentServiceName)); " is 172.
Long Statement,PNUnit.Launcher,Runner,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\Runner.cs,ThreadProc,The length of the statement  "			PNUnitTestInfo testToRun = new PNUnitTestInfo (test.Name' test.Assembly' test.TestToRun' test.TestParams' this' test.StartBarrier' test.EndBarrier' test.WaitBarriers); " is 167.
Long Statement,PNUnit.Launcher,Runner,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\Runner.cs,NotifyResult,The length of the statement  "	string message = string.Format ("Result for TestGroup {0}' Test {1}: {2}. Time {3} ms. {4}/{5} tests finished. Agent: {6}"' mTestGroup.Name' TestName' result.IsSuccess ? "PASS" : "FAIL"' Environment.TickCount - mInitialTime' count' mLaunchedTests' machine); " is 257.
Complex Conditional,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The conditional expression  "bRetry || ((bFailed && (retryOnFailure > 0) && ((retryCount + 1) < maxRetry))/* so that list time is printed*/)"  is complex.
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: try {  	// Load the test configuration file  	if (args.Length == 0) {  		Console.WriteLine ("Usage: launcher configfile [--result=filename] [--failed=filename] [-D:var=value] [-val:variable=value] [--retry=number] [--range=from-to] [--test=testname]");  		return;  	}  	string configfile = args [0];  	mTestPath = Path.GetDirectoryName (configfile);  	TestGroup group = TestConfLoader.LoadFromFile (configfile' args);  	int startTest = 0;  	int endTest = group.ParallelTests.Length - 1;  	failedfile = Path.Combine (mTestPath' "smokefailed.conf");  	passedfile = Path.Combine (mTestPath' "smokepassed.conf");  	if (args.Length > 1) {  		foreach (string arg in args) {  			if (arg.StartsWith ("--result=")) {  				resultfile = arg.Substring (9);  				resultfile = Path.GetFullPath (resultfile);  			}  			if (arg.StartsWith ("--failed=")) {  				failedfile = arg.Substring (9);  				failedfile = Path.GetFullPath (failedfile);  			}  			if (arg.StartsWith ("--retry=")) {  				retryOnFailure = int.Parse (arg.Substring ("--retry=".Length));  				log.InfoFormat ("Retry on failure activated. {0} retries"' retryOnFailure);  				maxRetry = retryOnFailure;  			}  			if (arg.StartsWith ("--test=")) {  				string testName = arg.Substring ("--test=".Length);  				int index = -1;  				for (int i = 0; i < group.ParallelTests.Length; i++) {  					if (group.ParallelTests [i].Name != testName)  						continue;  					index = i;  					break;  				}  				if (index == -1) {  					Console.WriteLine ("The specified test was not found");  					return;  				}  				startTest = index;  				endTest = index;  			}  			if (arg.StartsWith ("--range=")) {  				string range = arg.Substring ("--range=".Length);  				// now range should be something like xx-xx  				if (range.IndexOf ("-") < 0) {  					Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  					return;  				}  				string[] ranges = range.Split ('-');  				if (ranges.Length != 2) {  					Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  					return;  				}  				startTest = int.Parse (ranges [0]);  				endTest = int.Parse (ranges [1]);  				if ((startTest > endTest) || (startTest < 0) || (startTest > group.ParallelTests.Length - 1)) {  					Console.WriteLine ("Start test must be in a correct test range");  					return;  				}  				if ((endTest < startTest) || (endTest < 0) || (endTest > group.ParallelTests.Length - 1)) {  					Console.WriteLine ("End test must be in a correct test range");  					return;  				}  				log.InfoFormat ("Starting test range [{0}-{1}]"' startTest' endTest);  			}  		}  	}  	if ((group == null) || (group.ParallelTests.Length == 0)) {  		Console.WriteLine ("No tests to run");  		return;  	}  	Hashtable userValues = GetUserValues (args);  	ConfigureRemoting ();  	ArrayList failedGroups = new ArrayList ();  	ArrayList passedGroups = new ArrayList ();  	int testCount = endTest - startTest + 1;  	// Each parallel test is launched sequencially...  	Runner[] runners = new Runner[testCount];  	DateTime beginTimestamp = DateTime.Now;  	for (int i = startTest; i <= endTest;) {  		ParallelTest test = group.ParallelTests [i] as ParallelTest;  		int retryCount = 0;  		bool bRetry = true;  		while (bRetry && retryCount < maxRetry) {  			bRetry = false;  			if (testCount != group.ParallelTests.Length)  				log.InfoFormat ("Test {0} of {1}. {2}/{3}"' i' group.ParallelTests.Length' i - startTest + 1' testCount);  			else  				log.InfoFormat ("Test {0} of {1}"' i + 1' group.ParallelTests.Length);  			Runner runner = new Runner (test' userValues);  			runner.Run ();  			runners [i - startTest] = runner;  			// Wait to finish  			runner.Join ();  			TestResult[] runnerResults = runner.GetTestResults ();  			if (runnerResults == null) {  				log.Info ("Error. Results are NULL");  				++i;  				continue;  			}  			bRetry = RetryTest (runnerResults);  			bool bFailed = FailedTest (runnerResults);  			if (bRetry || ((bFailed && (retryOnFailure > 0) && ((retryCount + 1) < maxRetry))/* so that list time is printed*/)) {  				bRetry = true;  				++retryCount;  				log.Info ("Test failed with retry option' trying again");  				continue;  			}  			if (bFailed) {  				failedGroups.Add (test);  				WriteGroup (failedGroups' failedfile);  			} else {  				passedGroups.Add (test);  				WriteGroup (passedGroups' passedfile);  			}  		}  		// updated at the bottom so it's not affected by retries  		++i;  	}  	DateTime endTimestamp = DateTime.Now;  	// Print the results  	double TotalBiggerTime = 0;  	int TotalTests = 0;  	int TotalExecutedTests = 0;  	int TotalFailedTests = 0;  	int TotalSuccessTests = 0;  	IList failedTests = new ArrayList ();  	int j;  	foreach (Runner runner in runners) {  		int ExecutedTests = 0;  		int FailedTests = 0;  		int SuccessTests = 0;  		double BiggerTime = 0;  		TestResult[] results = runner.GetTestResults ();  		Log (string.Format ("==== Tests Results for Parallel TestGroup {0} ==="' runner.TestGroupName));  		j = 0;  		foreach (TestResult res in results) {  			if (res.Executed)  				++ExecutedTests;  			if (res.IsFailure)  				++FailedTests;  			if (res.IsSuccess)  				++SuccessTests;  			PrintResult (++j' res);  			if (res.Time > BiggerTime)  				BiggerTime = res.Time;  			if (res.IsFailure)  				failedTests.Add (res);  		}  		Log ("Summary:");  		Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' results.Length' ExecutedTests' FailedTests' SuccessTests' results.Length > 0 ? 100 * SuccessTests / results.Length : 0' BiggerTime));  		TotalTests += results.Length;  		TotalExecutedTests += ExecutedTests;  		TotalFailedTests += FailedTests;  		TotalSuccessTests += SuccessTests;  		TotalBiggerTime += BiggerTime;  	}  	// print all failed tests together  	if (failedTests.Count > 0) {  		Log ("==== Failed tests ===");  		for (j = 0; j < failedTests.Count; ++j)  			PrintResult (j' failedTests [j] as PNUnitTestResult);  	}  	if (runners.Length > 1) {  		Log ("Summary for all the parallel tests:");  		Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' TotalTests' TotalExecutedTests' TotalFailedTests' TotalSuccessTests' TotalTests > 0 ? 100 * TotalSuccessTests / TotalTests : 0' TotalBiggerTime));  	}  	TimeSpan elapsedTime = endTimestamp.Subtract (beginTimestamp);  	Log (string.Format ("Launcher execution time: {0} seconds"' elapsedTime.TotalSeconds));  } finally {  	WriteResult (resultfile);  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: try {  	// Load the test configuration file  	if (args.Length == 0) {  		Console.WriteLine ("Usage: launcher configfile [--result=filename] [--failed=filename] [-D:var=value] [-val:variable=value] [--retry=number] [--range=from-to] [--test=testname]");  		return;  	}  	string configfile = args [0];  	mTestPath = Path.GetDirectoryName (configfile);  	TestGroup group = TestConfLoader.LoadFromFile (configfile' args);  	int startTest = 0;  	int endTest = group.ParallelTests.Length - 1;  	failedfile = Path.Combine (mTestPath' "smokefailed.conf");  	passedfile = Path.Combine (mTestPath' "smokepassed.conf");  	if (args.Length > 1) {  		foreach (string arg in args) {  			if (arg.StartsWith ("--result=")) {  				resultfile = arg.Substring (9);  				resultfile = Path.GetFullPath (resultfile);  			}  			if (arg.StartsWith ("--failed=")) {  				failedfile = arg.Substring (9);  				failedfile = Path.GetFullPath (failedfile);  			}  			if (arg.StartsWith ("--retry=")) {  				retryOnFailure = int.Parse (arg.Substring ("--retry=".Length));  				log.InfoFormat ("Retry on failure activated. {0} retries"' retryOnFailure);  				maxRetry = retryOnFailure;  			}  			if (arg.StartsWith ("--test=")) {  				string testName = arg.Substring ("--test=".Length);  				int index = -1;  				for (int i = 0; i < group.ParallelTests.Length; i++) {  					if (group.ParallelTests [i].Name != testName)  						continue;  					index = i;  					break;  				}  				if (index == -1) {  					Console.WriteLine ("The specified test was not found");  					return;  				}  				startTest = index;  				endTest = index;  			}  			if (arg.StartsWith ("--range=")) {  				string range = arg.Substring ("--range=".Length);  				// now range should be something like xx-xx  				if (range.IndexOf ("-") < 0) {  					Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  					return;  				}  				string[] ranges = range.Split ('-');  				if (ranges.Length != 2) {  					Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  					return;  				}  				startTest = int.Parse (ranges [0]);  				endTest = int.Parse (ranges [1]);  				if ((startTest > endTest) || (startTest < 0) || (startTest > group.ParallelTests.Length - 1)) {  					Console.WriteLine ("Start test must be in a correct test range");  					return;  				}  				if ((endTest < startTest) || (endTest < 0) || (endTest > group.ParallelTests.Length - 1)) {  					Console.WriteLine ("End test must be in a correct test range");  					return;  				}  				log.InfoFormat ("Starting test range [{0}-{1}]"' startTest' endTest);  			}  		}  	}  	if ((group == null) || (group.ParallelTests.Length == 0)) {  		Console.WriteLine ("No tests to run");  		return;  	}  	Hashtable userValues = GetUserValues (args);  	ConfigureRemoting ();  	ArrayList failedGroups = new ArrayList ();  	ArrayList passedGroups = new ArrayList ();  	int testCount = endTest - startTest + 1;  	// Each parallel test is launched sequencially...  	Runner[] runners = new Runner[testCount];  	DateTime beginTimestamp = DateTime.Now;  	for (int i = startTest; i <= endTest;) {  		ParallelTest test = group.ParallelTests [i] as ParallelTest;  		int retryCount = 0;  		bool bRetry = true;  		while (bRetry && retryCount < maxRetry) {  			bRetry = false;  			if (testCount != group.ParallelTests.Length)  				log.InfoFormat ("Test {0} of {1}. {2}/{3}"' i' group.ParallelTests.Length' i - startTest + 1' testCount);  			else  				log.InfoFormat ("Test {0} of {1}"' i + 1' group.ParallelTests.Length);  			Runner runner = new Runner (test' userValues);  			runner.Run ();  			runners [i - startTest] = runner;  			// Wait to finish  			runner.Join ();  			TestResult[] runnerResults = runner.GetTestResults ();  			if (runnerResults == null) {  				log.Info ("Error. Results are NULL");  				++i;  				continue;  			}  			bRetry = RetryTest (runnerResults);  			bool bFailed = FailedTest (runnerResults);  			if (bRetry || ((bFailed && (retryOnFailure > 0) && ((retryCount + 1) < maxRetry))/* so that list time is printed*/)) {  				bRetry = true;  				++retryCount;  				log.Info ("Test failed with retry option' trying again");  				continue;  			}  			if (bFailed) {  				failedGroups.Add (test);  				WriteGroup (failedGroups' failedfile);  			} else {  				passedGroups.Add (test);  				WriteGroup (passedGroups' passedfile);  			}  		}  		// updated at the bottom so it's not affected by retries  		++i;  	}  	DateTime endTimestamp = DateTime.Now;  	// Print the results  	double TotalBiggerTime = 0;  	int TotalTests = 0;  	int TotalExecutedTests = 0;  	int TotalFailedTests = 0;  	int TotalSuccessTests = 0;  	IList failedTests = new ArrayList ();  	int j;  	foreach (Runner runner in runners) {  		int ExecutedTests = 0;  		int FailedTests = 0;  		int SuccessTests = 0;  		double BiggerTime = 0;  		TestResult[] results = runner.GetTestResults ();  		Log (string.Format ("==== Tests Results for Parallel TestGroup {0} ==="' runner.TestGroupName));  		j = 0;  		foreach (TestResult res in results) {  			if (res.Executed)  				++ExecutedTests;  			if (res.IsFailure)  				++FailedTests;  			if (res.IsSuccess)  				++SuccessTests;  			PrintResult (++j' res);  			if (res.Time > BiggerTime)  				BiggerTime = res.Time;  			if (res.IsFailure)  				failedTests.Add (res);  		}  		Log ("Summary:");  		Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' results.Length' ExecutedTests' FailedTests' SuccessTests' results.Length > 0 ? 100 * SuccessTests / results.Length : 0' BiggerTime));  		TotalTests += results.Length;  		TotalExecutedTests += ExecutedTests;  		TotalFailedTests += FailedTests;  		TotalSuccessTests += SuccessTests;  		TotalBiggerTime += BiggerTime;  	}  	// print all failed tests together  	if (failedTests.Count > 0) {  		Log ("==== Failed tests ===");  		for (j = 0; j < failedTests.Count; ++j)  			PrintResult (j' failedTests [j] as PNUnitTestResult);  	}  	if (runners.Length > 1) {  		Log ("Summary for all the parallel tests:");  		Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' TotalTests' TotalExecutedTests' TotalFailedTests' TotalSuccessTests' TotalTests > 0 ? 100 * TotalSuccessTests / TotalTests : 0' TotalBiggerTime));  	}  	TimeSpan elapsedTime = endTimestamp.Subtract (beginTimestamp);  	Log (string.Format ("Launcher execution time: {0} seconds"' elapsedTime.TotalSeconds));  } finally {  	WriteResult (resultfile);  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: try {  	// Load the test configuration file  	if (args.Length == 0) {  		Console.WriteLine ("Usage: launcher configfile [--result=filename] [--failed=filename] [-D:var=value] [-val:variable=value] [--retry=number] [--range=from-to] [--test=testname]");  		return;  	}  	string configfile = args [0];  	mTestPath = Path.GetDirectoryName (configfile);  	TestGroup group = TestConfLoader.LoadFromFile (configfile' args);  	int startTest = 0;  	int endTest = group.ParallelTests.Length - 1;  	failedfile = Path.Combine (mTestPath' "smokefailed.conf");  	passedfile = Path.Combine (mTestPath' "smokepassed.conf");  	if (args.Length > 1) {  		foreach (string arg in args) {  			if (arg.StartsWith ("--result=")) {  				resultfile = arg.Substring (9);  				resultfile = Path.GetFullPath (resultfile);  			}  			if (arg.StartsWith ("--failed=")) {  				failedfile = arg.Substring (9);  				failedfile = Path.GetFullPath (failedfile);  			}  			if (arg.StartsWith ("--retry=")) {  				retryOnFailure = int.Parse (arg.Substring ("--retry=".Length));  				log.InfoFormat ("Retry on failure activated. {0} retries"' retryOnFailure);  				maxRetry = retryOnFailure;  			}  			if (arg.StartsWith ("--test=")) {  				string testName = arg.Substring ("--test=".Length);  				int index = -1;  				for (int i = 0; i < group.ParallelTests.Length; i++) {  					if (group.ParallelTests [i].Name != testName)  						continue;  					index = i;  					break;  				}  				if (index == -1) {  					Console.WriteLine ("The specified test was not found");  					return;  				}  				startTest = index;  				endTest = index;  			}  			if (arg.StartsWith ("--range=")) {  				string range = arg.Substring ("--range=".Length);  				// now range should be something like xx-xx  				if (range.IndexOf ("-") < 0) {  					Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  					return;  				}  				string[] ranges = range.Split ('-');  				if (ranges.Length != 2) {  					Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  					return;  				}  				startTest = int.Parse (ranges [0]);  				endTest = int.Parse (ranges [1]);  				if ((startTest > endTest) || (startTest < 0) || (startTest > group.ParallelTests.Length - 1)) {  					Console.WriteLine ("Start test must be in a correct test range");  					return;  				}  				if ((endTest < startTest) || (endTest < 0) || (endTest > group.ParallelTests.Length - 1)) {  					Console.WriteLine ("End test must be in a correct test range");  					return;  				}  				log.InfoFormat ("Starting test range [{0}-{1}]"' startTest' endTest);  			}  		}  	}  	if ((group == null) || (group.ParallelTests.Length == 0)) {  		Console.WriteLine ("No tests to run");  		return;  	}  	Hashtable userValues = GetUserValues (args);  	ConfigureRemoting ();  	ArrayList failedGroups = new ArrayList ();  	ArrayList passedGroups = new ArrayList ();  	int testCount = endTest - startTest + 1;  	// Each parallel test is launched sequencially...  	Runner[] runners = new Runner[testCount];  	DateTime beginTimestamp = DateTime.Now;  	for (int i = startTest; i <= endTest;) {  		ParallelTest test = group.ParallelTests [i] as ParallelTest;  		int retryCount = 0;  		bool bRetry = true;  		while (bRetry && retryCount < maxRetry) {  			bRetry = false;  			if (testCount != group.ParallelTests.Length)  				log.InfoFormat ("Test {0} of {1}. {2}/{3}"' i' group.ParallelTests.Length' i - startTest + 1' testCount);  			else  				log.InfoFormat ("Test {0} of {1}"' i + 1' group.ParallelTests.Length);  			Runner runner = new Runner (test' userValues);  			runner.Run ();  			runners [i - startTest] = runner;  			// Wait to finish  			runner.Join ();  			TestResult[] runnerResults = runner.GetTestResults ();  			if (runnerResults == null) {  				log.Info ("Error. Results are NULL");  				++i;  				continue;  			}  			bRetry = RetryTest (runnerResults);  			bool bFailed = FailedTest (runnerResults);  			if (bRetry || ((bFailed && (retryOnFailure > 0) && ((retryCount + 1) < maxRetry))/* so that list time is printed*/)) {  				bRetry = true;  				++retryCount;  				log.Info ("Test failed with retry option' trying again");  				continue;  			}  			if (bFailed) {  				failedGroups.Add (test);  				WriteGroup (failedGroups' failedfile);  			} else {  				passedGroups.Add (test);  				WriteGroup (passedGroups' passedfile);  			}  		}  		// updated at the bottom so it's not affected by retries  		++i;  	}  	DateTime endTimestamp = DateTime.Now;  	// Print the results  	double TotalBiggerTime = 0;  	int TotalTests = 0;  	int TotalExecutedTests = 0;  	int TotalFailedTests = 0;  	int TotalSuccessTests = 0;  	IList failedTests = new ArrayList ();  	int j;  	foreach (Runner runner in runners) {  		int ExecutedTests = 0;  		int FailedTests = 0;  		int SuccessTests = 0;  		double BiggerTime = 0;  		TestResult[] results = runner.GetTestResults ();  		Log (string.Format ("==== Tests Results for Parallel TestGroup {0} ==="' runner.TestGroupName));  		j = 0;  		foreach (TestResult res in results) {  			if (res.Executed)  				++ExecutedTests;  			if (res.IsFailure)  				++FailedTests;  			if (res.IsSuccess)  				++SuccessTests;  			PrintResult (++j' res);  			if (res.Time > BiggerTime)  				BiggerTime = res.Time;  			if (res.IsFailure)  				failedTests.Add (res);  		}  		Log ("Summary:");  		Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' results.Length' ExecutedTests' FailedTests' SuccessTests' results.Length > 0 ? 100 * SuccessTests / results.Length : 0' BiggerTime));  		TotalTests += results.Length;  		TotalExecutedTests += ExecutedTests;  		TotalFailedTests += FailedTests;  		TotalSuccessTests += SuccessTests;  		TotalBiggerTime += BiggerTime;  	}  	// print all failed tests together  	if (failedTests.Count > 0) {  		Log ("==== Failed tests ===");  		for (j = 0; j < failedTests.Count; ++j)  			PrintResult (j' failedTests [j] as PNUnitTestResult);  	}  	if (runners.Length > 1) {  		Log ("Summary for all the parallel tests:");  		Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' TotalTests' TotalExecutedTests' TotalFailedTests' TotalSuccessTests' TotalTests > 0 ? 100 * TotalSuccessTests / TotalTests : 0' TotalBiggerTime));  	}  	TimeSpan elapsedTime = endTimestamp.Subtract (beginTimestamp);  	Log (string.Format ("Launcher execution time: {0} seconds"' elapsedTime.TotalSeconds));  } finally {  	WriteResult (resultfile);  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: try {  	// Load the test configuration file  	if (args.Length == 0) {  		Console.WriteLine ("Usage: launcher configfile [--result=filename] [--failed=filename] [-D:var=value] [-val:variable=value] [--retry=number] [--range=from-to] [--test=testname]");  		return;  	}  	string configfile = args [0];  	mTestPath = Path.GetDirectoryName (configfile);  	TestGroup group = TestConfLoader.LoadFromFile (configfile' args);  	int startTest = 0;  	int endTest = group.ParallelTests.Length - 1;  	failedfile = Path.Combine (mTestPath' "smokefailed.conf");  	passedfile = Path.Combine (mTestPath' "smokepassed.conf");  	if (args.Length > 1) {  		foreach (string arg in args) {  			if (arg.StartsWith ("--result=")) {  				resultfile = arg.Substring (9);  				resultfile = Path.GetFullPath (resultfile);  			}  			if (arg.StartsWith ("--failed=")) {  				failedfile = arg.Substring (9);  				failedfile = Path.GetFullPath (failedfile);  			}  			if (arg.StartsWith ("--retry=")) {  				retryOnFailure = int.Parse (arg.Substring ("--retry=".Length));  				log.InfoFormat ("Retry on failure activated. {0} retries"' retryOnFailure);  				maxRetry = retryOnFailure;  			}  			if (arg.StartsWith ("--test=")) {  				string testName = arg.Substring ("--test=".Length);  				int index = -1;  				for (int i = 0; i < group.ParallelTests.Length; i++) {  					if (group.ParallelTests [i].Name != testName)  						continue;  					index = i;  					break;  				}  				if (index == -1) {  					Console.WriteLine ("The specified test was not found");  					return;  				}  				startTest = index;  				endTest = index;  			}  			if (arg.StartsWith ("--range=")) {  				string range = arg.Substring ("--range=".Length);  				// now range should be something like xx-xx  				if (range.IndexOf ("-") < 0) {  					Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  					return;  				}  				string[] ranges = range.Split ('-');  				if (ranges.Length != 2) {  					Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  					return;  				}  				startTest = int.Parse (ranges [0]);  				endTest = int.Parse (ranges [1]);  				if ((startTest > endTest) || (startTest < 0) || (startTest > group.ParallelTests.Length - 1)) {  					Console.WriteLine ("Start test must be in a correct test range");  					return;  				}  				if ((endTest < startTest) || (endTest < 0) || (endTest > group.ParallelTests.Length - 1)) {  					Console.WriteLine ("End test must be in a correct test range");  					return;  				}  				log.InfoFormat ("Starting test range [{0}-{1}]"' startTest' endTest);  			}  		}  	}  	if ((group == null) || (group.ParallelTests.Length == 0)) {  		Console.WriteLine ("No tests to run");  		return;  	}  	Hashtable userValues = GetUserValues (args);  	ConfigureRemoting ();  	ArrayList failedGroups = new ArrayList ();  	ArrayList passedGroups = new ArrayList ();  	int testCount = endTest - startTest + 1;  	// Each parallel test is launched sequencially...  	Runner[] runners = new Runner[testCount];  	DateTime beginTimestamp = DateTime.Now;  	for (int i = startTest; i <= endTest;) {  		ParallelTest test = group.ParallelTests [i] as ParallelTest;  		int retryCount = 0;  		bool bRetry = true;  		while (bRetry && retryCount < maxRetry) {  			bRetry = false;  			if (testCount != group.ParallelTests.Length)  				log.InfoFormat ("Test {0} of {1}. {2}/{3}"' i' group.ParallelTests.Length' i - startTest + 1' testCount);  			else  				log.InfoFormat ("Test {0} of {1}"' i + 1' group.ParallelTests.Length);  			Runner runner = new Runner (test' userValues);  			runner.Run ();  			runners [i - startTest] = runner;  			// Wait to finish  			runner.Join ();  			TestResult[] runnerResults = runner.GetTestResults ();  			if (runnerResults == null) {  				log.Info ("Error. Results are NULL");  				++i;  				continue;  			}  			bRetry = RetryTest (runnerResults);  			bool bFailed = FailedTest (runnerResults);  			if (bRetry || ((bFailed && (retryOnFailure > 0) && ((retryCount + 1) < maxRetry))/* so that list time is printed*/)) {  				bRetry = true;  				++retryCount;  				log.Info ("Test failed with retry option' trying again");  				continue;  			}  			if (bFailed) {  				failedGroups.Add (test);  				WriteGroup (failedGroups' failedfile);  			} else {  				passedGroups.Add (test);  				WriteGroup (passedGroups' passedfile);  			}  		}  		// updated at the bottom so it's not affected by retries  		++i;  	}  	DateTime endTimestamp = DateTime.Now;  	// Print the results  	double TotalBiggerTime = 0;  	int TotalTests = 0;  	int TotalExecutedTests = 0;  	int TotalFailedTests = 0;  	int TotalSuccessTests = 0;  	IList failedTests = new ArrayList ();  	int j;  	foreach (Runner runner in runners) {  		int ExecutedTests = 0;  		int FailedTests = 0;  		int SuccessTests = 0;  		double BiggerTime = 0;  		TestResult[] results = runner.GetTestResults ();  		Log (string.Format ("==== Tests Results for Parallel TestGroup {0} ==="' runner.TestGroupName));  		j = 0;  		foreach (TestResult res in results) {  			if (res.Executed)  				++ExecutedTests;  			if (res.IsFailure)  				++FailedTests;  			if (res.IsSuccess)  				++SuccessTests;  			PrintResult (++j' res);  			if (res.Time > BiggerTime)  				BiggerTime = res.Time;  			if (res.IsFailure)  				failedTests.Add (res);  		}  		Log ("Summary:");  		Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' results.Length' ExecutedTests' FailedTests' SuccessTests' results.Length > 0 ? 100 * SuccessTests / results.Length : 0' BiggerTime));  		TotalTests += results.Length;  		TotalExecutedTests += ExecutedTests;  		TotalFailedTests += FailedTests;  		TotalSuccessTests += SuccessTests;  		TotalBiggerTime += BiggerTime;  	}  	// print all failed tests together  	if (failedTests.Count > 0) {  		Log ("==== Failed tests ===");  		for (j = 0; j < failedTests.Count; ++j)  			PrintResult (j' failedTests [j] as PNUnitTestResult);  	}  	if (runners.Length > 1) {  		Log ("Summary for all the parallel tests:");  		Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' TotalTests' TotalExecutedTests' TotalFailedTests' TotalSuccessTests' TotalTests > 0 ? 100 * TotalSuccessTests / TotalTests : 0' TotalBiggerTime));  	}  	TimeSpan elapsedTime = endTimestamp.Subtract (beginTimestamp);  	Log (string.Format ("Launcher execution time: {0} seconds"' elapsedTime.TotalSeconds));  } finally {  	WriteResult (resultfile);  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: try {  	// Load the test configuration file  	if (args.Length == 0) {  		Console.WriteLine ("Usage: launcher configfile [--result=filename] [--failed=filename] [-D:var=value] [-val:variable=value] [--retry=number] [--range=from-to] [--test=testname]");  		return;  	}  	string configfile = args [0];  	mTestPath = Path.GetDirectoryName (configfile);  	TestGroup group = TestConfLoader.LoadFromFile (configfile' args);  	int startTest = 0;  	int endTest = group.ParallelTests.Length - 1;  	failedfile = Path.Combine (mTestPath' "smokefailed.conf");  	passedfile = Path.Combine (mTestPath' "smokepassed.conf");  	if (args.Length > 1) {  		foreach (string arg in args) {  			if (arg.StartsWith ("--result=")) {  				resultfile = arg.Substring (9);  				resultfile = Path.GetFullPath (resultfile);  			}  			if (arg.StartsWith ("--failed=")) {  				failedfile = arg.Substring (9);  				failedfile = Path.GetFullPath (failedfile);  			}  			if (arg.StartsWith ("--retry=")) {  				retryOnFailure = int.Parse (arg.Substring ("--retry=".Length));  				log.InfoFormat ("Retry on failure activated. {0} retries"' retryOnFailure);  				maxRetry = retryOnFailure;  			}  			if (arg.StartsWith ("--test=")) {  				string testName = arg.Substring ("--test=".Length);  				int index = -1;  				for (int i = 0; i < group.ParallelTests.Length; i++) {  					if (group.ParallelTests [i].Name != testName)  						continue;  					index = i;  					break;  				}  				if (index == -1) {  					Console.WriteLine ("The specified test was not found");  					return;  				}  				startTest = index;  				endTest = index;  			}  			if (arg.StartsWith ("--range=")) {  				string range = arg.Substring ("--range=".Length);  				// now range should be something like xx-xx  				if (range.IndexOf ("-") < 0) {  					Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  					return;  				}  				string[] ranges = range.Split ('-');  				if (ranges.Length != 2) {  					Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  					return;  				}  				startTest = int.Parse (ranges [0]);  				endTest = int.Parse (ranges [1]);  				if ((startTest > endTest) || (startTest < 0) || (startTest > group.ParallelTests.Length - 1)) {  					Console.WriteLine ("Start test must be in a correct test range");  					return;  				}  				if ((endTest < startTest) || (endTest < 0) || (endTest > group.ParallelTests.Length - 1)) {  					Console.WriteLine ("End test must be in a correct test range");  					return;  				}  				log.InfoFormat ("Starting test range [{0}-{1}]"' startTest' endTest);  			}  		}  	}  	if ((group == null) || (group.ParallelTests.Length == 0)) {  		Console.WriteLine ("No tests to run");  		return;  	}  	Hashtable userValues = GetUserValues (args);  	ConfigureRemoting ();  	ArrayList failedGroups = new ArrayList ();  	ArrayList passedGroups = new ArrayList ();  	int testCount = endTest - startTest + 1;  	// Each parallel test is launched sequencially...  	Runner[] runners = new Runner[testCount];  	DateTime beginTimestamp = DateTime.Now;  	for (int i = startTest; i <= endTest;) {  		ParallelTest test = group.ParallelTests [i] as ParallelTest;  		int retryCount = 0;  		bool bRetry = true;  		while (bRetry && retryCount < maxRetry) {  			bRetry = false;  			if (testCount != group.ParallelTests.Length)  				log.InfoFormat ("Test {0} of {1}. {2}/{3}"' i' group.ParallelTests.Length' i - startTest + 1' testCount);  			else  				log.InfoFormat ("Test {0} of {1}"' i + 1' group.ParallelTests.Length);  			Runner runner = new Runner (test' userValues);  			runner.Run ();  			runners [i - startTest] = runner;  			// Wait to finish  			runner.Join ();  			TestResult[] runnerResults = runner.GetTestResults ();  			if (runnerResults == null) {  				log.Info ("Error. Results are NULL");  				++i;  				continue;  			}  			bRetry = RetryTest (runnerResults);  			bool bFailed = FailedTest (runnerResults);  			if (bRetry || ((bFailed && (retryOnFailure > 0) && ((retryCount + 1) < maxRetry))/* so that list time is printed*/)) {  				bRetry = true;  				++retryCount;  				log.Info ("Test failed with retry option' trying again");  				continue;  			}  			if (bFailed) {  				failedGroups.Add (test);  				WriteGroup (failedGroups' failedfile);  			} else {  				passedGroups.Add (test);  				WriteGroup (passedGroups' passedfile);  			}  		}  		// updated at the bottom so it's not affected by retries  		++i;  	}  	DateTime endTimestamp = DateTime.Now;  	// Print the results  	double TotalBiggerTime = 0;  	int TotalTests = 0;  	int TotalExecutedTests = 0;  	int TotalFailedTests = 0;  	int TotalSuccessTests = 0;  	IList failedTests = new ArrayList ();  	int j;  	foreach (Runner runner in runners) {  		int ExecutedTests = 0;  		int FailedTests = 0;  		int SuccessTests = 0;  		double BiggerTime = 0;  		TestResult[] results = runner.GetTestResults ();  		Log (string.Format ("==== Tests Results for Parallel TestGroup {0} ==="' runner.TestGroupName));  		j = 0;  		foreach (TestResult res in results) {  			if (res.Executed)  				++ExecutedTests;  			if (res.IsFailure)  				++FailedTests;  			if (res.IsSuccess)  				++SuccessTests;  			PrintResult (++j' res);  			if (res.Time > BiggerTime)  				BiggerTime = res.Time;  			if (res.IsFailure)  				failedTests.Add (res);  		}  		Log ("Summary:");  		Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' results.Length' ExecutedTests' FailedTests' SuccessTests' results.Length > 0 ? 100 * SuccessTests / results.Length : 0' BiggerTime));  		TotalTests += results.Length;  		TotalExecutedTests += ExecutedTests;  		TotalFailedTests += FailedTests;  		TotalSuccessTests += SuccessTests;  		TotalBiggerTime += BiggerTime;  	}  	// print all failed tests together  	if (failedTests.Count > 0) {  		Log ("==== Failed tests ===");  		for (j = 0; j < failedTests.Count; ++j)  			PrintResult (j' failedTests [j] as PNUnitTestResult);  	}  	if (runners.Length > 1) {  		Log ("Summary for all the parallel tests:");  		Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' TotalTests' TotalExecutedTests' TotalFailedTests' TotalSuccessTests' TotalTests > 0 ? 100 * TotalSuccessTests / TotalTests : 0' TotalBiggerTime));  	}  	TimeSpan elapsedTime = endTimestamp.Subtract (beginTimestamp);  	Log (string.Format ("Launcher execution time: {0} seconds"' elapsedTime.TotalSeconds));  } finally {  	WriteResult (resultfile);  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: if (args.Length > 1) {  	foreach (string arg in args) {  		if (arg.StartsWith ("--result=")) {  			resultfile = arg.Substring (9);  			resultfile = Path.GetFullPath (resultfile);  		}  		if (arg.StartsWith ("--failed=")) {  			failedfile = arg.Substring (9);  			failedfile = Path.GetFullPath (failedfile);  		}  		if (arg.StartsWith ("--retry=")) {  			retryOnFailure = int.Parse (arg.Substring ("--retry=".Length));  			log.InfoFormat ("Retry on failure activated. {0} retries"' retryOnFailure);  			maxRetry = retryOnFailure;  		}  		if (arg.StartsWith ("--test=")) {  			string testName = arg.Substring ("--test=".Length);  			int index = -1;  			for (int i = 0; i < group.ParallelTests.Length; i++) {  				if (group.ParallelTests [i].Name != testName)  					continue;  				index = i;  				break;  			}  			if (index == -1) {  				Console.WriteLine ("The specified test was not found");  				return;  			}  			startTest = index;  			endTest = index;  		}  		if (arg.StartsWith ("--range=")) {  			string range = arg.Substring ("--range=".Length);  			// now range should be something like xx-xx  			if (range.IndexOf ("-") < 0) {  				Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  				return;  			}  			string[] ranges = range.Split ('-');  			if (ranges.Length != 2) {  				Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  				return;  			}  			startTest = int.Parse (ranges [0]);  			endTest = int.Parse (ranges [1]);  			if ((startTest > endTest) || (startTest < 0) || (startTest > group.ParallelTests.Length - 1)) {  				Console.WriteLine ("Start test must be in a correct test range");  				return;  			}  			if ((endTest < startTest) || (endTest < 0) || (endTest > group.ParallelTests.Length - 1)) {  				Console.WriteLine ("End test must be in a correct test range");  				return;  			}  			log.InfoFormat ("Starting test range [{0}-{1}]"' startTest' endTest);  		}  	}  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: if (args.Length > 1) {  	foreach (string arg in args) {  		if (arg.StartsWith ("--result=")) {  			resultfile = arg.Substring (9);  			resultfile = Path.GetFullPath (resultfile);  		}  		if (arg.StartsWith ("--failed=")) {  			failedfile = arg.Substring (9);  			failedfile = Path.GetFullPath (failedfile);  		}  		if (arg.StartsWith ("--retry=")) {  			retryOnFailure = int.Parse (arg.Substring ("--retry=".Length));  			log.InfoFormat ("Retry on failure activated. {0} retries"' retryOnFailure);  			maxRetry = retryOnFailure;  		}  		if (arg.StartsWith ("--test=")) {  			string testName = arg.Substring ("--test=".Length);  			int index = -1;  			for (int i = 0; i < group.ParallelTests.Length; i++) {  				if (group.ParallelTests [i].Name != testName)  					continue;  				index = i;  				break;  			}  			if (index == -1) {  				Console.WriteLine ("The specified test was not found");  				return;  			}  			startTest = index;  			endTest = index;  		}  		if (arg.StartsWith ("--range=")) {  			string range = arg.Substring ("--range=".Length);  			// now range should be something like xx-xx  			if (range.IndexOf ("-") < 0) {  				Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  				return;  			}  			string[] ranges = range.Split ('-');  			if (ranges.Length != 2) {  				Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  				return;  			}  			startTest = int.Parse (ranges [0]);  			endTest = int.Parse (ranges [1]);  			if ((startTest > endTest) || (startTest < 0) || (startTest > group.ParallelTests.Length - 1)) {  				Console.WriteLine ("Start test must be in a correct test range");  				return;  			}  			if ((endTest < startTest) || (endTest < 0) || (endTest > group.ParallelTests.Length - 1)) {  				Console.WriteLine ("End test must be in a correct test range");  				return;  			}  			log.InfoFormat ("Starting test range [{0}-{1}]"' startTest' endTest);  		}  	}  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: if (args.Length > 1) {  	foreach (string arg in args) {  		if (arg.StartsWith ("--result=")) {  			resultfile = arg.Substring (9);  			resultfile = Path.GetFullPath (resultfile);  		}  		if (arg.StartsWith ("--failed=")) {  			failedfile = arg.Substring (9);  			failedfile = Path.GetFullPath (failedfile);  		}  		if (arg.StartsWith ("--retry=")) {  			retryOnFailure = int.Parse (arg.Substring ("--retry=".Length));  			log.InfoFormat ("Retry on failure activated. {0} retries"' retryOnFailure);  			maxRetry = retryOnFailure;  		}  		if (arg.StartsWith ("--test=")) {  			string testName = arg.Substring ("--test=".Length);  			int index = -1;  			for (int i = 0; i < group.ParallelTests.Length; i++) {  				if (group.ParallelTests [i].Name != testName)  					continue;  				index = i;  				break;  			}  			if (index == -1) {  				Console.WriteLine ("The specified test was not found");  				return;  			}  			startTest = index;  			endTest = index;  		}  		if (arg.StartsWith ("--range=")) {  			string range = arg.Substring ("--range=".Length);  			// now range should be something like xx-xx  			if (range.IndexOf ("-") < 0) {  				Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  				return;  			}  			string[] ranges = range.Split ('-');  			if (ranges.Length != 2) {  				Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  				return;  			}  			startTest = int.Parse (ranges [0]);  			endTest = int.Parse (ranges [1]);  			if ((startTest > endTest) || (startTest < 0) || (startTest > group.ParallelTests.Length - 1)) {  				Console.WriteLine ("Start test must be in a correct test range");  				return;  			}  			if ((endTest < startTest) || (endTest < 0) || (endTest > group.ParallelTests.Length - 1)) {  				Console.WriteLine ("End test must be in a correct test range");  				return;  			}  			log.InfoFormat ("Starting test range [{0}-{1}]"' startTest' endTest);  		}  	}  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: foreach (string arg in args) {  	if (arg.StartsWith ("--result=")) {  		resultfile = arg.Substring (9);  		resultfile = Path.GetFullPath (resultfile);  	}  	if (arg.StartsWith ("--failed=")) {  		failedfile = arg.Substring (9);  		failedfile = Path.GetFullPath (failedfile);  	}  	if (arg.StartsWith ("--retry=")) {  		retryOnFailure = int.Parse (arg.Substring ("--retry=".Length));  		log.InfoFormat ("Retry on failure activated. {0} retries"' retryOnFailure);  		maxRetry = retryOnFailure;  	}  	if (arg.StartsWith ("--test=")) {  		string testName = arg.Substring ("--test=".Length);  		int index = -1;  		for (int i = 0; i < group.ParallelTests.Length; i++) {  			if (group.ParallelTests [i].Name != testName)  				continue;  			index = i;  			break;  		}  		if (index == -1) {  			Console.WriteLine ("The specified test was not found");  			return;  		}  		startTest = index;  		endTest = index;  	}  	if (arg.StartsWith ("--range=")) {  		string range = arg.Substring ("--range=".Length);  		// now range should be something like xx-xx  		if (range.IndexOf ("-") < 0) {  			Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  			return;  		}  		string[] ranges = range.Split ('-');  		if (ranges.Length != 2) {  			Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  			return;  		}  		startTest = int.Parse (ranges [0]);  		endTest = int.Parse (ranges [1]);  		if ((startTest > endTest) || (startTest < 0) || (startTest > group.ParallelTests.Length - 1)) {  			Console.WriteLine ("Start test must be in a correct test range");  			return;  		}  		if ((endTest < startTest) || (endTest < 0) || (endTest > group.ParallelTests.Length - 1)) {  			Console.WriteLine ("End test must be in a correct test range");  			return;  		}  		log.InfoFormat ("Starting test range [{0}-{1}]"' startTest' endTest);  	}  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: foreach (string arg in args) {  	if (arg.StartsWith ("--result=")) {  		resultfile = arg.Substring (9);  		resultfile = Path.GetFullPath (resultfile);  	}  	if (arg.StartsWith ("--failed=")) {  		failedfile = arg.Substring (9);  		failedfile = Path.GetFullPath (failedfile);  	}  	if (arg.StartsWith ("--retry=")) {  		retryOnFailure = int.Parse (arg.Substring ("--retry=".Length));  		log.InfoFormat ("Retry on failure activated. {0} retries"' retryOnFailure);  		maxRetry = retryOnFailure;  	}  	if (arg.StartsWith ("--test=")) {  		string testName = arg.Substring ("--test=".Length);  		int index = -1;  		for (int i = 0; i < group.ParallelTests.Length; i++) {  			if (group.ParallelTests [i].Name != testName)  				continue;  			index = i;  			break;  		}  		if (index == -1) {  			Console.WriteLine ("The specified test was not found");  			return;  		}  		startTest = index;  		endTest = index;  	}  	if (arg.StartsWith ("--range=")) {  		string range = arg.Substring ("--range=".Length);  		// now range should be something like xx-xx  		if (range.IndexOf ("-") < 0) {  			Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  			return;  		}  		string[] ranges = range.Split ('-');  		if (ranges.Length != 2) {  			Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  			return;  		}  		startTest = int.Parse (ranges [0]);  		endTest = int.Parse (ranges [1]);  		if ((startTest > endTest) || (startTest < 0) || (startTest > group.ParallelTests.Length - 1)) {  			Console.WriteLine ("Start test must be in a correct test range");  			return;  		}  		if ((endTest < startTest) || (endTest < 0) || (endTest > group.ParallelTests.Length - 1)) {  			Console.WriteLine ("End test must be in a correct test range");  			return;  		}  		log.InfoFormat ("Starting test range [{0}-{1}]"' startTest' endTest);  	}  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: foreach (string arg in args) {  	if (arg.StartsWith ("--result=")) {  		resultfile = arg.Substring (9);  		resultfile = Path.GetFullPath (resultfile);  	}  	if (arg.StartsWith ("--failed=")) {  		failedfile = arg.Substring (9);  		failedfile = Path.GetFullPath (failedfile);  	}  	if (arg.StartsWith ("--retry=")) {  		retryOnFailure = int.Parse (arg.Substring ("--retry=".Length));  		log.InfoFormat ("Retry on failure activated. {0} retries"' retryOnFailure);  		maxRetry = retryOnFailure;  	}  	if (arg.StartsWith ("--test=")) {  		string testName = arg.Substring ("--test=".Length);  		int index = -1;  		for (int i = 0; i < group.ParallelTests.Length; i++) {  			if (group.ParallelTests [i].Name != testName)  				continue;  			index = i;  			break;  		}  		if (index == -1) {  			Console.WriteLine ("The specified test was not found");  			return;  		}  		startTest = index;  		endTest = index;  	}  	if (arg.StartsWith ("--range=")) {  		string range = arg.Substring ("--range=".Length);  		// now range should be something like xx-xx  		if (range.IndexOf ("-") < 0) {  			Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  			return;  		}  		string[] ranges = range.Split ('-');  		if (ranges.Length != 2) {  			Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  			return;  		}  		startTest = int.Parse (ranges [0]);  		endTest = int.Parse (ranges [1]);  		if ((startTest > endTest) || (startTest < 0) || (startTest > group.ParallelTests.Length - 1)) {  			Console.WriteLine ("Start test must be in a correct test range");  			return;  		}  		if ((endTest < startTest) || (endTest < 0) || (endTest > group.ParallelTests.Length - 1)) {  			Console.WriteLine ("End test must be in a correct test range");  			return;  		}  		log.InfoFormat ("Starting test range [{0}-{1}]"' startTest' endTest);  	}  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--result=")) {  	resultfile = arg.Substring (9);  	resultfile = Path.GetFullPath (resultfile);  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: resultfile = arg.Substring (9);  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--failed=")) {  	failedfile = arg.Substring (9);  	failedfile = Path.GetFullPath (failedfile);  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: failedfile = arg.Substring (9);  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: if (arg.StartsWith ("--range=")) {  	string range = arg.Substring ("--range=".Length);  	// now range should be something like xx-xx  	if (range.IndexOf ("-") < 0) {  		Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  		return;  	}  	string[] ranges = range.Split ('-');  	if (ranges.Length != 2) {  		Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  		return;  	}  	startTest = int.Parse (ranges [0]);  	endTest = int.Parse (ranges [1]);  	if ((startTest > endTest) || (startTest < 0) || (startTest > group.ParallelTests.Length - 1)) {  		Console.WriteLine ("Start test must be in a correct test range");  		return;  	}  	if ((endTest < startTest) || (endTest < 0) || (endTest > group.ParallelTests.Length - 1)) {  		Console.WriteLine ("End test must be in a correct test range");  		return;  	}  	log.InfoFormat ("Starting test range [{0}-{1}]"' startTest' endTest);  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: if (ranges.Length != 2) {  	Console.WriteLine ("Test range incorrectly specified' it must be something like 0-10");  	return;  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: foreach (Runner runner in runners) {  	int ExecutedTests = 0;  	int FailedTests = 0;  	int SuccessTests = 0;  	double BiggerTime = 0;  	TestResult[] results = runner.GetTestResults ();  	Log (string.Format ("==== Tests Results for Parallel TestGroup {0} ==="' runner.TestGroupName));  	j = 0;  	foreach (TestResult res in results) {  		if (res.Executed)  			++ExecutedTests;  		if (res.IsFailure)  			++FailedTests;  		if (res.IsSuccess)  			++SuccessTests;  		PrintResult (++j' res);  		if (res.Time > BiggerTime)  			BiggerTime = res.Time;  		if (res.IsFailure)  			failedTests.Add (res);  	}  	Log ("Summary:");  	Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' results.Length' ExecutedTests' FailedTests' SuccessTests' results.Length > 0 ? 100 * SuccessTests / results.Length : 0' BiggerTime));  	TotalTests += results.Length;  	TotalExecutedTests += ExecutedTests;  	TotalFailedTests += FailedTests;  	TotalSuccessTests += SuccessTests;  	TotalBiggerTime += BiggerTime;  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' results.Length' ExecutedTests' FailedTests' SuccessTests' results.Length > 0 ? 100 * SuccessTests / results.Length : 0' BiggerTime));  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: if (runners.Length > 1) {  	Log ("Summary for all the parallel tests:");  	Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' TotalTests' TotalExecutedTests' TotalFailedTests' TotalSuccessTests' TotalTests > 0 ? 100 * TotalSuccessTests / TotalTests : 0' TotalBiggerTime));  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,Main,The following statement contains a magic number: Log (string.Format ("\tTotal: {0}\r\n\tExecuted: {1}\r\n\tFailed: {2}\r\n\tSuccess: {3}\r\n\t% Success: {4}\r\n\tBiggest Execution Time: {5} s\r\n"' TotalTests' TotalExecutedTests' TotalFailedTests' TotalSuccessTests' TotalTests > 0 ? 100 * TotalSuccessTests / TotalTests : 0' TotalBiggerTime));  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,GetUserValues,The following statement contains a magic number: foreach (string s in args) {  	if (!s.ToLower ().StartsWith (USER_VALUE_KEY))  		continue;  	string[] v = s.Substring (USER_VALUE_KEY.Length).Split ('=');  	if (v.Length >= 1) {  		string name = v [0];  		string val = string.Empty;  		if (v.Length == 2)  			val = v [1];  		result.Add (name' val);  	}  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,GetUserValues,The following statement contains a magic number: if (v.Length >= 1) {  	string name = v [0];  	string val = string.Empty;  	if (v.Length == 2)  		val = v [1];  	result.Add (name' val);  }  
Magic Number,PNUnit.Launcher,Launcher,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\launcher.cs,GetUserValues,The following statement contains a magic number: if (v.Length == 2)  	val = v [1];  
Magic Number,PNUnit.Launcher,Runner,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\Runner.cs,ThreadProc,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,PNUnit.Launcher,TestConfLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\TestConf.cs,ParseCliVars,The following statement contains a magic number: foreach (string s in args) {  	if (s.StartsWith ("-D:") || s.StartsWith ("-d:")) {  		Variable var = new Variable ();  		string[] v = s.Substring (3).Split ('=');  		if (v.Length >= 1) {  			var.name = v [0];  			if (v.Length == 2)  				var.value = v [1];  			result [var.name] = var;  		}  	}  }  
Magic Number,PNUnit.Launcher,TestConfLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\TestConf.cs,ParseCliVars,The following statement contains a magic number: foreach (string s in args) {  	if (s.StartsWith ("-D:") || s.StartsWith ("-d:")) {  		Variable var = new Variable ();  		string[] v = s.Substring (3).Split ('=');  		if (v.Length >= 1) {  			var.name = v [0];  			if (v.Length == 2)  				var.value = v [1];  			result [var.name] = var;  		}  	}  }  
Magic Number,PNUnit.Launcher,TestConfLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\TestConf.cs,ParseCliVars,The following statement contains a magic number: if (s.StartsWith ("-D:") || s.StartsWith ("-d:")) {  	Variable var = new Variable ();  	string[] v = s.Substring (3).Split ('=');  	if (v.Length >= 1) {  		var.name = v [0];  		if (v.Length == 2)  			var.value = v [1];  		result [var.name] = var;  	}  }  
Magic Number,PNUnit.Launcher,TestConfLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\TestConf.cs,ParseCliVars,The following statement contains a magic number: if (s.StartsWith ("-D:") || s.StartsWith ("-d:")) {  	Variable var = new Variable ();  	string[] v = s.Substring (3).Split ('=');  	if (v.Length >= 1) {  		var.name = v [0];  		if (v.Length == 2)  			var.value = v [1];  		result [var.name] = var;  	}  }  
Magic Number,PNUnit.Launcher,TestConfLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\TestConf.cs,ParseCliVars,The following statement contains a magic number: if (v.Length >= 1) {  	var.name = v [0];  	if (v.Length == 2)  		var.value = v [1];  	result [var.name] = var;  }  
Magic Number,PNUnit.Launcher,TestConfLoader,F:\newReposMay17\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.6.0.12051\src\PNUnit\launcher\TestConf.cs,ParseCliVars,The following statement contains a magic number: if (v.Length == 2)  	var.value = v [1];  
