Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NUnit.Framework,ValuesAttribute,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Attributes\ValuesAttribute.cs,GetData,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework,TextMessageWriter,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\TextMessageWriter.cs,WriteValue,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Framework,TextMessageWriter,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\TextMessageWriter.cs,WriteArray,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Constraints,CollectionOrderedConstraint,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\CollectionConstraints.cs,doMatch,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Constraints,MsgUtils,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\MsgUtils.cs,EscapeControlChars,Cyclomatic complexity of the method is 13
Complex Method,NUnit.Framework.Constraints,Numerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\Numerics.cs,IsFixedPointNumeric,Cyclomatic complexity of the method is 11
Complex Method,NUnit.Framework.Constraints,Numerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Constraints,Numerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Constraints,Numerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,Cyclomatic complexity of the method is 9
Complex Method,NUnit.Framework.Constraints,NUnitComparer,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\NUnitComparer.cs,Compare,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Framework.Constraints,NUnitEqualityComparer,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\NUnitEqualityComparer.cs,ObjectsEqual,Cyclomatic complexity of the method is 16
Complex Method,NUnit.Framework.Constraints,NUnitEqualityComparer,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\NUnitEqualityComparer.cs,StreamsEqual,Cyclomatic complexity of the method is 10
Complex Method,NUnit.Framework.Constraints,PathConstraint,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\PathConstraints.cs,Canonicalize,Cyclomatic complexity of the method is 10
Long Parameter List,NUnit.Framework,Assert,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Assert.cs,AssertDoublesAreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,Assert,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Assert.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,Assert,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Assert.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' delta' message' args
Long Parameter List,NUnit.Framework,CollectionAssert,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\CollectionAssert.cs,AreEqual,The method has 5 parameters. Parameters: expected' actual' comparer' message' args
Long Parameter List,NUnit.Framework,CollectionAssert,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\CollectionAssert.cs,AreNotEqual,The method has 5 parameters. Parameters: expected' actual' comparer' message' args
Long Parameter List,NUnit.Framework,TextMessageWriter,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\TextMessageWriter.cs,DisplayStringDifferences,The method has 5 parameters. Parameters: expected' actual' mismatch' ignoreCase' clipping
Long Parameter List,NUnit.Framework.Constraints,ComparisonConstraint,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\ComparisonConstraints.cs,ComparisonConstraint,The method has 5 parameters. Parameters: value' ltOK' eqOK' gtOK' predicate
Long Parameter List,NUnit.Framework.Constraints,EqualConstraint,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\EqualConstraint.cs,DisplayFailurePoint,The method has 5 parameters. Parameters: writer' expected' actual' failurePoint' indent
Long Parameter List,NUnit.Framework.Constraints,MessageWriter,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\MessageWriter.cs,DisplayStringDifferences,The method has 5 parameters. Parameters: expected' actual' mismatch' ignoreCase' clipping
Long Statement,NUnit.Framework.Constraints,AttributeExistsConstraint,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\AttributeConstraints.cs,Matches,The length of the statement  "                throw new ArgumentException(string.Format("Actual value {0} does not implement ICustomAttributeProvider"' actual)' "actual"); " is 125.
Long Statement,NUnit.Framework.Constraints,AttributeConstraint,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\AttributeConstraints.cs,Matches,The length of the statement  "                throw new ArgumentException(string.Format("Actual value {0} does not implement ICustomAttributeProvider"' actual)' "actual"); " is 125.
Complex Conditional,NUnit.Framework.Constraints,NUnitEqualityComparer,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\NUnitEqualityComparer.cs,ObjectsEqual,The conditional expression  "x is IEnumerable && y is IEnumerable && !(x is string && y is string)"  is complex.
Magic Number,NUnit.Framework,CategoryAttribute,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Attributes\CategoryAttribute.cs,CategoryAttribute,The following statement contains a magic number: categoryName = categoryName.Substring( 0' categoryName.Length - 9 );
Magic Number,NUnit.Framework,PropertyAttribute,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Attributes\PropertyAttribute.cs,PropertyAttribute,The following statement contains a magic number: propertyName = propertyName.Substring( 0' propertyName.Length - 9 );
Magic Number,NUnit.Framework,RangeAttribute,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Attributes\RangeAttribute.cs,RangeAttribute,The following statement contains a magic number: double tol = step / 1000;
Magic Number,NUnit.Framework,RangeAttribute,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Attributes\RangeAttribute.cs,RangeAttribute,The following statement contains a magic number: float tol = step / 1000;
Magic Number,NUnit.Framework,TextMessageWriter,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\TextMessageWriter.cs,DisplayStringDifferences,The following statement contains a magic number: int maxDisplayLength = MaxLineLength                  - PrefixLength   // Allow for prefix                  - 2;
Magic Number,NUnit.Framework,TextMessageWriter,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\TextMessageWriter.cs,WriteCaretLine,The following statement contains a magic number: WriteLine("  {0}^"' new string('-'' PrefixLength + mismatch - 2 + 1));
Magic Number,NUnit.Framework.Constraints,Constraint,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\Constraint.cs,Constraint,The following statement contains a magic number: argcnt = 2;
Magic Number,NUnit.Framework.Constraints,Constraint,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\Constraint.cs,GetStringRepresentation,The following statement contains a magic number: switch (argcnt)              {                  default:                  case 0:                      return string.Format("<{0}>"' DisplayName);                  case 1:                      return string.Format("<{0} {1}>"' DisplayName' _displayable(arg1));                  case 2:                      return string.Format("<{0} {1} {2}>"' DisplayName' _displayable(arg1)' _displayable(arg2));              }
Magic Number,NUnit.Framework.Constraints,CollectionOperator,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\ConstraintOperators.cs,CollectionOperator,The following statement contains a magic number: this.right_precedence = 10;
Magic Number,NUnit.Framework.Constraints,WithOperator,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\ConstraintOperators.cs,WithOperator,The following statement contains a magic number: this.right_precedence = 4;
Magic Number,NUnit.Framework.Constraints,ThrowsOperator,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\ConstraintOperators.cs,ThrowsOperator,The following statement contains a magic number: this.right_precedence = 100;
Magic Number,NUnit.Framework.Constraints,AndOperator,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\ConstraintOperators.cs,AndOperator,The following statement contains a magic number: this.left_precedence = this.right_precedence = 2;
Magic Number,NUnit.Framework.Constraints,OrOperator,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\ConstraintOperators.cs,OrOperator,The following statement contains a magic number: this.left_precedence = this.right_precedence = 3;
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: uint leftSignMask = (leftUnion.UInt >> 31);
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: uint rightSignMask = (rightUnion.UInt >> 31);
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: ulong leftSignMask = (leftUnion.ULong >> 63);
Magic Number,NUnit.Framework.Constraints,FloatingPointNumerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\FloatingPointNumerics.cs,AreAlmostEqualUlps,The following statement contains a magic number: ulong rightSignMask = (rightUnion.ULong >> 63);
Magic Number,NUnit.Framework.Constraints,MsgUtils,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\MsgUtils.cs,ClipExpectedAndActual,The following statement contains a magic number: clipStart = Math.Max( 0' mismatch - clipLength / 2 );
Magic Number,NUnit.Framework.Constraints,Numerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.None:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      return Math.Abs(expected - actual) <= Convert.ToDouble(tolerance.Value);                    case ToleranceMode.Percent:                      if (expected == 0.0)                          return expected.Equals(actual);                                            double relativeError = Math.Abs((expected - actual) / expected);                      return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);  #if !NETCF_1_0                  case ToleranceMode.Ulps:                      return FloatingPointNumerics.AreAlmostEqualUlps(                          expected' actual' Convert.ToInt64(tolerance.Value));  #endif                  default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,Numerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.None:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      return Math.Abs(expected - actual) <= Convert.ToDouble(tolerance.Value);                    case ToleranceMode.Percent:                      if (expected == 0.0f)                          return expected.Equals(actual);                      float relativeError = Math.Abs((expected - actual) / expected);                      return (relativeError <= Convert.ToSingle(tolerance.Value) / 100.0f);  #if !NETCF_1_0                  case ToleranceMode.Ulps:                      return FloatingPointNumerics.AreAlmostEqualUlps(                          expected' actual' Convert.ToInt32(tolerance.Value));  #endif                  default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,Numerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.None:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      decimal decimalTolerance = Convert.ToDecimal(tolerance.Value);                      if(decimalTolerance > 0m)                        return Math.Abs(expected - actual) <= decimalTolerance;  				  			        return expected.Equals( actual );                    case ToleranceMode.Percent:                      if(expected == 0m)                          return expected.Equals(actual);                        double relativeError = Math.Abs(                          (double)(expected - actual) / (double)expected);                      return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                    default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,Numerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.None:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      ulong ulongTolerance = Convert.ToUInt64(tolerance.Value);                      if(ulongTolerance > 0ul)  			        {  				        ulong diff = expected >= actual ? expected - actual : actual - expected;                          return diff <= ulongTolerance;  			        }    			        return expected.Equals( actual );                    case ToleranceMode.Percent:                      if (expected == 0ul)                          return expected.Equals(actual);                        // Can't do a simple Math.Abs() here since it's unsigned                      ulong difference = Math.Max(expected' actual) - Math.Min(expected' actual);                      double relativeError = Math.Abs( (double)difference / (double)expected );                      return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                    default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,Numerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.None:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      long longTolerance = Convert.ToInt64(tolerance.Value);                      if(longTolerance > 0L)  				        return Math.Abs(expected - actual) <= longTolerance;    			        return expected.Equals( actual );                    case ToleranceMode.Percent:                      if(expected == 0L)                          return expected.Equals(actual);                        double relativeError = Math.Abs(                          (double)(expected - actual) / (double)expected);                      return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                    default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,Numerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.None:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      uint uintTolerance = Convert.ToUInt32(tolerance.Value);                      if(uintTolerance > 0)  			        {  				        uint diff = expected >= actual ? expected - actual : actual - expected;                          return diff <= uintTolerance;  			        }  				  			        return expected.Equals( actual );                    case ToleranceMode.Percent:                      if(expected == 0u)                          return expected.Equals(actual);                        // Can't do a simple Math.Abs() here since it's unsigned                      uint difference = Math.Max(expected' actual) - Math.Min(expected' actual);                      double relativeError = Math.Abs((double)difference / (double)expected );                      return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                    default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,Numerics,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\Numerics.cs,AreEqual,The following statement contains a magic number: switch (tolerance.Mode)              {                  case ToleranceMode.None:                      return expected.Equals(actual);                    case ToleranceMode.Linear:                      int intTolerance = Convert.ToInt32(tolerance.Value);                      if (intTolerance > 0)                          return Math.Abs(expected - actual) <= intTolerance;                        return expected.Equals(actual);                    case ToleranceMode.Percent:                      if (expected == 0)                          return expected.Equals(actual);                        double relativeError = Math.Abs(                          (double)(expected - actual) / (double)expected);                      return (relativeError <= Convert.ToDouble(tolerance.Value) / 100.0);                    default:                      throw new ArgumentException("Unknown tolerance mode specified"' "mode");              }
Magic Number,NUnit.Framework.Constraints,StartsWithConstraint,D:\research\architectureSmells\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitFramework\framework\Constraints\StringConstraints.cs,WriteDescriptionTo,The following statement contains a magic number: writer.WriteExpectedValue( MsgUtils.ClipString(expected' writer.MaxLineLength - 40' 0) );
