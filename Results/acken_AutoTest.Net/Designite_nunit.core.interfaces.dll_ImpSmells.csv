Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NUnit.Core.Extensibility,ParameterSet,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitCore\interfaces\Extensibility\ParameterSet.cs,FromDataSource,Cyclomatic complexity of the method is 10
Complex Conditional,NUnit.Core.Filters,NotFilter,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitCore\interfaces\Filters\NotFilter.cs,MatchDescendant,The conditional expression  "!test.IsSuite || test.Tests == null || topLevel && test.RunState == RunState.Explicit"  is complex.
Magic Number,NUnit.Core,RuntimeFramework,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitCore\interfaces\RuntimeFramework.cs,RuntimeFramework,The following statement contains a magic number: if (frameworkVersion.Major == 3)                 this.clrVersion = new Version(2' 0);             else if (runtime == RuntimeType.Mono && version.Major == 1)                 this.clrVersion = new Version(1' 1);
Magic Number,NUnit.Core,RuntimeFramework,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitCore\interfaces\RuntimeFramework.cs,RuntimeFramework,The following statement contains a magic number: if (frameworkVersion.Major == 3)                 this.clrVersion = new Version(2' 0);             else if (runtime == RuntimeType.Mono && version.Major == 1)                 this.clrVersion = new Version(1' 1);
Magic Number,NUnit.Core,RuntimeFramework,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitCore\interfaces\RuntimeFramework.cs,Parse,The following statement contains a magic number: if (parts.Length == 2)             {                 runtime = (RuntimeType)System.Enum.Parse(typeof(RuntimeType)' parts[0]' true);                 string vstring = parts[1];                 if (vstring != "")                     version = new Version(vstring);             }             else if (char.ToLower(s[0]) == 'v')             {                 version = new Version(s.Substring(1));             }             else if (IsRuntimeTypeName(s))             {                 runtime = (RuntimeType)System.Enum.Parse(typeof(RuntimeType)' s' true);             }             else             {                 version = new Version(s);             }
Magic Number,NUnit.Core,RuntimeFramework,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitCore\interfaces\RuntimeFramework.cs,AppendMonoFramework,The following statement contains a magic number: if (monoPrefix != null)              {                  string displayFmt = version != null                      ? "Mono " + version + " - {0} Profile"                      : "Mono {0} Profile";                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/1.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(1' 1' 4322));                      framework.displayName = string.Format(displayFmt' "1.0");                      frameworks.Add(framework);                  }                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/2.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(2' 0' 50727));                      framework.displayName = string.Format(displayFmt' "2.0");                      frameworks.Add(framework);                  }                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/4.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(4' 0' 30319));                      framework.displayName = string.Format(displayFmt' "4.0");                      frameworks.Add(framework);                  }              }
Magic Number,NUnit.Core,RuntimeFramework,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitCore\interfaces\RuntimeFramework.cs,AppendMonoFramework,The following statement contains a magic number: if (monoPrefix != null)              {                  string displayFmt = version != null                      ? "Mono " + version + " - {0} Profile"                      : "Mono {0} Profile";                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/1.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(1' 1' 4322));                      framework.displayName = string.Format(displayFmt' "1.0");                      frameworks.Add(framework);                  }                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/2.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(2' 0' 50727));                      framework.displayName = string.Format(displayFmt' "2.0");                      frameworks.Add(framework);                  }                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/4.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(4' 0' 30319));                      framework.displayName = string.Format(displayFmt' "4.0");                      frameworks.Add(framework);                  }              }
Magic Number,NUnit.Core,RuntimeFramework,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitCore\interfaces\RuntimeFramework.cs,AppendMonoFramework,The following statement contains a magic number: if (monoPrefix != null)              {                  string displayFmt = version != null                      ? "Mono " + version + " - {0} Profile"                      : "Mono {0} Profile";                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/1.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(1' 1' 4322));                      framework.displayName = string.Format(displayFmt' "1.0");                      frameworks.Add(framework);                  }                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/2.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(2' 0' 50727));                      framework.displayName = string.Format(displayFmt' "2.0");                      frameworks.Add(framework);                  }                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/4.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(4' 0' 30319));                      framework.displayName = string.Format(displayFmt' "4.0");                      frameworks.Add(framework);                  }              }
Magic Number,NUnit.Core,RuntimeFramework,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitCore\interfaces\RuntimeFramework.cs,AppendMonoFramework,The following statement contains a magic number: if (monoPrefix != null)              {                  string displayFmt = version != null                      ? "Mono " + version + " - {0} Profile"                      : "Mono {0} Profile";                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/1.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(1' 1' 4322));                      framework.displayName = string.Format(displayFmt' "1.0");                      frameworks.Add(framework);                  }                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/2.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(2' 0' 50727));                      framework.displayName = string.Format(displayFmt' "2.0");                      frameworks.Add(framework);                  }                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/4.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(4' 0' 30319));                      framework.displayName = string.Format(displayFmt' "4.0");                      frameworks.Add(framework);                  }              }
Magic Number,NUnit.Core,RuntimeFramework,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitCore\interfaces\RuntimeFramework.cs,AppendMonoFramework,The following statement contains a magic number: if (monoPrefix != null)              {                  string displayFmt = version != null                      ? "Mono " + version + " - {0} Profile"                      : "Mono {0} Profile";                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/1.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(1' 1' 4322));                      framework.displayName = string.Format(displayFmt' "1.0");                      frameworks.Add(framework);                  }                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/2.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(2' 0' 50727));                      framework.displayName = string.Format(displayFmt' "2.0");                      frameworks.Add(framework);                  }                    if (File.Exists(Path.Combine(monoPrefix' "lib/mono/4.0/mscorlib.dll")))                  {                      RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(4' 0' 30319));                      framework.displayName = string.Format(displayFmt' "4.0");                      frameworks.Add(framework);                  }              }
Missing Default,NUnit.Core,TestResult,C:\repos\acken_AutoTest.Net\lib\NUnit\src\NUnit-2.5.9.10348\src\NUnitCore\interfaces\TestResult.cs,AddResult,The following switch statement is missing a default case: switch (result.ResultState)             {                 case ResultState.Failure:                 case ResultState.Error:                     if (!this.IsFailure && !this.IsError)                         this.Failure("Child test failed"' null' FailureSite.Child);                     break;                 case ResultState.Success:                     if (this.ResultState == ResultState.Inconclusive)                         this.Success();                     break;                 case ResultState.Cancelled:                     this.SetResult(ResultState.Cancelled' result.Message' null' FailureSite.Child);                     break;             }
