Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CrossroadsIO,Context,D:\newReposJune17\jgoz_crossroads-net\src\Core\Context.cs,CreateSocket,Cyclomatic complexity of the method is 11
Complex Method,CrossroadsIO.Interop,SocketProxy,D:\newReposJune17\jgoz_crossroads-net\src\Core\Interop\SocketProxy.cs,Forward,Cyclomatic complexity of the method is 7
Long Parameter List,CrossroadsIO,SendReceiveExtensions,D:\newReposJune17\jgoz_crossroads-net\src\Core\SendReceiveExtensions.cs,Send,The method has 4 parameters.
Long Parameter List,CrossroadsIO,SendReceiveExtensions,D:\newReposJune17\jgoz_crossroads-net\src\Core\SendReceiveExtensions.cs,SendMore,The method has 4 parameters.
Long Parameter List,CrossroadsIO,Socket,D:\newReposJune17\jgoz_crossroads-net\src\Core\Socket.cs,Send,The method has 4 parameters.
Long Parameter List,CrossroadsIO,XsVersionException,D:\newReposJune17\jgoz_crossroads-net\src\Core\XsVersionException.cs,XsVersionException,The method has 4 parameters.
Long Parameter List,CrossroadsIO.Devices,ForwarderDevice,D:\newReposJune17\jgoz_crossroads-net\src\Core\Devices\ForwarderDevice.cs,ForwarderDevice,The method has 4 parameters.
Long Parameter List,CrossroadsIO.Devices,QueueDevice,D:\newReposJune17\jgoz_crossroads-net\src\Core\Devices\QueueDevice.cs,QueueDevice,The method has 4 parameters.
Long Parameter List,CrossroadsIO.Devices,StreamerDevice,D:\newReposJune17\jgoz_crossroads-net\src\Core\Devices\StreamerDevice.cs,StreamerDevice,The method has 4 parameters.
Long Parameter List,CrossroadsIO.Interop,LibXs,D:\newReposJune17\jgoz_crossroads-net\src\Core\Interop\LibXs.Mono.cs,xs_setctxopt,The method has 4 parameters.
Long Parameter List,CrossroadsIO.Interop,LibXs,D:\newReposJune17\jgoz_crossroads-net\src\Core\Interop\LibXs.Mono.cs,xs_setsockopt,The method has 4 parameters.
Long Parameter List,CrossroadsIO.Interop,LibXs,D:\newReposJune17\jgoz_crossroads-net\src\Core\Interop\LibXs.Mono.cs,xs_getsockopt,The method has 4 parameters.
Long Parameter List,CrossroadsIO.Interop,LibXs,D:\newReposJune17\jgoz_crossroads-net\src\Core\Interop\LibXs.Mono.cs,xs_getmsgopt,The method has 4 parameters.
Long Parameter List,CrossroadsIO.Interop,LibXs,D:\newReposJune17\jgoz_crossroads-net\src\Core\Interop\LibXs.Mono.cs,xs_msg_init_data,The method has 5 parameters.
Long Statement,CrossroadsIO,SendReceiveExtensions,D:\newReposJune17\jgoz_crossroads-net\src\Core\SendReceiveExtensions.cs,SendMessage,The length of the statement  "		throw new ArgumentException ("Unable to send an incomplete message. Ensure HasMore on the last Frame is set to 'false'."' "message"); " is 133.
Long Statement,CrossroadsIO,XsException,D:\newReposJune17\jgoz_crossroads-net\src\Core\XsException.cs,GetErrorName,The length of the statement  "	return CrossroadsIO.ErrorCode.ErrorNames.ContainsKey (errorCode) ? CrossroadsIO.ErrorCode.ErrorNames [errorCode] : "Error " + errorCode; " is 136.
Long Statement,CrossroadsIO,Socket,D:\newReposJune17\jgoz_crossroads-net\src\Core\Socket.cs,Receive,The length of the statement  "	return timeout == TimeSpan.MaxValue ? Receive (buffer) : ExecuteWithTimeout (() => Receive (buffer' SocketFlags.DontWait)' timeout); " is 132.
Long Statement,CrossroadsIO,Socket,D:\newReposJune17\jgoz_crossroads-net\src\Core\Socket.cs,Send,The length of the statement  "		throw new ArgumentOutOfRangeException ("size"' "Expected a non-negative value less than or equal to the buffer length."); " is 121.
Long Statement,CrossroadsIO,Socket,D:\newReposJune17\jgoz_crossroads-net\src\Core\Socket.cs,Send,The length of the statement  "	return timeout == TimeSpan.MaxValue ? Send (buffer' size' flags & ~SocketFlags.DontWait) : ExecuteWithTimeout (() => Send (buffer' size' flags | SocketFlags.DontWait)' timeout); " is 177.
Long Statement,CrossroadsIO.Interop,SocketProxy,D:\newReposJune17\jgoz_crossroads-net\src\Core\Interop\SocketProxy.cs,Forward,The length of the statement  "		if ((bytesSent = LibXs.xs_sendmsg (destinationHandle' _message' receiveMore == 1 ? (int)SocketFlags.SendMore : 0)) == -1) { " is 123.
Magic Number,CrossroadsIO,Socket,D:\newReposJune17\jgoz_crossroads-net\src\Core\Socket.cs,ExecuteWithTimeout,The following statement contains a magic number: do {  	receiveResult = method ();  	if (ReceiveStatus != ReceiveStatus.TryAgain || timeoutMilliseconds <= 1) {  		break;  	}  	if (iterations < 20 && ProcessorCount > 1) {  		// If we have a short wait (< 20 iterations) we SpinWait to allow other threads  		// on HyperThreaded CPUs to use the CPU. The more CPUs we have' the longer it's  		// acceptable to SpinWait since we stall the overall system less.  		Thread.SpinWait (100 * ProcessorCount);  	} else {  		Thread.Yield ();  	}  	++iterations;  } while (timer.Elapsed < timeout);  
Magic Number,CrossroadsIO,Socket,D:\newReposJune17\jgoz_crossroads-net\src\Core\Socket.cs,ExecuteWithTimeout,The following statement contains a magic number: do {  	receiveResult = method ();  	if (ReceiveStatus != ReceiveStatus.TryAgain || timeoutMilliseconds <= 1) {  		break;  	}  	if (iterations < 20 && ProcessorCount > 1) {  		// If we have a short wait (< 20 iterations) we SpinWait to allow other threads  		// on HyperThreaded CPUs to use the CPU. The more CPUs we have' the longer it's  		// acceptable to SpinWait since we stall the overall system less.  		Thread.SpinWait (100 * ProcessorCount);  	} else {  		Thread.Yield ();  	}  	++iterations;  } while (timer.Elapsed < timeout);  
Magic Number,CrossroadsIO,Socket,D:\newReposJune17\jgoz_crossroads-net\src\Core\Socket.cs,ExecuteWithTimeout,The following statement contains a magic number: if (iterations < 20 && ProcessorCount > 1) {  	// If we have a short wait (< 20 iterations) we SpinWait to allow other threads  	// on HyperThreaded CPUs to use the CPU. The more CPUs we have' the longer it's  	// acceptable to SpinWait since we stall the overall system less.  	Thread.SpinWait (100 * ProcessorCount);  } else {  	Thread.Yield ();  }  
Magic Number,CrossroadsIO,Socket,D:\newReposJune17\jgoz_crossroads-net\src\Core\Socket.cs,ExecuteWithTimeout,The following statement contains a magic number: if (iterations < 20 && ProcessorCount > 1) {  	// If we have a short wait (< 20 iterations) we SpinWait to allow other threads  	// on HyperThreaded CPUs to use the CPU. The more CPUs we have' the longer it's  	// acceptable to SpinWait since we stall the overall system less.  	Thread.SpinWait (100 * ProcessorCount);  } else {  	Thread.Yield ();  }  
Magic Number,CrossroadsIO,Socket,D:\newReposJune17\jgoz_crossroads-net\src\Core\Socket.cs,ExecuteWithTimeout,The following statement contains a magic number: Thread.SpinWait (100 * ProcessorCount);  
Magic Number,CrossroadsIO.Devices,Device,D:\newReposJune17\jgoz_crossroads-net\src\Core\Devices\Device.cs,Close,The following statement contains a magic number: if (IsRunning) {  	Stop ();  	Join (TimeSpan.FromMilliseconds (PollingIntervalMsec * 2));  }  
Magic Number,CrossroadsIO.Devices,Device,D:\newReposJune17\jgoz_crossroads-net\src\Core\Devices\Device.cs,Close,The following statement contains a magic number: Join (TimeSpan.FromMilliseconds (PollingIntervalMsec * 2));  
Magic Number,CrossroadsIO.Devices,Device,D:\newReposJune17\jgoz_crossroads-net\src\Core\Devices\Device.cs,Dispose,The following statement contains a magic number: if (IsRunning) {  	Stop ();  	Join (TimeSpan.FromMilliseconds (PollingIntervalMsec * 2));  }  
Magic Number,CrossroadsIO.Devices,Device,D:\newReposJune17\jgoz_crossroads-net\src\Core\Devices\Device.cs,Dispose,The following statement contains a magic number: Join (TimeSpan.FromMilliseconds (PollingIntervalMsec * 2));  
Magic Number,CrossroadsIO.Interop,SocketProxy,D:\newReposJune17\jgoz_crossroads-net\src\Core\Interop\SocketProxy.cs,GetReceiveMore,The following statement contains a magic number: if (LibXs.MajorVersion >= 3) {  	return GetSocketOption ((int)SocketOption.RCVMORE' out receiveMore);  }  
Missing Default,CrossroadsIO,Context,D:\newReposJune17\jgoz_crossroads-net\src\Core\Context.cs,CreateSocket,The following switch statement is missing a default case: switch (socketType) {  case SocketType.REQ:  case SocketType.REP:  case SocketType.XREQ:  case SocketType.XREP:  case SocketType.XPUB:  case SocketType.PAIR:  	return CreateSocket (sp => new DuplexSocket (sp' socketType)' socketType);  case SocketType.PUSH:  case SocketType.PUB:  	return CreateSocket (sp => new SendSocket (sp' socketType)' socketType);  case SocketType.PULL:  	return CreateSocket (sp => new ReceiveSocket (sp' socketType)' socketType);  case SocketType.SUB:  	return CreateSocket (sp => new SubscribeSocket (sp' socketType)' socketType);  case SocketType.XSUB:  	return CreateSocket (sp => new SubscribeExtSocket (sp' socketType)' socketType);  }  
