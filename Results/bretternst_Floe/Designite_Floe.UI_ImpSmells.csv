Implementation smell,Namespace,Class,File,Method,Description
Long Method,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,OnRender,The method has 108 lines of code.
Long Method,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The method has 384 lines of code.
Long Method,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The method has 345 lines of code.
Long Method,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The method has 133 lines of code.
Complex Method,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,WndProc,Cyclomatic complexity of the method is 13
Complex Method,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,Cyclomatic complexity of the method is 13
Complex Method,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,Cyclomatic complexity of the method is 12
Complex Method,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,Cyclomatic complexity of the method is 9
Complex Method,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,Cyclomatic complexity of the method is 74
Complex Method,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Split,Cyclomatic complexity of the method is 8
Complex Method,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_PrivateMessaged,Cyclomatic complexity of the method is 11
Complex Method,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,Cyclomatic complexity of the method is 21
Complex Method,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,OnPreviewKeyDown,Cyclomatic complexity of the method is 17
Complex Method,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,DoNickCompletion,Cyclomatic complexity of the method is 10
Complex Method,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,Cyclomatic complexity of the method is 47
Complex Method,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,ExecuteCloseTab,Cyclomatic complexity of the method is 9
Complex Method,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,Cyclomatic complexity of the method is 10
Complex Method,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,WndProc,Cyclomatic complexity of the method is 16
Complex Method,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,Cyclomatic complexity of the method is 18
Complex Method,Floe.UI,SecondsToFriendlyTimeConverter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Converters.cs,Convert,Cyclomatic complexity of the method is 9
Complex Method,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,Cyclomatic complexity of the method is 15
Complex Method,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,Connect,Cyclomatic complexity of the method is 12
Complex Method,Floe.UI.Settings,NetworkSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\NetworkSettingsControl.xaml.cs,Connect,Cyclomatic complexity of the method is 11
Complex Method,Floe.UI.Settings,DccSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\DccSettingsControl.xaml.cs,Connect,Cyclomatic complexity of the method is 10
Complex Method,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,Cyclomatic complexity of the method is 22
Complex Method,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,Cyclomatic complexity of the method is 16
Complex Method,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,Cyclomatic complexity of the method is 17
Complex Method,Floe.UI.Settings,UserSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\UserSettingsControl.xaml.cs,Connect,Cyclomatic complexity of the method is 9
Long Parameter List,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,WndProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,Floe.UI,ChatFormatter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatFormatter.cs,Format,The method has 6 parameters. Parameters: text' spans' width' foreground' background' textWrapping
Long Parameter List,Floe.UI,CustomTextRunProperties,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatFormatter.cs,CustomTextRunProperties,The method has 5 parameters. Parameters: typeface' fontSize' foreground' background' underline
Long Parameter List,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,ChatLine,The method has 6 parameters. Parameters: colorKey' time' nickHashCode' nick' text' decoration
Long Parameter List,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,ChatLine,The method has 5 parameters. Parameters: colorKey' nickHashCode' nick' text' decoration
Long Parameter List,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,FindSelectedArea,The method has 7 parameters. Parameters: idx' txtLen' txtOffset' x' line' start' end
Long Parameter List,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,GetSelectedText,The method has 5 parameters. Parameters: idx' s' output' start' end
Long Parameter List,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The method has 5 parameters. Parameters: server' port' useSsl' autoReconnect' password
Long Parameter List,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Write,The method has 5 parameters. Parameters: styleKey' nickHashCode' nick' text' attn
Long Parameter List,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Split,The method has 5 parameters. Parameters: command' args' minArgs' maxArgs' isChannelRequired
Long Parameter List,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,WndProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,Floe.UI.Interop,NotifyIcon,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\NotifyIcon.cs,WndProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Statement,Floe.UI,App,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Application\App_Ignore.cs,LogUnhandledException,The length of the statement  "				sw.WriteLine(string.Format("-{2}{0}{2}{1}{2}"' DateTime.Now.ToString()' exceptionObject.ToString()' Environment.NewLine)); " is 122.
Long Statement,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Floe;component/channelwindow/channelwindow.xaml"' System.UriKind.Relative); " is 121.
Long Statement,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat); " is 130.
Long Statement,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings); " is 134.
Long Statement,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach); " is 134.
Long Statement,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize); " is 134.
Long Statement,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize); " is 134.
Long Statement,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose); " is 131.
Long Statement,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose); " is 138.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,DoPerform,The length of the statement  "			var commands = this.Perform.Split(Environment.NewLine.ToCharArray()).Where((s) => s.Trim().Length > 0).Select((s) => s.Trim()).ToArray(); " is 137.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,DeletePortForwarding,The length of the statement  "				NatHelper.BeginDeleteForwardingRule(_port' System.Net.Sockets.ProtocolType.Tcp' (ar) => NatHelper.EndDeleteForwardingRule(ar)); " is 127.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,connect_Click,The length of the statement  "			var item = ((MenuItem)boxOutput.ContextMenu.Items[0]).ItemContainerGenerator.ItemFromContainer((DependencyObject)e.OriginalSource) " is 130.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois); " is 131.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand); " is 149.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink); " is 134.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink); " is 134.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit); " is 130.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand); " is 149.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear); " is 131.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert); " is 132.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp); " is 128.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp); " is 137.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop); " is 130.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp); " is 137.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice); " is 131.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp); " is 137.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice); " is 133.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp); " is 137.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick); " is 130.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp); " is 137.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan); " is 129.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp); " is 137.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban); " is 131.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp); " is 137.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch); " is 132.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious); " is 140.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext); " is 136.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap); " is 130.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat); " is 133.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit); " is 133.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend); " is 133.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel); " is 138.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList); " is 130.
Long Statement,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin); " is 130.
Long Statement,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat); " is 130.
Long Statement,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab); " is 134.
Long Statement,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab); " is 141.
Long Statement,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab); " is 132.
Long Statement,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach); " is 132.
Long Statement,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab); " is 137.
Long Statement,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab); " is 144.
Long Statement,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab); " is 133.
Long Statement,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab); " is 140.
Long Statement,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings); " is 134.
Long Statement,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize); " is 134.
Long Statement,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize); " is 134.
Long Statement,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose); " is 131.
Long Statement,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,StartReceive,The length of the statement  "			this.CheckFileExtension(_fileInfo.Extension.StartsWith("."' StringComparison.Ordinal) && _fileInfo.Extension.Length > 1 ? _fileInfo.Extension.Substring(1) : _fileInfo.Extension); " is 178.
Long Statement,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,CanClose,The length of the statement  "				return App.Confirm(Window.GetWindow(this)' "Are you sure you want to cancel this transfer in progress?"' "Confirm Close"); " is 122.
Long Statement,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Accept,The length of the statement  "					_dcc = new DccXmitReceiver(_fileInfo) { ForceOverwrite = forceOverwrite' ForceResume = chkForceResume.IsChecked == true }; " is 122.
Long Statement,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,DeletePortForwarding,The length of the statement  "				NatHelper.BeginDeleteForwardingRule(_port' System.Net.Sockets.ProtocolType.Tcp' (ar) => NatHelper.EndDeleteForwardingRule(ar)); " is 127.
Long Statement,Floe.UI,ListControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ListControl\ListControl.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin); " is 130.
Long Statement,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Floe;component/settings/buffersettingscontrol.xaml"' System.UriKind.Relative); " is 124.
Long Statement,Floe.UI.Settings,ColorsSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ColorsSettingsControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Floe;component/settings/colorssettingscontrol.xaml"' System.UriKind.Relative); " is 124.
Long Statement,Floe.UI.Settings,NetworkSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\NetworkSettingsControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Floe;component/settings/networksettingscontrol.xaml"' System.UriKind.Relative); " is 125.
Long Statement,Floe.UI.Settings,SoundSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\SoundSettingsControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Floe;component/settings/soundsettingscontrol.xaml"' System.UriKind.Relative); " is 123.
Long Statement,Floe.UI.Settings,DccSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\DccSettingsControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Floe;component/settings/dccsettingscontrol.xaml"' System.UriKind.Relative); " is 121.
Long Statement,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Floe;component/settings/windowsettingscontrol.xaml"' System.UriKind.Relative); " is 124.
Long Statement,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Floe;component/settings/formattingsettingscontrol.xaml"' System.UriKind.Relative); " is 128.
Long Statement,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,btnNew_Click,The length of the statement  "			while (App.Settings.Current.Servers.OfType<ServerElement>().Any((s) => s.Name == (server.Name = string.Format(newName' i)))) " is 124.
Long Statement,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Floe;component/settings/serversettingscontrol.xaml"' System.UriKind.Relative); " is 124.
Long Statement,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The length of the statement  "            this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated); " is 125.
Long Statement,Floe.UI.Settings,SettingsWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\SettingsWindow.xaml.cs,Connect,The length of the statement  "            this.lstCategories.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.lstCategories_SelectionChanged); " is 133.
Long Statement,Floe.UI.Settings,UserSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\UserSettingsControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Floe;component/settings/usersettingscontrol.xaml"' System.UriKind.Relative); " is 122.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,Floe.UI,App,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Application\App_Ignore.cs,IsAttentionMatch,The conditional expression  "App.Settings.Current.Formatting.AttentionOnOwnNickname && (  					text.IndexOf(nickname' StringComparison.OrdinalIgnoreCase) >= 0 ||  					text.IndexOf(App.Settings.Current.User.Nickname' StringComparison.OrdinalIgnoreCase) >= 0 ||  					(!string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname) &&   					text.IndexOf(App.Settings.Current.User.AlternateNickname' StringComparison.OrdinalIgnoreCase) >= 0))"  is complex.
Complex Conditional,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,WndProc,The conditional expression  "(this.ActualWidth - p.X <= ResizeWidth * 2.0 && this.ActualHeight - p.Y <= ResizeHeight) ||  					(this.ActualWidth - p.X <= ResizeWidth && this.ActualHeight - p.Y <= ResizeHeight * 2)"  is complex.
Complex Conditional,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The conditional expression  "ichar == 2 || ichar == 3 || ichar == 15 || ichar == 22 || ichar == 31"  is complex.
Complex Conditional,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The conditional expression  "i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							)"  is complex.
Complex Conditional,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The conditional expression  "i == last || i + 1 == last || raw[i + 1] != ''' || raw[i + 2] < '0' || raw[i + 2] > '9'"  is complex.
Complex Conditional,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The conditional expression  "i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							)"  is complex.
Complex Conditional,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,OnPropertyChanged,The conditional expression  "e.Property == Control.FontFamilyProperty ||  				e.Property == Control.FontSizeProperty ||  				e.Property == Control.FontStyleProperty ||  				e.Property == Control.FontWeightProperty ||  				e.Property == ChatBoxBase.PaletteProperty ||  				e.Property == ChatBoxBase.ShowTimestampProperty ||  				e.Property == ChatBoxBase.TimestampFormatProperty ||  				e.Property == ChatBoxBase.UseTabularViewProperty ||  				e.Property == ChatBoxBase.ColorizeNicknamesProperty ||  				e.Property == ChatBoxBase.NewMarkerColorProperty ||  				e.Property == ChatBoxBase.NicknameColorSeedProperty ||  				e.Property == ChatBoxBase.DividerBrushProperty ||  				e.Property == ChatBoxBase.BackgroundProperty ||  				e.Property == ChatBoxBase.HighlightColorProperty"  is complex.
Complex Conditional,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,HitTest,The conditional expression  "p.Y >= block.Y && p.Y < block.Y + block.Nick.Height &&  					p.X >= block.NickX && p.X < block.NickX + block.Nick.Width &&  					block.Source.Nick != null"  is complex.
Complex Conditional,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,HitTest,The conditional expression  "line >= 0 && line < block.Text.Length && p.X >= block.TextX && p.X < block.TextX + block.Text[line].Width"  is complex.
Complex Conditional,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_PrivateMessaged,The conditional expression  "(this.Target.IsChannel && this.Target.Equals(e.To)) ||  					(!this.Target.IsChannel && this.Target.Equals(new IrcTarget(e.From)) && !e.To.IsChannel)"  is complex.
Complex Conditional,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The conditional expression  "!e.Handled && ((int)e.Code < 200 && this.IsServer || this.IsDefault)"  is complex.
Complex Conditional,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_CtcpCommandReceived,The conditional expression  "((this.IsChannel && this.Target.Equals(e.To)) ||  				(this.IsNickname && this.Target.Equals(new IrcTarget(e.From)) && !e.To.IsChannel))  				&& e.Command.Command == "ACTION""  is complex.
Complex Conditional,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The conditional expression  "args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port)"  is complex.
Complex Conditional,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The conditional expression  "args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port)"  is complex.
Complex Conditional,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,session_RawMessageReceived,The conditional expression  "e.Message.Command == "PRIVMSG" && e.Message.Parameters.Count == 2  				&& (!CtcpCommand.IsCtcpCommand(e.Message.Parameters[1]) ||  				CtcpCommand.Parse(e.Message.Parameters[1]).Command == "ACTION")"  is complex.
Complex Conditional,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,WndProc,The conditional expression  "(this.ActualWidth - p.X <= ResizeWidth * 2.0 && this.ActualHeight - p.Y <= ResizeHeight) ||  							(this.ActualWidth - p.X <= ResizeWidth && this.ActualHeight - p.Y <= ResizeHeight * 2)"  is complex.
Empty Catch Block,Floe.UI,App,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Application\App_Ignore.cs,RefreshAttentionPatterns,The method has an empty catch block.
Empty Catch Block,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,OnMouseLeftButtonUp,The method has an empty catch block.
Empty Catch Block,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,ExecuteQuit,The method has an empty catch block.
Magic Number,Floe.UI,LogFileHandle,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Application\App_Logging.cs,FillBuffer,The following statement contains a magic number: reader.BaseStream.Seek(Math.Max(0' reader.BaseStream.Length - (512 * (linesToRead + 1)))' SeekOrigin.Begin);
Magic Number,Floe.UI,LogFileHandle,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Application\App_Logging.cs,WriteLine,The following statement contains a magic number: s = s.Substring(0' 512);
Magic Number,Floe.UI,LogFileHandle,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Application\App_Logging.cs,WriteLine,The following statement contains a magic number: s.Length > 512
Magic Number,Floe.UI,LogFileHandle,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Application\App_Logging.cs,Parse,The following statement contains a magic number: parts.Length != 5
Magic Number,Floe.UI,LogFileHandle,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Application\App_Logging.cs,Parse,The following statement contains a magic number: !int.TryParse(parts[2]' out hashCode)
Magic Number,Floe.UI,LogFileHandle,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Application\App_Logging.cs,Parse,The following statement contains a magic number: return new ChatLine(parts[0]' time' hashCode' parts[3] == "*" ? null : parts[3]' parts[4]' ChatMarker.None);
Magic Number,Floe.UI,LogFileHandle,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Application\App_Logging.cs,Parse,The following statement contains a magic number: return new ChatLine(parts[0]' time' hashCode' parts[3] == "*" ? null : parts[3]' parts[4]' ChatMarker.None);
Magic Number,Floe.UI,LogFileHandle,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Application\App_Logging.cs,Parse,The following statement contains a magic number: return new ChatLine(parts[0]' time' hashCode' parts[3] == "*" ? null : parts[3]' parts[4]' ChatMarker.None);
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,ChannelWindow,The following statement contains a magic number: page.SetValue(Grid.ColumnSpanProperty' 2);
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,WndProc,The following statement contains a magic number: var p = new Point(lParam.ToInt32() & 0xFFFF' lParam.ToInt32() >> 16);
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,WndProc,The following statement contains a magic number: (this.ActualWidth - p.X <= ResizeWidth * 2.0 && this.ActualHeight - p.Y <= ResizeHeight) ||  					(this.ActualWidth - p.X <= ResizeWidth && this.ActualHeight - p.Y <= ResizeHeight * 2)
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,WndProc,The following statement contains a magic number: (this.ActualWidth - p.X <= ResizeWidth * 2.0 && this.ActualHeight - p.Y <= ResizeHeight) ||  					(this.ActualWidth - p.X <= ResizeWidth && this.ActualHeight - p.Y <= ResizeHeight * 2)
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChannelWindow)(target));              return;              case 2:                            #line 10 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 11 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 4:                            #line 12 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose);                            #line default              #line hidden              return;              case 8:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.btnReattach = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 11:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChannelWindow)(target));              return;              case 2:                            #line 10 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 11 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 4:                            #line 12 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose);                            #line default              #line hidden              return;              case 8:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.btnReattach = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 11:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChannelWindow)(target));              return;              case 2:                            #line 10 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 11 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 4:                            #line 12 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose);                            #line default              #line hidden              return;              case 8:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.btnReattach = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 11:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChannelWindow)(target));              return;              case 2:                            #line 10 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 11 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 4:                            #line 12 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose);                            #line default              #line hidden              return;              case 8:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.btnReattach = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 11:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChannelWindow)(target));              return;              case 2:                            #line 10 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 11 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 4:                            #line 12 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose);                            #line default              #line hidden              return;              case 8:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.btnReattach = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 11:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChannelWindow)(target));              return;              case 2:                            #line 10 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 11 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 4:                            #line 12 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose);                            #line default              #line hidden              return;              case 8:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.btnReattach = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 11:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChannelWindow)(target));              return;              case 2:                            #line 10 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 11 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 4:                            #line 12 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose);                            #line default              #line hidden              return;              case 8:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.btnReattach = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 11:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChannelWindow)(target));              return;              case 2:                            #line 10 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 11 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 4:                            #line 12 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose);                            #line default              #line hidden              return;              case 8:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.btnReattach = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 11:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChannelWindow)(target));              return;              case 2:                            #line 10 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 11 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 4:                            #line 12 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose);                            #line default              #line hidden              return;              case 8:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.btnReattach = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 11:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChannelWindow)(target));              return;              case 2:                            #line 10 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 11 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 4:                            #line 12 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose);                            #line default              #line hidden              return;              case 8:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.btnReattach = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 11:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChannelWindow)(target));              return;              case 2:                            #line 10 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 11 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 4:                            #line 12 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose);                            #line default              #line hidden              return;              case 8:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.btnReattach = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 11:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChannelWindow)(target));              return;              case 2:                            #line 10 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 11 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 4:                            #line 12 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose);                            #line default              #line hidden              return;              case 8:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.btnReattach = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 11:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: ichar == 2 || ichar == 3 || ichar == 15 || ichar == 22 || ichar == 31
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: ichar == 2 || ichar == 3 || ichar == 15 || ichar == 22 || ichar == 31
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: ichar == 2 || ichar == 3 || ichar == 15 || ichar == 22 || ichar == 31
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: ichar == 2 || ichar == 3 || ichar == 15 || ichar == 22 || ichar == 31
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: ichar == 2 || ichar == 3 || ichar == 15 || ichar == 22 || ichar == 31
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: switch (ichar)  				{  					case 2:  						span.Flags ^= ChatSpanFlags.Bold;  						break;  					case 3:  						if (i == last || (raw[i + 1] > '9' || raw[i + 1] < '0'))  						{  							span.Flags &= ~ChatSpanFlags.Foreground;  							span.Flags &= ~ChatSpanFlags.Background;  							break;  						}  						span.Flags |= ChatSpanFlags.Foreground;  						int c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Foreground = (byte)Math.Min(15' c);  						if (i == last || i + 1 == last || raw[i + 1] != ''' || raw[i + 2] < '0' || raw[i + 2] > '9')  						{  							break;  						}  						span.Flags |= ChatSpanFlags.Background;  						++i;  						c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Background = (byte)Math.Min(15' c);  						break;  					case 15:  						span.Flags = ChatSpanFlags.None;  						break;  					case 22:  						span.Flags ^= ChatSpanFlags.Reverse;  						break;  					case 31:  						span.Flags ^= ChatSpanFlags.Underline;  						break;  					default:  						text.Append(raw[i]);  						idx++;  						break;  				}
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: switch (ichar)  				{  					case 2:  						span.Flags ^= ChatSpanFlags.Bold;  						break;  					case 3:  						if (i == last || (raw[i + 1] > '9' || raw[i + 1] < '0'))  						{  							span.Flags &= ~ChatSpanFlags.Foreground;  							span.Flags &= ~ChatSpanFlags.Background;  							break;  						}  						span.Flags |= ChatSpanFlags.Foreground;  						int c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Foreground = (byte)Math.Min(15' c);  						if (i == last || i + 1 == last || raw[i + 1] != ''' || raw[i + 2] < '0' || raw[i + 2] > '9')  						{  							break;  						}  						span.Flags |= ChatSpanFlags.Background;  						++i;  						c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Background = (byte)Math.Min(15' c);  						break;  					case 15:  						span.Flags = ChatSpanFlags.None;  						break;  					case 22:  						span.Flags ^= ChatSpanFlags.Reverse;  						break;  					case 31:  						span.Flags ^= ChatSpanFlags.Underline;  						break;  					default:  						text.Append(raw[i]);  						idx++;  						break;  				}
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: switch (ichar)  				{  					case 2:  						span.Flags ^= ChatSpanFlags.Bold;  						break;  					case 3:  						if (i == last || (raw[i + 1] > '9' || raw[i + 1] < '0'))  						{  							span.Flags &= ~ChatSpanFlags.Foreground;  							span.Flags &= ~ChatSpanFlags.Background;  							break;  						}  						span.Flags |= ChatSpanFlags.Foreground;  						int c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Foreground = (byte)Math.Min(15' c);  						if (i == last || i + 1 == last || raw[i + 1] != ''' || raw[i + 2] < '0' || raw[i + 2] > '9')  						{  							break;  						}  						span.Flags |= ChatSpanFlags.Background;  						++i;  						c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Background = (byte)Math.Min(15' c);  						break;  					case 15:  						span.Flags = ChatSpanFlags.None;  						break;  					case 22:  						span.Flags ^= ChatSpanFlags.Reverse;  						break;  					case 31:  						span.Flags ^= ChatSpanFlags.Underline;  						break;  					default:  						text.Append(raw[i]);  						idx++;  						break;  				}
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: switch (ichar)  				{  					case 2:  						span.Flags ^= ChatSpanFlags.Bold;  						break;  					case 3:  						if (i == last || (raw[i + 1] > '9' || raw[i + 1] < '0'))  						{  							span.Flags &= ~ChatSpanFlags.Foreground;  							span.Flags &= ~ChatSpanFlags.Background;  							break;  						}  						span.Flags |= ChatSpanFlags.Foreground;  						int c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Foreground = (byte)Math.Min(15' c);  						if (i == last || i + 1 == last || raw[i + 1] != ''' || raw[i + 2] < '0' || raw[i + 2] > '9')  						{  							break;  						}  						span.Flags |= ChatSpanFlags.Background;  						++i;  						c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Background = (byte)Math.Min(15' c);  						break;  					case 15:  						span.Flags = ChatSpanFlags.None;  						break;  					case 22:  						span.Flags ^= ChatSpanFlags.Reverse;  						break;  					case 31:  						span.Flags ^= ChatSpanFlags.Underline;  						break;  					default:  						text.Append(raw[i]);  						idx++;  						break;  				}
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: switch (ichar)  				{  					case 2:  						span.Flags ^= ChatSpanFlags.Bold;  						break;  					case 3:  						if (i == last || (raw[i + 1] > '9' || raw[i + 1] < '0'))  						{  							span.Flags &= ~ChatSpanFlags.Foreground;  							span.Flags &= ~ChatSpanFlags.Background;  							break;  						}  						span.Flags |= ChatSpanFlags.Foreground;  						int c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Foreground = (byte)Math.Min(15' c);  						if (i == last || i + 1 == last || raw[i + 1] != ''' || raw[i + 2] < '0' || raw[i + 2] > '9')  						{  							break;  						}  						span.Flags |= ChatSpanFlags.Background;  						++i;  						c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Background = (byte)Math.Min(15' c);  						break;  					case 15:  						span.Flags = ChatSpanFlags.None;  						break;  					case 22:  						span.Flags ^= ChatSpanFlags.Reverse;  						break;  					case 31:  						span.Flags ^= ChatSpanFlags.Underline;  						break;  					default:  						text.Append(raw[i]);  						idx++;  						break;  				}
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: switch (ichar)  				{  					case 2:  						span.Flags ^= ChatSpanFlags.Bold;  						break;  					case 3:  						if (i == last || (raw[i + 1] > '9' || raw[i + 1] < '0'))  						{  							span.Flags &= ~ChatSpanFlags.Foreground;  							span.Flags &= ~ChatSpanFlags.Background;  							break;  						}  						span.Flags |= ChatSpanFlags.Foreground;  						int c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Foreground = (byte)Math.Min(15' c);  						if (i == last || i + 1 == last || raw[i + 1] != ''' || raw[i + 2] < '0' || raw[i + 2] > '9')  						{  							break;  						}  						span.Flags |= ChatSpanFlags.Background;  						++i;  						c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Background = (byte)Math.Min(15' c);  						break;  					case 15:  						span.Flags = ChatSpanFlags.None;  						break;  					case 22:  						span.Flags ^= ChatSpanFlags.Reverse;  						break;  					case 31:  						span.Flags ^= ChatSpanFlags.Underline;  						break;  					default:  						text.Append(raw[i]);  						idx++;  						break;  				}
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: switch (ichar)  				{  					case 2:  						span.Flags ^= ChatSpanFlags.Bold;  						break;  					case 3:  						if (i == last || (raw[i + 1] > '9' || raw[i + 1] < '0'))  						{  							span.Flags &= ~ChatSpanFlags.Foreground;  							span.Flags &= ~ChatSpanFlags.Background;  							break;  						}  						span.Flags |= ChatSpanFlags.Foreground;  						int c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Foreground = (byte)Math.Min(15' c);  						if (i == last || i + 1 == last || raw[i + 1] != ''' || raw[i + 2] < '0' || raw[i + 2] > '9')  						{  							break;  						}  						span.Flags |= ChatSpanFlags.Background;  						++i;  						c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Background = (byte)Math.Min(15' c);  						break;  					case 15:  						span.Flags = ChatSpanFlags.None;  						break;  					case 22:  						span.Flags ^= ChatSpanFlags.Reverse;  						break;  					case 31:  						span.Flags ^= ChatSpanFlags.Underline;  						break;  					default:  						text.Append(raw[i]);  						idx++;  						break;  				}
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: switch (ichar)  				{  					case 2:  						span.Flags ^= ChatSpanFlags.Bold;  						break;  					case 3:  						if (i == last || (raw[i + 1] > '9' || raw[i + 1] < '0'))  						{  							span.Flags &= ~ChatSpanFlags.Foreground;  							span.Flags &= ~ChatSpanFlags.Background;  							break;  						}  						span.Flags |= ChatSpanFlags.Foreground;  						int c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Foreground = (byte)Math.Min(15' c);  						if (i == last || i + 1 == last || raw[i + 1] != ''' || raw[i + 2] < '0' || raw[i + 2] > '9')  						{  							break;  						}  						span.Flags |= ChatSpanFlags.Background;  						++i;  						c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Background = (byte)Math.Min(15' c);  						break;  					case 15:  						span.Flags = ChatSpanFlags.None;  						break;  					case 22:  						span.Flags ^= ChatSpanFlags.Reverse;  						break;  					case 31:  						span.Flags ^= ChatSpanFlags.Underline;  						break;  					default:  						text.Append(raw[i]);  						idx++;  						break;  				}
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: switch (ichar)  				{  					case 2:  						span.Flags ^= ChatSpanFlags.Bold;  						break;  					case 3:  						if (i == last || (raw[i + 1] > '9' || raw[i + 1] < '0'))  						{  							span.Flags &= ~ChatSpanFlags.Foreground;  							span.Flags &= ~ChatSpanFlags.Background;  							break;  						}  						span.Flags |= ChatSpanFlags.Foreground;  						int c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Foreground = (byte)Math.Min(15' c);  						if (i == last || i + 1 == last || raw[i + 1] != ''' || raw[i + 2] < '0' || raw[i + 2] > '9')  						{  							break;  						}  						span.Flags |= ChatSpanFlags.Background;  						++i;  						c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Background = (byte)Math.Min(15' c);  						break;  					case 15:  						span.Flags = ChatSpanFlags.None;  						break;  					case 22:  						span.Flags ^= ChatSpanFlags.Reverse;  						break;  					case 31:  						span.Flags ^= ChatSpanFlags.Underline;  						break;  					default:  						text.Append(raw[i]);  						idx++;  						break;  				}
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: switch (ichar)  				{  					case 2:  						span.Flags ^= ChatSpanFlags.Bold;  						break;  					case 3:  						if (i == last || (raw[i + 1] > '9' || raw[i + 1] < '0'))  						{  							span.Flags &= ~ChatSpanFlags.Foreground;  							span.Flags &= ~ChatSpanFlags.Background;  							break;  						}  						span.Flags |= ChatSpanFlags.Foreground;  						int c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Foreground = (byte)Math.Min(15' c);  						if (i == last || i + 1 == last || raw[i + 1] != ''' || raw[i + 2] < '0' || raw[i + 2] > '9')  						{  							break;  						}  						span.Flags |= ChatSpanFlags.Background;  						++i;  						c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Background = (byte)Math.Min(15' c);  						break;  					case 15:  						span.Flags = ChatSpanFlags.None;  						break;  					case 22:  						span.Flags ^= ChatSpanFlags.Reverse;  						break;  					case 31:  						span.Flags ^= ChatSpanFlags.Underline;  						break;  					default:  						text.Append(raw[i]);  						idx++;  						break;  				}
Magic Number,Floe.UI,ChatLine,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatLine.cs,Process,The following statement contains a magic number: switch (ichar)  				{  					case 2:  						span.Flags ^= ChatSpanFlags.Bold;  						break;  					case 3:  						if (i == last || (raw[i + 1] > '9' || raw[i + 1] < '0'))  						{  							span.Flags &= ~ChatSpanFlags.Foreground;  							span.Flags &= ~ChatSpanFlags.Background;  							break;  						}  						span.Flags |= ChatSpanFlags.Foreground;  						int c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Foreground = (byte)Math.Min(15' c);  						if (i == last || i + 1 == last || raw[i + 1] != ''' || raw[i + 2] < '0' || raw[i + 2] > '9')  						{  							break;  						}  						span.Flags |= ChatSpanFlags.Background;  						++i;  						c = (int)(raw[++i] - '0');  						if (i < last && (  							(c == 0 && raw[i + 1] >= '0' && raw[i + 1] <= '9') ||  							(c == 1 && raw[i + 1] >= '0' && raw[i + 1] <= '5')  							))  						{  							c *= 10;  							c += (int)raw[++i] - '0';  						}  						span.Background = (byte)Math.Min(15' c);  						break;  					case 15:  						span.Flags = ChatSpanFlags.None;  						break;  					case 22:  						span.Flags ^= ChatSpanFlags.Reverse;  						break;  					case 31:  						span.Flags ^= ChatSpanFlags.Underline;  						break;  					default:  						text.Append(raw[i]);  						idx++;  						break;  				}
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,ChatPresenter,The following statement contains a magic number: this.Loaded += (sender' e) =>  				{  					if (_isAutoScrolling)  					{  						this.ScrollToEnd();  					}  					if (_selectBrush == null)  					{  						var c = this.HighlightColor;  						c.A = 102;  						_selectBrush = new SolidColorBrush(c);  					}  				};
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,GetNickColor,The following statement contains a magic number: float bgv = (float)Math.Max(Math.Max(this.BackgroundColor.R' this.BackgroundColor.G)' this.BackgroundColor.B) / 255f;
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,GetNickColor,The following statement contains a magic number: float v = (float)rand.NextDouble() * NickBrightnessBand + (bgv < 0.5f ? (1f - NickBrightnessBand) : MinNickBrightness);
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,GetNickColor,The following statement contains a magic number: float h = 360f * (float)rand.NextDouble();
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,GetNickColor,The following statement contains a magic number: float s = .4f + (.6f * (float)rand.NextDouble());
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,GetNickColor,The following statement contains a magic number: float s = .4f + (.6f * (float)rand.NextDouble());
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,FormatOne,The following statement contains a magic number: b.TextX = this.ColumnWidth + SeparatorPadding * 2.0 + 1.0;
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,OnRender,The following statement contains a magic number: var markerBrush = new LinearGradientBrush(this.NewMarkerColor'  							this.NewMarkerTransparentColor' 90.0);
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,OnRender,The following statement contains a magic number: dc.DrawRectangle(markerBrush' null'  							new Rect(new Point(0.0' block.Y)' new Size(this.ViewportWidth' _lineHeight * 5)));
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,OnRender,The following statement contains a magic number: var markerBrush = new LinearGradientBrush(this.OldMarkerTransparentColor'  							this.OldMarkerColor' 90.0);
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,OnRender,The following statement contains a magic number: dc.DrawRectangle(markerBrush' null'  							new Rect(new Point(0.0' (block.Y + block.Height) - _lineHeight * 5)'  								new Size(this.ViewportWidth' _lineHeight * 5)));
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,OnRender,The following statement contains a magic number: dc.DrawRectangle(markerBrush' null'  							new Rect(new Point(0.0' (block.Y + block.Height) - _lineHeight * 5)'  								new Size(this.ViewportWidth' _lineHeight * 5)));
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,ScrollIntoView,The following statement contains a magic number: _scrollPos = Math.Max(  				Math.Min(_scrollPos' Math.Max(0' pos - this.VisibleLineCount / 2))'  				Math.Min(_bufferLines - this.VisibleLineCount + 1' pos - this.VisibleLineCount / 2 + node.Value.Text.Length));
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,ScrollIntoView,The following statement contains a magic number: _scrollPos = Math.Max(  				Math.Min(_scrollPos' Math.Max(0' pos - this.VisibleLineCount / 2))'  				Math.Min(_bufferLines - this.VisibleLineCount + 1' pos - this.VisibleLineCount / 2 + node.Value.Text.Length));
Magic Number,Floe.UI,ChatPresenter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatBox\ChatPresenter.cs,OnMouseLeftButtonDown,The following statement contains a magic number: Math.Abs(p.X - (this.ColumnWidth + SeparatorPadding)) < SeparatorPadding / 2.0 && this.UseTabularView
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,DoPerform,The following statement contains a magic number: parts.Length < 2 || !int.TryParse(parts[1]' out time)
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,DoPerform,The following statement contains a magic number: _delayTimer = new Timer((o) =>  					{  						this.Dispatcher.BeginInvoke((Action)(() =>  						{  							this.DoPerform(i + 1);  						}));  					}' null' time * 1000' Timeout.Infinite);
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,ExecuteBanOrUnban,The following statement contains a magic number: this.Session.AddHandler(new IrcCodeHandler((ee) =>  					{  						if (ee.Message.Parameters.Count > 1)  						{  							var modes = from user in ee.Message.Parameters[1].Split(' ')  										let parts = user.Split('@')  										where parts.Length == 2  										select new IrcChannelMode(banSet' 'b'' "*!*@" + parts[1]);  							this.Session.Mode(this.Target.Name' modes);  						}  						return true;  					}' IrcCode.RPL_USERHOST));
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,ExecuteBanOrUnban,The following statement contains a magic number: var chunk = nicks.Skip(i).Take(3).ToArray();
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Execute,The following statement contains a magic number: switch (command)  			{                  case "QUOTE":                      args = Split(command' arguments' 1' 1);                      this.Session.Quote(args[0]);                      break;  				case "QUIT":  					args = Split(command' arguments' 0' 1);  					this.Session.AutoReconnect = false;  					this.Session.Quit(args.Length == 0 ? "Leaving" : args[0]);  					break;  				case "NICK":  					args = Split(command' arguments' 1' 1);  					this.Session.Nick(args[0]);  					break;  				case "NOTICE":  					args = Split(command' arguments' 2' 2);  					this.Session.Notice(new IrcTarget(args[0])' args[1]);  					break;  				case "JOIN":  				case "J":  					args = Split(command' arguments' 1' 2);  					if (args.Length == 2)  					{  						this.Session.Join(args[0]' args[1]);  					}  					else  					{  						this.Session.Join(args[0]);  					}  					break;  				case "PART":  				case "LEAVE":  					args = Split(command' arguments' 1' 1' true);  					this.Session.Part(args[0]);  					break;  				case "TOPIC":  					args = Split(command' arguments' 1' 2' true);  					if (args.Length > 1)  					{  						this.Session.Topic(args[0]' args[1]);  					}  					else  					{  						this.Session.Topic(args[0]);  					}  					break;  				case "INVITE":  					args = Split(command' arguments' 2' 2);  					this.Session.Invite(args[1]' args[0]);  					break;  				case "KICK":  					args = Split(command' arguments' 2' 3' true);  					if (args.Length > 2)  					{  						this.Session.Kick(args[0]' args[1]' args[2]);  					}  					else  					{  						this.Session.Kick(args[0]' args[1]);  					}  					break;  				case "MOTD":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Motd(args[0]);  					}  					else  					{  						this.Session.Motd();  					}  					break;  				case "WHO":  					args = Split(command' arguments' 1' 1);  					this.Session.Who(args[0]);  					break;  				case "WHOIS":  					args = Split(command' arguments' 1' 2);  					if (args != null)  					{  						if (args.Length == 2)  						{  							this.Session.WhoIs(args[0]' args[1]);  						}  						else if (args.Length == 1)  						{  							this.Session.WhoIs(args[0]);  						}  					}  					break;  				case "WHOWAS":  					args = Split(command' arguments' 1' 1);  					this.Session.WhoWas(args[0]);  					break;  				case "AWAY":  					args = Split(command' arguments' 0' 1);  					if (args.Length > 0)  					{  						this.Session.Away(args[0]);  					}  					else  					{  						this.Session.UnAway();  					}  					break;  				case "USERHOST":  					args = Split(command' arguments' 1' int.MaxValue);  					this.Session.UserHost(args);  					break;  				case "MODE":  					args = Split(command' arguments' 1' 2);  					var target = new IrcTarget(args[0]);  					if (!target.IsChannel)  					{  						if (!this.Session.IsSelf(target))  						{  							throw new CommandException("Can't change modes for another user.");  						}  						if (args.Length > 1)  						{  							this.Session.Mode(args[1]);  						}  						else  						{  							this.Session.Mode("");  						}  					}  					else  					{  						if (args.Length > 1)  						{  							this.Session.Mode(target.Name' args[1]);  						}  						else  						{  							this.Session.Mode(target.Name' "");  						}  					}  					break;  				case "SERVER":  					{  						args = Split(command' arguments' 1' 3);  						int port = 0;  						bool useSsl = false;  						if (args.Length > 1 && (args[1] = args[1].Trim()).Length > 0)  						{  							if (args[1][0] == '+')  							{  								useSsl = true;  							}  							int.TryParse(args[1]' out port);  						}  						string password = null;  						if (args.Length > 2)  						{  							password = args[2];  						}  						if (port == 0)  						{  							port = 6667;  						}  						if (this.IsConnected)  						{  							this.Session.AutoReconnect = false;  							this.Session.Quit("Changing servers");  						}  						this.Perform = "";  						this.Connect(args[0]' port' useSsl' false' password);  					}  					break;  				case "ME":  				case "ACTION":  					if (this.IsServer)  					{  						this.Write("Error"' "Can't talk in this window.");  					}  					if (this.IsConnected)  					{  						args = Split(command' arguments' 1' int.MaxValue);  						this.Write("Own"' string.Format("{0} {1}"' this.Session.Nickname' string.Join(" "' args)));  						if (this.Type == ChatPageType.Chat)  						{  							this.Session.SendCtcp(this.Target' new CtcpCommand("ACTION"' args)' false);  						}  						else if (this.Type == ChatPageType.DccChat)  						{  							_dcc.QueueMessage(string.Format("\u0001ACTION {0}\u0001"' string.Join(" "' args)));  						}  					}  					break;  				case "SETUP":  					App.ShowSettings();  					break;  				case "CLEAR":  					boxOutput.Clear();  					break;  				case "MSG":  					if (this.IsConnected)  					{  						args = Split(command' arguments' 2' 2);  						this.Session.PrivateMessage(new IrcTarget(args[0])' args[1]);  						this.Write("Own"' string.Format("-> [{0}] {1}"' args[0]' args[1]));  					}  					break;  				case "LIST":  					args = Split(command' arguments' 0' 2);  					if (args.Length > 1)  					{  						this.Session.List(args[0]' args[1]);  					}  					else if (args.Length > 0)  					{  						this.Session.List(args[0]);  					}  					else  					{  						this.Session.List();  					}  					break;  				case "OP":  				case "DEOP":  				case "VOICE":  				case "DEVOICE":  					if (!this.IsChannel)  					{  						this.Write("Error"' "Cannot perform that action in this window.");  					}  					else  					{  						char mode = (command == "OP" || command == "DEOP") ? 'o' : 'v';  						args = Split(command' arguments' 1' int.MaxValue);  						var modes = from s in args  									select new IrcChannelMode(command == "OP" || command == "VOICE"' mode' s);  						this.Session.Mode(this.Target.Name' modes);  					}  					break;  				case "HELP":  					foreach (var s in App.HelpText.Split(Environment.NewLine.ToCharArray()))  					{  						if (s.Length > 0)  						{  							this.Write("Client"' s);  						}  					}  					break;  				case "CTCP":  					args = Split(command' arguments' 2' int.MaxValue);  					this.Session.SendCtcp(new IrcTarget(args[0])'  						new CtcpCommand(args[1]' args.Skip(2).ToArray())' false);  					break;  				case "QUERY":  					args = Split(command' arguments' 1' 1);  					ChatWindow.ChatCommand.Execute(args[0]' this);  					break;  				case "BAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.BanCommand.Execute(args[0]' this);  					break;  				case "UNBAN":  					args = Split(command' arguments' 1' 1);  					ChatControl.UnbanCommand.Execute(args[0]' this);  					break;  				case "IGNORE":  					{  						args = Split(command' arguments' 0' 2);  						if (args.Length == 0)  						{  							var ignores = App.GetIgnoreInfo();  							if (ignores.Any())  							{  								this.Write("Own"' "Ignore list:");  								foreach (string i in ignores)  								{  									this.Write("Own"' "  " + i);  								}  							}  							else  							{  								this.Write("Own"' "Ignore list is empty.");  							}  							break;  						}    						string mask = args[0];  						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}    						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						App.AddIgnore(mask' actions);  						this.Write("Own"' "Added to ignore list: " + mask);  					}  					break;  				case "UNIGNORE":  					{  						args = Split(command' arguments' 1' 2);  						string mask = args[0];    						string sactions = args.Length > 1 ? args[1] : "All";  						IgnoreActions actions;  						if (!Enum.TryParse(sactions' true' out actions))  						{  							this.Write("Error"' "Invalid ignore action(s).");  							break;  						}  						if (!mask.Contains('!') && !mask.Contains('@'))  						{  							mask = mask + "!*@*";  						}  						if (App.RemoveIgnore(mask' actions))  						{  							this.Write("Own"' "Removed from ignore list: " + mask);  						}  						else  						{  							this.Write("Error"' "Specified pattern was not on ignore list.");  						}  					}  					break;  				case "DCC":  					{  						if (!this.IsConnected)  						{  							return;  						}  						args = Split(command' arguments' 2' 3);  						string dccCmd = args[0].ToUpperInvariant();    						switch (dccCmd)  						{  							case "CHAT":  								App.ChatWindow.DccChat(this.Session' new IrcTarget(args[1]));  								break;  							case "SEND":  							case "XMIT":  								string path = null;  								if (args.Length < 3)  								{  									this.Write("Error"' "File name is required.");  									break;  								}  								try  								{  									if (System.IO.Path.IsPathRooted(args[2]) && System.IO.File.Exists(args[2]))  									{  										path = args[2];  									}  									else if (!System.IO.File.Exists(path = System.IO.Path.Combine(App.Settings.Current.Dcc.DownloadFolder' args[2])))  									{  										this.Write("Error"' "Could not find file " + args[2]);  										break;  									}  								}  								catch (ArgumentException)  								{  									this.Write("Error"' string.Format("Invalid pathname: {0}"' args[2]));  									break;  								}  								if (dccCmd == "XMIT")  								{  									App.ChatWindow.DccXmit(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								else  								{  									App.ChatWindow.DccSend(this.Session' new IrcTarget(args[1])' new System.IO.FileInfo(path));  								}  								break;  							default:  								this.Write("Error"' "Unsupported DCC mode " + args[0]);  								break;  						}  					}  					break;  				default:  					this.Write("Error"' string.Format("Unrecognized command: {0}"' command));  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,dcc_MessageReceived,The following statement contains a magic number: text = text.Substring(8' text.Length - 9);
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,dcc_MessageReceived,The following statement contains a magic number: text = text.Substring(8' text.Length - 9);
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,dcc_MessageReceived,The following statement contains a magic number: text.StartsWith("\u0001ACTION ") && text.EndsWith("\u0001") &&  				text.Length > 9
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: !e.Handled && ((int)e.Code < 200 && this.IsServer || this.IsDefault)
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,txtInput_KeyDown,The following statement contains a magic number: switch (e.Key)  				{  					case Key.B:  						c = 2;  						break;  					case Key.K:  						c = 3;  						break;  					case Key.R:  						c = 22;  						break;  					case Key.O:  						c = 15;  						break;  					case Key.U:  						c = 31;  						break;  				}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,txtInput_KeyDown,The following statement contains a magic number: switch (e.Key)  				{  					case Key.B:  						c = 2;  						break;  					case Key.K:  						c = 3;  						break;  					case Key.R:  						c = 22;  						break;  					case Key.O:  						c = 15;  						break;  					case Key.U:  						c = 31;  						break;  				}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,txtInput_KeyDown,The following statement contains a magic number: switch (e.Key)  				{  					case Key.B:  						c = 2;  						break;  					case Key.K:  						c = 3;  						break;  					case Key.R:  						c = 22;  						break;  					case Key.O:  						c = 15;  						break;  					case Key.U:  						c = 31;  						break;  				}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,txtInput_KeyDown,The following statement contains a magic number: switch (e.Key)  				{  					case Key.B:  						c = 2;  						break;  					case Key.K:  						c = 3;  						break;  					case Key.R:  						c = 22;  						break;  					case Key.O:  						c = 15;  						break;  					case Key.U:  						c = 31;  						break;  				}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,txtInput_KeyDown,The following statement contains a magic number: switch (e.Key)  				{  					case Key.B:  						c = 2;  						break;  					case Key.K:  						c = 3;  						break;  					case Key.R:  						c = 22;  						break;  					case Key.O:  						c = 15;  						break;  					case Key.U:  						c = 31;  						break;  				}
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,FormatTime,The following statement contains a magic number: return new DateTime(1970' 1' 1).Add(ts).ToLocalTime().ToString();
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Magic Number,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 47:              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.Controls.Control.MouseDoubleClickEvent;                            #line 283 "..\..\..\..\ChatControl\ChatControl.xaml"              eventSetter.Handler = new System.Windows.Input.MouseButtonEventHandler(this.lstNicknames_MouseDoubleClick);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              break;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,HandleDcc,The following statement contains a magic number: switch (type)  			{  				case "CHAT":  					{  						if (args.Length < 4 ||  							args[1].ToUpperInvariant() != "CHAT" ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "CHAT"' "unavailable")' true);  							return true;  						}    						var page = new ChatControl(ChatPageType.DccChat' session' target);  						page.StartAccept(addr' port);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to chat with you."' target.Name));  					}  					break;    				case "XMIT":  					{  						if (args.Length < 5 ||  							string.Compare(args[1]' "CLEAR"' StringComparison.OrdinalIgnoreCase) != 0 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "XMIT"' "unavailable")' true);  							return true;  						}    						string name = args[4];  						long size = 0;  						if (args.Length > 5)  						{  							long.TryParse(args[5]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Xmit);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				case "SEND":  					{  						if (args.Length < 4 ||  							!IPAddress.TryParse(args[2]' out addr) ||  							!int.TryParse(args[3]' out port))  						{  							session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' "SEND"' "unavailable")' true);  							return true;  						}    						string name = args[1];  						long size = 0;  						if (args.Length > 4)  						{  							long.TryParse(args[4]' out size);  						}    						var page = new FileControl(session' target' DccMethod.Send);  						page.StartReceive(addr' port' name' size);  						page.NotifyState = NotifyState.Alert;  						App.Create(session' page' false);  						App.Alert(Window.GetWindow(page)' string.Format("{0} wants to send you a file."' target.Name));  					}  					break;    				default:  					session.SendCtcp(target' new CtcpCommand("ERRMSG"' "DCC"' args[0]' "unavailable")' true);  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,session_RawMessageReceived,The following statement contains a magic number: e.Message.Command == "PRIVMSG" && e.Message.Parameters.Count == 2  				&& (!CtcpCommand.IsCtcpCommand(e.Message.Parameters[1]) ||  				CtcpCommand.Parse(e.Message.Parameters[1]).Command == "ACTION")
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,OnKeyDown,The following statement contains a magic number: int index = e.SystemKey == Key.D0 ? 9 : (int)e.SystemKey - (int)Key.D0 - 1;
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,WndProc,The following statement contains a magic number: switch (msg)  			{  				case WindowConstants.WM_NCHITTEST:  					{  						var x = (short)(lParam.ToInt32() & 0xFFFF);  						var p = new Point((double)x' lParam.ToInt32() >> 16);  						p = this.PointFromScreen(p);    						var htResult = WindowConstants.HitTestValues.HTCLIENT;    						if ((this.ActualWidth - p.X <= ResizeWidth * 2.0 && this.ActualHeight - p.Y <= ResizeHeight) ||  							(this.ActualWidth - p.X <= ResizeWidth && this.ActualHeight - p.Y <= ResizeHeight * 2))  						{  							htResult = WindowConstants.HitTestValues.HTBOTTOMRIGHT;  						}  						else if (p.X <= ResizeWidth)  						{  							if (p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTTOPLEFT;  							}  							else if (this.ActualHeight - p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTBOTTOMLEFT;  							}  							else  							{  								htResult = WindowConstants.HitTestValues.HTLEFT;  							}  						}  						else if (this.ActualWidth - p.X <= ResizeWidth)  						{  							if (p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTTOPRIGHT;  							}  							else if (this.ActualHeight - p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTBOTTOMRIGHT;  							}  							else  							{  								htResult = WindowConstants.HitTestValues.HTRIGHT;  							}  						}  						else if (p.Y <= ResizeHeight)  						{  							htResult = WindowConstants.HitTestValues.HTTOP;  						}  						else if (this.ActualHeight - p.Y <= ResizeHeight)  						{  							htResult = WindowConstants.HitTestValues.HTBOTTOM;  						}  						else if (p.Y <= grdRoot.RowDefinitions[0].Height.Value &&  							p.X <= grdRoot.ColumnDefinitions[0].ActualWidth)  						{  							htResult = WindowConstants.HitTestValues.HTCAPTION;  						}    						var s = this.InputHitTest(p) as System.Windows.Controls.StackPanel;  						if (s != null && s.TemplatedParent is TabControl)  						{  							htResult = WindowConstants.HitTestValues.HTCAPTION;  						}    						handled = true;  						return (IntPtr)htResult;  					}  				case WindowConstants.WM_GETMINMAXINFO:  					{  						WindowHelper.GetMinMaxInfo(this' _hWnd' lParam);  						handled = true;  					}  					break;  				case WindowConstants.WM_QUERYENDSESSION:  					_isShuttingDown = true;  					handled = true;  					return (IntPtr)1;  				case WindowConstants.WM_ENDSESSION:  					if (wParam == (IntPtr)0)  					{  						_isShuttingDown = false;  					}  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,WndProc,The following statement contains a magic number: switch (msg)  			{  				case WindowConstants.WM_NCHITTEST:  					{  						var x = (short)(lParam.ToInt32() & 0xFFFF);  						var p = new Point((double)x' lParam.ToInt32() >> 16);  						p = this.PointFromScreen(p);    						var htResult = WindowConstants.HitTestValues.HTCLIENT;    						if ((this.ActualWidth - p.X <= ResizeWidth * 2.0 && this.ActualHeight - p.Y <= ResizeHeight) ||  							(this.ActualWidth - p.X <= ResizeWidth && this.ActualHeight - p.Y <= ResizeHeight * 2))  						{  							htResult = WindowConstants.HitTestValues.HTBOTTOMRIGHT;  						}  						else if (p.X <= ResizeWidth)  						{  							if (p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTTOPLEFT;  							}  							else if (this.ActualHeight - p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTBOTTOMLEFT;  							}  							else  							{  								htResult = WindowConstants.HitTestValues.HTLEFT;  							}  						}  						else if (this.ActualWidth - p.X <= ResizeWidth)  						{  							if (p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTTOPRIGHT;  							}  							else if (this.ActualHeight - p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTBOTTOMRIGHT;  							}  							else  							{  								htResult = WindowConstants.HitTestValues.HTRIGHT;  							}  						}  						else if (p.Y <= ResizeHeight)  						{  							htResult = WindowConstants.HitTestValues.HTTOP;  						}  						else if (this.ActualHeight - p.Y <= ResizeHeight)  						{  							htResult = WindowConstants.HitTestValues.HTBOTTOM;  						}  						else if (p.Y <= grdRoot.RowDefinitions[0].Height.Value &&  							p.X <= grdRoot.ColumnDefinitions[0].ActualWidth)  						{  							htResult = WindowConstants.HitTestValues.HTCAPTION;  						}    						var s = this.InputHitTest(p) as System.Windows.Controls.StackPanel;  						if (s != null && s.TemplatedParent is TabControl)  						{  							htResult = WindowConstants.HitTestValues.HTCAPTION;  						}    						handled = true;  						return (IntPtr)htResult;  					}  				case WindowConstants.WM_GETMINMAXINFO:  					{  						WindowHelper.GetMinMaxInfo(this' _hWnd' lParam);  						handled = true;  					}  					break;  				case WindowConstants.WM_QUERYENDSESSION:  					_isShuttingDown = true;  					handled = true;  					return (IntPtr)1;  				case WindowConstants.WM_ENDSESSION:  					if (wParam == (IntPtr)0)  					{  						_isShuttingDown = false;  					}  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,WndProc,The following statement contains a magic number: switch (msg)  			{  				case WindowConstants.WM_NCHITTEST:  					{  						var x = (short)(lParam.ToInt32() & 0xFFFF);  						var p = new Point((double)x' lParam.ToInt32() >> 16);  						p = this.PointFromScreen(p);    						var htResult = WindowConstants.HitTestValues.HTCLIENT;    						if ((this.ActualWidth - p.X <= ResizeWidth * 2.0 && this.ActualHeight - p.Y <= ResizeHeight) ||  							(this.ActualWidth - p.X <= ResizeWidth && this.ActualHeight - p.Y <= ResizeHeight * 2))  						{  							htResult = WindowConstants.HitTestValues.HTBOTTOMRIGHT;  						}  						else if (p.X <= ResizeWidth)  						{  							if (p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTTOPLEFT;  							}  							else if (this.ActualHeight - p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTBOTTOMLEFT;  							}  							else  							{  								htResult = WindowConstants.HitTestValues.HTLEFT;  							}  						}  						else if (this.ActualWidth - p.X <= ResizeWidth)  						{  							if (p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTTOPRIGHT;  							}  							else if (this.ActualHeight - p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTBOTTOMRIGHT;  							}  							else  							{  								htResult = WindowConstants.HitTestValues.HTRIGHT;  							}  						}  						else if (p.Y <= ResizeHeight)  						{  							htResult = WindowConstants.HitTestValues.HTTOP;  						}  						else if (this.ActualHeight - p.Y <= ResizeHeight)  						{  							htResult = WindowConstants.HitTestValues.HTBOTTOM;  						}  						else if (p.Y <= grdRoot.RowDefinitions[0].Height.Value &&  							p.X <= grdRoot.ColumnDefinitions[0].ActualWidth)  						{  							htResult = WindowConstants.HitTestValues.HTCAPTION;  						}    						var s = this.InputHitTest(p) as System.Windows.Controls.StackPanel;  						if (s != null && s.TemplatedParent is TabControl)  						{  							htResult = WindowConstants.HitTestValues.HTCAPTION;  						}    						handled = true;  						return (IntPtr)htResult;  					}  				case WindowConstants.WM_GETMINMAXINFO:  					{  						WindowHelper.GetMinMaxInfo(this' _hWnd' lParam);  						handled = true;  					}  					break;  				case WindowConstants.WM_QUERYENDSESSION:  					_isShuttingDown = true;  					handled = true;  					return (IntPtr)1;  				case WindowConstants.WM_ENDSESSION:  					if (wParam == (IntPtr)0)  					{  						_isShuttingDown = false;  					}  					break;  			}
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Magic Number,Floe.UI,BytesToFriendlyStringConverter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Converters.cs,Convert,The following statement contains a magic number: bytes /= 1024.0;
Magic Number,Floe.UI,BytesToFriendlyStringConverter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Converters.cs,Convert,The following statement contains a magic number: bytes > 1024 && i < _suffixes.Length - 1
Magic Number,Floe.UI,BrushAlphaConverter,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Converters.cs,Convert,The following statement contains a magic number: return new SolidColorBrush(Color.FromArgb((byte)(alpha * 255.0)' brush.Color.R' brush.Color.G' brush.Color.B));
Magic Number,Floe.UI,ConfirmDialog,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Dialogs\ConfirmDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtMessage = ((System.Windows.Controls.TextBlock)(target));              return;              case 2:              this.chkDontAskAgain = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.btnYes = ((System.Windows.Controls.Button)(target));                            #line 13 "..\..\..\..\Dialogs\ConfirmDialog.xaml"              this.btnYes.Click += new System.Windows.RoutedEventHandler(this.btnYes_Click);                            #line default              #line hidden              return;              case 4:              this.btnNo = ((System.Windows.Controls.Button)(target));                            #line 14 "..\..\..\..\Dialogs\ConfirmDialog.xaml"              this.btnNo.Click += new System.Windows.RoutedEventHandler(this.btnNo_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI,ConfirmDialog,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Dialogs\ConfirmDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtMessage = ((System.Windows.Controls.TextBlock)(target));              return;              case 2:              this.chkDontAskAgain = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.btnYes = ((System.Windows.Controls.Button)(target));                            #line 13 "..\..\..\..\Dialogs\ConfirmDialog.xaml"              this.btnYes.Click += new System.Windows.RoutedEventHandler(this.btnYes_Click);                            #line default              #line hidden              return;              case 4:              this.btnNo = ((System.Windows.Controls.Button)(target));                            #line 14 "..\..\..\..\Dialogs\ConfirmDialog.xaml"              this.btnNo.Click += new System.Windows.RoutedEventHandler(this.btnNo_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI,ConfirmDialog,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Dialogs\ConfirmDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtMessage = ((System.Windows.Controls.TextBlock)(target));              return;              case 2:              this.chkDontAskAgain = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.btnYes = ((System.Windows.Controls.Button)(target));                            #line 13 "..\..\..\..\Dialogs\ConfirmDialog.xaml"              this.btnYes.Click += new System.Windows.RoutedEventHandler(this.btnYes_Click);                            #line default              #line hidden              return;              case 4:              this.btnNo = ((System.Windows.Controls.Button)(target));                            #line 14 "..\..\..\..\Dialogs\ConfirmDialog.xaml"              this.btnNo.Click += new System.Windows.RoutedEventHandler(this.btnNo_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,dcc_Connected,The following statement contains a magic number: _pollTimer = new Timer((o) =>  				{  					this.Dispatcher.BeginInvoke((Action)(() =>  						{  							this.BytesTransferred = _dcc.BytesTransferred;  							if (--iteration == 0)  							{  								iteration = SpeedUpdateInterval;  								var now = DateTime.UtcNow.Ticks;  								stats.Enqueue(new Tuple<long' long>(now' this.BytesTransferred));  								while (stats.Count > SpeedWindow)  								{  									stats.Dequeue();  								}  								if (stats.Count > 1)  								{  									var timeDiff = (now - stats.Peek().Item1) / 10000;  									var newBytes = this.BytesTransferred - stats.Peek().Item2;  									if (timeDiff / 1000 > 0)  									{  										this.Speed = newBytes / (timeDiff / 1000);  									}  									if (this.Speed > 0)  									{  										this.EstimatedTime = (int)(this.FileSize / this.Speed);  									}  									if (this.FileSize > 0)  									{  										this.Progress = (double)this.BytesTransferred / (double)this.FileSize;  									}  								}  							}  						}));  				}' null' PollTime' PollTime);
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,dcc_Connected,The following statement contains a magic number: _pollTimer = new Timer((o) =>  				{  					this.Dispatcher.BeginInvoke((Action)(() =>  						{  							this.BytesTransferred = _dcc.BytesTransferred;  							if (--iteration == 0)  							{  								iteration = SpeedUpdateInterval;  								var now = DateTime.UtcNow.Ticks;  								stats.Enqueue(new Tuple<long' long>(now' this.BytesTransferred));  								while (stats.Count > SpeedWindow)  								{  									stats.Dequeue();  								}  								if (stats.Count > 1)  								{  									var timeDiff = (now - stats.Peek().Item1) / 10000;  									var newBytes = this.BytesTransferred - stats.Peek().Item2;  									if (timeDiff / 1000 > 0)  									{  										this.Speed = newBytes / (timeDiff / 1000);  									}  									if (this.Speed > 0)  									{  										this.EstimatedTime = (int)(this.FileSize / this.Speed);  									}  									if (this.FileSize > 0)  									{  										this.Progress = (double)this.BytesTransferred / (double)this.FileSize;  									}  								}  							}  						}));  				}' null' PollTime' PollTime);
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,dcc_Connected,The following statement contains a magic number: _pollTimer = new Timer((o) =>  				{  					this.Dispatcher.BeginInvoke((Action)(() =>  						{  							this.BytesTransferred = _dcc.BytesTransferred;  							if (--iteration == 0)  							{  								iteration = SpeedUpdateInterval;  								var now = DateTime.UtcNow.Ticks;  								stats.Enqueue(new Tuple<long' long>(now' this.BytesTransferred));  								while (stats.Count > SpeedWindow)  								{  									stats.Dequeue();  								}  								if (stats.Count > 1)  								{  									var timeDiff = (now - stats.Peek().Item1) / 10000;  									var newBytes = this.BytesTransferred - stats.Peek().Item2;  									if (timeDiff / 1000 > 0)  									{  										this.Speed = newBytes / (timeDiff / 1000);  									}  									if (this.Speed > 0)  									{  										this.EstimatedTime = (int)(this.FileSize / this.Speed);  									}  									if (this.FileSize > 0)  									{  										this.Progress = (double)this.BytesTransferred / (double)this.FileSize;  									}  								}  							}  						}));  				}' null' PollTime' PollTime);
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI,HsvColor,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\HsvColor.cs,FromColor,The following statement contains a magic number: float a = (float)c.A / 255f;
Magic Number,Floe.UI,HsvColor,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\HsvColor.cs,FromColor,The following statement contains a magic number: float r = (float)c.R / 255f' g = (float)c.G / 255f' b = (float)c.B / 255f;
Magic Number,Floe.UI,HsvColor,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\HsvColor.cs,FromColor,The following statement contains a magic number: float r = (float)c.R / 255f' g = (float)c.G / 255f' b = (float)c.B / 255f;
Magic Number,Floe.UI,HsvColor,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\HsvColor.cs,FromColor,The following statement contains a magic number: float r = (float)c.R / 255f' g = (float)c.G / 255f' b = (float)c.B / 255f;
Magic Number,Floe.UI,HsvColor,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\HsvColor.cs,FromColor,The following statement contains a magic number: h *= 60f;
Magic Number,Floe.UI,HsvColor,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\HsvColor.cs,FromColor,The following statement contains a magic number: h += 360f;
Magic Number,Floe.UI,HsvColor,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\HsvColor.cs,ToColor,The following statement contains a magic number: return Color.FromArgb((byte)(A * 255f)' (byte)(r * 255f)' (byte)(g * 255f)' (byte)(b * 255f));
Magic Number,Floe.UI,HsvColor,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\HsvColor.cs,ToColor,The following statement contains a magic number: return Color.FromArgb((byte)(A * 255f)' (byte)(r * 255f)' (byte)(g * 255f)' (byte)(b * 255f));
Magic Number,Floe.UI,HsvColor,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\HsvColor.cs,ToColor,The following statement contains a magic number: return Color.FromArgb((byte)(A * 255f)' (byte)(r * 255f)' (byte)(g * 255f)' (byte)(b * 255f));
Magic Number,Floe.UI,HsvColor,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\HsvColor.cs,ToColor,The following statement contains a magic number: return Color.FromArgb((byte)(A * 255f)' (byte)(r * 255f)' (byte)(g * 255f)' (byte)(b * 255f));
Magic Number,Floe.UI,ListControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ListControl\ListControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.RPL_LIST:  					int count;  					if (e.Message.Parameters.Count == 4 &&  						int.TryParse(e.Message.Parameters[2]' out count))  					{  						_channels.Add(new ChannelItem(e.Message.Parameters[1]' count' e.Message.Parameters[3]));  						this.Count++;  					}  					break;  				case IrcCode.RPL_LISTEND:  					this.IsCloseable = true;  					this.Session.InfoReceived -= new EventHandler<IrcInfoEventArgs>(Session_InfoReceived);  					_channels.Sort();  					foreach (var c in _channels)  					{  						lstChannels.Items.Add(c);  					}  					break;  			}
Magic Number,Floe.UI,ListControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ListControl\ListControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.RPL_LIST:  					int count;  					if (e.Message.Parameters.Count == 4 &&  						int.TryParse(e.Message.Parameters[2]' out count))  					{  						_channels.Add(new ChannelItem(e.Message.Parameters[1]' count' e.Message.Parameters[3]));  						this.Count++;  					}  					break;  				case IrcCode.RPL_LISTEND:  					this.IsCloseable = true;  					this.Session.InfoReceived -= new EventHandler<IrcInfoEventArgs>(Session_InfoReceived);  					_channels.Sort();  					foreach (var c in _channels)  					{  						lstChannels.Items.Add(c);  					}  					break;  			}
Magic Number,Floe.UI,ListControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ListControl\ListControl.xaml.cs,Session_InfoReceived,The following statement contains a magic number: switch (e.Code)  			{  				case IrcCode.RPL_LIST:  					int count;  					if (e.Message.Parameters.Count == 4 &&  						int.TryParse(e.Message.Parameters[2]' out count))  					{  						_channels.Add(new ChannelItem(e.Message.Parameters[1]' count' e.Message.Parameters[3]));  						this.Count++;  					}  					break;  				case IrcCode.RPL_LISTEND:  					this.IsCloseable = true;  					this.Session.InfoReceived -= new EventHandler<IrcInfoEventArgs>(Session_InfoReceived);  					_channels.Sort();  					foreach (var c in _channels)  					{  						lstChannels.Items.Add(c);  					}  					break;  			}
Magic Number,Floe.UI,ListControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ListControl\ListControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.listControl = ((Floe.UI.ListControl)(target));              return;              case 2:                            #line 13 "..\..\..\..\ListControl\ListControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 3:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 4:              this.lstChannels = ((System.Windows.Controls.ListView)(target));              return;              }
Magic Number,Floe.UI,ListControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ListControl\ListControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.listControl = ((Floe.UI.ListControl)(target));              return;              case 2:                            #line 13 "..\..\..\..\ListControl\ListControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 3:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 4:              this.lstChannels = ((System.Windows.Controls.ListView)(target));              return;              }
Magic Number,Floe.UI,ListControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ListControl\ListControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.listControl = ((Floe.UI.ListControl)(target));              return;              case 2:                            #line 13 "..\..\..\..\ListControl\ListControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 3:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 4:              this.lstChannels = ((System.Windows.Controls.ListView)(target));              return;              }
Magic Number,Floe.UI,ListControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ListControl\ListControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 5:              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.Controls.Control.MouseDoubleClickEvent;                            #line 94 "..\..\..\..\ListControl\ListControl.xaml"              eventSetter.Handler = new System.Windows.Input.MouseButtonEventHandler(this.lstChannels_MouseDoubleClick);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              break;              }
Magic Number,Floe.UI.Interop,ColorPicker,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\ColorPicker.cs,PickColor,The following statement contains a magic number: cs.lpCustColors = Marshal.AllocHGlobal(64);
Magic Number,Floe.UI.Interop,ColorPicker,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\ColorPicker.cs,PickColor,The following statement contains a magic number: Marshal.Copy(new byte[64]' 0' cs.lpCustColors' 64);
Magic Number,Floe.UI.Interop,ColorPicker,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\ColorPicker.cs,PickColor,The following statement contains a magic number: Marshal.Copy(new byte[64]' 0' cs.lpCustColors' 64);
Magic Number,Floe.UI.Interop,ColorPicker,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\ColorPicker.cs,PickColor,The following statement contains a magic number: cs.rgbResult = (uint)color.R | (uint)color.G << 8 | (uint)color.B << 16;
Magic Number,Floe.UI.Interop,ColorPicker,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\ColorPicker.cs,PickColor,The following statement contains a magic number: cs.rgbResult = (uint)color.R | (uint)color.G << 8 | (uint)color.B << 16;
Magic Number,Floe.UI.Interop,ColorPicker,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\ColorPicker.cs,PickColor,The following statement contains a magic number: Marshal.Copy(buf' 0' cs.lpCustColors' 64);
Magic Number,Floe.UI.Interop,ColorPicker,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\ColorPicker.cs,PickColor,The following statement contains a magic number: color = Color.FromRgb((byte)(cs.rgbResult)'  					(byte)(cs.rgbResult >> 8)'  					(byte)(cs.rgbResult >> 16));
Magic Number,Floe.UI.Interop,ColorPicker,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\ColorPicker.cs,PickColor,The following statement contains a magic number: color = Color.FromRgb((byte)(cs.rgbResult)'  					(byte)(cs.rgbResult >> 8)'  					(byte)(cs.rgbResult >> 16));
Magic Number,Floe.UI.Interop,ColorPicker,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\ColorPicker.cs,PickColor,The following statement contains a magic number: buf = new byte[64];
Magic Number,Floe.UI.Interop,ColorPicker,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\ColorPicker.cs,PickColor,The following statement contains a magic number: Marshal.Copy(cs.lpCustColors' buf' 0' 64);
Magic Number,Floe.UI.Interop,FolderBrowser,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\FolderBrowser.cs,Show,The following statement contains a magic number: bi.lpfn = (hWnd' msg' lp' wp) =>  				{  					switch (msg)  					{  						case 0x1:  							SendMessage(new HandleRef(null' hWnd)' 0x400 + 103' 1' path);  							break;  					}    					return 0;  				};
Magic Number,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.txtOutputLines = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtInputHistory = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtMinimumCopyLength = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtMaxPasteLines = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 11:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.button1 = ((System.Windows.Controls.Button)(target));                            #line 62 "..\..\..\..\Settings\BufferSettingsControl.xaml"              this.button1.Click += new System.Windows.RoutedEventHandler(this.button1_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.txtOutputLines = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtInputHistory = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtMinimumCopyLength = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtMaxPasteLines = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 11:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.button1 = ((System.Windows.Controls.Button)(target));                            #line 62 "..\..\..\..\Settings\BufferSettingsControl.xaml"              this.button1.Click += new System.Windows.RoutedEventHandler(this.button1_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.txtOutputLines = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtInputHistory = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtMinimumCopyLength = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtMaxPasteLines = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 11:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.button1 = ((System.Windows.Controls.Button)(target));                            #line 62 "..\..\..\..\Settings\BufferSettingsControl.xaml"              this.button1.Click += new System.Windows.RoutedEventHandler(this.button1_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.txtOutputLines = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtInputHistory = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtMinimumCopyLength = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtMaxPasteLines = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 11:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.button1 = ((System.Windows.Controls.Button)(target));                            #line 62 "..\..\..\..\Settings\BufferSettingsControl.xaml"              this.button1.Click += new System.Windows.RoutedEventHandler(this.button1_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.txtOutputLines = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtInputHistory = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtMinimumCopyLength = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtMaxPasteLines = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 11:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.button1 = ((System.Windows.Controls.Button)(target));                            #line 62 "..\..\..\..\Settings\BufferSettingsControl.xaml"              this.button1.Click += new System.Windows.RoutedEventHandler(this.button1_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.txtOutputLines = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtInputHistory = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtMinimumCopyLength = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtMaxPasteLines = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 11:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.button1 = ((System.Windows.Controls.Button)(target));                            #line 62 "..\..\..\..\Settings\BufferSettingsControl.xaml"              this.button1.Click += new System.Windows.RoutedEventHandler(this.button1_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.txtOutputLines = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtInputHistory = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtMinimumCopyLength = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtMaxPasteLines = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 11:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.button1 = ((System.Windows.Controls.Button)(target));                            #line 62 "..\..\..\..\Settings\BufferSettingsControl.xaml"              this.button1.Click += new System.Windows.RoutedEventHandler(this.button1_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.txtOutputLines = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtInputHistory = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtMinimumCopyLength = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtMaxPasteLines = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 11:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.button1 = ((System.Windows.Controls.Button)(target));                            #line 62 "..\..\..\..\Settings\BufferSettingsControl.xaml"              this.button1.Click += new System.Windows.RoutedEventHandler(this.button1_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.txtOutputLines = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtInputHistory = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtMinimumCopyLength = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtMaxPasteLines = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 11:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.button1 = ((System.Windows.Controls.Button)(target));                            #line 62 "..\..\..\..\Settings\BufferSettingsControl.xaml"              this.button1.Click += new System.Windows.RoutedEventHandler(this.button1_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.txtOutputLines = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtInputHistory = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtMinimumCopyLength = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtMaxPasteLines = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 11:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.button1 = ((System.Windows.Controls.Button)(target));                            #line 62 "..\..\..\..\Settings\BufferSettingsControl.xaml"              this.button1.Click += new System.Windows.RoutedEventHandler(this.button1_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.txtOutputLines = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtInputHistory = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtMinimumCopyLength = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtMaxPasteLines = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 11:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.button1 = ((System.Windows.Controls.Button)(target));                            #line 62 "..\..\..\..\Settings\BufferSettingsControl.xaml"              this.button1.Click += new System.Windows.RoutedEventHandler(this.button1_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,ColorsSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ColorsSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkColorizeNicknames = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.sldNicknameColorScheme = ((System.Windows.Controls.Slider)(target));              return;              case 3:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,ColorsSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ColorsSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkColorizeNicknames = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.sldNicknameColorScheme = ((System.Windows.Controls.Slider)(target));              return;              case 3:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,NetworkSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\NetworkSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkUseSocks5Proxy = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.txtProxyHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtPassword = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlock3 = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.checkBox3 = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,NetworkSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\NetworkSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkUseSocks5Proxy = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.txtProxyHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtPassword = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlock3 = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.checkBox3 = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,NetworkSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\NetworkSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkUseSocks5Proxy = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.txtProxyHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtPassword = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlock3 = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.checkBox3 = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,NetworkSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\NetworkSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkUseSocks5Proxy = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.txtProxyHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtPassword = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlock3 = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.checkBox3 = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,NetworkSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\NetworkSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkUseSocks5Proxy = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.txtProxyHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtPassword = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlock3 = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.checkBox3 = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,NetworkSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\NetworkSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkUseSocks5Proxy = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.txtProxyHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtPassword = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlock3 = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.checkBox3 = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,NetworkSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\NetworkSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkUseSocks5Proxy = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.txtProxyHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtPassword = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlock3 = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.checkBox3 = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,NetworkSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\NetworkSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkUseSocks5Proxy = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.txtProxyHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtPassword = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlock3 = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.checkBox3 = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,NetworkSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\NetworkSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkUseSocks5Proxy = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.txtProxyHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtPassword = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlock3 = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.checkBox3 = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,NetworkSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\NetworkSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkUseSocks5Proxy = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.txtProxyHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtPassword = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlock3 = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.checkBox3 = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,SoundSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\SoundSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.lstEvents = ((System.Windows.Controls.ListBox)(target));              return;              case 3:              this.txtPath = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\..\Settings\SoundSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,SoundSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\SoundSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.lstEvents = ((System.Windows.Controls.ListBox)(target));              return;              case 3:              this.txtPath = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\..\Settings\SoundSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,SoundSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\SoundSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.lstEvents = ((System.Windows.Controls.ListBox)(target));              return;              case 3:              this.txtPath = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\..\Settings\SoundSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,SoundSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\SoundSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.lstEvents = ((System.Windows.Controls.ListBox)(target));              return;              case 3:              this.txtPath = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\..\Settings\SoundSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              }
Magic Number,Floe.UI.Settings,DccSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\DccSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtLowPort = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.txtHighPort = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtDownloadFolder = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.lblDownloadFolder = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 44 "..\..\..\..\Settings\DccSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              case 8:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.txtDanger = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,DccSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\DccSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtLowPort = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.txtHighPort = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtDownloadFolder = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.lblDownloadFolder = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 44 "..\..\..\..\Settings\DccSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              case 8:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.txtDanger = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,DccSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\DccSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtLowPort = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.txtHighPort = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtDownloadFolder = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.lblDownloadFolder = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 44 "..\..\..\..\Settings\DccSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              case 8:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.txtDanger = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,DccSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\DccSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtLowPort = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.txtHighPort = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtDownloadFolder = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.lblDownloadFolder = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 44 "..\..\..\..\Settings\DccSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              case 8:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.txtDanger = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,DccSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\DccSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtLowPort = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.txtHighPort = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtDownloadFolder = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.lblDownloadFolder = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 44 "..\..\..\..\Settings\DccSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              case 8:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.txtDanger = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,DccSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\DccSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtLowPort = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.txtHighPort = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtDownloadFolder = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.lblDownloadFolder = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 44 "..\..\..\..\Settings\DccSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              case 8:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.txtDanger = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,DccSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\DccSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtLowPort = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.txtHighPort = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtDownloadFolder = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.lblDownloadFolder = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 44 "..\..\..\..\Settings\DccSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              case 8:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.txtDanger = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,DccSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\DccSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtLowPort = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.txtHighPort = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtDownloadFolder = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.lblDownloadFolder = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 44 "..\..\..\..\Settings\DccSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              case 8:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.txtDanger = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,DccSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\DccSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtLowPort = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.txtHighPort = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtDownloadFolder = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.lblDownloadFolder = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 44 "..\..\..\..\Settings\DccSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              case 8:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.txtDanger = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,ServerSettingsControl,The following statement contains a magic number: server.Port = 6667;
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,btnNew_Click,The following statement contains a magic number: ++i == 2
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,btnNew_Click,The following statement contains a magic number: server.Port = 6667;
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,txtName_SourceUpdated,The following statement contains a magic number: int i = 2;
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Floe.UI.Settings,SettingsWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\SettingsWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 2:              this.stackPanel1 = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.btnApply = ((System.Windows.Controls.Button)(target));                            #line 81 "..\..\..\..\Settings\SettingsWindow.xaml"              this.btnApply.Click += new System.Windows.RoutedEventHandler(this.btnApply_Click);                            #line default              #line hidden              return;              case 4:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 82 "..\..\..\..\Settings\SettingsWindow.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 5:              this.lstCategories = ((System.Windows.Controls.ListBox)(target));                            #line 85 "..\..\..\..\Settings\SettingsWindow.xaml"              this.lstCategories.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.lstCategories_SelectionChanged);                            #line default              #line hidden              return;              case 6:              this.grdSettings = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Floe.UI.Settings,SettingsWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\SettingsWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 2:              this.stackPanel1 = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.btnApply = ((System.Windows.Controls.Button)(target));                            #line 81 "..\..\..\..\Settings\SettingsWindow.xaml"              this.btnApply.Click += new System.Windows.RoutedEventHandler(this.btnApply_Click);                            #line default              #line hidden              return;              case 4:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 82 "..\..\..\..\Settings\SettingsWindow.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 5:              this.lstCategories = ((System.Windows.Controls.ListBox)(target));                            #line 85 "..\..\..\..\Settings\SettingsWindow.xaml"              this.lstCategories.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.lstCategories_SelectionChanged);                            #line default              #line hidden              return;              case 6:              this.grdSettings = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Floe.UI.Settings,SettingsWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\SettingsWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 2:              this.stackPanel1 = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.btnApply = ((System.Windows.Controls.Button)(target));                            #line 81 "..\..\..\..\Settings\SettingsWindow.xaml"              this.btnApply.Click += new System.Windows.RoutedEventHandler(this.btnApply_Click);                            #line default              #line hidden              return;              case 4:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 82 "..\..\..\..\Settings\SettingsWindow.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 5:              this.lstCategories = ((System.Windows.Controls.ListBox)(target));                            #line 85 "..\..\..\..\Settings\SettingsWindow.xaml"              this.lstCategories.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.lstCategories_SelectionChanged);                            #line default              #line hidden              return;              case 6:              this.grdSettings = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Floe.UI.Settings,SettingsWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\SettingsWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 2:              this.stackPanel1 = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.btnApply = ((System.Windows.Controls.Button)(target));                            #line 81 "..\..\..\..\Settings\SettingsWindow.xaml"              this.btnApply.Click += new System.Windows.RoutedEventHandler(this.btnApply_Click);                            #line default              #line hidden              return;              case 4:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 82 "..\..\..\..\Settings\SettingsWindow.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 5:              this.lstCategories = ((System.Windows.Controls.ListBox)(target));                            #line 85 "..\..\..\..\Settings\SettingsWindow.xaml"              this.lstCategories.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.lstCategories_SelectionChanged);                            #line default              #line hidden              return;              case 6:              this.grdSettings = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Floe.UI.Settings,SettingsWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\SettingsWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 2:              this.stackPanel1 = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.btnApply = ((System.Windows.Controls.Button)(target));                            #line 81 "..\..\..\..\Settings\SettingsWindow.xaml"              this.btnApply.Click += new System.Windows.RoutedEventHandler(this.btnApply_Click);                            #line default              #line hidden              return;              case 4:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 82 "..\..\..\..\Settings\SettingsWindow.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 5:              this.lstCategories = ((System.Windows.Controls.ListBox)(target));                            #line 85 "..\..\..\..\Settings\SettingsWindow.xaml"              this.lstCategories.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.lstCategories_SelectionChanged);                            #line default              #line hidden              return;              case 6:              this.grdSettings = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,Floe.UI.Settings,UserSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\UserSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtAltNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtFullName = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.chkInvisible = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,UserSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\UserSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtAltNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtFullName = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.chkInvisible = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,UserSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\UserSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtAltNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtFullName = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.chkInvisible = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,UserSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\UserSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtAltNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtFullName = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.chkInvisible = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,UserSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\UserSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtAltNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtFullName = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.chkInvisible = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,UserSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\UserSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtAltNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtFullName = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.chkInvisible = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,UserSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\UserSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtAltNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtFullName = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.chkInvisible = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,Floe.UI.Settings,UserSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\UserSettingsControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtAltNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtFullName = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.chkInvisible = ((System.Windows.Controls.CheckBox)(target));              return;              }
Missing Default,Floe.UI,ChannelWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChannelWindow\ChannelWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChannelWindow)(target));              return;              case 2:                            #line 10 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 11 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 4:                            #line 12 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteReattach);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden                            #line 15 "..\..\..\..\ChannelWindow\ChannelWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteClose);                            #line default              #line hidden              return;              case 8:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 9:              this.btnReattach = ((System.Windows.Controls.Button)(target));              return;              case 10:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 11:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 12:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 13:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              }
Missing Default,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_StateChanged,The following switch statement is missing a default case: switch (state)  				{  					case IrcSessionState.Connecting:  						_usingAlternateNick = false;  						this.Header = this.Session.NetworkName;  						this.Write("Client"' string.Format(  							"Connecting to {0}:{1}"' this.Session.Server' this.Session.Port));  						break;  					case IrcSessionState.Connected:  						this.Header = this.Session.NetworkName;  						App.DoEvent("connect");  						if (this.Perform != null)  						{  							DoPerform(0);  						}  						break;  				}
Missing Default,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Session_InfoReceived,The following switch statement is missing a default case: switch (e.Code)  			{  				case IrcCode.ERR_NICKNAMEINUSE:  					if (this.IsServer && this.Session.State == IrcSessionState.Connecting)  					{  						if (_usingAlternateNick || string.IsNullOrEmpty(App.Settings.Current.User.AlternateNickname))  						{  							this.SetInputText("/nick ");  						}  						else  						{  							this.Session.Nick(App.Settings.Current.User.AlternateNickname);  							_usingAlternateNick = true;  						}  					}  					break;  				case IrcCode.RPL_TOPIC:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						_topic = e.Message.Parameters[2];  						this.SetTitle();  						this.Write("Topic"' string.Format("Topic is: {0}"' _topic));  					}  					return;  				case IrcCode.RPL_TOPICSETBY:  					if (e.Message.Parameters.Count == 4 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						this.Write("Topic"' string.Format("Topic set by {0} on {1}"' e.Message.Parameters[2]'  							this.FormatTime(e.Message.Parameters[3])));  					}  					return;  				case IrcCode.RPL_CHANNELCREATEDON:  					if (e.Message.Parameters.Count == 3 && !this.IsServer &&  						this.Target.Equals(new IrcTarget(e.Message.Parameters[1])))  					{  						//this.Write("ServerInfo"' string.Format("* Channel created on {0}"' this.FormatTime(e.Message.Parameters[2])));  					}  					return;  				case IrcCode.RPL_WHOISUSER:  				case IrcCode.RPL_WHOWASUSER:  					if (e.Message.Parameters.Count == 6 && this.IsDefault)  					{  						this.Write("ServerInfo"'  							string.Format("{1} " + (e.Code == IrcCode.RPL_WHOWASUSER ? "was" : "is") + " {2}@{3} {4} {5}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISCHANNELS:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} is on {2}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISSERVER:  					if (e.Message.Parameters.Count == 4 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{1} using {2} {3}"'  							(object[])e.Message.Parameters));  						return;  					}  					break;  				case IrcCode.RPL_WHOISIDLE:  					if (e.Message.Parameters.Count == 5 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("{0} has been idle {1}' signed on {2}"'  							e.Message.Parameters[1]' this.FormatTimeSpan(e.Message.Parameters[2])'  							this.FormatTime(e.Message.Parameters[3])));  						return;  					}  					break;  				case IrcCode.RPL_INVITING:  					if (e.Message.Parameters.Count == 3 && this.IsDefault)  					{  						this.Write("ServerInfo"' string.Format("Invited {0} to channel {1}"'  							e.Message.Parameters[1]' e.Message.Parameters[2]));  						return;  					}  					break;  				case IrcCode.RPL_LIST:  				case IrcCode.RPL_LISTSTART:  				case IrcCode.RPL_LISTEND:  					e.Handled = true;  					break;  			}
Missing Default,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,txtInput_KeyDown,The following switch statement is missing a default case: switch (e.Key)  				{  					case Key.B:  						c = 2;  						break;  					case Key.K:  						c = 3;  						break;  					case Key.R:  						c = 22;  						break;  					case Key.O:  						c = 15;  						break;  					case Key.U:  						c = 31;  						break;  				}
Missing Default,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,txtInput_KeyDown,The following switch statement is missing a default case: switch (e.Key)  			{  				case Key.Enter:  					this.SubmitInput();  					break;  			}
Missing Default,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.chatControl = ((Floe.UI.ChatControl)(target));              return;              case 2:                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteWhois);                            #line default              #line hidden                            #line 18 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 3:                            #line 19 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOpenLink);                            #line default              #line hidden              return;              case 4:                            #line 20 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCopyLink);                            #line default              #line hidden              return;              case 5:                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteQuit);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteConnectedCommand);                            #line default              #line hidden              return;              case 6:                            #line 22 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClear);                            #line default              #line hidden              return;              case 7:                            #line 23 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteInsert);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteOp);                            #line default              #line hidden                            #line 24 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 9:                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDeop);                            #line default              #line hidden                            #line 25 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 10:                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteVoice);                            #line default              #line hidden                            #line 26 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 11:                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDevoice);                            #line default              #line hidden                            #line 27 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 12:                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteKick);                            #line default              #line hidden                            #line 28 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 13:                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteBan);                            #line default              #line hidden                            #line 29 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 14:                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteUnban);                            #line default              #line hidden                            #line 30 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteIsOp);                            #line default              #line hidden              return;              case 15:                            #line 31 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearch);                            #line default              #line hidden              return;              case 16:                            #line 32 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchPrevious);                            #line default              #line hidden              return;              case 17:                            #line 33 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSearchNext);                            #line default              #line hidden              return;              case 18:                            #line 34 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSlap);                            #line default              #line hidden              return;              case 19:                            #line 35 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccChat);                            #line default              #line hidden              return;              case 20:                            #line 36 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccXmit);                            #line default              #line hidden              return;              case 21:                            #line 37 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDccSend);                            #line default              #line hidden              return;              case 22:                            #line 38 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChannelPanel);                            #line default              #line hidden              return;              case 23:                            #line 39 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteList);                            #line default              #line hidden              return;              case 24:                            #line 40 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 25:                            #line 96 "..\..\..\..\ChatControl\ChatControl.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.connect_Click);                            #line default              #line hidden              return;              case 26:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 27:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 28:              this.lblDccChat = ((System.Windows.Controls.Label)(target));              return;              case 29:              this.btnAccept = ((System.Windows.Controls.Button)(target));                            #line 187 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnAccept.Click += new System.Windows.RoutedEventHandler(this.btnAccept_Click);                            #line default              #line hidden              return;              case 30:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 188 "..\..\..\..\ChatControl\ChatControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 31:              this.pnlChannel = ((System.Windows.Controls.WrapPanel)(target));              return;              case 32:              this.btnCloseChannel = ((System.Windows.Controls.Button)(target));              return;              case 33:              this.txtChannel = ((System.Windows.Controls.TextBox)(target));              return;              case 34:              this.btnJoin = ((System.Windows.Controls.Button)(target));              return;              case 35:              this.btnList = ((System.Windows.Controls.Button)(target));              return;              case 36:              this.pnlSearch = ((System.Windows.Controls.WrapPanel)(target));              return;              case 37:              this.btnCloseSearch = ((System.Windows.Controls.Button)(target));              return;              case 38:              this.txtSearchTerm = ((System.Windows.Controls.TextBox)(target));              return;              case 39:              this.btnSearchPrevious = ((System.Windows.Controls.Button)(target));              return;              case 40:              this.btnSearchNext = ((System.Windows.Controls.Button)(target));              return;              case 41:              this.chkMatchCase = ((System.Windows.Controls.CheckBox)(target));              return;              case 42:              this.chkUseRegEx = ((System.Windows.Controls.CheckBox)(target));              return;              case 43:              this.txtInput = ((System.Windows.Controls.TextBox)(target));                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.KeyDown += new System.Windows.Input.KeyEventHandler(this.txtInput_KeyDown);                            #line default              #line hidden                            #line 216 "..\..\..\..\ChatControl\ChatControl.xaml"              this.txtInput.SelectionChanged += new System.Windows.RoutedEventHandler(this.txtInput_SelectionChanged);                            #line default              #line hidden              return;              case 44:              this.colNickList = ((System.Windows.Controls.ColumnDefinition)(target));              return;              case 45:              this.boxOutput = ((Floe.UI.ChatBox)(target));              return;              case 46:              this.lstNicknames = ((System.Windows.Controls.ListBox)(target));              return;              case 48:              this.splitter = ((System.Windows.Controls.GridSplitter)(target));              return;              }
Missing Default,Floe.UI,ChatControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\ChatControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 47:              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.Controls.Control.MouseDoubleClickEvent;                            #line 283 "..\..\..\..\ChatControl\ChatControl.xaml"              eventSetter.Handler = new System.Windows.Input.MouseButtonEventHandler(this.lstNicknames_MouseDoubleClick);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              break;              }
Missing Default,Floe.UI,NicknameItem,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\NicknameItem.cs,NicknameItem,The following switch statement is missing a default case: switch (nick[0])  				{  					case '@':  						level |= ChannelLevel.Op;  						break;  					case '%':  						level |= ChannelLevel.HalfOp;  						break;  					case '+':  						level |= ChannelLevel.Voice;  						break;  				}
Missing Default,Floe.UI,NicknameList,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatControl\NicknameList.cs,ProcessMode,The following switch statement is missing a default case: switch (mode.Mode)  			{  				case 'o':  					mask = ChannelLevel.Op;  					break;  				case 'h':  					mask = ChannelLevel.HalfOp;  					break;  				case 'v':  					mask = ChannelLevel.Voice;  					break;  			}
Missing Default,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Session_StateChanged,The following switch statement is missing a default case: switch (session.State)  			{  				case IrcSessionState.Connecting:  					foreach (var p in (from i in this.Items  									   where i.Page.Session == sender && i.Page.Target != null  									   select i).ToArray())  					{  						this.RemovePage(p.Page);  					}  					break;  				case IrcSessionState.Disconnected:  					if(!_isShuttingDown)  					{  						App.DoEvent("disconnect");  					}  					break;  			}
Missing Default,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Session_CtcpCommandReceived,The following switch statement is missing a default case: switch (e.Command.Command)  				{  					case "VERSION":  						session.SendCtcp(new IrcTarget(e.From)' new CtcpCommand(  							"VERSION"'  							App.Product'  							App.Version)' true);  						break;  					case "PING":  						session.SendCtcp(new IrcTarget(e.From)' new CtcpCommand(  							"PONG"'  							e.Command.Arguments.Length > 0 ? e.Command.Arguments[0] : null)' true);  						break;  					case "CLIENTINFO":  						session.SendCtcp(new IrcTarget(e.From)' new CtcpCommand(  							"CLIENTINFO"'  							"VERSION"' "PING"' "CLIENTINFO"' "ACTION")' true);  						break;  					case "DCC":  						var args = e.Command.Arguments;  						e.Handled = this.HandleDcc(session' new IrcTarget(e.From)' args);  						break;  				}
Missing Default,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,session_InfoReceived,The following switch statement is missing a default case: switch (e.Code)  			{  				case IrcCode.RPL_LISTSTART:  					App.Create(session' new ListControl(session)' true);  					break;  			}
Missing Default,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,WndProc,The following switch statement is missing a default case: switch (msg)  			{  				case WindowConstants.WM_NCHITTEST:  					{  						var x = (short)(lParam.ToInt32() & 0xFFFF);  						var p = new Point((double)x' lParam.ToInt32() >> 16);  						p = this.PointFromScreen(p);    						var htResult = WindowConstants.HitTestValues.HTCLIENT;    						if ((this.ActualWidth - p.X <= ResizeWidth * 2.0 && this.ActualHeight - p.Y <= ResizeHeight) ||  							(this.ActualWidth - p.X <= ResizeWidth && this.ActualHeight - p.Y <= ResizeHeight * 2))  						{  							htResult = WindowConstants.HitTestValues.HTBOTTOMRIGHT;  						}  						else if (p.X <= ResizeWidth)  						{  							if (p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTTOPLEFT;  							}  							else if (this.ActualHeight - p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTBOTTOMLEFT;  							}  							else  							{  								htResult = WindowConstants.HitTestValues.HTLEFT;  							}  						}  						else if (this.ActualWidth - p.X <= ResizeWidth)  						{  							if (p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTTOPRIGHT;  							}  							else if (this.ActualHeight - p.Y <= ResizeHeight)  							{  								htResult = WindowConstants.HitTestValues.HTBOTTOMRIGHT;  							}  							else  							{  								htResult = WindowConstants.HitTestValues.HTRIGHT;  							}  						}  						else if (p.Y <= ResizeHeight)  						{  							htResult = WindowConstants.HitTestValues.HTTOP;  						}  						else if (this.ActualHeight - p.Y <= ResizeHeight)  						{  							htResult = WindowConstants.HitTestValues.HTBOTTOM;  						}  						else if (p.Y <= grdRoot.RowDefinitions[0].Height.Value &&  							p.X <= grdRoot.ColumnDefinitions[0].ActualWidth)  						{  							htResult = WindowConstants.HitTestValues.HTCAPTION;  						}    						var s = this.InputHitTest(p) as System.Windows.Controls.StackPanel;  						if (s != null && s.TemplatedParent is TabControl)  						{  							htResult = WindowConstants.HitTestValues.HTCAPTION;  						}    						handled = true;  						return (IntPtr)htResult;  					}  				case WindowConstants.WM_GETMINMAXINFO:  					{  						WindowHelper.GetMinMaxInfo(this' _hWnd' lParam);  						handled = true;  					}  					break;  				case WindowConstants.WM_QUERYENDSESSION:  					_isShuttingDown = true;  					handled = true;  					return (IntPtr)1;  				case WindowConstants.WM_ENDSESSION:  					if (wParam == (IntPtr)0)  					{  						_isShuttingDown = false;  					}  					break;  			}
Missing Default,Floe.UI,ChatWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ChatWindow\ChatWindow_Commands.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.window = ((Floe.UI.ChatWindow)(target));              return;              case 2:                            #line 16 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteChat);                            #line default              #line hidden              return;              case 3:                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteCloseTab);                            #line default              #line hidden                            #line 17 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteCloseTab);                            #line default              #line hidden              return;              case 4:                            #line 18 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNewTab);                            #line default              #line hidden              return;              case 5:                            #line 19 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteDetach);                            #line default              #line hidden              return;              case 6:                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecutePreviousTab);                            #line default              #line hidden                            #line 20 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecutePreviousTab);                            #line default              #line hidden              return;              case 7:                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteNextTab);                            #line default              #line hidden                            #line 21 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).CanExecute += new System.Windows.Input.CanExecuteRoutedEventHandler(this.CanExecuteNextTab);                            #line default              #line hidden              return;              case 8:                            #line 22 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteSettings);                            #line default              #line hidden              return;              case 9:                            #line 23 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMinimize);                            #line default              #line hidden              return;              case 10:                            #line 24 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteMaximize);                            #line default              #line hidden              return;              case 11:                            #line 25 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteClose);                            #line default              #line hidden              return;              case 12:                            #line 29 "..\..\..\..\ChatWindow\ChatWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NotifyQuit_Click);                            #line default              #line hidden              return;              case 13:              this.grdRoot = ((System.Windows.Controls.Grid)(target));              return;              case 14:              this.btnSettings = ((System.Windows.Controls.Button)(target));              return;              case 15:              this.btnMinimize = ((System.Windows.Controls.Button)(target));              return;              case 16:              this.btnMaximize = ((System.Windows.Controls.Button)(target));              return;              case 17:              this.btnClose = ((System.Windows.Controls.Button)(target));              return;              case 18:              this.tabsChat = ((System.Windows.Controls.TabControl)(target));              return;              }
Missing Default,Floe.UI,ConfirmDialog,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Dialogs\ConfirmDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.txtMessage = ((System.Windows.Controls.TextBlock)(target));              return;              case 2:              this.chkDontAskAgain = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.btnYes = ((System.Windows.Controls.Button)(target));                            #line 13 "..\..\..\..\Dialogs\ConfirmDialog.xaml"              this.btnYes.Click += new System.Windows.RoutedEventHandler(this.btnYes_Click);                            #line default              #line hidden              return;              case 4:              this.btnNo = ((System.Windows.Controls.Button)(target));                            #line 14 "..\..\..\..\Dialogs\ConfirmDialog.xaml"              this.btnNo.Click += new System.Windows.RoutedEventHandler(this.btnNo_Click);                            #line default              #line hidden              return;              }
Missing Default,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,StartSend,The following switch statement is missing a default case: switch (this.DccMethod)  			{  				case DccMethod.Send:  					_dcc = new DccSendSender(_fileInfo);  					break;  				case DccMethod.Xmit:  					_dcc = new DccXmitSender(_fileInfo);  					break;  			}
Missing Default,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Accept,The following switch statement is missing a default case: switch (this.DccMethod)  			{  				case DccMethod.Send:  					_dcc = new DccSendReceiver(_fileInfo) { ForceOverwrite = forceOverwrite };  					break;  				case DccMethod.Xmit:  					_dcc = new DccXmitReceiver(_fileInfo) { ForceOverwrite = forceOverwrite' ForceResume = chkForceResume.IsChecked == true };  					break;  			}
Missing Default,Floe.UI,FileControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\FileControl\FileControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.fileControl = ((Floe.UI.FileControl)(target));              return;              case 2:              this.lblDescription = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.lblFileSize = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lblTransferred = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.lblSpeed = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.lblEta = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.lblStatus = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.prgProgress = ((System.Windows.Controls.ProgressBar)(target));              return;              case 9:              this.btnSave = ((System.Windows.Controls.Button)(target));                            #line 53 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSave.Click += new System.Windows.RoutedEventHandler(this.btnSave_Click);                            #line default              #line hidden              return;              case 10:              this.btnSaveAs = ((System.Windows.Controls.Button)(target));                            #line 65 "..\..\..\..\FileControl\FileControl.xaml"              this.btnSaveAs.Click += new System.Windows.RoutedEventHandler(this.btnSaveAs_Click);                            #line default              #line hidden              return;              case 11:              this.btnDecline = ((System.Windows.Controls.Button)(target));                            #line 77 "..\..\..\..\FileControl\FileControl.xaml"              this.btnDecline.Click += new System.Windows.RoutedEventHandler(this.btnDecline_Click);                            #line default              #line hidden              return;              case 12:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 89 "..\..\..\..\FileControl\FileControl.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 13:              this.btnOpen = ((System.Windows.Controls.Button)(target));                            #line 101 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpen.Click += new System.Windows.RoutedEventHandler(this.btnOpen_Click);                            #line default              #line hidden              return;              case 14:              this.btnOpenFolder = ((System.Windows.Controls.Button)(target));                            #line 116 "..\..\..\..\FileControl\FileControl.xaml"              this.btnOpenFolder.Click += new System.Windows.RoutedEventHandler(this.btnOpenFolder_Click);                            #line default              #line hidden              return;              case 15:              this.chkForceResume = ((System.Windows.Controls.CheckBox)(target));              return;              }
Missing Default,Floe.UI,ListControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ListControl\ListControl.xaml.cs,Session_InfoReceived,The following switch statement is missing a default case: switch (e.Code)  			{  				case IrcCode.RPL_LIST:  					int count;  					if (e.Message.Parameters.Count == 4 &&  						int.TryParse(e.Message.Parameters[2]' out count))  					{  						_channels.Add(new ChannelItem(e.Message.Parameters[1]' count' e.Message.Parameters[3]));  						this.Count++;  					}  					break;  				case IrcCode.RPL_LISTEND:  					this.IsCloseable = true;  					this.Session.InfoReceived -= new EventHandler<IrcInfoEventArgs>(Session_InfoReceived);  					_channels.Sort();  					foreach (var c in _channels)  					{  						lstChannels.Items.Add(c);  					}  					break;  			}
Missing Default,Floe.UI,ListControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ListControl\ListControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.listControl = ((Floe.UI.ListControl)(target));              return;              case 2:                            #line 13 "..\..\..\..\ListControl\ListControl.xaml"              ((System.Windows.Input.CommandBinding)(target)).Executed += new System.Windows.Input.ExecutedRoutedEventHandler(this.ExecuteJoin);                            #line default              #line hidden              return;              case 3:              this.pnlDccChat = ((System.Windows.Controls.WrapPanel)(target));              return;              case 4:              this.lstChannels = ((System.Windows.Controls.ListView)(target));              return;              }
Missing Default,Floe.UI,ListControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\ListControl\ListControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 5:              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.Controls.Control.MouseDoubleClickEvent;                            #line 94 "..\..\..\..\ListControl\ListControl.xaml"              eventSetter.Handler = new System.Windows.Input.MouseButtonEventHandler(this.lstChannels_MouseDoubleClick);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              break;              }
Missing Default,Floe.UI.Interop,FolderBrowser,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\FolderBrowser.cs,Show,The following switch statement is missing a default case: switch (msg)  					{  						case 0x1:  							SendMessage(new HandleRef(null' hWnd)' 0x400 + 103' 1' path);  							break;  					}
Missing Default,Floe.UI.Interop,NotifyIcon,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Interop\NotifyIcon.cs,WndProc,The following switch statement is missing a default case: switch ((int)lParam)  				{  					case WM_LBUTTONDBLCLK:  						{  							var handler = this.DoubleClicked;  							if (handler != null)  							{  								handler(this' EventArgs.Empty);  							}  						}  						break;  					case WM_RBUTTONDOWN:  						{  							var handler = this.RightClicked;  							if (handler != null)  							{  								handler(this' EventArgs.Empty);  							}    							SetForegroundWindow(_src.Handle);  						}  						break;  				}
Missing Default,Floe.UI.Settings,BufferSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\BufferSettingsControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.txtOutputLines = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtInputHistory = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtMinimumCopyLength = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtMaxPasteLines = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 11:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.button1 = ((System.Windows.Controls.Button)(target));                            #line 62 "..\..\..\..\Settings\BufferSettingsControl.xaml"              this.button1.Click += new System.Windows.RoutedEventHandler(this.button1_Click);                            #line default              #line hidden              return;              }
Missing Default,Floe.UI.Settings,ColorsSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ColorsSettingsControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.chkColorizeNicknames = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.sldNicknameColorScheme = ((System.Windows.Controls.Slider)(target));              return;              case 3:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              }
Missing Default,Floe.UI.Settings,NetworkSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\NetworkSettingsControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.chkUseSocks5Proxy = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.txtProxyHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtPassword = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.textBlock2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.textBlock3 = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.checkBox3 = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              }
Missing Default,Floe.UI.Settings,SoundSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\SoundSettingsControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.chkIsLoggingEnabled = ((System.Windows.Controls.CheckBox)(target));              return;              case 2:              this.lstEvents = ((System.Windows.Controls.ListBox)(target));              return;              case 3:              this.txtPath = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.textBlock1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 5:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 36 "..\..\..\..\Settings\SoundSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              }
Missing Default,Floe.UI.Settings,DccSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\DccSettingsControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.txtLowPort = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.txtHighPort = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtDownloadFolder = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.lblDownloadFolder = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.btnBrowse = ((System.Windows.Controls.Button)(target));                            #line 44 "..\..\..\..\Settings\DccSettingsControl.xaml"              this.btnBrowse.Click += new System.Windows.RoutedEventHandler(this.btnBrowse_Click);                            #line default              #line hidden              return;              case 8:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:              this.txtDanger = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              }
Missing Default,Floe.UI.Settings,WindowSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\WindowSettingsControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.sldBackgroundOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 4:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.sldChromeOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 6:              this.label7 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.label8 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.label9 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.groupBox1 = ((System.Windows.Controls.GroupBox)(target));              return;              case 10:              this.sldActiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 11:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 12:              this.sldInactiveOpacity = ((System.Windows.Controls.Slider)(target));              return;              case 13:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 15:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 16:              this.sldMinTabWidth = ((System.Windows.Controls.Slider)(target));              return;              case 17:              this.label10 = ((System.Windows.Controls.Label)(target));              return;              case 18:              this.label11 = ((System.Windows.Controls.Label)(target));              return;              case 19:              this.comboBox1 = ((System.Windows.Controls.ComboBox)(target));              return;              case 20:              this.chkSuppressWarningOnQuit = ((System.Windows.Controls.CheckBox)(target));              return;              case 21:              this.chkDefaultQueryDetached = ((System.Windows.Controls.CheckBox)(target));              return;              case 22:              this.chkMinimizeToSystray = ((System.Windows.Controls.CheckBox)(target));              return;              }
Missing Default,Floe.UI.Settings,FormattingSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\FormattingSettingsControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.TextSettings = ((Floe.UI.Settings.FormattingSettingsControl)(target));              return;              case 2:              this.groupBox2 = ((System.Windows.Controls.GroupBox)(target));              return;              case 3:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.lstFontFamily = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 6:              this.txtFontSize = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.label6 = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtFontWeight = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.txtPreview = ((System.Windows.Controls.TextBlock)(target));              return;              case 10:              this.chkShowTimestamp = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.txtTimestampFormat = ((System.Windows.Controls.TextBox)(target));              return;              case 12:              this.chkUseTabularView = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.checkBox2 = ((System.Windows.Controls.CheckBox)(target));              return;              case 14:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));              return;              case 15:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              }
Missing Default,Floe.UI.Settings,ServerSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\ServerSettingsControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.lstServers = ((System.Windows.Controls.ListBox)(target));              return;              case 2:              this.btnNew = ((System.Windows.Controls.Button)(target));                            #line 17 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnNew.Click += new System.Windows.RoutedEventHandler(this.btnNew_Click);                            #line default              #line hidden              return;              case 3:              this.btnDelete = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.btnDelete.Click += new System.Windows.RoutedEventHandler(this.btnDelete_Click);                            #line default              #line hidden              return;              case 4:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtName = ((System.Windows.Controls.TextBox)(target));                            #line 30 "..\..\..\..\Settings\ServerSettingsControl.xaml"              this.txtName.SourceUpdated += new System.EventHandler<System.Windows.Data.DataTransferEventArgs>(this.txtName_SourceUpdated);                            #line default              #line hidden              return;              case 6:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 7:              this.txtHostname = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 9:              this.txtPort = ((System.Windows.Controls.TextBox)(target));              return;              case 10:              this.chkSsl = ((System.Windows.Controls.CheckBox)(target));              return;              case 11:              this.chkConnectOnStartup = ((System.Windows.Controls.CheckBox)(target));              return;              case 12:              this.chkAutoReconnect = ((System.Windows.Controls.CheckBox)(target));              return;              case 13:              this.label4 = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.textBox1 = ((System.Windows.Controls.TextBox)(target));              return;              case 15:              this.txtOnConnect = ((System.Windows.Controls.TextBox)(target));              return;              case 16:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 17:              this.label6 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,Floe.UI.Settings,SettingsWindow,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\SettingsWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.dockPanel1 = ((System.Windows.Controls.DockPanel)(target));              return;              case 2:              this.stackPanel1 = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.btnApply = ((System.Windows.Controls.Button)(target));                            #line 81 "..\..\..\..\Settings\SettingsWindow.xaml"              this.btnApply.Click += new System.Windows.RoutedEventHandler(this.btnApply_Click);                            #line default              #line hidden              return;              case 4:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 82 "..\..\..\..\Settings\SettingsWindow.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.btnCancel_Click);                            #line default              #line hidden              return;              case 5:              this.lstCategories = ((System.Windows.Controls.ListBox)(target));                            #line 85 "..\..\..\..\Settings\SettingsWindow.xaml"              this.lstCategories.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.lstCategories_SelectionChanged);                            #line default              #line hidden              return;              case 6:              this.grdSettings = ((System.Windows.Controls.Grid)(target));              return;              }
Missing Default,Floe.UI.Settings,UserSettingsControl,D:\research\architectureSmells\repos\bretternst_Floe\Floe.UI\Settings\UserSettingsControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label3 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.label5 = ((System.Windows.Controls.Label)(target));              return;              case 5:              this.txtNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtAltNickname = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.txtFullName = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.txtUsername = ((System.Windows.Controls.TextBox)(target));              return;              case 9:              this.chkInvisible = ((System.Windows.Controls.CheckBox)(target));              return;              }
