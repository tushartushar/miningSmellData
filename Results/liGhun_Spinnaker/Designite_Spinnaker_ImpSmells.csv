Implementation smell,Namespace,Class,File,Method,Description
Long Method,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The method has 175 lines of code.
Complex Method,Spinnaker,AppController,C:\repos\liGhun_Spinnaker\Spinnaker\AppController.cs,accounts_CollectionChanged,Cyclomatic complexity of the method is 9
Complex Method,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,Cyclomatic complexity of the method is 68
Long Parameter List,Spinnaker.GlobalHotKeys,HotKeyHost,C:\repos\liGhun_Spinnaker\Spinnaker\GlobalHotKeys.cs,WndProc,The method has 5 parameters.
Long Parameter List,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The method has 6 parameters.
Long Statement,Spinnaker,AppController,C:\repos\liGhun_Spinnaker\Spinnaker\AppController.cs,accounts_CollectionChanged,The length of the statement  "			Tuple<List<AppNetDotNet.Model.User>' AppNetDotNet.ApiCalls.ApiCallResponse> followings = AppNetDotNet.ApiCalls.Users.getFollowingsOfUser (account.access_token' account.username' parameters); " is 190.
Long Statement,Spinnaker,AppController,C:\repos\liGhun_Spinnaker\Spinnaker\AppController.cs,accounts_CollectionChanged,The length of the statement  "			Tuple<List<AppNetDotNet.Model.User>' AppNetDotNet.ApiCalls.ApiCallResponse> followers = AppNetDotNet.ApiCalls.Users.getFollowersOfUser (account.access_token' account.username' parameters); " is 188.
Long Statement,Spinnaker,AppController,C:\repos\liGhun_Spinnaker\Spinnaker\AppController.cs,load_stored_accounts,The length of the statement  "		string[] access_tokens = Crypto.ToInsecureString (Crypto.DecryptString (Properties.Settings.Default.access_tokens)).Split (delimiter' StringSplitOptions.RemoveEmptyEntries); " is 173.
Long Statement,Spinnaker,AppController,C:\repos\liGhun_Spinnaker\Spinnaker\AppController.cs,load_stored_accounts,The length of the statement  "				Tuple<AppNetDotNet.Model.Token' AppNetDotNet.ApiCalls.ApiCallResponse> token_response = AppNetDotNet.ApiCalls.Tokens.get (account.access_token); " is 144.
Long Statement,Spinnaker,AppController,C:\repos\liGhun_Spinnaker\Spinnaker\AppController.cs,add_new_account,The length of the statement  "	AppNetDotNet.Model.Authorization.registerAppInRegistry (AppNetDotNet.Model.Authorization.registerBrowserEmulationValue.IE8Always' alsoCreateVshostEntry: true); " is 159.
Long Statement,Spinnaker,AppController,C:\repos\liGhun_Spinnaker\Spinnaker\AppController.cs,add_new_account,The length of the statement  "	AppNetDotNet.Model.Authorization.clientSideFlow auth_window = new AppNetDotNet.Model.Authorization.clientSideFlow (api_key' Common.redirect_url' "basic write_post files"); " is 171.
Long Statement,Spinnaker,AppController,C:\repos\liGhun_Spinnaker\Spinnaker\AppController.cs,auth_window_AuthSuccess,The length of the statement  "		Tuple<AppNetDotNet.Model.Token' AppNetDotNet.ApiCalls.ApiCallResponse> token_response = AppNetDotNet.ApiCalls.Tokens.get (account.access_token); " is 144.
Long Statement,Spinnaker,Crypto,C:\repos\liGhun_Spinnaker\Spinnaker\Crypto.cs,EncryptString,The length of the statement  "	byte[] encryptedData = System.Security.Cryptography.ProtectedData.Protect (System.Text.Encoding.Unicode.GetBytes (ToInsecureString (input))' entropy' System.Security.Cryptography.DataProtectionScope.CurrentUser); " is 212.
Long Statement,Spinnaker,Crypto,C:\repos\liGhun_Spinnaker\Spinnaker\Crypto.cs,DecryptString,The length of the statement  "		byte[] decryptedData = System.Security.Cryptography.ProtectedData.Unprotect (Convert.FromBase64String (encryptedData)' entropy' System.Security.Cryptography.DataProtectionScope.CurrentUser); " is 190.
Long Statement,Spinnaker.UserInterface,Compose,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Compose.xaml.cs,textBoxContent_KeyDown,The length of the statement  "	if (e.Key == (Key.Return & Key.LeftCtrl) || e.Key == (Key.Enter & Key.LeftCtrl) || e.Key == (Key.Return & Key.RightCtrl) || e.Key == (Key.Enter & Key.RightCtrl)) { " is 163.
Long Statement,Spinnaker.UserInterface,Compose,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Compose.xaml.cs,button_send_Click,The length of the statement  "					toBePostedText = toBePostedText.Replace (string.Format ("[{0}]({1})"' linkEntity.text' linkEntity.url)' linkEntity.text); " is 121.
Long Statement,Spinnaker.UserInterface,Compose,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Compose.xaml.cs,Grid_MouseMove_1,The length of the statement  "	if (e.LeftButton == System.Windows.Input.MouseButtonState.Pressed && Mouse.DirectlyOver != autoCompeteTextbox_post.textBoxContent) " is 130.
Long Statement,Spinnaker.UserInterface,Compose,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Compose.xaml.cs,button_upload_photo_Click_1,The length of the statement  "			autoCompeteTextbox_post.textBoxContent.Text = autoCompeteTextbox_post.textBoxContent.Text.Insert (autoCompeteTextbox_post.textBoxContent.CaretIndex' "[" + System.IO.Path.GetFileNameWithoutExtension (path_to_be_uploaded_image) + "](photos.app.net/{post_id}/1)"); " is 261.
Long Statement,Spinnaker.UserInterface,Compose,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Compose.xaml.cs,button_upload_photo_MouseRightButtonDown_1,The length of the statement  "	if (autoCompeteTextbox_post.textBoxContent.Text.Contains ("[" + System.IO.Path.GetFileNameWithoutExtension (path_to_be_uploaded_image) + "](photos.app.net/{post_id}/1)")) { " is 172.
Long Statement,Spinnaker.UserInterface,Compose,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Compose.xaml.cs,button_upload_photo_MouseRightButtonDown_1,The length of the statement  "		autoCompeteTextbox_post.textBoxContent.Text = autoCompeteTextbox_post.textBoxContent.Text.Replace ("[" + System.IO.Path.GetFileNameWithoutExtension (path_to_be_uploaded_image) + "](photos.app.net/{post_id}/1)"' ""); " is 215.
Long Statement,Spinnaker.UserInterface,Compose,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Compose.xaml.cs,add_link_window_InsertLink,The length of the statement  "			autoCompeteTextbox_post.textBoxContent.Text = autoCompeteTextbox_post.textBoxContent.Text.Insert (autoCompeteTextbox_post.textBoxContent.CaretIndex' e.insert_string); " is 166.
Long Statement,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The length of the statement  "			foreach (string username in AppController.savedUsernames.Where (name => name.ToLower ().StartsWith (CurrentText.ToLower ()))) { " is 127.
Long Statement,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The length of the statement  "			foreach (string hashtag in AppController.savedHashtags.Where (tag => tag.ToLower ().StartsWith (CurrentText.ToLower ()))) { " is 123.
Long Statement,Spinnaker.Model,Account,C:\repos\liGhun_Spinnaker\Spinnaker\Model\Account.cs,send_post,The length of the statement  "				Tuple<AppNetDotNet.Model.File' ApiCallResponse> uploadedFile = AppNetDotNet.ApiCalls.Files.create (this.access_token' local_file_path: local_file_to_embed' type: "de.li-ghun.spinnaker.image"); " is 192.
Long Statement,Spinnaker.Model,Account,C:\repos\liGhun_Spinnaker\Spinnaker\Model\Account.cs,send_post,The length of the statement  "		Tuple<Post' ApiCallResponse> response = Posts.create (this.access_token' text' toBeEmbeddedFiles: toBeAddedFiles' entities: entities' parse_links: true); " is 153.
Complex Conditional,Spinnaker.UserInterface,Compose,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Compose.xaml.cs,textBoxContent_KeyDown,The conditional expression  "e.Key == (Key.Return & Key.LeftCtrl) || e.Key == (Key.Enter & Key.LeftCtrl) || e.Key == (Key.Return & Key.RightCtrl) || e.Key == (Key.Enter & Key.RightCtrl)"  is complex.
Empty Catch Block,Spinnaker,AppController,C:\repos\liGhun_Spinnaker\Spinnaker\AppController.cs,AppController,The method has an empty catch block.
Empty Catch Block,Spinnaker.UserInterface,AddLink,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\AddLink.xaml.cs,AddLink,The method has an empty catch block.
Empty Catch Block,Spinnaker.UserInterface,Preferences,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Preferences.xaml.cs,Preferences,The method has an empty catch block.
Empty Catch Block,Spinnaker.UserInterface,Preferences,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Preferences.xaml.cs,link_to_license_Click,The method has an empty catch block.
Empty Catch Block,Spinnaker.UserInterface,Preferences,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Preferences.xaml.cs,Window_Closing_1,The method has an empty catch block.
Magic Number,Spinnaker.GlobalHotKeys,HotKey,C:\repos\liGhun_Spinnaker\Spinnaker\GlobalHotKeys.cs,GetHashCode,The following statement contains a magic number: return (int)Modifiers + 10 * (int)Key;  
Magic Number,Spinnaker.GlobalHotKeys,HotKeyHost,C:\repos\liGhun_Spinnaker\Spinnaker\GlobalHotKeys.cs,RegisterHotKey,The following statement contains a magic number: if ((int)hwndSource.Handle != 0) {  	RegisterHotKey (hwndSource.Handle' id' (int)hotKey.Modifiers' KeyInterop.VirtualKeyFromKey (hotKey.Key));  	int error = Marshal.GetLastWin32Error ();  	if (error != 0) {  		Exception e = new Win32Exception (error);  		if (error == 1409)  			throw new HotKeyAlreadyRegisteredException (e.Message' hotKey' e);  		else  			throw e;  	}  }  else  	throw new InvalidOperationException ("Handle is invalid");  
Magic Number,Spinnaker.GlobalHotKeys,HotKeyHost,C:\repos\liGhun_Spinnaker\Spinnaker\GlobalHotKeys.cs,RegisterHotKey,The following statement contains a magic number: if (error != 0) {  	Exception e = new Win32Exception (error);  	if (error == 1409)  		throw new HotKeyAlreadyRegisteredException (e.Message' hotKey' e);  	else  		throw e;  }  
Magic Number,Spinnaker.GlobalHotKeys,HotKeyHost,C:\repos\liGhun_Spinnaker\Spinnaker\GlobalHotKeys.cs,RegisterHotKey,The following statement contains a magic number: if (error == 1409)  	throw new HotKeyAlreadyRegisteredException (e.Message' hotKey' e);  else  	throw e;  
Magic Number,Spinnaker,pretty_version,C:\repos\liGhun_Spinnaker\Spinnaker\pretty_version.cs,get_nice_version_string,The following statement contains a magic number: while (pretty_string.Length > 3 && pretty_string.EndsWith (".0")) {  	pretty_string = pretty_string.Substring (0' pretty_string.Length - 2);  }  
Magic Number,Spinnaker,pretty_version,C:\repos\liGhun_Spinnaker\Spinnaker\pretty_version.cs,get_nice_version_string,The following statement contains a magic number: while (pretty_string.Length > 3 && pretty_string.EndsWith (".0")) {  	pretty_string = pretty_string.Substring (0' pretty_string.Length - 2);  }  
Magic Number,Spinnaker,pretty_version,C:\repos\liGhun_Spinnaker\Spinnaker\pretty_version.cs,get_nice_version_string,The following statement contains a magic number: pretty_string = pretty_string.Substring (0' pretty_string.Length - 2);  
Magic Number,Spinnaker,AppController,C:\repos\liGhun_Spinnaker\Spinnaker\AppController.cs,accounts_CollectionChanged,The following statement contains a magic number: if (e.NewItems != null) {  	foreach (Model.Account account in e.NewItems) {  		AppNetDotNet.ApiCalls.Parameters parameters = new AppNetDotNet.ApiCalls.Parameters ();  		parameters.count = 200;  		Tuple<List<AppNetDotNet.Model.User>' AppNetDotNet.ApiCalls.ApiCallResponse> followings = AppNetDotNet.ApiCalls.Users.getFollowingsOfUser (account.access_token' account.username' parameters);  		if (followings.Item2.success) {  			foreach (AppNetDotNet.Model.User following in followings.Item1) {  				if (!savedUsernames.Contains (following.username)) {  					savedUsernames.Add ("@" + following.username);  				}  			}  		}  		Tuple<List<AppNetDotNet.Model.User>' AppNetDotNet.ApiCalls.ApiCallResponse> followers = AppNetDotNet.ApiCalls.Users.getFollowersOfUser (account.access_token' account.username' parameters);  		if (followers.Item2.success) {  			foreach (AppNetDotNet.Model.User follower in followers.Item1) {  				if (!savedUsernames.Contains (follower.username)) {  					savedUsernames.Add ("@" + follower.username);  				}  			}  		}  	}  }  
Magic Number,Spinnaker,AppController,C:\repos\liGhun_Spinnaker\Spinnaker\AppController.cs,accounts_CollectionChanged,The following statement contains a magic number: foreach (Model.Account account in e.NewItems) {  	AppNetDotNet.ApiCalls.Parameters parameters = new AppNetDotNet.ApiCalls.Parameters ();  	parameters.count = 200;  	Tuple<List<AppNetDotNet.Model.User>' AppNetDotNet.ApiCalls.ApiCallResponse> followings = AppNetDotNet.ApiCalls.Users.getFollowingsOfUser (account.access_token' account.username' parameters);  	if (followings.Item2.success) {  		foreach (AppNetDotNet.Model.User following in followings.Item1) {  			if (!savedUsernames.Contains (following.username)) {  				savedUsernames.Add ("@" + following.username);  			}  		}  	}  	Tuple<List<AppNetDotNet.Model.User>' AppNetDotNet.ApiCalls.ApiCallResponse> followers = AppNetDotNet.ApiCalls.Users.getFollowersOfUser (account.access_token' account.username' parameters);  	if (followers.Item2.success) {  		foreach (AppNetDotNet.Model.User follower in followers.Item1) {  			if (!savedUsernames.Contains (follower.username)) {  				savedUsernames.Add ("@" + follower.username);  			}  		}  	}  }  
Magic Number,Spinnaker,AppController,C:\repos\liGhun_Spinnaker\Spinnaker\AppController.cs,accounts_CollectionChanged,The following statement contains a magic number: parameters.count = 200;  
Magic Number,Spinnaker.UserInterface,Startup,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Startup.xaml.cs,Startup,The following statement contains a magic number: this.Left = (screenWidth / 2) - (windowWidth / 2);  
Magic Number,Spinnaker.UserInterface,Startup,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Startup.xaml.cs,Startup,The following statement contains a magic number: this.Left = (screenWidth / 2) - (windowWidth / 2);  
Magic Number,Spinnaker.UserInterface,Startup,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Startup.xaml.cs,Startup,The following statement contains a magic number: this.Top = (screenHeight / 2) - (windowHeight / 2);  
Magic Number,Spinnaker.UserInterface,Startup,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Startup.xaml.cs,Startup,The following statement contains a magic number: this.Top = (screenHeight / 2) - (windowHeight / 2);  
Magic Number,Spinnaker.UserInterface,Compose,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Compose.xaml.cs,textBoxContent_TextChanged,The following statement contains a magic number: if (remaining_chars < 0) {  	textblock_remaining_chars.Foreground = Brushes.Red;  	button_send.IsEnabled = false;  }  else if (remaining_chars < 3) {  	textblock_remaining_chars.Foreground = Brushes.Yellow;  }  else {  	textblock_remaining_chars.Foreground = Brushes.White;  }  
Magic Number,Spinnaker.UserInterface,Compose,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Compose.xaml.cs,textBoxContent_TextChanged,The following statement contains a magic number: if (remaining_chars < 3) {  	textblock_remaining_chars.Foreground = Brushes.Yellow;  }  else {  	textblock_remaining_chars.Foreground = Brushes.White;  }  
Magic Number,Spinnaker.UserInterface,Compose,C:\repos\liGhun_Spinnaker\Spinnaker\UserInterface\Compose.xaml.cs,button_upload_photo_MouseRightButtonDown_1,The following statement contains a magic number: image_upload_photo.Opacity = 0.7;  
Magic Number,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The following statement contains a magic number: if (UsernameStarted) {  	foreach (TextChange change in e.Changes) {  		if (change.AddedLength > 0) {  			CurrentText += textBoxContent.Text.Substring (change.Offset' change.AddedLength);  		}  		else if (change.RemovedLength > 0) {  			if (change.RemovedLength >= CurrentText.Length) {  				UsernameStarted = false;  				CurrentText = "";  				MatchingTexts.Clear ();  				popupMatchingUsernames.IsOpen = false;  				return;  			}  			else if (change.RemovedLength == CurrentText.Length) {  				WordStart = true;  				CurrentText = "";  				popupMatchingUsernames.IsOpen = false;  				MatchingTexts.Clear ();  			}  			else {  				CurrentText = CurrentText.Substring (0' CurrentText.Length - change.RemovedLength);  			}  		}  	}  	if (AppController.savedUsernames.Where (name => name.ToLower ().StartsWith (CurrentText.ToLower ())).Count () > 0) {  		MatchingTexts.Clear ();  		foreach (string username in AppController.savedUsernames.Where (name => name.ToLower ().StartsWith (CurrentText.ToLower ()))) {  			MatchingTexts.Add (username);  			if (MatchingTexts.Count >= 10) {  				break;  			}  		}  		popupMatchingUsernames.PlacementRectangle = textBoxContent.GetRectFromCharacterIndex (textBoxContent.CaretIndex' true);  		popupMatchingUsernames.IsOpen = true;  	}  	else {  		MatchingTexts.Clear ();  		popupMatchingUsernames.IsOpen = false;  	}  }  else if (HashtagStarted) {  	foreach (TextChange change in e.Changes) {  		if (change.AddedLength > 0) {  			CurrentText += textBoxContent.Text.Substring (change.Offset' change.AddedLength);  		}  		else if (change.RemovedLength > 0) {  			if (change.RemovedLength >= CurrentText.Length) {  				HashtagStarted = false;  				CurrentText = "";  				MatchingTexts.Clear ();  				popupMatchingUsernames.IsOpen = false;  				return;  			}  			else if (change.RemovedLength == CurrentText.Length) {  				WordStart = true;  				CurrentText = "";  				popupMatchingUsernames.IsOpen = false;  				MatchingTexts.Clear ();  			}  			else {  				CurrentText = CurrentText.Substring (0' CurrentText.Length - change.RemovedLength);  			}  		}  	}  	if (AppController.savedHashtags.Where (tag => tag.ToLower ().StartsWith (CurrentText.ToLower ())).Count () > 0) {  		MatchingTexts.Clear ();  		foreach (string hashtag in AppController.savedHashtags.Where (tag => tag.ToLower ().StartsWith (CurrentText.ToLower ()))) {  			MatchingTexts.Add (hashtag);  			if (MatchingTexts.Count >= 10) {  				break;  			}  		}  		popupMatchingUsernames.PlacementRectangle = textBoxContent.GetRectFromCharacterIndex (textBoxContent.CaretIndex' true);  		popupMatchingUsernames.IsOpen = true;  	}  	else {  		MatchingTexts.Clear ();  		popupMatchingUsernames.IsOpen = false;  	}  }  
Magic Number,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The following statement contains a magic number: if (UsernameStarted) {  	foreach (TextChange change in e.Changes) {  		if (change.AddedLength > 0) {  			CurrentText += textBoxContent.Text.Substring (change.Offset' change.AddedLength);  		}  		else if (change.RemovedLength > 0) {  			if (change.RemovedLength >= CurrentText.Length) {  				UsernameStarted = false;  				CurrentText = "";  				MatchingTexts.Clear ();  				popupMatchingUsernames.IsOpen = false;  				return;  			}  			else if (change.RemovedLength == CurrentText.Length) {  				WordStart = true;  				CurrentText = "";  				popupMatchingUsernames.IsOpen = false;  				MatchingTexts.Clear ();  			}  			else {  				CurrentText = CurrentText.Substring (0' CurrentText.Length - change.RemovedLength);  			}  		}  	}  	if (AppController.savedUsernames.Where (name => name.ToLower ().StartsWith (CurrentText.ToLower ())).Count () > 0) {  		MatchingTexts.Clear ();  		foreach (string username in AppController.savedUsernames.Where (name => name.ToLower ().StartsWith (CurrentText.ToLower ()))) {  			MatchingTexts.Add (username);  			if (MatchingTexts.Count >= 10) {  				break;  			}  		}  		popupMatchingUsernames.PlacementRectangle = textBoxContent.GetRectFromCharacterIndex (textBoxContent.CaretIndex' true);  		popupMatchingUsernames.IsOpen = true;  	}  	else {  		MatchingTexts.Clear ();  		popupMatchingUsernames.IsOpen = false;  	}  }  else if (HashtagStarted) {  	foreach (TextChange change in e.Changes) {  		if (change.AddedLength > 0) {  			CurrentText += textBoxContent.Text.Substring (change.Offset' change.AddedLength);  		}  		else if (change.RemovedLength > 0) {  			if (change.RemovedLength >= CurrentText.Length) {  				HashtagStarted = false;  				CurrentText = "";  				MatchingTexts.Clear ();  				popupMatchingUsernames.IsOpen = false;  				return;  			}  			else if (change.RemovedLength == CurrentText.Length) {  				WordStart = true;  				CurrentText = "";  				popupMatchingUsernames.IsOpen = false;  				MatchingTexts.Clear ();  			}  			else {  				CurrentText = CurrentText.Substring (0' CurrentText.Length - change.RemovedLength);  			}  		}  	}  	if (AppController.savedHashtags.Where (tag => tag.ToLower ().StartsWith (CurrentText.ToLower ())).Count () > 0) {  		MatchingTexts.Clear ();  		foreach (string hashtag in AppController.savedHashtags.Where (tag => tag.ToLower ().StartsWith (CurrentText.ToLower ()))) {  			MatchingTexts.Add (hashtag);  			if (MatchingTexts.Count >= 10) {  				break;  			}  		}  		popupMatchingUsernames.PlacementRectangle = textBoxContent.GetRectFromCharacterIndex (textBoxContent.CaretIndex' true);  		popupMatchingUsernames.IsOpen = true;  	}  	else {  		MatchingTexts.Clear ();  		popupMatchingUsernames.IsOpen = false;  	}  }  
Magic Number,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The following statement contains a magic number: if (AppController.savedUsernames.Where (name => name.ToLower ().StartsWith (CurrentText.ToLower ())).Count () > 0) {  	MatchingTexts.Clear ();  	foreach (string username in AppController.savedUsernames.Where (name => name.ToLower ().StartsWith (CurrentText.ToLower ()))) {  		MatchingTexts.Add (username);  		if (MatchingTexts.Count >= 10) {  			break;  		}  	}  	popupMatchingUsernames.PlacementRectangle = textBoxContent.GetRectFromCharacterIndex (textBoxContent.CaretIndex' true);  	popupMatchingUsernames.IsOpen = true;  }  else {  	MatchingTexts.Clear ();  	popupMatchingUsernames.IsOpen = false;  }  
Magic Number,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The following statement contains a magic number: foreach (string username in AppController.savedUsernames.Where (name => name.ToLower ().StartsWith (CurrentText.ToLower ()))) {  	MatchingTexts.Add (username);  	if (MatchingTexts.Count >= 10) {  		break;  	}  }  
Magic Number,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The following statement contains a magic number: if (MatchingTexts.Count >= 10) {  	break;  }  
Magic Number,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The following statement contains a magic number: if (HashtagStarted) {  	foreach (TextChange change in e.Changes) {  		if (change.AddedLength > 0) {  			CurrentText += textBoxContent.Text.Substring (change.Offset' change.AddedLength);  		}  		else if (change.RemovedLength > 0) {  			if (change.RemovedLength >= CurrentText.Length) {  				HashtagStarted = false;  				CurrentText = "";  				MatchingTexts.Clear ();  				popupMatchingUsernames.IsOpen = false;  				return;  			}  			else if (change.RemovedLength == CurrentText.Length) {  				WordStart = true;  				CurrentText = "";  				popupMatchingUsernames.IsOpen = false;  				MatchingTexts.Clear ();  			}  			else {  				CurrentText = CurrentText.Substring (0' CurrentText.Length - change.RemovedLength);  			}  		}  	}  	if (AppController.savedHashtags.Where (tag => tag.ToLower ().StartsWith (CurrentText.ToLower ())).Count () > 0) {  		MatchingTexts.Clear ();  		foreach (string hashtag in AppController.savedHashtags.Where (tag => tag.ToLower ().StartsWith (CurrentText.ToLower ()))) {  			MatchingTexts.Add (hashtag);  			if (MatchingTexts.Count >= 10) {  				break;  			}  		}  		popupMatchingUsernames.PlacementRectangle = textBoxContent.GetRectFromCharacterIndex (textBoxContent.CaretIndex' true);  		popupMatchingUsernames.IsOpen = true;  	}  	else {  		MatchingTexts.Clear ();  		popupMatchingUsernames.IsOpen = false;  	}  }  
Magic Number,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The following statement contains a magic number: if (AppController.savedHashtags.Where (tag => tag.ToLower ().StartsWith (CurrentText.ToLower ())).Count () > 0) {  	MatchingTexts.Clear ();  	foreach (string hashtag in AppController.savedHashtags.Where (tag => tag.ToLower ().StartsWith (CurrentText.ToLower ()))) {  		MatchingTexts.Add (hashtag);  		if (MatchingTexts.Count >= 10) {  			break;  		}  	}  	popupMatchingUsernames.PlacementRectangle = textBoxContent.GetRectFromCharacterIndex (textBoxContent.CaretIndex' true);  	popupMatchingUsernames.IsOpen = true;  }  else {  	MatchingTexts.Clear ();  	popupMatchingUsernames.IsOpen = false;  }  
Magic Number,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The following statement contains a magic number: foreach (string hashtag in AppController.savedHashtags.Where (tag => tag.ToLower ().StartsWith (CurrentText.ToLower ()))) {  	MatchingTexts.Add (hashtag);  	if (MatchingTexts.Count >= 10) {  		break;  	}  }  
Magic Number,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The following statement contains a magic number: if (MatchingTexts.Count >= 10) {  	break;  }  
Magic Number,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The following statement contains a magic number: foreach (Match match in Regex.Matches (textBoxContent.Text' pattern' RegexOptions.IgnoreCase)) {  	if (!MarkdownLinksInText.ContainsKey (match.Groups ["markupLink"].Value)) {  		MarkdownLinksInText.Add (match.Groups ["markupLink"].Value' match.Groups ["markupText"].Value);  	}  	NumberOfChars -= 4 + match.Groups ["markupLink"].Value.Length;  }  
Magic Number,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The following statement contains a magic number: NumberOfChars -= 4 + match.Groups ["markupLink"].Value.Length;  
Duplicate Code,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_TextChanged,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 32)' (34' 60))
Missing Default,Spinnaker.Controls,AutoCompleteTextbox,C:\repos\liGhun_Spinnaker\Spinnaker\Controls\AutoCompleteTextbox.xaml.cs,textBox1_KeyDown,The following switch statement is missing a default case: switch (e.Key) {  case Key.Escape:  	popupMatchingUsernames.IsOpen = false;  	break;  case Key.Down:  	if (popupMatchingUsernames.IsOpen && listBoxMatchingUsernames.Items.Count > 0) {  		listBoxMatchingUsernames.Focus ();  		listBoxMatchingUsernames.SelectedIndex = 0;  	}  	break;  }  
