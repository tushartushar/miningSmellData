Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LightRiver,Convert2,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Core\Utility\Convert2.cs,ToDateTime,Cyclomatic complexity of the method is 9
Long Statement,LightRiver,EnumDescriptionAttribute,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Core\Attirubes\EnumDescriptionAttribute.cs,GetKey,The length of the statement  "	var customAttributes = fieldInfo.GetCustomAttributes (typeof(EnumDescriptionAttribute)' false) as EnumDescriptionAttribute[]; " is 125.
Long Statement,LightRiver,EnumDescriptionAttribute,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Core\Attirubes\EnumDescriptionAttribute.cs,GetValue,The length of the statement  "	var customAttributes = fieldInfo.GetCustomAttributes (typeof(EnumDescriptionAttribute)' false) as EnumDescriptionAttribute[]; " is 125.
Long Statement,LightRiver.ServiceModel,BaseHttpService,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\ServiceModel\BaseHttpService\Base\BaseHttpService.cs,GetAsync,The length of the statement  "	string requestUrl = (string.IsNullOrEmpty (requestParameterString) ? _apiUrl : string.Format ("{0}?{1}"' _apiUrl' requestParameterString)); " is 139.
Magic Number,LightRiver,Convert2,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Core\Utility\Convert2.cs,FromDateTimeFull,The following statement contains a magic number: if (source.Length < 12)  	return DateTime.Now;  
Magic Number,LightRiver,Convert2,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Core\Utility\Convert2.cs,FromDateTimeFull,The following statement contains a magic number: if (source.Length > 12) {  	DateTime.TryParseExact (source' "yyyyMMddHHmmss"' null' System.Globalization.DateTimeStyles.None' out result);  }  else {  	DateTime.TryParseExact (source' "yyyyMMddHHmm"' null' System.Globalization.DateTimeStyles.None' out result);  }  
Magic Number,LightRiver,Convert2,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Core\Utility\Convert2.cs,FromDatePart,The following statement contains a magic number: if (source.Length < 4)  	return DateTime.Now;  
Magic Number,LightRiver,Convert2,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Core\Utility\Convert2.cs,FromDatePart,The following statement contains a magic number: if (source.Length == 4) {  	DateTime.TryParseExact (source' "MMdd"' null' System.Globalization.DateTimeStyles.None' out result);  }  else if (source.Length == 8) {  	DateTime.TryParseExact (source' "yyyyMMdd"' null' System.Globalization.DateTimeStyles.None' out result);  }  
Magic Number,LightRiver,Convert2,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Core\Utility\Convert2.cs,FromDatePart,The following statement contains a magic number: if (source.Length == 4) {  	DateTime.TryParseExact (source' "MMdd"' null' System.Globalization.DateTimeStyles.None' out result);  }  else if (source.Length == 8) {  	DateTime.TryParseExact (source' "yyyyMMdd"' null' System.Globalization.DateTimeStyles.None' out result);  }  
Magic Number,LightRiver,Convert2,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Core\Utility\Convert2.cs,FromDatePart,The following statement contains a magic number: if (source.Length == 8) {  	DateTime.TryParseExact (source' "yyyyMMdd"' null' System.Globalization.DateTimeStyles.None' out result);  }  
Magic Number,LightRiver,Convert2,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Core\Utility\Convert2.cs,FromTimePart,The following statement contains a magic number: if (source.Length < 4)  	return DateTime.Now;  
Magic Number,LightRiver,Convert2,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Core\Utility\Convert2.cs,FromTimePart,The following statement contains a magic number: if (source.Length > 4) {  	DateTime.TryParseExact (source' "HHmmss"' null' System.Globalization.DateTimeStyles.None' out result);  }  else {  	DateTime.TryParseExact (source' "HHmm"' null' System.Globalization.DateTimeStyles.None' out result);  }  
Magic Number,LightRiver.Net,BaseSocketConnector,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Net.Sockets\Connector\BaseSocketConnector.cs,BaseSocketConnector,The following statement contains a magic number: MaxTriedConnectTimes = 3;  
Magic Number,LightRiver.Net,SocketConnector,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Net.Sockets\Connector\SocketConnector.cs,SendProxyConnectProtocol,The following statement contains a magic number: Array.Copy (portBytes' 0' buffer' 2' 2);  
Magic Number,LightRiver.Net,SocketConnector,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Net.Sockets\Connector\SocketConnector.cs,SendProxyConnectProtocol,The following statement contains a magic number: Array.Copy (portBytes' 0' buffer' 2' 2);  
Magic Number,LightRiver.Net,SocketConnector,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Net.Sockets\Connector\SocketConnector.cs,SendProxyConnectProtocol,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	ipBytes [i] = Byte.Parse (ipAddresses [i]);  }  
Magic Number,LightRiver.Net,SocketConnector,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Net.Sockets\Connector\SocketConnector.cs,SendProxyConnectProtocol,The following statement contains a magic number: Array.Copy (ipBytes' 0' buffer' 4' 4);  
Magic Number,LightRiver.Net,SocketConnector,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Net.Sockets\Connector\SocketConnector.cs,SendProxyConnectProtocol,The following statement contains a magic number: Array.Copy (ipBytes' 0' buffer' 4' 4);  
Magic Number,LightRiver.Net,SocketConnector,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Net.Sockets\Connector\SocketConnector.cs,SendProxyConnectProtocol,The following statement contains a magic number: Array.Copy (userIDBytes' 0' buffer' 8' 5);  
Magic Number,LightRiver.Net,SocketConnector,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Net.Sockets\Connector\SocketConnector.cs,SendProxyConnectProtocol,The following statement contains a magic number: Array.Copy (userIDBytes' 0' buffer' 8' 5);  
Magic Number,LightRiver.Net,SocketConnector,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Net.Sockets\Connector\SocketConnector.cs,SendProxyConnectProtocol,The following statement contains a magic number: buffer [13] = 0x00;  
Magic Number,LightRiver.Net,SocketConnector,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Net.Sockets\Connector\SocketConnector.cs,ReceiveProxyConnectResult,The following statement contains a magic number: return (receiveBuffer [1] == 90);  
Magic Number,LightRiver.Net,Host,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Net\HostProvider\Host.cs,Host,The following statement contains a magic number: if (sections.Length < 2)  	throw new ArgumentException (string.Format ("ipPort argemnt split less than two part by {0}"' split));  
Missing Default,LightRiver,Convert2,C:\repos\FatJohn_LightRiverToolkit\Portable\LightRiver\Core\Utility\Convert2.cs,ToDateTime,The following switch statement is missing a default case: switch (converType) {  case DateTimeConvertType.Full:  	dateTime = FromDateTimeFull (source);  	break;  case DateTimeConvertType.Date:  	dateTime = FromDatePart (source);  	break;  case DateTimeConvertType.Time:  	dateTime = FromTimePart (source);  	break;  }  
