Implementation smell,Namespace,Class,File,Method,Description
Complex Method,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,Cyclomatic complexity of the method is 16
Long Parameter List,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SendEmail,The method has 5 parameters.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,Main,The length of the statement  "			System.Console.WriteLine (DateTime.UtcNow.ToString () + ": Sleeping for " + ConfigurationManager.AppSettings ["SleepInterval"].ToString () + " milliseconds."); " is 159.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SendEmail,The length of the statement  "		NetworkCredential basicCredential = new NetworkCredential (ConfigurationManager.AppSettings ["EmailServerUsername"].ToString ()' ConfigurationManager.AppSettings ["EmailServerPassword"].ToString ()); " is 199.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SendHelpdeskEmail,The length of the statement  "	string senderEmail = (string)db.ExecuteScalar (string.Format ("SELECT Email FROM [User] WHERE [ID]={0};"' ym.SenderID)); " is 120.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SendHelpdeskEmail,The length of the statement  "	string senderFullName = (string)db.ExecuteScalar (string.Format ("SELECT FullName FROM [User] WHERE [ID]={0};"' ym.SenderID)); " is 126.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SendHelpdeskEmail,The length of the statement  "		SendEmail (ConfigurationManager.AppSettings ["EmailHelpdeskTo"].ToString ()' senderEmail' ConfigurationManager.AppSettings ["EmailHelpdeskSubject"].ToString ().Replace ("{FullName}"' senderFullName)' string.Format ("{0}\n\n{1}"' ym.MessageContent.PlainText' ym.WebUrl)); " is 270.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SendErrorEmail,The length of the statement  "		SendEmail (ConfigurationManager.AppSettings ["EmailErrorTo"].ToString ()' ConfigurationManager.AppSettings ["EmailErrorFrom"].ToString ()' "YammerDoodle Exception"' string.Format ("{0}\n\n{1}"' e.Message' e.StackTrace)); " is 220.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The length of the statement  "		lastSeen = (int)db.ExecuteScalar (string.Format ("SELECT CAST(ISNULL(LastId' {0}) AS INT) FROM [MessagePolling] WHERE [Endpoint]='{1}';"' lastSeen' messageUrl)); " is 161.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The length of the statement  "				string sql = string.Format ("INSERT INTO [Message] VALUES ({0}'{1}'{2}''{3}'''{4}'''{5}'''{6}'''{7}'''{8}'''{9}''{10}'{11}'{12})"' ym.ID' ym.SenderID' (string.IsNullOrEmpty (ym.RepliedToID) ? "NULL" : ym.RepliedToID)' DateTime.Parse (ym.CreatedAt).ToString ("s").Replace ("T"' " ")' ym.NetworkID' ym.MessageType' ym.SenderType' ym.Url' ym.WebUrl' ym.MessageContent.PlainText.Replace ("'"' "''")' ym.ThreadID' (ym.SystemMessage ? 1 : 0)' (ym.DirectMessage ? 1 : 0)); " is 465.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The length of the statement  "									Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken); " is 123.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetAllUsers,The length of the statement  "'[NetworkId]);"' yu.UserID' yu.ContactInfo.EmailAddresses [0].Address.Replace ("'"' "''")' yu.FullName.Replace ("'"' "''")' yu.Name.Replace ("'"' "''")' yu.WebUrl' yu.NetworkID); " is 178.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetAccessToken,The length of the statement  "	string authUrl2 = "https://www.yammer.com/contoso.com/oauth2/" + CLIENT_ID + "/authorize?client_id=" + CLIENT_ID + "&display=page&redirect_uri=" + HttpUtility.UrlEncode (REDIR_URL) + "&response_type=code"; " is 205.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetAccessToken,The length of the statement  "	string accTokenUrl = "https://www.yammer.com/oauth2/access_token.json?client_id=" + CLIENT_ID + "&client_secret=" + CLIENT_SECRET + "&code="; " is 141.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetAccessToken,The length of the statement  "				//utf8=%E2%9C%93&authenticity_token=bP%2Bh0zNGkeL7z%2Bj5stJ%2FPsyZb1O75SPmS5RpkXfSFgo%3D&network_permalink=&login=speschka@contoso.com&password=asdfadsf&remember_me=on " is 167.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetAccessToken,The length of the statement  "				//string foo = System.Web.HttpUtility.UrlEncodeUnicode("bP+h0zNGkeL7z+j5stJ/PsyZb1O75SPmS5RpkXfSFgo="); //.net recommends UrlEncode " is 131.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetAccessToken,The length of the statement  "				string postBody = "utf8=%E2%9C%93&authenticity_token=" + System.Web.HttpUtility.UrlEncode (authToken) + "&network_permalink=&login=" + userName + "&password=" + pwd + "&remember_me=on"; " is 185.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetAccessToken,The length of the statement  "				////POST /contoso.com/oauth2/adsfasdfsadf/authorize?client_id=asdfasdfasdf&display=page&redirect_uri=http%3A%2F%2Fsppdxwin8&response_type=code HTTP/1.1 " is 151.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SetCookies,The length of the statement  "		//Set-Cookie: yamtrak_id=2f1621f7-7452-4f7e-a974-6a85eb5ca22d; path=/; expires=Fri' 26-Sep-2014 15:20:54 GMT; secure; HttpOnly'_workfeed_session_id=34a53fdeab7da22fc4ae088fb19a2307; path=/; secure; HttpOnly " is 206.
Long Statement,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SetCookies,The length of the statement  "			if ((cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (YAMTRAK_COOKIE) > -1) || (cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (SESSION_COOKIE) > -1)) { " is 181.
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,Reply,The following statement contains a magic number: System.Threading.Thread.Sleep (10000);  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: foreach (string messageUrl in messageUrls) {  	System.Console.WriteLine ("Beginning Endpoint: " + messageUrl);  	int lastSeen = 379874143;  	//random "not too old" seed message id  	lastSeen = (int)db.ExecuteScalar (string.Format ("SELECT CAST(ISNULL(LastId' {0}) AS INT) FROM [MessagePolling] WHERE [Endpoint]='{1}';"' lastSeen' messageUrl));  	//Console.WriteLine(messageUrl);  	int lastId = -1;  	YammerMessages yms = new YammerMessages ();  	int maxId = lastSeen;  	while (yms.Messages.Count > 0 || lastId < 0) {  		if (lastId > 0)  			System.Threading.Thread.Sleep (5000);  		string jsonUrl = messageUrl + ".json?newer_than=" + lastSeen;  		if (lastId > 0)  			jsonUrl += "&older_than=" + lastId;  		else  			lastId = (int)lastSeen;  		response = MakeGetRequest (jsonUrl' accessToken);  		yms = YammerMessages.GetInstanceFromJson (response);  		foreach (YammerMessage ym in yms.Messages) {  			if (int.Parse (ym.ID) < lastId || lastId < 0)  				lastId = int.Parse (ym.ID);  			if (int.Parse (ym.ID) > maxId)  				maxId = int.Parse (ym.ID);  			//Console.WriteLine(ym.ID);  			string sql = string.Format ("INSERT INTO [Message] VALUES ({0}'{1}'{2}''{3}'''{4}'''{5}'''{6}'''{7}'''{8}'''{9}''{10}'{11}'{12})"' ym.ID' ym.SenderID' (string.IsNullOrEmpty (ym.RepliedToID) ? "NULL" : ym.RepliedToID)' DateTime.Parse (ym.CreatedAt).ToString ("s").Replace ("T"' " ")' ym.NetworkID' ym.MessageType' ym.SenderType' ym.Url' ym.WebUrl' ym.MessageContent.PlainText.Replace ("'"' "''")' ym.ThreadID' (ym.SystemMessage ? 1 : 0)' (ym.DirectMessage ? 1 : 0));  			bool insertSuccess = true;  			try {  				db.ExecuteNonQuery (sql);  			}  			catch (SqlException e) {  				insertSuccess = false;  				if (!e.Message.Contains ("Violation of PRIMARY KEY constraint")) {  					throw e;  				}  			}  			if (insertSuccess) {  				Regex tagPattern = new Regex (ConfigurationManager.AppSettings ["TagPattern"].ToString ()' RegexOptions.IgnoreCase);  				if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  					foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  						if (string.IsNullOrEmpty (m.Groups [2].Value)) {  							//general tag  							string userId = GetTagUser (m.Groups [1].Value);  							if (string.IsNullOrEmpty (userId)) {  								Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  							}  							else {  								Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  							}  						}  						else {  							//-myturn  							SetTag (m.Groups [1].Value' ym.SenderID);  							Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  						}  						//Follow this topic if we're not following it already  						FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  					}  				}  				if (ym.MessageContent.PlainText.Contains ("#helpdesk")) {  					SendHelpdeskEmail (ym' accessToken);  					Reply (ym.ID' string.Format ("Message forwarded to Helpdesk")' accessToken);  				}  				if (ym.MessageContent.PlainText.Contains ("#sayhi")) {  					Reply (ym.ID' string.Format ("Hi' [[user:{0}]]!"' ym.SenderID)' accessToken);  				}  			}  		}  		//Console.WriteLine(yms.Messages.Count);  		System.Threading.Thread.Sleep (3000);  		//don't flood' api limit is 10 per 30sec  	}  	//update lastId in database!  	;  	db.ExecuteNonQuery (string.Format (@" MERGE INTO [MessagePolling] a USING (SELECT '{0}' AS [Endpoint]' {1} AS [LastId]) b ON a.[Endpoint]=b.[Endpoint] WHEN MATCHED THEN UPDATE SET [LastId]=b.[LastId]' [LastPollTime]=GETDATE() WHEN NOT MATCHED THEN INSERT VALUES ([Endpoint]' [LastId]' GETDATE());"' messageUrl' maxId));  	System.Console.WriteLine ("Finished Endpoint: " + messageUrl);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: foreach (string messageUrl in messageUrls) {  	System.Console.WriteLine ("Beginning Endpoint: " + messageUrl);  	int lastSeen = 379874143;  	//random "not too old" seed message id  	lastSeen = (int)db.ExecuteScalar (string.Format ("SELECT CAST(ISNULL(LastId' {0}) AS INT) FROM [MessagePolling] WHERE [Endpoint]='{1}';"' lastSeen' messageUrl));  	//Console.WriteLine(messageUrl);  	int lastId = -1;  	YammerMessages yms = new YammerMessages ();  	int maxId = lastSeen;  	while (yms.Messages.Count > 0 || lastId < 0) {  		if (lastId > 0)  			System.Threading.Thread.Sleep (5000);  		string jsonUrl = messageUrl + ".json?newer_than=" + lastSeen;  		if (lastId > 0)  			jsonUrl += "&older_than=" + lastId;  		else  			lastId = (int)lastSeen;  		response = MakeGetRequest (jsonUrl' accessToken);  		yms = YammerMessages.GetInstanceFromJson (response);  		foreach (YammerMessage ym in yms.Messages) {  			if (int.Parse (ym.ID) < lastId || lastId < 0)  				lastId = int.Parse (ym.ID);  			if (int.Parse (ym.ID) > maxId)  				maxId = int.Parse (ym.ID);  			//Console.WriteLine(ym.ID);  			string sql = string.Format ("INSERT INTO [Message] VALUES ({0}'{1}'{2}''{3}'''{4}'''{5}'''{6}'''{7}'''{8}'''{9}''{10}'{11}'{12})"' ym.ID' ym.SenderID' (string.IsNullOrEmpty (ym.RepliedToID) ? "NULL" : ym.RepliedToID)' DateTime.Parse (ym.CreatedAt).ToString ("s").Replace ("T"' " ")' ym.NetworkID' ym.MessageType' ym.SenderType' ym.Url' ym.WebUrl' ym.MessageContent.PlainText.Replace ("'"' "''")' ym.ThreadID' (ym.SystemMessage ? 1 : 0)' (ym.DirectMessage ? 1 : 0));  			bool insertSuccess = true;  			try {  				db.ExecuteNonQuery (sql);  			}  			catch (SqlException e) {  				insertSuccess = false;  				if (!e.Message.Contains ("Violation of PRIMARY KEY constraint")) {  					throw e;  				}  			}  			if (insertSuccess) {  				Regex tagPattern = new Regex (ConfigurationManager.AppSettings ["TagPattern"].ToString ()' RegexOptions.IgnoreCase);  				if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  					foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  						if (string.IsNullOrEmpty (m.Groups [2].Value)) {  							//general tag  							string userId = GetTagUser (m.Groups [1].Value);  							if (string.IsNullOrEmpty (userId)) {  								Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  							}  							else {  								Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  							}  						}  						else {  							//-myturn  							SetTag (m.Groups [1].Value' ym.SenderID);  							Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  						}  						//Follow this topic if we're not following it already  						FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  					}  				}  				if (ym.MessageContent.PlainText.Contains ("#helpdesk")) {  					SendHelpdeskEmail (ym' accessToken);  					Reply (ym.ID' string.Format ("Message forwarded to Helpdesk")' accessToken);  				}  				if (ym.MessageContent.PlainText.Contains ("#sayhi")) {  					Reply (ym.ID' string.Format ("Hi' [[user:{0}]]!"' ym.SenderID)' accessToken);  				}  			}  		}  		//Console.WriteLine(yms.Messages.Count);  		System.Threading.Thread.Sleep (3000);  		//don't flood' api limit is 10 per 30sec  	}  	//update lastId in database!  	;  	db.ExecuteNonQuery (string.Format (@" MERGE INTO [MessagePolling] a USING (SELECT '{0}' AS [Endpoint]' {1} AS [LastId]) b ON a.[Endpoint]=b.[Endpoint] WHEN MATCHED THEN UPDATE SET [LastId]=b.[LastId]' [LastPollTime]=GETDATE() WHEN NOT MATCHED THEN INSERT VALUES ([Endpoint]' [LastId]' GETDATE());"' messageUrl' maxId));  	System.Console.WriteLine ("Finished Endpoint: " + messageUrl);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: foreach (string messageUrl in messageUrls) {  	System.Console.WriteLine ("Beginning Endpoint: " + messageUrl);  	int lastSeen = 379874143;  	//random "not too old" seed message id  	lastSeen = (int)db.ExecuteScalar (string.Format ("SELECT CAST(ISNULL(LastId' {0}) AS INT) FROM [MessagePolling] WHERE [Endpoint]='{1}';"' lastSeen' messageUrl));  	//Console.WriteLine(messageUrl);  	int lastId = -1;  	YammerMessages yms = new YammerMessages ();  	int maxId = lastSeen;  	while (yms.Messages.Count > 0 || lastId < 0) {  		if (lastId > 0)  			System.Threading.Thread.Sleep (5000);  		string jsonUrl = messageUrl + ".json?newer_than=" + lastSeen;  		if (lastId > 0)  			jsonUrl += "&older_than=" + lastId;  		else  			lastId = (int)lastSeen;  		response = MakeGetRequest (jsonUrl' accessToken);  		yms = YammerMessages.GetInstanceFromJson (response);  		foreach (YammerMessage ym in yms.Messages) {  			if (int.Parse (ym.ID) < lastId || lastId < 0)  				lastId = int.Parse (ym.ID);  			if (int.Parse (ym.ID) > maxId)  				maxId = int.Parse (ym.ID);  			//Console.WriteLine(ym.ID);  			string sql = string.Format ("INSERT INTO [Message] VALUES ({0}'{1}'{2}''{3}'''{4}'''{5}'''{6}'''{7}'''{8}'''{9}''{10}'{11}'{12})"' ym.ID' ym.SenderID' (string.IsNullOrEmpty (ym.RepliedToID) ? "NULL" : ym.RepliedToID)' DateTime.Parse (ym.CreatedAt).ToString ("s").Replace ("T"' " ")' ym.NetworkID' ym.MessageType' ym.SenderType' ym.Url' ym.WebUrl' ym.MessageContent.PlainText.Replace ("'"' "''")' ym.ThreadID' (ym.SystemMessage ? 1 : 0)' (ym.DirectMessage ? 1 : 0));  			bool insertSuccess = true;  			try {  				db.ExecuteNonQuery (sql);  			}  			catch (SqlException e) {  				insertSuccess = false;  				if (!e.Message.Contains ("Violation of PRIMARY KEY constraint")) {  					throw e;  				}  			}  			if (insertSuccess) {  				Regex tagPattern = new Regex (ConfigurationManager.AppSettings ["TagPattern"].ToString ()' RegexOptions.IgnoreCase);  				if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  					foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  						if (string.IsNullOrEmpty (m.Groups [2].Value)) {  							//general tag  							string userId = GetTagUser (m.Groups [1].Value);  							if (string.IsNullOrEmpty (userId)) {  								Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  							}  							else {  								Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  							}  						}  						else {  							//-myturn  							SetTag (m.Groups [1].Value' ym.SenderID);  							Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  						}  						//Follow this topic if we're not following it already  						FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  					}  				}  				if (ym.MessageContent.PlainText.Contains ("#helpdesk")) {  					SendHelpdeskEmail (ym' accessToken);  					Reply (ym.ID' string.Format ("Message forwarded to Helpdesk")' accessToken);  				}  				if (ym.MessageContent.PlainText.Contains ("#sayhi")) {  					Reply (ym.ID' string.Format ("Hi' [[user:{0}]]!"' ym.SenderID)' accessToken);  				}  			}  		}  		//Console.WriteLine(yms.Messages.Count);  		System.Threading.Thread.Sleep (3000);  		//don't flood' api limit is 10 per 30sec  	}  	//update lastId in database!  	;  	db.ExecuteNonQuery (string.Format (@" MERGE INTO [MessagePolling] a USING (SELECT '{0}' AS [Endpoint]' {1} AS [LastId]) b ON a.[Endpoint]=b.[Endpoint] WHEN MATCHED THEN UPDATE SET [LastId]=b.[LastId]' [LastPollTime]=GETDATE() WHEN NOT MATCHED THEN INSERT VALUES ([Endpoint]' [LastId]' GETDATE());"' messageUrl' maxId));  	System.Console.WriteLine ("Finished Endpoint: " + messageUrl);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: foreach (string messageUrl in messageUrls) {  	System.Console.WriteLine ("Beginning Endpoint: " + messageUrl);  	int lastSeen = 379874143;  	//random "not too old" seed message id  	lastSeen = (int)db.ExecuteScalar (string.Format ("SELECT CAST(ISNULL(LastId' {0}) AS INT) FROM [MessagePolling] WHERE [Endpoint]='{1}';"' lastSeen' messageUrl));  	//Console.WriteLine(messageUrl);  	int lastId = -1;  	YammerMessages yms = new YammerMessages ();  	int maxId = lastSeen;  	while (yms.Messages.Count > 0 || lastId < 0) {  		if (lastId > 0)  			System.Threading.Thread.Sleep (5000);  		string jsonUrl = messageUrl + ".json?newer_than=" + lastSeen;  		if (lastId > 0)  			jsonUrl += "&older_than=" + lastId;  		else  			lastId = (int)lastSeen;  		response = MakeGetRequest (jsonUrl' accessToken);  		yms = YammerMessages.GetInstanceFromJson (response);  		foreach (YammerMessage ym in yms.Messages) {  			if (int.Parse (ym.ID) < lastId || lastId < 0)  				lastId = int.Parse (ym.ID);  			if (int.Parse (ym.ID) > maxId)  				maxId = int.Parse (ym.ID);  			//Console.WriteLine(ym.ID);  			string sql = string.Format ("INSERT INTO [Message] VALUES ({0}'{1}'{2}''{3}'''{4}'''{5}'''{6}'''{7}'''{8}'''{9}''{10}'{11}'{12})"' ym.ID' ym.SenderID' (string.IsNullOrEmpty (ym.RepliedToID) ? "NULL" : ym.RepliedToID)' DateTime.Parse (ym.CreatedAt).ToString ("s").Replace ("T"' " ")' ym.NetworkID' ym.MessageType' ym.SenderType' ym.Url' ym.WebUrl' ym.MessageContent.PlainText.Replace ("'"' "''")' ym.ThreadID' (ym.SystemMessage ? 1 : 0)' (ym.DirectMessage ? 1 : 0));  			bool insertSuccess = true;  			try {  				db.ExecuteNonQuery (sql);  			}  			catch (SqlException e) {  				insertSuccess = false;  				if (!e.Message.Contains ("Violation of PRIMARY KEY constraint")) {  					throw e;  				}  			}  			if (insertSuccess) {  				Regex tagPattern = new Regex (ConfigurationManager.AppSettings ["TagPattern"].ToString ()' RegexOptions.IgnoreCase);  				if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  					foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  						if (string.IsNullOrEmpty (m.Groups [2].Value)) {  							//general tag  							string userId = GetTagUser (m.Groups [1].Value);  							if (string.IsNullOrEmpty (userId)) {  								Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  							}  							else {  								Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  							}  						}  						else {  							//-myturn  							SetTag (m.Groups [1].Value' ym.SenderID);  							Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  						}  						//Follow this topic if we're not following it already  						FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  					}  				}  				if (ym.MessageContent.PlainText.Contains ("#helpdesk")) {  					SendHelpdeskEmail (ym' accessToken);  					Reply (ym.ID' string.Format ("Message forwarded to Helpdesk")' accessToken);  				}  				if (ym.MessageContent.PlainText.Contains ("#sayhi")) {  					Reply (ym.ID' string.Format ("Hi' [[user:{0}]]!"' ym.SenderID)' accessToken);  				}  			}  		}  		//Console.WriteLine(yms.Messages.Count);  		System.Threading.Thread.Sleep (3000);  		//don't flood' api limit is 10 per 30sec  	}  	//update lastId in database!  	;  	db.ExecuteNonQuery (string.Format (@" MERGE INTO [MessagePolling] a USING (SELECT '{0}' AS [Endpoint]' {1} AS [LastId]) b ON a.[Endpoint]=b.[Endpoint] WHEN MATCHED THEN UPDATE SET [LastId]=b.[LastId]' [LastPollTime]=GETDATE() WHEN NOT MATCHED THEN INSERT VALUES ([Endpoint]' [LastId]' GETDATE());"' messageUrl' maxId));  	System.Console.WriteLine ("Finished Endpoint: " + messageUrl);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: foreach (string messageUrl in messageUrls) {  	System.Console.WriteLine ("Beginning Endpoint: " + messageUrl);  	int lastSeen = 379874143;  	//random "not too old" seed message id  	lastSeen = (int)db.ExecuteScalar (string.Format ("SELECT CAST(ISNULL(LastId' {0}) AS INT) FROM [MessagePolling] WHERE [Endpoint]='{1}';"' lastSeen' messageUrl));  	//Console.WriteLine(messageUrl);  	int lastId = -1;  	YammerMessages yms = new YammerMessages ();  	int maxId = lastSeen;  	while (yms.Messages.Count > 0 || lastId < 0) {  		if (lastId > 0)  			System.Threading.Thread.Sleep (5000);  		string jsonUrl = messageUrl + ".json?newer_than=" + lastSeen;  		if (lastId > 0)  			jsonUrl += "&older_than=" + lastId;  		else  			lastId = (int)lastSeen;  		response = MakeGetRequest (jsonUrl' accessToken);  		yms = YammerMessages.GetInstanceFromJson (response);  		foreach (YammerMessage ym in yms.Messages) {  			if (int.Parse (ym.ID) < lastId || lastId < 0)  				lastId = int.Parse (ym.ID);  			if (int.Parse (ym.ID) > maxId)  				maxId = int.Parse (ym.ID);  			//Console.WriteLine(ym.ID);  			string sql = string.Format ("INSERT INTO [Message] VALUES ({0}'{1}'{2}''{3}'''{4}'''{5}'''{6}'''{7}'''{8}'''{9}''{10}'{11}'{12})"' ym.ID' ym.SenderID' (string.IsNullOrEmpty (ym.RepliedToID) ? "NULL" : ym.RepliedToID)' DateTime.Parse (ym.CreatedAt).ToString ("s").Replace ("T"' " ")' ym.NetworkID' ym.MessageType' ym.SenderType' ym.Url' ym.WebUrl' ym.MessageContent.PlainText.Replace ("'"' "''")' ym.ThreadID' (ym.SystemMessage ? 1 : 0)' (ym.DirectMessage ? 1 : 0));  			bool insertSuccess = true;  			try {  				db.ExecuteNonQuery (sql);  			}  			catch (SqlException e) {  				insertSuccess = false;  				if (!e.Message.Contains ("Violation of PRIMARY KEY constraint")) {  					throw e;  				}  			}  			if (insertSuccess) {  				Regex tagPattern = new Regex (ConfigurationManager.AppSettings ["TagPattern"].ToString ()' RegexOptions.IgnoreCase);  				if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  					foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  						if (string.IsNullOrEmpty (m.Groups [2].Value)) {  							//general tag  							string userId = GetTagUser (m.Groups [1].Value);  							if (string.IsNullOrEmpty (userId)) {  								Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  							}  							else {  								Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  							}  						}  						else {  							//-myturn  							SetTag (m.Groups [1].Value' ym.SenderID);  							Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  						}  						//Follow this topic if we're not following it already  						FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  					}  				}  				if (ym.MessageContent.PlainText.Contains ("#helpdesk")) {  					SendHelpdeskEmail (ym' accessToken);  					Reply (ym.ID' string.Format ("Message forwarded to Helpdesk")' accessToken);  				}  				if (ym.MessageContent.PlainText.Contains ("#sayhi")) {  					Reply (ym.ID' string.Format ("Hi' [[user:{0}]]!"' ym.SenderID)' accessToken);  				}  			}  		}  		//Console.WriteLine(yms.Messages.Count);  		System.Threading.Thread.Sleep (3000);  		//don't flood' api limit is 10 per 30sec  	}  	//update lastId in database!  	;  	db.ExecuteNonQuery (string.Format (@" MERGE INTO [MessagePolling] a USING (SELECT '{0}' AS [Endpoint]' {1} AS [LastId]) b ON a.[Endpoint]=b.[Endpoint] WHEN MATCHED THEN UPDATE SET [LastId]=b.[LastId]' [LastPollTime]=GETDATE() WHEN NOT MATCHED THEN INSERT VALUES ([Endpoint]' [LastId]' GETDATE());"' messageUrl' maxId));  	System.Console.WriteLine ("Finished Endpoint: " + messageUrl);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: while (yms.Messages.Count > 0 || lastId < 0) {  	if (lastId > 0)  		System.Threading.Thread.Sleep (5000);  	string jsonUrl = messageUrl + ".json?newer_than=" + lastSeen;  	if (lastId > 0)  		jsonUrl += "&older_than=" + lastId;  	else  		lastId = (int)lastSeen;  	response = MakeGetRequest (jsonUrl' accessToken);  	yms = YammerMessages.GetInstanceFromJson (response);  	foreach (YammerMessage ym in yms.Messages) {  		if (int.Parse (ym.ID) < lastId || lastId < 0)  			lastId = int.Parse (ym.ID);  		if (int.Parse (ym.ID) > maxId)  			maxId = int.Parse (ym.ID);  		//Console.WriteLine(ym.ID);  		string sql = string.Format ("INSERT INTO [Message] VALUES ({0}'{1}'{2}''{3}'''{4}'''{5}'''{6}'''{7}'''{8}'''{9}''{10}'{11}'{12})"' ym.ID' ym.SenderID' (string.IsNullOrEmpty (ym.RepliedToID) ? "NULL" : ym.RepliedToID)' DateTime.Parse (ym.CreatedAt).ToString ("s").Replace ("T"' " ")' ym.NetworkID' ym.MessageType' ym.SenderType' ym.Url' ym.WebUrl' ym.MessageContent.PlainText.Replace ("'"' "''")' ym.ThreadID' (ym.SystemMessage ? 1 : 0)' (ym.DirectMessage ? 1 : 0));  		bool insertSuccess = true;  		try {  			db.ExecuteNonQuery (sql);  		}  		catch (SqlException e) {  			insertSuccess = false;  			if (!e.Message.Contains ("Violation of PRIMARY KEY constraint")) {  				throw e;  			}  		}  		if (insertSuccess) {  			Regex tagPattern = new Regex (ConfigurationManager.AppSettings ["TagPattern"].ToString ()' RegexOptions.IgnoreCase);  			if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  				foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  					if (string.IsNullOrEmpty (m.Groups [2].Value)) {  						//general tag  						string userId = GetTagUser (m.Groups [1].Value);  						if (string.IsNullOrEmpty (userId)) {  							Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  						}  						else {  							Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  						}  					}  					else {  						//-myturn  						SetTag (m.Groups [1].Value' ym.SenderID);  						Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  					}  					//Follow this topic if we're not following it already  					FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  				}  			}  			if (ym.MessageContent.PlainText.Contains ("#helpdesk")) {  				SendHelpdeskEmail (ym' accessToken);  				Reply (ym.ID' string.Format ("Message forwarded to Helpdesk")' accessToken);  			}  			if (ym.MessageContent.PlainText.Contains ("#sayhi")) {  				Reply (ym.ID' string.Format ("Hi' [[user:{0}]]!"' ym.SenderID)' accessToken);  			}  		}  	}  	//Console.WriteLine(yms.Messages.Count);  	System.Threading.Thread.Sleep (3000);  	//don't flood' api limit is 10 per 30sec  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: while (yms.Messages.Count > 0 || lastId < 0) {  	if (lastId > 0)  		System.Threading.Thread.Sleep (5000);  	string jsonUrl = messageUrl + ".json?newer_than=" + lastSeen;  	if (lastId > 0)  		jsonUrl += "&older_than=" + lastId;  	else  		lastId = (int)lastSeen;  	response = MakeGetRequest (jsonUrl' accessToken);  	yms = YammerMessages.GetInstanceFromJson (response);  	foreach (YammerMessage ym in yms.Messages) {  		if (int.Parse (ym.ID) < lastId || lastId < 0)  			lastId = int.Parse (ym.ID);  		if (int.Parse (ym.ID) > maxId)  			maxId = int.Parse (ym.ID);  		//Console.WriteLine(ym.ID);  		string sql = string.Format ("INSERT INTO [Message] VALUES ({0}'{1}'{2}''{3}'''{4}'''{5}'''{6}'''{7}'''{8}'''{9}''{10}'{11}'{12})"' ym.ID' ym.SenderID' (string.IsNullOrEmpty (ym.RepliedToID) ? "NULL" : ym.RepliedToID)' DateTime.Parse (ym.CreatedAt).ToString ("s").Replace ("T"' " ")' ym.NetworkID' ym.MessageType' ym.SenderType' ym.Url' ym.WebUrl' ym.MessageContent.PlainText.Replace ("'"' "''")' ym.ThreadID' (ym.SystemMessage ? 1 : 0)' (ym.DirectMessage ? 1 : 0));  		bool insertSuccess = true;  		try {  			db.ExecuteNonQuery (sql);  		}  		catch (SqlException e) {  			insertSuccess = false;  			if (!e.Message.Contains ("Violation of PRIMARY KEY constraint")) {  				throw e;  			}  		}  		if (insertSuccess) {  			Regex tagPattern = new Regex (ConfigurationManager.AppSettings ["TagPattern"].ToString ()' RegexOptions.IgnoreCase);  			if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  				foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  					if (string.IsNullOrEmpty (m.Groups [2].Value)) {  						//general tag  						string userId = GetTagUser (m.Groups [1].Value);  						if (string.IsNullOrEmpty (userId)) {  							Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  						}  						else {  							Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  						}  					}  					else {  						//-myturn  						SetTag (m.Groups [1].Value' ym.SenderID);  						Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  					}  					//Follow this topic if we're not following it already  					FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  				}  			}  			if (ym.MessageContent.PlainText.Contains ("#helpdesk")) {  				SendHelpdeskEmail (ym' accessToken);  				Reply (ym.ID' string.Format ("Message forwarded to Helpdesk")' accessToken);  			}  			if (ym.MessageContent.PlainText.Contains ("#sayhi")) {  				Reply (ym.ID' string.Format ("Hi' [[user:{0}]]!"' ym.SenderID)' accessToken);  			}  		}  	}  	//Console.WriteLine(yms.Messages.Count);  	System.Threading.Thread.Sleep (3000);  	//don't flood' api limit is 10 per 30sec  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: while (yms.Messages.Count > 0 || lastId < 0) {  	if (lastId > 0)  		System.Threading.Thread.Sleep (5000);  	string jsonUrl = messageUrl + ".json?newer_than=" + lastSeen;  	if (lastId > 0)  		jsonUrl += "&older_than=" + lastId;  	else  		lastId = (int)lastSeen;  	response = MakeGetRequest (jsonUrl' accessToken);  	yms = YammerMessages.GetInstanceFromJson (response);  	foreach (YammerMessage ym in yms.Messages) {  		if (int.Parse (ym.ID) < lastId || lastId < 0)  			lastId = int.Parse (ym.ID);  		if (int.Parse (ym.ID) > maxId)  			maxId = int.Parse (ym.ID);  		//Console.WriteLine(ym.ID);  		string sql = string.Format ("INSERT INTO [Message] VALUES ({0}'{1}'{2}''{3}'''{4}'''{5}'''{6}'''{7}'''{8}'''{9}''{10}'{11}'{12})"' ym.ID' ym.SenderID' (string.IsNullOrEmpty (ym.RepliedToID) ? "NULL" : ym.RepliedToID)' DateTime.Parse (ym.CreatedAt).ToString ("s").Replace ("T"' " ")' ym.NetworkID' ym.MessageType' ym.SenderType' ym.Url' ym.WebUrl' ym.MessageContent.PlainText.Replace ("'"' "''")' ym.ThreadID' (ym.SystemMessage ? 1 : 0)' (ym.DirectMessage ? 1 : 0));  		bool insertSuccess = true;  		try {  			db.ExecuteNonQuery (sql);  		}  		catch (SqlException e) {  			insertSuccess = false;  			if (!e.Message.Contains ("Violation of PRIMARY KEY constraint")) {  				throw e;  			}  		}  		if (insertSuccess) {  			Regex tagPattern = new Regex (ConfigurationManager.AppSettings ["TagPattern"].ToString ()' RegexOptions.IgnoreCase);  			if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  				foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  					if (string.IsNullOrEmpty (m.Groups [2].Value)) {  						//general tag  						string userId = GetTagUser (m.Groups [1].Value);  						if (string.IsNullOrEmpty (userId)) {  							Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  						}  						else {  							Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  						}  					}  					else {  						//-myturn  						SetTag (m.Groups [1].Value' ym.SenderID);  						Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  					}  					//Follow this topic if we're not following it already  					FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  				}  			}  			if (ym.MessageContent.PlainText.Contains ("#helpdesk")) {  				SendHelpdeskEmail (ym' accessToken);  				Reply (ym.ID' string.Format ("Message forwarded to Helpdesk")' accessToken);  			}  			if (ym.MessageContent.PlainText.Contains ("#sayhi")) {  				Reply (ym.ID' string.Format ("Hi' [[user:{0}]]!"' ym.SenderID)' accessToken);  			}  		}  	}  	//Console.WriteLine(yms.Messages.Count);  	System.Threading.Thread.Sleep (3000);  	//don't flood' api limit is 10 per 30sec  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: while (yms.Messages.Count > 0 || lastId < 0) {  	if (lastId > 0)  		System.Threading.Thread.Sleep (5000);  	string jsonUrl = messageUrl + ".json?newer_than=" + lastSeen;  	if (lastId > 0)  		jsonUrl += "&older_than=" + lastId;  	else  		lastId = (int)lastSeen;  	response = MakeGetRequest (jsonUrl' accessToken);  	yms = YammerMessages.GetInstanceFromJson (response);  	foreach (YammerMessage ym in yms.Messages) {  		if (int.Parse (ym.ID) < lastId || lastId < 0)  			lastId = int.Parse (ym.ID);  		if (int.Parse (ym.ID) > maxId)  			maxId = int.Parse (ym.ID);  		//Console.WriteLine(ym.ID);  		string sql = string.Format ("INSERT INTO [Message] VALUES ({0}'{1}'{2}''{3}'''{4}'''{5}'''{6}'''{7}'''{8}'''{9}''{10}'{11}'{12})"' ym.ID' ym.SenderID' (string.IsNullOrEmpty (ym.RepliedToID) ? "NULL" : ym.RepliedToID)' DateTime.Parse (ym.CreatedAt).ToString ("s").Replace ("T"' " ")' ym.NetworkID' ym.MessageType' ym.SenderType' ym.Url' ym.WebUrl' ym.MessageContent.PlainText.Replace ("'"' "''")' ym.ThreadID' (ym.SystemMessage ? 1 : 0)' (ym.DirectMessage ? 1 : 0));  		bool insertSuccess = true;  		try {  			db.ExecuteNonQuery (sql);  		}  		catch (SqlException e) {  			insertSuccess = false;  			if (!e.Message.Contains ("Violation of PRIMARY KEY constraint")) {  				throw e;  			}  		}  		if (insertSuccess) {  			Regex tagPattern = new Regex (ConfigurationManager.AppSettings ["TagPattern"].ToString ()' RegexOptions.IgnoreCase);  			if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  				foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  					if (string.IsNullOrEmpty (m.Groups [2].Value)) {  						//general tag  						string userId = GetTagUser (m.Groups [1].Value);  						if (string.IsNullOrEmpty (userId)) {  							Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  						}  						else {  							Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  						}  					}  					else {  						//-myturn  						SetTag (m.Groups [1].Value' ym.SenderID);  						Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  					}  					//Follow this topic if we're not following it already  					FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  				}  			}  			if (ym.MessageContent.PlainText.Contains ("#helpdesk")) {  				SendHelpdeskEmail (ym' accessToken);  				Reply (ym.ID' string.Format ("Message forwarded to Helpdesk")' accessToken);  			}  			if (ym.MessageContent.PlainText.Contains ("#sayhi")) {  				Reply (ym.ID' string.Format ("Hi' [[user:{0}]]!"' ym.SenderID)' accessToken);  			}  		}  	}  	//Console.WriteLine(yms.Messages.Count);  	System.Threading.Thread.Sleep (3000);  	//don't flood' api limit is 10 per 30sec  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: if (lastId > 0)  	System.Threading.Thread.Sleep (5000);  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: System.Threading.Thread.Sleep (5000);  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: foreach (YammerMessage ym in yms.Messages) {  	if (int.Parse (ym.ID) < lastId || lastId < 0)  		lastId = int.Parse (ym.ID);  	if (int.Parse (ym.ID) > maxId)  		maxId = int.Parse (ym.ID);  	//Console.WriteLine(ym.ID);  	string sql = string.Format ("INSERT INTO [Message] VALUES ({0}'{1}'{2}''{3}'''{4}'''{5}'''{6}'''{7}'''{8}'''{9}''{10}'{11}'{12})"' ym.ID' ym.SenderID' (string.IsNullOrEmpty (ym.RepliedToID) ? "NULL" : ym.RepliedToID)' DateTime.Parse (ym.CreatedAt).ToString ("s").Replace ("T"' " ")' ym.NetworkID' ym.MessageType' ym.SenderType' ym.Url' ym.WebUrl' ym.MessageContent.PlainText.Replace ("'"' "''")' ym.ThreadID' (ym.SystemMessage ? 1 : 0)' (ym.DirectMessage ? 1 : 0));  	bool insertSuccess = true;  	try {  		db.ExecuteNonQuery (sql);  	}  	catch (SqlException e) {  		insertSuccess = false;  		if (!e.Message.Contains ("Violation of PRIMARY KEY constraint")) {  			throw e;  		}  	}  	if (insertSuccess) {  		Regex tagPattern = new Regex (ConfigurationManager.AppSettings ["TagPattern"].ToString ()' RegexOptions.IgnoreCase);  		if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  			foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  				if (string.IsNullOrEmpty (m.Groups [2].Value)) {  					//general tag  					string userId = GetTagUser (m.Groups [1].Value);  					if (string.IsNullOrEmpty (userId)) {  						Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  					}  					else {  						Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  					}  				}  				else {  					//-myturn  					SetTag (m.Groups [1].Value' ym.SenderID);  					Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  				}  				//Follow this topic if we're not following it already  				FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  			}  		}  		if (ym.MessageContent.PlainText.Contains ("#helpdesk")) {  			SendHelpdeskEmail (ym' accessToken);  			Reply (ym.ID' string.Format ("Message forwarded to Helpdesk")' accessToken);  		}  		if (ym.MessageContent.PlainText.Contains ("#sayhi")) {  			Reply (ym.ID' string.Format ("Hi' [[user:{0}]]!"' ym.SenderID)' accessToken);  		}  	}  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: foreach (YammerMessage ym in yms.Messages) {  	if (int.Parse (ym.ID) < lastId || lastId < 0)  		lastId = int.Parse (ym.ID);  	if (int.Parse (ym.ID) > maxId)  		maxId = int.Parse (ym.ID);  	//Console.WriteLine(ym.ID);  	string sql = string.Format ("INSERT INTO [Message] VALUES ({0}'{1}'{2}''{3}'''{4}'''{5}'''{6}'''{7}'''{8}'''{9}''{10}'{11}'{12})"' ym.ID' ym.SenderID' (string.IsNullOrEmpty (ym.RepliedToID) ? "NULL" : ym.RepliedToID)' DateTime.Parse (ym.CreatedAt).ToString ("s").Replace ("T"' " ")' ym.NetworkID' ym.MessageType' ym.SenderType' ym.Url' ym.WebUrl' ym.MessageContent.PlainText.Replace ("'"' "''")' ym.ThreadID' (ym.SystemMessage ? 1 : 0)' (ym.DirectMessage ? 1 : 0));  	bool insertSuccess = true;  	try {  		db.ExecuteNonQuery (sql);  	}  	catch (SqlException e) {  		insertSuccess = false;  		if (!e.Message.Contains ("Violation of PRIMARY KEY constraint")) {  			throw e;  		}  	}  	if (insertSuccess) {  		Regex tagPattern = new Regex (ConfigurationManager.AppSettings ["TagPattern"].ToString ()' RegexOptions.IgnoreCase);  		if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  			foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  				if (string.IsNullOrEmpty (m.Groups [2].Value)) {  					//general tag  					string userId = GetTagUser (m.Groups [1].Value);  					if (string.IsNullOrEmpty (userId)) {  						Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  					}  					else {  						Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  					}  				}  				else {  					//-myturn  					SetTag (m.Groups [1].Value' ym.SenderID);  					Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  				}  				//Follow this topic if we're not following it already  				FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  			}  		}  		if (ym.MessageContent.PlainText.Contains ("#helpdesk")) {  			SendHelpdeskEmail (ym' accessToken);  			Reply (ym.ID' string.Format ("Message forwarded to Helpdesk")' accessToken);  		}  		if (ym.MessageContent.PlainText.Contains ("#sayhi")) {  			Reply (ym.ID' string.Format ("Hi' [[user:{0}]]!"' ym.SenderID)' accessToken);  		}  	}  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: if (insertSuccess) {  	Regex tagPattern = new Regex (ConfigurationManager.AppSettings ["TagPattern"].ToString ()' RegexOptions.IgnoreCase);  	if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  		foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  			if (string.IsNullOrEmpty (m.Groups [2].Value)) {  				//general tag  				string userId = GetTagUser (m.Groups [1].Value);  				if (string.IsNullOrEmpty (userId)) {  					Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  				}  				else {  					Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  				}  			}  			else {  				//-myturn  				SetTag (m.Groups [1].Value' ym.SenderID);  				Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  			}  			//Follow this topic if we're not following it already  			FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  		}  	}  	if (ym.MessageContent.PlainText.Contains ("#helpdesk")) {  		SendHelpdeskEmail (ym' accessToken);  		Reply (ym.ID' string.Format ("Message forwarded to Helpdesk")' accessToken);  	}  	if (ym.MessageContent.PlainText.Contains ("#sayhi")) {  		Reply (ym.ID' string.Format ("Hi' [[user:{0}]]!"' ym.SenderID)' accessToken);  	}  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: if (insertSuccess) {  	Regex tagPattern = new Regex (ConfigurationManager.AppSettings ["TagPattern"].ToString ()' RegexOptions.IgnoreCase);  	if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  		foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  			if (string.IsNullOrEmpty (m.Groups [2].Value)) {  				//general tag  				string userId = GetTagUser (m.Groups [1].Value);  				if (string.IsNullOrEmpty (userId)) {  					Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  				}  				else {  					Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  				}  			}  			else {  				//-myturn  				SetTag (m.Groups [1].Value' ym.SenderID);  				Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  			}  			//Follow this topic if we're not following it already  			FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  		}  	}  	if (ym.MessageContent.PlainText.Contains ("#helpdesk")) {  		SendHelpdeskEmail (ym' accessToken);  		Reply (ym.ID' string.Format ("Message forwarded to Helpdesk")' accessToken);  	}  	if (ym.MessageContent.PlainText.Contains ("#sayhi")) {  		Reply (ym.ID' string.Format ("Hi' [[user:{0}]]!"' ym.SenderID)' accessToken);  	}  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  	foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  		if (string.IsNullOrEmpty (m.Groups [2].Value)) {  			//general tag  			string userId = GetTagUser (m.Groups [1].Value);  			if (string.IsNullOrEmpty (userId)) {  				Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  			}  			else {  				Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  			}  		}  		else {  			//-myturn  			SetTag (m.Groups [1].Value' ym.SenderID);  			Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  		}  		//Follow this topic if we're not following it already  		FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  	}  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: if (tagPattern.IsMatch (ym.MessageContent.PlainText)) {  	foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  		if (string.IsNullOrEmpty (m.Groups [2].Value)) {  			//general tag  			string userId = GetTagUser (m.Groups [1].Value);  			if (string.IsNullOrEmpty (userId)) {  				Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  			}  			else {  				Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  			}  		}  		else {  			//-myturn  			SetTag (m.Groups [1].Value' ym.SenderID);  			Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  		}  		//Follow this topic if we're not following it already  		FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  	}  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  	if (string.IsNullOrEmpty (m.Groups [2].Value)) {  		//general tag  		string userId = GetTagUser (m.Groups [1].Value);  		if (string.IsNullOrEmpty (userId)) {  			Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  		}  		else {  			Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  		}  	}  	else {  		//-myturn  		SetTag (m.Groups [1].Value' ym.SenderID);  		Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  	}  	//Follow this topic if we're not following it already  	FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: foreach (Match m in tagPattern.Matches (ym.MessageContent.PlainText)) {  	if (string.IsNullOrEmpty (m.Groups [2].Value)) {  		//general tag  		string userId = GetTagUser (m.Groups [1].Value);  		if (string.IsNullOrEmpty (userId)) {  			Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  		}  		else {  			Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  		}  	}  	else {  		//-myturn  		SetTag (m.Groups [1].Value' ym.SenderID);  		Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  	}  	//Follow this topic if we're not following it already  	FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: if (string.IsNullOrEmpty (m.Groups [2].Value)) {  	//general tag  	string userId = GetTagUser (m.Groups [1].Value);  	if (string.IsNullOrEmpty (userId)) {  		Reply (ym.ID' string.Format ("{0} tag is not assigned to a user.  Assign with -myturn."' m.Groups [1].Value)' accessToken);  	}  	else {  		Reply (ym.ID' string.Format ("[[user:{0}]] is currently assigned to {1}."' userId' m.Groups [1].Value)' accessToken);  	}  }  else {  	//-myturn  	SetTag (m.Groups [1].Value' ym.SenderID);  	Reply (ym.ID' string.Format ("{0} tag assigned to [[user:{1}]]"' m.Groups [1].Value' ym.SenderID)' accessToken);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: FollowTopic (m.Groups [1] + m.Groups [2].Value' accessToken);  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetNewMessages,The following statement contains a magic number: System.Threading.Thread.Sleep (3000);  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetPagedData,The following statement contains a magic number: try {  	//set up paging  	int curPage = 0;  	string response = "start";  	string qsOperator = (Url.IndexOf ("?") > -1) ? "&" : "?";  	while (response != "[]") {  		//NOTE:  Yammer only allows 10 requests in 10 seconds for this  		//type of data so you need to put a one second sleep in between  		//each request or you will get a 429 response code back   		//(too many requests)  		System.Threading.Thread.Sleep (1000);  		curPage += 1;  		response = MakeGetRequest (Url + qsOperator + "page=" + curPage.ToString ()' accessToken);  		List<T> resultSet = JsonConvert.DeserializeObject<List<T>> (response);  		//if (typeof(T) == typeof(YammerGroup))  		//{  		//    List<YammerGroup> filteredList = resultSet.OfType<YammerGroup>().Where(p => p.PrivacyLevel == "public").ToList();  		//    results.AddRange(filteredList.OfType<T>().AsEnumerable());  		//}  		//else  		results.AddRange (resultSet);  	}  }  catch (Exception ex) {  	Console.WriteLine ("Error getting paged data: " + ex.Message);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetPagedData,The following statement contains a magic number: while (response != "[]") {  	//NOTE:  Yammer only allows 10 requests in 10 seconds for this  	//type of data so you need to put a one second sleep in between  	//each request or you will get a 429 response code back   	//(too many requests)  	System.Threading.Thread.Sleep (1000);  	curPage += 1;  	response = MakeGetRequest (Url + qsOperator + "page=" + curPage.ToString ()' accessToken);  	List<T> resultSet = JsonConvert.DeserializeObject<List<T>> (response);  	//if (typeof(T) == typeof(YammerGroup))  	//{  	//    List<YammerGroup> filteredList = resultSet.OfType<YammerGroup>().Where(p => p.PrivacyLevel == "public").ToList();  	//    results.AddRange(filteredList.OfType<T>().AsEnumerable());  	//}  	//else  	results.AddRange (resultSet);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetPagedData,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetAuthenticityToken,The following statement contains a magic number: try {  	int at = rawHtml.IndexOf ("<meta name=\"authenticity_token\" id=\"authenticity_token\"");  	if (at > -1) {  		//get the authenticity token string  		int et = rawHtml.IndexOf ("/>"' at + 1);  		string tokenText = rawHtml.Substring (at' et - at);  		//get the token value  		int ts = tokenText.IndexOf ("content=");  		int es = tokenText.LastIndexOf ("\"");  		result = tokenText.Substring (ts + 9' es - ts - 9);  	}  }  catch (Exception ex) {  	Console.WriteLine ("Error in GetAuthenticityToken: " + ex.Message);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetAuthenticityToken,The following statement contains a magic number: try {  	int at = rawHtml.IndexOf ("<meta name=\"authenticity_token\" id=\"authenticity_token\"");  	if (at > -1) {  		//get the authenticity token string  		int et = rawHtml.IndexOf ("/>"' at + 1);  		string tokenText = rawHtml.Substring (at' et - at);  		//get the token value  		int ts = tokenText.IndexOf ("content=");  		int es = tokenText.LastIndexOf ("\"");  		result = tokenText.Substring (ts + 9' es - ts - 9);  	}  }  catch (Exception ex) {  	Console.WriteLine ("Error in GetAuthenticityToken: " + ex.Message);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetAuthenticityToken,The following statement contains a magic number: if (at > -1) {  	//get the authenticity token string  	int et = rawHtml.IndexOf ("/>"' at + 1);  	string tokenText = rawHtml.Substring (at' et - at);  	//get the token value  	int ts = tokenText.IndexOf ("content=");  	int es = tokenText.LastIndexOf ("\"");  	result = tokenText.Substring (ts + 9' es - ts - 9);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetAuthenticityToken,The following statement contains a magic number: if (at > -1) {  	//get the authenticity token string  	int et = rawHtml.IndexOf ("/>"' at + 1);  	string tokenText = rawHtml.Substring (at' et - at);  	//get the token value  	int ts = tokenText.IndexOf ("content=");  	int es = tokenText.LastIndexOf ("\"");  	result = tokenText.Substring (ts + 9' es - ts - 9);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetAuthenticityToken,The following statement contains a magic number: result = tokenText.Substring (ts + 9' es - ts - 9);  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,GetAuthenticityToken,The following statement contains a magic number: result = tokenText.Substring (ts + 9' es - ts - 9);  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SetCookies,The following statement contains a magic number: try {  	const string YAMTRAK_COOKIE = "yamtrak_id";  	const string SESSION_COOKIE = "_workfeed_session_id";  	//no normalization to Set-Cookie content and Cookies on WebRequest is not populated so   	//we are doing guesstimating parsing  	//Set-Cookie: yamtrak_id=2f1621f7-7452-4f7e-a974-6a85eb5ca22d; path=/; expires=Fri' 26-Sep-2014 15:20:54 GMT; secure; HttpOnly'_workfeed_session_id=34a53fdeab7da22fc4ae088fb19a2307; path=/; secure; HttpOnly  	string cookies = wResp.Headers ["Set-Cookie"];  	if (string.IsNullOrEmpty (cookies)) {  		cc = new CookieContainer ();  	}  	else {  		int cStart = cookies.IndexOf ("=");  		int cEnd = cookies.IndexOf ("HttpOnly'");  		//sometimes the cookie ends with "HttpOnly'" and sometimes it ends with "secure"  		if ((cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (YAMTRAK_COOKIE) > -1) || (cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (SESSION_COOKIE) > -1)) {  			//change the end to look for secure  			cEnd = cookies.IndexOf ("secure'");  		}  		string tempCook1 = cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1);  		tempCook1 = tempCook1.Remove (tempCook1.IndexOf (";"));  		cStart = cookies.IndexOf ("="' cEnd);  		string tempCook2 = cookies.Substring (cStart + 1);  		tempCook2 = tempCook2.Remove (tempCook2.IndexOf (";"));  		if (cookies.StartsWith ("yamtrak")) {  			yamtrackCookie = tempCook1;  			sessionCookie = tempCook2;  		}  		else {  			sessionCookie = tempCook1;  			yamtrackCookie = tempCook2;  		}  		//yamtrackCookie = wResp.Cookies[YAMTRAK_COOKIE].Value;  		//sessionCookie = wResp.Cookies[SESSION_COOKIE].Value;  		cc = new CookieContainer ();  		cc.Add (new Cookie (YAMTRAK_COOKIE' yamtrackCookie' "/"' "www.yammer.com"));  		cc.Add (new Cookie (SESSION_COOKIE' sessionCookie' "/"' "www.yammer.com"));  	}  }  catch (Exception ex) {  	Console.WriteLine ("Error in SetCookies: " + ex.Message);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SetCookies,The following statement contains a magic number: try {  	const string YAMTRAK_COOKIE = "yamtrak_id";  	const string SESSION_COOKIE = "_workfeed_session_id";  	//no normalization to Set-Cookie content and Cookies on WebRequest is not populated so   	//we are doing guesstimating parsing  	//Set-Cookie: yamtrak_id=2f1621f7-7452-4f7e-a974-6a85eb5ca22d; path=/; expires=Fri' 26-Sep-2014 15:20:54 GMT; secure; HttpOnly'_workfeed_session_id=34a53fdeab7da22fc4ae088fb19a2307; path=/; secure; HttpOnly  	string cookies = wResp.Headers ["Set-Cookie"];  	if (string.IsNullOrEmpty (cookies)) {  		cc = new CookieContainer ();  	}  	else {  		int cStart = cookies.IndexOf ("=");  		int cEnd = cookies.IndexOf ("HttpOnly'");  		//sometimes the cookie ends with "HttpOnly'" and sometimes it ends with "secure"  		if ((cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (YAMTRAK_COOKIE) > -1) || (cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (SESSION_COOKIE) > -1)) {  			//change the end to look for secure  			cEnd = cookies.IndexOf ("secure'");  		}  		string tempCook1 = cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1);  		tempCook1 = tempCook1.Remove (tempCook1.IndexOf (";"));  		cStart = cookies.IndexOf ("="' cEnd);  		string tempCook2 = cookies.Substring (cStart + 1);  		tempCook2 = tempCook2.Remove (tempCook2.IndexOf (";"));  		if (cookies.StartsWith ("yamtrak")) {  			yamtrackCookie = tempCook1;  			sessionCookie = tempCook2;  		}  		else {  			sessionCookie = tempCook1;  			yamtrackCookie = tempCook2;  		}  		//yamtrackCookie = wResp.Cookies[YAMTRAK_COOKIE].Value;  		//sessionCookie = wResp.Cookies[SESSION_COOKIE].Value;  		cc = new CookieContainer ();  		cc.Add (new Cookie (YAMTRAK_COOKIE' yamtrackCookie' "/"' "www.yammer.com"));  		cc.Add (new Cookie (SESSION_COOKIE' sessionCookie' "/"' "www.yammer.com"));  	}  }  catch (Exception ex) {  	Console.WriteLine ("Error in SetCookies: " + ex.Message);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SetCookies,The following statement contains a magic number: try {  	const string YAMTRAK_COOKIE = "yamtrak_id";  	const string SESSION_COOKIE = "_workfeed_session_id";  	//no normalization to Set-Cookie content and Cookies on WebRequest is not populated so   	//we are doing guesstimating parsing  	//Set-Cookie: yamtrak_id=2f1621f7-7452-4f7e-a974-6a85eb5ca22d; path=/; expires=Fri' 26-Sep-2014 15:20:54 GMT; secure; HttpOnly'_workfeed_session_id=34a53fdeab7da22fc4ae088fb19a2307; path=/; secure; HttpOnly  	string cookies = wResp.Headers ["Set-Cookie"];  	if (string.IsNullOrEmpty (cookies)) {  		cc = new CookieContainer ();  	}  	else {  		int cStart = cookies.IndexOf ("=");  		int cEnd = cookies.IndexOf ("HttpOnly'");  		//sometimes the cookie ends with "HttpOnly'" and sometimes it ends with "secure"  		if ((cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (YAMTRAK_COOKIE) > -1) || (cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (SESSION_COOKIE) > -1)) {  			//change the end to look for secure  			cEnd = cookies.IndexOf ("secure'");  		}  		string tempCook1 = cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1);  		tempCook1 = tempCook1.Remove (tempCook1.IndexOf (";"));  		cStart = cookies.IndexOf ("="' cEnd);  		string tempCook2 = cookies.Substring (cStart + 1);  		tempCook2 = tempCook2.Remove (tempCook2.IndexOf (";"));  		if (cookies.StartsWith ("yamtrak")) {  			yamtrackCookie = tempCook1;  			sessionCookie = tempCook2;  		}  		else {  			sessionCookie = tempCook1;  			yamtrackCookie = tempCook2;  		}  		//yamtrackCookie = wResp.Cookies[YAMTRAK_COOKIE].Value;  		//sessionCookie = wResp.Cookies[SESSION_COOKIE].Value;  		cc = new CookieContainer ();  		cc.Add (new Cookie (YAMTRAK_COOKIE' yamtrackCookie' "/"' "www.yammer.com"));  		cc.Add (new Cookie (SESSION_COOKIE' sessionCookie' "/"' "www.yammer.com"));  	}  }  catch (Exception ex) {  	Console.WriteLine ("Error in SetCookies: " + ex.Message);  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SetCookies,The following statement contains a magic number: if (string.IsNullOrEmpty (cookies)) {  	cc = new CookieContainer ();  }  else {  	int cStart = cookies.IndexOf ("=");  	int cEnd = cookies.IndexOf ("HttpOnly'");  	//sometimes the cookie ends with "HttpOnly'" and sometimes it ends with "secure"  	if ((cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (YAMTRAK_COOKIE) > -1) || (cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (SESSION_COOKIE) > -1)) {  		//change the end to look for secure  		cEnd = cookies.IndexOf ("secure'");  	}  	string tempCook1 = cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1);  	tempCook1 = tempCook1.Remove (tempCook1.IndexOf (";"));  	cStart = cookies.IndexOf ("="' cEnd);  	string tempCook2 = cookies.Substring (cStart + 1);  	tempCook2 = tempCook2.Remove (tempCook2.IndexOf (";"));  	if (cookies.StartsWith ("yamtrak")) {  		yamtrackCookie = tempCook1;  		sessionCookie = tempCook2;  	}  	else {  		sessionCookie = tempCook1;  		yamtrackCookie = tempCook2;  	}  	//yamtrackCookie = wResp.Cookies[YAMTRAK_COOKIE].Value;  	//sessionCookie = wResp.Cookies[SESSION_COOKIE].Value;  	cc = new CookieContainer ();  	cc.Add (new Cookie (YAMTRAK_COOKIE' yamtrackCookie' "/"' "www.yammer.com"));  	cc.Add (new Cookie (SESSION_COOKIE' sessionCookie' "/"' "www.yammer.com"));  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SetCookies,The following statement contains a magic number: if (string.IsNullOrEmpty (cookies)) {  	cc = new CookieContainer ();  }  else {  	int cStart = cookies.IndexOf ("=");  	int cEnd = cookies.IndexOf ("HttpOnly'");  	//sometimes the cookie ends with "HttpOnly'" and sometimes it ends with "secure"  	if ((cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (YAMTRAK_COOKIE) > -1) || (cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (SESSION_COOKIE) > -1)) {  		//change the end to look for secure  		cEnd = cookies.IndexOf ("secure'");  	}  	string tempCook1 = cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1);  	tempCook1 = tempCook1.Remove (tempCook1.IndexOf (";"));  	cStart = cookies.IndexOf ("="' cEnd);  	string tempCook2 = cookies.Substring (cStart + 1);  	tempCook2 = tempCook2.Remove (tempCook2.IndexOf (";"));  	if (cookies.StartsWith ("yamtrak")) {  		yamtrackCookie = tempCook1;  		sessionCookie = tempCook2;  	}  	else {  		sessionCookie = tempCook1;  		yamtrackCookie = tempCook2;  	}  	//yamtrackCookie = wResp.Cookies[YAMTRAK_COOKIE].Value;  	//sessionCookie = wResp.Cookies[SESSION_COOKIE].Value;  	cc = new CookieContainer ();  	cc.Add (new Cookie (YAMTRAK_COOKIE' yamtrackCookie' "/"' "www.yammer.com"));  	cc.Add (new Cookie (SESSION_COOKIE' sessionCookie' "/"' "www.yammer.com"));  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SetCookies,The following statement contains a magic number: if (string.IsNullOrEmpty (cookies)) {  	cc = new CookieContainer ();  }  else {  	int cStart = cookies.IndexOf ("=");  	int cEnd = cookies.IndexOf ("HttpOnly'");  	//sometimes the cookie ends with "HttpOnly'" and sometimes it ends with "secure"  	if ((cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (YAMTRAK_COOKIE) > -1) || (cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (SESSION_COOKIE) > -1)) {  		//change the end to look for secure  		cEnd = cookies.IndexOf ("secure'");  	}  	string tempCook1 = cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1);  	tempCook1 = tempCook1.Remove (tempCook1.IndexOf (";"));  	cStart = cookies.IndexOf ("="' cEnd);  	string tempCook2 = cookies.Substring (cStart + 1);  	tempCook2 = tempCook2.Remove (tempCook2.IndexOf (";"));  	if (cookies.StartsWith ("yamtrak")) {  		yamtrackCookie = tempCook1;  		sessionCookie = tempCook2;  	}  	else {  		sessionCookie = tempCook1;  		yamtrackCookie = tempCook2;  	}  	//yamtrackCookie = wResp.Cookies[YAMTRAK_COOKIE].Value;  	//sessionCookie = wResp.Cookies[SESSION_COOKIE].Value;  	cc = new CookieContainer ();  	cc.Add (new Cookie (YAMTRAK_COOKIE' yamtrackCookie' "/"' "www.yammer.com"));  	cc.Add (new Cookie (SESSION_COOKIE' sessionCookie' "/"' "www.yammer.com"));  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SetCookies,The following statement contains a magic number: if ((cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (YAMTRAK_COOKIE) > -1) || (cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (SESSION_COOKIE) > -1)) {  	//change the end to look for secure  	cEnd = cookies.IndexOf ("secure'");  }  
Magic Number,YammerDoodle,Program,C:\repos\TrekBikes_YammerDoodle\YammerDoodle\Program.cs,SetCookies,The following statement contains a magic number: if ((cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (YAMTRAK_COOKIE) > -1) || (cookies.Substring (cStart + 1' cEnd + 8 - cStart - 1).IndexOf (SESSION_COOKIE) > -1)) {  	//change the end to look for secure  	cEnd = cookies.IndexOf ("secure'");  }  
