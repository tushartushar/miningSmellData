Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,ListJobs,The method has 110 lines of code.
Long Method,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,GenerateRequestAndGetResponse,The method has 129 lines of code.
Complex Method,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,GenerateRequestAndGetResponse,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,MonitorAndWaitOnJob,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.Samples.RESTAPI,FileDownloadThread,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,FileDownloadThread,The method has 5 parameters. Parameters: assetId' filename' outputFolder' baseUri' sasSig
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateAssetAndUploadSingleFile,The length of the statement  "            XmlDocument getFileXmlResponse = GenerateRequestAndGetResponse("GET"' "Files()"' "$filter=Id eq '" + assetFileId + "'&$top=1"' null); " is 133.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateAssetAndUploadSingleFile,The length of the statement  "            XmlDocument locatorXmlResponse = CreateLocator(assetId' accessPolicyId' DateTime.UtcNow - TimeSpan.FromMinutes(5.0)' 1); " is 120.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateAssetAndUploadMultipleFiles,The length of the statement  "                 XmlDocument getFileXmlResponse = GenerateRequestAndGetResponse("GET"' "Files()"' "$filter=Id eq '" + assetFileId + "'&$top=1"' null); " is 133.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateAssetAndUploadMultipleFiles,The length of the statement  "                 XmlDocument accessPolicyXmlResponse = CreateAccessPolicy(40' 2' Path.GetFileNameWithoutExtension(filePath) + "_AccessPolicy"); " is 126.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateAssetAndUploadMultipleFiles,The length of the statement  "                 XmlDocument locatorXmlResponse = CreateLocator(assetId' accessPolicyId' DateTime.UtcNow - TimeSpan.FromMinutes(5.0)' 1); " is 120.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateAssetFile,The length of the statement  "            string requestbody = "{ \"Name\" : \"" + name + "\"' " + "\"ContentFileSize\" : \"" + length + "\"' \"ParentAssetId\" : \"" + parentAssetId + "\" }";                " is 149.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateEncodingJob,The length of the statement  "            string requestBody = "{\"Name\" : \"MyRESTJob\"' \"InputMediaAssets\" : [{\"__metadata\" : {\"uri\" : \"" + xmlInputAsset.GetElementsByTagName("uri")[0].InnerText + "\"}}]'" " is 173.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateEncodingJob,The length of the statement  "                + "\"Tasks\" : [" + "{\"Configuration\" : \"H264 Adaptive Bitrate MP4 Set 720p\"' \"MediaProcessorId\" : \"" + encoderId + "\"' " + " is 131.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateEncodingJob,The length of the statement  "                "\"TaskBody\" : \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><taskBody><inputAsset>JobInputAsset(0)</inputAsset><outputAsset>JobOutputAsset(0)</outputAsset></taskBody>\"}]}"; " is 181.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateChainedTaskEncodingJob,The length of the statement  "            // Create a chain Task Job. The first task encodes the input file to H264 Broadband 720p. The second task decrypts the output from the first task " is 145.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateChainedTaskEncodingJob,The length of the statement  "            string requestBody = "{\"Name\" : \"MyRESTJob\"' \"InputMediaAssets\" : [{\"__metadata\" : {\"uri\" : \"" + xmlInputAsset.GetElementsByTagName("uri")[0].InnerText + "\"}}]'" " is 173.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateChainedTaskEncodingJob,The length of the statement  "                + "\"TaskBody\" : \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><taskBody><inputAsset>JobInputAsset(0)</inputAsset><outputAsset>JobOutputAsset(0)</outputAsset></taskBody>\"}'" " is 181.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateChainedTaskEncodingJob,The length of the statement  "                + "\"TaskBody\" : \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><taskBody><inputAsset>JobOutputAsset(0)</inputAsset><outputAsset>JobOutputAsset(1)</outputAsset></taskBody>\"}]}"; " is 184.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,EncodeToSmoothStreaming,The length of the statement  "            string requestBody = "{\"Name\" : \"MyRESTJob\"' \"InputMediaAssets\" : [{\"__metadata\" : {\"uri\" : \"" + xmlInputAsset.GetElementsByTagName("uri")[0].InnerText + "\"}}]'" " is 173.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,EncodeToSmoothStreaming,The length of the statement  "                + "\"Tasks\" : [" + "{\"Configuration\" : \"H264 Smooth Streaming 720p\"' \"MediaProcessorId\" : \"" + encoderId + "\"' " + " is 123.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,EncodeToSmoothStreaming,The length of the statement  "                "\"TaskBody\" : \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><taskBody><inputAsset>JobInputAsset(0)</inputAsset><outputAsset>JobOutputAsset(0)</outputAsset></taskBody>\"}]}"; " is 181.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,EncodeToAdaptiveBitrateAndConvertToSmooth,The length of the statement  "            string smoothConfig = "<taskDefinition xmlns=\\\"http://schemas.microsoft.com/iis/media/v4/TM/TaskDefinition#\\\"><name>MP4 to Smooth Streams</name><id>5e1e1a1c-bba6-11df-8991-0019d1916af0</id><description xml:lang=\\\"en\\\">Converts MP4 files encoded with H.264 (AVC) video and AAC-LC audio codecs to Smooth Streams.</description><inputFolder /><properties namespace=\\\"http://schemas.microsoft.com/iis/media/V4/TM/MP4ToSmooth#\\\" prefix=\\\"mp4\\\"><property name=\\\"keepSourceNames\\\" required=\\\"false\\\" value=\\\"false\\\" helpText=\\\"This property tells the MP4 to Smooth task to keep the original file name rather than add the bitrate bitrate information.\\\" /></properties><taskCode><type>Microsoft.Web.Media.TransformManager.MP4toSmooth.MP4toSmooth_Task' Microsoft.Web.Media.TransformManager.MP4toSmooth' Version=1.0.0.0' Culture=neutral' PublicKeyToken=31bf3856ad364e35</type></taskCode></taskDefinition>"; " is 926.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,EncodeToAdaptiveBitrateAndConvertToSmooth,The length of the statement  "            string requestBody = "{\"Name\" : \"MyRESTJob\"' \"InputMediaAssets\" : [{\"__metadata\" : {\"uri\" : \"" + xmlInputAsset.GetElementsByTagName("uri")[0].InnerText + "\"}}]'" " is 173.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,EncodeToAdaptiveBitrateAndConvertToSmooth,The length of the statement  "    + "\"Tasks\" : [" + "{\"Configuration\" : \"H264 Adaptive Bitrate MP4 Set 720p\"' \"MediaProcessorId\" : \"" + encoderId + "\"' " " is 129.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,EncodeToAdaptiveBitrateAndConvertToSmooth,The length of the statement  "    + "\"TaskBody\" : \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><taskBody><inputAsset>JobInputAsset(0)</inputAsset><outputAsset>JobOutputAsset(0)</outputAsset></taskBody>\"}'" " is 181.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,EncodeToAdaptiveBitrateAndConvertToSmooth,The length of the statement  "    + "\"TaskBody\" : \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><taskBody><inputAsset>JobOutputAsset(0)</inputAsset><outputAsset>JobOutputAsset(1)</outputAsset></taskBody>\"}]}"; " is 184.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,ConvertMultipleBitrateToSmoothStreaming,The length of the statement  "            XmlDocument  response = GenerateRequestAndGetResponse("Merge"' "Files('" + assetFileId + "')"' null' assetFileRequestBody); " is 123.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,ConvertMultipleBitrateToSmoothStreaming,The length of the statement  "            string smoothConfig = "<taskDefinition xmlns=\\\"http://schemas.microsoft.com/iis/media/v4/TM/TaskDefinition#\\\"><name>MP4 to Smooth Streams</name><id>5e1e1a1c-bba6-11df-8991-0019d1916af0</id><description xml:lang=\\\"en\\\">Converts MP4 files encoded with H.264 (AVC) video and AAC-LC audio codecs to Smooth Streams.</description><inputFolder /><properties namespace=\\\"http://schemas.microsoft.com/iis/media/V4/TM/MP4ToSmooth#\\\" prefix=\\\"mp4\\\"><property name=\\\"keepSourceNames\\\" required=\\\"false\\\" value=\\\"false\\\" helpText=\\\"This property tells the MP4 to Smooth task to keep the original file name rather than add the bitrate bitrate information.\\\" /></properties><taskCode><type>Microsoft.Web.Media.TransformManager.MP4toSmooth.MP4toSmooth_Task' Microsoft.Web.Media.TransformManager.MP4toSmooth' Version=1.0.0.0' Culture=neutral' PublicKeyToken=31bf3856ad364e35</type></taskCode></taskDefinition>"; " is 926.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,ConvertMultipleBitrateToSmoothStreaming,The length of the statement  "            string requestBody = "{\"Name\" : \"MyRESTJob\"' \"InputMediaAssets\" : [{\"__metadata\" : {\"uri\" : \"" + xmlInputAsset.GetElementsByTagName("uri")[0].InnerText + "\"}}]'" " is 173.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,ConvertMultipleBitrateToSmoothStreaming,The length of the statement  "    + "\"TaskBody\" : \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><taskBody><inputAsset>JobInputAsset(0)</inputAsset><outputAsset>JobOutputAsset(0)</outputAsset></taskBody>\"}]}"; " is 183.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,ConvertToHls,The length of the statement  "            XmlDocument response = GenerateRequestAndGetResponse("Merge"' "Files('" + assetFileId + "')"' null' assetFileRequestBody); " is 122.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,ConvertToHls,The length of the statement  "            string hlsConfig = "<taskDefinition xmlns=\\\"http://schemas.microsoft.com/iis/media/v4/TM/TaskDefinition#\\\"><name>MP4 to Smooth Streams</name><id>5e1e1a1c-bba6-11df-8991-0019d1916af0</id><description xml:lang=\\\"en\\\">Converts MP4 files encoded with H.264 (AVC) video and AAC-LC audio codecs to Smooth Streams.</description><inputFolder /><properties namespace=\\\"http://schemas.microsoft.com/iis/media/V4/TM/MP4ToSmooth#\\\" prefix=\\\"mp4\\\"><property name=\\\"keepSourceNames\\\" required=\\\"false\\\" value=\\\"false\\\" helpText=\\\"This property tells the MP4 to Smooth task to keep the original file name rather than add the bitrate bitrate information.\\\" /></properties><taskCode><type>Microsoft.Web.Media.TransformManager.MP4toSmooth.MP4toSmooth_Task' Microsoft.Web.Media.TransformManager.MP4toSmooth' Version=1.0.0.0' Culture=neutral' PublicKeyToken=31bf3856ad364e35</type></taskCode></taskDefinition>"; " is 923.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,ConvertToHls,The length of the statement  "            string requestBody = "{\"Name\" : \"MyRESTJob\"' \"InputMediaAssets\" : [{\"__metadata\" : {\"uri\" : \"" + url + "\"}}]'" " is 122.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,ConvertToHls,The length of the statement  "    + "\"TaskBody\" : \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><taskBody><inputAsset>JobInputAsset(0)</inputAsset><outputAsset>JobOutputAsset(0)</outputAsset></taskBody>\"}]}"; " is 183.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateAccessPolicy,The length of the statement  "          string requestBody = "{\"Name\": \"" + name + "\"' \"DurationInMinutes\" : \"" + duration + "\"' \"Permissions\" : " + rwperms + "}"; " is 133.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,GetACSToken,The length of the statement  "            var requestBytes = Encoding.ASCII.GetBytes("grant_type=client_credentials&client_id=" + clientId + "&client_secret=" + HttpUtility.UrlEncode(clientSecret) + "&scope=urn%3a" + scope); " is 182.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,GetACSToken,The length of the statement  "                        var reader = JsonReaderWriterFactory.CreateJsonReader(Encoding.UTF8.GetBytes(responseString)' new XmlDictionaryReaderQuotas()); " is 127.
Long Statement,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,GenerateRequestAndGetResponse,The length of the statement  "                                    var reader = JsonReaderWriterFactory.CreateJsonReader(Encoding.UTF8.GetBytes(responseString)' new XmlDictionaryReaderQuotas()); " is 127.
Magic Number,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateAssetAndUploadSingleFile,The following statement contains a magic number: XmlDocument accessPolicyXmlResponse = CreateAccessPolicy(40' 2' videoFileName + "_AccessPolicy");
Magic Number,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateAssetAndUploadSingleFile,The following statement contains a magic number: XmlDocument accessPolicyXmlResponse = CreateAccessPolicy(40' 2' videoFileName + "_AccessPolicy");
Magic Number,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateAssetAndUploadSingleFile,The following statement contains a magic number: XmlDocument locatorXmlResponse = CreateLocator(assetId' accessPolicyId' DateTime.UtcNow - TimeSpan.FromMinutes(5.0)' 1);
Magic Number,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateAssetAndUploadMultipleFiles,The following statement contains a magic number: XmlDocument accessPolicyXmlResponse = CreateAccessPolicy(40' 2' Path.GetFileNameWithoutExtension(filePath) + "_AccessPolicy");
Magic Number,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateAssetAndUploadMultipleFiles,The following statement contains a magic number: XmlDocument accessPolicyXmlResponse = CreateAccessPolicy(40' 2' Path.GetFileNameWithoutExtension(filePath) + "_AccessPolicy");
Magic Number,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,CreateAssetAndUploadMultipleFiles,The following statement contains a magic number: XmlDocument locatorXmlResponse = CreateLocator(assetId' accessPolicyId' DateTime.UtcNow - TimeSpan.FromMinutes(5.0)' 1);
Magic Number,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,DownloadAssetToLocal,The following statement contains a magic number: XmlDocument xmlAccessPolicy = CreateAccessPolicy(120' 1 /* read */' "File Download Policy");
Magic Number,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,DownloadAssetToLocal,The following statement contains a magic number: XmlDocument xmlLocator = CreateLocator(assetId' accessPolicyId' DateTime.UtcNow - TimeSpan.FromMinutes(5.0)' 1);
Magic Number,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,BuildAndSaveAssetSasUrlList,The following statement contains a magic number: XmlDocument xmlAccessPolicy = CreateAccessPolicy(120' 1 /* read */' "File Download Policy");
Magic Number,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,BuildAndSaveAssetSasUrlList,The following statement contains a magic number: XmlDocument xmlLocator = CreateLocator(assetId' accessPolicyId' DateTime.UtcNow - TimeSpan.FromMinutes(5.0)' 1);
Magic Number,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,GenerateRequestAndGetResponse,The following statement contains a magic number: switch (response.StatusCode)                  {                      // We recieved a redirect' send the request to the new URI                      case HttpStatusCode.MovedPermanently:                          serviceURI = new Uri(response.Headers["Location"]);                          response.Close();                          xmlResponse = GenerateRequestAndGetResponse(verb' resourcePath' query' requestbody);                          break;                      // An entity was created or the operation succeeded' read in the response                      case HttpStatusCode.Created:                      case HttpStatusCode.OK:                          // Get the response stream                          using (Stream responseStream = response.GetResponseStream())                          {                              // Read the response stream                              using (StreamReader stream = new StreamReader(responseStream))                              {                                  string responseString = stream.ReadToEnd();                                    // If metadata was requested read in the XML from the response                                  if (resourcePath == "$metadata")                                  {                                      //request.MediaType = "application/xml" for $metadata requests.                                      xmlResponse = new XmlDocument();                                      xmlResponse.LoadXml(responseString);                                  }                                  else                                  {                                      // The response is in JSON so create a JSON reader to read it                                       // and convert it to XML for further processing                                      var reader = JsonReaderWriterFactory.CreateJsonReader(Encoding.UTF8.GetBytes(responseString)' new XmlDictionaryReaderQuotas());                                      xmlResponse = new XmlDocument();                                        reader.Read();                                      xmlResponse.LoadXml(reader.ReadInnerXml());                                  }                              }                          }                          response.Close();                          break;                        // We received a timeout' display an error message                      case HttpStatusCode.RequestTimeout:                          TimeOuts++;                          response.Close();                          if (TimeOuts < 10)                          {                              Console.WriteLine("Timed out. Retrying in 10 sec...");                              System.Threading.Thread.Sleep(10000);                              xmlResponse = GenerateRequestAndGetResponse(verb' resourcePath' query' requestbody);                              TimeOuts = 0;                          }                          break;                        // Something else happend write out the HTTP status                      default:                          Console.WriteLine("HTTP Status ({0}) : {1}"' response.StatusCode' response.StatusDescription);                          response.Close();                          break;                  }
Magic Number,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,GenerateRequestAndGetResponse,The following statement contains a magic number: switch (response.StatusCode)                  {                      // We recieved a redirect' send the request to the new URI                      case HttpStatusCode.MovedPermanently:                          serviceURI = new Uri(response.Headers["Location"]);                          response.Close();                          xmlResponse = GenerateRequestAndGetResponse(verb' resourcePath' query' requestbody);                          break;                      // An entity was created or the operation succeeded' read in the response                      case HttpStatusCode.Created:                      case HttpStatusCode.OK:                          // Get the response stream                          using (Stream responseStream = response.GetResponseStream())                          {                              // Read the response stream                              using (StreamReader stream = new StreamReader(responseStream))                              {                                  string responseString = stream.ReadToEnd();                                    // If metadata was requested read in the XML from the response                                  if (resourcePath == "$metadata")                                  {                                      //request.MediaType = "application/xml" for $metadata requests.                                      xmlResponse = new XmlDocument();                                      xmlResponse.LoadXml(responseString);                                  }                                  else                                  {                                      // The response is in JSON so create a JSON reader to read it                                       // and convert it to XML for further processing                                      var reader = JsonReaderWriterFactory.CreateJsonReader(Encoding.UTF8.GetBytes(responseString)' new XmlDictionaryReaderQuotas());                                      xmlResponse = new XmlDocument();                                        reader.Read();                                      xmlResponse.LoadXml(reader.ReadInnerXml());                                  }                              }                          }                          response.Close();                          break;                        // We received a timeout' display an error message                      case HttpStatusCode.RequestTimeout:                          TimeOuts++;                          response.Close();                          if (TimeOuts < 10)                          {                              Console.WriteLine("Timed out. Retrying in 10 sec...");                              System.Threading.Thread.Sleep(10000);                              xmlResponse = GenerateRequestAndGetResponse(verb' resourcePath' query' requestbody);                              TimeOuts = 0;                          }                          break;                        // Something else happend write out the HTTP status                      default:                          Console.WriteLine("HTTP Status ({0}) : {1}"' response.StatusCode' response.StatusDescription);                          response.Close();                          break;                  }
Magic Number,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,MonitorAndWaitOnJob,The following statement contains a magic number: System.Threading.Thread.Sleep(2000);
Magic Number,Microsoft.Samples.RESTAPI,FileDownloadThread,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,ThreadProc,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,Microsoft.Samples.RESTAPI,FileDownloadThread,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,ThreadProc,The following statement contains a magic number: int count = reader.Read(buffer' 0' 1024);
Magic Number,Microsoft.Samples.RESTAPI,FileDownloadThread,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,ThreadProc,The following statement contains a magic number: count = reader.Read(buffer' 0' 1024);
Missing Default,Microsoft.Samples.RESTAPI,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-media-services\samples\MediaServicesRESTSample\RESTAPISamples\RESTAPISamples\Program.cs,MonitorAndWaitOnJob,The following switch statement is missing a default case: switch (jobState)              {                case "0":                  Console.WriteLine("Job State : Queued. Waiting...");                  break;                  case "1":                  Console.WriteLine("Job State : Scheduled. Waiting...");                  break;                  case "2":                  Console.WriteLine("Job State : Processing. Waiting...");                  break;                  case "3":                  Console.WriteLine("Job State : Finished");                  bWaitForJob = false;                  break;                  case "4":                  Console.WriteLine("Job State : Error");                  bWaitForJob = false;                  break;                  case "5":                  Console.WriteLine("Job State : Canceled");                  bWaitForJob = false;                  break;                  case "6":                  Console.WriteLine("Job State : Canceling");                  bWaitForJob = false;                  break;              }
