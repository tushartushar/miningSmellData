Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,ListJobsAndAssets,Cyclomatic complexity of the method is 8
Complex Method,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,DeleteJob,Cyclomatic complexity of the method is 21
Complex Method,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,StateChanged,Cyclomatic complexity of the method is 22
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,CreateAssetAndUploadMultipleFiles,The length of the statement  "	var accessPolicy = _context.AccessPolicies.Create (assetName' TimeSpan.FromDays (30)' AccessPermissions.Write | AccessPermissions.List); " is 136.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,MonitorBulkManifest,The length of the statement  "				Console.WriteLine ("{0}% complete.\n"' (float)manifest.Statistics.FinishedFilesCount / (float)(manifest.Statistics.FinishedFilesCount + manifest.Statistics.PendingFilesCount) * 100); " is 182.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,CreateBulkIngestManifest,The length of the statement  "	//=== Preently' each asset filename uploaded must be unique for an individual Bulk ingest manifest. So two assets can not have ===// " is 132.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,CreateBulkIngestManifest,The length of the statement  "	//=== the same asset filename or an exception will be thrown for duplicate filename.                                           ===// " is 132.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,CopyBlobToAssetContainerInTheSameMediaServicesAccount,The length of the statement  "	IAccessPolicy writePolicy = context.AccessPolicies.Create ("writePolicy"' TimeSpan.FromMinutes (120)' AccessPermissions.Write); " is 127.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,CopyBlobToAssetContainerInTheSameMediaServicesAccount,The length of the statement  "	var ismAssetFiles = asset.AssetFiles.ToList ().Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase)).ToArray (); " is 132.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,GetLatestMediaProcessorByName,The length of the statement  "	var processor = _context.MediaProcessors.Where (p => p.Name == mediaProcessorName).ToList ().OrderBy (p => new Version (p.Version)).LastOrDefault (); " is 149.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,EncodeToAdaptiveBitrateAndConvertToSmooth,The length of the statement  "	ITask adpativeBitrateTask = job.Tasks.AddNew ("MP4 to Adaptive Bitrate Task"' encoder' "H264 Adaptive Bitrate MP4 Set 720p"' TaskOptions.None); " is 143.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,EncodeToAdaptiveBitrateAndConvertToSmooth,The length of the statement  "	ITask smoothStreamingTask = job.Tasks.AddNew ("Adaptive Bitrate to Smooth Task"' packager' smoothConfig' TaskOptions.None); " is 123.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,ConvertMultipleBitrateToSmoothStreaming,The length of the statement  "	var mbrAssetFiles = mbrAsset.AssetFiles.ToList ().Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase)).ToArray (); " is 135.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,ConvertSmoothToHls,The length of the statement  "	var ismAssetFiles = smoothAsset.AssetFiles.ToList ().Where (f => f.Name.EndsWith (".ism"' StringComparison.OrdinalIgnoreCase)).ToArray (); " is 138.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,ListAssets,The length of the statement  "	string waitMessage = "Building the list. This may take a few " + "seconds to a few minutes depending on how many assets " + "you have." + Environment.NewLine + Environment.NewLine + "Please wait..." + Environment.NewLine; " is 221.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,ListJobsAndAssets,The length of the statement  "	string waitMessage = "Building the list. This may take a few " + "seconds to a few minutes depending on how many assets " + "you have." + Environment.NewLine + Environment.NewLine + "Please wait..." + Environment.NewLine; " is 221.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,DownloadAssetToLocal,The length of the statement  "	IAccessPolicy accessPolicy = _context.AccessPolicies.Create ("File Download Policy"' TimeSpan.FromDays (30)' AccessPermissions.Read); " is 133.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,DownloadAssetToLocal,The length of the statement  "		downloadTasks.Add (outputFile.DownloadAsync (Path.GetFullPath (localDownloadPath)' blobTransfer' locator' CancellationToken.None)); " is 131.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,BuildAndSaveAssetSasUrlList,The length of the statement  "	IAccessPolicy policy = _context.AccessPolicies.Create ("My 30 day readonly policy"' TimeSpan.FromDays (30)' AccessPermissions.Read); " is 132.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,BuildAndSaveAssetSasUrlList,The length of the statement  "	ILocator locator = _context.Locators.CreateLocator (LocatorType.Sas' outputAsset' policy' DateTime.UtcNow.AddMinutes (-5)); " is 123.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,GetStreamingOriginLocator,The length of the statement  "	IAccessPolicy policy = _context.AccessPolicies.Create ("Streaming policy"' TimeSpan.FromDays (30)' AccessPermissions.Read); " is 123.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,GetStreamingOriginLocator,The length of the statement  "	ILocator originLocator = _context.Locators.CreateLocator (LocatorType.OnDemandOrigin' assetToStream' policy' DateTime.UtcNow.AddMinutes (-5)); " is 142.
Long Statement,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,CreatePlayReadyProtectionJob,The length of the statement  "	string configPlayReady = File.ReadAllText (Path.GetFullPath (configFilePath + @"\MediaEncryptor_PlayReadyProtection.xml")); " is 123.
Magic Number,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,CreateAssetAndUploadMultipleFiles,The following statement contains a magic number: blobTransferClient.NumberOfConcurrentTransfers = 20;  
Magic Number,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,CreateAssetAndUploadMultipleFiles,The following statement contains a magic number: blobTransferClient.ParallelTransferThreadCount = 20;  
Magic Number,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,MonitorBulkManifest,The following statement contains a magic number: while (bContinue) {  	//=== We need a new context here because IIngestManifestStatistics is considered an expensive ===//  	//=== property and not updated realtime for a context.                                        ===//  	CloudMediaContext context = GetContext ();  	IIngestManifest manifest = context.IngestManifests.Where (m => m.Id == manifestID).FirstOrDefault ();  	if (manifest != null) {  		lock (consoleWriteLock) {  			Console.WriteLine ("\nWaiting on all file uploads.");  			Console.WriteLine ("PendingFilesCount  : {0}"' manifest.Statistics.PendingFilesCount);  			Console.WriteLine ("FinishedFilesCount : {0}"' manifest.Statistics.FinishedFilesCount);  			Console.WriteLine ("{0}% complete.\n"' (float)manifest.Statistics.FinishedFilesCount / (float)(manifest.Statistics.FinishedFilesCount + manifest.Statistics.PendingFilesCount) * 100);  			if (manifest.Statistics.PendingFilesCount == 0) {  				Console.WriteLine ("Completed\n");  				bContinue = false;  			}  		}  		if (manifest.Statistics.FinishedFilesCount < manifest.Statistics.PendingFilesCount) {  			Thread.Sleep (60000);  		}  	} else  		//=== Manifest is null ===//  		bContinue = false;  }  
Magic Number,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,MonitorBulkManifest,The following statement contains a magic number: while (bContinue) {  	//=== We need a new context here because IIngestManifestStatistics is considered an expensive ===//  	//=== property and not updated realtime for a context.                                        ===//  	CloudMediaContext context = GetContext ();  	IIngestManifest manifest = context.IngestManifests.Where (m => m.Id == manifestID).FirstOrDefault ();  	if (manifest != null) {  		lock (consoleWriteLock) {  			Console.WriteLine ("\nWaiting on all file uploads.");  			Console.WriteLine ("PendingFilesCount  : {0}"' manifest.Statistics.PendingFilesCount);  			Console.WriteLine ("FinishedFilesCount : {0}"' manifest.Statistics.FinishedFilesCount);  			Console.WriteLine ("{0}% complete.\n"' (float)manifest.Statistics.FinishedFilesCount / (float)(manifest.Statistics.FinishedFilesCount + manifest.Statistics.PendingFilesCount) * 100);  			if (manifest.Statistics.PendingFilesCount == 0) {  				Console.WriteLine ("Completed\n");  				bContinue = false;  			}  		}  		if (manifest.Statistics.FinishedFilesCount < manifest.Statistics.PendingFilesCount) {  			Thread.Sleep (60000);  		}  	} else  		//=== Manifest is null ===//  		bContinue = false;  }  
Magic Number,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,MonitorBulkManifest,The following statement contains a magic number: if (manifest != null) {  	lock (consoleWriteLock) {  		Console.WriteLine ("\nWaiting on all file uploads.");  		Console.WriteLine ("PendingFilesCount  : {0}"' manifest.Statistics.PendingFilesCount);  		Console.WriteLine ("FinishedFilesCount : {0}"' manifest.Statistics.FinishedFilesCount);  		Console.WriteLine ("{0}% complete.\n"' (float)manifest.Statistics.FinishedFilesCount / (float)(manifest.Statistics.FinishedFilesCount + manifest.Statistics.PendingFilesCount) * 100);  		if (manifest.Statistics.PendingFilesCount == 0) {  			Console.WriteLine ("Completed\n");  			bContinue = false;  		}  	}  	if (manifest.Statistics.FinishedFilesCount < manifest.Statistics.PendingFilesCount) {  		Thread.Sleep (60000);  	}  } else  	//=== Manifest is null ===//  	bContinue = false;  
Magic Number,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,MonitorBulkManifest,The following statement contains a magic number: if (manifest != null) {  	lock (consoleWriteLock) {  		Console.WriteLine ("\nWaiting on all file uploads.");  		Console.WriteLine ("PendingFilesCount  : {0}"' manifest.Statistics.PendingFilesCount);  		Console.WriteLine ("FinishedFilesCount : {0}"' manifest.Statistics.FinishedFilesCount);  		Console.WriteLine ("{0}% complete.\n"' (float)manifest.Statistics.FinishedFilesCount / (float)(manifest.Statistics.FinishedFilesCount + manifest.Statistics.PendingFilesCount) * 100);  		if (manifest.Statistics.PendingFilesCount == 0) {  			Console.WriteLine ("Completed\n");  			bContinue = false;  		}  	}  	if (manifest.Statistics.FinishedFilesCount < manifest.Statistics.PendingFilesCount) {  		Thread.Sleep (60000);  	}  } else  	//=== Manifest is null ===//  	bContinue = false;  
Magic Number,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,MonitorBulkManifest,The following statement contains a magic number: lock (consoleWriteLock) {  	Console.WriteLine ("\nWaiting on all file uploads.");  	Console.WriteLine ("PendingFilesCount  : {0}"' manifest.Statistics.PendingFilesCount);  	Console.WriteLine ("FinishedFilesCount : {0}"' manifest.Statistics.FinishedFilesCount);  	Console.WriteLine ("{0}% complete.\n"' (float)manifest.Statistics.FinishedFilesCount / (float)(manifest.Statistics.FinishedFilesCount + manifest.Statistics.PendingFilesCount) * 100);  	if (manifest.Statistics.PendingFilesCount == 0) {  		Console.WriteLine ("Completed\n");  		bContinue = false;  	}  }  
Magic Number,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,MonitorBulkManifest,The following statement contains a magic number: Console.WriteLine ("{0}% complete.\n"' (float)manifest.Statistics.FinishedFilesCount / (float)(manifest.Statistics.FinishedFilesCount + manifest.Statistics.PendingFilesCount) * 100);  
Magic Number,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,MonitorBulkManifest,The following statement contains a magic number: if (manifest.Statistics.FinishedFilesCount < manifest.Statistics.PendingFilesCount) {  	Thread.Sleep (60000);  }  
Magic Number,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,MonitorBulkManifest,The following statement contains a magic number: Thread.Sleep (60000);  
Magic Number,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,DeleteJob,The following statement contains a magic number: while (!jobDeleted) {  	// Get an updated job reference.    	IJob job = GetJob (jobId);  	// Check and handle various possible job states. You can   	// only delete a job whose state is Finished' Error' or Canceled.     	// You can cancel jobs that are Queued' Scheduled' or Processing'    	// and then delete after they are canceled.  	switch (job.State) {  	case JobState.Finished:  	case JobState.Canceled:  	case JobState.Error:  		// Job errors should already be logged by the StateChanged event   		// handling method.  		// You can also call job.DeleteAsync to do async deletes.  		job.Delete ();  		Console.WriteLine ("Job has been deleted.");  		jobDeleted = true;  		break;  	case JobState.Canceling:  		Console.WriteLine ("Job is cancelling and will be deleted " + "when finished.");  		Console.WriteLine ("Wait while job finishes canceling...");  		Thread.Sleep (5000);  		break;  	case JobState.Queued:  	case JobState.Scheduled:  	case JobState.Processing:  		job.Cancel ();  		Console.WriteLine ("Job is scheduled or processing and will " + "be deleted.");  		break;  	default:  		break;  	}  }  
Magic Number,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,DeleteJob,The following statement contains a magic number: switch (job.State) {  case JobState.Finished:  case JobState.Canceled:  case JobState.Error:  	// Job errors should already be logged by the StateChanged event   	// handling method.  	// You can also call job.DeleteAsync to do async deletes.  	job.Delete ();  	Console.WriteLine ("Job has been deleted.");  	jobDeleted = true;  	break;  case JobState.Canceling:  	Console.WriteLine ("Job is cancelling and will be deleted " + "when finished.");  	Console.WriteLine ("Wait while job finishes canceling...");  	Thread.Sleep (5000);  	break;  case JobState.Queued:  case JobState.Scheduled:  case JobState.Processing:  	job.Cancel ();  	Console.WriteLine ("Job is scheduled or processing and will " + "be deleted.");  	break;  default:  	break;  }  
Magic Number,ConsoleApplication1,Program,F:\newReposMay17\Azure_azure-sdk-for-media-services\samples\Windows Azure Media Services .NET SDK Sample\C#\MediaServicesSDKSamples\Program.cs,DeleteJob,The following statement contains a magic number: Thread.Sleep (5000);  
