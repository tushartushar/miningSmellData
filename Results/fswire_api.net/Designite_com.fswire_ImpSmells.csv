Implementation smell,Namespace,Class,File,Method,Description
Complex Method,com.fswire.streaming.api,Connection,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Connection.cs,websocket_MessageReceived,Cyclomatic complexity of the method is 26
Complex Method,com.fswire.streaming.api,Pusher,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Pusher.cs,Connect,Cyclomatic complexity of the method is 11
Complex Method,com.fswire.streaming.api,Pusher,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Pusher.cs,SubscribeToChannel,Cyclomatic complexity of the method is 12
Long Statement,com.fswire,Client,C:\repos\fswire_api.net\com.fswire.streaming.client\Client.cs,Connect,The length of the statement  "	string authorize_url = String.Format ("http://{0}/api/authenticate?user_id={1}&auth_token={2}"' Settings.Default.StreamingHostName' _userId' _authToken); " is 153.
Long Statement,com.fswire,Client,C:\repos\fswire_api.net\com.fswire.streaming.client\Client.cs,Authenticate,The length of the statement  "	string result = PostTest (String.Format ("http://{0}/api/users/sign_in.json?user_login[email]={1}&user_login[password]={2}"' Settings.Default.StreamingHostName' userId' password)' String.Empty); " is 194.
Long Statement,com.fswire.rest.api.wrapper,Stream,C:\repos\fswire_api.net\com.fswire.streaming.client\rest.api\wrapper\Stream.cs,MessageHistory,The length of the statement  "		result = webClient.DownloadData (String.Format ("http://{0}/{1}/streams/{2}/history.json?auth_token={3}"' Settings.Default.StreamingHostName' Settings.Default.ApiRoot' stream.id' stream.client.AuthToken)); " is 205.
Long Statement,com.fswire.rest.api.wrapper,Stream,C:\repos\fswire_api.net\com.fswire.streaming.client\rest.api\wrapper\Stream.cs,AllStreams,The length of the statement  "		result = webClient.DownloadData (String.Format ("http://{0}/{1}/streams.json?auth_token={2}"' Settings.Default.StreamingHostName' Settings.Default.ApiRoot' client.AuthToken)); " is 175.
Long Statement,com.fswire.streaming.api,Connection,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Connection.cs,websocket_MessageReceived,The length of the statement  "			Pusher.Trace.TraceEvent (TraceEventType.Warning' 0' "Received a presence event on channel '" + message.channel + "'' however there is no presence channel which matches."); " is 171.
Long Statement,com.fswire.streaming.api,Connection,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Connection.cs,websocket_MessageReceived,The length of the statement  "			Pusher.Trace.TraceEvent (TraceEventType.Warning' 0' "Received a presence event on channel '" + message.channel + "'' however there is no presence channel which matches."); " is 171.
Long Statement,com.fswire.streaming.api,HttpAuthorizer,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\HttpAuthorizer.cs,Authorize,The length of the statement  "		authToken = webClient.UploadString (String.Format ("{0}&channel_name={1}&socket_id={2}"' _authEndpoint' channelName' socketId)' "POST"' ""); " is 140.
Long Statement,com.fswire.streaming.api,Pusher,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Pusher.cs,Connect,The length of the statement  "			Trace.TraceEvent (TraceEventType.Warning' 0' "Attempt to connect when connection is already in 'Connected' state. New attempt has been ignored."); " is 146.
Long Statement,com.fswire.streaming.api,Pusher,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Pusher.cs,Connect,The length of the statement  "			Trace.TraceEvent (TraceEventType.Warning' 0' "Attempt to connect when connection is already in 'Connecting' state. New attempt has been ignored."); " is 147.
Long Statement,com.fswire.streaming.api,Pusher,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Pusher.cs,Connect,The length of the statement  "	string url = String.Format ("{0}{1}/app/{2}?protocol={3}&client={4}&version={5}"' scheme' this.Host' _applicationKey' Settings.Default.ProtocolVersion' Settings.Default.ClientName' Settings.Default.VersionNumber); " is 213.
Long Statement,com.fswire.streaming.api,Pusher,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Pusher.cs,Subscribe,The length of the statement  "		throw new PusherException ("You must wait for Pusher to connect before you can subscribe to a channel"' ErrorCodes.NotConnected); " is 129.
Long Statement,com.fswire.streaming.api,Pusher,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Pusher.cs,Subscribe,The length of the statement  "		Trace.TraceEvent (TraceEventType.Warning' 0' "Channel '" + channelName + "' is already subscribed to. Subscription event has been ignored."); " is 141.
Long Statement,com.fswire.streaming.api,Pusher,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Pusher.cs,AuthEndpointCheck,The length of the statement  "		throw new PusherException ("You must set a ChannelAuthorizer property to use private or presence channels"' ErrorCodes.ChannelAuthorizerNotSet); " is 144.
Missing Default,com.fswire.streaming.api,Connection,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Connection.cs,websocket_MessageReceived,The following switch statement is missing a default case: switch (message.@event) {  case Constants.ERROR:  	ParseError (message.data);  	break;  case Constants.CONNECTION_ESTABLISHED:  	ParseConnectionEstablished (message.data);  	break;  case Constants.CHANNEL_SUBSCRIPTION_SUCCEEDED:  	if (_pusher.Channels.ContainsKey (message.channel)) {  		var channel = _pusher.Channels [message.channel];  		channel.SubscriptionSucceeded (message.data);  	}  	break;  case Constants.CHANNEL_SUBSCRIPTION_ERROR:  	throw new PusherException ("Error received on channel subscriptions: " + e.Message' ErrorCodes.SubscriptionError);  case Constants.CHANNEL_MEMBER_ADDED:  	// Assume channel event  	if (_pusher.Channels.ContainsKey (message.channel)) {  		var channel = _pusher.Channels [message.channel];  		if (channel is PresenceChannel) {  			((PresenceChannel)channel).AddMember (message.data);  			break;  		}  	}  	Pusher.Trace.TraceEvent (TraceEventType.Warning' 0' "Received a presence event on channel '" + message.channel + "'' however there is no presence channel which matches.");  	break;  case Constants.CHANNEL_MEMBER_REMOVED:  	// Assume channel event  	if (_pusher.Channels.ContainsKey (message.channel)) {  		var channel = _pusher.Channels [message.channel];  		if (channel is PresenceChannel) {  			((PresenceChannel)channel).RemoveMember (message.data);  			break;  		}  	}  	Pusher.Trace.TraceEvent (TraceEventType.Warning' 0' "Received a presence event on channel '" + message.channel + "'' however there is no presence channel which matches.");  	break;  }  
Missing Default,com.fswire.streaming.api,Pusher,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Pusher.cs,Connect,The following switch statement is missing a default case: switch (_connection.State) {  case ConnectionState.Connected:  	Trace.TraceEvent (TraceEventType.Warning' 0' "Attempt to connect when connection is already in 'Connected' state. New attempt has been ignored.");  	break;  case ConnectionState.Connecting:  	Trace.TraceEvent (TraceEventType.Warning' 0' "Attempt to connect when connection is already in 'Connecting' state. New attempt has been ignored.");  	break;  case ConnectionState.Failed:  	Trace.TraceEvent (TraceEventType.Error' 0' "Cannot attempt re-connection once in 'Failed' state");  	throw new PusherException ("Cannot attempt re-connection once in 'Failed' state"' ErrorCodes.ConnectionFailed);  }  
Missing Default,com.fswire.streaming.api,Pusher,C:\repos\fswire_api.net\com.fswire.streaming.client\streaming.api\Pusher.cs,SubscribeToChannel,The following switch statement is missing a default case: switch (type) {  case ChannelTypes.Public:  	Channels.Add (channelName' new Channel (channelName' this));  	break;  case ChannelTypes.Private:  	AuthEndpointCheck ();  	Channels.Add (channelName' new PrivateChannel (channelName' this));  	break;  case ChannelTypes.Presence:  	AuthEndpointCheck ();  	Channels.Add (channelName' new PresenceChannel (channelName' this));  	break;  }  
