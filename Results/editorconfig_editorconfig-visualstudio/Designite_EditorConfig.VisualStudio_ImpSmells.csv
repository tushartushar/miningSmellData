Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,EditorConfig.VisualStudio,CommandFilter,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Completion\EditorConfigCompletionController.cs,Exec,The method has 5 parameters. Parameters: pguidCmdGroup' nCmdID' nCmdexecopt' pvaIn' pvaOut
Long Parameter List,EditorConfig.VisualStudio.Integration.Events,RunningDocumentTableEventListener,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Integration\Events\RunningDocumentTableEventListener.cs,OnAfterAttributeChangeEx,The method has 8 parameters. Parameters: docCookie' grfAttribs' pHierOld' itemidOld' pszMkDocumentOld' pHierNew' itemidNew' pszMkDocumentNew
Long Identifier,EditorConfig.VisualStudio.Integration,Guids,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Integration\Guids.cs,,The length of the parameter GuidEditorConfigCommandCleanupActiveCode is 40.
Long Identifier,EditorConfig.VisualStudio.Integration,PkgCmdIDList,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Integration\PkgCmdIDList.cs,,The length of the parameter CmdIDEditorConfigCleanupActiveCode is 34.
Long Statement,EditorConfig.VisualStudio,CommandFilter,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Completion\EditorConfigCompletionController.cs,StartSession,The length of the statement  "                _currentSession = Broker.CreateCompletionSession(TextView' snapshot.CreateTrackingPoint(caret' PointTrackingMode.Positive)' true); " is 130.
Long Statement,EditorConfig.VisualStudio,EditorConfigPackage,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\EditorConfigPackage.cs,OnDispatcherUnhandledException,The length of the statement  "            OutputWindowHelper.WriteLine("EditorConfig's diagnostics mode caught the following unhandled exception in Visual Studio--" + Environment.NewLine + e.Exception); " is 160.
Long Statement,EditorConfig.VisualStudio.Helpers,TextDocumentExtensions,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Helpers\TextDocumentExtensions.cs,SubstituteAllStringMatches,The length of the statement  "                    OutputWindowHelper.WriteLine("EditorConfig had to force a break out of TextDocumentHelper's SubstituteAllStringMatches for a document."); " is 137.
Long Statement,EditorConfig.VisualStudio.Logic.Cleaning,CodeCleanupManager,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Logic\Cleaning\CodeCleanupManager.cs,Cleanup,The length of the statement  "                    _package.IDE.StatusBar.Text = String.Format("EditorConfig stopped cleaning '{0}'.  See output window for more details."' document.Name); " is 136.
Long Statement,EditorConfig.VisualStudio.Logic.Cleaning,InitialCleanup,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Logic\Cleaning\InitialCleanup.cs,Execute,The length of the statement  "                    _ide.StatusBar.Text = String.Format("EditorConfig stopped cleaning '{0}'.  See output window for more details."' _doc.Name); " is 124.
Empty Catch Block,EditorConfig.VisualStudio.Logic.Settings,GlobalSettings,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Logic\Settings\GlobalSettings.cs,GlobalSettings,The method has an empty catch block.
Magic Number,EditorConfig.VisualStudio,EditorConfigPackage,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\EditorConfigPackage.cs,IdBmpSplash,The following statement contains a magic number: pIdBmp = 400;
Magic Number,EditorConfig.VisualStudio,EditorConfigPackage,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\EditorConfigPackage.cs,IdIcoLogoForAboutbox,The following statement contains a magic number: pIdIco = 400;
Magic Number,EditorConfig.VisualStudio.Logic.Cleaning,InitialCleanup,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Logic\Cleaning\InitialCleanup.cs,AnalyzeIndentSizeTrend,The following statement contains a magic number: for (var i = 8; i >= 2; i--)              {                  if (indentWidthScores[i - 1] == max)                      return i;              }
Magic Number,EditorConfig.VisualStudio.Logic.Cleaning,InitialCleanup,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Logic\Cleaning\InitialCleanup.cs,AnalyzeIndentSizeTrend,The following statement contains a magic number: for (var i = 8; i >= 2; i--)              {                  if (indentWidthScores[i - 1] == max)                      return i;              }
Magic Number,EditorConfig.VisualStudio.Logic.Cleaning,InitialCleanup,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Logic\Cleaning\InitialCleanup.cs,TallyIndentationScores,The following statement contains a magic number: var indentWidthScores = new int[8];
Magic Number,EditorConfig.VisualStudio.Logic.Cleaning,InitialCleanup,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Logic\Cleaning\InitialCleanup.cs,TallyIndentationScores,The following statement contains a magic number: foreach (var spaces in _textDoc.FindMatches(pattern)                                             .Select(editPoint => editPoint.GetLine())                                             .Select(line => leadingSpaces.Match(line).Length))              {                  for (var i = 2; i <= 8; i++)                  {                      if (i > spaces) break;                      if (spaces%i == 0)                          indentWidthScores[i - 1] += spaces;                  }              }
Magic Number,EditorConfig.VisualStudio.Logic.Cleaning,InitialCleanup,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Logic\Cleaning\InitialCleanup.cs,TallyIndentationScores,The following statement contains a magic number: foreach (var spaces in _textDoc.FindMatches(pattern)                                             .Select(editPoint => editPoint.GetLine())                                             .Select(line => leadingSpaces.Match(line).Length))              {                  for (var i = 2; i <= 8; i++)                  {                      if (i > spaces) break;                      if (spaces%i == 0)                          indentWidthScores[i - 1] += spaces;                  }              }
Missing Default,EditorConfig.VisualStudio,CommandFilter,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Completion\EditorConfigCompletionController.cs,Exec,The following switch statement is missing a default case: switch ((VSConstants.VSStd2KCmdID)nCmdID)                  {                  case VSConstants.VSStd2KCmdID.AUTOCOMPLETE:                  case VSConstants.VSStd2KCmdID.COMPLETEWORD:                  case VSConstants.VSStd2KCmdID.SHOWMEMBERLIST:                      handled = StartSession();                      break;                  case VSConstants.VSStd2KCmdID.RETURN:                      handled = Complete(false);                      break;                  case VSConstants.VSStd2KCmdID.TAB:                      handled = Complete(true);                      break;                  case VSConstants.VSStd2KCmdID.CANCEL:                      handled = Cancel();                      break;                  }
Missing Default,EditorConfig.VisualStudio,CommandFilter,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Completion\EditorConfigCompletionController.cs,Exec,The following switch statement is missing a default case: switch ((VSConstants.VSStd2KCmdID)nCmdID)                      {                      case VSConstants.VSStd2KCmdID.TYPECHAR:                          char ch = GetTypeChar(pvaIn);                          if (ch == '=' || ch == ' ')                              Cancel();                          else if (!char.IsPunctuation(ch) && !char.IsControl(ch))                              StartSession();                          else if (_currentSession != null)                              Filter();                          break;                      case VSConstants.VSStd2KCmdID.BACKSPACE:                          if (_currentSession == null)                              StartSession();                            Filter();                          break;                      }
Missing Default,EditorConfig.VisualStudio,CommandFilter,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Completion\EditorConfigCompletionController.cs,QueryStatus,The following switch statement is missing a default case: switch ((VSConstants.VSStd2KCmdID)prgCmds[0].cmdID)                  {                  case VSConstants.VSStd2KCmdID.AUTOCOMPLETE:                  case VSConstants.VSStd2KCmdID.COMPLETEWORD:                  case VSConstants.VSStd2KCmdID.SHOWMEMBERLIST:                      prgCmds[0].cmdf = (uint)OLECMDF.OLECMDF_ENABLED | (uint)OLECMDF.OLECMDF_SUPPORTED;                      return VSConstants.S_OK;                  }
Missing Default,EditorConfig.VisualStudio.Logic.Settings,GlobalSettings,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Logic\Settings\GlobalSettings.cs,Apply,The following switch statement is missing a default case: switch (_settings.Properties["indent_style"])              {                  case "tab":                      _editorProps.Item("InsertTabs").Value = true;                      break;                  case "space":                      _editorProps.Item("InsertTabs").Value = false;                      break;              }
Missing Default,EditorConfig.VisualStudio.Logic.Settings,LocalSettings,C:\repos\editorconfig_editorconfig-visualstudio\src\EditorConfig.VisualStudio\Logic\Settings\LocalSettings.cs,Apply,The following switch statement is missing a default case: switch (_settings.Properties["indent_style"])                  {                      case "tab":                          options.SetOptionValue(DefaultOptions.ConvertTabsToSpacesOptionId' false);                          break;                      case "space":                          options.SetOptionValue(DefaultOptions.ConvertTabsToSpacesOptionId' true);                          break;                  }
