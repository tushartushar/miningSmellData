Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Launchpad.Utilities.Interface,MainWindow,C:\research\architectureSmells\repos\Nihlus_Launchpad\Launchpad.Utilities\Interface\MainWindow.cs,,The length of the parameter GenerateLaunchpadManifestButton is 31.
Long Statement,Launchpad.Utilities.Interface,MainWindow,C:\research\architectureSmells\repos\Nihlus_Launchpad\Launchpad.Utilities\Interface\MainWindow.cs,Create,The length of the statement  "			using (var builder = new Builder(Assembly.GetExecutingAssembly()' "Launchpad.Utilities.Interface.Launchpad.Utilities.glade"' null))" is 131.
Magic Number,Launchpad.Utilities.Handlers,ManifestGenerationHandler,C:\research\architectureSmells\repos\Nihlus_Launchpad\Launchpad.Utilities\Handlers\ManifestGenerationHandler.cs,GenerateManifestAsync,The following statement contains a magic number: return Task.Run 			( 				async () => 				{ 					var manifestFilePaths = new List<string>(Directory 						.EnumerateFiles(targetPath' "*"' SearchOption.AllDirectories) 						.Where(s => !IsPathABlacklistedFile(s)));  					this.GenerationProgressArgs.TotalFiles = manifestFilePaths.Count;  					using (var tw = new StreamWriter(File.Create(manifestPath' 4096' FileOptions.Asynchronous))) 					{ 						var completedFiles = 0; 						foreach (var filePath in manifestFilePaths) 						{ 							ct.ThrowIfCancellationRequested();  							var newEntry = CreateEntryForFile(targetPath' filePath);  							await tw.WriteLineAsync(newEntry.ToString()); 							await tw.FlushAsync();  							completedFiles++;  							this.GenerationProgressArgs.CompletedFiles = completedFiles; 							this.GenerationProgressArgs.Filepath = newEntry.RelativePath; 							this.GenerationProgressArgs.Hash = newEntry.Hash; 							this.GenerationProgressArgs.Filesize = newEntry.Size;  							progressReporter.Report(this.GenerationProgressArgs); 						} 					}  					await CreateManifestChecksumAsync(manifestPath' manifestChecksumPath); 				}' 				ct 			);
