Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,InitializeName,Cyclomatic complexity of the method is 21
Complex Method,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,Cyclomatic complexity of the method is 16
Complex Method,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,ToCardIndex,Cyclomatic complexity of the method is 9
Complex Method,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,Cyclomatic complexity of the method is 20
Complex Method,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,Cyclomatic complexity of the method is 8
Complex Method,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,Cyclomatic complexity of the method is 8
Complex Method,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,Cyclomatic complexity of the method is 14
Complex Method,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,Cyclomatic complexity of the method is 8
Long Statement,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,DrawCard,The length of the statement  "	this.graphicsSurface.DrawImage (cardImages [cardIndex]' new Rectangle (topLeft.X' topLeft.Y' DefaultWidth' DefaultHeight)); " is 123.
Long Statement,Cards,CardUtility,C:\repos\nishesj_callbreak\Lib\CardUtility.cs,SortBySuit,The length of the statement  "			if (Card.SuitFromCardIndex (nextcard) < Card.SuitFromCardIndex (mincard) || (Card.SuitFromCardIndex (nextcard) == Card.SuitFromCardIndex (mincard) && Card.RankFromCardIndex (nextcard) < Card.RankFromCardIndex (mincard))) { " is 222.
Long Statement,Cards,GameRule,C:\repos\nishesj_callbreak\GameRule.cs,isValidCard,The length of the statement  "				if ((playedCard.Rank > currentPot.highestCard.Rank) && ((currentPot.highestCard.Suit == CardSuit.Spades) && (playedCard.Suit == CardSuit.Spades))) " is 146.
Long Statement,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseClick,The length of the statement  "		if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) { " is 127.
Long Statement,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The length of the statement  "		if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) { " is 127.
Long Statement,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The length of the statement  "				if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) { " is 173.
Long Statement,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The length of the statement  "	G.DrawString ("Bid : " + p.TotalBid.ToString () + "        " + "Tricks : " + p.TotalTrick.ToString ()' drawFont' drawBrush' drawPoint' sf); " is 139.
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,InitializeName,The following statement contains a magic number: if (regKey != null) {  	switch (this.ID) {  	case 0:  		setName (regKey.GetValue ("AIPlayer0"' "AI - 0").ToString ());  		break;  	case 1:  		setName (regKey.GetValue ("AIPlayer1"' "AI - I").ToString ());  		break;  	case 2:  		setName (regKey.GetValue ("AIPlayer2"' "AI - II").ToString ());  		break;  	case 3:  		setName (regKey.GetValue ("AIPlayer3"' "AI - III").ToString ());  		break;  	}  	regKey.Close ();  }  else {  	switch (this.ID) {  	case 1:  		setName ("AI-1");  		break;  	case 2:  		setName ("AI-2");  		break;  	case 3:  		setName ("AI-3");  		break;  	}  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,InitializeName,The following statement contains a magic number: if (regKey != null) {  	switch (this.ID) {  	case 0:  		setName (regKey.GetValue ("AIPlayer0"' "AI - 0").ToString ());  		break;  	case 1:  		setName (regKey.GetValue ("AIPlayer1"' "AI - I").ToString ());  		break;  	case 2:  		setName (regKey.GetValue ("AIPlayer2"' "AI - II").ToString ());  		break;  	case 3:  		setName (regKey.GetValue ("AIPlayer3"' "AI - III").ToString ());  		break;  	}  	regKey.Close ();  }  else {  	switch (this.ID) {  	case 1:  		setName ("AI-1");  		break;  	case 2:  		setName ("AI-2");  		break;  	case 3:  		setName ("AI-3");  		break;  	}  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,InitializeName,The following statement contains a magic number: if (regKey != null) {  	switch (this.ID) {  	case 0:  		setName (regKey.GetValue ("AIPlayer0"' "AI - 0").ToString ());  		break;  	case 1:  		setName (regKey.GetValue ("AIPlayer1"' "AI - I").ToString ());  		break;  	case 2:  		setName (regKey.GetValue ("AIPlayer2"' "AI - II").ToString ());  		break;  	case 3:  		setName (regKey.GetValue ("AIPlayer3"' "AI - III").ToString ());  		break;  	}  	regKey.Close ();  }  else {  	switch (this.ID) {  	case 1:  		setName ("AI-1");  		break;  	case 2:  		setName ("AI-2");  		break;  	case 3:  		setName ("AI-3");  		break;  	}  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,InitializeName,The following statement contains a magic number: if (regKey != null) {  	switch (this.ID) {  	case 0:  		setName (regKey.GetValue ("AIPlayer0"' "AI - 0").ToString ());  		break;  	case 1:  		setName (regKey.GetValue ("AIPlayer1"' "AI - I").ToString ());  		break;  	case 2:  		setName (regKey.GetValue ("AIPlayer2"' "AI - II").ToString ());  		break;  	case 3:  		setName (regKey.GetValue ("AIPlayer3"' "AI - III").ToString ());  		break;  	}  	regKey.Close ();  }  else {  	switch (this.ID) {  	case 1:  		setName ("AI-1");  		break;  	case 2:  		setName ("AI-2");  		break;  	case 3:  		setName ("AI-3");  		break;  	}  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,InitializeName,The following statement contains a magic number: switch (this.ID) {  case 0:  	setName (regKey.GetValue ("AIPlayer0"' "AI - 0").ToString ());  	break;  case 1:  	setName (regKey.GetValue ("AIPlayer1"' "AI - I").ToString ());  	break;  case 2:  	setName (regKey.GetValue ("AIPlayer2"' "AI - II").ToString ());  	break;  case 3:  	setName (regKey.GetValue ("AIPlayer3"' "AI - III").ToString ());  	break;  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,InitializeName,The following statement contains a magic number: switch (this.ID) {  case 0:  	setName (regKey.GetValue ("AIPlayer0"' "AI - 0").ToString ());  	break;  case 1:  	setName (regKey.GetValue ("AIPlayer1"' "AI - I").ToString ());  	break;  case 2:  	setName (regKey.GetValue ("AIPlayer2"' "AI - II").ToString ());  	break;  case 3:  	setName (regKey.GetValue ("AIPlayer3"' "AI - III").ToString ());  	break;  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,InitializeName,The following statement contains a magic number: switch (this.ID) {  case 1:  	setName ("AI-1");  	break;  case 2:  	setName ("AI-2");  	break;  case 3:  	setName ("AI-3");  	break;  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,InitializeName,The following statement contains a magic number: switch (this.ID) {  case 1:  	setName ("AI-1");  	break;  case 2:  	setName ("AI-2");  	break;  case 3:  	setName ("AI-3");  	break;  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: foreach (CardSuit cardSuit in Enum.GetValues (typeof(CardSuit))) {  	if (cardSuit != CardSuit.Spades) {  		int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  		if (numberOfCardInSuit > 0) {  			// count +1 for card if its ace or king  			if (HasCard (cardSuit' CardRank.Ace' Hand))  				count = count + 1;  			if (HasCard (cardSuit' CardRank.King' Hand))  				count = count + 1;  			if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  				count = count - (1 / 2);  			if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  				count = count - (1 / 2);  			if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  				count = count - 1;  			if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  				count = count + (1 / 2);  		}  		if (numberOfCardInSuit <= 2)  			ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  	}  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: foreach (CardSuit cardSuit in Enum.GetValues (typeof(CardSuit))) {  	if (cardSuit != CardSuit.Spades) {  		int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  		if (numberOfCardInSuit > 0) {  			// count +1 for card if its ace or king  			if (HasCard (cardSuit' CardRank.Ace' Hand))  				count = count + 1;  			if (HasCard (cardSuit' CardRank.King' Hand))  				count = count + 1;  			if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  				count = count - (1 / 2);  			if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  				count = count - (1 / 2);  			if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  				count = count - 1;  			if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  				count = count + (1 / 2);  		}  		if (numberOfCardInSuit <= 2)  			ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  	}  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: foreach (CardSuit cardSuit in Enum.GetValues (typeof(CardSuit))) {  	if (cardSuit != CardSuit.Spades) {  		int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  		if (numberOfCardInSuit > 0) {  			// count +1 for card if its ace or king  			if (HasCard (cardSuit' CardRank.Ace' Hand))  				count = count + 1;  			if (HasCard (cardSuit' CardRank.King' Hand))  				count = count + 1;  			if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  				count = count - (1 / 2);  			if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  				count = count - (1 / 2);  			if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  				count = count - 1;  			if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  				count = count + (1 / 2);  		}  		if (numberOfCardInSuit <= 2)  			ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  	}  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: foreach (CardSuit cardSuit in Enum.GetValues (typeof(CardSuit))) {  	if (cardSuit != CardSuit.Spades) {  		int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  		if (numberOfCardInSuit > 0) {  			// count +1 for card if its ace or king  			if (HasCard (cardSuit' CardRank.Ace' Hand))  				count = count + 1;  			if (HasCard (cardSuit' CardRank.King' Hand))  				count = count + 1;  			if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  				count = count - (1 / 2);  			if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  				count = count - (1 / 2);  			if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  				count = count - 1;  			if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  				count = count + (1 / 2);  		}  		if (numberOfCardInSuit <= 2)  			ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  	}  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: foreach (CardSuit cardSuit in Enum.GetValues (typeof(CardSuit))) {  	if (cardSuit != CardSuit.Spades) {  		int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  		if (numberOfCardInSuit > 0) {  			// count +1 for card if its ace or king  			if (HasCard (cardSuit' CardRank.Ace' Hand))  				count = count + 1;  			if (HasCard (cardSuit' CardRank.King' Hand))  				count = count + 1;  			if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  				count = count - (1 / 2);  			if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  				count = count - (1 / 2);  			if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  				count = count - 1;  			if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  				count = count + (1 / 2);  		}  		if (numberOfCardInSuit <= 2)  			ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  	}  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: foreach (CardSuit cardSuit in Enum.GetValues (typeof(CardSuit))) {  	if (cardSuit != CardSuit.Spades) {  		int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  		if (numberOfCardInSuit > 0) {  			// count +1 for card if its ace or king  			if (HasCard (cardSuit' CardRank.Ace' Hand))  				count = count + 1;  			if (HasCard (cardSuit' CardRank.King' Hand))  				count = count + 1;  			if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  				count = count - (1 / 2);  			if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  				count = count - (1 / 2);  			if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  				count = count - 1;  			if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  				count = count + (1 / 2);  		}  		if (numberOfCardInSuit <= 2)  			ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  	}  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: foreach (CardSuit cardSuit in Enum.GetValues (typeof(CardSuit))) {  	if (cardSuit != CardSuit.Spades) {  		int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  		if (numberOfCardInSuit > 0) {  			// count +1 for card if its ace or king  			if (HasCard (cardSuit' CardRank.Ace' Hand))  				count = count + 1;  			if (HasCard (cardSuit' CardRank.King' Hand))  				count = count + 1;  			if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  				count = count - (1 / 2);  			if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  				count = count - (1 / 2);  			if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  				count = count - 1;  			if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  				count = count + (1 / 2);  		}  		if (numberOfCardInSuit <= 2)  			ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  	}  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: foreach (CardSuit cardSuit in Enum.GetValues (typeof(CardSuit))) {  	if (cardSuit != CardSuit.Spades) {  		int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  		if (numberOfCardInSuit > 0) {  			// count +1 for card if its ace or king  			if (HasCard (cardSuit' CardRank.Ace' Hand))  				count = count + 1;  			if (HasCard (cardSuit' CardRank.King' Hand))  				count = count + 1;  			if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  				count = count - (1 / 2);  			if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  				count = count - (1 / 2);  			if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  				count = count - 1;  			if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  				count = count + (1 / 2);  		}  		if (numberOfCardInSuit <= 2)  			ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  	}  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: foreach (CardSuit cardSuit in Enum.GetValues (typeof(CardSuit))) {  	if (cardSuit != CardSuit.Spades) {  		int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  		if (numberOfCardInSuit > 0) {  			// count +1 for card if its ace or king  			if (HasCard (cardSuit' CardRank.Ace' Hand))  				count = count + 1;  			if (HasCard (cardSuit' CardRank.King' Hand))  				count = count + 1;  			if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  				count = count - (1 / 2);  			if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  				count = count - 1;  			else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  				count = count - (1 / 2);  			if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  				count = count - 1;  			if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  				count = count + (1 / 2);  		}  		if (numberOfCardInSuit <= 2)  			ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  	}  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (cardSuit != CardSuit.Spades) {  	int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  	if (numberOfCardInSuit > 0) {  		// count +1 for card if its ace or king  		if (HasCard (cardSuit' CardRank.Ace' Hand))  			count = count + 1;  		if (HasCard (cardSuit' CardRank.King' Hand))  			count = count + 1;  		if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  			count = count - (1 / 2);  		if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  			count = count - (1 / 2);  		if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  			count = count - 1;  		if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  			count = count + (1 / 2);  	}  	if (numberOfCardInSuit <= 2)  		ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (cardSuit != CardSuit.Spades) {  	int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  	if (numberOfCardInSuit > 0) {  		// count +1 for card if its ace or king  		if (HasCard (cardSuit' CardRank.Ace' Hand))  			count = count + 1;  		if (HasCard (cardSuit' CardRank.King' Hand))  			count = count + 1;  		if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  			count = count - (1 / 2);  		if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  			count = count - (1 / 2);  		if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  			count = count - 1;  		if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  			count = count + (1 / 2);  	}  	if (numberOfCardInSuit <= 2)  		ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (cardSuit != CardSuit.Spades) {  	int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  	if (numberOfCardInSuit > 0) {  		// count +1 for card if its ace or king  		if (HasCard (cardSuit' CardRank.Ace' Hand))  			count = count + 1;  		if (HasCard (cardSuit' CardRank.King' Hand))  			count = count + 1;  		if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  			count = count - (1 / 2);  		if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  			count = count - (1 / 2);  		if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  			count = count - 1;  		if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  			count = count + (1 / 2);  	}  	if (numberOfCardInSuit <= 2)  		ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (cardSuit != CardSuit.Spades) {  	int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  	if (numberOfCardInSuit > 0) {  		// count +1 for card if its ace or king  		if (HasCard (cardSuit' CardRank.Ace' Hand))  			count = count + 1;  		if (HasCard (cardSuit' CardRank.King' Hand))  			count = count + 1;  		if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  			count = count - (1 / 2);  		if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  			count = count - (1 / 2);  		if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  			count = count - 1;  		if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  			count = count + (1 / 2);  	}  	if (numberOfCardInSuit <= 2)  		ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (cardSuit != CardSuit.Spades) {  	int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  	if (numberOfCardInSuit > 0) {  		// count +1 for card if its ace or king  		if (HasCard (cardSuit' CardRank.Ace' Hand))  			count = count + 1;  		if (HasCard (cardSuit' CardRank.King' Hand))  			count = count + 1;  		if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  			count = count - (1 / 2);  		if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  			count = count - (1 / 2);  		if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  			count = count - 1;  		if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  			count = count + (1 / 2);  	}  	if (numberOfCardInSuit <= 2)  		ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (cardSuit != CardSuit.Spades) {  	int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  	if (numberOfCardInSuit > 0) {  		// count +1 for card if its ace or king  		if (HasCard (cardSuit' CardRank.Ace' Hand))  			count = count + 1;  		if (HasCard (cardSuit' CardRank.King' Hand))  			count = count + 1;  		if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  			count = count - (1 / 2);  		if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  			count = count - (1 / 2);  		if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  			count = count - 1;  		if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  			count = count + (1 / 2);  	}  	if (numberOfCardInSuit <= 2)  		ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (cardSuit != CardSuit.Spades) {  	int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  	if (numberOfCardInSuit > 0) {  		// count +1 for card if its ace or king  		if (HasCard (cardSuit' CardRank.Ace' Hand))  			count = count + 1;  		if (HasCard (cardSuit' CardRank.King' Hand))  			count = count + 1;  		if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  			count = count - (1 / 2);  		if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  			count = count - (1 / 2);  		if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  			count = count - 1;  		if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  			count = count + (1 / 2);  	}  	if (numberOfCardInSuit <= 2)  		ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (cardSuit != CardSuit.Spades) {  	int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  	if (numberOfCardInSuit > 0) {  		// count +1 for card if its ace or king  		if (HasCard (cardSuit' CardRank.Ace' Hand))  			count = count + 1;  		if (HasCard (cardSuit' CardRank.King' Hand))  			count = count + 1;  		if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  			count = count - (1 / 2);  		if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  			count = count - (1 / 2);  		if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  			count = count - 1;  		if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  			count = count + (1 / 2);  	}  	if (numberOfCardInSuit <= 2)  		ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (cardSuit != CardSuit.Spades) {  	int numberOfCardInSuit = NumberOfCardInSuit (cardSuit' Hand);  	if (numberOfCardInSuit > 0) {  		// count +1 for card if its ace or king  		if (HasCard (cardSuit' CardRank.Ace' Hand))  			count = count + 1;  		if (HasCard (cardSuit' CardRank.King' Hand))  			count = count + 1;  		if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  			count = count - (1 / 2);  		if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  			count = count - 1;  		else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  			count = count - (1 / 2);  		if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  			count = count - 1;  		if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  			count = count + (1 / 2);  	}  	if (numberOfCardInSuit <= 2)  		ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (numberOfCardInSuit > 0) {  	// count +1 for card if its ace or king  	if (HasCard (cardSuit' CardRank.Ace' Hand))  		count = count + 1;  	if (HasCard (cardSuit' CardRank.King' Hand))  		count = count + 1;  	if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  		count = count - (1 / 2);  	if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  		count = count - (1 / 2);  	if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  		count = count - 1;  	if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  		count = count + (1 / 2);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (numberOfCardInSuit > 0) {  	// count +1 for card if its ace or king  	if (HasCard (cardSuit' CardRank.Ace' Hand))  		count = count + 1;  	if (HasCard (cardSuit' CardRank.King' Hand))  		count = count + 1;  	if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  		count = count - (1 / 2);  	if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  		count = count - (1 / 2);  	if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  		count = count - 1;  	if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  		count = count + (1 / 2);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (numberOfCardInSuit > 0) {  	// count +1 for card if its ace or king  	if (HasCard (cardSuit' CardRank.Ace' Hand))  		count = count + 1;  	if (HasCard (cardSuit' CardRank.King' Hand))  		count = count + 1;  	if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  		count = count - (1 / 2);  	if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  		count = count - (1 / 2);  	if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  		count = count - 1;  	if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  		count = count + (1 / 2);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (numberOfCardInSuit > 0) {  	// count +1 for card if its ace or king  	if (HasCard (cardSuit' CardRank.Ace' Hand))  		count = count + 1;  	if (HasCard (cardSuit' CardRank.King' Hand))  		count = count + 1;  	if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  		count = count - (1 / 2);  	if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  		count = count - (1 / 2);  	if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  		count = count - 1;  	if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  		count = count + (1 / 2);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (numberOfCardInSuit > 0) {  	// count +1 for card if its ace or king  	if (HasCard (cardSuit' CardRank.Ace' Hand))  		count = count + 1;  	if (HasCard (cardSuit' CardRank.King' Hand))  		count = count + 1;  	if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  		count = count - (1 / 2);  	if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  		count = count - (1 / 2);  	if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  		count = count - 1;  	if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  		count = count + (1 / 2);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (numberOfCardInSuit > 0) {  	// count +1 for card if its ace or king  	if (HasCard (cardSuit' CardRank.Ace' Hand))  		count = count + 1;  	if (HasCard (cardSuit' CardRank.King' Hand))  		count = count + 1;  	if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  		count = count - (1 / 2);  	if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  		count = count - (1 / 2);  	if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  		count = count - 1;  	if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  		count = count + (1 / 2);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (numberOfCardInSuit > 0) {  	// count +1 for card if its ace or king  	if (HasCard (cardSuit' CardRank.Ace' Hand))  		count = count + 1;  	if (HasCard (cardSuit' CardRank.King' Hand))  		count = count + 1;  	if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  		count = count - (1 / 2);  	if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  		count = count - 1;  	else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  		count = count - (1 / 2);  	if (HasCard (cardSuit' CardRank.King' Hand) && numberOfCardInSuit == 1)  		count = count - 1;  	if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  		count = count + (1 / 2);  }  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  	count = count - 1;  else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  	count = count - (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  	count = count - 1;  else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  	count = count - (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (RankBelow (cardSuit' Hand' CardRank.King) >= 4)  	count = count - 1;  else if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  	count = count - (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  	count = count - (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (RankBelow (cardSuit' Hand' CardRank.King) == 3)  	count = count - (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: count = count - (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  	count = count - 1;  else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  	count = count - (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  	count = count - 1;  else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  	count = count - (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (RankBelow (cardSuit' Hand' CardRank.Ace) >= 6)  	count = count - 1;  else if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  	count = count - (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  	count = count - (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (RankBelow (cardSuit' Hand' CardRank.Ace) == 5)  	count = count - (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: count = count - (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (HasCard (cardSuit' CardRank.Ace' Hand) && HasCard (cardSuit' CardRank.Queen' Hand))  	count = count + (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: count = count + (1 / 2);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (numberOfCardInSuit <= 2)  	ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (numberOfCardInSuit <= 2)  	ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: ShortSuitBid = ShortSuitBid + (3 - numberOfCardInSuit);  
Magic Number,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,Bid,The following statement contains a magic number: if (spadesCount > 0) {  	int spadesCountBaseRank = 15 - spadesCount;  	tempSpadesCount = RankAbove (CardSuit.Spades' Hand' (CardRank)spadesCountBaseRank);  	int R = numberOfMissingSpades (spadesCountBaseRank + 1);  	int tempSubstract = 0;  	if (R > 0)  		tempSubstract = ShortSuitBid - R;  	spadesBid = (tempSubstract >= ShortSuitBid) ? ShortSuitBid : tempSubstract;  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,Card,The following statement contains a magic number: for (int i = 0; i < 58; i++) {  	string name = "_" + i.ToString ();  	object O = Resources.ResourceManager.GetObject (name);  	cardImages.Add ((Image)O);  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,ToCardIndex,The following statement contains a magic number: switch (mode) {  case 0:  	/*CardMode.RankCollated*/cardNo = ((int)rank) * 4 + ((int)suit);  	break;  case 1:  	/* CardMode.SuitCollated */cardNo = 1 + ((int)rank) + 13 * ((int)suit);  	break;  default:  	cardNo = 0;  	break;  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,ToCardIndex,The following statement contains a magic number: switch (mode) {  case 0:  	/*CardMode.RankCollated*/cardNo = ((int)rank) * 4 + ((int)suit);  	break;  case 1:  	/* CardMode.SuitCollated */cardNo = 1 + ((int)rank) + 13 * ((int)suit);  	break;  default:  	cardNo = 0;  	break;  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,ToCardIndex,The following statement contains a magic number: cardNo = ((int)rank) * 4 + ((int)suit);  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,ToCardIndex,The following statement contains a magic number: cardNo = 1 + ((int)rank) + 13 * ((int)suit);  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,SuitFromCardIndex,The following statement contains a magic number: if (mode == (int)CardMode.SuitCollated && (cardIndex >= 1 && cardIndex <= 52)) {  	return (CardSuit)((cardIndex - 1) / 13);  }  else if (mode == (int)CardMode.RankCollated && (cardIndex >= 0 && cardIndex <= 51)) {  	return (CardSuit)(cardIndex % 4);  }  else {  	throw new ApplicationException ("Suite only valid to SuitCollated' RankCollated modes.");  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,SuitFromCardIndex,The following statement contains a magic number: if (mode == (int)CardMode.SuitCollated && (cardIndex >= 1 && cardIndex <= 52)) {  	return (CardSuit)((cardIndex - 1) / 13);  }  else if (mode == (int)CardMode.RankCollated && (cardIndex >= 0 && cardIndex <= 51)) {  	return (CardSuit)(cardIndex % 4);  }  else {  	throw new ApplicationException ("Suite only valid to SuitCollated' RankCollated modes.");  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,SuitFromCardIndex,The following statement contains a magic number: if (mode == (int)CardMode.SuitCollated && (cardIndex >= 1 && cardIndex <= 52)) {  	return (CardSuit)((cardIndex - 1) / 13);  }  else if (mode == (int)CardMode.RankCollated && (cardIndex >= 0 && cardIndex <= 51)) {  	return (CardSuit)(cardIndex % 4);  }  else {  	throw new ApplicationException ("Suite only valid to SuitCollated' RankCollated modes.");  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,SuitFromCardIndex,The following statement contains a magic number: if (mode == (int)CardMode.SuitCollated && (cardIndex >= 1 && cardIndex <= 52)) {  	return (CardSuit)((cardIndex - 1) / 13);  }  else if (mode == (int)CardMode.RankCollated && (cardIndex >= 0 && cardIndex <= 51)) {  	return (CardSuit)(cardIndex % 4);  }  else {  	throw new ApplicationException ("Suite only valid to SuitCollated' RankCollated modes.");  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,SuitFromCardIndex,The following statement contains a magic number: return (CardSuit)((cardIndex - 1) / 13);  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,SuitFromCardIndex,The following statement contains a magic number: if (mode == (int)CardMode.RankCollated && (cardIndex >= 0 && cardIndex <= 51)) {  	return (CardSuit)(cardIndex % 4);  }  else {  	throw new ApplicationException ("Suite only valid to SuitCollated' RankCollated modes.");  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,SuitFromCardIndex,The following statement contains a magic number: if (mode == (int)CardMode.RankCollated && (cardIndex >= 0 && cardIndex <= 51)) {  	return (CardSuit)(cardIndex % 4);  }  else {  	throw new ApplicationException ("Suite only valid to SuitCollated' RankCollated modes.");  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,SuitFromCardIndex,The following statement contains a magic number: return (CardSuit)(cardIndex % 4);  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,RankFromCardIndex,The following statement contains a magic number: if (mode == (int)CardMode.SuitCollated && (cardIndex >= 1 && cardIndex <= 52)) {  	return (CardRank)((cardIndex - 1) % 13);  }  else if (mode == (int)CardMode.RankCollated && (cardIndex >= 0 && cardIndex <= 51)) {  	return (CardRank)(cardIndex / 4);  }  else {  	throw new ApplicationException ("Rank only valid to SuitCollated' RankCollated modes.");  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,RankFromCardIndex,The following statement contains a magic number: if (mode == (int)CardMode.SuitCollated && (cardIndex >= 1 && cardIndex <= 52)) {  	return (CardRank)((cardIndex - 1) % 13);  }  else if (mode == (int)CardMode.RankCollated && (cardIndex >= 0 && cardIndex <= 51)) {  	return (CardRank)(cardIndex / 4);  }  else {  	throw new ApplicationException ("Rank only valid to SuitCollated' RankCollated modes.");  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,RankFromCardIndex,The following statement contains a magic number: if (mode == (int)CardMode.SuitCollated && (cardIndex >= 1 && cardIndex <= 52)) {  	return (CardRank)((cardIndex - 1) % 13);  }  else if (mode == (int)CardMode.RankCollated && (cardIndex >= 0 && cardIndex <= 51)) {  	return (CardRank)(cardIndex / 4);  }  else {  	throw new ApplicationException ("Rank only valid to SuitCollated' RankCollated modes.");  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,RankFromCardIndex,The following statement contains a magic number: if (mode == (int)CardMode.SuitCollated && (cardIndex >= 1 && cardIndex <= 52)) {  	return (CardRank)((cardIndex - 1) % 13);  }  else if (mode == (int)CardMode.RankCollated && (cardIndex >= 0 && cardIndex <= 51)) {  	return (CardRank)(cardIndex / 4);  }  else {  	throw new ApplicationException ("Rank only valid to SuitCollated' RankCollated modes.");  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,RankFromCardIndex,The following statement contains a magic number: return (CardRank)((cardIndex - 1) % 13);  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,RankFromCardIndex,The following statement contains a magic number: if (mode == (int)CardMode.RankCollated && (cardIndex >= 0 && cardIndex <= 51)) {  	return (CardRank)(cardIndex / 4);  }  else {  	throw new ApplicationException ("Rank only valid to SuitCollated' RankCollated modes.");  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,RankFromCardIndex,The following statement contains a magic number: if (mode == (int)CardMode.RankCollated && (cardIndex >= 0 && cardIndex <= 51)) {  	return (CardRank)(cardIndex / 4);  }  else {  	throw new ApplicationException ("Rank only valid to SuitCollated' RankCollated modes.");  }  
Magic Number,Cards,Card,C:\repos\nishesj_callbreak\Lib\Card.cs,RankFromCardIndex,The following statement contains a magic number: return (CardRank)(cardIndex / 4);  
Magic Number,Cards,ChooseDeck,C:\repos\nishesj_callbreak\ChooseDeck.cs,ChooseDeck_Load,The following statement contains a magic number: foreach (CardBack cb in Enum.GetValues (typeof(CardBack))) {  	PictureBoxList.Add (new PictureBox ());  	int lastIndex = PictureBoxList.Count - 1;  	//set property  	PictureBoxList [lastIndex].Tag = cb;  	PictureBoxList [lastIndex].SizeMode = PictureBoxSizeMode.AutoSize;  	PictureBoxList [lastIndex].Height = 120;  	PictureBoxList [lastIndex].Cursor = Cursors.Hand;  }  
Magic Number,Cards,ChooseDeck,C:\repos\nishesj_callbreak\ChooseDeck.cs,ChooseDeck_Load,The following statement contains a magic number: PictureBoxList [lastIndex].Height = 120;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseClick,The following statement contains a magic number: if (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count > 0) {  	if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  		// check for y coordinate   		if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  			//valid coordinate  			// calculate card index clicked  			// 15 is the width of the card overlapping each other   			int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  			// if index is more than last index then make it last index  			if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  				index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  			}  			SpadesCard c = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  			c.MoveUp = true;  			gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index] = c;  			this.Invalidate ();  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseClick,The following statement contains a magic number: if (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count > 0) {  	if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  		// check for y coordinate   		if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  			//valid coordinate  			// calculate card index clicked  			// 15 is the width of the card overlapping each other   			int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  			// if index is more than last index then make it last index  			if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  				index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  			}  			SpadesCard c = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  			c.MoveUp = true;  			gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index] = c;  			this.Invalidate ();  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseClick,The following statement contains a magic number: if (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count > 0) {  	if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  		// check for y coordinate   		if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  			//valid coordinate  			// calculate card index clicked  			// 15 is the width of the card overlapping each other   			int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  			// if index is more than last index then make it last index  			if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  				index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  			}  			SpadesCard c = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  			c.MoveUp = true;  			gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index] = c;  			this.Invalidate ();  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseClick,The following statement contains a magic number: if (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count > 0) {  	if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  		// check for y coordinate   		if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  			//valid coordinate  			// calculate card index clicked  			// 15 is the width of the card overlapping each other   			int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  			// if index is more than last index then make it last index  			if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  				index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  			}  			SpadesCard c = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  			c.MoveUp = true;  			gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index] = c;  			this.Invalidate ();  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseClick,The following statement contains a magic number: if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  	// check for y coordinate   	if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  		//valid coordinate  		// calculate card index clicked  		// 15 is the width of the card overlapping each other   		int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  		// if index is more than last index then make it last index  		if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  			index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  		}  		SpadesCard c = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  		c.MoveUp = true;  		gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index] = c;  		this.Invalidate ();  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseClick,The following statement contains a magic number: if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  	// check for y coordinate   	if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  		//valid coordinate  		// calculate card index clicked  		// 15 is the width of the card overlapping each other   		int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  		// if index is more than last index then make it last index  		if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  			index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  		}  		SpadesCard c = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  		c.MoveUp = true;  		gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index] = c;  		this.Invalidate ();  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseClick,The following statement contains a magic number: if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  	// check for y coordinate   	if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  		//valid coordinate  		// calculate card index clicked  		// 15 is the width of the card overlapping each other   		int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  		// if index is more than last index then make it last index  		if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  			index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  		}  		SpadesCard c = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  		c.MoveUp = true;  		gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index] = c;  		this.Invalidate ();  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseClick,The following statement contains a magic number: if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  	// check for y coordinate   	if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  		//valid coordinate  		// calculate card index clicked  		// 15 is the width of the card overlapping each other   		int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  		// if index is more than last index then make it last index  		if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  			index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  		}  		SpadesCard c = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  		c.MoveUp = true;  		gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index] = c;  		this.Invalidate ();  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseClick,The following statement contains a magic number: if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  	//valid coordinate  	// calculate card index clicked  	// 15 is the width of the card overlapping each other   	int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  	// if index is more than last index then make it last index  	if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  		index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  	}  	SpadesCard c = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  	c.MoveUp = true;  	gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index] = c;  	this.Invalidate ();  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseClick,The following statement contains a magic number: if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  	//valid coordinate  	// calculate card index clicked  	// 15 is the width of the card overlapping each other   	int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  	// if index is more than last index then make it last index  	if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  		index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  	}  	SpadesCard c = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  	c.MoveUp = true;  	gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index] = c;  	this.Invalidate ();  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (cardCount > 0 && IsAnimating == false) {  	if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  		// check for y coordinate   		if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  			//valid coordinate  			// calculate card index clicked   			int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  			// if index is more than last index then make it last index  			if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  				index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  			}  			if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  				// check if its a  valid card  				// place the card in pot card  				SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  				// remove from hand  				gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  				potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  				potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  				gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  				this.updateTurn (activePlayerId);  			}  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (cardCount > 0 && IsAnimating == false) {  	if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  		// check for y coordinate   		if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  			//valid coordinate  			// calculate card index clicked   			int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  			// if index is more than last index then make it last index  			if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  				index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  			}  			if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  				// check if its a  valid card  				// place the card in pot card  				SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  				// remove from hand  				gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  				potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  				potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  				gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  				this.updateTurn (activePlayerId);  			}  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (cardCount > 0 && IsAnimating == false) {  	if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  		// check for y coordinate   		if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  			//valid coordinate  			// calculate card index clicked   			int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  			// if index is more than last index then make it last index  			if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  				index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  			}  			if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  				// check if its a  valid card  				// place the card in pot card  				SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  				// remove from hand  				gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  				potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  				potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  				gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  				this.updateTurn (activePlayerId);  			}  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (cardCount > 0 && IsAnimating == false) {  	if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  		// check for y coordinate   		if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  			//valid coordinate  			// calculate card index clicked   			int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  			// if index is more than last index then make it last index  			if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  				index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  			}  			if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  				// check if its a  valid card  				// place the card in pot card  				SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  				// remove from hand  				gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  				potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  				potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  				gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  				this.updateTurn (activePlayerId);  			}  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (cardCount > 0 && IsAnimating == false) {  	if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  		// check for y coordinate   		if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  			//valid coordinate  			// calculate card index clicked   			int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  			// if index is more than last index then make it last index  			if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  				index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  			}  			if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  				// check if its a  valid card  				// place the card in pot card  				SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  				// remove from hand  				gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  				potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  				potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  				gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  				this.updateTurn (activePlayerId);  			}  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (cardCount > 0 && IsAnimating == false) {  	if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  		// check for y coordinate   		if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  			//valid coordinate  			// calculate card index clicked   			int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  			// if index is more than last index then make it last index  			if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  				index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  			}  			if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  				// check if its a  valid card  				// place the card in pot card  				SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  				// remove from hand  				gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  				potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  				potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  				gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  				this.updateTurn (activePlayerId);  			}  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  	// check for y coordinate   	if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  		//valid coordinate  		// calculate card index clicked   		int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  		// if index is more than last index then make it last index  		if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  			index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  		}  		if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  			// check if its a  valid card  			// place the card in pot card  			SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  			// remove from hand  			gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  			potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  			potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  			gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  			this.updateTurn (activePlayerId);  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  	// check for y coordinate   	if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  		//valid coordinate  		// calculate card index clicked   		int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  		// if index is more than last index then make it last index  		if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  			index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  		}  		if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  			// check if its a  valid card  			// place the card in pot card  			SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  			// remove from hand  			gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  			potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  			potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  			gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  			this.updateTurn (activePlayerId);  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  	// check for y coordinate   	if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  		//valid coordinate  		// calculate card index clicked   		int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  		// if index is more than last index then make it last index  		if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  			index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  		}  		if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  			// check if its a  valid card  			// place the card in pot card  			SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  			// remove from hand  			gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  			potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  			potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  			gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  			this.updateTurn (activePlayerId);  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  	// check for y coordinate   	if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  		//valid coordinate  		// calculate card index clicked   		int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  		// if index is more than last index then make it last index  		if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  			index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  		}  		if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  			// check if its a  valid card  			// place the card in pot card  			SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  			// remove from hand  			gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  			potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  			potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  			gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  			this.updateTurn (activePlayerId);  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  	// check for y coordinate   	if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  		//valid coordinate  		// calculate card index clicked   		int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  		// if index is more than last index then make it last index  		if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  			index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  		}  		if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  			// check if its a  valid card  			// place the card in pot card  			SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  			// remove from hand  			gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  			potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  			potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  			gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  			this.updateTurn (activePlayerId);  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (mouseX >= playerPositions [activePlayerId].x && mouseX <= ((playerPositions [activePlayerId].x + 56) + (15 * cardCount))) {  	// check for y coordinate   	if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  		//valid coordinate  		// calculate card index clicked   		int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  		// if index is more than last index then make it last index  		if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  			index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  		}  		if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  			// check if its a  valid card  			// place the card in pot card  			SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  			// remove from hand  			gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  			potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  			potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  			gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  			this.updateTurn (activePlayerId);  		}  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  	//valid coordinate  	// calculate card index clicked   	int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  	// if index is more than last index then make it last index  	if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  		index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  	}  	if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  		// check if its a  valid card  		// place the card in pot card  		SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  		// remove from hand  		gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  		potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  		potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  		gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  		this.updateTurn (activePlayerId);  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  	//valid coordinate  	// calculate card index clicked   	int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  	// if index is more than last index then make it last index  	if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  		index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  	}  	if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  		// check if its a  valid card  		// place the card in pot card  		SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  		// remove from hand  		gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  		potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  		potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  		gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  		this.updateTurn (activePlayerId);  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  	//valid coordinate  	// calculate card index clicked   	int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  	// if index is more than last index then make it last index  	if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  		index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  	}  	if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  		// check if its a  valid card  		// place the card in pot card  		SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  		// remove from hand  		gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  		potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  		potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  		gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  		this.updateTurn (activePlayerId);  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (mouseY >= playerPositions [activePlayerId].y && mouseY <= (playerPositions [activePlayerId].y + 97)) {  	//valid coordinate  	// calculate card index clicked   	int index = (int)(mouseX - playerPositions [activePlayerId].x) / 15;  	// if index is more than last index then make it last index  	if (index > (gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1)) {  		index = gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.Count - 1;  	}  	if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  		// check if its a  valid card  		// place the card in pot card  		SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  		// remove from hand  		gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  		potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  		potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  		gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  		this.updateTurn (activePlayerId);  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  	// check if its a  valid card  	// place the card in pot card  	SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  	// remove from hand  	gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  	potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  	potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  	gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  	this.updateTurn (activePlayerId);  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: if (GameRule.isValidCard (gameData.CurrentPlayerList [activePlayerId]' (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index]' gameData.CurrentPot)) {  	// check if its a  valid card  	// place the card in pot card  	SpadesCard potCard = (SpadesCard)gameData.CurrentPlayerList [activePlayerId].Hand.CardPile [index];  	// remove from hand  	gameData.CurrentPlayerList [activePlayerId].Hand.CardPile.RemoveAt (index);  	potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  	potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  	gameData.CurrentPot.AddPot (potCard' gameData.CurrentPlayerList [activePlayerId]);  	this.updateTurn (activePlayerId);  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: potCard.CardPositionX = playerPositions [activePlayerId].x + 80;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Main_MouseDoubleClick,The following statement contains a magic number: potCard.CardPositionY = playerPositions [activePlayerId].y - 120;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,updateTurn,The following statement contains a magic number: if (nextTurn >= 4) {  	nextTurn = 0;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Initialize,The following statement contains a magic number: this.animationTimer.Interval = 5;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	for (int j = 0; j < 4; j++) {  		score [i' j] = 0;  		// initialize score to null  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	for (int j = 0; j < 4; j++) {  		score [i' j] = 0;  		// initialize score to null  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Initialize,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	score [i' j] = 0;  	// initialize score to null  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: if (animationCounter == 40) {  	if (animationSpeed == AnimationSpeed.FAST)  		Thread.Sleep (1000);  	else if (animationSpeed == AnimationSpeed.NORMAL)  		Thread.Sleep (1500);  	else if (animationSpeed == AnimationSpeed.SLOW)  		Thread.Sleep (2000);  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: if (animationCounter == 40) {  	if (animationSpeed == AnimationSpeed.FAST)  		Thread.Sleep (1000);  	else if (animationSpeed == AnimationSpeed.NORMAL)  		Thread.Sleep (1500);  	else if (animationSpeed == AnimationSpeed.SLOW)  		Thread.Sleep (2000);  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: if (animationCounter == 40) {  	if (animationSpeed == AnimationSpeed.FAST)  		Thread.Sleep (1000);  	else if (animationSpeed == AnimationSpeed.NORMAL)  		Thread.Sleep (1500);  	else if (animationSpeed == AnimationSpeed.SLOW)  		Thread.Sleep (2000);  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: if (animationCounter == 40) {  	if (animationSpeed == AnimationSpeed.FAST)  		Thread.Sleep (1000);  	else if (animationSpeed == AnimationSpeed.NORMAL)  		Thread.Sleep (1500);  	else if (animationSpeed == AnimationSpeed.SLOW)  		Thread.Sleep (2000);  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: if (animationSpeed == AnimationSpeed.FAST)  	Thread.Sleep (1000);  else if (animationSpeed == AnimationSpeed.NORMAL)  	Thread.Sleep (1500);  else if (animationSpeed == AnimationSpeed.SLOW)  	Thread.Sleep (2000);  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: if (animationSpeed == AnimationSpeed.FAST)  	Thread.Sleep (1000);  else if (animationSpeed == AnimationSpeed.NORMAL)  	Thread.Sleep (1500);  else if (animationSpeed == AnimationSpeed.SLOW)  	Thread.Sleep (2000);  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: if (animationSpeed == AnimationSpeed.FAST)  	Thread.Sleep (1000);  else if (animationSpeed == AnimationSpeed.NORMAL)  	Thread.Sleep (1500);  else if (animationSpeed == AnimationSpeed.SLOW)  	Thread.Sleep (2000);  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: if (animationSpeed == AnimationSpeed.NORMAL)  	Thread.Sleep (1500);  else if (animationSpeed == AnimationSpeed.SLOW)  	Thread.Sleep (2000);  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: if (animationSpeed == AnimationSpeed.NORMAL)  	Thread.Sleep (1500);  else if (animationSpeed == AnimationSpeed.SLOW)  	Thread.Sleep (2000);  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: Thread.Sleep (1500);  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: if (animationSpeed == AnimationSpeed.SLOW)  	Thread.Sleep (2000);  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: foreach (SpadesCard card in gameData.CurrentPot.CardPile) {  	// make all cards go to winner   	switch (playerPositions [gameData.HandWinnerID].seat) {  	case "S":  		card.CardPositionY = card.CardPositionY + 80;  		break;  	case "W":  		card.CardPositionX = card.CardPositionX - 80;  		break;  	case "N":  		card.CardPositionY = card.CardPositionY - 80;  		break;  	case "E":  		card.CardPositionX = card.CardPositionX + 80;  		break;  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: foreach (SpadesCard card in gameData.CurrentPot.CardPile) {  	// make all cards go to winner   	switch (playerPositions [gameData.HandWinnerID].seat) {  	case "S":  		card.CardPositionY = card.CardPositionY + 80;  		break;  	case "W":  		card.CardPositionX = card.CardPositionX - 80;  		break;  	case "N":  		card.CardPositionY = card.CardPositionY - 80;  		break;  	case "E":  		card.CardPositionX = card.CardPositionX + 80;  		break;  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: foreach (SpadesCard card in gameData.CurrentPot.CardPile) {  	// make all cards go to winner   	switch (playerPositions [gameData.HandWinnerID].seat) {  	case "S":  		card.CardPositionY = card.CardPositionY + 80;  		break;  	case "W":  		card.CardPositionX = card.CardPositionX - 80;  		break;  	case "N":  		card.CardPositionY = card.CardPositionY - 80;  		break;  	case "E":  		card.CardPositionX = card.CardPositionX + 80;  		break;  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: foreach (SpadesCard card in gameData.CurrentPot.CardPile) {  	// make all cards go to winner   	switch (playerPositions [gameData.HandWinnerID].seat) {  	case "S":  		card.CardPositionY = card.CardPositionY + 80;  		break;  	case "W":  		card.CardPositionX = card.CardPositionX - 80;  		break;  	case "N":  		card.CardPositionY = card.CardPositionY - 80;  		break;  	case "E":  		card.CardPositionX = card.CardPositionX + 80;  		break;  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: switch (playerPositions [gameData.HandWinnerID].seat) {  case "S":  	card.CardPositionY = card.CardPositionY + 80;  	break;  case "W":  	card.CardPositionX = card.CardPositionX - 80;  	break;  case "N":  	card.CardPositionY = card.CardPositionY - 80;  	break;  case "E":  	card.CardPositionX = card.CardPositionX + 80;  	break;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: switch (playerPositions [gameData.HandWinnerID].seat) {  case "S":  	card.CardPositionY = card.CardPositionY + 80;  	break;  case "W":  	card.CardPositionX = card.CardPositionX - 80;  	break;  case "N":  	card.CardPositionY = card.CardPositionY - 80;  	break;  case "E":  	card.CardPositionX = card.CardPositionX + 80;  	break;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: switch (playerPositions [gameData.HandWinnerID].seat) {  case "S":  	card.CardPositionY = card.CardPositionY + 80;  	break;  case "W":  	card.CardPositionX = card.CardPositionX - 80;  	break;  case "N":  	card.CardPositionY = card.CardPositionY - 80;  	break;  case "E":  	card.CardPositionX = card.CardPositionX + 80;  	break;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: switch (playerPositions [gameData.HandWinnerID].seat) {  case "S":  	card.CardPositionY = card.CardPositionY + 80;  	break;  case "W":  	card.CardPositionX = card.CardPositionX - 80;  	break;  case "N":  	card.CardPositionY = card.CardPositionY - 80;  	break;  case "E":  	card.CardPositionX = card.CardPositionX + 80;  	break;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: card.CardPositionY = card.CardPositionY + 80;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: card.CardPositionX = card.CardPositionX - 80;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: card.CardPositionY = card.CardPositionY - 80;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: card.CardPositionX = card.CardPositionX + 80;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: if (animationCounter == 0) {  	animationTimer.Stop ();  	// calculate Score  	gameData.CurrentPlayerList [gameData.HandWinnerID].TotalTrick++;  	// update the trick of the player that has won the hand  	// do hand counter increment here  	gameData.HandCounter++;  	// end of the round   	if (gameData.HandCounter == 13) {  		// store score   		//  int roundIndex = CurrentRound - 1;  		int roundIndex = gameData.CurrentRound - 1;  		CalculateScore (roundIndex);  		updateRoundStarter (gameData.RoundStarter);  		gameData.CurrentRound++;  		// increase the round number  		if (gameData.CurrentRound > (gameRounds + 1)) {  			// this is the finsh of the game   			GameFinished ();  			return;  		}  		gameData.GameState = GameState.ROUNDEND;  		updateGameState (gameData);  		return;  	}  	IsAnimating = false;  	gameData.CurrentPot.ClearPot ();  	// clear the pot for next round  	updateTurn (gameData.HandWinnerID - 1);  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following statement contains a magic number: if (gameData.HandCounter == 13) {  	// store score   	//  int roundIndex = CurrentRound - 1;  	int roundIndex = gameData.CurrentRound - 1;  	CalculateScore (roundIndex);  	updateRoundStarter (gameData.RoundStarter);  	gameData.CurrentRound++;  	// increase the round number  	if (gameData.CurrentRound > (gameRounds + 1)) {  		// this is the finsh of the game   		GameFinished ();  		return;  	}  	gameData.GameState = GameState.ROUNDEND;  	updateGameState (gameData);  	return;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,updateRoundStarter,The following statement contains a magic number: if (gameData.RoundStarter > 3)  	gameData.RoundStarter = 0;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,ResetGame,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	for (int j = 0; j < 4; j++) {  		gameData.score [i' j] = 0;  		// initialize score to null  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,ResetGame,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	for (int j = 0; j < 4; j++) {  		gameData.score [i' j] = 0;  		// initialize score to null  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,ResetGame,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	gameData.score [i' j] = 0;  	// initialize score to null  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,CalculateScore,The following statement contains a magic number: foreach (player p in gameData.CurrentPlayerList) {  	if (p.TotalBid > p.TotalTrick) {  		// player has negative hand   		gameData.score [roundIndex' p.ID] = 0 - p.TotalBid;  		// negative  	}  	else if (p.TotalBid == p.TotalTrick) {  		gameData.score [roundIndex' p.ID] = p.TotalBid;  	}  	else {  		// has greater number of tricks than the bid add as float   		float difference = p.TotalTrick - p.TotalBid;  		float point = difference / 10;  		gameData.score [roundIndex' p.ID] = (float)Math.Round ((p.TotalBid + point)' 1);  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,CalculateScore,The following statement contains a magic number: if (p.TotalBid > p.TotalTrick) {  	// player has negative hand   	gameData.score [roundIndex' p.ID] = 0 - p.TotalBid;  	// negative  }  else if (p.TotalBid == p.TotalTrick) {  	gameData.score [roundIndex' p.ID] = p.TotalBid;  }  else {  	// has greater number of tricks than the bid add as float   	float difference = p.TotalTrick - p.TotalBid;  	float point = difference / 10;  	gameData.score [roundIndex' p.ID] = (float)Math.Round ((p.TotalBid + point)' 1);  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,CalculateScore,The following statement contains a magic number: if (p.TotalBid == p.TotalTrick) {  	gameData.score [roundIndex' p.ID] = p.TotalBid;  }  else {  	// has greater number of tricks than the bid add as float   	float difference = p.TotalTrick - p.TotalBid;  	float point = difference / 10;  	gameData.score [roundIndex' p.ID] = (float)Math.Round ((p.TotalBid + point)' 1);  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Pot_PotAdd,The following statement contains a magic number: if (gameData.CurrentPot.CardPile.Count == 4) {  	lock (this) {  		IsAnimating = true;  		animationCounter = 40;  		this.animationTimer.Start ();  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Pot_PotAdd,The following statement contains a magic number: if (gameData.CurrentPot.CardPile.Count == 4) {  	lock (this) {  		IsAnimating = true;  		animationCounter = 40;  		this.animationTimer.Start ();  	}  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Pot_PotAdd,The following statement contains a magic number: lock (this) {  	IsAnimating = true;  	animationCounter = 40;  	this.animationTimer.Start ();  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,Pot_PotAdd,The following statement contains a magic number: animationCounter = 40;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (gameData.CurrentPlayerList [gameData.ActivePlayerId] is AIPlayer) {  	// make a computer move  	// can control speed of the movement here // fast or slow computer moves  	// Thread.Sleep(10);  	Thread.Sleep (Convert.ToInt32 (animationSpeed) * 50);  	SpadesCard card = gameData.CurrentPlayerList [gameData.ActivePlayerId].makeMove (gameData);  	if (playerPositions [gameData.ActivePlayerId].seat == "N") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "W") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 80;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "S") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y - 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "E") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x - 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 90;  	}  	gameData.CurrentPot.AddPot (card' gameData.CurrentPlayerList [gameData.ActivePlayerId]);  	gameData.CurrentPlayerList [gameData.ActivePlayerId].Hand.CardPile.Remove (card);  	string msg = (gameData.ActivePlayerId + " Played " + card.Rank + " of " + card.Suit + "\r\n");  	this.Invalidate ();  	this.Update ();  	updateTurn (gameData.ActivePlayerId);  }  else {  	return;  	// wait for human move   }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (gameData.CurrentPlayerList [gameData.ActivePlayerId] is AIPlayer) {  	// make a computer move  	// can control speed of the movement here // fast or slow computer moves  	// Thread.Sleep(10);  	Thread.Sleep (Convert.ToInt32 (animationSpeed) * 50);  	SpadesCard card = gameData.CurrentPlayerList [gameData.ActivePlayerId].makeMove (gameData);  	if (playerPositions [gameData.ActivePlayerId].seat == "N") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "W") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 80;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "S") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y - 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "E") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x - 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 90;  	}  	gameData.CurrentPot.AddPot (card' gameData.CurrentPlayerList [gameData.ActivePlayerId]);  	gameData.CurrentPlayerList [gameData.ActivePlayerId].Hand.CardPile.Remove (card);  	string msg = (gameData.ActivePlayerId + " Played " + card.Rank + " of " + card.Suit + "\r\n");  	this.Invalidate ();  	this.Update ();  	updateTurn (gameData.ActivePlayerId);  }  else {  	return;  	// wait for human move   }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (gameData.CurrentPlayerList [gameData.ActivePlayerId] is AIPlayer) {  	// make a computer move  	// can control speed of the movement here // fast or slow computer moves  	// Thread.Sleep(10);  	Thread.Sleep (Convert.ToInt32 (animationSpeed) * 50);  	SpadesCard card = gameData.CurrentPlayerList [gameData.ActivePlayerId].makeMove (gameData);  	if (playerPositions [gameData.ActivePlayerId].seat == "N") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "W") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 80;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "S") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y - 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "E") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x - 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 90;  	}  	gameData.CurrentPot.AddPot (card' gameData.CurrentPlayerList [gameData.ActivePlayerId]);  	gameData.CurrentPlayerList [gameData.ActivePlayerId].Hand.CardPile.Remove (card);  	string msg = (gameData.ActivePlayerId + " Played " + card.Rank + " of " + card.Suit + "\r\n");  	this.Invalidate ();  	this.Update ();  	updateTurn (gameData.ActivePlayerId);  }  else {  	return;  	// wait for human move   }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (gameData.CurrentPlayerList [gameData.ActivePlayerId] is AIPlayer) {  	// make a computer move  	// can control speed of the movement here // fast or slow computer moves  	// Thread.Sleep(10);  	Thread.Sleep (Convert.ToInt32 (animationSpeed) * 50);  	SpadesCard card = gameData.CurrentPlayerList [gameData.ActivePlayerId].makeMove (gameData);  	if (playerPositions [gameData.ActivePlayerId].seat == "N") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "W") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 80;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "S") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y - 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "E") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x - 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 90;  	}  	gameData.CurrentPot.AddPot (card' gameData.CurrentPlayerList [gameData.ActivePlayerId]);  	gameData.CurrentPlayerList [gameData.ActivePlayerId].Hand.CardPile.Remove (card);  	string msg = (gameData.ActivePlayerId + " Played " + card.Rank + " of " + card.Suit + "\r\n");  	this.Invalidate ();  	this.Update ();  	updateTurn (gameData.ActivePlayerId);  }  else {  	return;  	// wait for human move   }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (gameData.CurrentPlayerList [gameData.ActivePlayerId] is AIPlayer) {  	// make a computer move  	// can control speed of the movement here // fast or slow computer moves  	// Thread.Sleep(10);  	Thread.Sleep (Convert.ToInt32 (animationSpeed) * 50);  	SpadesCard card = gameData.CurrentPlayerList [gameData.ActivePlayerId].makeMove (gameData);  	if (playerPositions [gameData.ActivePlayerId].seat == "N") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "W") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 80;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "S") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y - 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "E") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x - 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 90;  	}  	gameData.CurrentPot.AddPot (card' gameData.CurrentPlayerList [gameData.ActivePlayerId]);  	gameData.CurrentPlayerList [gameData.ActivePlayerId].Hand.CardPile.Remove (card);  	string msg = (gameData.ActivePlayerId + " Played " + card.Rank + " of " + card.Suit + "\r\n");  	this.Invalidate ();  	this.Update ();  	updateTurn (gameData.ActivePlayerId);  }  else {  	return;  	// wait for human move   }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (gameData.CurrentPlayerList [gameData.ActivePlayerId] is AIPlayer) {  	// make a computer move  	// can control speed of the movement here // fast or slow computer moves  	// Thread.Sleep(10);  	Thread.Sleep (Convert.ToInt32 (animationSpeed) * 50);  	SpadesCard card = gameData.CurrentPlayerList [gameData.ActivePlayerId].makeMove (gameData);  	if (playerPositions [gameData.ActivePlayerId].seat == "N") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "W") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 80;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "S") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y - 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "E") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x - 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 90;  	}  	gameData.CurrentPot.AddPot (card' gameData.CurrentPlayerList [gameData.ActivePlayerId]);  	gameData.CurrentPlayerList [gameData.ActivePlayerId].Hand.CardPile.Remove (card);  	string msg = (gameData.ActivePlayerId + " Played " + card.Rank + " of " + card.Suit + "\r\n");  	this.Invalidate ();  	this.Update ();  	updateTurn (gameData.ActivePlayerId);  }  else {  	return;  	// wait for human move   }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (gameData.CurrentPlayerList [gameData.ActivePlayerId] is AIPlayer) {  	// make a computer move  	// can control speed of the movement here // fast or slow computer moves  	// Thread.Sleep(10);  	Thread.Sleep (Convert.ToInt32 (animationSpeed) * 50);  	SpadesCard card = gameData.CurrentPlayerList [gameData.ActivePlayerId].makeMove (gameData);  	if (playerPositions [gameData.ActivePlayerId].seat == "N") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "W") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 80;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "S") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y - 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "E") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x - 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 90;  	}  	gameData.CurrentPot.AddPot (card' gameData.CurrentPlayerList [gameData.ActivePlayerId]);  	gameData.CurrentPlayerList [gameData.ActivePlayerId].Hand.CardPile.Remove (card);  	string msg = (gameData.ActivePlayerId + " Played " + card.Rank + " of " + card.Suit + "\r\n");  	this.Invalidate ();  	this.Update ();  	updateTurn (gameData.ActivePlayerId);  }  else {  	return;  	// wait for human move   }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (gameData.CurrentPlayerList [gameData.ActivePlayerId] is AIPlayer) {  	// make a computer move  	// can control speed of the movement here // fast or slow computer moves  	// Thread.Sleep(10);  	Thread.Sleep (Convert.ToInt32 (animationSpeed) * 50);  	SpadesCard card = gameData.CurrentPlayerList [gameData.ActivePlayerId].makeMove (gameData);  	if (playerPositions [gameData.ActivePlayerId].seat == "N") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "W") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 80;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "S") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y - 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "E") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x - 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 90;  	}  	gameData.CurrentPot.AddPot (card' gameData.CurrentPlayerList [gameData.ActivePlayerId]);  	gameData.CurrentPlayerList [gameData.ActivePlayerId].Hand.CardPile.Remove (card);  	string msg = (gameData.ActivePlayerId + " Played " + card.Rank + " of " + card.Suit + "\r\n");  	this.Invalidate ();  	this.Update ();  	updateTurn (gameData.ActivePlayerId);  }  else {  	return;  	// wait for human move   }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (gameData.CurrentPlayerList [gameData.ActivePlayerId] is AIPlayer) {  	// make a computer move  	// can control speed of the movement here // fast or slow computer moves  	// Thread.Sleep(10);  	Thread.Sleep (Convert.ToInt32 (animationSpeed) * 50);  	SpadesCard card = gameData.CurrentPlayerList [gameData.ActivePlayerId].makeMove (gameData);  	if (playerPositions [gameData.ActivePlayerId].seat == "N") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "W") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 80;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "S") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y - 120;  	}  	if (playerPositions [gameData.ActivePlayerId].seat == "E") {  		card.CardPositionX = playerPositions [gameData.ActivePlayerId].x - 180;  		card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 90;  	}  	gameData.CurrentPot.AddPot (card' gameData.CurrentPlayerList [gameData.ActivePlayerId]);  	gameData.CurrentPlayerList [gameData.ActivePlayerId].Hand.CardPile.Remove (card);  	string msg = (gameData.ActivePlayerId + " Played " + card.Rank + " of " + card.Suit + "\r\n");  	this.Invalidate ();  	this.Update ();  	updateTurn (gameData.ActivePlayerId);  }  else {  	return;  	// wait for human move   }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: Thread.Sleep (Convert.ToInt32 (animationSpeed) * 50);  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (playerPositions [gameData.ActivePlayerId].seat == "N") {  	card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  	card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 120;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (playerPositions [gameData.ActivePlayerId].seat == "N") {  	card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  	card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 120;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 120;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (playerPositions [gameData.ActivePlayerId].seat == "W") {  	card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 180;  	card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 80;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (playerPositions [gameData.ActivePlayerId].seat == "W") {  	card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 180;  	card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 80;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 180;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 80;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (playerPositions [gameData.ActivePlayerId].seat == "S") {  	card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  	card.CardPositionY = playerPositions [gameData.ActivePlayerId].y - 120;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (playerPositions [gameData.ActivePlayerId].seat == "S") {  	card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  	card.CardPositionY = playerPositions [gameData.ActivePlayerId].y - 120;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: card.CardPositionX = playerPositions [gameData.ActivePlayerId].x + 80;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: card.CardPositionY = playerPositions [gameData.ActivePlayerId].y - 120;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (playerPositions [gameData.ActivePlayerId].seat == "E") {  	card.CardPositionX = playerPositions [gameData.ActivePlayerId].x - 180;  	card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 90;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: if (playerPositions [gameData.ActivePlayerId].seat == "E") {  	card.CardPositionX = playerPositions [gameData.ActivePlayerId].x - 180;  	card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 90;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: card.CardPositionX = playerPositions [gameData.ActivePlayerId].x - 180;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startTurn,The following statement contains a magic number: card.CardPositionY = playerPositions [gameData.ActivePlayerId].y + 90;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayers,The following statement contains a magic number: for (int id = 0; id < 4; id++) {  	isHuman = (id == 0) ? true : false;  	// if id = 0 make it a human player else AI player  	if (isHuman) {  		HumanPlayer p = new HumanPlayer (id);  		gameData.CurrentPlayerList.Add (p);  	}  	else  		gameData.CurrentPlayerList.Add (new AIPlayer (id));  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	playerPositions.Add (new playerPosition ());  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	playerPosition Position = new playerPosition ();  	if (StartPosition > 3)  		StartPosition = 0;  	if (i == 0) {  		Position.seat = "S";  		Position.x = 175;  		Position.y = 350;  	}  	if (i == 1) {  		Position.seat = "W";  		Position.x = 20;  		Position.y = 100;  	}  	if (i == 2) {  		Position.seat = "N";  		Position.x = 175;  		Position.y = 30;  	}  	if (i == 3) {  		Position.seat = "E";  		Position.x = 480;  		Position.y = 100;  	}  	playerPositions [StartPosition] = Position;  	StartPosition++;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	playerPosition Position = new playerPosition ();  	if (StartPosition > 3)  		StartPosition = 0;  	if (i == 0) {  		Position.seat = "S";  		Position.x = 175;  		Position.y = 350;  	}  	if (i == 1) {  		Position.seat = "W";  		Position.x = 20;  		Position.y = 100;  	}  	if (i == 2) {  		Position.seat = "N";  		Position.x = 175;  		Position.y = 30;  	}  	if (i == 3) {  		Position.seat = "E";  		Position.x = 480;  		Position.y = 100;  	}  	playerPositions [StartPosition] = Position;  	StartPosition++;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	playerPosition Position = new playerPosition ();  	if (StartPosition > 3)  		StartPosition = 0;  	if (i == 0) {  		Position.seat = "S";  		Position.x = 175;  		Position.y = 350;  	}  	if (i == 1) {  		Position.seat = "W";  		Position.x = 20;  		Position.y = 100;  	}  	if (i == 2) {  		Position.seat = "N";  		Position.x = 175;  		Position.y = 30;  	}  	if (i == 3) {  		Position.seat = "E";  		Position.x = 480;  		Position.y = 100;  	}  	playerPositions [StartPosition] = Position;  	StartPosition++;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	playerPosition Position = new playerPosition ();  	if (StartPosition > 3)  		StartPosition = 0;  	if (i == 0) {  		Position.seat = "S";  		Position.x = 175;  		Position.y = 350;  	}  	if (i == 1) {  		Position.seat = "W";  		Position.x = 20;  		Position.y = 100;  	}  	if (i == 2) {  		Position.seat = "N";  		Position.x = 175;  		Position.y = 30;  	}  	if (i == 3) {  		Position.seat = "E";  		Position.x = 480;  		Position.y = 100;  	}  	playerPositions [StartPosition] = Position;  	StartPosition++;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	playerPosition Position = new playerPosition ();  	if (StartPosition > 3)  		StartPosition = 0;  	if (i == 0) {  		Position.seat = "S";  		Position.x = 175;  		Position.y = 350;  	}  	if (i == 1) {  		Position.seat = "W";  		Position.x = 20;  		Position.y = 100;  	}  	if (i == 2) {  		Position.seat = "N";  		Position.x = 175;  		Position.y = 30;  	}  	if (i == 3) {  		Position.seat = "E";  		Position.x = 480;  		Position.y = 100;  	}  	playerPositions [StartPosition] = Position;  	StartPosition++;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	playerPosition Position = new playerPosition ();  	if (StartPosition > 3)  		StartPosition = 0;  	if (i == 0) {  		Position.seat = "S";  		Position.x = 175;  		Position.y = 350;  	}  	if (i == 1) {  		Position.seat = "W";  		Position.x = 20;  		Position.y = 100;  	}  	if (i == 2) {  		Position.seat = "N";  		Position.x = 175;  		Position.y = 30;  	}  	if (i == 3) {  		Position.seat = "E";  		Position.x = 480;  		Position.y = 100;  	}  	playerPositions [StartPosition] = Position;  	StartPosition++;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	playerPosition Position = new playerPosition ();  	if (StartPosition > 3)  		StartPosition = 0;  	if (i == 0) {  		Position.seat = "S";  		Position.x = 175;  		Position.y = 350;  	}  	if (i == 1) {  		Position.seat = "W";  		Position.x = 20;  		Position.y = 100;  	}  	if (i == 2) {  		Position.seat = "N";  		Position.x = 175;  		Position.y = 30;  	}  	if (i == 3) {  		Position.seat = "E";  		Position.x = 480;  		Position.y = 100;  	}  	playerPositions [StartPosition] = Position;  	StartPosition++;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	playerPosition Position = new playerPosition ();  	if (StartPosition > 3)  		StartPosition = 0;  	if (i == 0) {  		Position.seat = "S";  		Position.x = 175;  		Position.y = 350;  	}  	if (i == 1) {  		Position.seat = "W";  		Position.x = 20;  		Position.y = 100;  	}  	if (i == 2) {  		Position.seat = "N";  		Position.x = 175;  		Position.y = 30;  	}  	if (i == 3) {  		Position.seat = "E";  		Position.x = 480;  		Position.y = 100;  	}  	playerPositions [StartPosition] = Position;  	StartPosition++;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	playerPosition Position = new playerPosition ();  	if (StartPosition > 3)  		StartPosition = 0;  	if (i == 0) {  		Position.seat = "S";  		Position.x = 175;  		Position.y = 350;  	}  	if (i == 1) {  		Position.seat = "W";  		Position.x = 20;  		Position.y = 100;  	}  	if (i == 2) {  		Position.seat = "N";  		Position.x = 175;  		Position.y = 30;  	}  	if (i == 3) {  		Position.seat = "E";  		Position.x = 480;  		Position.y = 100;  	}  	playerPositions [StartPosition] = Position;  	StartPosition++;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	playerPosition Position = new playerPosition ();  	if (StartPosition > 3)  		StartPosition = 0;  	if (i == 0) {  		Position.seat = "S";  		Position.x = 175;  		Position.y = 350;  	}  	if (i == 1) {  		Position.seat = "W";  		Position.x = 20;  		Position.y = 100;  	}  	if (i == 2) {  		Position.seat = "N";  		Position.x = 175;  		Position.y = 30;  	}  	if (i == 3) {  		Position.seat = "E";  		Position.x = 480;  		Position.y = 100;  	}  	playerPositions [StartPosition] = Position;  	StartPosition++;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	playerPosition Position = new playerPosition ();  	if (StartPosition > 3)  		StartPosition = 0;  	if (i == 0) {  		Position.seat = "S";  		Position.x = 175;  		Position.y = 350;  	}  	if (i == 1) {  		Position.seat = "W";  		Position.x = 20;  		Position.y = 100;  	}  	if (i == 2) {  		Position.seat = "N";  		Position.x = 175;  		Position.y = 30;  	}  	if (i == 3) {  		Position.seat = "E";  		Position.x = 480;  		Position.y = 100;  	}  	playerPositions [StartPosition] = Position;  	StartPosition++;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	playerPosition Position = new playerPosition ();  	if (StartPosition > 3)  		StartPosition = 0;  	if (i == 0) {  		Position.seat = "S";  		Position.x = 175;  		Position.y = 350;  	}  	if (i == 1) {  		Position.seat = "W";  		Position.x = 20;  		Position.y = 100;  	}  	if (i == 2) {  		Position.seat = "N";  		Position.x = 175;  		Position.y = 30;  	}  	if (i == 3) {  		Position.seat = "E";  		Position.x = 480;  		Position.y = 100;  	}  	playerPositions [StartPosition] = Position;  	StartPosition++;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: if (StartPosition > 3)  	StartPosition = 0;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: if (i == 0) {  	Position.seat = "S";  	Position.x = 175;  	Position.y = 350;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: if (i == 0) {  	Position.seat = "S";  	Position.x = 175;  	Position.y = 350;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: Position.x = 175;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: Position.y = 350;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: if (i == 1) {  	Position.seat = "W";  	Position.x = 20;  	Position.y = 100;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: if (i == 1) {  	Position.seat = "W";  	Position.x = 20;  	Position.y = 100;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: Position.x = 20;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: Position.y = 100;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: if (i == 2) {  	Position.seat = "N";  	Position.x = 175;  	Position.y = 30;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: if (i == 2) {  	Position.seat = "N";  	Position.x = 175;  	Position.y = 30;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: if (i == 2) {  	Position.seat = "N";  	Position.x = 175;  	Position.y = 30;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: Position.x = 175;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: Position.y = 30;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: if (i == 3) {  	Position.seat = "E";  	Position.x = 480;  	Position.y = 100;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: if (i == 3) {  	Position.seat = "E";  	Position.x = 480;  	Position.y = 100;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: if (i == 3) {  	Position.seat = "E";  	Position.x = 480;  	Position.y = 100;  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: Position.x = 480;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,initializePlayerBoardsPosition,The following statement contains a magic number: Position.y = 100;  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startRound,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	hand [j] = new Hand ();  	for (int i = counter; i < counter + 13; i++) {  		hand [j].AddCard ((SpadesCard)gameDeck.CardPile [i]);  	}  	counter = counter + 13;  	hand [j].sort ();  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startRound,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	hand [j] = new Hand ();  	for (int i = counter; i < counter + 13; i++) {  		hand [j].AddCard ((SpadesCard)gameDeck.CardPile [i]);  	}  	counter = counter + 13;  	hand [j].sort ();  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startRound,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	hand [j] = new Hand ();  	for (int i = counter; i < counter + 13; i++) {  		hand [j].AddCard ((SpadesCard)gameDeck.CardPile [i]);  	}  	counter = counter + 13;  	hand [j].sort ();  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startRound,The following statement contains a magic number: for (int i = counter; i < counter + 13; i++) {  	hand [j].AddCard ((SpadesCard)gameDeck.CardPile [i]);  }  
Magic Number,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,startRound,The following statement contains a magic number: counter = counter + 13;  
Magic Number,Cards,NameBox,C:\repos\nishesj_callbreak\Forms\NameBox.cs,playerNameTextBox_KeyPress,The following statement contains a magic number: if (e.KeyChar == (char)13) {  	if (playerNameTextBox.Text.Trim ().Length > 0) {  		this.DialogResult = DialogResult.OK;  	}  }  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerScores,The following statement contains a magic number: for (int i = 0; i < this.currentRound; i++) {  	int inc = 20;  	foreach (player p in playerList) {  		drawPoint = new PointF (inc' y);  		if (scoreArray [i' p.ID] < 0)  			drawBrush = new SolidBrush (Color.Red);  		else  			drawBrush = new SolidBrush (Color.Black);  		drawString = scoreArray [i' p.ID].ToString ();  		graphics.DrawString (drawString' drawFont' drawBrush' drawPoint' sf);  		inc = inc + 100;  	}  	y = y + 40;  }  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerScores,The following statement contains a magic number: for (int i = 0; i < this.currentRound; i++) {  	int inc = 20;  	foreach (player p in playerList) {  		drawPoint = new PointF (inc' y);  		if (scoreArray [i' p.ID] < 0)  			drawBrush = new SolidBrush (Color.Red);  		else  			drawBrush = new SolidBrush (Color.Black);  		drawString = scoreArray [i' p.ID].ToString ();  		graphics.DrawString (drawString' drawFont' drawBrush' drawPoint' sf);  		inc = inc + 100;  	}  	y = y + 40;  }  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerScores,The following statement contains a magic number: for (int i = 0; i < this.currentRound; i++) {  	int inc = 20;  	foreach (player p in playerList) {  		drawPoint = new PointF (inc' y);  		if (scoreArray [i' p.ID] < 0)  			drawBrush = new SolidBrush (Color.Red);  		else  			drawBrush = new SolidBrush (Color.Black);  		drawString = scoreArray [i' p.ID].ToString ();  		graphics.DrawString (drawString' drawFont' drawBrush' drawPoint' sf);  		inc = inc + 100;  	}  	y = y + 40;  }  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerScores,The following statement contains a magic number: foreach (player p in playerList) {  	drawPoint = new PointF (inc' y);  	if (scoreArray [i' p.ID] < 0)  		drawBrush = new SolidBrush (Color.Red);  	else  		drawBrush = new SolidBrush (Color.Black);  	drawString = scoreArray [i' p.ID].ToString ();  	graphics.DrawString (drawString' drawFont' drawBrush' drawPoint' sf);  	inc = inc + 100;  }  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerScores,The following statement contains a magic number: inc = inc + 100;  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerScores,The following statement contains a magic number: y = y + 40;  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerScores,The following statement contains a magic number: graphics.DrawLine (new Pen (drawBrush)' new Point (20' y + 10)' new Point (350' y + 10));  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerScores,The following statement contains a magic number: graphics.DrawLine (new Pen (drawBrush)' new Point (20' y + 10)' new Point (350' y + 10));  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerScores,The following statement contains a magic number: graphics.DrawLine (new Pen (drawBrush)' new Point (20' y + 10)' new Point (350' y + 10));  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerScores,The following statement contains a magic number: graphics.DrawLine (new Pen (drawBrush)' new Point (20' y + 10)' new Point (350' y + 10));  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerScores,The following statement contains a magic number: foreach (player p in playerList) {  	double total = 0;  	for (int k = 0; k < this.currentRound; k++) {  		drawPoint = new PointF (incx' incy);  		total = Math.Round ((double)(total + scoreArray [k' p.ID])' 1);  		if (total < 0)  			drawBrush = new SolidBrush (Color.Red);  		else  			drawBrush = new SolidBrush (Color.Black);  		p.TotalScore = (float)total;  		drawString = total.ToString ();  	}  	graphics.DrawString (drawString' drawFont' drawBrush' drawPoint' sf);  	incx = incx + 100;  }  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerScores,The following statement contains a magic number: incx = incx + 100;  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerNames,The following statement contains a magic number: foreach (player p in playerList) {  	drawPoint = new PointF (inc' 15);  	drawString = p.Name;  	graphics.DrawString (drawString' drawFont' drawBrush' drawPoint' sf);  	inc = inc + 100;  }  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerNames,The following statement contains a magic number: foreach (player p in playerList) {  	drawPoint = new PointF (inc' 15);  	drawString = p.Name;  	graphics.DrawString (drawString' drawFont' drawBrush' drawPoint' sf);  	inc = inc + 100;  }  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerNames,The following statement contains a magic number: drawPoint = new PointF (inc' 15);  
Magic Number,Cards,ScoreDisplay,C:\repos\nishesj_callbreak\Forms\ScoreDisplay.cs,drawPlayerNames,The following statement contains a magic number: inc = inc + 100;  
Magic Number,Cards,SpadesCard,C:\repos\nishesj_callbreak\Lib\SpadesCard.cs,SpadesCard,The following statement contains a magic number: if (i < 0 || i > 52) {  	throw new ApplicationException ("Wrong value for card initilization.");  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S":  	//drawPoint = new PointF(p.PositionX + 50' p.PositionY - 20);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y - 20);  	break;  case "W":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 70' Cards.Main.playerPositions [p.ID].y + 60);  	break;  case "N":  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y + 100);  	break;  case "E":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x - 25' Cards.Main.playerPositions [p.ID].y + 60);  	break;  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S":  	//drawPoint = new PointF(p.PositionX + 50' p.PositionY - 20);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y - 20);  	break;  case "W":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 70' Cards.Main.playerPositions [p.ID].y + 60);  	break;  case "N":  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y + 100);  	break;  case "E":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x - 25' Cards.Main.playerPositions [p.ID].y + 60);  	break;  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S":  	//drawPoint = new PointF(p.PositionX + 50' p.PositionY - 20);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y - 20);  	break;  case "W":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 70' Cards.Main.playerPositions [p.ID].y + 60);  	break;  case "N":  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y + 100);  	break;  case "E":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x - 25' Cards.Main.playerPositions [p.ID].y + 60);  	break;  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S":  	//drawPoint = new PointF(p.PositionX + 50' p.PositionY - 20);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y - 20);  	break;  case "W":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 70' Cards.Main.playerPositions [p.ID].y + 60);  	break;  case "N":  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y + 100);  	break;  case "E":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x - 25' Cards.Main.playerPositions [p.ID].y + 60);  	break;  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S":  	//drawPoint = new PointF(p.PositionX + 50' p.PositionY - 20);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y - 20);  	break;  case "W":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 70' Cards.Main.playerPositions [p.ID].y + 60);  	break;  case "N":  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y + 100);  	break;  case "E":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x - 25' Cards.Main.playerPositions [p.ID].y + 60);  	break;  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S":  	//drawPoint = new PointF(p.PositionX + 50' p.PositionY - 20);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y - 20);  	break;  case "W":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 70' Cards.Main.playerPositions [p.ID].y + 60);  	break;  case "N":  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y + 100);  	break;  case "E":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x - 25' Cards.Main.playerPositions [p.ID].y + 60);  	break;  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S":  	//drawPoint = new PointF(p.PositionX + 50' p.PositionY - 20);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y - 20);  	break;  case "W":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 70' Cards.Main.playerPositions [p.ID].y + 60);  	break;  case "N":  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y + 100);  	break;  case "E":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x - 25' Cards.Main.playerPositions [p.ID].y + 60);  	break;  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S":  	//drawPoint = new PointF(p.PositionX + 50' p.PositionY - 20);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y - 20);  	break;  case "W":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 70' Cards.Main.playerPositions [p.ID].y + 60);  	break;  case "N":  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y + 100);  	break;  case "E":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x - 25' Cards.Main.playerPositions [p.ID].y + 60);  	break;  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y - 20);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y - 20);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 70' Cards.Main.playerPositions [p.ID].y + 60);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 70' Cards.Main.playerPositions [p.ID].y + 60);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y + 100);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y + 100);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x - 25' Cards.Main.playerPositions [p.ID].y + 60);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x - 25' Cards.Main.playerPositions [p.ID].y + 60);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerHand,The following statement contains a magic number: foreach (SpadesCard c in p.Hand.CardPile) {  	card.Begin (G);  	int xnew = Main.playerPositions [p.ID].x + xinc;  	int ynew = Main.playerPositions [p.ID].y + yinc;  	if (c.MoveUp == true)  		ynew = ynew - 5;  	if (!BackFace)  		card.DrawCard (new Point (xnew' ynew)' c.CardIndex);  	else  		card.DrawCardBack (new Point (xnew' ynew)' CardBack);  	card.End ();  	if (Main.playerPositions [p.ID].seat == "N" || Main.playerPositions [p.ID].seat == "S")  		xinc = xinc + 15;  	else  		yinc = yinc + 15;  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerHand,The following statement contains a magic number: foreach (SpadesCard c in p.Hand.CardPile) {  	card.Begin (G);  	int xnew = Main.playerPositions [p.ID].x + xinc;  	int ynew = Main.playerPositions [p.ID].y + yinc;  	if (c.MoveUp == true)  		ynew = ynew - 5;  	if (!BackFace)  		card.DrawCard (new Point (xnew' ynew)' c.CardIndex);  	else  		card.DrawCardBack (new Point (xnew' ynew)' CardBack);  	card.End ();  	if (Main.playerPositions [p.ID].seat == "N" || Main.playerPositions [p.ID].seat == "S")  		xinc = xinc + 15;  	else  		yinc = yinc + 15;  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerHand,The following statement contains a magic number: foreach (SpadesCard c in p.Hand.CardPile) {  	card.Begin (G);  	int xnew = Main.playerPositions [p.ID].x + xinc;  	int ynew = Main.playerPositions [p.ID].y + yinc;  	if (c.MoveUp == true)  		ynew = ynew - 5;  	if (!BackFace)  		card.DrawCard (new Point (xnew' ynew)' c.CardIndex);  	else  		card.DrawCardBack (new Point (xnew' ynew)' CardBack);  	card.End ();  	if (Main.playerPositions [p.ID].seat == "N" || Main.playerPositions [p.ID].seat == "S")  		xinc = xinc + 15;  	else  		yinc = yinc + 15;  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerHand,The following statement contains a magic number: if (c.MoveUp == true)  	ynew = ynew - 5;  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerHand,The following statement contains a magic number: ynew = ynew - 5;  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerHand,The following statement contains a magic number: if (Main.playerPositions [p.ID].seat == "N" || Main.playerPositions [p.ID].seat == "S")  	xinc = xinc + 15;  else  	yinc = yinc + 15;  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerHand,The following statement contains a magic number: if (Main.playerPositions [p.ID].seat == "N" || Main.playerPositions [p.ID].seat == "S")  	xinc = xinc + 15;  else  	yinc = yinc + 15;  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerHand,The following statement contains a magic number: xinc = xinc + 15;  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerHand,The following statement contains a magic number: yinc = yinc + 15;  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S": {  	sf = new StringFormat (StringFormatFlags.DirectionRightToLeft);  	drawPoint = new PointF ((Cards.Main.playerPositions [p.ID].x)' Cards.Main.playerPositions [p.ID].y + 85);  	break;  }  case "W": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y - 15);  	break;  }  case "N": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + ((13 * 15) + 60)' Cards.Main.playerPositions [p.ID].y);  	break;  }  case "E": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y + (13 * 15) + 85);  	break;  }  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S": {  	sf = new StringFormat (StringFormatFlags.DirectionRightToLeft);  	drawPoint = new PointF ((Cards.Main.playerPositions [p.ID].x)' Cards.Main.playerPositions [p.ID].y + 85);  	break;  }  case "W": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y - 15);  	break;  }  case "N": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + ((13 * 15) + 60)' Cards.Main.playerPositions [p.ID].y);  	break;  }  case "E": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y + (13 * 15) + 85);  	break;  }  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S": {  	sf = new StringFormat (StringFormatFlags.DirectionRightToLeft);  	drawPoint = new PointF ((Cards.Main.playerPositions [p.ID].x)' Cards.Main.playerPositions [p.ID].y + 85);  	break;  }  case "W": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y - 15);  	break;  }  case "N": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + ((13 * 15) + 60)' Cards.Main.playerPositions [p.ID].y);  	break;  }  case "E": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y + (13 * 15) + 85);  	break;  }  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S": {  	sf = new StringFormat (StringFormatFlags.DirectionRightToLeft);  	drawPoint = new PointF ((Cards.Main.playerPositions [p.ID].x)' Cards.Main.playerPositions [p.ID].y + 85);  	break;  }  case "W": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y - 15);  	break;  }  case "N": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + ((13 * 15) + 60)' Cards.Main.playerPositions [p.ID].y);  	break;  }  case "E": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y + (13 * 15) + 85);  	break;  }  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S": {  	sf = new StringFormat (StringFormatFlags.DirectionRightToLeft);  	drawPoint = new PointF ((Cards.Main.playerPositions [p.ID].x)' Cards.Main.playerPositions [p.ID].y + 85);  	break;  }  case "W": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y - 15);  	break;  }  case "N": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + ((13 * 15) + 60)' Cards.Main.playerPositions [p.ID].y);  	break;  }  case "E": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y + (13 * 15) + 85);  	break;  }  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S": {  	sf = new StringFormat (StringFormatFlags.DirectionRightToLeft);  	drawPoint = new PointF ((Cards.Main.playerPositions [p.ID].x)' Cards.Main.playerPositions [p.ID].y + 85);  	break;  }  case "W": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y - 15);  	break;  }  case "N": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + ((13 * 15) + 60)' Cards.Main.playerPositions [p.ID].y);  	break;  }  case "E": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y + (13 * 15) + 85);  	break;  }  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S": {  	sf = new StringFormat (StringFormatFlags.DirectionRightToLeft);  	drawPoint = new PointF ((Cards.Main.playerPositions [p.ID].x)' Cards.Main.playerPositions [p.ID].y + 85);  	break;  }  case "W": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y - 15);  	break;  }  case "N": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + ((13 * 15) + 60)' Cards.Main.playerPositions [p.ID].y);  	break;  }  case "E": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y + (13 * 15) + 85);  	break;  }  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S": {  	sf = new StringFormat (StringFormatFlags.DirectionRightToLeft);  	drawPoint = new PointF ((Cards.Main.playerPositions [p.ID].x)' Cards.Main.playerPositions [p.ID].y + 85);  	break;  }  case "W": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y - 15);  	break;  }  case "N": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + ((13 * 15) + 60)' Cards.Main.playerPositions [p.ID].y);  	break;  }  case "E": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y + (13 * 15) + 85);  	break;  }  }  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: drawPoint = new PointF ((Cards.Main.playerPositions [p.ID].x)' Cards.Main.playerPositions [p.ID].y + 85);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y - 15);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + ((13 * 15) + 60)' Cards.Main.playerPositions [p.ID].y);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + ((13 * 15) + 60)' Cards.Main.playerPositions [p.ID].y);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + ((13 * 15) + 60)' Cards.Main.playerPositions [p.ID].y);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y + (13 * 15) + 85);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y + (13 * 15) + 85);  
Magic Number,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following statement contains a magic number: drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y + (13 * 15) + 85);  
Missing Default,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,InitializeName,The following switch statement is missing a default case: switch (this.ID) {  case 0:  	setName (regKey.GetValue ("AIPlayer0"' "AI - 0").ToString ());  	break;  case 1:  	setName (regKey.GetValue ("AIPlayer1"' "AI - I").ToString ());  	break;  case 2:  	setName (regKey.GetValue ("AIPlayer2"' "AI - II").ToString ());  	break;  case 3:  	setName (regKey.GetValue ("AIPlayer3"' "AI - III").ToString ());  	break;  }  
Missing Default,Cards,AIPlayer,C:\repos\nishesj_callbreak\AIPlayer.cs,InitializeName,The following switch statement is missing a default case: switch (this.ID) {  case 1:  	setName ("AI-1");  	break;  case 2:  	setName ("AI-2");  	break;  case 3:  	setName ("AI-3");  	break;  }  
Missing Default,Cards,Main,C:\repos\nishesj_callbreak\Main.cs,animationTimer_Tick,The following switch statement is missing a default case: switch (playerPositions [gameData.HandWinnerID].seat) {  case "S":  	card.CardPositionY = card.CardPositionY + 80;  	break;  case "W":  	card.CardPositionX = card.CardPositionX - 80;  	break;  case "N":  	card.CardPositionY = card.CardPositionY - 80;  	break;  case "E":  	card.CardPositionX = card.CardPositionX + 80;  	break;  }  
Missing Default,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerBidsAndTricks,The following switch statement is missing a default case: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S":  	//drawPoint = new PointF(p.PositionX + 50' p.PositionY - 20);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y - 20);  	break;  case "W":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 70' Cards.Main.playerPositions [p.ID].y + 60);  	break;  case "N":  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + 50' Cards.Main.playerPositions [p.ID].y + 100);  	break;  case "E":  	sf = new StringFormat (StringFormatFlags.DirectionVertical);  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x - 25' Cards.Main.playerPositions [p.ID].y + 60);  	break;  }  
Missing Default,Cards.GUI,SpadesGui,C:\repos\nishesj_callbreak\GUI\gui.cs,drawPlayerName,The following switch statement is missing a default case: switch (Cards.Main.playerPositions [p.ID].seat) {  case "S": {  	sf = new StringFormat (StringFormatFlags.DirectionRightToLeft);  	drawPoint = new PointF ((Cards.Main.playerPositions [p.ID].x)' Cards.Main.playerPositions [p.ID].y + 85);  	break;  }  case "W": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y - 15);  	break;  }  case "N": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x + ((13 * 15) + 60)' Cards.Main.playerPositions [p.ID].y);  	break;  }  case "E": {  	drawPoint = new PointF (Cards.Main.playerPositions [p.ID].x' Cards.Main.playerPositions [p.ID].y + (13 * 15) + 85);  	break;  }  }  
