Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,Authenticate,The length of the statement  "                "client_id=DE45CD61&grant_type=password&username=" + Uri.EscapeDataString(username) + "&password=" + Uri.EscapeDataString(password) + "&x_emailauthcode=" + emailauthcode + "&scope=read_profile%20write_profile%20read_client%20write_client"); " is 240.
Long Statement,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetFriends,The length of the statement  "            String response = steamRequest("ISteamUserOAuth/GetFriendList/v0001?access_token=" + accessToken + "&steamid=" + steamid); " is 122.
Long Statement,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetUserInfo,The length of the statement  "            String response = steamRequest("ISteamUserOAuth/GetUserSummaries/v0001?access_token=" + accessToken + "&steamids=" + String.Join("'"' steamids.GetRange(0' Math.Min(steamids.Count' 100)).ToArray())); " is 198.
Long Statement,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetGroups,The length of the statement  "            String response = steamRequest("ISteamUserOAuth/GetGroupList/v0001?access_token=" + accessToken + "&steamid=" + steamid); " is 121.
Long Statement,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetGroupInfo,The length of the statement  "            String response = steamRequest("ISteamUserOAuth/GetGroupSummaries/v0001?access_token=" + accessToken + "&steamids=" + String.Join("'"' steamids.GetRange(0' Math.Min(steamids.Count' 100)).ToArray())); " is 199.
Long Statement,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,SendTypingNotification,The length of the statement  "            String response = steamRequest("ISteamWebUserPresenceOAuth/Message/v0001"' "?access_token=" + accessToken + "&umqid=" + umqid + "&type=typing&steamid_dst=" + user.steamid); " is 172.
Long Statement,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,SendMessage,The length of the statement  "            String response = steamRequest("ISteamWebUserPresenceOAuth/Message/v0001"' "?access_token=" + accessToken + "&umqid=" + umqid + "&type=saytext&text=" + Uri.EscapeDataString(message) + "&steamid_dst=" + user.steamid); " is 216.
Long Statement,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,Poll,The length of the statement  "            String response = steamRequest("ISteamWebUserPresenceOAuth/Poll/v0001"' "?access_token=" + accessToken + "&umqid=" + umqid + "&message=" + message); " is 148.
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetUserInfo,The following statement contains a magic number: String response = steamRequest("ISteamUserOAuth/GetUserSummaries/v0001?access_token=" + accessToken + "&steamids=" + String.Join("'"' steamids.GetRange(0' Math.Min(steamids.Count' 100)).ToArray()));
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetUserInfo,The following statement contains a magic number: if (response != null) {                  JObject data = JObject.Parse(response);                    if (data["players"] != null) {                      List<User> users = new List<User>();                        foreach (JObject info in data["players"]) {                          User user = new User();                            user.steamid = (String) info["steamid"];                          user.profileVisibility = (ProfileVisibility) (int) info["communityvisibilitystate"];                          user.profileState = (int) info["profilestate"];                          user.nickname = (String) info["personaname"];                          user.lastLogoff = unixTimestamp((long) info["lastlogoff"]);                          user.profileUrl = (String) info["profileurl"];                          user.status = (UserStatus) (int) info["personastate"];                            user.avatarUrl = info["avatar"] != null ? (String) info["avatar"] : "";                          if (user.avatarUrl != null) user.avatarUrl = user.avatarUrl.Substring(0' user.avatarUrl.Length - 4);                            user.joinDate = unixTimestamp(info["timecreated"] != null ? (long) info["timecreated"] : 0);                          user.primaryGroupId = info["primaryclanid"] != null ? (String) info["primaryclanid"] : "";                          user.realName = info["realname"] != null ? (String) info["realname"] : "";                          user.locationCountryCode = info["loccountrycode"] != null ? (String) info["loccountrycode"] : "";                          user.locationStateCode = info["locstatecode"] != null ? (String) info["locstatecode"] : "";                          user.locationCityId = info["loccityid"] != null ? (int) info["loccityid"] : -1;                            users.Add(user);                      }                        // Requests are limited to 100 steamids' so issue multiple requests                      if (steamids.Count > 100)                          users.AddRange(GetUserInfo(steamids.GetRange(100' Math.Min(steamids.Count - 100' 100))));                        return users;                  } else {                      return null;                  }              } else {                  return null;              }
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetUserInfo,The following statement contains a magic number: if (response != null) {                  JObject data = JObject.Parse(response);                    if (data["players"] != null) {                      List<User> users = new List<User>();                        foreach (JObject info in data["players"]) {                          User user = new User();                            user.steamid = (String) info["steamid"];                          user.profileVisibility = (ProfileVisibility) (int) info["communityvisibilitystate"];                          user.profileState = (int) info["profilestate"];                          user.nickname = (String) info["personaname"];                          user.lastLogoff = unixTimestamp((long) info["lastlogoff"]);                          user.profileUrl = (String) info["profileurl"];                          user.status = (UserStatus) (int) info["personastate"];                            user.avatarUrl = info["avatar"] != null ? (String) info["avatar"] : "";                          if (user.avatarUrl != null) user.avatarUrl = user.avatarUrl.Substring(0' user.avatarUrl.Length - 4);                            user.joinDate = unixTimestamp(info["timecreated"] != null ? (long) info["timecreated"] : 0);                          user.primaryGroupId = info["primaryclanid"] != null ? (String) info["primaryclanid"] : "";                          user.realName = info["realname"] != null ? (String) info["realname"] : "";                          user.locationCountryCode = info["loccountrycode"] != null ? (String) info["loccountrycode"] : "";                          user.locationStateCode = info["locstatecode"] != null ? (String) info["locstatecode"] : "";                          user.locationCityId = info["loccityid"] != null ? (int) info["loccityid"] : -1;                            users.Add(user);                      }                        // Requests are limited to 100 steamids' so issue multiple requests                      if (steamids.Count > 100)                          users.AddRange(GetUserInfo(steamids.GetRange(100' Math.Min(steamids.Count - 100' 100))));                        return users;                  } else {                      return null;                  }              } else {                  return null;              }
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetUserInfo,The following statement contains a magic number: if (response != null) {                  JObject data = JObject.Parse(response);                    if (data["players"] != null) {                      List<User> users = new List<User>();                        foreach (JObject info in data["players"]) {                          User user = new User();                            user.steamid = (String) info["steamid"];                          user.profileVisibility = (ProfileVisibility) (int) info["communityvisibilitystate"];                          user.profileState = (int) info["profilestate"];                          user.nickname = (String) info["personaname"];                          user.lastLogoff = unixTimestamp((long) info["lastlogoff"]);                          user.profileUrl = (String) info["profileurl"];                          user.status = (UserStatus) (int) info["personastate"];                            user.avatarUrl = info["avatar"] != null ? (String) info["avatar"] : "";                          if (user.avatarUrl != null) user.avatarUrl = user.avatarUrl.Substring(0' user.avatarUrl.Length - 4);                            user.joinDate = unixTimestamp(info["timecreated"] != null ? (long) info["timecreated"] : 0);                          user.primaryGroupId = info["primaryclanid"] != null ? (String) info["primaryclanid"] : "";                          user.realName = info["realname"] != null ? (String) info["realname"] : "";                          user.locationCountryCode = info["loccountrycode"] != null ? (String) info["loccountrycode"] : "";                          user.locationStateCode = info["locstatecode"] != null ? (String) info["locstatecode"] : "";                          user.locationCityId = info["loccityid"] != null ? (int) info["loccityid"] : -1;                            users.Add(user);                      }                        // Requests are limited to 100 steamids' so issue multiple requests                      if (steamids.Count > 100)                          users.AddRange(GetUserInfo(steamids.GetRange(100' Math.Min(steamids.Count - 100' 100))));                        return users;                  } else {                      return null;                  }              } else {                  return null;              }
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetUserInfo,The following statement contains a magic number: if (response != null) {                  JObject data = JObject.Parse(response);                    if (data["players"] != null) {                      List<User> users = new List<User>();                        foreach (JObject info in data["players"]) {                          User user = new User();                            user.steamid = (String) info["steamid"];                          user.profileVisibility = (ProfileVisibility) (int) info["communityvisibilitystate"];                          user.profileState = (int) info["profilestate"];                          user.nickname = (String) info["personaname"];                          user.lastLogoff = unixTimestamp((long) info["lastlogoff"]);                          user.profileUrl = (String) info["profileurl"];                          user.status = (UserStatus) (int) info["personastate"];                            user.avatarUrl = info["avatar"] != null ? (String) info["avatar"] : "";                          if (user.avatarUrl != null) user.avatarUrl = user.avatarUrl.Substring(0' user.avatarUrl.Length - 4);                            user.joinDate = unixTimestamp(info["timecreated"] != null ? (long) info["timecreated"] : 0);                          user.primaryGroupId = info["primaryclanid"] != null ? (String) info["primaryclanid"] : "";                          user.realName = info["realname"] != null ? (String) info["realname"] : "";                          user.locationCountryCode = info["loccountrycode"] != null ? (String) info["loccountrycode"] : "";                          user.locationStateCode = info["locstatecode"] != null ? (String) info["locstatecode"] : "";                          user.locationCityId = info["loccityid"] != null ? (int) info["loccityid"] : -1;                            users.Add(user);                      }                        // Requests are limited to 100 steamids' so issue multiple requests                      if (steamids.Count > 100)                          users.AddRange(GetUserInfo(steamids.GetRange(100' Math.Min(steamids.Count - 100' 100))));                        return users;                  } else {                      return null;                  }              } else {                  return null;              }
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetUserInfo,The following statement contains a magic number: if (response != null) {                  JObject data = JObject.Parse(response);                    if (data["players"] != null) {                      List<User> users = new List<User>();                        foreach (JObject info in data["players"]) {                          User user = new User();                            user.steamid = (String) info["steamid"];                          user.profileVisibility = (ProfileVisibility) (int) info["communityvisibilitystate"];                          user.profileState = (int) info["profilestate"];                          user.nickname = (String) info["personaname"];                          user.lastLogoff = unixTimestamp((long) info["lastlogoff"]);                          user.profileUrl = (String) info["profileurl"];                          user.status = (UserStatus) (int) info["personastate"];                            user.avatarUrl = info["avatar"] != null ? (String) info["avatar"] : "";                          if (user.avatarUrl != null) user.avatarUrl = user.avatarUrl.Substring(0' user.avatarUrl.Length - 4);                            user.joinDate = unixTimestamp(info["timecreated"] != null ? (long) info["timecreated"] : 0);                          user.primaryGroupId = info["primaryclanid"] != null ? (String) info["primaryclanid"] : "";                          user.realName = info["realname"] != null ? (String) info["realname"] : "";                          user.locationCountryCode = info["loccountrycode"] != null ? (String) info["loccountrycode"] : "";                          user.locationStateCode = info["locstatecode"] != null ? (String) info["locstatecode"] : "";                          user.locationCityId = info["loccityid"] != null ? (int) info["loccityid"] : -1;                            users.Add(user);                      }                        // Requests are limited to 100 steamids' so issue multiple requests                      if (steamids.Count > 100)                          users.AddRange(GetUserInfo(steamids.GetRange(100' Math.Min(steamids.Count - 100' 100))));                        return users;                  } else {                      return null;                  }              } else {                  return null;              }
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetGroupInfo,The following statement contains a magic number: String response = steamRequest("ISteamUserOAuth/GetGroupSummaries/v0001?access_token=" + accessToken + "&steamids=" + String.Join("'"' steamids.GetRange(0' Math.Min(steamids.Count' 100)).ToArray()));
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetGroupInfo,The following statement contains a magic number: if (response != null) {                  JObject data = JObject.Parse(response);                    if (data["groups"] != null) {                      List<GroupInfo> groups = new List<GroupInfo>();                        foreach (JObject info in data["groups"]) {                          GroupInfo group = new GroupInfo();                            group.steamid = (String) info["steamid"];                          group.creationDate = unixTimestamp((long) info["timecreated"]);                          group.name = (String) info["name"];                          group.profileUrl = "http://steamcommunity.com/groups/" + (String) info["profileurl"];                          group.usersOnline = (int) info["usersonline"];                          group.usersInChat = (int) info["usersinclanchat"];                          group.usersInGame = (int) info["usersingame"];                          group.owner = (String) info["ownerid"];                          group.members = (int) info["users"];                            group.avatarUrl = (String) info["avatar"];                          if (group.avatarUrl != null) group.avatarUrl = group.avatarUrl.Substring(0' group.avatarUrl.Length - 4);                            group.headline = info["headline"] != null ? (String) info["headline"] : "";                          group.summary = info["summary"] != null ? (String) info["summary"] : "";                          group.abbreviation = info["abbreviation"] != null ? (String) info["abbreviation"] : "";                          group.locationCountryCode = info["loccountrycode"] != null ? (String) info["loccountrycode"] : "";                          group.locationStateCode = info["locstatecode"] != null ? (String) info["locstatecode"] : "";                          group.locationCityId = info["loccityid"] != null ? (int) info["loccityid"] : -1;                          group.favoriteAppId = info["favoriteappid"] != null ? (int) info["favoriteappid"] : -1;                            groups.Add(group);                      }                        // Requests are limited to 100 steamids' so issue multiple requests                      if (steamids.Count > 100)                          groups.AddRange(GetGroupInfo(steamids.GetRange(100' Math.Min(steamids.Count - 100' 100))));                        return groups;                  } else {                      return null;                  }              } else {                  return null;              }
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetGroupInfo,The following statement contains a magic number: if (response != null) {                  JObject data = JObject.Parse(response);                    if (data["groups"] != null) {                      List<GroupInfo> groups = new List<GroupInfo>();                        foreach (JObject info in data["groups"]) {                          GroupInfo group = new GroupInfo();                            group.steamid = (String) info["steamid"];                          group.creationDate = unixTimestamp((long) info["timecreated"]);                          group.name = (String) info["name"];                          group.profileUrl = "http://steamcommunity.com/groups/" + (String) info["profileurl"];                          group.usersOnline = (int) info["usersonline"];                          group.usersInChat = (int) info["usersinclanchat"];                          group.usersInGame = (int) info["usersingame"];                          group.owner = (String) info["ownerid"];                          group.members = (int) info["users"];                            group.avatarUrl = (String) info["avatar"];                          if (group.avatarUrl != null) group.avatarUrl = group.avatarUrl.Substring(0' group.avatarUrl.Length - 4);                            group.headline = info["headline"] != null ? (String) info["headline"] : "";                          group.summary = info["summary"] != null ? (String) info["summary"] : "";                          group.abbreviation = info["abbreviation"] != null ? (String) info["abbreviation"] : "";                          group.locationCountryCode = info["loccountrycode"] != null ? (String) info["loccountrycode"] : "";                          group.locationStateCode = info["locstatecode"] != null ? (String) info["locstatecode"] : "";                          group.locationCityId = info["loccityid"] != null ? (int) info["loccityid"] : -1;                          group.favoriteAppId = info["favoriteappid"] != null ? (int) info["favoriteappid"] : -1;                            groups.Add(group);                      }                        // Requests are limited to 100 steamids' so issue multiple requests                      if (steamids.Count > 100)                          groups.AddRange(GetGroupInfo(steamids.GetRange(100' Math.Min(steamids.Count - 100' 100))));                        return groups;                  } else {                      return null;                  }              } else {                  return null;              }
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetGroupInfo,The following statement contains a magic number: if (response != null) {                  JObject data = JObject.Parse(response);                    if (data["groups"] != null) {                      List<GroupInfo> groups = new List<GroupInfo>();                        foreach (JObject info in data["groups"]) {                          GroupInfo group = new GroupInfo();                            group.steamid = (String) info["steamid"];                          group.creationDate = unixTimestamp((long) info["timecreated"]);                          group.name = (String) info["name"];                          group.profileUrl = "http://steamcommunity.com/groups/" + (String) info["profileurl"];                          group.usersOnline = (int) info["usersonline"];                          group.usersInChat = (int) info["usersinclanchat"];                          group.usersInGame = (int) info["usersingame"];                          group.owner = (String) info["ownerid"];                          group.members = (int) info["users"];                            group.avatarUrl = (String) info["avatar"];                          if (group.avatarUrl != null) group.avatarUrl = group.avatarUrl.Substring(0' group.avatarUrl.Length - 4);                            group.headline = info["headline"] != null ? (String) info["headline"] : "";                          group.summary = info["summary"] != null ? (String) info["summary"] : "";                          group.abbreviation = info["abbreviation"] != null ? (String) info["abbreviation"] : "";                          group.locationCountryCode = info["loccountrycode"] != null ? (String) info["loccountrycode"] : "";                          group.locationStateCode = info["locstatecode"] != null ? (String) info["locstatecode"] : "";                          group.locationCityId = info["loccityid"] != null ? (int) info["loccityid"] : -1;                          group.favoriteAppId = info["favoriteappid"] != null ? (int) info["favoriteappid"] : -1;                            groups.Add(group);                      }                        // Requests are limited to 100 steamids' so issue multiple requests                      if (steamids.Count > 100)                          groups.AddRange(GetGroupInfo(steamids.GetRange(100' Math.Min(steamids.Count - 100' 100))));                        return groups;                  } else {                      return null;                  }              } else {                  return null;              }
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetGroupInfo,The following statement contains a magic number: if (response != null) {                  JObject data = JObject.Parse(response);                    if (data["groups"] != null) {                      List<GroupInfo> groups = new List<GroupInfo>();                        foreach (JObject info in data["groups"]) {                          GroupInfo group = new GroupInfo();                            group.steamid = (String) info["steamid"];                          group.creationDate = unixTimestamp((long) info["timecreated"]);                          group.name = (String) info["name"];                          group.profileUrl = "http://steamcommunity.com/groups/" + (String) info["profileurl"];                          group.usersOnline = (int) info["usersonline"];                          group.usersInChat = (int) info["usersinclanchat"];                          group.usersInGame = (int) info["usersingame"];                          group.owner = (String) info["ownerid"];                          group.members = (int) info["users"];                            group.avatarUrl = (String) info["avatar"];                          if (group.avatarUrl != null) group.avatarUrl = group.avatarUrl.Substring(0' group.avatarUrl.Length - 4);                            group.headline = info["headline"] != null ? (String) info["headline"] : "";                          group.summary = info["summary"] != null ? (String) info["summary"] : "";                          group.abbreviation = info["abbreviation"] != null ? (String) info["abbreviation"] : "";                          group.locationCountryCode = info["loccountrycode"] != null ? (String) info["loccountrycode"] : "";                          group.locationStateCode = info["locstatecode"] != null ? (String) info["locstatecode"] : "";                          group.locationCityId = info["loccityid"] != null ? (int) info["loccityid"] : -1;                          group.favoriteAppId = info["favoriteappid"] != null ? (int) info["favoriteappid"] : -1;                            groups.Add(group);                      }                        // Requests are limited to 100 steamids' so issue multiple requests                      if (steamids.Count > 100)                          groups.AddRange(GetGroupInfo(steamids.GetRange(100' Math.Min(steamids.Count - 100' 100))));                        return groups;                  } else {                      return null;                  }              } else {                  return null;              }
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,GetGroupInfo,The following statement contains a magic number: if (response != null) {                  JObject data = JObject.Parse(response);                    if (data["groups"] != null) {                      List<GroupInfo> groups = new List<GroupInfo>();                        foreach (JObject info in data["groups"]) {                          GroupInfo group = new GroupInfo();                            group.steamid = (String) info["steamid"];                          group.creationDate = unixTimestamp((long) info["timecreated"]);                          group.name = (String) info["name"];                          group.profileUrl = "http://steamcommunity.com/groups/" + (String) info["profileurl"];                          group.usersOnline = (int) info["usersonline"];                          group.usersInChat = (int) info["usersinclanchat"];                          group.usersInGame = (int) info["usersingame"];                          group.owner = (String) info["ownerid"];                          group.members = (int) info["users"];                            group.avatarUrl = (String) info["avatar"];                          if (group.avatarUrl != null) group.avatarUrl = group.avatarUrl.Substring(0' group.avatarUrl.Length - 4);                            group.headline = info["headline"] != null ? (String) info["headline"] : "";                          group.summary = info["summary"] != null ? (String) info["summary"] : "";                          group.abbreviation = info["abbreviation"] != null ? (String) info["abbreviation"] : "";                          group.locationCountryCode = info["loccountrycode"] != null ? (String) info["loccountrycode"] : "";                          group.locationStateCode = info["locstatecode"] != null ? (String) info["locstatecode"] : "";                          group.locationCityId = info["loccityid"] != null ? (int) info["loccityid"] : -1;                          group.favoriteAppId = info["favoriteappid"] != null ? (int) info["favoriteappid"] : -1;                            groups.Add(group);                      }                        // Requests are limited to 100 steamids' so issue multiple requests                      if (steamids.Count > 100)                          groups.AddRange(GetGroupInfo(steamids.GetRange(100' Math.Min(steamids.Count - 100' 100))));                        return groups;                  } else {                      return null;                  }              } else {                  return null;              }
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,steamRequest,The following statement contains a magic number: try {                  HttpWebResponse response = (HttpWebResponse) request.GetResponse();                  if ((int) response.StatusCode != 200) return null;                    String src = new StreamReader(response.GetResponseStream()).ReadToEnd();                  response.Close();                  return src;              } catch (WebException e) {                  return null;              }
Magic Number,SteamWebAPI,SteamAPISession,C:\repos\Overv_SteamWebAPI\SteamAPISession.cs,unixTimestamp,The following statement contains a magic number: DateTime origin = new DateTime(1970' 1' 1' 0' 0' 0' 0);
