Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PMDCP.Core,Hash,C:\repos\pmdcp_framework\Core\Hash.cs,GetFileHash,Cyclomatic complexity of the method is 23
Complex Method,PMDCP.Core,Hash,C:\repos\pmdcp_framework\Core\Hash.cs,GenerateHash,Cyclomatic complexity of the method is 20
Long Statement,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToInt,The length of the statement  "	return (0xff & byteArray [offset]) << 24 | (0xff & byteArray [offset + 1]) << 16 | (0xff & byteArray [offset + 2]) << 8 | (0xff & byteArray [offset + 3]) << 0; " is 159.
Long Statement,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The length of the statement  "	return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0; " is 319.
Long Statement,PMDCP.Core,Cache,C:\repos\pmdcp_framework\Core\Cache.cs,PurgeSpace,The length of the statement  "			System.Diagnostics.Debug.WriteLine (string.Format ("{0} being made available for GC freeing {1} bytes in the cache"' k' freeing)); " is 130.
Long Statement,PMDCP.Core,Cache,C:\repos\pmdcp_framework\Core\Cache.cs,Add,The length of the statement  "		System.Diagnostics.Debug.WriteLine (string.Format ("Need to make space for {0} bytes' currently using {1}"' v.BytesUsed' CurrentCacheUsage)); " is 141.
Long Statement,PMDCP.Core,Environment,C:\repos\pmdcp_framework\Core\Environment.cs,RetrieveLinkerTimestamp,The length of the statement  "	DateTime dt = new System.DateTime (1970' 1' 1' 0' 0' 0).AddSeconds (System.BitConverter.ToInt32 (peHeader' System.BitConverter.ToInt32 (peHeader' peHeaderOffset) + linkerTimestampOffset)); " is 188.
Long Statement,PMDCP.Core,Extensions,C:\repos\pmdcp_framework\Core\Extensions.cs,HexStringToColor,The length of the statement  "	return System.Drawing.Color.FromArgb (HexStringToBase10Int (a)' HexStringToBase10Int (r)' HexStringToBase10Int (g)' HexStringToBase10Int (b)); " is 142.
Empty Catch Block,PMDCP.Core,XCopy,C:\repos\pmdcp_framework\Core\XCopy.cs,Copy,The method has an empty catch block.
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,CharToByteArray,The following statement contains a magic number: return new byte[] {  	(byte)((cChar >> 8) & 0xff)'  	(byte)((cChar >> 0) & 0xff)'  };  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,IntToByteArray,The following statement contains a magic number: return new byte[] {  	(byte)((int32 >> 24) & 0xff)'  	(byte)((int32 >> 16) & 0xff)'  	(byte)((int32 >> 8) & 0xff)'  	(byte)((int32 >> 0) & 0xff)'  };  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,IntToByteArray,The following statement contains a magic number: return new byte[] {  	(byte)((int32 >> 24) & 0xff)'  	(byte)((int32 >> 16) & 0xff)'  	(byte)((int32 >> 8) & 0xff)'  	(byte)((int32 >> 0) & 0xff)'  };  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,IntToByteArray,The following statement contains a magic number: return new byte[] {  	(byte)((int32 >> 24) & 0xff)'  	(byte)((int32 >> 16) & 0xff)'  	(byte)((int32 >> 8) & 0xff)'  	(byte)((int32 >> 0) & 0xff)'  };  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,LongToByteArray,The following statement contains a magic number: return new byte[] {  	(byte)((int64 >> 56) & 0xff)'  	(byte)((int64 >> 48) & 0xff)'  	(byte)((int64 >> 40) & 0xff)'  	(byte)((int64 >> 32) & 0xff)'  	(byte)((int64 >> 24) & 0xff)'  	(byte)((int64 >> 16) & 0xff)'  	(byte)((int64 >> 8) & 0xff)'  	(byte)((int64 >> 0) & 0xff)  };  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,LongToByteArray,The following statement contains a magic number: return new byte[] {  	(byte)((int64 >> 56) & 0xff)'  	(byte)((int64 >> 48) & 0xff)'  	(byte)((int64 >> 40) & 0xff)'  	(byte)((int64 >> 32) & 0xff)'  	(byte)((int64 >> 24) & 0xff)'  	(byte)((int64 >> 16) & 0xff)'  	(byte)((int64 >> 8) & 0xff)'  	(byte)((int64 >> 0) & 0xff)  };  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,LongToByteArray,The following statement contains a magic number: return new byte[] {  	(byte)((int64 >> 56) & 0xff)'  	(byte)((int64 >> 48) & 0xff)'  	(byte)((int64 >> 40) & 0xff)'  	(byte)((int64 >> 32) & 0xff)'  	(byte)((int64 >> 24) & 0xff)'  	(byte)((int64 >> 16) & 0xff)'  	(byte)((int64 >> 8) & 0xff)'  	(byte)((int64 >> 0) & 0xff)  };  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,LongToByteArray,The following statement contains a magic number: return new byte[] {  	(byte)((int64 >> 56) & 0xff)'  	(byte)((int64 >> 48) & 0xff)'  	(byte)((int64 >> 40) & 0xff)'  	(byte)((int64 >> 32) & 0xff)'  	(byte)((int64 >> 24) & 0xff)'  	(byte)((int64 >> 16) & 0xff)'  	(byte)((int64 >> 8) & 0xff)'  	(byte)((int64 >> 0) & 0xff)  };  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,LongToByteArray,The following statement contains a magic number: return new byte[] {  	(byte)((int64 >> 56) & 0xff)'  	(byte)((int64 >> 48) & 0xff)'  	(byte)((int64 >> 40) & 0xff)'  	(byte)((int64 >> 32) & 0xff)'  	(byte)((int64 >> 24) & 0xff)'  	(byte)((int64 >> 16) & 0xff)'  	(byte)((int64 >> 8) & 0xff)'  	(byte)((int64 >> 0) & 0xff)  };  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,LongToByteArray,The following statement contains a magic number: return new byte[] {  	(byte)((int64 >> 56) & 0xff)'  	(byte)((int64 >> 48) & 0xff)'  	(byte)((int64 >> 40) & 0xff)'  	(byte)((int64 >> 32) & 0xff)'  	(byte)((int64 >> 24) & 0xff)'  	(byte)((int64 >> 16) & 0xff)'  	(byte)((int64 >> 8) & 0xff)'  	(byte)((int64 >> 0) & 0xff)  };  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,LongToByteArray,The following statement contains a magic number: return new byte[] {  	(byte)((int64 >> 56) & 0xff)'  	(byte)((int64 >> 48) & 0xff)'  	(byte)((int64 >> 40) & 0xff)'  	(byte)((int64 >> 32) & 0xff)'  	(byte)((int64 >> 24) & 0xff)'  	(byte)((int64 >> 16) & 0xff)'  	(byte)((int64 >> 8) & 0xff)'  	(byte)((int64 >> 0) & 0xff)  };  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToChar,The following statement contains a magic number: return (char)((0xff & byteArray [0]) << 8 | (0xff & byteArray [1]) << 0);  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToCharArray,The following statement contains a magic number: for (int s = 0; s < size; s++) {  	tmpArray = GetSubByteArray (byteArray' s * 2' (s + 1) * 2);  	charArray [s] = ByteArrayToChar (tmpArray);  }  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToCharArray,The following statement contains a magic number: for (int s = 0; s < size; s++) {  	tmpArray = GetSubByteArray (byteArray' s * 2' (s + 1) * 2);  	charArray [s] = ByteArrayToChar (tmpArray);  }  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToCharArray,The following statement contains a magic number: tmpArray = GetSubByteArray (byteArray' s * 2' (s + 1) * 2);  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToCharArray,The following statement contains a magic number: tmpArray = GetSubByteArray (byteArray' s * 2' (s + 1) * 2);  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,CharArrayToByteArray,The following statement contains a magic number: for (int s = 0; s < charArray.Length; s++) {  	tmpArray = CharToByteArray (charArray [s]);  	byteArray = AppendToByteArray (byteArray' tmpArray' s * 2);  }  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,CharArrayToByteArray,The following statement contains a magic number: byteArray = AppendToByteArray (byteArray' tmpArray' s * 2);  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToShort,The following statement contains a magic number: return (short)((0xff & byteArray [offset]) << 8 | (0xff & byteArray [offset + 1]) << 0);  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToInt,The following statement contains a magic number: return (0xff & byteArray [offset]) << 24 | (0xff & byteArray [offset + 1]) << 16 | (0xff & byteArray [offset + 2]) << 8 | (0xff & byteArray [offset + 3]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToInt,The following statement contains a magic number: return (0xff & byteArray [offset]) << 24 | (0xff & byteArray [offset + 1]) << 16 | (0xff & byteArray [offset + 2]) << 8 | (0xff & byteArray [offset + 3]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToInt,The following statement contains a magic number: return (0xff & byteArray [offset]) << 24 | (0xff & byteArray [offset + 1]) << 16 | (0xff & byteArray [offset + 2]) << 8 | (0xff & byteArray [offset + 3]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToInt,The following statement contains a magic number: return (0xff & byteArray [offset]) << 24 | (0xff & byteArray [offset + 1]) << 16 | (0xff & byteArray [offset + 2]) << 8 | (0xff & byteArray [offset + 3]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToInt,The following statement contains a magic number: return (0xff & byteArray [offset]) << 24 | (0xff & byteArray [offset + 1]) << 16 | (0xff & byteArray [offset + 2]) << 8 | (0xff & byteArray [offset + 3]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The following statement contains a magic number: return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The following statement contains a magic number: return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The following statement contains a magic number: return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The following statement contains a magic number: return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The following statement contains a magic number: return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The following statement contains a magic number: return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The following statement contains a magic number: return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The following statement contains a magic number: return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The following statement contains a magic number: return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The following statement contains a magic number: return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The following statement contains a magic number: return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The following statement contains a magic number: return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0;  
Magic Number,PMDCP.Core,ByteEncoder,C:\repos\pmdcp_framework\Core\ByteEncoder.cs,ByteArrayToLong,The following statement contains a magic number: return (0xff & byteArray [offset]) << 56 | (0xff & byteArray [offset + 1]) << 48 | (0xff & byteArray [offset + 2]) << 40 | (0xff & byteArray [offset + 3]) << 32 | (0xff & byteArray [offset + 4]) << 24 | (0xff & byteArray [offset + 5]) << 16 | (0xff & byteArray [offset + 6]) << 8 | (0xff & byteArray [offset + 7]) << 0;  
Magic Number,PMDCP.Core,Environment,C:\repos\pmdcp_framework\Core\Environment.cs,RetrieveLinkerTimestamp,The following statement contains a magic number: using (FileStream fileStream = new FileStream (filePath' System.IO.FileMode.Open' System.IO.FileAccess.Read)) {  	fileStream.Read (peHeader' 0' 2048);  }  
Magic Number,PMDCP.Core,Environment,C:\repos\pmdcp_framework\Core\Environment.cs,RetrieveLinkerTimestamp,The following statement contains a magic number: fileStream.Read (peHeader' 0' 2048);  
Magic Number,PMDCP.Core,Extensions,C:\repos\pmdcp_framework\Core\Extensions.cs,HexStringToColor,The following statement contains a magic number: if (hex.Length != 8)  	throw new Exception (hex + " is not a valid 8-place hexadecimal color code.");  
Magic Number,PMDCP.Core,Extensions,C:\repos\pmdcp_framework\Core\Extensions.cs,HexStringToColor,The following statement contains a magic number: a = hex.Substring (0' 2);  
Magic Number,PMDCP.Core,Extensions,C:\repos\pmdcp_framework\Core\Extensions.cs,HexStringToColor,The following statement contains a magic number: r = hex.Substring (2' 2);  
Magic Number,PMDCP.Core,Extensions,C:\repos\pmdcp_framework\Core\Extensions.cs,HexStringToColor,The following statement contains a magic number: r = hex.Substring (2' 2);  
Magic Number,PMDCP.Core,Extensions,C:\repos\pmdcp_framework\Core\Extensions.cs,HexStringToColor,The following statement contains a magic number: g = hex.Substring (4' 2);  
Magic Number,PMDCP.Core,Extensions,C:\repos\pmdcp_framework\Core\Extensions.cs,HexStringToColor,The following statement contains a magic number: g = hex.Substring (4' 2);  
Magic Number,PMDCP.Core,Extensions,C:\repos\pmdcp_framework\Core\Extensions.cs,HexStringToColor,The following statement contains a magic number: b = hex.Substring (6' 2);  
Magic Number,PMDCP.Core,Extensions,C:\repos\pmdcp_framework\Core\Extensions.cs,HexStringToColor,The following statement contains a magic number: b = hex.Substring (6' 2);  
Magic Number,PMDCP.Core,Extensions,C:\repos\pmdcp_framework\Core\Extensions.cs,HexStringToBase10Int,The following statement contains a magic number: try {  	base10value = System.Convert.ToInt32 (hex' 16);  }  catch {  	base10value = 0;  }  
Magic Number,PMDCP.Core,Extensions,C:\repos\pmdcp_framework\Core\Extensions.cs,HexStringToBase10Int,The following statement contains a magic number: base10value = System.Convert.ToInt32 (hex' 16);  
Magic Number,PMDCP.Core,Hash,C:\repos\pmdcp_framework\Core\Hash.cs,GetFileHash,The following statement contains a magic number: try {  	using (FileStream f = new FileStream (filePath' FileMode.Open' FileAccess.Read' FileShare.Read' 8192)) {  		hasher.ComputeHash (f);  		foreach (Byte hashByte in hasher.Hash) {  			buff.Append (string.Format ("{0:x2}"' hashByte));  		}  	}  }  catch {  	return "Error reading file." + new System.Random (DateTime.Now.Second * DateTime.Now.Millisecond).Next ().ToString ();  }  
Magic Number,PMDCP.Core,Hash,C:\repos\pmdcp_framework\Core\Hash.cs,GetFileHash,The following statement contains a magic number: using (FileStream f = new FileStream (filePath' FileMode.Open' FileAccess.Read' FileShare.Read' 8192)) {  	hasher.ComputeHash (f);  	foreach (Byte hashByte in hasher.Hash) {  		buff.Append (string.Format ("{0:x2}"' hashByte));  	}  }  
Magic Number,PMDCP.Core,MathFunctions,C:\repos\pmdcp_framework\Core\MathFunctions.cs,CalculatePercent,The following statement contains a magic number: return currentValue * 100 / maxValue;  
Magic Number,PMDCP.Core,MathFunctions,C:\repos\pmdcp_framework\Core\MathFunctions.cs,CalculatePercent,The following statement contains a magic number: if (maxValue != 0) {  	return currentValue * 100 / maxValue;  }  else {  	return 0;  }  
Magic Number,PMDCP.Core,MathFunctions,C:\repos\pmdcp_framework\Core\MathFunctions.cs,CalculatePercent,The following statement contains a magic number: return currentValue * 100 / maxValue;  
Magic Number,PMDCP.Core,MathFunctions,C:\repos\pmdcp_framework\Core\MathFunctions.cs,CalculatePercent,The following statement contains a magic number: return currentValue * 100 / maxValue;  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1073741824)  	size = String.Format ("{0:##.##}"' byteCount / 1073741824) + " GB";  else if (byteCount >= 1048576)  	size = String.Format ("{0:##.##}"' byteCount / 1048576) + " MB";  else if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1073741824)  	size = String.Format ("{0:##.##}"' byteCount / 1073741824) + " GB";  else if (byteCount >= 1048576)  	size = String.Format ("{0:##.##}"' byteCount / 1048576) + " MB";  else if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1073741824)  	size = String.Format ("{0:##.##}"' byteCount / 1073741824) + " GB";  else if (byteCount >= 1048576)  	size = String.Format ("{0:##.##}"' byteCount / 1048576) + " MB";  else if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1073741824)  	size = String.Format ("{0:##.##}"' byteCount / 1073741824) + " GB";  else if (byteCount >= 1048576)  	size = String.Format ("{0:##.##}"' byteCount / 1048576) + " MB";  else if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1073741824)  	size = String.Format ("{0:##.##}"' byteCount / 1073741824) + " GB";  else if (byteCount >= 1048576)  	size = String.Format ("{0:##.##}"' byteCount / 1048576) + " MB";  else if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1073741824)  	size = String.Format ("{0:##.##}"' byteCount / 1073741824) + " GB";  else if (byteCount >= 1048576)  	size = String.Format ("{0:##.##}"' byteCount / 1048576) + " MB";  else if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1073741824)  	size = String.Format ("{0:##.##}"' byteCount / 1073741824) + " GB";  else if (byteCount >= 1048576)  	size = String.Format ("{0:##.##}"' byteCount / 1048576) + " MB";  else if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: size = String.Format ("{0:##.##}"' byteCount / 1073741824) + " GB";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1048576)  	size = String.Format ("{0:##.##}"' byteCount / 1048576) + " MB";  else if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1048576)  	size = String.Format ("{0:##.##}"' byteCount / 1048576) + " MB";  else if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1048576)  	size = String.Format ("{0:##.##}"' byteCount / 1048576) + " MB";  else if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1048576)  	size = String.Format ("{0:##.##}"' byteCount / 1048576) + " MB";  else if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1048576)  	size = String.Format ("{0:##.##}"' byteCount / 1048576) + " MB";  else if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: size = String.Format ("{0:##.##}"' byteCount / 1048576) + " MB";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount >= 1024)  	size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  else if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: size = String.Format ("{0:##.##}"' byteCount / 1024) + " KB";  
Magic Number,PMDCP.Core.IO,Files,C:\repos\pmdcp_framework\Core\IO\Files.cs,GetFileSize,The following statement contains a magic number: if (byteCount > 0 && byteCount < 1024)  	size = byteCount.ToString () + " Bytes";  else  	size = byteCount.ToString () + " Bytes";  
