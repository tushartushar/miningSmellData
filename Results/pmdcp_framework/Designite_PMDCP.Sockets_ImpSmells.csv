Implementation smell,Namespace,Class,File,Method,Description
Long Method,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The method has 148 lines of code.
Complex Method,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,Cyclomatic complexity of the method is 33
Long Statement,PMDCP.Sockets.Gnp,GnpClient,C:\repos\pmdcp_framework\Sockets\Gnp\GnpClient.cs,StartReceivingLoop,The length of the statement  "	socket.BeginReceiveFrom (buffer' 0' buffer.Length' SocketFlags.None' ref tempRemoteEP' new AsyncCallback (DataReceivedCallback)' buffer); " is 137.
Long Statement,PMDCP.Sockets.Gnp,GnpClient,C:\repos\pmdcp_framework\Sockets\Gnp\GnpClient.cs,DataReceivedCallback,The length of the statement  "	socket.BeginReceiveFrom (buffer' 0' buffer.Length' SocketFlags.None' ref remoteEndPoint' new AsyncCallback (DataReceivedCallback)' buffer); " is 139.
Long Statement,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The length of the statement  "						using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) { " is 127.
Long Statement,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The length of the statement  "						using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) { " is 127.
Long Statement,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The length of the statement  "						activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write); " is 121.
Long Statement,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The length of the statement  "			ByteArray header = new ByteArray (CreatePacketHeader (4 + nameBytes.Length + (int)fileInfo.Length' MessageType.FileTransfer)); " is 126.
Long Statement,PMDCP.Sockets.Udp,UdpClient,C:\repos\pmdcp_framework\Sockets\Udp\UdpClient.cs,Listen,The length of the statement  "	socket.BeginReceiveFrom (recBuffer' 0' recBuffer.Length' SocketFlags.None' ref bindEndPoint' new AsyncCallback (MessageReceivedCallback)' recBuffer); " is 149.
Long Statement,PMDCP.Sockets.Udp,UdpClient,C:\repos\pmdcp_framework\Sockets\Udp\UdpClient.cs,StartListenLoop,The length of the statement  "	socket.BeginReceiveFrom (recBuffer' 0' recBuffer.Length' SocketFlags.None' ref bindEndPoint' new AsyncCallback (MessageReceivedCallback)' recBuffer); " is 149.
Long Statement,PMDCP.Sockets.Udp,UdpClient,C:\repos\pmdcp_framework\Sockets\Udp\UdpClient.cs,MessageReceivedCallback,The length of the statement  "	socket.BeginReceiveFrom (newBuffer' 0' newBuffer.Length' SocketFlags.None' ref bindEndPoint' new AsyncCallback (MessageReceivedCallback)' newBuffer); " is 149.
Empty Catch Block,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,TempSocketConnectCallback,The method has an empty catch block.
Empty Catch Block,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ListenCallback,The method has an empty catch block.
Empty Catch Block,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The method has an empty catch block.
Magic Number,PMDCP.Sockets.Tcp,TcpListener,C:\repos\pmdcp_framework\Sockets\Tcp\TcpListener.cs,Initialize,The following statement contains a magic number: backlog = 10;  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,TempSocketConnectCallback,The following statement contains a magic number: if (tempSocket.Connected) {  	socket = tempSocket;  	StartReceivingLoop ();  	TempSocketConnectComplete ();  }  else {  	IPAddress[] hostList = state [1] as IPAddress[];  	int currentIndex = (int)state [2];  	int port = (int)state [3];  	TryNextTempSocketConnection (hostList' currentIndex + 1' port);  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,TempSocketConnectCallback,The following statement contains a magic number: if (tempSocket.Connected) {  	socket = tempSocket;  	StartReceivingLoop ();  	TempSocketConnectComplete ();  }  else {  	IPAddress[] hostList = state [1] as IPAddress[];  	int currentIndex = (int)state [2];  	int port = (int)state [3];  	TryNextTempSocketConnection (hostList' currentIndex + 1' port);  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (inPacket) {  	// We are still receiving data from a large packet  	int newPacketSize = this.receivedPacketSize + receivedPacketSize;  	if (newPacketSize >= totalPacketSize) {  		if (packetType == MessageType.Generic) {  			// Append the remaining data  			byteBuffer.AppendTo (packetBuffer);  			this.receivedPacketSize += receivedPacketSize;  			// Transfer the data to a new byte array  			ByteArray newBuffer = new ByteArray (byteBuffer.ToArray ());  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (newBuffer' newPacketSize);  		}  		else if (packetType == MessageType.FileTransfer) {  			ByteArray fileBytes = packetBuffer.SubArray (0' totalPacketSize - this.receivedPacketSize);  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (fileBytes.ToArray ()' 0' fileBytes.Length ());  				activeTransferFileStream.Close ();  				activeTransferFileStream.Dispose ();  				activeTransferFileStream = null;  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ByteArray newBuffer = packetBuffer.SubArray (fileBytes.Length ()' packetBuffer.Length ());  			ProcessReceivedPacket (newBuffer' newBuffer.Length ());  		}  	}  	else {  		if (packetType == MessageType.Generic) {  			byteBuffer.AppendTo (packetBuffer);  		}  		else if (packetType == MessageType.FileTransfer) {  			if (activeTransferFileStream != null) {  				activeTransferFileStream.Write (packetBuffer.ToArray ()' 0' packetBuffer.Length ());  			}  		}  		this.receivedPacketSize += receivedPacketSize;  	}  }  else {  	if (IsValidPacket (packetBuffer)) {  		if (buildingPacketData) {  			byteBuffer.AppendTo (packetBuffer);  			packetBuffer = new ByteArray (byteBuffer.ToArray ());  			buildingPacketData = false;  			byteBuffer = null;  		}  		totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  		packetType = (MessageType)packetBuffer [5];  		byte[] packetCustomHeader = new byte[customHeaderSize];  		for (int i = 0; i < customHeaderSize; i++) {  			packetCustomHeader [i] = packetBuffer [6 + i];  		}  		if (receivedPacketSize == totalPacketSize) {  			// We received the entire packet and nothing else  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  		}  		else if (receivedPacketSize > totalPacketSize) {  			// We received the entire packet and the start of another packet  			ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  			ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  			if (packetType == MessageType.Generic) {  				if (DataReceived != null)  					DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  			}  			else if (packetType == MessageType.FileTransfer) {  				int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  				string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  					using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  						fileStream.Write (fileBytes' 0' fileBytes.Length);  					}  				}  			}  			inPacket = false;  			totalPacketSize = 0;  			this.receivedPacketSize = 0;  			byteBuffer = null;  			ProcessReceivedPacket (leftoverData' leftoverData.Length ());  		}  		else if (receivedPacketSize < totalPacketSize) {  			// We didn't receive the entire packet.  			if (packetType == MessageType.Generic) {  				// If it's a generic packet' store it  				byteBuffer = packetBuffer;  			}  			else if (packetType == MessageType.FileTransfer) {  				// If it's a file transfer' read the header and start writing  				int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  				activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  				FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  				if (FileTransferInitiation != null)  					FileTransferInitiation (this' e);  				if (e.Accept) {  					byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  					activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  					activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  				}  				else {  					activeTransferFileStream = null;  				}  			}  			inPacket = true;  			this.receivedPacketSize = receivedPacketSize;  		}  	}  	else {  		buildingPacketData = true;  		byteBuffer = packetBuffer;  		//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  		//if (newBuffer != null) {  		//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  		//}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (IsValidPacket (packetBuffer)) {  	if (buildingPacketData) {  		byteBuffer.AppendTo (packetBuffer);  		packetBuffer = new ByteArray (byteBuffer.ToArray ());  		buildingPacketData = false;  		byteBuffer = null;  	}  	totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  	packetType = (MessageType)packetBuffer [5];  	byte[] packetCustomHeader = new byte[customHeaderSize];  	for (int i = 0; i < customHeaderSize; i++) {  		packetCustomHeader [i] = packetBuffer [6 + i];  	}  	if (receivedPacketSize == totalPacketSize) {  		// We received the entire packet and nothing else  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  	}  	else if (receivedPacketSize > totalPacketSize) {  		// We received the entire packet and the start of another packet  		ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  		ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  		if (packetType == MessageType.Generic) {  			if (DataReceived != null)  				DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  		}  		else if (packetType == MessageType.FileTransfer) {  			int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  			string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  				using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  					fileStream.Write (fileBytes' 0' fileBytes.Length);  				}  			}  		}  		inPacket = false;  		totalPacketSize = 0;  		this.receivedPacketSize = 0;  		byteBuffer = null;  		ProcessReceivedPacket (leftoverData' leftoverData.Length ());  	}  	else if (receivedPacketSize < totalPacketSize) {  		// We didn't receive the entire packet.  		if (packetType == MessageType.Generic) {  			// If it's a generic packet' store it  			byteBuffer = packetBuffer;  		}  		else if (packetType == MessageType.FileTransfer) {  			// If it's a file transfer' read the header and start writing  			int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  			activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  			FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  			if (FileTransferInitiation != null)  				FileTransferInitiation (this' e);  			if (e.Accept) {  				byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  				activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  				activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  			}  			else {  				activeTransferFileStream = null;  			}  		}  		inPacket = true;  		this.receivedPacketSize = receivedPacketSize;  	}  }  else {  	buildingPacketData = true;  	byteBuffer = packetBuffer;  	//ByteArray newBuffer = RepairPacketBuffer(packetBuffer);  	//if (newBuffer != null) {  	//    ProcessReceivedPacket(newBuffer' newBuffer.Length());  	//}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: totalPacketSize = packetBuffer.SubArray (1' 5).ToInt () + GetHeaderSize ();  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: packetType = (MessageType)packetBuffer [5];  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: for (int i = 0; i < customHeaderSize; i++) {  	packetCustomHeader [i] = packetBuffer [6 + i];  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: packetCustomHeader [i] = packetBuffer [6 + i];  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize == totalPacketSize) {  	// We received the entire packet and nothing else  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  }  else if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize == totalPacketSize) {  	// We received the entire packet and nothing else  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  }  else if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize == totalPacketSize) {  	// We received the entire packet and nothing else  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  }  else if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize == totalPacketSize) {  	// We received the entire packet and nothing else  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  }  else if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize == totalPacketSize) {  	// We received the entire packet and nothing else  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  }  else if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize == totalPacketSize) {  	// We received the entire packet and nothing else  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  }  else if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize == totalPacketSize) {  	// We received the entire packet and nothing else  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  }  else if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize == totalPacketSize) {  	// We received the entire packet and nothing else  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  }  else if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize == totalPacketSize) {  	// We received the entire packet and nothing else  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  }  else if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize == totalPacketSize) {  	// We received the entire packet and nothing else  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  }  else if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize == totalPacketSize) {  	// We received the entire packet and nothing else  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  }  else if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize == totalPacketSize) {  	// We received the entire packet and nothing else  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  }  else if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize == totalPacketSize) {  	// We received the entire packet and nothing else  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  }  else if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.Generic) {  	if (DataReceived != null)  		DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  }  else if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.Generic) {  	if (DataReceived != null)  		DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  }  else if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.Generic) {  	if (DataReceived != null)  		DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  }  else if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.Generic) {  	if (DataReceived != null)  		DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  }  else if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (e.Accept) {  	byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  	using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  		fileStream.Write (fileBytes' 0' fileBytes.Length);  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize > totalPacketSize) {  	// We received the entire packet and the start of another packet  	ByteArray fullPacket = packetBuffer.SubArray (GetHeaderSize ()' totalPacketSize);  	ByteArray leftoverData = packetBuffer.SubArray (fullPacket.Length () + GetHeaderSize ()' packetBuffer.Length ());  	if (packetType == MessageType.Generic) {  		if (DataReceived != null)  			DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  	}  	else if (packetType == MessageType.FileTransfer) {  		int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  		string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  			using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  				fileStream.Write (fileBytes' 0' fileBytes.Length);  			}  		}  	}  	inPacket = false;  	totalPacketSize = 0;  	this.receivedPacketSize = 0;  	byteBuffer = null;  	ProcessReceivedPacket (leftoverData' leftoverData.Length ());  }  else if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.Generic) {  	if (DataReceived != null)  		DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  }  else if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.Generic) {  	if (DataReceived != null)  		DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  }  else if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.Generic) {  	if (DataReceived != null)  		DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  }  else if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.Generic) {  	if (DataReceived != null)  		DataReceived (this' new DataReceivedEventArgs (fullPacket.ToArray ()' packetCustomHeader' fullPacket.ToString ()));  }  else if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.FileTransfer) {  	int fileNameSize = fullPacket.SubArray (0' 4).ToInt ();  	string fileName = fullPacket.SubArray (4' 4 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (fileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  		using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  			fileStream.Write (fileBytes' 0' fileBytes.Length);  		}  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (e.Accept) {  	byte[] fileBytes = fullPacket.SubArray (4 + fileNameSize' fullPacket.Length ()).ToArray ();  	using (FileStream fileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write)) {  		fileStream.Write (fileBytes' 0' fileBytes.Length);  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (receivedPacketSize < totalPacketSize) {  	// We didn't receive the entire packet.  	if (packetType == MessageType.Generic) {  		// If it's a generic packet' store it  		byteBuffer = packetBuffer;  	}  	else if (packetType == MessageType.FileTransfer) {  		// If it's a file transfer' read the header and start writing  		int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  		activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  		FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  		if (FileTransferInitiation != null)  			FileTransferInitiation (this' e);  		if (e.Accept) {  			byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  			activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  			activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  		}  		else {  			activeTransferFileStream = null;  		}  	}  	inPacket = true;  	this.receivedPacketSize = receivedPacketSize;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.Generic) {  	// If it's a generic packet' store it  	byteBuffer = packetBuffer;  }  else if (packetType == MessageType.FileTransfer) {  	// If it's a file transfer' read the header and start writing  	int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  	activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  		activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  		activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  	}  	else {  		activeTransferFileStream = null;  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.Generic) {  	// If it's a generic packet' store it  	byteBuffer = packetBuffer;  }  else if (packetType == MessageType.FileTransfer) {  	// If it's a file transfer' read the header and start writing  	int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  	activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  		activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  		activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  	}  	else {  		activeTransferFileStream = null;  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.Generic) {  	// If it's a generic packet' store it  	byteBuffer = packetBuffer;  }  else if (packetType == MessageType.FileTransfer) {  	// If it's a file transfer' read the header and start writing  	int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  	activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  		activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  		activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  	}  	else {  		activeTransferFileStream = null;  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.Generic) {  	// If it's a generic packet' store it  	byteBuffer = packetBuffer;  }  else if (packetType == MessageType.FileTransfer) {  	// If it's a file transfer' read the header and start writing  	int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  	activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  		activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  		activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  	}  	else {  		activeTransferFileStream = null;  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.Generic) {  	// If it's a generic packet' store it  	byteBuffer = packetBuffer;  }  else if (packetType == MessageType.FileTransfer) {  	// If it's a file transfer' read the header and start writing  	int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  	activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  		activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  		activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  	}  	else {  		activeTransferFileStream = null;  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.FileTransfer) {  	// If it's a file transfer' read the header and start writing  	int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  	activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  		activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  		activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  	}  	else {  		activeTransferFileStream = null;  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.FileTransfer) {  	// If it's a file transfer' read the header and start writing  	int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  	activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  		activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  		activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  	}  	else {  		activeTransferFileStream = null;  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.FileTransfer) {  	// If it's a file transfer' read the header and start writing  	int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  	activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  		activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  		activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  	}  	else {  		activeTransferFileStream = null;  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.FileTransfer) {  	// If it's a file transfer' read the header and start writing  	int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  	activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  		activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  		activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  	}  	else {  		activeTransferFileStream = null;  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (packetType == MessageType.FileTransfer) {  	// If it's a file transfer' read the header and start writing  	int fileNameSize = packetBuffer.SubArray (6' 10).ToInt ();  	activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  	FileTransferInitiationEventArgs e = new FileTransferInitiationEventArgs (activeTransferFileName);  	if (FileTransferInitiation != null)  		FileTransferInitiation (this' e);  	if (e.Accept) {  		byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  		activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  		activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  	}  	else {  		activeTransferFileStream = null;  	}  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: activeTransferFileName = packetBuffer.SubArray (10' 10 + fileNameSize).ToString ();  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The following statement contains a magic number: if (e.Accept) {  	byte[] fileBytes = packetBuffer.SubArray (10 + fileNameSize' packetBuffer.Length ()).ToArray ();  	activeTransferFileStream = new FileStream (e.DestinationDirectory + e.FileName' FileMode.OpenOrCreate' FileAccess.Write);  	activeTransferFileStream.Write (fileBytes' 0' fileBytes.Length);  }  else {  	activeTransferFileStream = null;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,Listen,The following statement contains a magic number: socket.Listen (10);  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: try {  	if (socket.Connected) {  		FileInfo fileInfo = new FileInfo (filePath);  		NetworkStream ns = new NetworkStream (socket);  		byte[] nameBytes = ByteEncoder.StringToByteArray (Path.GetFileName (filePath));  		ByteArray header = new ByteArray (CreatePacketHeader (4 + nameBytes.Length + (int)fileInfo.Length' MessageType.FileTransfer));  		FileStream file = new FileStream (filePath' FileMode.Open' FileAccess.Read);  		int fullHeaderLength = header.Length () + 4 + nameBytes.Length;  		int len = (int)fileInfo.Length;  		byte[] b = new byte[fullHeaderLength];  		header.ToArray ().CopyTo (b' 0);  		ByteEncoder.IntToByteArray (nameBytes.Length).CopyTo (b' header.Length ());  		nameBytes.CopyTo (b' header.Length () + 4);  		int offset = fullHeaderLength;  		int bytesRead = 0;  		ns.Write (b' 0' b.Length);  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		b = new Byte[1024];  		while (bytesRead < len) {  			bytesRead += file.Read (b' 0' (b.Length + bytesRead < len) ? b.Length : (len - bytesRead));  			//socket.Send(b' 0' b.Length' SocketFlags.None);  			//socket.Send(b' 0' b.Length' SocketFlags.None);  			ns.Write (b' 0' b.Length);  			if (offset != 0) {  				offset = 0;  			}  			b = new byte[1024];  			file.Seek (bytesRead' SeekOrigin.Begin);  		}  		ns.Close ();  		ns.Dispose ();  	}  }  catch {  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: try {  	if (socket.Connected) {  		FileInfo fileInfo = new FileInfo (filePath);  		NetworkStream ns = new NetworkStream (socket);  		byte[] nameBytes = ByteEncoder.StringToByteArray (Path.GetFileName (filePath));  		ByteArray header = new ByteArray (CreatePacketHeader (4 + nameBytes.Length + (int)fileInfo.Length' MessageType.FileTransfer));  		FileStream file = new FileStream (filePath' FileMode.Open' FileAccess.Read);  		int fullHeaderLength = header.Length () + 4 + nameBytes.Length;  		int len = (int)fileInfo.Length;  		byte[] b = new byte[fullHeaderLength];  		header.ToArray ().CopyTo (b' 0);  		ByteEncoder.IntToByteArray (nameBytes.Length).CopyTo (b' header.Length ());  		nameBytes.CopyTo (b' header.Length () + 4);  		int offset = fullHeaderLength;  		int bytesRead = 0;  		ns.Write (b' 0' b.Length);  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		b = new Byte[1024];  		while (bytesRead < len) {  			bytesRead += file.Read (b' 0' (b.Length + bytesRead < len) ? b.Length : (len - bytesRead));  			//socket.Send(b' 0' b.Length' SocketFlags.None);  			//socket.Send(b' 0' b.Length' SocketFlags.None);  			ns.Write (b' 0' b.Length);  			if (offset != 0) {  				offset = 0;  			}  			b = new byte[1024];  			file.Seek (bytesRead' SeekOrigin.Begin);  		}  		ns.Close ();  		ns.Dispose ();  	}  }  catch {  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: try {  	if (socket.Connected) {  		FileInfo fileInfo = new FileInfo (filePath);  		NetworkStream ns = new NetworkStream (socket);  		byte[] nameBytes = ByteEncoder.StringToByteArray (Path.GetFileName (filePath));  		ByteArray header = new ByteArray (CreatePacketHeader (4 + nameBytes.Length + (int)fileInfo.Length' MessageType.FileTransfer));  		FileStream file = new FileStream (filePath' FileMode.Open' FileAccess.Read);  		int fullHeaderLength = header.Length () + 4 + nameBytes.Length;  		int len = (int)fileInfo.Length;  		byte[] b = new byte[fullHeaderLength];  		header.ToArray ().CopyTo (b' 0);  		ByteEncoder.IntToByteArray (nameBytes.Length).CopyTo (b' header.Length ());  		nameBytes.CopyTo (b' header.Length () + 4);  		int offset = fullHeaderLength;  		int bytesRead = 0;  		ns.Write (b' 0' b.Length);  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		b = new Byte[1024];  		while (bytesRead < len) {  			bytesRead += file.Read (b' 0' (b.Length + bytesRead < len) ? b.Length : (len - bytesRead));  			//socket.Send(b' 0' b.Length' SocketFlags.None);  			//socket.Send(b' 0' b.Length' SocketFlags.None);  			ns.Write (b' 0' b.Length);  			if (offset != 0) {  				offset = 0;  			}  			b = new byte[1024];  			file.Seek (bytesRead' SeekOrigin.Begin);  		}  		ns.Close ();  		ns.Dispose ();  	}  }  catch {  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: try {  	if (socket.Connected) {  		FileInfo fileInfo = new FileInfo (filePath);  		NetworkStream ns = new NetworkStream (socket);  		byte[] nameBytes = ByteEncoder.StringToByteArray (Path.GetFileName (filePath));  		ByteArray header = new ByteArray (CreatePacketHeader (4 + nameBytes.Length + (int)fileInfo.Length' MessageType.FileTransfer));  		FileStream file = new FileStream (filePath' FileMode.Open' FileAccess.Read);  		int fullHeaderLength = header.Length () + 4 + nameBytes.Length;  		int len = (int)fileInfo.Length;  		byte[] b = new byte[fullHeaderLength];  		header.ToArray ().CopyTo (b' 0);  		ByteEncoder.IntToByteArray (nameBytes.Length).CopyTo (b' header.Length ());  		nameBytes.CopyTo (b' header.Length () + 4);  		int offset = fullHeaderLength;  		int bytesRead = 0;  		ns.Write (b' 0' b.Length);  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		b = new Byte[1024];  		while (bytesRead < len) {  			bytesRead += file.Read (b' 0' (b.Length + bytesRead < len) ? b.Length : (len - bytesRead));  			//socket.Send(b' 0' b.Length' SocketFlags.None);  			//socket.Send(b' 0' b.Length' SocketFlags.None);  			ns.Write (b' 0' b.Length);  			if (offset != 0) {  				offset = 0;  			}  			b = new byte[1024];  			file.Seek (bytesRead' SeekOrigin.Begin);  		}  		ns.Close ();  		ns.Dispose ();  	}  }  catch {  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: try {  	if (socket.Connected) {  		FileInfo fileInfo = new FileInfo (filePath);  		NetworkStream ns = new NetworkStream (socket);  		byte[] nameBytes = ByteEncoder.StringToByteArray (Path.GetFileName (filePath));  		ByteArray header = new ByteArray (CreatePacketHeader (4 + nameBytes.Length + (int)fileInfo.Length' MessageType.FileTransfer));  		FileStream file = new FileStream (filePath' FileMode.Open' FileAccess.Read);  		int fullHeaderLength = header.Length () + 4 + nameBytes.Length;  		int len = (int)fileInfo.Length;  		byte[] b = new byte[fullHeaderLength];  		header.ToArray ().CopyTo (b' 0);  		ByteEncoder.IntToByteArray (nameBytes.Length).CopyTo (b' header.Length ());  		nameBytes.CopyTo (b' header.Length () + 4);  		int offset = fullHeaderLength;  		int bytesRead = 0;  		ns.Write (b' 0' b.Length);  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		b = new Byte[1024];  		while (bytesRead < len) {  			bytesRead += file.Read (b' 0' (b.Length + bytesRead < len) ? b.Length : (len - bytesRead));  			//socket.Send(b' 0' b.Length' SocketFlags.None);  			//socket.Send(b' 0' b.Length' SocketFlags.None);  			ns.Write (b' 0' b.Length);  			if (offset != 0) {  				offset = 0;  			}  			b = new byte[1024];  			file.Seek (bytesRead' SeekOrigin.Begin);  		}  		ns.Close ();  		ns.Dispose ();  	}  }  catch {  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: if (socket.Connected) {  	FileInfo fileInfo = new FileInfo (filePath);  	NetworkStream ns = new NetworkStream (socket);  	byte[] nameBytes = ByteEncoder.StringToByteArray (Path.GetFileName (filePath));  	ByteArray header = new ByteArray (CreatePacketHeader (4 + nameBytes.Length + (int)fileInfo.Length' MessageType.FileTransfer));  	FileStream file = new FileStream (filePath' FileMode.Open' FileAccess.Read);  	int fullHeaderLength = header.Length () + 4 + nameBytes.Length;  	int len = (int)fileInfo.Length;  	byte[] b = new byte[fullHeaderLength];  	header.ToArray ().CopyTo (b' 0);  	ByteEncoder.IntToByteArray (nameBytes.Length).CopyTo (b' header.Length ());  	nameBytes.CopyTo (b' header.Length () + 4);  	int offset = fullHeaderLength;  	int bytesRead = 0;  	ns.Write (b' 0' b.Length);  	//socket.Send(b' 0' b.Length' SocketFlags.None);  	b = new Byte[1024];  	while (bytesRead < len) {  		bytesRead += file.Read (b' 0' (b.Length + bytesRead < len) ? b.Length : (len - bytesRead));  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		ns.Write (b' 0' b.Length);  		if (offset != 0) {  			offset = 0;  		}  		b = new byte[1024];  		file.Seek (bytesRead' SeekOrigin.Begin);  	}  	ns.Close ();  	ns.Dispose ();  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: if (socket.Connected) {  	FileInfo fileInfo = new FileInfo (filePath);  	NetworkStream ns = new NetworkStream (socket);  	byte[] nameBytes = ByteEncoder.StringToByteArray (Path.GetFileName (filePath));  	ByteArray header = new ByteArray (CreatePacketHeader (4 + nameBytes.Length + (int)fileInfo.Length' MessageType.FileTransfer));  	FileStream file = new FileStream (filePath' FileMode.Open' FileAccess.Read);  	int fullHeaderLength = header.Length () + 4 + nameBytes.Length;  	int len = (int)fileInfo.Length;  	byte[] b = new byte[fullHeaderLength];  	header.ToArray ().CopyTo (b' 0);  	ByteEncoder.IntToByteArray (nameBytes.Length).CopyTo (b' header.Length ());  	nameBytes.CopyTo (b' header.Length () + 4);  	int offset = fullHeaderLength;  	int bytesRead = 0;  	ns.Write (b' 0' b.Length);  	//socket.Send(b' 0' b.Length' SocketFlags.None);  	b = new Byte[1024];  	while (bytesRead < len) {  		bytesRead += file.Read (b' 0' (b.Length + bytesRead < len) ? b.Length : (len - bytesRead));  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		ns.Write (b' 0' b.Length);  		if (offset != 0) {  			offset = 0;  		}  		b = new byte[1024];  		file.Seek (bytesRead' SeekOrigin.Begin);  	}  	ns.Close ();  	ns.Dispose ();  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: if (socket.Connected) {  	FileInfo fileInfo = new FileInfo (filePath);  	NetworkStream ns = new NetworkStream (socket);  	byte[] nameBytes = ByteEncoder.StringToByteArray (Path.GetFileName (filePath));  	ByteArray header = new ByteArray (CreatePacketHeader (4 + nameBytes.Length + (int)fileInfo.Length' MessageType.FileTransfer));  	FileStream file = new FileStream (filePath' FileMode.Open' FileAccess.Read);  	int fullHeaderLength = header.Length () + 4 + nameBytes.Length;  	int len = (int)fileInfo.Length;  	byte[] b = new byte[fullHeaderLength];  	header.ToArray ().CopyTo (b' 0);  	ByteEncoder.IntToByteArray (nameBytes.Length).CopyTo (b' header.Length ());  	nameBytes.CopyTo (b' header.Length () + 4);  	int offset = fullHeaderLength;  	int bytesRead = 0;  	ns.Write (b' 0' b.Length);  	//socket.Send(b' 0' b.Length' SocketFlags.None);  	b = new Byte[1024];  	while (bytesRead < len) {  		bytesRead += file.Read (b' 0' (b.Length + bytesRead < len) ? b.Length : (len - bytesRead));  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		ns.Write (b' 0' b.Length);  		if (offset != 0) {  			offset = 0;  		}  		b = new byte[1024];  		file.Seek (bytesRead' SeekOrigin.Begin);  	}  	ns.Close ();  	ns.Dispose ();  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: if (socket.Connected) {  	FileInfo fileInfo = new FileInfo (filePath);  	NetworkStream ns = new NetworkStream (socket);  	byte[] nameBytes = ByteEncoder.StringToByteArray (Path.GetFileName (filePath));  	ByteArray header = new ByteArray (CreatePacketHeader (4 + nameBytes.Length + (int)fileInfo.Length' MessageType.FileTransfer));  	FileStream file = new FileStream (filePath' FileMode.Open' FileAccess.Read);  	int fullHeaderLength = header.Length () + 4 + nameBytes.Length;  	int len = (int)fileInfo.Length;  	byte[] b = new byte[fullHeaderLength];  	header.ToArray ().CopyTo (b' 0);  	ByteEncoder.IntToByteArray (nameBytes.Length).CopyTo (b' header.Length ());  	nameBytes.CopyTo (b' header.Length () + 4);  	int offset = fullHeaderLength;  	int bytesRead = 0;  	ns.Write (b' 0' b.Length);  	//socket.Send(b' 0' b.Length' SocketFlags.None);  	b = new Byte[1024];  	while (bytesRead < len) {  		bytesRead += file.Read (b' 0' (b.Length + bytesRead < len) ? b.Length : (len - bytesRead));  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		ns.Write (b' 0' b.Length);  		if (offset != 0) {  			offset = 0;  		}  		b = new byte[1024];  		file.Seek (bytesRead' SeekOrigin.Begin);  	}  	ns.Close ();  	ns.Dispose ();  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: if (socket.Connected) {  	FileInfo fileInfo = new FileInfo (filePath);  	NetworkStream ns = new NetworkStream (socket);  	byte[] nameBytes = ByteEncoder.StringToByteArray (Path.GetFileName (filePath));  	ByteArray header = new ByteArray (CreatePacketHeader (4 + nameBytes.Length + (int)fileInfo.Length' MessageType.FileTransfer));  	FileStream file = new FileStream (filePath' FileMode.Open' FileAccess.Read);  	int fullHeaderLength = header.Length () + 4 + nameBytes.Length;  	int len = (int)fileInfo.Length;  	byte[] b = new byte[fullHeaderLength];  	header.ToArray ().CopyTo (b' 0);  	ByteEncoder.IntToByteArray (nameBytes.Length).CopyTo (b' header.Length ());  	nameBytes.CopyTo (b' header.Length () + 4);  	int offset = fullHeaderLength;  	int bytesRead = 0;  	ns.Write (b' 0' b.Length);  	//socket.Send(b' 0' b.Length' SocketFlags.None);  	b = new Byte[1024];  	while (bytesRead < len) {  		bytesRead += file.Read (b' 0' (b.Length + bytesRead < len) ? b.Length : (len - bytesRead));  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		//socket.Send(b' 0' b.Length' SocketFlags.None);  		ns.Write (b' 0' b.Length);  		if (offset != 0) {  			offset = 0;  		}  		b = new byte[1024];  		file.Seek (bytesRead' SeekOrigin.Begin);  	}  	ns.Close ();  	ns.Dispose ();  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: nameBytes.CopyTo (b' header.Length () + 4);  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: b = new Byte[1024];  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: while (bytesRead < len) {  	bytesRead += file.Read (b' 0' (b.Length + bytesRead < len) ? b.Length : (len - bytesRead));  	//socket.Send(b' 0' b.Length' SocketFlags.None);  	//socket.Send(b' 0' b.Length' SocketFlags.None);  	ns.Write (b' 0' b.Length);  	if (offset != 0) {  		offset = 0;  	}  	b = new byte[1024];  	file.Seek (bytesRead' SeekOrigin.Begin);  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,SendFile,The following statement contains a magic number: b = new byte[1024];  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,GetHeaderSize,The following statement contains a magic number: return 1 // [byte] Constant indicating start of packet  + 4 // [int32] Size of packet  + 1 // [byte] Packet type  + customHeaderSize// custom header  ;  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,CreatePacketHeader,The following statement contains a magic number: array [0] = 255;  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,CreatePacketHeader,The following statement contains a magic number: array [5] = (byte)messageType;  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,CreatePacketHeader,The following statement contains a magic number: array [0] = 255;  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,CreatePacketHeader,The following statement contains a magic number: array [5] = (byte)messageType;  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,IsValidPacket,The following statement contains a magic number: if (buildingPacketData == false) {  	if (packetBuffer.Length () <= 4 + GetHeaderSize ()) {  		return false;  	}  	if (packetBuffer.IsEmpty (0' 4)) {  		return false;  	}  	return true;  }  else {  	if (byteBuffer.Length () + packetBuffer.Length () <= 4 + GetHeaderSize ()) {  		return false;  	}  	return true;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,IsValidPacket,The following statement contains a magic number: if (buildingPacketData == false) {  	if (packetBuffer.Length () <= 4 + GetHeaderSize ()) {  		return false;  	}  	if (packetBuffer.IsEmpty (0' 4)) {  		return false;  	}  	return true;  }  else {  	if (byteBuffer.Length () + packetBuffer.Length () <= 4 + GetHeaderSize ()) {  		return false;  	}  	return true;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,IsValidPacket,The following statement contains a magic number: if (buildingPacketData == false) {  	if (packetBuffer.Length () <= 4 + GetHeaderSize ()) {  		return false;  	}  	if (packetBuffer.IsEmpty (0' 4)) {  		return false;  	}  	return true;  }  else {  	if (byteBuffer.Length () + packetBuffer.Length () <= 4 + GetHeaderSize ()) {  		return false;  	}  	return true;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,IsValidPacket,The following statement contains a magic number: if (packetBuffer.Length () <= 4 + GetHeaderSize ()) {  	return false;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,IsValidPacket,The following statement contains a magic number: if (packetBuffer.IsEmpty (0' 4)) {  	return false;  }  
Magic Number,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,IsValidPacket,The following statement contains a magic number: if (byteBuffer.Length () + packetBuffer.Length () <= 4 + GetHeaderSize ()) {  	return false;  }  
Duplicate Code,PMDCP.Sockets.Tcp,TcpClient,C:\repos\pmdcp_framework\Sockets\Tcp\TcpClient.cs,ProcessReceivedPacket,The method contains a code clone-set at the following line numbers (starting from the method definition): ((64' 84)' (90' 110))
