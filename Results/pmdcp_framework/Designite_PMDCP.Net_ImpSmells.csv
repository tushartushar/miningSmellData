Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_ProgressChanged,Cyclomatic complexity of the method is 12
Complex Method,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,Cyclomatic complexity of the method is 9
Complex Method,PMDCP.Net,PostSubmitter,C:\repos\pmdcp_framework\Net\PostSubmitter.cs,PostData,Cyclomatic complexity of the method is 10
Long Statement,PMDCP.Net,UPnP,C:\repos\pmdcp_framework\Net\UPnP.cs,Discover,The length of the statement  "	string req = "M-SEARCH * HTTP/1.1\r\n" + "HOST: 239.255.255.250:1900\r\n" + "ST:upnp:rootdevice\r\n" + "MAN:\"ssdp:discover\"\r\n" + "MX:3\r\n\r\n"; " is 148.
Long Statement,PMDCP.Net,UPnP,C:\repos\pmdcp_framework\Net\UPnP.cs,GetServiceUrl,The length of the statement  "	XmlNode node = desc.SelectSingleNode ("//tns:service[tns:serviceType=\"urn:schemas-upnp-org:service:WANIPConnection:1\"]/tns:controlURL/text()"' nsMgr); " is 152.
Long Statement,PMDCP.Net,UPnP,C:\repos\pmdcp_framework\Net\UPnP.cs,GetServiceUrl,The length of the statement  "	XmlNode eventnode = desc.SelectSingleNode ("//tns:service[tns:serviceType=\"urn:schemas-upnp-org:service:WANIPConnection:1\"]/tns:eventSubURL/text()"' nsMgr); " is 158.
Long Statement,PMDCP.Net,UPnP,C:\repos\pmdcp_framework\Net\UPnP.cs,ForwardPort,The length of the statement  "	XmlDocument xdoc = SOAPRequest (_serviceUrl' "<u:AddPortMapping xmlns:u=\"urn:schemas-upnp-org:service:WANIPConnection:1\">" + "<NewRemoteHost></NewRemoteHost><NewExternalPort>" + port.ToString () + "</NewExternalPort><NewProtocol>" + protocol.ToString ().ToUpper () + "</NewProtocol>" + "<NewInternalPort>" + port.ToString () + "</NewInternalPort><NewInternalClient>" + Dns.GetHostAddresses (Dns.GetHostName ()) [0].ToString () + "</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>" + description + "</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping>"' "AddPortMapping"); " is 630.
Long Statement,PMDCP.Net,UPnP,C:\repos\pmdcp_framework\Net\UPnP.cs,DeleteForwardingRule,The length of the statement  "	XmlDocument xdoc = SOAPRequest (_serviceUrl' "<u:DeletePortMapping xmlns:u=\"urn:schemas-upnp-org:service:WANIPConnection:1\">" + "<NewRemoteHost>" + "</NewRemoteHost>" + "<NewExternalPort>" + port + "</NewExternalPort>" + "<NewProtocol>" + protocol.ToString ().ToUpper () + "</NewProtocol>" + "</u:DeletePortMapping>"' "DeletePortMapping"); " is 341.
Long Statement,PMDCP.Net,UPnP,C:\repos\pmdcp_framework\Net\UPnP.cs,GetExternalIP,The length of the statement  "	XmlDocument xdoc = SOAPRequest (_serviceUrl' "<u:GetExternalIPAddress xmlns:u=\"urn:schemas-upnp-org:service:WANIPConnection:1\">" + "</u:GetExternalIPAddress>"' "GetExternalIPAddress"); " is 186.
Long Statement,PMDCP.Net,UPnP,C:\repos\pmdcp_framework\Net\UPnP.cs,SOAPRequest,The length of the statement  "	string req = "<?xml version=\"1.0\"?>" + "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">" + "<s:Body>" + soap + "</s:Body>" + "</s:Envelope>"; " is 224.
Empty Catch Block,PMDCP.Net,NetTools,C:\repos\pmdcp_framework\Net\NetTools.cs,IsConnected,The method has an empty catch block.
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: using (Stream stream = ((object[])e.Argument) [1] as Stream) {  	try {  		HttpWebResponse theResponse;  		HttpWebRequest theRequest;  		//Checks if the file exist  		try {  			theRequest = (HttpWebRequest)WebRequest.Create (downloadPath);  			theResponse = (HttpWebResponse)theRequest.GetResponse ();  		}  		catch (Exception ex) {  			downloadFailed = true;  			downloadBWorker.ReportProgress (0' new object[] {  				"error"'  				ex  			});  			return;  		}  		long length = theResponse.ContentLength;  		//Size of the response (in bytes)  		//FileStream writeStream = new FileStream(filePath + ".tmp"' FileMode.Create);  		//Replacement for Stream.Position (webResponse stream doesn't support seek)  		long nRead = 0;  		do {  			byte[] readBytes = new byte[1024];  			int bytesread = theResponse.GetResponseStream ().Read (readBytes' 0' 1024);  			nRead += bytesread;  			if (bytesread == 0)  				break;  			int percent = (int)MathFunctions.CalculatePercent (nRead' length);  			stream.Write (readBytes' 0' bytesread);  			if (DownloadUpdate != null) {  				downloadBWorker.ReportProgress (percent' new object[] {  					"downloading"'  					new FileDownloadingEventArgs (length' ""' percent' nRead)  				});  			}  		}  		while (true);  		//Close the streams  		theResponse.GetResponseStream ().Close ();  		if (DownloadComplete != null) {  			downloadBWorker.ReportProgress (100' new object[] {  				"done"'  				new FileDownloadingEventArgs (length' ""' 100' length)  			});  		}  	}  	catch (Exception ex) {  		downloadBWorker.ReportProgress (0' new object[] {  			"error"'  			ex  		});  	}  }  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: using (Stream stream = ((object[])e.Argument) [1] as Stream) {  	try {  		HttpWebResponse theResponse;  		HttpWebRequest theRequest;  		//Checks if the file exist  		try {  			theRequest = (HttpWebRequest)WebRequest.Create (downloadPath);  			theResponse = (HttpWebResponse)theRequest.GetResponse ();  		}  		catch (Exception ex) {  			downloadFailed = true;  			downloadBWorker.ReportProgress (0' new object[] {  				"error"'  				ex  			});  			return;  		}  		long length = theResponse.ContentLength;  		//Size of the response (in bytes)  		//FileStream writeStream = new FileStream(filePath + ".tmp"' FileMode.Create);  		//Replacement for Stream.Position (webResponse stream doesn't support seek)  		long nRead = 0;  		do {  			byte[] readBytes = new byte[1024];  			int bytesread = theResponse.GetResponseStream ().Read (readBytes' 0' 1024);  			nRead += bytesread;  			if (bytesread == 0)  				break;  			int percent = (int)MathFunctions.CalculatePercent (nRead' length);  			stream.Write (readBytes' 0' bytesread);  			if (DownloadUpdate != null) {  				downloadBWorker.ReportProgress (percent' new object[] {  					"downloading"'  					new FileDownloadingEventArgs (length' ""' percent' nRead)  				});  			}  		}  		while (true);  		//Close the streams  		theResponse.GetResponseStream ().Close ();  		if (DownloadComplete != null) {  			downloadBWorker.ReportProgress (100' new object[] {  				"done"'  				new FileDownloadingEventArgs (length' ""' 100' length)  			});  		}  	}  	catch (Exception ex) {  		downloadBWorker.ReportProgress (0' new object[] {  			"error"'  			ex  		});  	}  }  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: using (Stream stream = ((object[])e.Argument) [1] as Stream) {  	try {  		HttpWebResponse theResponse;  		HttpWebRequest theRequest;  		//Checks if the file exist  		try {  			theRequest = (HttpWebRequest)WebRequest.Create (downloadPath);  			theResponse = (HttpWebResponse)theRequest.GetResponse ();  		}  		catch (Exception ex) {  			downloadFailed = true;  			downloadBWorker.ReportProgress (0' new object[] {  				"error"'  				ex  			});  			return;  		}  		long length = theResponse.ContentLength;  		//Size of the response (in bytes)  		//FileStream writeStream = new FileStream(filePath + ".tmp"' FileMode.Create);  		//Replacement for Stream.Position (webResponse stream doesn't support seek)  		long nRead = 0;  		do {  			byte[] readBytes = new byte[1024];  			int bytesread = theResponse.GetResponseStream ().Read (readBytes' 0' 1024);  			nRead += bytesread;  			if (bytesread == 0)  				break;  			int percent = (int)MathFunctions.CalculatePercent (nRead' length);  			stream.Write (readBytes' 0' bytesread);  			if (DownloadUpdate != null) {  				downloadBWorker.ReportProgress (percent' new object[] {  					"downloading"'  					new FileDownloadingEventArgs (length' ""' percent' nRead)  				});  			}  		}  		while (true);  		//Close the streams  		theResponse.GetResponseStream ().Close ();  		if (DownloadComplete != null) {  			downloadBWorker.ReportProgress (100' new object[] {  				"done"'  				new FileDownloadingEventArgs (length' ""' 100' length)  			});  		}  	}  	catch (Exception ex) {  		downloadBWorker.ReportProgress (0' new object[] {  			"error"'  			ex  		});  	}  }  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: using (Stream stream = ((object[])e.Argument) [1] as Stream) {  	try {  		HttpWebResponse theResponse;  		HttpWebRequest theRequest;  		//Checks if the file exist  		try {  			theRequest = (HttpWebRequest)WebRequest.Create (downloadPath);  			theResponse = (HttpWebResponse)theRequest.GetResponse ();  		}  		catch (Exception ex) {  			downloadFailed = true;  			downloadBWorker.ReportProgress (0' new object[] {  				"error"'  				ex  			});  			return;  		}  		long length = theResponse.ContentLength;  		//Size of the response (in bytes)  		//FileStream writeStream = new FileStream(filePath + ".tmp"' FileMode.Create);  		//Replacement for Stream.Position (webResponse stream doesn't support seek)  		long nRead = 0;  		do {  			byte[] readBytes = new byte[1024];  			int bytesread = theResponse.GetResponseStream ().Read (readBytes' 0' 1024);  			nRead += bytesread;  			if (bytesread == 0)  				break;  			int percent = (int)MathFunctions.CalculatePercent (nRead' length);  			stream.Write (readBytes' 0' bytesread);  			if (DownloadUpdate != null) {  				downloadBWorker.ReportProgress (percent' new object[] {  					"downloading"'  					new FileDownloadingEventArgs (length' ""' percent' nRead)  				});  			}  		}  		while (true);  		//Close the streams  		theResponse.GetResponseStream ().Close ();  		if (DownloadComplete != null) {  			downloadBWorker.ReportProgress (100' new object[] {  				"done"'  				new FileDownloadingEventArgs (length' ""' 100' length)  			});  		}  	}  	catch (Exception ex) {  		downloadBWorker.ReportProgress (0' new object[] {  			"error"'  			ex  		});  	}  }  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: try {  	HttpWebResponse theResponse;  	HttpWebRequest theRequest;  	//Checks if the file exist  	try {  		theRequest = (HttpWebRequest)WebRequest.Create (downloadPath);  		theResponse = (HttpWebResponse)theRequest.GetResponse ();  	}  	catch (Exception ex) {  		downloadFailed = true;  		downloadBWorker.ReportProgress (0' new object[] {  			"error"'  			ex  		});  		return;  	}  	long length = theResponse.ContentLength;  	//Size of the response (in bytes)  	//FileStream writeStream = new FileStream(filePath + ".tmp"' FileMode.Create);  	//Replacement for Stream.Position (webResponse stream doesn't support seek)  	long nRead = 0;  	do {  		byte[] readBytes = new byte[1024];  		int bytesread = theResponse.GetResponseStream ().Read (readBytes' 0' 1024);  		nRead += bytesread;  		if (bytesread == 0)  			break;  		int percent = (int)MathFunctions.CalculatePercent (nRead' length);  		stream.Write (readBytes' 0' bytesread);  		if (DownloadUpdate != null) {  			downloadBWorker.ReportProgress (percent' new object[] {  				"downloading"'  				new FileDownloadingEventArgs (length' ""' percent' nRead)  			});  		}  	}  	while (true);  	//Close the streams  	theResponse.GetResponseStream ().Close ();  	if (DownloadComplete != null) {  		downloadBWorker.ReportProgress (100' new object[] {  			"done"'  			new FileDownloadingEventArgs (length' ""' 100' length)  		});  	}  }  catch (Exception ex) {  	downloadBWorker.ReportProgress (0' new object[] {  		"error"'  		ex  	});  }  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: try {  	HttpWebResponse theResponse;  	HttpWebRequest theRequest;  	//Checks if the file exist  	try {  		theRequest = (HttpWebRequest)WebRequest.Create (downloadPath);  		theResponse = (HttpWebResponse)theRequest.GetResponse ();  	}  	catch (Exception ex) {  		downloadFailed = true;  		downloadBWorker.ReportProgress (0' new object[] {  			"error"'  			ex  		});  		return;  	}  	long length = theResponse.ContentLength;  	//Size of the response (in bytes)  	//FileStream writeStream = new FileStream(filePath + ".tmp"' FileMode.Create);  	//Replacement for Stream.Position (webResponse stream doesn't support seek)  	long nRead = 0;  	do {  		byte[] readBytes = new byte[1024];  		int bytesread = theResponse.GetResponseStream ().Read (readBytes' 0' 1024);  		nRead += bytesread;  		if (bytesread == 0)  			break;  		int percent = (int)MathFunctions.CalculatePercent (nRead' length);  		stream.Write (readBytes' 0' bytesread);  		if (DownloadUpdate != null) {  			downloadBWorker.ReportProgress (percent' new object[] {  				"downloading"'  				new FileDownloadingEventArgs (length' ""' percent' nRead)  			});  		}  	}  	while (true);  	//Close the streams  	theResponse.GetResponseStream ().Close ();  	if (DownloadComplete != null) {  		downloadBWorker.ReportProgress (100' new object[] {  			"done"'  			new FileDownloadingEventArgs (length' ""' 100' length)  		});  	}  }  catch (Exception ex) {  	downloadBWorker.ReportProgress (0' new object[] {  		"error"'  		ex  	});  }  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: try {  	HttpWebResponse theResponse;  	HttpWebRequest theRequest;  	//Checks if the file exist  	try {  		theRequest = (HttpWebRequest)WebRequest.Create (downloadPath);  		theResponse = (HttpWebResponse)theRequest.GetResponse ();  	}  	catch (Exception ex) {  		downloadFailed = true;  		downloadBWorker.ReportProgress (0' new object[] {  			"error"'  			ex  		});  		return;  	}  	long length = theResponse.ContentLength;  	//Size of the response (in bytes)  	//FileStream writeStream = new FileStream(filePath + ".tmp"' FileMode.Create);  	//Replacement for Stream.Position (webResponse stream doesn't support seek)  	long nRead = 0;  	do {  		byte[] readBytes = new byte[1024];  		int bytesread = theResponse.GetResponseStream ().Read (readBytes' 0' 1024);  		nRead += bytesread;  		if (bytesread == 0)  			break;  		int percent = (int)MathFunctions.CalculatePercent (nRead' length);  		stream.Write (readBytes' 0' bytesread);  		if (DownloadUpdate != null) {  			downloadBWorker.ReportProgress (percent' new object[] {  				"downloading"'  				new FileDownloadingEventArgs (length' ""' percent' nRead)  			});  		}  	}  	while (true);  	//Close the streams  	theResponse.GetResponseStream ().Close ();  	if (DownloadComplete != null) {  		downloadBWorker.ReportProgress (100' new object[] {  			"done"'  			new FileDownloadingEventArgs (length' ""' 100' length)  		});  	}  }  catch (Exception ex) {  	downloadBWorker.ReportProgress (0' new object[] {  		"error"'  		ex  	});  }  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: try {  	HttpWebResponse theResponse;  	HttpWebRequest theRequest;  	//Checks if the file exist  	try {  		theRequest = (HttpWebRequest)WebRequest.Create (downloadPath);  		theResponse = (HttpWebResponse)theRequest.GetResponse ();  	}  	catch (Exception ex) {  		downloadFailed = true;  		downloadBWorker.ReportProgress (0' new object[] {  			"error"'  			ex  		});  		return;  	}  	long length = theResponse.ContentLength;  	//Size of the response (in bytes)  	//FileStream writeStream = new FileStream(filePath + ".tmp"' FileMode.Create);  	//Replacement for Stream.Position (webResponse stream doesn't support seek)  	long nRead = 0;  	do {  		byte[] readBytes = new byte[1024];  		int bytesread = theResponse.GetResponseStream ().Read (readBytes' 0' 1024);  		nRead += bytesread;  		if (bytesread == 0)  			break;  		int percent = (int)MathFunctions.CalculatePercent (nRead' length);  		stream.Write (readBytes' 0' bytesread);  		if (DownloadUpdate != null) {  			downloadBWorker.ReportProgress (percent' new object[] {  				"downloading"'  				new FileDownloadingEventArgs (length' ""' percent' nRead)  			});  		}  	}  	while (true);  	//Close the streams  	theResponse.GetResponseStream ().Close ();  	if (DownloadComplete != null) {  		downloadBWorker.ReportProgress (100' new object[] {  			"done"'  			new FileDownloadingEventArgs (length' ""' 100' length)  		});  	}  }  catch (Exception ex) {  	downloadBWorker.ReportProgress (0' new object[] {  		"error"'  		ex  	});  }  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: do {  	byte[] readBytes = new byte[1024];  	int bytesread = theResponse.GetResponseStream ().Read (readBytes' 0' 1024);  	nRead += bytesread;  	if (bytesread == 0)  		break;  	int percent = (int)MathFunctions.CalculatePercent (nRead' length);  	stream.Write (readBytes' 0' bytesread);  	if (DownloadUpdate != null) {  		downloadBWorker.ReportProgress (percent' new object[] {  			"downloading"'  			new FileDownloadingEventArgs (length' ""' percent' nRead)  		});  	}  }  while (true);  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: do {  	byte[] readBytes = new byte[1024];  	int bytesread = theResponse.GetResponseStream ().Read (readBytes' 0' 1024);  	nRead += bytesread;  	if (bytesread == 0)  		break;  	int percent = (int)MathFunctions.CalculatePercent (nRead' length);  	stream.Write (readBytes' 0' bytesread);  	if (DownloadUpdate != null) {  		downloadBWorker.ReportProgress (percent' new object[] {  			"downloading"'  			new FileDownloadingEventArgs (length' ""' percent' nRead)  		});  	}  }  while (true);  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: if (DownloadComplete != null) {  	downloadBWorker.ReportProgress (100' new object[] {  		"done"'  		new FileDownloadingEventArgs (length' ""' 100' length)  	});  }  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: if (DownloadComplete != null) {  	downloadBWorker.ReportProgress (100' new object[] {  		"done"'  		new FileDownloadingEventArgs (length' ""' 100' length)  	});  }  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: downloadBWorker.ReportProgress (100' new object[] {  	"done"'  	new FileDownloadingEventArgs (length' ""' 100' length)  });  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_DoWork,The following statement contains a magic number: downloadBWorker.ReportProgress (100' new object[] {  	"done"'  	new FileDownloadingEventArgs (length' ""' 100' length)  });  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,DownloadFileQuick,The following statement contains a magic number: do {  	byte[] readBytes = new byte[1024];  	int bytesread = theResponse.GetResponseStream ().Read (readBytes' 0' 1024);  	nRead += bytesread;  	if (bytesread == 0)  		break;  	//int percent = (int)MathFunctions.CalculatePercent(nRead' length);  	saveStream.Write (readBytes' 0' bytesread);  }  while (true);  
Magic Number,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,DownloadFileQuick,The following statement contains a magic number: do {  	byte[] readBytes = new byte[1024];  	int bytesread = theResponse.GetResponseStream ().Read (readBytes' 0' 1024);  	nRead += bytesread;  	if (bytesread == 0)  		break;  	//int percent = (int)MathFunctions.CalculatePercent(nRead' length);  	saveStream.Write (readBytes' 0' bytesread);  }  while (true);  
Magic Number,PMDCP.Net,NetTools,C:\repos\pmdcp_framework\Net\NetTools.cs,IsConnected,The following statement contains a magic number: try {  	using (Ping ping = new Ping ()) {  		foreach (string url in Mysite) {  			PingReply replyMsg = ping.Send (url' 300);  			if (replyMsg.Status == IPStatus.Success) {  				success = true;  				break;  			}  		}  	}  }  catch (Exception ex) {  }  
Magic Number,PMDCP.Net,NetTools,C:\repos\pmdcp_framework\Net\NetTools.cs,IsConnected,The following statement contains a magic number: using (Ping ping = new Ping ()) {  	foreach (string url in Mysite) {  		PingReply replyMsg = ping.Send (url' 300);  		if (replyMsg.Status == IPStatus.Success) {  			success = true;  			break;  		}  	}  }  
Magic Number,PMDCP.Net,NetTools,C:\repos\pmdcp_framework\Net\NetTools.cs,IsConnected,The following statement contains a magic number: foreach (string url in Mysite) {  	PingReply replyMsg = ping.Send (url' 300);  	if (replyMsg.Status == IPStatus.Success) {  		success = true;  		break;  	}  }  
Magic Number,PMDCP.Net,UPnP,C:\repos\pmdcp_framework\Net\UPnP.cs,Discover,The following statement contains a magic number: do {  	s.SendTo (data' ipe);  	s.SendTo (data' ipe);  	s.SendTo (data' ipe);  	int length = 0;  	do {  		length = s.Receive (buffer);  		string resp = Encoding.ASCII.GetString (buffer' 0' length).ToLower ();  		if (resp.Contains ("upnp:rootdevice")) {  			resp = resp.Substring (resp.ToLower ().IndexOf ("location:") + 9);  			resp = resp.Substring (0' resp.IndexOf ("\r")).Trim ();  			if (!string.IsNullOrEmpty (_serviceUrl = GetServiceUrl (resp))) {  				_descUrl = resp;  				return true;  			}  		}  	}  	while (length > 0);  }  while (start.Subtract (DateTime.Now) < _timeout);  
Magic Number,PMDCP.Net,UPnP,C:\repos\pmdcp_framework\Net\UPnP.cs,Discover,The following statement contains a magic number: do {  	length = s.Receive (buffer);  	string resp = Encoding.ASCII.GetString (buffer' 0' length).ToLower ();  	if (resp.Contains ("upnp:rootdevice")) {  		resp = resp.Substring (resp.ToLower ().IndexOf ("location:") + 9);  		resp = resp.Substring (0' resp.IndexOf ("\r")).Trim ();  		if (!string.IsNullOrEmpty (_serviceUrl = GetServiceUrl (resp))) {  			_descUrl = resp;  			return true;  		}  	}  }  while (length > 0);  
Magic Number,PMDCP.Net,UPnP,C:\repos\pmdcp_framework\Net\UPnP.cs,Discover,The following statement contains a magic number: if (resp.Contains ("upnp:rootdevice")) {  	resp = resp.Substring (resp.ToLower ().IndexOf ("location:") + 9);  	resp = resp.Substring (0' resp.IndexOf ("\r")).Trim ();  	if (!string.IsNullOrEmpty (_serviceUrl = GetServiceUrl (resp))) {  		_descUrl = resp;  		return true;  	}  }  
Magic Number,PMDCP.Net,UPnP,C:\repos\pmdcp_framework\Net\UPnP.cs,Discover,The following statement contains a magic number: resp = resp.Substring (resp.ToLower ().IndexOf ("location:") + 9);  
Magic Number,PMDCP.Net,UPnP,C:\repos\pmdcp_framework\Net\UPnP.cs,CombineUrls,The following statement contains a magic number: n = resp.IndexOf ('/'' n + 3);  
Missing Default,PMDCP.Net,FileDownloader,C:\repos\pmdcp_framework\Net\FileDownloader.cs,downloadBWorker_ProgressChanged,The following switch statement is missing a default case: switch ((string)data [0]) {  case "downloading":  	{  		FileDownloadingEventArgs downloadInfo = data [1] as FileDownloadingEventArgs;  		if (DownloadUpdate != null)  			DownloadUpdate (this' downloadInfo);  	}  	break;  case "done":  	{  		FileDownloadingEventArgs downloadInfo = data [1] as FileDownloadingEventArgs;  		if (DownloadComplete != null)  			DownloadComplete (this' downloadInfo);  	}  	break;  case "error":  	{  		if (DownloadFailed != null)  			DownloadFailed (this' new FileDownloadErrorEventArgs (data [1] as Exception));  	}  	break;  }  
