Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MotionGestures,MotionSwipeGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionSwipeGestureRecognizer.cs,velocityHighEnough,Cyclomatic complexity of the method is 13
Long Identifier,MotionGestures,MotionRotationRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionRotationRecognizer.cs,,The length of the parameter MinimumNumberOfFingersRequired is 30.
Long Identifier,MotionGestures,MotionRotationRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionRotationRecognizer.cs,,The length of the parameter MotionMinimumRotationThreshold is 30.
Long Identifier,MotionGestures,MotionTapGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionTapGestureRecognizer.cs,,The length of the parameter MotionTapDownBeginZEndThreshold is 31.
Long Statement,MotionGestures,MotionPinchGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionPinchGestureRecognizer.cs,distanceBetweenPoints,The length of the statement  "            double dist = Math.Sqrt(Math.Pow((leftPoint.x - rightPoint.x)' 2) + Math.Pow((leftPoint.y - rightPoint.y)' 2) + Math.Pow((leftPoint.z - rightPoint.z)' 2)); " is 155.
Long Statement,MotionGestures,MotionRotationRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionRotationRecognizer.cs,isRotating,The length of the statement  "                if (this.PossibleDirections.HasFlag(MotionRotationGestureRecognizerDirection.MotionRotationGestureRecognizerDirectionClockwise)) " is 128.
Long Statement,MotionGestures,MotionRotationRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionRotationRecognizer.cs,isRotating,The length of the statement  "                if (this.PossibleDirections.HasFlag(MotionRotationGestureRecognizerDirection.MotionRotationGestureRecognizerDirectionCounterClockwise)) " is 135.
Long Statement,MotionGestures,MotionTapGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionTapGestureRecognizer.cs,processTouchVectors,The length of the statement  "                    if (averages.velocityAverage.y < MotionTapDownBeginYThreshold && averages.velocityAverage.z < MotionTapDownBeginZThreshold) " is 123.
Long Statement,MotionGestures,MotionTapGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionTapGestureRecognizer.cs,processTouchVectors,The length of the statement  "                    if (averages.velocityAverage.y > MotionTapDownBeginYThreshold && averages.velocityAverage.z > MotionTapDownBeginZThreshold) " is 123.
Long Statement,MotionGestures,MotionTapGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionTapGestureRecognizer.cs,processTouchVectors,The length of the statement  "                    if (averages.velocityAverage.y > MotionTapDownBeginZThreshold && averages.velocityAverage.z > MotionTapDownBeginZEndThreshold) " is 126.
Long Statement,MotionGestures,MotionTapGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionTapGestureRecognizer.cs,processTouchVectors,The length of the statement  "                    else if (averages.velocityAverage.y > MotionTapDownBeginYThreshold && averages.velocityAverage.z > MotionTapDownBeginZThreshold) " is 128.
Magic Number,PanGestureDemo,MainWindow,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\MainWindow.xaml.cs,motionDidPan,The following statement contains a magic number: if (recognizer.state == MotionGestureRecognizerState.MotionGestureRecognizerStateBegan)              {                  System.Console.WriteLine("Pan did Begin");              }              else if (recognizer.state == MotionGestureRecognizerState.MotionGestureRecognizerStateChanged)              {                  Point newPoint = MotionGestureRecognizer.locationOfVectorInWindow(recognizer.centerPoint' this' 2);                  Thickness t = new Thickness(newPoint.X' newPoint.Y' 100' 100);                                    mainWindow.Dispatcher.BeginInvoke(DispatcherPriority.Background' new Action(() => this.mainCanvas.Margin = t));              }              else if (recognizer.state == MotionGestureRecognizerState.MotionGestureRecognizerStateEnded)              {                  System.Console.WriteLine("Pan did End");              }
Magic Number,PanGestureDemo,MainWindow,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\MainWindow.xaml.cs,motionDidPan,The following statement contains a magic number: if (recognizer.state == MotionGestureRecognizerState.MotionGestureRecognizerStateBegan)              {                  System.Console.WriteLine("Pan did Begin");              }              else if (recognizer.state == MotionGestureRecognizerState.MotionGestureRecognizerStateChanged)              {                  Point newPoint = MotionGestureRecognizer.locationOfVectorInWindow(recognizer.centerPoint' this' 2);                  Thickness t = new Thickness(newPoint.X' newPoint.Y' 100' 100);                                    mainWindow.Dispatcher.BeginInvoke(DispatcherPriority.Background' new Action(() => this.mainCanvas.Margin = t));              }              else if (recognizer.state == MotionGestureRecognizerState.MotionGestureRecognizerStateEnded)              {                  System.Console.WriteLine("Pan did End");              }
Magic Number,PanGestureDemo,MainWindow,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\MainWindow.xaml.cs,motionDidPan,The following statement contains a magic number: if (recognizer.state == MotionGestureRecognizerState.MotionGestureRecognizerStateBegan)              {                  System.Console.WriteLine("Pan did Begin");              }              else if (recognizer.state == MotionGestureRecognizerState.MotionGestureRecognizerStateChanged)              {                  Point newPoint = MotionGestureRecognizer.locationOfVectorInWindow(recognizer.centerPoint' this' 2);                  Thickness t = new Thickness(newPoint.X' newPoint.Y' 100' 100);                                    mainWindow.Dispatcher.BeginInvoke(DispatcherPriority.Background' new Action(() => this.mainCanvas.Margin = t));              }              else if (recognizer.state == MotionGestureRecognizerState.MotionGestureRecognizerStateEnded)              {                  System.Console.WriteLine("Pan did End");              }
Magic Number,PanGestureDemo,MainWindow,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainWindow = ((PanGestureDemo.MainWindow)(target));                            #line 5 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.WindowIsLoaded);                            #line default              #line hidden              return;              case 2:              this.mainCanvas = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,MotionGestures,MotionGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionGestureRecognizer.cs,locationOfVectorInWindow,The following statement contains a magic number: if (leapVector.x <= 0)              {                  if (leapVector.x * scalar < MotionXMinimum)                  {                      xPosition = leapVector.x * scalar - MotionXMinimum;                  }                  else                  {                      xPosition = (double)Math.Abs(MotionXMinimum - leapVector.x * scalar);                  }              }              else              {                  xPosition = leapVector.x * 2 + MotionXDomain / 2;              }
Magic Number,MotionGestures,MotionGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionGestureRecognizer.cs,locationOfVectorInWindow,The following statement contains a magic number: if (leapVector.x <= 0)              {                  if (leapVector.x * scalar < MotionXMinimum)                  {                      xPosition = leapVector.x * scalar - MotionXMinimum;                  }                  else                  {                      xPosition = (double)Math.Abs(MotionXMinimum - leapVector.x * scalar);                  }              }              else              {                  xPosition = leapVector.x * 2 + MotionXDomain / 2;              }
Magic Number,MotionGestures,MotionGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionGestureRecognizer.cs,locationOfVectorInWindow,The following statement contains a magic number: double yMidpoint = MotionYDomain / 2;
Magic Number,MotionGestures,MotionGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionGestureRecognizer.cs,locationOfVectorInWindow,The following statement contains a magic number: double newY = -yDifference + MotionYDomain / 2;
Magic Number,MotionGestures,MotionGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionGestureRecognizer.cs,longRandom,The following statement contains a magic number: byte[] buf = new byte[8];
Magic Number,MotionGestures,MotionGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionGestureRecognizer.cs,longRandom,The following statement contains a magic number: return (Math.Abs(longRand % (99999999999999999 - 1)) + 1);
Magic Number,MotionGestures,MotionPinchGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionPinchGestureRecognizer.cs,leftPinchPoint,The following statement contains a magic number: if (this.NumberOfHandsRequired == 2 && this.hands.Count == 2) {                  return avgVectorForHand(hands[0]);      }      else {          if (this.hands[0] != null) {              Hand hand = hands[0];              if (hand.Fingers.Count == 2) {                  return hand.Fingers[0].TipPosition;              }          }      }
Magic Number,MotionGestures,MotionPinchGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionPinchGestureRecognizer.cs,leftPinchPoint,The following statement contains a magic number: if (this.NumberOfHandsRequired == 2 && this.hands.Count == 2) {                  return avgVectorForHand(hands[0]);      }      else {          if (this.hands[0] != null) {              Hand hand = hands[0];              if (hand.Fingers.Count == 2) {                  return hand.Fingers[0].TipPosition;              }          }      }
Magic Number,MotionGestures,MotionPinchGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionPinchGestureRecognizer.cs,leftPinchPoint,The following statement contains a magic number: if (this.NumberOfHandsRequired == 2 && this.hands.Count == 2) {                  return avgVectorForHand(hands[0]);      }      else {          if (this.hands[0] != null) {              Hand hand = hands[0];              if (hand.Fingers.Count == 2) {                  return hand.Fingers[0].TipPosition;              }          }      }
Magic Number,MotionGestures,MotionPinchGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionPinchGestureRecognizer.cs,rightPinchPoint,The following statement contains a magic number: if (this.NumberOfHandsRequired == 2 && hands.Count == 2) {          return avgVectorForHand(hands[1]);      }      else {          if (hands[0] != null) {              Hand hand = hands[0];              if (hand.Fingers.Count == 2) {                  return hand.Fingers[1].TipPosition;              }          }      }
Magic Number,MotionGestures,MotionPinchGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionPinchGestureRecognizer.cs,rightPinchPoint,The following statement contains a magic number: if (this.NumberOfHandsRequired == 2 && hands.Count == 2) {          return avgVectorForHand(hands[1]);      }      else {          if (hands[0] != null) {              Hand hand = hands[0];              if (hand.Fingers.Count == 2) {                  return hand.Fingers[1].TipPosition;              }          }      }
Magic Number,MotionGestures,MotionPinchGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionPinchGestureRecognizer.cs,rightPinchPoint,The following statement contains a magic number: if (this.NumberOfHandsRequired == 2 && hands.Count == 2) {          return avgVectorForHand(hands[1]);      }      else {          if (hands[0] != null) {              Hand hand = hands[0];              if (hand.Fingers.Count == 2) {                  return hand.Fingers[1].TipPosition;              }          }      }
Magic Number,MotionGestures,MotionPinchGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionPinchGestureRecognizer.cs,distanceBetweenPoints,The following statement contains a magic number: double dist = Math.Sqrt(Math.Pow((leftPoint.x - rightPoint.x)' 2) + Math.Pow((leftPoint.y - rightPoint.y)' 2) + Math.Pow((leftPoint.z - rightPoint.z)' 2));
Magic Number,MotionGestures,MotionPinchGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionPinchGestureRecognizer.cs,distanceBetweenPoints,The following statement contains a magic number: double dist = Math.Sqrt(Math.Pow((leftPoint.x - rightPoint.x)' 2) + Math.Pow((leftPoint.y - rightPoint.y)' 2) + Math.Pow((leftPoint.z - rightPoint.z)' 2));
Magic Number,MotionGestures,MotionPinchGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionPinchGestureRecognizer.cs,distanceBetweenPoints,The following statement contains a magic number: double dist = Math.Sqrt(Math.Pow((leftPoint.x - rightPoint.x)' 2) + Math.Pow((leftPoint.y - rightPoint.y)' 2) + Math.Pow((leftPoint.z - rightPoint.z)' 2));
Magic Number,MotionGestures,MotionRotationRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionRotationRecognizer.cs,isRotating,The following statement contains a magic number: if (this.hands[0] != null)              {                  //Get Direction Vector                  Vector newDirection = this.hands[0].Direction;                    float difference = (100 * newDirection.x) - (100 * handDirection.x);                  float absoluteDifference = Math.Abs(difference);                    if (this.PossibleDirections.HasFlag(MotionRotationGestureRecognizerDirection.MotionRotationGestureRecognizerDirectionClockwise))                  {                        if (newDirection.x > handDirection.x && absoluteDifference > MotionMinimumRotationThreshold)                      {                          Direction = MotionRotationGestureRecognizerDirection.MotionRotationGestureRecognizerDirectionClockwise;                          handDirection = newDirection;                          return true;                      }                    }                  if (this.PossibleDirections.HasFlag(MotionRotationGestureRecognizerDirection.MotionRotationGestureRecognizerDirectionCounterClockwise))                  {                      if (newDirection.x < handDirection.x && absoluteDifference > MotionMinimumRotationThreshold)                      {                          Direction = MotionRotationGestureRecognizerDirection.MotionRotationGestureRecognizerDirectionCounterClockwise;                          handDirection = newDirection;                          return true;                      }                        handDirection = newDirection;                  }              }
Magic Number,MotionGestures,MotionRotationRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionRotationRecognizer.cs,isRotating,The following statement contains a magic number: if (this.hands[0] != null)              {                  //Get Direction Vector                  Vector newDirection = this.hands[0].Direction;                    float difference = (100 * newDirection.x) - (100 * handDirection.x);                  float absoluteDifference = Math.Abs(difference);                    if (this.PossibleDirections.HasFlag(MotionRotationGestureRecognizerDirection.MotionRotationGestureRecognizerDirectionClockwise))                  {                        if (newDirection.x > handDirection.x && absoluteDifference > MotionMinimumRotationThreshold)                      {                          Direction = MotionRotationGestureRecognizerDirection.MotionRotationGestureRecognizerDirectionClockwise;                          handDirection = newDirection;                          return true;                      }                    }                  if (this.PossibleDirections.HasFlag(MotionRotationGestureRecognizerDirection.MotionRotationGestureRecognizerDirectionCounterClockwise))                  {                      if (newDirection.x < handDirection.x && absoluteDifference > MotionMinimumRotationThreshold)                      {                          Direction = MotionRotationGestureRecognizerDirection.MotionRotationGestureRecognizerDirectionCounterClockwise;                          handDirection = newDirection;                          return true;                      }                        handDirection = newDirection;                  }              }
Magic Number,MotionGestures,MotionSwipeGestureRecognizer,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\Motion Gestures\MotionSwipeGestureRecognizer.cs,positionDidUpdate,The following statement contains a magic number: if (this.hands.Count == this.NumberOfHandsRequired)              {                  if (isDesiredNumberOfFingersPerHand())                  {                      MotionAverages averages = averageVectorForHands();                        if (averages != null)                      {                          if (velocityHighEnough(averages))                          {                              switch (this.state) {                              case MotionGestureRecognizerState.MotionGestureRecognizerStatePossible:                                  //Helps with false positives due to change of direction                                  if (accelerationCounter > 3) {                                      accelerationCounter = 0;                                      this.state = MotionGestureRecognizerState.MotionGestureRecognizerStateBegan;                                  }                                  else {                                      accelerationCounter++;                                  }                                  break;                              case MotionGestureRecognizerState.MotionGestureRecognizerStateBegan:                                  this.state = MotionGestureRecognizerState.MotionGestureRecognizerStateChanged;                                  break;                              case MotionGestureRecognizerState.MotionGestureRecognizerStateChanged:                                  this.state = MotionGestureRecognizerState.MotionGestureRecognizerStateChanged;                                  break;                                                                default:                                  break;                          }                          }                          else                          {                              switch (this.state)                              {                                  case MotionGestureRecognizerState.MotionGestureRecognizerStateBegan:                                      if (decelerationCounter > 1)                                      {                                          decelerationCounter = 0;                                          this.state = MotionGestureRecognizerState.MotionGestureRecognizerStateEnded;                                      }                                      else                                      {                                          decelerationCounter++;                                      }                                      break;                                  case MotionGestureRecognizerState.MotionGestureRecognizerStateChanged:                                      if (decelerationCounter > 1)                                      {                                          decelerationCounter = 0;                                          this.state = MotionGestureRecognizerState.MotionGestureRecognizerStateEnded;                                      }                                      else                                      {                                          decelerationCounter++;                                      }                                      break;                                  case MotionGestureRecognizerState.MotionGestureRecognizerStateEnded:                                      this.state = MotionGestureRecognizerState.MotionGestureRecognizerStatePossible;                                      break;                                  default:                                      break;                              }                          }                            //Callback                          callback();                      }                    }              }
Missing Default,PanGestureDemo,MainWindow,C:\repos\uacaps_MotionGestureRecognizers-CSharp\Demos\PanGestureDemo\PanGestureDemo\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.mainWindow = ((PanGestureDemo.MainWindow)(target));                            #line 5 "..\..\MainWindow.xaml"              this.mainWindow.Loaded += new System.Windows.RoutedEventHandler(this.WindowIsLoaded);                            #line default              #line hidden              return;              case 2:              this.mainCanvas = ((System.Windows.Controls.Canvas)(target));              return;              }
